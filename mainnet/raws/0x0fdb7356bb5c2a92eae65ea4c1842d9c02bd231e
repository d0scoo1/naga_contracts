{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PolicyBookFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/DecimalsConverter.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IShieldMining.sol\\\";\\r\\nimport \\\"./interfaces/ILiquidityRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IPolicyBookAdmin.sol\\\";\\r\\nimport \\\"./interfaces/IPolicyBookFacade.sol\\\";\\r\\nimport \\\"./interfaces/helpers/IPriceFeed.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IPolicyBookRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IRewardsGenerator.sol\\\";\\r\\nimport \\\"./interfaces/IPolicyQuote.sol\\\";\\r\\nimport \\\"./interfaces/IClaimingRegistry.sol\\\";\\r\\n\\r\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\r\\n\\r\\nimport \\\"./Globals.sol\\\";\\r\\n\\r\\ncontract PolicyBookFacade is IPolicyBookFacade, AbstractDependant, Initializable {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using Math for uint256;\\r\\n\\r\\n    uint256 public constant MINUMUM_COVERAGE = 100 * DECIMALS18; // 100 STBL\\r\\n\\r\\n    uint256 public constant EPOCH_DURATION = 1 weeks;\\r\\n    uint256 public constant MAXIMUM_EPOCHS = SECONDS_IN_THE_YEAR / EPOCH_DURATION;\\r\\n\\r\\n    uint256 public constant RISKY_UTILIZATION_RATIO = 80 * PRECISION;\\r\\n    uint256 public constant MODERATE_UTILIZATION_RATIO = 50 * PRECISION;\\r\\n\\r\\n    uint256 public constant MINIMUM_REWARD = 15 * PRECISION; // 0.15\\r\\n    uint256 public constant MAXIMUM_REWARD = 2 * PERCENTAGE_100; // 2.0\\r\\n    uint256 public constant BASE_REWARD = PERCENTAGE_100; // 1.0\\r\\n\\r\\n    IPolicyBookAdmin public policyBookAdmin;\\r\\n    ILeveragePortfolio public reinsurancePool;\\r\\n    IPolicyBook public override policyBook;\\r\\n    IShieldMining public shieldMining;\\r\\n    IPolicyBookRegistry public policyBookRegistry;\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    ILiquidityRegistry public liquidityRegistry;\\r\\n\\r\\n    address public capitalPoolAddress;\\r\\n    address public priceFeed;\\r\\n\\r\\n    // virtual funds deployed by reinsurance pool\\r\\n    uint256 public override VUreinsurnacePool;\\r\\n    // leverage funds deployed by reinsurance pool\\r\\n    uint256 public override LUreinsurnacePool;\\r\\n    // leverage funds deployed by user leverage pool\\r\\n    mapping(address => uint256) public override LUuserLeveragePool;\\r\\n    // total leverage funds deployed to the pool sum of (VUreinsurnacePool,LUreinsurnacePool,LUuserLeveragePool)\\r\\n    uint256 public override totalLeveragedLiquidity;\\r\\n\\r\\n    uint256 public override userleveragedMPL;\\r\\n    uint256 public override reinsurancePoolMPL;\\r\\n\\r\\n    uint256 public override rebalancingThreshold;\\r\\n\\r\\n    bool public override safePricingModel;\\r\\n\\r\\n    mapping(address => uint256) public override userLiquidity;\\r\\n\\r\\n    EnumerableSet.AddressSet internal userLeveragePools;\\r\\n\\r\\n    IRewardsGenerator public rewardsGenerator;\\r\\n\\r\\n    IPolicyQuote public policyQuote;\\r\\n\\r\\n    IClaimingRegistry public claimingRegistry;\\r\\n\\r\\n    event DeployLeverageFunds(uint256 _deployedAmount);\\r\\n\\r\\n    modifier onlyCapitalPool() {\\r\\n        require(msg.sender == capitalPoolAddress, \\\"PBFC: only CapitalPool\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicyBookAdmin() {\\r\\n        require(msg.sender == address(policyBookAdmin), \\\"PBFC: Not a PBA\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyLeveragePortfolio() {\\r\\n        require(\\r\\n            msg.sender == address(reinsurancePool) ||\\r\\n                policyBookRegistry.isUserLeveragePool(msg.sender),\\r\\n            \\\"PBFC: only LeveragePortfolio\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicyBookRegistry() {\\r\\n        require(msg.sender == address(policyBookRegistry), \\\"PBFC: Not a policy book registry\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicyBook() {\\r\\n        require(msg.sender == address(policyBook), \\\"PBFC: Not a policy book\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function __PolicyBookFacade_init(\\r\\n        address pbProxy,\\r\\n        address liquidityProvider,\\r\\n        uint256 _initialDeposit\\r\\n    ) external override initializer {\\r\\n        policyBook = IPolicyBook(pbProxy);\\r\\n        rebalancingThreshold = DEFAULT_REBALANCING_THRESHOLD;\\r\\n        userLiquidity[liquidityProvider] = _initialDeposit;\\r\\n    }\\r\\n\\r\\n    function setDependencies(IContractsRegistry contractsRegistry)\\r\\n        external\\r\\n        override\\r\\n        onlyInjectorOrZero\\r\\n    {\\r\\n        IContractsRegistry _contractsRegistry = IContractsRegistry(contractsRegistry);\\r\\n\\r\\n        capitalPoolAddress = _contractsRegistry.getCapitalPoolContract();\\r\\n        policyBookRegistry = IPolicyBookRegistry(\\r\\n            _contractsRegistry.getPolicyBookRegistryContract()\\r\\n        );\\r\\n        liquidityRegistry = ILiquidityRegistry(_contractsRegistry.getLiquidityRegistryContract());\\r\\n        policyBookAdmin = IPolicyBookAdmin(_contractsRegistry.getPolicyBookAdminContract());\\r\\n        priceFeed = _contractsRegistry.getPriceFeedContract();\\r\\n        reinsurancePool = ILeveragePortfolio(_contractsRegistry.getReinsurancePoolContract());\\r\\n        policyQuote = IPolicyQuote(_contractsRegistry.getPolicyQuoteContract());\\r\\n        shieldMining = IShieldMining(_contractsRegistry.getShieldMiningContract());\\r\\n        rewardsGenerator = IRewardsGenerator(_contractsRegistry.getRewardsGeneratorContract());\\r\\n        claimingRegistry = IClaimingRegistry(_contractsRegistry.getClaimingRegistryContract());\\r\\n    }\\r\\n\\r\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\r\\n    /// @param _epochsNumber is number of seconds to cover\\r\\n    /// @param _coverTokens is number of tokens to cover\\r\\n    function buyPolicy(uint256 _epochsNumber, uint256 _coverTokens) external override {\\r\\n        _buyPolicy(msg.sender, msg.sender, _epochsNumber, _coverTokens, 0, address(0));\\r\\n    }\\r\\n\\r\\n    function buyPolicyFor(\\r\\n        address _holder,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens\\r\\n    ) external override {\\r\\n        _buyPolicy(msg.sender, _holder, _epochsNumber, _coverTokens, 0, address(0));\\r\\n    }\\r\\n\\r\\n    function buyPolicyFromDistributor(\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _distributor\\r\\n    ) external override {\\r\\n        uint256 _distributorFee = policyBookAdmin.distributorFees(_distributor);\\r\\n        _buyPolicy(\\r\\n            msg.sender,\\r\\n            msg.sender,\\r\\n            _epochsNumber,\\r\\n            _coverTokens,\\r\\n            _distributorFee,\\r\\n            _distributor\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\r\\n    /// @param _holder address user the policy is being \\\"bought for\\\"\\r\\n    /// @param _epochsNumber is number of seconds to cover\\r\\n    /// @param _coverTokens is number of tokens to cover\\r\\n    function buyPolicyFromDistributorFor(\\r\\n        address _holder,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _distributor\\r\\n    ) external override {\\r\\n        uint256 _distributorFee = policyBookAdmin.distributorFees(_distributor);\\r\\n        _buyPolicy(\\r\\n            msg.sender,\\r\\n            _holder,\\r\\n            _epochsNumber,\\r\\n            _coverTokens,\\r\\n            _distributorFee,\\r\\n            _distributor\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidity(uint256 _liquidityAmount) external override {\\r\\n        _addLiquidity(msg.sender, msg.sender, _liquidityAmount, 0);\\r\\n    }\\r\\n\\r\\n    function addLiquidityFromDistributorFor(address _liquidityHolderAddr, uint256 _liquidityAmount)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        _addLiquidity(msg.sender, _liquidityHolderAddr, _liquidityAmount, 0);\\r\\n    }\\r\\n\\r\\n    /// @dev access: ANY\\r\\n    function addLiquidityAndStakeFor(\\r\\n        address _liquidityHolderAddr,\\r\\n        uint256 _liquidityAmount,\\r\\n        uint256 _stakeSTBLAmount\\r\\n    ) external override {\\r\\n        _addLiquidity(msg.sender, _liquidityHolderAddr, _liquidityAmount, _stakeSTBLAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin and stake it,\\r\\n    /// @dev access: ANY\\r\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        _addLiquidity(msg.sender, msg.sender, _liquidityAmount, _stakeSTBLAmount);\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(\\r\\n        address _liquidityBuyerAddr,\\r\\n        address _liquidityHolderAddr,\\r\\n        uint256 _liquidityAmount,\\r\\n        uint256 _stakeSTBLAmount\\r\\n    ) internal {\\r\\n        uint256 _tokensToAdd =\\r\\n            policyBook.addLiquidity(\\r\\n                _liquidityBuyerAddr,\\r\\n                _liquidityHolderAddr,\\r\\n                _liquidityAmount,\\r\\n                _stakeSTBLAmount\\r\\n            );\\r\\n\\r\\n        _reevaluateProvidedLeverageStable(_liquidityAmount);\\r\\n        _updateShieldMining(_liquidityHolderAddr, _tokensToAdd, false);\\r\\n    }\\r\\n\\r\\n    function _buyPolicy(\\r\\n        address _policyBuyerAddr,\\r\\n        address _policyHolderAddr,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        uint256 _distributorFee,\\r\\n        address _distributor\\r\\n    ) internal {\\r\\n        policyBook.buyPolicy(\\r\\n            _policyBuyerAddr,\\r\\n            _policyHolderAddr,\\r\\n            _epochsNumber,\\r\\n            _coverTokens,\\r\\n            _distributorFee,\\r\\n            _distributor\\r\\n        );\\r\\n\\r\\n        _deployLeveragedFunds();\\r\\n    }\\r\\n\\r\\n    function _reevaluateProvidedLeverageStable(uint256 newAmount) internal {\\r\\n        uint256 _newAmountPercentage;\\r\\n        uint256 _totalLiq = policyBook.totalLiquidity();\\r\\n\\r\\n        if (_totalLiq > 0) {\\r\\n            _newAmountPercentage = newAmount.mul(PERCENTAGE_100).div(_totalLiq);\\r\\n        }\\r\\n        if ((_totalLiq > 0 && _newAmountPercentage > rebalancingThreshold) || _totalLiq == 0) {\\r\\n            _deployLeveragedFunds();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@dev in case ur changed of the pools by commit a claim or policy expired\\r\\n    function reevaluateProvidedLeverageStable() external override onlyPolicyBook {\\r\\n        _deployLeveragedFunds();\\r\\n    }\\r\\n\\r\\n    /// @notice deploy leverage funds (RP lStable, ULP lStable)\\r\\n    /// @param  deployedAmount uint256 the deployed amount to be added or substracted from the total liquidity\\r\\n    /// @param leveragePool whether user leverage or reinsurance leverage\\r\\n    function deployLeverageFundsAfterRebalance(\\r\\n        uint256 deployedAmount,\\r\\n        ILeveragePortfolio.LeveragePortfolio leveragePool\\r\\n    ) external override onlyLeveragePortfolio {\\r\\n        if (leveragePool == ILeveragePortfolio.LeveragePortfolio.USERLEVERAGEPOOL) {\\r\\n            LUuserLeveragePool[msg.sender] = deployedAmount;\\r\\n            LUuserLeveragePool[msg.sender] > 0\\r\\n                ? userLeveragePools.add(msg.sender)\\r\\n                : userLeveragePools.remove(msg.sender);\\r\\n        } else {\\r\\n            LUreinsurnacePool = deployedAmount;\\r\\n        }\\r\\n        uint256 _LUuserLeveragePool;\\r\\n        for (uint256 i = 0; i < userLeveragePools.length(); i++) {\\r\\n            _LUuserLeveragePool = _LUuserLeveragePool.add(\\r\\n                LUuserLeveragePool[userLeveragePools.at(i)]\\r\\n            );\\r\\n        }\\r\\n        totalLeveragedLiquidity = VUreinsurnacePool.add(LUreinsurnacePool).add(\\r\\n            _LUuserLeveragePool\\r\\n        );\\r\\n        emit DeployLeverageFunds(deployedAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice deploy virtual funds (RP vStable)\\r\\n    /// @param  deployedAmount uint256 the deployed amount to be added to the liquidity\\r\\n    function deployVirtualFundsAfterRebalance(uint256 deployedAmount)\\r\\n        external\\r\\n        override\\r\\n        onlyLeveragePortfolio\\r\\n    {\\r\\n        VUreinsurnacePool = deployedAmount;\\r\\n        uint256 _LUuserLeveragePool;\\r\\n        for (uint256 i = 0; i < userLeveragePools.length(); i++) {\\r\\n            _LUuserLeveragePool = _LUuserLeveragePool.add(\\r\\n                LUuserLeveragePool[userLeveragePools.at(i)]\\r\\n            );\\r\\n        }\\r\\n        totalLeveragedLiquidity = VUreinsurnacePool.add(LUreinsurnacePool).add(\\r\\n            _LUuserLeveragePool\\r\\n        );\\r\\n        emit DeployLeverageFunds(deployedAmount);\\r\\n    }\\r\\n\\r\\n    function _deployLeveragedFunds() internal {\\r\\n        uint256 _deployedAmount;\\r\\n\\r\\n        uint256 _LUuserLeveragePool;\\r\\n\\r\\n        _deployedAmount = reinsurancePool.deployVirtualStableToCoveragePools();\\r\\n        VUreinsurnacePool = _deployedAmount;\\r\\n\\r\\n        _deployedAmount = reinsurancePool.deployLeverageStableToCoveragePools(\\r\\n            ILeveragePortfolio.LeveragePortfolio.REINSURANCEPOOL\\r\\n        );\\r\\n        LUreinsurnacePool = _deployedAmount;\\r\\n\\r\\n        address[] memory _userLeverageArr =\\r\\n            policyBookRegistry.listByType(\\r\\n                IPolicyBookFabric.ContractType.VARIOUS,\\r\\n                0,\\r\\n                policyBookRegistry.countByType(IPolicyBookFabric.ContractType.VARIOUS)\\r\\n            );\\r\\n        for (uint256 i = 0; i < _userLeverageArr.length; i++) {\\r\\n            _deployedAmount = ILeveragePortfolio(_userLeverageArr[i])\\r\\n                .deployLeverageStableToCoveragePools(\\r\\n                ILeveragePortfolio.LeveragePortfolio.USERLEVERAGEPOOL\\r\\n            );\\r\\n            // update user leverage pool apy after rebalancing\\r\\n            ILeveragePortfolio(_userLeverageArr[i]).forceUpdateBMICoverStakingRewardMultiplier();\\r\\n            LUuserLeveragePool[_userLeverageArr[i]] = _deployedAmount;\\r\\n            _deployedAmount > 0\\r\\n                ? userLeveragePools.add(_userLeverageArr[i])\\r\\n                : userLeveragePools.remove(_userLeverageArr[i]);\\r\\n\\r\\n            _LUuserLeveragePool = _LUuserLeveragePool.add(_deployedAmount);\\r\\n        }\\r\\n\\r\\n        totalLeveragedLiquidity = VUreinsurnacePool.add(LUreinsurnacePool).add(\\r\\n            _LUuserLeveragePool\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _updateShieldMining(\\r\\n        address liquidityProvider,\\r\\n        uint256 liquidityAmount,\\r\\n        bool isWithdraw\\r\\n    ) internal {\\r\\n        // check if SM active\\r\\n        if (shieldMining.getShieldTokenAddress(address(policyBook)) != address(0)) {\\r\\n            shieldMining.updateTotalSupply(address(policyBook), address(0), liquidityProvider);\\r\\n        }\\r\\n\\r\\n        if (isWithdraw) {\\r\\n            userLiquidity[liquidityProvider] = userLiquidity[liquidityProvider].sub(\\r\\n                liquidityAmount\\r\\n            );\\r\\n        } else {\\r\\n            userLiquidity[liquidityProvider] = userLiquidity[liquidityProvider].add(\\r\\n                liquidityAmount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\r\\n    function withdrawLiquidity() external override {\\r\\n        uint256 _withdrawAmount = policyBook.withdrawLiquidity(msg.sender);\\r\\n        _reevaluateProvidedLeverageStable(_withdrawAmount);\\r\\n        _updateShieldMining(msg.sender, _withdrawAmount, true);\\r\\n    }\\r\\n\\r\\n    /// @notice set the MPL for the user leverage and the reinsurance leverage\\r\\n    /// @param _userLeverageMPL uint256 value of the user leverage MPL\\r\\n    /// @param _reinsuranceLeverageMPL uint256  value of the reinsurance leverage MPL\\r\\n    function setMPLs(uint256 _userLeverageMPL, uint256 _reinsuranceLeverageMPL)\\r\\n        external\\r\\n        override\\r\\n        onlyPolicyBookAdmin\\r\\n    {\\r\\n        userleveragedMPL = _userLeverageMPL;\\r\\n        reinsurancePoolMPL = _reinsuranceLeverageMPL;\\r\\n    }\\r\\n\\r\\n    /// @notice sets the rebalancing threshold value\\r\\n    /// @param _newRebalancingThreshold uint256 rebalancing threshhold value\\r\\n    function setRebalancingThreshold(uint256 _newRebalancingThreshold)\\r\\n        external\\r\\n        override\\r\\n        onlyPolicyBookAdmin\\r\\n    {\\r\\n        require(_newRebalancingThreshold > 0, \\\"PBF: threshold can not be 0\\\");\\r\\n        rebalancingThreshold = _newRebalancingThreshold;\\r\\n    }\\r\\n\\r\\n    /// @notice sets the rebalancing threshold value\\r\\n    /// @param _safePricingModel bool is pricing model safe (true) or not (false)\\r\\n    function setSafePricingModel(bool _safePricingModel) external override onlyPolicyBookAdmin {\\r\\n        safePricingModel = _safePricingModel;\\r\\n    }\\r\\n\\r\\n    // TODO possible sandwich attack or allowance fluctuation\\r\\n    function getClaimApprovalAmount(address user) external view override returns (uint256) {\\r\\n        (uint256 _coverTokens, , , , ) = policyBook.policyHolders(user);\\r\\n        _coverTokens = DecimalsConverter.convertFrom18(\\r\\n            _coverTokens.div(100),\\r\\n            policyBook.stblDecimals()\\r\\n        );\\r\\n\\r\\n        return IPriceFeed(priceFeed).howManyBMIsInUSDT(_coverTokens);\\r\\n    }\\r\\n\\r\\n    /// @notice upserts a withdraw request\\r\\n    /// @dev prevents adding a request if an already pending or ready request is open.\\r\\n    /// @param _tokensToWithdraw uint256 amount of tokens to withdraw\\r\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external override {\\r\\n        require(_tokensToWithdraw > 0, \\\"PB: Amount is zero\\\");\\r\\n\\r\\n        IPolicyBook.WithdrawalStatus _withdrawlStatus = policyBook.getWithdrawalStatus(msg.sender);\\r\\n\\r\\n        require(\\r\\n            _withdrawlStatus == IPolicyBook.WithdrawalStatus.NONE ||\\r\\n                _withdrawlStatus == IPolicyBook.WithdrawalStatus.EXPIRED,\\r\\n            \\\"PBf: ongoing withdrawl request\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            !claimingRegistry.hasProcedureOngoing(address(policyBook)),\\r\\n            \\\"PBf: ongoing claim procedure\\\"\\r\\n        );\\r\\n\\r\\n        policyBook.requestWithdrawal(_tokensToWithdraw, msg.sender);\\r\\n\\r\\n        liquidityRegistry.registerWithdrawl(address(policyBook), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Used to get a list of user leverage pools which provide leverage to this pool , use with count()\\r\\n    /// @return _userLeveragePools a list containing policybook addresses\\r\\n    function listUserLeveragePools(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory _userLeveragePools)\\r\\n    {\\r\\n        uint256 to = (offset.add(limit)).min(userLeveragePools.length()).max(offset);\\r\\n\\r\\n        _userLeveragePools = new address[](to - offset);\\r\\n\\r\\n        for (uint256 i = offset; i < to; i++) {\\r\\n            _userLeveragePools[i - offset] = userLeveragePools.at(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice get count of user leverage pools which provide leverage to this pool\\r\\n    function countUserLeveragePools() external view override returns (uint256) {\\r\\n        return userLeveragePools.length();\\r\\n    }\\r\\n\\r\\n    function secondsToEndCurrentEpoch() public view override returns (uint256) {\\r\\n        uint256 epochNumber =\\r\\n            block.timestamp.sub(policyBook.epochStartTime()).div(EPOCH_DURATION) + 1;\\r\\n\\r\\n        return\\r\\n            epochNumber.mul(EPOCH_DURATION).sub(block.timestamp.sub(policyBook.epochStartTime()));\\r\\n    }\\r\\n\\r\\n    function forceUpdateBMICoverStakingRewardMultiplier() external override {\\r\\n        uint256 rewardMultiplier;\\r\\n\\r\\n        if (policyBook.whitelisted()) {\\r\\n            rewardMultiplier = MINIMUM_REWARD;\\r\\n            uint256 liquidity = policyBook.totalLiquidity();\\r\\n            uint256 coverTokens = policyBook.totalCoverTokens();\\r\\n\\r\\n            if (coverTokens > 0 && liquidity > 0) {\\r\\n                rewardMultiplier = BASE_REWARD;\\r\\n\\r\\n                uint256 utilizationRatio = coverTokens.mul(PERCENTAGE_100).div(liquidity);\\r\\n\\r\\n                if (utilizationRatio < MODERATE_UTILIZATION_RATIO) {\\r\\n                    rewardMultiplier = Math\\r\\n                        .max(utilizationRatio, PRECISION)\\r\\n                        .sub(PRECISION)\\r\\n                        .mul(BASE_REWARD.sub(MINIMUM_REWARD))\\r\\n                        .div(MODERATE_UTILIZATION_RATIO)\\r\\n                        .add(MINIMUM_REWARD);\\r\\n                } else if (utilizationRatio > RISKY_UTILIZATION_RATIO) {\\r\\n                    rewardMultiplier = MAXIMUM_REWARD\\r\\n                        .sub(BASE_REWARD)\\r\\n                        .mul(utilizationRatio.sub(RISKY_UTILIZATION_RATIO))\\r\\n                        .div(PERCENTAGE_100.sub(RISKY_UTILIZATION_RATIO))\\r\\n                        .add(BASE_REWARD);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        rewardsGenerator.updatePolicyBookShare(rewardMultiplier.div(10**22), address(policyBook)); // 5 decimal places or zero\\r\\n    }\\r\\n\\r\\n    function getPolicyPrice(\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _holder\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256 totalSeconds,\\r\\n            uint256 totalPrice,\\r\\n            uint256 pricePercentage\\r\\n        )\\r\\n    {\\r\\n        require(_coverTokens >= MINUMUM_COVERAGE, \\\"PB: Wrong cover\\\");\\r\\n        require(_epochsNumber > 0 && _epochsNumber <= MAXIMUM_EPOCHS, \\\"PB: Wrong epoch duration\\\");\\r\\n\\r\\n        (uint256 newTotalCoverTokens, uint256 newTotalLiquidity) =\\r\\n            policyBook.getNewCoverAndLiquidity();\\r\\n\\r\\n        totalSeconds = secondsToEndCurrentEpoch().add(_epochsNumber.sub(1).mul(EPOCH_DURATION));\\r\\n        (totalPrice, pricePercentage) = policyQuote.getQuotePredefined(\\r\\n            totalSeconds,\\r\\n            _coverTokens,\\r\\n            newTotalCoverTokens,\\r\\n            newTotalLiquidity,\\r\\n            totalLeveragedLiquidity,\\r\\n            safePricingModel\\r\\n        );\\r\\n\\r\\n        ///@notice commented this because of PB size when adding a new feature\\r\\n        /// and it is not used anymore ATM\\r\\n        // reduce premium by reward NFT locked by user\\r\\n        // uint256 _reductionMultiplier = nftStaking.getUserReductionMultiplier(_holder);\\r\\n        // if (_reductionMultiplier > 0) {\\r\\n        //     totalPrice = totalPrice.sub(totalPrice.mul(_reductionMultiplier).div(PERCENTAGE_100));\\r\\n        // }\\r\\n    }\\r\\n\\r\\n    function info()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            string memory _symbol,\\r\\n            address _insuredContract,\\r\\n            IPolicyBookFabric.ContractType _contractType,\\r\\n            bool _whitelisted\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            ERC20(address(policyBook)).symbol(),\\r\\n            policyBook.insuranceContractAddress(),\\r\\n            policyBook.contractType(),\\r\\n            policyBook.whitelisted()\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libraries/DecimalsConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\n/// @notice the intention of this library is to be able to easily convert\\r\\n///     one amount of tokens with N decimal places\\r\\n///     to another amount with M decimal places\\r\\nlibrary DecimalsConverter {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function convert(\\r\\n        uint256 amount,\\r\\n        uint256 baseDecimals,\\r\\n        uint256 destinationDecimals\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (baseDecimals > destinationDecimals) {\\r\\n            amount = amount.div(10**(baseDecimals - destinationDecimals));\\r\\n        } else if (baseDecimals < destinationDecimals) {\\r\\n            amount = amount.mul(10**(destinationDecimals - baseDecimals));\\r\\n        }\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function convertTo18(uint256 amount, uint256 baseDecimals) internal pure returns (uint256) {\\r\\n        if (baseDecimals == 18) return amount;\\r\\n        return convert(amount, baseDecimals, 18);\\r\\n    }\\r\\n\\r\\n    function convertFrom18(uint256 amount, uint256 destinationDecimals)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (destinationDecimals == 18) return amount;\\r\\n        return convert(amount, 18, destinationDecimals);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/helpers/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPriceFeed {\\n    function howManyBMIsInUSDT(uint256 usdtAmount) external view returns (uint256);\\n\\n    function howManyUSDTsInBMI(uint256 bmiAmount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IShieldMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IShieldMining {\\r\\n    struct ShieldMiningInfo {\\r\\n        IERC20 rewardsToken;\\r\\n        uint8 decimals;\\r\\n        uint256 firstBlockWithReward;\\r\\n        uint256 lastBlockWithReward;\\r\\n        uint256 lastUpdateBlock;\\r\\n        uint256 rewardTokensLocked;\\r\\n        uint256 rewardPerTokenStored;\\r\\n        uint256 totalSupply;\\r\\n        uint256[] endsOfDistribution;\\r\\n        // new state post v2\\r\\n        uint256 nearestLastBlocksWithReward;\\r\\n        // lastBlockWithReward => rewardPerBlock\\r\\n        mapping(uint256 => uint256) rewardPerBlock;\\r\\n    }\\r\\n\\r\\n    struct ShieldMiningDeposit {\\r\\n        address policyBook;\\r\\n        uint256 amount;\\r\\n        uint256 duration;\\r\\n        uint256 depositRewardPerBlock;\\r\\n        uint256 startBlock;\\r\\n        uint256 endBlock;\\r\\n    }\\r\\n\\r\\n    /// TODO document SM functions\\r\\n    function blocksWithRewardsPassed(address _policyBook) external view returns (uint256);\\r\\n\\r\\n    function rewardPerToken(address _policyBook) external view returns (uint256);\\r\\n\\r\\n    function earned(\\r\\n        address _policyBook,\\r\\n        address _userLeveragePool,\\r\\n        address _account\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function updateTotalSupply(\\r\\n        address _policyBook,\\r\\n        address _userLeveragePool,\\r\\n        address liquidityProvider\\r\\n    ) external;\\r\\n\\r\\n    function associateShieldMining(address _policyBook, address _shieldMiningToken) external;\\r\\n\\r\\n    function fillShieldMining(\\r\\n        address _policyBook,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external;\\r\\n\\r\\n    function getRewardFor(\\r\\n        address _userAddress,\\r\\n        address _policyBook,\\r\\n        address _userLeveragePool\\r\\n    ) external;\\r\\n\\r\\n    function getRewardFor(address _userAddress, address _userLeveragePoolAddress) external;\\r\\n\\r\\n    function getReward(address _policyBook, address _userLeveragePool) external;\\r\\n\\r\\n    function getReward(address _userLeveragePoolAddress) external;\\r\\n\\r\\n    function getShieldTokenAddress(address _policyBook) external view returns (address);\\r\\n\\r\\n    function getShieldMiningInfo(address _policyBook)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _rewardsToken,\\r\\n            uint256 _decimals,\\r\\n            uint256 _firstBlockWithReward,\\r\\n            uint256 _lastBlockWithReward,\\r\\n            uint256 _lastUpdateBlock,\\r\\n            uint256 _nearestLastBlocksWithReward,\\r\\n            uint256 _rewardTokensLocked,\\r\\n            uint256 _rewardPerTokenStored,\\r\\n            uint256 _rewardPerBlock,\\r\\n            uint256 _tokenPerDay,\\r\\n            uint256 _totalSupply\\r\\n        );\\r\\n\\r\\n    function getDepositList(\\r\\n        address _account,\\r\\n        uint256 _offset,\\r\\n        uint256 _limit\\r\\n    ) external view returns (ShieldMiningDeposit[] memory _depositsList);\\r\\n\\r\\n    function countUsersDeposits(address _account) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRewardsGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IRewardsGenerator {\\r\\n    struct PolicyBookRewardInfo {\\r\\n        uint256 rewardMultiplier; // includes 5 decimal places\\r\\n        uint256 totalStaked;\\r\\n        uint256 lastUpdateBlock;\\r\\n        uint256 lastCumulativeSum; // includes 100 percentage\\r\\n        uint256 cumulativeReward; // includes 100 percentage\\r\\n    }\\r\\n\\r\\n    struct StakeRewardInfo {\\r\\n        uint256 lastCumulativeSum; // includes 100 percentage\\r\\n        uint256 cumulativeReward;\\r\\n        uint256 stakeAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice this function is called every time policybook's STBL to bmiX rate changes\\r\\n    function updatePolicyBookShare(uint256 newRewardMultiplier, address policyBook) external;\\r\\n\\r\\n    /// @notice aggregates specified nfts into a single one\\r\\n    function aggregate(\\r\\n        address policyBookAddress,\\r\\n        uint256[] calldata nftIndexes,\\r\\n        uint256 nftIndexTo\\r\\n    ) external;\\r\\n\\r\\n    /// @notice informs generator of stake (rewards)\\r\\n    function stake(\\r\\n        address policyBookAddress,\\r\\n        uint256 nftIndex,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice returns policybook's APY multiplied by 10**5\\r\\n    function getPolicyBookAPY(address policyBookAddress) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns policybook's RewardMultiplier multiplied by 10**5\\r\\n    function getPolicyBookRewardMultiplier(address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev returns PolicyBook reward per block multiplied by 10**25\\r\\n    function getPolicyBookRewardPerBlock(address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice returns PolicyBook's staked STBL\\r\\n    function getStakedPolicyBookSTBL(address policyBookAddress) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns NFT's staked STBL\\r\\n    function getStakedNFTSTBL(uint256 nftIndex) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns a reward of NFT\\r\\n    function getReward(address policyBookAddress, uint256 nftIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice informs generator of withdrawal (all funds)\\r\\n    function withdrawFunds(address policyBookAddress, uint256 nftIndex) external returns (uint256);\\r\\n\\r\\n    /// @notice informs generator of withdrawal (rewards)\\r\\n    function withdrawReward(address policyBookAddress, uint256 nftIndex)\\r\\n        external\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyQuote.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPolicyQuote {\\r\\n    /// @notice Let user to calculate policy cost in stable coin, access: ANY\\r\\n    /// @param _durationSeconds is number of seconds to cover\\r\\n    /// @param _tokens is a number of tokens to cover\\r\\n    /// @param _totalCoverTokens is a number of covered tokens\\r\\n    /// @param _totalLiquidity is a liquidity amount\\r\\n    /// @param _totalLeveragedLiquidity is a totale deployed leverage to the pool\\r\\n    /// @param _safePricingModel the pricing model configured for this bool safe or risk\\r\\n    /// @return amount of stable coin policy costs\\r\\n    function getQuotePredefined(\\r\\n        uint256 _durationSeconds,\\r\\n        uint256 _tokens,\\r\\n        uint256 _totalCoverTokens,\\r\\n        uint256 _totalLiquidity,\\r\\n        uint256 _totalLeveragedLiquidity,\\r\\n        bool _safePricingModel\\r\\n    ) external view returns (uint256, uint256);\\r\\n\\r\\n    /// @notice Let user to calculate policy cost in stable coin, access: ANY\\r\\n    /// @param _durationSeconds is number of seconds to cover\\r\\n    /// @param _tokens is number of tokens to cover\\r\\n    /// @param _policyBookAddr is address of policy book\\r\\n    /// @return amount of stable coin policy costs\\r\\n    function getQuote(\\r\\n        uint256 _durationSeconds,\\r\\n        uint256 _tokens,\\r\\n        address _policyBookAddr\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /// @notice setup all pricing model varlues\\r\\n    ///@param _highRiskRiskyAssetThresholdPercentage URRp Utilization ration for pricing model when the assets is considered risky, %\\r\\n    ///@param _lowRiskRiskyAssetThresholdPercentage URRp Utilization ration for pricing model when the assets is not considered risky, %\\r\\n    ///@param _highRiskMinimumCostPercentage MC minimum cost of cover (Premium) when the assets is considered risky, %;\\r\\n    ///@param _lowRiskMinimumCostPercentage MC minimum cost of cover (Premium), when the assets is not considered risky, %\\r\\n    ///@param _minimumInsuranceCost minimum cost of insurance (Premium) , (10**18)\\r\\n    ///@param _lowRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is not considered risky (Premium)\\r\\n    ///@param _lowRiskMaxPercentPremiumCost100Utilization MCI not risky\\r\\n    ///@param _highRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is considered risky (Premium)\\r\\n    ///@param _highRiskMaxPercentPremiumCost100Utilization MCI risky\\r\\n    function setupPricingModel(\\r\\n        uint256 _highRiskRiskyAssetThresholdPercentage,\\r\\n        uint256 _lowRiskRiskyAssetThresholdPercentage,\\r\\n        uint256 _highRiskMinimumCostPercentage,\\r\\n        uint256 _lowRiskMinimumCostPercentage,\\r\\n        uint256 _minimumInsuranceCost,\\r\\n        uint256 _lowRiskMaxPercentPremiumCost,\\r\\n        uint256 _lowRiskMaxPercentPremiumCost100Utilization,\\r\\n        uint256 _highRiskMaxPercentPremiumCost,\\r\\n        uint256 _highRiskMaxPercentPremiumCost100Utilization\\r\\n    ) external;\\r\\n\\r\\n    ///@notice return min ur under the current pricing model\\r\\n    ///@param _safePricingModel pricing model of the pool wethere it is safe or risky model\\r\\n    function getMINUR(bool _safePricingModel) external view returns (uint256 _minUR);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\n\\r\\ninterface IPolicyBookRegistry {\\r\\n    struct PolicyBookStats {\\r\\n        string symbol;\\r\\n        address insuredContract;\\r\\n        IPolicyBookFabric.ContractType contractType;\\r\\n        uint256 maxCapacity;\\r\\n        uint256 totalSTBLLiquidity;\\r\\n        uint256 totalLeveragedLiquidity;\\r\\n        uint256 stakedSTBL;\\r\\n        uint256 APY;\\r\\n        uint256 annualInsuranceCost;\\r\\n        uint256 bmiXRatio;\\r\\n        bool whitelisted;\\r\\n    }\\r\\n\\r\\n    function policyBooksByInsuredAddress(address insuredContract) external view returns (address);\\r\\n\\r\\n    function policyBookFacades(address facadeAddress) external view returns (address);\\r\\n\\r\\n    /// @notice Adds PolicyBook to registry, access: PolicyFabric\\r\\n    function add(\\r\\n        address insuredContract,\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        address policyBook,\\r\\n        address facadeAddress\\r\\n    ) external;\\r\\n\\r\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\r\\n\\r\\n    /// @notice returns required allowances for the policybooks\\r\\n    function getPoliciesPrices(\\r\\n        address[] calldata policyBooks,\\r\\n        uint256[] calldata epochsNumbers,\\r\\n        uint256[] calldata coversTokens\\r\\n    ) external view returns (uint256[] memory _durations, uint256[] memory _allowances);\\r\\n\\r\\n    /// @notice Buys a batch of policies\\r\\n    function buyPolicyBatch(\\r\\n        address[] calldata policyBooks,\\r\\n        uint256[] calldata epochsNumbers,\\r\\n        uint256[] calldata coversTokens\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Checks if provided address is a PolicyBook\\r\\n    function isPolicyBook(address policyBook) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks if provided address is a policyBookFacade\\r\\n    function isPolicyBookFacade(address _facadeAddress) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks if provided address is a user leverage pool\\r\\n    function isUserLeveragePool(address policyBookAddress) external view returns (bool);\\r\\n\\r\\n    /// @notice Returns number of registered PolicyBooks with certain contract type\\r\\n    function countByType(IPolicyBookFabric.ContractType contractType)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice Returns number of registered PolicyBooks, access: ANY\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function countByTypeWhitelisted(IPolicyBookFabric.ContractType contractType)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function countWhitelisted() external view returns (uint256);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with certain contract type, access: ANY\\r\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses with certain contract type\\r\\n    function listByType(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks, access: ANY\\r\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses\\r\\n    function list(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    function listByTypeWhitelisted(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    function listWhitelisted(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with stats and certain contract type, access: ANY\\r\\n    function listWithStatsByType(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with stats, access: ANY\\r\\n    function listWithStats(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    function listWithStatsByTypeWhitelisted(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    function listWithStatsWhitelisted(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Getting stats from policy books, access: ANY\\r\\n    /// @param policyBooks is list of PolicyBooks addresses\\r\\n    function stats(address[] calldata policyBooks)\\r\\n        external\\r\\n        view\\r\\n        returns (PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Return existing Policy Book contract, access: ANY\\r\\n    /// @param insuredContract is contract address to lookup for created IPolicyBook\\r\\n    function policyBookFor(address insuredContract) external view returns (address);\\r\\n\\r\\n    /// @notice Getting stats from policy books, access: ANY\\r\\n    /// @param insuredContracts is list of insuredContracts in registry\\r\\n    function statsByInsuredContracts(address[] calldata insuredContracts)\\r\\n        external\\r\\n        view\\r\\n        returns (PolicyBookStats[] memory _stats);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IPolicyBook.sol\\\";\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\nimport \\\"./ILeveragePortfolio.sol\\\";\\r\\n\\r\\ninterface IPolicyBookFacade {\\r\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    function buyPolicy(uint256 _epochsNumber, uint256 _coverTokens) external;\\r\\n\\r\\n    /// @param _holder who owns coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    function buyPolicyFor(\\r\\n        address _holder,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens\\r\\n    ) external;\\r\\n\\r\\n    function policyBook() external view returns (IPolicyBook);\\r\\n\\r\\n    function userLiquidity(address account) external view returns (uint256);\\r\\n\\r\\n    /// @notice forces an update of RewardsGenerator multiplier\\r\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\r\\n\\r\\n    /// @notice view function to get precise policy price\\r\\n    /// @param _epochsNumber is number of epochs to cover\\r\\n    /// @param _coverTokens is number of tokens to cover\\r\\n    /// @param _buyer address of the user who buy the policy\\r\\n    /// @return totalSeconds is number of seconds to cover\\r\\n    /// @return totalPrice is the policy price which will pay by the buyer\\r\\n    function getPolicyPrice(\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _buyer\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalSeconds,\\r\\n            uint256 totalPrice,\\r\\n            uint256 pricePercentage\\r\\n        );\\r\\n\\r\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\r\\n\\r\\n    /// @notice virtual funds deployed by reinsurance pool\\r\\n    function VUreinsurnacePool() external view returns (uint256);\\r\\n\\r\\n    /// @notice leverage funds deployed by reinsurance pool\\r\\n    function LUreinsurnacePool() external view returns (uint256);\\r\\n\\r\\n    /// @notice leverage funds deployed by user leverage pool\\r\\n    function LUuserLeveragePool(address userLeveragePool) external view returns (uint256);\\r\\n\\r\\n    /// @notice total leverage funds deployed to the pool sum of (VUreinsurnacePool,LUreinsurnacePool,LUuserLeveragePool)\\r\\n    function totalLeveragedLiquidity() external view returns (uint256);\\r\\n\\r\\n    function userleveragedMPL() external view returns (uint256);\\r\\n\\r\\n    function reinsurancePoolMPL() external view returns (uint256);\\r\\n\\r\\n    function rebalancingThreshold() external view returns (uint256);\\r\\n\\r\\n    function safePricingModel() external view returns (bool);\\r\\n\\r\\n    /// @notice policyBookFacade initializer\\r\\n    /// @param pbProxy polciybook address upgreadable cotnract.\\r\\n    function __PolicyBookFacade_init(\\r\\n        address pbProxy,\\r\\n        address liquidityProvider,\\r\\n        uint256 initialDeposit\\r\\n    ) external;\\r\\n\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicyFromDistributor(\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _distributor\\r\\n    ) external;\\r\\n\\r\\n    /// @param _buyer who is buying the coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicyFromDistributorFor(\\r\\n        address _buyer,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _distributor\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidity(uint256 _liquidityAmount) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _user the one taht add liquidity\\r\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidityFromDistributorFor(address _user, uint256 _liquidityAmount) external;\\r\\n\\r\\n    function addLiquidityAndStakeFor(\\r\\n        address _liquidityHolderAddr,\\r\\n        uint256 _liquidityAmount,\\r\\n        uint256 _stakeSTBLAmount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin and stake it,\\r\\n    /// @dev access: ANY\\r\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\r\\n\\r\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\r\\n    function withdrawLiquidity() external;\\r\\n\\r\\n    /// @notice deploy leverage funds (RP lStable, ULP lStable)\\r\\n    /// @param  deployedAmount uint256 the deployed amount to be added or substracted from the total liquidity\\r\\n    /// @param leveragePool whether user leverage or reinsurance leverage\\r\\n    function deployLeverageFundsAfterRebalance(\\r\\n        uint256 deployedAmount,\\r\\n        ILeveragePortfolio.LeveragePortfolio leveragePool\\r\\n    ) external;\\r\\n\\r\\n    /// @notice deploy virtual funds (RP vStable)\\r\\n    /// @param  deployedAmount uint256 the deployed amount to be added to the liquidity\\r\\n    function deployVirtualFundsAfterRebalance(uint256 deployedAmount) external;\\r\\n\\r\\n    ///@dev in case ur changed of the pools by commit a claim or policy expired\\r\\n    function reevaluateProvidedLeverageStable() external;\\r\\n\\r\\n    /// @notice set the MPL for the user leverage and the reinsurance leverage\\r\\n    /// @param _userLeverageMPL uint256 value of the user leverage MPL\\r\\n    /// @param _reinsuranceLeverageMPL uint256  value of the reinsurance leverage MPL\\r\\n    function setMPLs(uint256 _userLeverageMPL, uint256 _reinsuranceLeverageMPL) external;\\r\\n\\r\\n    /// @notice sets the rebalancing threshold value\\r\\n    /// @param _newRebalancingThreshold uint256 rebalancing threshhold value\\r\\n    function setRebalancingThreshold(uint256 _newRebalancingThreshold) external;\\r\\n\\r\\n    /// @notice sets the rebalancing threshold value\\r\\n    /// @param _safePricingModel bool is pricing model safe (true) or not (false)\\r\\n    function setSafePricingModel(bool _safePricingModel) external;\\r\\n\\r\\n    /// @notice returns how many BMI tokens needs to approve in order to submit a claim\\r\\n    function getClaimApprovalAmount(address user) external view returns (uint256);\\r\\n\\r\\n    /// @notice upserts a withdraw request\\r\\n    /// @dev prevents adding a request if an already pending or ready request is open.\\r\\n    /// @param _tokensToWithdraw uint256 amount of tokens to withdraw\\r\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\r\\n\\r\\n    function listUserLeveragePools(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _userLeveragePools);\\r\\n\\r\\n    function countUserLeveragePools() external view returns (uint256);\\r\\n\\r\\n    /// @notice Getting info, access: ANY\\r\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\r\\n    /// @return _insuredContract is an addres of insured contract\\r\\n    /// @return _contractType is a type of insured contract\\r\\n    /// @return _whitelisted is a state of whitelisting\\r\\n    function info()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory _symbol,\\r\\n            address _insuredContract,\\r\\n            IPolicyBookFabric.ContractType _contractType,\\r\\n            bool _whitelisted\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookFabric.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPolicyBookFabric {\\r\\n    enum ContractType {CONTRACT, STABLECOIN, SERVICE, EXCHANGE, VARIOUS}\\r\\n\\r\\n    /// @notice Create new Policy Book contract, access: ANY\\r\\n    /// @param _contract is Contract to create policy book for\\r\\n    /// @param _contractType is Contract to create policy book for\\r\\n    /// @param _description is bmiXCover token desription for this policy book\\r\\n    /// @param _projectSymbol replaces x in bmiXCover token symbol\\r\\n    /// @param _initialDeposit is an amount user deposits on creation (addLiquidity())\\r\\n    /// @return _policyBook is address of created contract\\r\\n    function create(\\r\\n        address _contract,\\r\\n        ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol,\\r\\n        uint256 _initialDeposit,\\r\\n        address _shieldMiningToken\\r\\n    ) external returns (address);\\r\\n\\r\\n    function createLeveragePools(\\r\\n        address _insuranceContract,\\r\\n        ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol\\r\\n    ) external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IPolicyBookAdmin {\\r\\n    enum PoolTypes {POLICY_BOOK, POLICY_FACADE, LEVERAGE_POOL}\\r\\n\\r\\n    function getUpgrader() external view returns (address);\\r\\n\\r\\n    function getImplementationOfPolicyBook(address policyBookAddress) external returns (address);\\r\\n\\r\\n    function getImplementationOfPolicyBookFacade(address policyBookFacadeAddress)\\r\\n        external\\r\\n        returns (address);\\r\\n\\r\\n    function getCurrentPolicyBooksImplementation() external view returns (address);\\r\\n\\r\\n    function getCurrentPolicyBooksFacadeImplementation() external view returns (address);\\r\\n\\r\\n    function getCurrentUserLeverageImplementation() external view returns (address);\\r\\n\\r\\n    /// @notice It blacklists or whitelists a PolicyBook. Only whitelisted PolicyBooks can\\r\\n    ///         receive stakes and funds\\r\\n    /// @param policyBookAddress PolicyBook address that will be whitelisted or blacklisted\\r\\n    /// @param whitelisted true to whitelist or false to blacklist a PolicyBook\\r\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\r\\n\\r\\n    /// @notice Whitelist distributor address. Commission fee is 2-5% of the Premium\\r\\n    ///         It comes from the Protocol\u2019s fee part\\r\\n    /// @dev If commission fee is 5%, so _distributorFee = 5\\r\\n    /// @param _distributor distributor address that will receive funds\\r\\n    /// @param _distributorFee distributor fee amount\\r\\n    function whitelistDistributor(address _distributor, uint256 _distributorFee) external;\\r\\n\\r\\n    /// @notice Removes a distributor address from the distributor whitelist\\r\\n    /// @param _distributor distributor address that will be blacklist\\r\\n    function blacklistDistributor(address _distributor) external;\\r\\n\\r\\n    /// @notice Distributor commission fee is 2-5% of the Premium\\r\\n    ///         It comes from the Protocol\u2019s fee part\\r\\n    /// @dev If max commission fee is 5%, so _distributorFeeCap = 5. Default value is 5\\r\\n    /// @param _distributor address of the distributor\\r\\n    /// @return true if address is a whitelisted distributor\\r\\n    function isWhitelistedDistributor(address _distributor) external view returns (bool);\\r\\n\\r\\n    /// @notice Distributor commission fee is 2-5% of the Premium\\r\\n    ///         It comes from the Protocol\u2019s fee part\\r\\n    /// @dev If max commission fee is 5%, so _distributorFeeCap = 5. Default value is 5\\r\\n    /// @param _distributor address of the distributor\\r\\n    /// @return distributor fee value. It is distributor commission\\r\\n    function distributorFees(address _distributor) external view returns (uint256);\\r\\n\\r\\n    /// @notice Used to get a list of whitelisted distributors\\r\\n    /// @dev If max commission fee is 5%, so _distributorFeeCap = 5. Default value is 5\\r\\n    /// @return _distributors a list containing distritubors addresses\\r\\n    /// @return _distributorsFees a list containing distritubors fees\\r\\n    function listDistributors(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _distributors, uint256[] memory _distributorsFees);\\r\\n\\r\\n    /// @notice Returns number of whitelisted distributors, access: ANY\\r\\n    function countDistributors() external view returns (uint256);\\r\\n\\r\\n    /// @notice sets the policybookFacade mpls values\\r\\n    /// @param _facadeAddress address of the policybook facade\\r\\n    /// @param _userLeverageMPL uint256 value of the user leverage mpl;\\r\\n    /// @param _reinsuranceLeverageMPL uint256 value of the reinsurance leverage mpl\\r\\n    function setPolicyBookFacadeMPLs(\\r\\n        address _facadeAddress,\\r\\n        uint256 _userLeverageMPL,\\r\\n        uint256 _reinsuranceLeverageMPL\\r\\n    ) external;\\r\\n\\r\\n    /// @notice sets the policybookFacade mpls values\\r\\n    /// @param _facadeAddress address of the policybook facade\\r\\n    /// @param _newRebalancingThreshold uint256 value of the reinsurance leverage mpl\\r\\n    function setPolicyBookFacadeRebalancingThreshold(\\r\\n        address _facadeAddress,\\r\\n        uint256 _newRebalancingThreshold\\r\\n    ) external;\\r\\n\\r\\n    /// @notice sets the policybookFacade mpls values\\r\\n    /// @param _facadeAddress address of the policybook facade\\r\\n    /// @param _safePricingModel bool is pricing model safe (true) or not (false)\\r\\n    function setPolicyBookFacadeSafePricingModel(address _facadeAddress, bool _safePricingModel)\\r\\n        external;\\r\\n\\r\\n    function setLeveragePortfolioRebalancingThreshold(\\r\\n        address _LeveragePoolAddress,\\r\\n        uint256 _newRebalancingThreshold\\r\\n    ) external;\\r\\n\\r\\n    function setLeveragePortfolioProtocolConstant(\\r\\n        address _LeveragePoolAddress,\\r\\n        uint256 _targetUR,\\r\\n        uint256 _d_ProtocolConstant,\\r\\n        uint256 _a1_ProtocolConstant,\\r\\n        uint256 _max_ProtocolConstant\\r\\n    ) external;\\r\\n\\r\\n    function setUserLeverageMaxCapacities(address _userLeverageAddress, uint256 _maxCapacities)\\r\\n        external;\\r\\n\\r\\n    function setUserLeverageA2_ProtocolConstant(\\r\\n        address _userLeverageAddress,\\r\\n        uint256 _a2_ProtocolConstant\\r\\n    ) external;\\r\\n\\r\\n    /// @notice setup all pricing model varlues\\r\\n    ///@param _highRiskRiskyAssetThresholdPercentage URRp Utilization ration for pricing model when the assets is considered risky, %\\r\\n    ///@param _lowRiskRiskyAssetThresholdPercentage URRp Utilization ration for pricing model when the assets is not considered risky, %\\r\\n    ///@param _highRiskMinimumCostPercentage MC minimum cost of cover (Premium) when the assets is considered risky, %;\\r\\n    ///@param _lowRiskMinimumCostPercentage MC minimum cost of cover (Premium), when the assets is not considered risky, %\\r\\n    ///@param _minimumInsuranceCost minimum cost of insurance (Premium) , (10**18)\\r\\n    ///@param _lowRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is not considered risky (Premium)\\r\\n    ///@param _lowRiskMaxPercentPremiumCost100Utilization MCI not risky\\r\\n    ///@param _highRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is considered risky (Premium)\\r\\n    ///@param _highRiskMaxPercentPremiumCost100Utilization MCI risky\\r\\n    function setupPricingModel(\\r\\n        uint256 _highRiskRiskyAssetThresholdPercentage,\\r\\n        uint256 _lowRiskRiskyAssetThresholdPercentage,\\r\\n        uint256 _highRiskMinimumCostPercentage,\\r\\n        uint256 _lowRiskMinimumCostPercentage,\\r\\n        uint256 _minimumInsuranceCost,\\r\\n        uint256 _lowRiskMaxPercentPremiumCost,\\r\\n        uint256 _lowRiskMaxPercentPremiumCost100Utilization,\\r\\n        uint256 _highRiskMaxPercentPremiumCost,\\r\\n        uint256 _highRiskMaxPercentPremiumCost100Utilization\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\nimport \\\"./IClaimingRegistry.sol\\\";\\r\\nimport \\\"./IPolicyBookFacade.sol\\\";\\r\\n\\r\\ninterface IPolicyBook {\\r\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\r\\n\\r\\n    struct PolicyHolder {\\r\\n        uint256 coverTokens;\\r\\n        uint256 startEpochNumber;\\r\\n        uint256 endEpochNumber;\\r\\n        uint256 paid;\\r\\n        uint256 reinsurancePrice;\\r\\n    }\\r\\n\\r\\n    struct WithdrawalInfo {\\r\\n        uint256 withdrawalAmount;\\r\\n        uint256 readyToWithdrawDate;\\r\\n        bool withdrawalAllowed;\\r\\n    }\\r\\n\\r\\n    struct BuyPolicyParameters {\\r\\n        address buyer;\\r\\n        address holder;\\r\\n        uint256 epochsNumber;\\r\\n        uint256 coverTokens;\\r\\n        uint256 distributorFee;\\r\\n        address distributor;\\r\\n    }\\r\\n\\r\\n    function policyHolders(address _holder)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function policyBookFacade() external view returns (IPolicyBookFacade);\\r\\n\\r\\n    function setPolicyBookFacade(address _policyBookFacade) external;\\r\\n\\r\\n    function EPOCH_DURATION() external view returns (uint256);\\r\\n\\r\\n    function stblDecimals() external view returns (uint256);\\r\\n\\r\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\r\\n\\r\\n    function whitelisted() external view returns (bool);\\r\\n\\r\\n    function epochStartTime() external view returns (uint256);\\r\\n\\r\\n    // @TODO: should we let DAO to change contract address?\\r\\n    /// @notice Returns address of contract this PolicyBook covers, access: ANY\\r\\n    /// @return _contract is address of covered contract\\r\\n    function insuranceContractAddress() external view returns (address _contract);\\r\\n\\r\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\r\\n    /// @return _type is type of contract\\r\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\r\\n\\r\\n    function totalLiquidity() external view returns (uint256);\\r\\n\\r\\n    function totalCoverTokens() external view returns (uint256);\\r\\n\\r\\n    // /// @notice return MPL for user leverage pool\\r\\n    // function userleveragedMPL() external view returns (uint256);\\r\\n\\r\\n    // /// @notice return MPL for reinsurance pool\\r\\n    // function reinsurancePoolMPL() external view returns (uint256);\\r\\n\\r\\n    // function bmiRewardMultiplier() external view returns (uint256);\\r\\n\\r\\n    function withdrawalsInfo(address _userAddr)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _withdrawalAmount,\\r\\n            uint256 _readyToWithdrawDate,\\r\\n            bool _withdrawalAllowed\\r\\n        );\\r\\n\\r\\n    function __PolicyBook_init(\\r\\n        address _insuranceContract,\\r\\n        IPolicyBookFabric.ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol\\r\\n    ) external;\\r\\n\\r\\n    function whitelist(bool _whitelisted) external;\\r\\n\\r\\n    function getEpoch(uint256 time) external view returns (uint256);\\r\\n\\r\\n    /// @notice get STBL equivalent\\r\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    /// @notice get BMIX equivalent\\r\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    /// @notice submits new claim of the policy book\\r\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\r\\n\\r\\n    /// @notice submits new appeal claim of the policy book\\r\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\r\\n\\r\\n    /// @notice updates info on claim when not accepted\\r\\n    function commitClaim(\\r\\n        address claimer,\\r\\n        uint256 claimEndTime,\\r\\n        IClaimingRegistry.ClaimStatus status\\r\\n    ) external;\\r\\n\\r\\n    /// @notice withdraw the claim after requested\\r\\n    function commitWithdrawnClaim(address claimer) external;\\r\\n\\r\\n    /// @notice function to get precise current cover and liquidity\\r\\n    function getNewCoverAndLiquidity()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\r\\n\\r\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\r\\n    /// @param _buyer who is transferring funds\\r\\n    /// @param _holder who owns coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributorFee distributor fee (commission). It can't be greater than PROTOCOL_PERCENTAGE\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicy(\\r\\n        address _buyer,\\r\\n        address _holder,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        uint256 _distributorFee,\\r\\n        address _distributor\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    /// @notice end active policy from ClaimingRegistry in case of a new bought policy\\r\\n    function endActivePolicy(address _holder) external;\\r\\n\\r\\n    function updateEpochsInfo() external;\\r\\n\\r\\n    /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\r\\n    /// @param _liquidityHolderAddr is address of address to assign cover\\r\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _liquidityBuyerAddr address the one that transfer funds\\r\\n    /// @param _liquidityHolderAddr address the one that owns liquidity\\r\\n    /// @param _liquidityAmount uint256 amount to be added on behalf the sender\\r\\n    /// @param _stakeSTBLAmount uint256 the staked amount if add liq and stake\\r\\n    function addLiquidity(\\r\\n        address _liquidityBuyerAddr,\\r\\n        address _liquidityHolderAddr,\\r\\n        uint256 _liquidityAmount,\\r\\n        uint256 _stakeSTBLAmount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\r\\n\\r\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\r\\n\\r\\n    function requestWithdrawal(uint256 _tokensToWithdraw, address _user) external;\\r\\n\\r\\n    // function requestWithdrawalWithPermit(\\r\\n    //     uint256 _tokensToWithdraw,\\r\\n    //     uint8 _v,\\r\\n    //     bytes32 _r,\\r\\n    //     bytes32 _s\\r\\n    // ) external;\\r\\n\\r\\n    function unlockTokens() external;\\r\\n\\r\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\r\\n    function withdrawLiquidity(address sender) external returns (uint256);\\r\\n\\r\\n    ///@notice for doing defi hard rebalancing, access: policyBookFacade\\r\\n    function updateLiquidity(uint256 _newLiquidity) external;\\r\\n\\r\\n    function getAPY() external view returns (uint256);\\r\\n\\r\\n    /// @notice Getting user stats, access: ANY\\r\\n    function userStats(address _user) external view returns (PolicyHolder memory);\\r\\n\\r\\n    /// @notice Getting number stats, access: ANY\\r\\n    /// @return _maxCapacities is a max token amount that a user can buy\\r\\n    /// @return _buyPolicyCapacity new capacity which is a max token amount that a user can buy including withdraw amount\\r\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\r\\n    /// @return _totalLeveragedLiquidity is PolicyBook's leveraged liquidity\\r\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\r\\n    /// @return _annualProfitYields is its APY\\r\\n    /// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\r\\n    function numberStats()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _maxCapacities,\\r\\n            uint256 _buyPolicyCapacity,\\r\\n            uint256 _totalSTBLLiquidity,\\r\\n            uint256 _totalLeveragedLiquidity,\\r\\n            uint256 _stakedSTBL,\\r\\n            uint256 _annualProfitYields,\\r\\n            uint256 _annualInsuranceCost,\\r\\n            uint256 _bmiXRatio\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ILiquidityRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ILiquidityRegistry {\\r\\n    struct LiquidityInfo {\\r\\n        address policyBookAddr;\\r\\n        uint256 lockedAmount;\\r\\n        uint256 availableAmount;\\r\\n        uint256 bmiXRatio; // multiply availableAmount by this num to get stable coin\\r\\n    }\\r\\n\\r\\n    struct WithdrawalRequestInfo {\\r\\n        address policyBookAddr;\\r\\n        uint256 requestAmount;\\r\\n        uint256 requestSTBLAmount;\\r\\n        uint256 availableLiquidity;\\r\\n        uint256 readyToWithdrawDate;\\r\\n        uint256 endWithdrawDate;\\r\\n    }\\r\\n\\r\\n    struct WithdrawalSetInfo {\\r\\n        address policyBookAddr;\\r\\n        uint256 requestAmount;\\r\\n        uint256 requestSTBLAmount;\\r\\n        uint256 availableSTBLAmount;\\r\\n    }\\r\\n\\r\\n    function tryToAddPolicyBook(address _userAddr, address _policyBookAddr) external;\\r\\n\\r\\n    function tryToRemovePolicyBook(address _userAddr, address _policyBookAddr) external;\\r\\n\\r\\n    function removeExpiredWithdrawalRequest(address _userAddr, address _policyBookAddr) external;\\r\\n\\r\\n    function getPolicyBooksArrLength(address _userAddr) external view returns (uint256);\\r\\n\\r\\n    function getPolicyBooksArr(address _userAddr)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _resultArr);\\r\\n\\r\\n    function getLiquidityInfos(\\r\\n        address _userAddr,\\r\\n        uint256 _offset,\\r\\n        uint256 _limit\\r\\n    ) external view returns (LiquidityInfo[] memory _resultArr);\\r\\n\\r\\n    function getWithdrawalRequests(\\r\\n        address _userAddr,\\r\\n        uint256 _offset,\\r\\n        uint256 _limit\\r\\n    ) external view returns (uint256 _arrLength, WithdrawalRequestInfo[] memory _resultArr);\\r\\n\\r\\n    function registerWithdrawl(address _policyBook, address _users) external;\\r\\n\\r\\n    function getAllPendingWithdrawalRequestsAmount()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _totalWithdrawlAmount);\\r\\n\\r\\n    function getPendingWithdrawalAmountByPolicyBook(address _policyBook)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _totalWithdrawlAmount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ILeveragePortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface ILeveragePortfolio {\\r\\n    enum LeveragePortfolio {USERLEVERAGEPOOL, REINSURANCEPOOL}\\r\\n    struct LevFundsFactors {\\r\\n        uint256 netMPL;\\r\\n        uint256 netMPLn;\\r\\n        address policyBookAddr;\\r\\n    }\\r\\n\\r\\n    function targetUR() external view returns (uint256);\\r\\n\\r\\n    function d_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    function a_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    function max_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    /// @notice deploy lStable from user leverage pool or reinsurance pool using 2 formulas: access by policybook.\\r\\n    /// @param leveragePoolType LeveragePortfolio is determine the pool which call the function\\r\\n    function deployLeverageStableToCoveragePools(LeveragePortfolio leveragePoolType)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice deploy the vStable from RP in v2 and for next versions it will be from RP and LP : access by policybook.\\r\\n    function deployVirtualStableToCoveragePools() external returns (uint256);\\r\\n\\r\\n    /// @notice set the threshold % for re-evaluation of the lStable provided across all Coverage pools : access by owner\\r\\n    /// @param threshold uint256 is the reevaluatation threshold\\r\\n    function setRebalancingThreshold(uint256 threshold) external;\\r\\n\\r\\n    /// @notice set the protocol constant : access by owner\\r\\n    /// @param _targetUR uint256 target utitlization ration\\r\\n    /// @param _d_ProtocolConstant uint256 D protocol constant\\r\\n    /// @param  _a1_ProtocolConstant uint256 A1 protocol constant\\r\\n    /// @param _max_ProtocolConstant uint256 the max % included\\r\\n    function setProtocolConstant(\\r\\n        uint256 _targetUR,\\r\\n        uint256 _d_ProtocolConstant,\\r\\n        uint256 _a1_ProtocolConstant,\\r\\n        uint256 _max_ProtocolConstant\\r\\n    ) external;\\r\\n\\r\\n    /// @notice calc M factor by formual M = min( abs((1/ (Tur-UR))*d) /a, max)\\r\\n    /// @param poolUR uint256 utitilization ratio for a coverage pool\\r\\n    /// @return uint256 M facotr\\r\\n    //function calcM(uint256 poolUR) external returns (uint256);\\r\\n\\r\\n    /// @return uint256 the amount of vStable stored in the pool\\r\\n    function totalLiquidity() external view returns (uint256);\\r\\n\\r\\n    /// @notice add the portion of 80% of premium to user leverage pool where the leverage provide lstable : access policybook\\r\\n    /// add the 20% of premium + portion of 80% of premium where reisnurance pool participate in coverage pools (vStable)  : access policybook\\r\\n    /// @param epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\r\\n    /// @param  premiumAmount uint256 the premium amount which is a portion of 80% of the premium\\r\\n    function addPolicyPremium(uint256 epochsNumber, uint256 premiumAmount) external;\\r\\n\\r\\n    /// @notice Used to get a list of coverage pools which get leveraged , use with count()\\r\\n    /// @return _coveragePools a list containing policybook addresses\\r\\n    function listleveragedCoveragePools(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _coveragePools);\\r\\n\\r\\n    /// @notice get count of coverage pools which get leveraged\\r\\n    function countleveragedCoveragePools() external view returns (uint256);\\r\\n\\r\\n    function updateLiquidity(uint256 _lostLiquidity) external;\\r\\n\\r\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IContractsRegistry {\\r\\n    function getAMMRouterContract() external view returns (address);\\r\\n\\r\\n    function getAMMBMIToETHPairContract() external view returns (address);\\r\\n\\r\\n    function getAMMBMIToUSDTPairContract() external view returns (address);\\r\\n\\r\\n    function getSushiSwapMasterChefV2Contract() external view returns (address);\\r\\n\\r\\n    function getWrappedTokenContract() external view returns (address);\\r\\n\\r\\n    function getUSDTContract() external view returns (address);\\r\\n\\r\\n    function getBMIContract() external view returns (address);\\r\\n\\r\\n    function getPriceFeedContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookRegistryContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookFabricContract() external view returns (address);\\r\\n\\r\\n    function getBMICoverStakingContract() external view returns (address);\\r\\n\\r\\n    function getBMICoverStakingViewContract() external view returns (address);\\r\\n\\r\\n    function getBMITreasury() external view returns (address);\\r\\n\\r\\n    function getRewardsGeneratorContract() external view returns (address);\\r\\n\\r\\n    function getBMIUtilityNFTContract() external view returns (address);\\r\\n\\r\\n    function getNFTStakingContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityBridgeContract() external view returns (address);\\r\\n\\r\\n    function getClaimingRegistryContract() external view returns (address);\\r\\n\\r\\n    function getPolicyRegistryContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityRegistryContract() external view returns (address);\\r\\n\\r\\n    function getClaimVotingContract() external view returns (address);\\r\\n\\r\\n    function getReinsurancePoolContract() external view returns (address);\\r\\n\\r\\n    function getLeveragePortfolioViewContract() external view returns (address);\\r\\n\\r\\n    function getCapitalPoolContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookAdminContract() external view returns (address);\\r\\n\\r\\n    function getPolicyQuoteContract() external view returns (address);\\r\\n\\r\\n    function getBMIStakingContract() external view returns (address);\\r\\n\\r\\n    function getSTKBMIContract() external view returns (address);\\r\\n\\r\\n    function getStkBMIStakingContract() external view returns (address);\\r\\n\\r\\n    function getVBMIContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityMiningStakingETHContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityMiningStakingUSDTContract() external view returns (address);\\r\\n\\r\\n    function getReputationSystemContract() external view returns (address);\\r\\n\\r\\n    function getDefiProtocol1Contract() external view returns (address);\\r\\n\\r\\n    function getAaveLendPoolAddressProvdierContract() external view returns (address);\\r\\n\\r\\n    function getAaveATokenContract() external view returns (address);\\r\\n\\r\\n    function getDefiProtocol2Contract() external view returns (address);\\r\\n\\r\\n    function getCompoundCTokenContract() external view returns (address);\\r\\n\\r\\n    function getCompoundComptrollerContract() external view returns (address);\\r\\n\\r\\n    function getDefiProtocol3Contract() external view returns (address);\\r\\n\\r\\n    function getYearnVaultContract() external view returns (address);\\r\\n\\r\\n    function getYieldGeneratorContract() external view returns (address);\\r\\n\\r\\n    function getShieldMiningContract() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IClaimingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\n\\r\\ninterface IClaimingRegistry {\\r\\n    enum ClaimStatus {\\r\\n        CAN_CLAIM,\\r\\n        UNCLAIMABLE,\\r\\n        PENDING,\\r\\n        AWAITING_CALCULATION,\\r\\n        REJECTED_CAN_APPEAL,\\r\\n        REJECTED,\\r\\n        ACCEPTED,\\r\\n        EXPIRED\\r\\n    }\\r\\n\\r\\n    struct ClaimInfo {\\r\\n        address claimer;\\r\\n        address policyBookAddress;\\r\\n        string evidenceURI;\\r\\n        uint256 dateSubmitted;\\r\\n        uint256 dateEnded;\\r\\n        bool appeal;\\r\\n        ClaimStatus status;\\r\\n        uint256 claimAmount;\\r\\n        uint256 claimRefund;\\r\\n    }\\r\\n\\r\\n    struct ClaimWithdrawalInfo {\\r\\n        uint256 readyToWithdrawDate;\\r\\n        bool committed;\\r\\n    }\\r\\n\\r\\n    struct RewardWithdrawalInfo {\\r\\n        uint256 rewardAmount;\\r\\n        uint256 readyToWithdrawDate;\\r\\n    }\\r\\n\\r\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\r\\n\\r\\n    function claimWithdrawalInfo(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 readyToWithdrawDate, bool committed);\\r\\n\\r\\n    function rewardWithdrawalInfo(address voter)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 rewardAmount, uint256 readyToWithdrawDate);\\r\\n\\r\\n    /// @notice returns anonymous voting duration\\r\\n    function anonymousVotingDuration(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns the whole voting duration\\r\\n    function votingDuration(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns the whole voting duration + view verdict duration\\r\\n    function validityDuration(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many time should pass before anyone could calculate a claim result\\r\\n    function anyoneCanCalculateClaimResultAfter(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice check if a user can buy new policy of specified PolicyBook and end the active one if there is\\r\\n    function canBuyNewPolicy(address buyer, address policyBookAddress) external;\\r\\n\\r\\n    /// @notice returns withdrawal status of requested claim\\r\\n    function getClaimWithdrawalStatus(uint256 index) external view returns (WithdrawalStatus);\\r\\n\\r\\n    /// @notice returns withdrawal status of requested reward\\r\\n    function getRewardWithdrawalStatus(address voter) external view returns (WithdrawalStatus);\\r\\n\\r\\n    /// @notice returns true if there is ongoing claiming procedure\\r\\n    function hasProcedureOngoing(address poolAddress) external view returns (bool);\\r\\n\\r\\n    /// @notice submits new PolicyBook claim for the user\\r\\n    function submitClaim(\\r\\n        address user,\\r\\n        address policyBookAddress,\\r\\n        string calldata evidenceURI,\\r\\n        uint256 cover,\\r\\n        bool appeal\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim with this index exists\\r\\n    function claimExists(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns claim submition time\\r\\n    function claimSubmittedTime(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns claim end time or zero in case it is pending\\r\\n    function claimEndTime(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim is anonymously votable\\r\\n    function isClaimAnonymouslyVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if the claim is exposably votable\\r\\n    function isClaimExposablyVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if claim is anonymously votable or exposably votable\\r\\n    function isClaimVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if a claim can be calculated by anyone\\r\\n    function canClaimBeCalculatedByAnyone(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if this claim is pending or awaiting\\r\\n    function isClaimPending(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns how many claims the holder has\\r\\n    function countPolicyClaimerClaims(address user) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many pending claims are there\\r\\n    function countPendingClaims() external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many claims are there\\r\\n    function countClaims() external view returns (uint256);\\r\\n\\r\\n    /// @notice returns a claim index of it's claimer and an ordinal number\\r\\n    function claimOfOwnerIndexAt(address claimer, uint256 orderIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice returns pending claim index by its ordinal index\\r\\n    function pendingClaimIndexAt(uint256 orderIndex) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns claim index by its ordinal index\\r\\n    function claimIndexAt(uint256 orderIndex) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns current active claim index by policybook and claimer\\r\\n    function claimIndex(address claimer, address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim is appealed\\r\\n    function isClaimAppeal(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns current status of a claim\\r\\n    function policyStatus(address claimer, address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (ClaimStatus);\\r\\n\\r\\n    /// @notice returns current status of a claim\\r\\n    function claimStatus(uint256 index) external view returns (ClaimStatus);\\r\\n\\r\\n    /// @notice returns the claim owner (claimer)\\r\\n    function claimOwner(uint256 index) external view returns (address);\\r\\n\\r\\n    /// @notice returns the claim PolicyBook\\r\\n    function claimPolicyBook(uint256 index) external view returns (address);\\r\\n\\r\\n    /// @notice returns claim info by its index\\r\\n    function claimInfo(uint256 index) external view returns (ClaimInfo memory _claimInfo);\\r\\n\\r\\n    function getAllPendingClaimsAmount() external view returns (uint256 _totalClaimsAmount);\\r\\n\\r\\n    function getAllPendingRewardsAmount() external view returns (uint256 _totalRewardsAmount);\\r\\n\\r\\n    function getClaimableAmounts(uint256[] memory _claimIndexes) external view returns (uint256);\\r\\n\\r\\n    /// @notice marks the user's claim as Accepted\\r\\n    function acceptClaim(uint256 index, uint256 amount) external;\\r\\n\\r\\n    /// @notice marks the user's claim as Rejected\\r\\n    function rejectClaim(uint256 index) external;\\r\\n\\r\\n    /// @notice marks the user's claim as Expired\\r\\n    function expireClaim(uint256 index) external;\\r\\n\\r\\n    /// @notice Update Image Uri in case it contains material that is ilegal\\r\\n    ///         or offensive.\\r\\n    /// @dev Only the owner of the PolicyBookAdmin can erase/update evidenceUri.\\r\\n    /// @param claim_Index Claim Index that is going to be updated\\r\\n    /// @param _newEvidenceURI New evidence uri. It can be blank.\\r\\n    function updateImageUriOfClaim(uint256 claim_Index, string calldata _newEvidenceURI) external;\\r\\n\\r\\n    function requestClaimWithdrawal(uint256 index) external;\\r\\n\\r\\n    function requestRewardWithdrawal(address voter, uint256 rewardAmount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\r\\nuint256 constant DAYS_IN_THE_YEAR = 365;\\r\\nuint256 constant MAX_INT = type(uint256).max;\\r\\n\\r\\nuint256 constant DECIMALS18 = 10**18;\\r\\n\\r\\nuint256 constant PRECISION = 10**25;\\r\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\r\\n\\r\\nuint256 constant BLOCKS_PER_DAY = 6450;\\r\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\r\\n\\r\\nuint256 constant APY_TOKENS = DECIMALS18;\\r\\n\\r\\nuint256 constant PROTOCOL_PERCENTAGE = 20 * PRECISION;\\r\\n\\r\\nuint256 constant DEFAULT_REBALANCING_THRESHOLD = 10**23;\\r\\n\\r\\nuint256 constant EPOCH_DAYS_AMOUNT = 7;\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_deployedAmount\",\"type\":\"uint256\"}],\"name\":\"DeployLeverageFunds\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPOCH_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUreinsurnacePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LUuserLeveragePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUMUM_COVERAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATE_UTILIZATION_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RISKY_UTILIZATION_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VUreinsurnacePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pbProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"}],\"name\":\"__PolicyBookFacade_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSTBLAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityHolderAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSTBLAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityAndStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityHolderAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityFromDistributorFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverTokens\",\"type\":\"uint256\"}],\"name\":\"buyPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverTokens\",\"type\":\"uint256\"}],\"name\":\"buyPolicyFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"buyPolicyFromDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"buyPolicyFromDistributorFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimingRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countUserLeveragePools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deployedAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum ILeveragePortfolio.LeveragePortfolio\",\"name\":\"leveragePool\",\"type\":\"uint8\"}],\"name\":\"deployLeverageFundsAfterRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deployedAmount\",\"type\":\"uint256\"}],\"name\":\"deployVirtualFundsAfterRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceUpdateBMICoverStakingRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimApprovalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getPolicyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_insuredContract\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"_contractType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRegistry\",\"outputs\":[{\"internalType\":\"contract ILiquidityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listUserLeveragePools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_userLeveragePools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBook\",\"outputs\":[{\"internalType\":\"contract IPolicyBook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookAdmin\",\"outputs\":[{\"internalType\":\"contract IPolicyBookAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookRegistry\",\"outputs\":[{\"internalType\":\"contract IPolicyBookRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyQuote\",\"outputs\":[{\"internalType\":\"contract IPolicyQuote\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reevaluateProvidedLeverageStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinsurancePool\",\"outputs\":[{\"internalType\":\"contract ILeveragePortfolio\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinsurancePoolMPL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsGenerator\",\"outputs\":[{\"internalType\":\"contract IRewardsGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safePricingModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsToEndCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userLeverageMPL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reinsuranceLeverageMPL\",\"type\":\"uint256\"}],\"name\":\"setMPLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRebalancingThreshold\",\"type\":\"uint256\"}],\"name\":\"setRebalancingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_safePricingModel\",\"type\":\"bool\"}],\"name\":\"setSafePricingModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shieldMining\",\"outputs\":[{\"internalType\":\"contract IShieldMining\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLeveragedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userleveragedMPL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PolicyBookFacade", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}