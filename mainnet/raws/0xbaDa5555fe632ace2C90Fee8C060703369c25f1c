{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/InfinityOrderBookComplication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\n// external imports\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {EnumerableSet} from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\n// internal imports\\nimport {SignatureChecker} from '../libs/SignatureChecker.sol';\\nimport {OrderTypes} from '../libs/OrderTypes.sol';\\nimport {IComplication} from '../interfaces/IComplication.sol';\\n\\n/**\\n * @title InfinityOrderBookComplication\\n * @author nneverlander. Twitter @nneverlander\\n * @notice Complication to execute orderbook orders\\n */\\ncontract InfinityOrderBookComplication is IComplication, Ownable {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  uint256 public constant PRECISION = 1e4; // precision for division; similar to bps\\n\\n  /// @dev WETH address of the chain being used\\n  address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  // keccak256('Order(bool isSellOrder,address signer,uint256[] constraints,OrderItem[] nfts,address[] execParams,bytes extraParams)OrderItem(address collection,TokenInfo[] tokens)TokenInfo(uint256 tokenId,uint256 numTokens)')\\n  bytes32 public constant ORDER_HASH = 0x7bcfb5a29031e6b8d34ca1a14dd0a1f5cb11b20f755bb2a31ee3c4b143477e4a;\\n\\n  // keccak256('OrderItem(address collection,TokenInfo[] tokens)TokenInfo(uint256 tokenId,uint256 numTokens)')\\n  bytes32 public constant ORDER_ITEM_HASH = 0xf73f37e9f570369ceaab59cef16249ae1c0ad1afd592d656afac0be6f63b87e0;\\n\\n  // keccak256('TokenInfo(uint256 tokenId,uint256 numTokens)')\\n  bytes32 public constant TOKEN_INFO_HASH = 0x88f0bd19d14f8b5d22c0605a15d9fffc285ebc8c86fb21139456d305982906f1;\\n\\n  /// @dev Used in order signing with EIP-712\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n  /// @dev Storage variable that keeps track of valid currencies used for payment (tokens)\\n  EnumerableSet.AddressSet private _currencies;\\n\\n  event CurrencyAdded(address currency);\\n  event CurrencyRemoved(address currency);\\n\\n  constructor() {\\n    // Calculate the domain separator\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n        keccak256('InfinityComplication'),\\n        keccak256(bytes('1')), // for versionId = 1\\n        block.chainid,\\n        address(this)\\n      )\\n    );\\n\\n    // add default currencies\\n    _currencies.add(WETH);\\n    _currencies.add(address(0)); // ETH\\n  }\\n\\n  // ======================================================= EXTERNAL FUNCTIONS ==================================================\\n\\n  /**\\n   * @notice Checks whether one to one matches can be executed\\n   * @dev This function is called by the main exchange to check whether one to one matches can be executed.\\n          It checks whether orders have the right constraints - i.e they have one specific NFT only, whether time is still valid,\\n          prices are valid and whether the nfts intersect.\\n   * @param makerOrder1 first makerOrder\\n   * @param makerOrder2 second makerOrder\\n   * @return returns whether the order can be executed, orderHashes and the execution price\\n   */\\n  function canExecMatchOneToOne(OrderTypes.MakerOrder calldata makerOrder1, OrderTypes.MakerOrder calldata makerOrder2)\\n    external\\n    view\\n    override\\n    returns (\\n      bool,\\n      bytes32,\\n      bytes32,\\n      uint256\\n    )\\n  {\\n    // check if the orders are valid\\n    bytes32 sellOrderHash = _hash(makerOrder1);\\n    bytes32 buyOrderHash = _hash(makerOrder2);\\n    require(verifyMatchOneToOneOrders(sellOrderHash, buyOrderHash, makerOrder1, makerOrder2), 'order not verified');\\n\\n    // check constraints\\n    bool numItemsValid = makerOrder2.constraints[0] == makerOrder1.constraints[0] &&\\n      makerOrder2.constraints[0] == 1 &&\\n      makerOrder2.nfts.length == 1 &&\\n      makerOrder2.nfts[0].tokens.length == 1 &&\\n      makerOrder1.nfts.length == 1 &&\\n      makerOrder1.nfts[0].tokens.length == 1;\\n\\n    bool _isTimeValid = makerOrder2.constraints[3] <= block.timestamp &&\\n      makerOrder2.constraints[4] >= block.timestamp &&\\n      makerOrder1.constraints[3] <= block.timestamp &&\\n      makerOrder1.constraints[4] >= block.timestamp;\\n\\n    bool _isPriceValid;\\n    uint256 makerOrder1Price = _getCurrentPrice(makerOrder1);\\n    uint256 makerOrder2Price = _getCurrentPrice(makerOrder2);\\n    uint256 execPrice;\\n    if (makerOrder1.isSellOrder) {\\n      _isPriceValid = makerOrder2Price >= makerOrder1Price;\\n      execPrice = makerOrder1Price;\\n    } else {\\n      _isPriceValid = makerOrder1Price >= makerOrder2Price;\\n      execPrice = makerOrder2Price;\\n    }\\n\\n    return (\\n      numItemsValid && _isTimeValid && doItemsIntersect(makerOrder1.nfts, makerOrder2.nfts) && _isPriceValid,\\n      sellOrderHash,\\n      buyOrderHash,\\n      execPrice\\n    );\\n  }\\n\\n  /**\\n   * @notice Checks whether one to many matches can be executed\\n   * @dev This function is called by the main exchange to check whether one to many matches can be executed.\\n          It checks whether orders have the right constraints - i.e they have the right number of items, whether time is still valid,\\n          prices are valid and whether the nfts intersect. All orders are expected to contain specific items.\\n   * @param makerOrder the one makerOrder\\n   * @param manyMakerOrders many maker orders\\n   * @return returns whether the order can be executed and orderHash of the one side order\\n   */\\n  function canExecMatchOneToMany(\\n    OrderTypes.MakerOrder calldata makerOrder,\\n    OrderTypes.MakerOrder[] calldata manyMakerOrders\\n  ) external view override returns (bool, bytes32) {\\n    // check if makerOrder is valid\\n    bytes32 makerOrderHash = _hash(makerOrder);\\n    require(isOrderValid(makerOrder, makerOrderHash), 'invalid maker order');\\n\\n    // check the constraints of the 'one' maker order\\n    uint256 numNftsInOneOrder;\\n    for (uint256 i; i < makerOrder.nfts.length; ) {\\n      numNftsInOneOrder = numNftsInOneOrder + makerOrder.nfts[i].tokens.length;\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // check the constraints of many maker orders\\n    uint256 totalNftsInManyOrders;\\n    bool numNftsPerManyOrderValid = true;\\n    bool isOrdersTimeValid = true;\\n    bool itemsIntersect = true;\\n    for (uint256 i; i < manyMakerOrders.length; ) {\\n      uint256 nftsLength = manyMakerOrders[i].nfts.length;\\n      uint256 numNftsPerOrder;\\n      for (uint256 j; j < nftsLength; ) {\\n        numNftsPerOrder = numNftsPerOrder + manyMakerOrders[i].nfts[j].tokens.length;\\n        unchecked {\\n          ++j;\\n        }\\n      }\\n      numNftsPerManyOrderValid = numNftsPerManyOrderValid && manyMakerOrders[i].constraints[0] == numNftsPerOrder;\\n      totalNftsInManyOrders = totalNftsInManyOrders + numNftsPerOrder;\\n\\n      isOrdersTimeValid =\\n        isOrdersTimeValid &&\\n        manyMakerOrders[i].constraints[3] <= block.timestamp &&\\n        manyMakerOrders[i].constraints[4] >= block.timestamp;\\n\\n      itemsIntersect = itemsIntersect && doItemsIntersect(makerOrder.nfts, manyMakerOrders[i].nfts);\\n\\n      if (!numNftsPerManyOrderValid) {\\n        return (false, makerOrderHash); // short circuit\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    bool _isTimeValid = isOrdersTimeValid &&\\n      makerOrder.constraints[3] <= block.timestamp &&\\n      makerOrder.constraints[4] >= block.timestamp;\\n\\n    uint256 currentMakerOrderPrice = _getCurrentPrice(makerOrder);\\n    uint256 sumCurrentOrderPrices = _sumCurrentPrices(manyMakerOrders);\\n\\n    bool _isPriceValid;\\n    if (makerOrder.isSellOrder) {\\n      _isPriceValid = sumCurrentOrderPrices >= currentMakerOrderPrice;\\n    } else {\\n      _isPriceValid = sumCurrentOrderPrices <= currentMakerOrderPrice;\\n    }\\n\\n    return (\\n      numNftsInOneOrder == makerOrder.constraints[0] &&\\n        numNftsInOneOrder == totalNftsInManyOrders &&\\n        _isTimeValid &&\\n        itemsIntersect &&\\n        _isPriceValid,\\n      makerOrderHash\\n    );\\n  }\\n\\n  /**\\n   * @notice Checks whether match orders with a higher level intent can be executed\\n   * @dev This function is called by the main exchange to check whether one to one matches can be executed.\\n          It checks whether orders have the right constraints - i.e they have the right number of items, whether time is still valid,\\n          prices are valid and whether the nfts intersect\\n   * @param sell sell order\\n   * @param buy buy order\\n   * @param constructedNfts - nfts constructed by the off chain matching engine\\n   * @return returns whether the order can be execute, orderHashes and the execution price\\n   */\\n  function canExecMatchOrder(\\n    OrderTypes.MakerOrder calldata sell,\\n    OrderTypes.MakerOrder calldata buy,\\n    OrderTypes.OrderItem[] calldata constructedNfts\\n  )\\n    external\\n    view\\n    override\\n    returns (\\n      bool,\\n      bytes32,\\n      bytes32,\\n      uint256\\n    )\\n  {\\n    // check if orders are valid\\n    bytes32 sellOrderHash = _hash(sell);\\n    bytes32 buyOrderHash = _hash(buy);\\n    require(verifyMatchOrders(sellOrderHash, buyOrderHash, sell, buy), 'order not verified');\\n\\n    (bool _isPriceValid, uint256 execPrice) = isPriceValid(sell, buy);\\n\\n    return (\\n      isTimeValid(sell, buy) &&\\n        _isPriceValid &&\\n        areNumMatchItemsValid(sell, buy, constructedNfts) &&\\n        doItemsIntersect(sell.nfts, constructedNfts) &&\\n        doItemsIntersect(buy.nfts, constructedNfts),\\n      sellOrderHash,\\n      buyOrderHash,\\n      execPrice\\n    );\\n  }\\n\\n  /**\\n   * @notice Checks whether one to one taker orders can be executed\\n   * @dev This function is called by the main exchange to check whether one to one taker orders can be executed.\\n          It checks whether orders have the right constraints - i.e they have one NFT only and whether time is still valid\\n   * @param makerOrder the makerOrder\\n   * @return returns whether the order can be executed and makerOrderHash\\n   */\\n  function canExecTakeOneOrder(OrderTypes.MakerOrder calldata makerOrder)\\n    external\\n    view\\n    override\\n    returns (bool, bytes32)\\n  {\\n    // check if makerOrder is valid\\n    bytes32 makerOrderHash = _hash(makerOrder);\\n    require(isOrderValid(makerOrder, makerOrderHash), 'invalid maker order');\\n\\n    bool numItemsValid = makerOrder.constraints[0] == 1 &&\\n      makerOrder.nfts.length == 1 &&\\n      makerOrder.nfts[0].tokens.length == 1;\\n    bool _isTimeValid = makerOrder.constraints[3] <= block.timestamp && makerOrder.constraints[4] >= block.timestamp;\\n\\n    return (numItemsValid && _isTimeValid, makerOrderHash);\\n  }\\n\\n  /**\\n   * @notice Checks whether take orders with a higher level intent can be executed\\n   * @dev This function is called by the main exchange to check whether take orders with a higher level intent can be executed.\\n          It checks whether orders have the right constraints - i.e they have the right number of items, whether time is still valid\\n          and whether the nfts intersect\\n   * @param makerOrder the maker order\\n   * @param takerItems the taker items specified by the taker\\n   * @return returns whether order can be executed and the makerOrderHash\\n   */\\n  function canExecTakeOrder(OrderTypes.MakerOrder calldata makerOrder, OrderTypes.OrderItem[] calldata takerItems)\\n    external\\n    view\\n    override\\n    returns (bool, bytes32)\\n  {\\n    // check if makerOrder is valid\\n    bytes32 makerOrderHash = _hash(makerOrder);\\n    require(isOrderValid(makerOrder, makerOrderHash), 'invalid maker order');\\n\\n    return (\\n      makerOrder.constraints[3] <= block.timestamp &&\\n        makerOrder.constraints[4] >= block.timestamp &&\\n        areNumTakerItemsValid(makerOrder, takerItems) &&\\n        doItemsIntersect(makerOrder.nfts, takerItems),\\n      makerOrderHash\\n    );\\n  }\\n\\n  // ======================================================= PUBLIC FUNCTIONS ==================================================\\n\\n  /**\\n   * @notice Checks whether orders are valid\\n   * @dev Checks whether currencies match, sides match, complications match and if each order is valid (see isOrderValid)\\n   * @param sellOrderHash hash of the sell order\\n   * @param buyOrderHash hash of the buy order\\n   * @param sell the sell order\\n   * @param buy the buy order\\n   * @return whether orders are valid\\n   */\\n  function verifyMatchOneToOneOrders(\\n    bytes32 sellOrderHash,\\n    bytes32 buyOrderHash,\\n    OrderTypes.MakerOrder calldata sell,\\n    OrderTypes.MakerOrder calldata buy\\n  ) public view returns (bool) {\\n    bool currenciesMatch = sell.execParams[1] == buy.execParams[1] ||\\n      (sell.execParams[1] == address(0) && buy.execParams[1] == WETH);\\n\\n    return (sell.isSellOrder &&\\n      !buy.isSellOrder &&\\n      sell.execParams[0] == buy.execParams[0] &&\\n      sell.signer != buy.signer &&\\n      currenciesMatch &&\\n      isOrderValid(sell, sellOrderHash) &&\\n      isOrderValid(buy, buyOrderHash));\\n  }\\n\\n  /**\\n   * @notice Checks whether orders are valid\\n   * @dev Checks whether currencies match, sides match, complications match and if each order is valid (see isOrderValid)\\n   * @param sell the sell order\\n   * @param buy the buy order\\n   * @return whether orders are valid and orderHash\\n   */\\n  function verifyMatchOneToManyOrders(\\n    bool verifySellOrder,\\n    OrderTypes.MakerOrder calldata sell,\\n    OrderTypes.MakerOrder calldata buy\\n  ) public view override returns (bool, bytes32) {\\n    bool currenciesMatch = sell.execParams[1] == buy.execParams[1] ||\\n      (sell.execParams[1] == address(0) && buy.execParams[1] == WETH);\\n\\n    bool _orderValid;\\n    bytes32 orderHash;\\n\\n    if (verifySellOrder) {\\n      orderHash = _hash(sell);\\n      _orderValid = isOrderValid(sell, orderHash);\\n    } else {\\n      orderHash = _hash(buy);\\n      _orderValid = isOrderValid(buy, orderHash);\\n    }\\n    return (\\n      sell.isSellOrder &&\\n        !buy.isSellOrder &&\\n        sell.execParams[0] == buy.execParams[0] &&\\n        sell.signer != buy.signer &&\\n        currenciesMatch &&\\n        _orderValid,\\n      orderHash\\n    );\\n  }\\n\\n  /**\\n   * @notice Checks whether orders are valid\\n   * @dev Checks whether currencies match, sides match, complications match and if each order is valid (see isOrderValid)\\n          Also checks if the given complication can execute this order\\n   * @param sellOrderHash hash of the sell order\\n   * @param buyOrderHash hash of the buy order\\n   * @param sell the sell order\\n   * @param buy the buy order\\n   * @return whether orders are valid\\n   */\\n  function verifyMatchOrders(\\n    bytes32 sellOrderHash,\\n    bytes32 buyOrderHash,\\n    OrderTypes.MakerOrder calldata sell,\\n    OrderTypes.MakerOrder calldata buy\\n  ) public view returns (bool) {\\n    bool currenciesMatch = sell.execParams[1] == buy.execParams[1] ||\\n      (sell.execParams[1] == address(0) && buy.execParams[1] == WETH);\\n\\n    return (sell.isSellOrder &&\\n      !buy.isSellOrder &&\\n      sell.execParams[0] == buy.execParams[0] &&\\n      sell.signer != buy.signer &&\\n      currenciesMatch &&\\n      isOrderValid(sell, sellOrderHash) &&\\n      isOrderValid(buy, buyOrderHash));\\n  }\\n\\n  /**\\n   * @notice Verifies the validity of the order\\n   * @dev checks if signature is valid and if the complication and currency are valid\\n   * @param order the order\\n   * @param orderHash computed hash of the order\\n   * @return whether the order is valid\\n   */\\n  function isOrderValid(OrderTypes.MakerOrder calldata order, bytes32 orderHash) public view returns (bool) {\\n    // Verify the validity of the signature\\n    (bytes32 r, bytes32 s, uint8 v) = abi.decode(order.sig, (bytes32, bytes32, uint8));\\n    bool sigValid = SignatureChecker.verify(orderHash, order.signer, r, s, v, DOMAIN_SEPARATOR);\\n    return (sigValid && order.execParams[0] == address(this) && _currencies.contains(order.execParams[1]));\\n  }\\n\\n  /// @dev checks whether the orders are expired\\n  function isTimeValid(OrderTypes.MakerOrder calldata sell, OrderTypes.MakerOrder calldata buy)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return\\n      sell.constraints[3] <= block.timestamp &&\\n      sell.constraints[4] >= block.timestamp &&\\n      buy.constraints[3] <= block.timestamp &&\\n      buy.constraints[4] >= block.timestamp;\\n  }\\n\\n  /// @dev checks whether the price is valid; a buy order should always have a higher price than a sell order\\n  function isPriceValid(OrderTypes.MakerOrder calldata sell, OrderTypes.MakerOrder calldata buy)\\n    public\\n    view\\n    returns (bool, uint256)\\n  {\\n    (uint256 currentSellPrice, uint256 currentBuyPrice) = (_getCurrentPrice(sell), _getCurrentPrice(buy));\\n    return (currentBuyPrice >= currentSellPrice, currentSellPrice);\\n  }\\n\\n  /// @dev sanity check to make sure the constructed nfts conform to the user signed constraints\\n  function areNumMatchItemsValid(\\n    OrderTypes.MakerOrder calldata sell,\\n    OrderTypes.MakerOrder calldata buy,\\n    OrderTypes.OrderItem[] calldata constructedNfts\\n  ) public pure returns (bool) {\\n    uint256 numConstructedItems;\\n    for (uint256 i; i < constructedNfts.length; ) {\\n      unchecked {\\n        numConstructedItems = numConstructedItems + constructedNfts[i].tokens.length;\\n        ++i;\\n      }\\n    }\\n    return numConstructedItems >= buy.constraints[0] && numConstructedItems <= sell.constraints[0];\\n  }\\n\\n  /// @dev sanity check to make sure that a taker is specifying the right number of items\\n  function areNumTakerItemsValid(OrderTypes.MakerOrder calldata makerOrder, OrderTypes.OrderItem[] calldata takerItems)\\n    public\\n    pure\\n    returns (bool)\\n  {\\n    uint256 numTakerItems;\\n    for (uint256 i; i < takerItems.length; ) {\\n      unchecked {\\n        numTakerItems = numTakerItems + takerItems[i].tokens.length;\\n        ++i;\\n      }\\n    }\\n    return makerOrder.constraints[0] == numTakerItems;\\n  }\\n\\n  /**\\n   * @notice Checks whether nfts intersect\\n   * @dev This function checks whether there are intersecting nfts between two orders\\n   * @param order1Nfts nfts in the first order\\n   * @param order2Nfts nfts in the second order\\n   * @return returns whether items intersect\\n   */\\n  function doItemsIntersect(OrderTypes.OrderItem[] calldata order1Nfts, OrderTypes.OrderItem[] calldata order2Nfts)\\n    public\\n    pure\\n    returns (bool)\\n  {\\n    uint256 order1NftsLength = order1Nfts.length;\\n    uint256 order2NftsLength = order2Nfts.length;\\n    // case where maker/taker didn't specify any items\\n    if (order1NftsLength == 0 || order2NftsLength == 0) {\\n      return true;\\n    }\\n\\n    uint256 numCollsMatched;\\n    unchecked {\\n      for (uint256 i; i < order2NftsLength; ) {\\n        for (uint256 j; j < order1NftsLength; ) {\\n          if (order1Nfts[j].collection == order2Nfts[i].collection) {\\n            // increment numCollsMatched\\n            ++numCollsMatched;\\n            // check if tokenIds intersect\\n            bool tokenIdsIntersect = doTokenIdsIntersect(order1Nfts[j], order2Nfts[i]);\\n            require(tokenIdsIntersect, 'tokenIds dont intersect');\\n            // short circuit\\n            break;\\n          }\\n          ++j;\\n        }\\n        ++i;\\n      }\\n    }\\n\\n    return numCollsMatched == order2NftsLength;\\n  }\\n\\n  /**\\n   * @notice Checks whether tokenIds intersect\\n   * @dev This function checks whether there are intersecting tokenIds between two order items\\n   * @param item1 first item\\n   * @param item2 second item\\n   * @return returns whether tokenIds intersect\\n   */\\n  function doTokenIdsIntersect(OrderTypes.OrderItem calldata item1, OrderTypes.OrderItem calldata item2)\\n    public\\n    pure\\n    returns (bool)\\n  {\\n    uint256 item1TokensLength = item1.tokens.length;\\n    uint256 item2TokensLength = item2.tokens.length;\\n    // case where maker/taker didn't specify any tokenIds for this collection\\n    if (item1TokensLength == 0 || item2TokensLength == 0) {\\n      return true;\\n    }\\n    uint256 numTokenIdsPerCollMatched;\\n    unchecked {\\n      for (uint256 k; k < item2TokensLength; ) {\\n        for (uint256 l; l < item1TokensLength; ) {\\n          if (item1.tokens[l].tokenId == item2.tokens[k].tokenId) {\\n            // increment numTokenIdsPerCollMatched\\n            ++numTokenIdsPerCollMatched;\\n            // short circuit\\n            break;\\n          }\\n          ++l;\\n        }\\n        ++k;\\n      }\\n    }\\n\\n    return numTokenIdsPerCollMatched == item2TokensLength;\\n  }\\n\\n  // ======================================================= UTILS ============================================================\\n\\n  /// @dev hashes the given order with the help of _nftsHash and _tokensHash\\n  function _hash(OrderTypes.MakerOrder calldata order) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          ORDER_HASH,\\n          order.isSellOrder,\\n          order.signer,\\n          keccak256(abi.encodePacked(order.constraints)),\\n          _nftsHash(order.nfts),\\n          keccak256(abi.encodePacked(order.execParams)),\\n          keccak256(order.extraParams)\\n        )\\n      );\\n  }\\n\\n  function _nftsHash(OrderTypes.OrderItem[] calldata nfts) internal pure returns (bytes32) {\\n    bytes32[] memory hashes = new bytes32[](nfts.length);\\n    for (uint256 i; i < nfts.length; ) {\\n      bytes32 hash = keccak256(abi.encode(ORDER_ITEM_HASH, nfts[i].collection, _tokensHash(nfts[i].tokens)));\\n      hashes[i] = hash;\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    bytes32 nftsHash = keccak256(abi.encodePacked(hashes));\\n    return nftsHash;\\n  }\\n\\n  function _tokensHash(OrderTypes.TokenInfo[] calldata tokens) internal pure returns (bytes32) {\\n    bytes32[] memory hashes = new bytes32[](tokens.length);\\n    for (uint256 i; i < tokens.length; ) {\\n      bytes32 hash = keccak256(abi.encode(TOKEN_INFO_HASH, tokens[i].tokenId, tokens[i].numTokens));\\n      hashes[i] = hash;\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    bytes32 tokensHash = keccak256(abi.encodePacked(hashes));\\n    return tokensHash;\\n  }\\n\\n  /// @dev returns the sum of current order prices; used in match one to many orders\\n  function _sumCurrentPrices(OrderTypes.MakerOrder[] calldata orders) internal view returns (uint256) {\\n    uint256 sum;\\n    uint256 ordersLength = orders.length;\\n    for (uint256 i; i < ordersLength; ) {\\n      sum = sum + _getCurrentPrice(orders[i]);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return sum;\\n  }\\n\\n  /// @dev Gets current order price for orders that vary in price over time (dutch and reverse dutch auctions)\\n  function _getCurrentPrice(OrderTypes.MakerOrder calldata order) internal view returns (uint256) {\\n    (uint256 startPrice, uint256 endPrice) = (order.constraints[1], order.constraints[2]);\\n    if (startPrice == endPrice) {\\n      return startPrice;\\n    }\\n\\n    uint256 duration = order.constraints[4] - order.constraints[3];\\n    if (duration == 0) {\\n      return startPrice;\\n    }\\n\\n    uint256 elapsedTime = block.timestamp - order.constraints[3];\\n    unchecked {\\n      uint256 portionBps = elapsedTime > duration ? PRECISION : ((elapsedTime * PRECISION) / duration);\\n      if (startPrice > endPrice) {\\n        uint256 priceDiff = ((startPrice - endPrice) * portionBps) / PRECISION;\\n        return startPrice - priceDiff;\\n      } else {\\n        uint256 priceDiff = ((endPrice - startPrice) * portionBps) / PRECISION;\\n        return startPrice + priceDiff;\\n      }\\n    }\\n  }\\n\\n  // ======================================================= OWNER FUNCTIONS ============================================================\\n\\n  /// @dev adds a new transaction currency to the exchange\\n  function addCurrency(address _currency) external onlyOwner {\\n    _currencies.add(_currency);\\n    emit CurrencyAdded(_currency);\\n  }\\n\\n  /// @dev removes a transaction currency from the exchange\\n  function removeCurrency(address _currency) external onlyOwner {\\n    _currencies.remove(_currency);\\n    emit CurrencyRemoved(_currency);\\n  }\\n\\n  // ======================================================= VIEW FUNCTIONS ============================================================\\n\\n  /// @notice returns the number of currencies supported by the exchange\\n  function numCurrencies() external view returns (uint256) {\\n    return _currencies.length();\\n  }\\n\\n  /// @notice returns the currency at the given index\\n  function getCurrencyAt(uint256 index) external view returns (address) {\\n    return _currencies.at(index);\\n  }\\n\\n  /// @notice returns whether a given currency is valid\\n  function isValidCurrency(address currency) external view returns (bool) {\\n    return _currencies.contains(currency);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC1271} from '@openzeppelin/contracts/interfaces/IERC1271.sol';\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts\\n */\\nlibrary SignatureChecker {\\n  /**\\n   * @notice Recovers the signer of a signature (for EOA)\\n   * @param hashed hash containing the signed message\\n   * @param r parameter\\n   * @param s parameter\\n   * @param v parameter (27 or 28). This prevents malleability since the public key recovery equation has two possible solutions.\\n   */\\n  function recover(\\n    bytes32 hashed,\\n    bytes32 r,\\n    bytes32 s,\\n    uint8 v\\n  ) internal pure returns (address) {\\n    // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n    // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n    require(\\n      uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n      'Signature: Invalid s parameter'\\n    );\\n\\n    require(v == 27 || v == 28, 'Signature: Invalid v parameter');\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hashed, v, r, s);\\n    require(signer != address(0), 'Signature: Invalid signer');\\n\\n    return signer;\\n  }\\n\\n  /**\\n   * @notice Returns whether the signer matches the signed message\\n   * @param orderHash the hash containing the signed message\\n   * @param signer the signer address to confirm message validity\\n   * @param r parameter\\n   * @param s parameter\\n   * @param v parameter (27 or 28) this prevents malleability since the public key recovery equation has two possible solutions\\n   * @param domainSeparator parameter to prevent signature being executed in other chains and environments\\n   * @return true --> if valid // false --> if invalid\\n   */\\n  function verify(\\n    bytes32 orderHash,\\n    address signer,\\n    bytes32 r,\\n    bytes32 s,\\n    uint8 v,\\n    bytes32 domainSeparator\\n  ) internal view returns (bool) {\\n    // \\\\x19\\\\x01 is the standardized encoding prefix\\n    // https://eips.ethereum.org/EIPS/eip-712#specification\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', domainSeparator, orderHash));\\n\\n    if (Address.isContract(signer)) {\\n      // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n      return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\\n    } else {\\n      return recover(digest, r, s, v) == signer;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/OrderTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\n/**\\n * @title OrderTypes\\n * @author nneverlander. Twitter @nneverlander\\n * @notice This library contains the order types used by the main exchange and complications\\n */\\nlibrary OrderTypes {\\n  /// @dev the tokenId and numTokens (==1 for ERC721)\\n  struct TokenInfo {\\n    uint256 tokenId;\\n    uint256 numTokens;\\n  }\\n\\n  /// @dev an order item is a collection address and tokens from that collection\\n  struct OrderItem {\\n    address collection;\\n    TokenInfo[] tokens;\\n  }\\n\\n  struct MakerOrder {\\n    ///@dev is order sell or buy\\n    bool isSellOrder;\\n    ///@dev signer of the order (maker address)\\n    address signer;\\n    ///@dev Constraints array contains the order constraints. Total constraints: 7. In order:\\n    // numItems - min (for buy orders) / max (for sell orders) number of items in the order\\n    // start price in wei\\n    // end price in wei\\n    // start time in block.timestamp\\n    // end time in block.timestamp\\n    // nonce of the order\\n    // max tx.gasprice in wei that a user is willing to pay for gas\\n    uint256[] constraints;\\n    ///@dev nfts array contains order items where each item is a collection and its tokenIds\\n    OrderItem[] nfts;\\n    ///@dev address of complication for trade execution (e.g. InfinityOrderBookComplication), address of the currency (e.g., WETH)\\n    address[] execParams;\\n    ///@dev additional parameters like traits for trait orders, private sale buyer for OTC orders etc\\n    bytes extraParams;\\n    ///@dev the order signature uint8 v: parameter (27 or 28), bytes32 r, bytes32 s\\n    bytes sig;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IComplication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport {OrderTypes} from '../libs/OrderTypes.sol';\\n\\n/**\\n * @title IComplication\\n * @author nneverlander. Twitter @nneverlander\\n * @notice Complication interface that must be implemented by all complications (execution strategies)\\n */\\ninterface IComplication {\\n  function canExecMatchOneToOne(OrderTypes.MakerOrder calldata makerOrder1, OrderTypes.MakerOrder calldata makerOrder2)\\n    external\\n    view\\n    returns (\\n      bool,\\n      bytes32,\\n      bytes32,\\n      uint256\\n    );\\n\\n  function canExecMatchOneToMany(\\n    OrderTypes.MakerOrder calldata makerOrder,\\n    OrderTypes.MakerOrder[] calldata manyMakerOrders\\n  ) external view returns (bool, bytes32);\\n\\n  function canExecMatchOrder(\\n    OrderTypes.MakerOrder calldata sell,\\n    OrderTypes.MakerOrder calldata buy,\\n    OrderTypes.OrderItem[] calldata constructedNfts\\n  )\\n    external\\n    view\\n    returns (\\n      bool,\\n      bytes32,\\n      bytes32,\\n      uint256\\n    );\\n\\n  function canExecTakeOneOrder(OrderTypes.MakerOrder calldata makerOrder) external view returns (bool, bytes32);\\n\\n  function canExecTakeOrder(OrderTypes.MakerOrder calldata makerOrder, OrderTypes.OrderItem[] calldata takerItems)\\n    external\\n    view\\n    returns (bool, bytes32);\\n\\n  function verifyMatchOneToManyOrders(\\n    bool verifySellOrder,\\n    OrderTypes.MakerOrder calldata sell,\\n    OrderTypes.MakerOrder calldata buy\\n  ) external view returns (bool, bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"CurrencyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"CurrencyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORDER_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORDER_ITEM_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_INFO_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"buy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"constructedNfts\",\"type\":\"tuple[]\"}],\"name\":\"areNumMatchItemsValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"takerItems\",\"type\":\"tuple[]\"}],\"name\":\"areNumTakerItemsValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder[]\",\"name\":\"manyMakerOrders\",\"type\":\"tuple[]\"}],\"name\":\"canExecMatchOneToMany\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder2\",\"type\":\"tuple\"}],\"name\":\"canExecMatchOneToOne\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"buy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"constructedNfts\",\"type\":\"tuple[]\"}],\"name\":\"canExecMatchOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"}],\"name\":\"canExecTakeOneOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"takerItems\",\"type\":\"tuple[]\"}],\"name\":\"canExecTakeOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"order1Nfts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"order2Nfts\",\"type\":\"tuple[]\"}],\"name\":\"doItemsIntersect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem\",\"name\":\"item1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem\",\"name\":\"item2\",\"type\":\"tuple\"}],\"name\":\"doTokenIdsIntersect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCurrencyAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"isOrderValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"buy\",\"type\":\"tuple\"}],\"name\":\"isPriceValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"buy\",\"type\":\"tuple\"}],\"name\":\"isTimeValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"isValidCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numCurrencies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"verifySellOrder\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"buy\",\"type\":\"tuple\"}],\"name\":\"verifyMatchOneToManyOrders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sellOrderHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"buyOrderHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"buy\",\"type\":\"tuple\"}],\"name\":\"verifyMatchOneToOneOrders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sellOrderHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"buyOrderHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"buy\",\"type\":\"tuple\"}],\"name\":\"verifyMatchOrders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InfinityOrderBookComplication", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "99999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}