{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Woolly.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../node_modules/@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport './DividendToken.sol';\\n\\ncontract Woolly is Context, IERC20, IERC20Metadata, DividendToken {\\n\\n    string private constant NAME = 'Woolly';\\n    string private constant SYMBOL = 'WOOL';\\n    uint8 private constant DECIMALS = 18;\\n    uint256 constant INITIAL_SUPPLY = 1000000000000000000000000000000000; // in smallest unit of token\\n    uint internal inceptionTimestamp_;\\n    uint internal constant DIVIDEND_PAY_PERIOD = 30 days;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 private _totalSupply;\\n\\n    constructor() {\\n\\n        _totalSupply = INITIAL_SUPPLY;\\n        dividendSupply_ = INITIAL_SUPPLY/2;\\n        inceptionTimestamp_ = block.timestamp;\\n\\n        // add contract creator to dividend blacklist\\n        updateDividendBlacklist(msg.sender, true);\\n\\n        _balances[msg.sender] = INITIAL_SUPPLY/2;\\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY/2);\\n\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address ownerAddress, address spenderAddress) external view virtual override returns (uint256) {\\n        return _allowances[ownerAddress][spenderAddress];\\n    }\\n\\n   /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n   /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ownerAddress` cannot be the zero address.\\n     * - `spenderAddress` cannot be the zero address.\\n     */\\n    function _approve(address ownerAddress, address spenderAddress, uint256 amount) internal virtual {\\n        require(ownerAddress != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spenderAddress != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[ownerAddress][spenderAddress] = amount;\\n        emit Approval(ownerAddress, spenderAddress, amount);\\n    }\\n\\n    /**\\n    * @dev Returns the account balance of another account with the address owner\\n    * @param ownerAddress - the address of the account owner\\n    */\\n    function balanceOf(address ownerAddress) external view virtual override returns (uint256) {\\n        return _balances[ownerAddress];\\n    }\\n\\n    /**\\n    * @dev Burn tokens into Dividend Supply\\n    * @param value - amount of tokens to burn to the dividend supply\\n    * @return bool\\n    */\\n    function burnToDividendSupply(uint256 value) external returns (bool)\\n    {\\n        // validate that sender has sufficent balance\\n        require(value <= _balances[msg.sender]);\\n\\n        // deduct from the sender's balance\\n        _balances[msg.sender] = _balances[msg.sender] - value;\\n\\n        // add value to dividend supply\\n        return addToDividendSupply(msg.sender, value);\\n    }\\n\\n    /**\\n    * @dev calculate the dividend for the supplied address and periods\\n    * @param targetAddress - address of the dividend recipient\\n    * @param dividendPeriods - number of periods on which the dividend should be calculated\\n    * @return uint256\\n    * NOTE: Dividend rate of ~ 0.578% per period simulated by /173\\n    *       This supports a monthly dividend payment for 10 years\\n    */\\n    function calculateDividend(address targetAddress, uint dividendPeriods) public view returns (uint256) {\\n        uint256 newBalance = _balances[targetAddress];\\n        uint256 currentDividend = 0;\\n        uint256 totalDividend = 0;\\n        for (uint i=0; i<dividendPeriods; i++) {\\n            currentDividend = newBalance / 173;\\n            totalDividend = totalDividend + currentDividend;\\n            newBalance = newBalance + currentDividend;\\n        }\\n        return totalDividend;\\n    }\\n\\n    /**\\n    * @dev Collect Dividend\\n    * @param targetAddress - the address of the recipient of the dividends\\n    * @param isCollected - boolean indicator of whether the dividend is collected or sent\\n    */\\n    function collectDividend(address targetAddress, bool isCollected) public returns (bool) {\\n\\n        // if the lastPaymentTimestamp is greater than a month, then calculate the number of months since the lastPaymentTimestamp and transfer that amount * (user token balance) to the user accounts.\\n        // Issue: The tokens could have been added recently, so the user should only receive dividend for those coins, not the entire balance.\\n        // This might require a monthly balance sheet for each user. That's a lot of storage and/or operations if performed on the chain\\n        // To avoid extra complexities the collectDividend function is called for both sender and receiver\\n        // Any changes to the balances should trigger collectDividend to avoid fraud\\n\\n        // no dividend for blacklisted addresses\\n        if (dividendBlacklist[targetAddress]) {\\n            return false;\\n        }\\n\\n        // Sets the Last Payment Timestamp for a new account\\n        if (lastPaymentTimestamp[targetAddress] == 0) {\\n            initializeNewAccount(targetAddress);\\n            return false;\\n        }\\n\\n        if (_balances[targetAddress] > 0 && block.timestamp >= lastPaymentTimestamp[targetAddress] + DIVIDEND_PAY_PERIOD) {\\n\\n            // calculate how many dividend periods have passed since the lastPayment\\n            uint currentPeriodTimestamp;\\n            uint dividendPeriods;\\n            (currentPeriodTimestamp, dividendPeriods) = getCurrentDividendPeriodAndTimestamp(lastPaymentTimestamp[targetAddress]);\\n\\n            // compute total dividend\\n            uint totalDividend = calculateDividend(targetAddress, dividendPeriods);\\n\\n            // validate totalDividend and update balances\\n            if (totalDividend > 0 && dividendSupply_ >= totalDividend) {\\n                updateBalances(targetAddress, totalDividend, isCollected, currentPeriodTimestamp, dividendPeriods);\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n\\n    }\\n\\n     /**\\n     * @dev Returns the number of decimals the token uses\\n     */\\n     function decimals() external view virtual override returns (uint8) {\\n        return DECIMALS;\\n     }\\n\\n    /**\\n    * @dev Returns the Last Dividend Timestamp and number of dividend periods passed since a given timestamp\\n    * @param lastTimestamp - The last dividend payment timestamp as an argument for calculating number of dividend periods passed along with a new timestamp\\n    * @return tuple\\n    */\\n    function getCurrentDividendPeriodAndTimestamp(uint lastTimestamp) public view returns (uint, uint) {\\n\\n        // the time passed since the inceptionTimestamp, divided by the period size and then rounded to months\\n        require (block.timestamp > lastTimestamp);\\n        uint numberOfPeriodsPassed = (block.timestamp - lastTimestamp) / DIVIDEND_PAY_PERIOD; // # of periods passed since the last payment\\n        return (lastTimestamp + (numberOfPeriodsPassed * DIVIDEND_PAY_PERIOD), numberOfPeriodsPassed);\\n\\n    }\\n\\n    /**\\n    * @dev Returns the InceptionTimestamp\\n    * @return uint\\n    */\\n    function getInceptionTimestamp() external view returns (uint) {\\n        return inceptionTimestamp_;\\n    }\\n\\n     /**\\n     * @dev initialize a new account\\n     * @param targetAddress - address at which to initialize new account\\n     */\\n     function initializeNewAccount(address targetAddress) public {\\n         uint _period;\\n         (lastPaymentTimestamp[targetAddress], _period) = getCurrentDividendPeriodAndTimestamp(inceptionTimestamp_);\\n         emit DividendTimeStampInitialized(targetAddress, lastPaymentTimestamp[targetAddress], _period);\\n     }\\n\\n     /**\\n     * @dev Returns the name of the token\\n     */\\n     function name() external view virtual override returns (string memory) {\\n        return NAME;\\n     }\\n\\n     /**\\n     * @dev Returns the symbol of the token\\n     */\\n     function symbol() external view virtual override returns (string memory) {\\n        return SYMBOL;\\n     }\\n\\n     /**\\n     * @dev Returns the total token supply\\n     */\\n     function totalSupply() external view virtual override returns (uint256) {\\n        return _totalSupply;\\n     }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param to - The address to transfer to.\\n    * @param value - The amount to be transferred.\\n    * @return bool\\n    */\\n    function transfer(address to, uint256 value) external override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param from - The address to transfer from.\\n    * @param to - The address to transfer to.\\n    * @param value - The amount to be transferred.\\n    */\\n    function _transfer(address from, address to, uint256 value) internal virtual {\\n\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        // validate balance\\n        require(value <= _balances[from], 'ERC20: insufficient balance');\\n\\n        // collect dividends\\n        collectDividend(from, true);\\n        collectDividend(to, false);\\n\\n        // update balances and emit transfer event\\n        _balances[from] = _balances[from] - value;\\n        _balances[to] = _balances[to] + value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance >= amount, 'ERC20: transfer amount exceeds allowance');\\n        unchecked {\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Update all balances from dividend collection\\n    * @param targetAddress - the address at which to update values\\n    * @param totalDividend - the total dividend amount\\n    * @param isCollected - boolean indicator of whether the dividend is collected or sent\\n    * @param currentPeriodTimestamp - current period timestamp value to update lastPaymentTimestamp\\n    * @param dividendPeriods - number of periods on which the dividend should be calculated\\n    */\\n    function updateBalances(address targetAddress, uint256 totalDividend, bool isCollected, uint currentPeriodTimestamp, uint dividendPeriods) public {\\n\\n        // update balances\\n        dividendSupply_ = dividendSupply_ - totalDividend;\\n        _balances[targetAddress] = _balances[targetAddress] + totalDividend;\\n\\n        // emit event\\n        if (isCollected) {\\n            emit DividendCollected(targetAddress, totalDividend, dividendPeriods);\\n        } else {\\n            emit DividendSent(targetAddress, totalDividend, dividendPeriods);\\n        }\\n\\n        // set last payment timestamp for address\\n        lastPaymentTimestamp[targetAddress] = currentPeriodTimestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/IDividendToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title DividendBasic\\n * @dev DividendToken interface\\n */\\ninterface IDividendToken {\\n  function totalDividendSupply() external view returns (uint256); \\n  function addToDividendSupply(address _from, uint256 value) external returns (bool);\\n  function updateDividendBlacklist(address _address, bool isBlacklisted) external;\\n\\n  event DividendBlacklistUpdated(address indexed _newAddress, bool isBlacklisted);\\n  event DividendTimeStampInitialized(address indexed _who, uint timestamp, uint currentPeriodNumber);\\n  event DividendCollected(address indexed _by, uint256 value, uint dividendPeriods);\\n  event DividendSent(address indexed _to, uint256 value, uint dividendPeriods);\\n  event BurnToDividend(address indexed _from, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/contracts/DividendToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDividendToken.sol\\\";\\nimport '../node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport \\\"../node_modules/@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DividendToken is Ownable, IDividendToken {\\n\\n    using SafeMath for uint256;\\n    mapping(address => uint256) internal lastPaymentTimestamp;\\n    mapping(address => bool) internal dividendBlacklist;\\n    uint256 internal dividendSupply_;\\n\\n    /**\\n    * @dev Total dividend supply left\\n    */\\n    function totalDividendSupply() external view returns (uint256) {\\n        return dividendSupply_;\\n    }\\n\\n    /**\\n    * @dev Returns the last payment timestamp of msg sender\\n    */\\n    function getLastPaymentTimestamp() external view returns (uint256) {\\n        return lastPaymentTimestamp[msg.sender];\\n    }\\n\\n    /**\\n    * @dev Transfer tokens to Dividend Supply\\n    */\\n    function addToDividendSupply(address from, uint256 value) public returns (bool) {\\n        dividendSupply_ = dividendSupply_.add(value);\\n        emit BurnToDividend(from, value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Add to DividendBlacklist\\n    */\\n    function updateDividendBlacklist(address targetAddress, bool isBlacklisted) public onlyOwner {\\n        dividendBlacklist[targetAddress] = isBlacklisted;\\n        emit DividendBlacklistUpdated(targetAddress, isBlacklisted);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnToDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"DividendBlacklistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividendPeriods\",\"type\":\"uint256\"}],\"name\":\"DividendCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividendPeriods\",\"type\":\"uint256\"}],\"name\":\"DividendSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPeriodNumber\",\"type\":\"uint256\"}],\"name\":\"DividendTimeStampInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addToDividendSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spenderAddress\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnToDividendSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dividendPeriods\",\"type\":\"uint256\"}],\"name\":\"calculateDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCollected\",\"type\":\"bool\"}],\"name\":\"collectDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"name\":\"getCurrentDividendPeriodAndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInceptionTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastPaymentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"initializeNewAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDividend\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCollected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentPeriodTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividendPeriods\",\"type\":\"uint256\"}],\"name\":\"updateBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"updateDividendBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Woolly", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}