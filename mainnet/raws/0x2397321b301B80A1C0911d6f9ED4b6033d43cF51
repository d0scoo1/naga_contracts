{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\n// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        _spendAllowance(account, _msgSender(), amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/IAccessControl.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControl.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Staking/Owned.sol\r\n\r\n\r\n// https://docs.synthetix.io/contracts/Owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor (address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n\r\n// File contracts/ERC20/ERC20PermissionedMint.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20PermissionedMint is ERC20, ERC20Burnable, Owned {\r\n\r\n    // Core\r\n    address public timelock_address;\r\n\r\n    // Minters\r\n    address[] public minters_array; // Allowed to mint\r\n    mapping(address => bool) public minters; // Mapping is also used for faster verification\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        address _creator_address,\r\n        address _timelock_address,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) \r\n    ERC20(_name, _symbol) \r\n    Owned(_creator_address)\r\n    {\r\n      timelock_address = _timelock_address;\r\n    }\r\n\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyByOwnGov() {\r\n        require(msg.sender == timelock_address || msg.sender == owner, \"Not owner or timelock\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinters() {\r\n       require(minters[msg.sender] == true, \"Only minters\");\r\n        _;\r\n    } \r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    // Used by minters when user redeems\r\n    function minter_burn_from(address b_address, uint256 b_amount) public onlyMinters {\r\n        super.burnFrom(b_address, b_amount);\r\n        emit TokenMinterBurned(b_address, msg.sender, b_amount);\r\n    }\r\n\r\n    // This function is what other minters will call to mint new tokens \r\n    function minter_mint(address m_address, uint256 m_amount) public onlyMinters {\r\n        super._mint(m_address, m_amount);\r\n        emit TokenMinterMinted(msg.sender, m_address, m_amount);\r\n    }\r\n\r\n    // Adds whitelisted minters \r\n    function addMinter(address minter_address) public onlyByOwnGov {\r\n        require(minter_address != address(0), \"Zero address detected\");\r\n\r\n        require(minters[minter_address] == false, \"Address already exists\");\r\n        minters[minter_address] = true; \r\n        minters_array.push(minter_address);\r\n\r\n        emit MinterAdded(minter_address);\r\n    }\r\n\r\n    // Remove a minter \r\n    function removeMinter(address minter_address) public onlyByOwnGov {\r\n        require(minter_address != address(0), \"Zero address detected\");\r\n        require(minters[minter_address] == true, \"Address nonexistant\");\r\n        \r\n        // Delete from the mapping\r\n        delete minters[minter_address];\r\n\r\n        // 'Delete' from the array by setting the address to 0x0\r\n        for (uint i = 0; i < minters_array.length; i++){ \r\n            if (minters_array[i] == minter_address) {\r\n                minters_array[i] = address(0); // This will leave a null in the array and keep the indices the same\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit MinterRemoved(minter_address);\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    \r\n    event TokenMinterBurned(address indexed from, address indexed to, uint256 amount);\r\n    event TokenMinterMinted(address indexed from, address indexed to, uint256 amount);\r\n    event MinterAdded(address minter_address);\r\n    event MinterRemoved(address minter_address);\r\n}\r\n\r\n\r\n// File contracts/FPI/FPI.sol\r\n\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ================================ FPI ===============================\r\n// ====================================================================\r\n// Frax Price Index\r\n// Initial peg target is the US CPI-U (Consumer Price Index, All Urban Consumers)\r\n\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n// Jack Corddry: https://github.com/corddry\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Sam Kazemian: https://github.com/samkazemian\r\n// Rich Gee: https://github.com/zer0blockchain\r\n// Dennis: https://github.com/denett\r\ncontract FPI is ERC20PermissionedMint {\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n      address _creator_address,\r\n      address _timelock_address\r\n    ) \r\n    ERC20PermissionedMint(_creator_address, _timelock_address, \"Frax Price Index\", \"FPI\") \r\n    {\r\n      _mint(_creator_address, 100000000e18); // Genesis mint\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/Frax/IFrax.sol\r\n\r\n\r\ninterface IFrax {\r\n  function COLLATERAL_RATIO_PAUSER() external view returns (bytes32);\r\n  function DEFAULT_ADMIN_ADDRESS() external view returns (address);\r\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\r\n  function addPool(address pool_address ) external;\r\n  function allowance(address owner, address spender ) external view returns (uint256);\r\n  function approve(address spender, uint256 amount ) external returns (bool);\r\n  function balanceOf(address account ) external view returns (uint256);\r\n  function burn(uint256 amount ) external;\r\n  function burnFrom(address account, uint256 amount ) external;\r\n  function collateral_ratio_paused() external view returns (bool);\r\n  function controller_address() external view returns (address);\r\n  function creator_address() external view returns (address);\r\n  function decimals() external view returns (uint8);\r\n  function decreaseAllowance(address spender, uint256 subtractedValue ) external returns (bool);\r\n  function eth_usd_consumer_address() external view returns (address);\r\n  function eth_usd_price() external view returns (uint256);\r\n  function frax_eth_oracle_address() external view returns (address);\r\n  function frax_info() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\r\n  function frax_pools(address ) external view returns (bool);\r\n  function frax_pools_array(uint256 ) external view returns (address);\r\n  function frax_price() external view returns (uint256);\r\n  function frax_step() external view returns (uint256);\r\n  function fxs_address() external view returns (address);\r\n  function fxs_eth_oracle_address() external view returns (address);\r\n  function fxs_price() external view returns (uint256);\r\n  function genesis_supply() external view returns (uint256);\r\n  function getRoleAdmin(bytes32 role ) external view returns (bytes32);\r\n  function getRoleMember(bytes32 role, uint256 index ) external view returns (address);\r\n  function getRoleMemberCount(bytes32 role ) external view returns (uint256);\r\n  function globalCollateralValue() external view returns (uint256);\r\n  function global_collateral_ratio() external view returns (uint256);\r\n  function grantRole(bytes32 role, address account ) external;\r\n  function hasRole(bytes32 role, address account ) external view returns (bool);\r\n  function increaseAllowance(address spender, uint256 addedValue ) external returns (bool);\r\n  function last_call_time() external view returns (uint256);\r\n  function minting_fee() external view returns (uint256);\r\n  function name() external view returns (string memory);\r\n  function owner_address() external view returns (address);\r\n  function pool_burn_from(address b_address, uint256 b_amount ) external;\r\n  function pool_mint(address m_address, uint256 m_amount ) external;\r\n  function price_band() external view returns (uint256);\r\n  function price_target() external view returns (uint256);\r\n  function redemption_fee() external view returns (uint256);\r\n  function refreshCollateralRatio() external;\r\n  function refresh_cooldown() external view returns (uint256);\r\n  function removePool(address pool_address ) external;\r\n  function renounceRole(bytes32 role, address account ) external;\r\n  function revokeRole(bytes32 role, address account ) external;\r\n  function setController(address _controller_address ) external;\r\n  function setETHUSDOracle(address _eth_usd_consumer_address ) external;\r\n  function setFRAXEthOracle(address _frax_oracle_addr, address _weth_address ) external;\r\n  function setFXSAddress(address _fxs_address ) external;\r\n  function setFXSEthOracle(address _fxs_oracle_addr, address _weth_address ) external;\r\n  function setFraxStep(uint256 _new_step ) external;\r\n  function setMintingFee(uint256 min_fee ) external;\r\n  function setOwner(address _owner_address ) external;\r\n  function setPriceBand(uint256 _price_band ) external;\r\n  function setPriceTarget(uint256 _new_price_target ) external;\r\n  function setRedemptionFee(uint256 red_fee ) external;\r\n  function setRefreshCooldown(uint256 _new_cooldown ) external;\r\n  function setTimelock(address new_timelock ) external;\r\n  function symbol() external view returns (string memory);\r\n  function timelock_address() external view returns (address);\r\n  function toggleCollateralRatio() external;\r\n  function totalSupply() external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount ) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);\r\n  function weth_address() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/Frax/IFraxAMOMinter.sol\r\n\r\n\r\n// MAY need to be updated\r\ninterface IFraxAMOMinter {\r\n  function FRAX() external view returns(address);\r\n  function FXS() external view returns(address);\r\n  function acceptOwnership() external;\r\n  function addAMO(address amo_address, bool sync_too) external;\r\n  function allAMOAddresses() external view returns(address[] memory);\r\n  function allAMOsLength() external view returns(uint256);\r\n  function amos(address) external view returns(bool);\r\n  function amos_array(uint256) external view returns(address);\r\n  function burnFraxFromAMO(uint256 frax_amount) external;\r\n  function burnFxsFromAMO(uint256 fxs_amount) external;\r\n  function col_idx() external view returns(uint256);\r\n  function collatDollarBalance() external view returns(uint256);\r\n  function collatDollarBalanceStored() external view returns(uint256);\r\n  function collat_borrow_cap() external view returns(int256);\r\n  function collat_borrowed_balances(address) external view returns(int256);\r\n  function collat_borrowed_sum() external view returns(int256);\r\n  function collateral_address() external view returns(address);\r\n  function collateral_token() external view returns(address);\r\n  function correction_offsets_amos(address, uint256) external view returns(int256);\r\n  function custodian_address() external view returns(address);\r\n  function dollarBalances() external view returns(uint256 frax_val_e18, uint256 collat_val_e18);\r\n  // function execute(address _to, uint256 _value, bytes _data) external returns(bool, bytes);\r\n  function fraxDollarBalanceStored() external view returns(uint256);\r\n  function fraxTrackedAMO(address amo_address) external view returns(int256);\r\n  function fraxTrackedGlobal() external view returns(int256);\r\n  function frax_mint_balances(address) external view returns(int256);\r\n  function frax_mint_cap() external view returns(int256);\r\n  function frax_mint_sum() external view returns(int256);\r\n  function fxs_mint_balances(address) external view returns(int256);\r\n  function fxs_mint_cap() external view returns(int256);\r\n  function fxs_mint_sum() external view returns(int256);\r\n  function giveCollatToAMO(address destination_amo, uint256 collat_amount) external;\r\n  function min_cr() external view returns(uint256);\r\n  function mintFraxForAMO(address destination_amo, uint256 frax_amount) external;\r\n  function mintFxsForAMO(address destination_amo, uint256 fxs_amount) external;\r\n  function missing_decimals() external view returns(uint256);\r\n  function nominateNewOwner(address _owner) external;\r\n  function nominatedOwner() external view returns(address);\r\n  function oldPoolCollectAndGive(address destination_amo) external;\r\n  function oldPoolRedeem(uint256 frax_amount) external;\r\n  function old_pool() external view returns(address);\r\n  function owner() external view returns(address);\r\n  function pool() external view returns(address);\r\n  function receiveCollatFromAMO(uint256 usdc_amount) external;\r\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\r\n  function removeAMO(address amo_address, bool sync_too) external;\r\n  function setAMOCorrectionOffsets(address amo_address, int256 frax_e18_correction, int256 collat_e18_correction) external;\r\n  function setCollatBorrowCap(uint256 _collat_borrow_cap) external;\r\n  function setCustodian(address _custodian_address) external;\r\n  function setFraxMintCap(uint256 _frax_mint_cap) external;\r\n  function setFraxPool(address _pool_address) external;\r\n  function setFxsMintCap(uint256 _fxs_mint_cap) external;\r\n  function setMinimumCollateralRatio(uint256 _min_cr) external;\r\n  function setTimelock(address new_timelock) external;\r\n  function syncDollarBalances() external;\r\n  function timelock_address() external view returns(address);\r\n}\r\n\r\n\r\n// File contracts/Oracle/AggregatorV3Interface.sol\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol@v0.4.0\r\n\r\n\r\n/**\r\n * @dev A library for working with mutable byte buffers in Solidity.\r\n *\r\n * Byte buffers are mutable and expandable, and provide a variety of primitives\r\n * for writing to them. At any time you can fetch a bytes object containing the\r\n * current contents of the buffer. The bytes object should not be stored between\r\n * operations, as it may change due to resizing of the buffer.\r\n */\r\nlibrary BufferChainlink {\r\n  /**\r\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\r\n   *      a capacity. The capacity may be longer than the current value, in\r\n   *      which case it can be extended without the need to allocate more memory.\r\n   */\r\n  struct buffer {\r\n    bytes buf;\r\n    uint256 capacity;\r\n  }\r\n\r\n  /**\r\n   * @dev Initializes a buffer with an initial capacity.\r\n   * @param buf The buffer to initialize.\r\n   * @param capacity The number of bytes of space to allocate the buffer.\r\n   * @return The buffer, for chaining.\r\n   */\r\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\r\n    if (capacity % 32 != 0) {\r\n      capacity += 32 - (capacity % 32);\r\n    }\r\n    // Allocate space for the buffer data\r\n    buf.capacity = capacity;\r\n    assembly {\r\n      let ptr := mload(0x40)\r\n      mstore(buf, ptr)\r\n      mstore(ptr, 0)\r\n      mstore(0x40, add(32, add(ptr, capacity)))\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n   * @dev Initializes a new buffer from an existing bytes object.\r\n   *      Changes to the buffer may mutate the original value.\r\n   * @param b The bytes object to initialize the buffer with.\r\n   * @return A new buffer.\r\n   */\r\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\r\n    buffer memory buf;\r\n    buf.buf = b;\r\n    buf.capacity = b.length;\r\n    return buf;\r\n  }\r\n\r\n  function resize(buffer memory buf, uint256 capacity) private pure {\r\n    bytes memory oldbuf = buf.buf;\r\n    init(buf, capacity);\r\n    append(buf, oldbuf);\r\n  }\r\n\r\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\r\n    if (a > b) {\r\n      return a;\r\n    }\r\n    return b;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets buffer length to 0.\r\n   * @param buf The buffer to truncate.\r\n   * @return The original buffer, for chaining..\r\n   */\r\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\r\n    assembly {\r\n      let bufptr := mload(buf)\r\n      mstore(bufptr, 0)\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\r\n   *      the capacity of the buffer.\r\n   * @param buf The buffer to append to.\r\n   * @param off The start offset to write to.\r\n   * @param data The data to append.\r\n   * @param len The number of bytes to copy.\r\n   * @return The original buffer, for chaining.\r\n   */\r\n  function write(\r\n    buffer memory buf,\r\n    uint256 off,\r\n    bytes memory data,\r\n    uint256 len\r\n  ) internal pure returns (buffer memory) {\r\n    require(len <= data.length);\r\n\r\n    if (off + len > buf.capacity) {\r\n      resize(buf, max(buf.capacity, len + off) * 2);\r\n    }\r\n\r\n    uint256 dest;\r\n    uint256 src;\r\n    assembly {\r\n      // Memory address of the buffer data\r\n      let bufptr := mload(buf)\r\n      // Length of existing buffer data\r\n      let buflen := mload(bufptr)\r\n      // Start address = buffer address + offset + sizeof(buffer length)\r\n      dest := add(add(bufptr, 32), off)\r\n      // Update buffer length if we're extending it\r\n      if gt(add(len, off), buflen) {\r\n        mstore(bufptr, add(len, off))\r\n      }\r\n      src := add(data, 32)\r\n    }\r\n\r\n    // Copy word-length chunks while possible\r\n    for (; len >= 32; len -= 32) {\r\n      assembly {\r\n        mstore(dest, mload(src))\r\n      }\r\n      dest += 32;\r\n      src += 32;\r\n    }\r\n\r\n    // Copy remaining bytes\r\n    unchecked {\r\n      uint256 mask = (256**(32 - len)) - 1;\r\n      assembly {\r\n        let srcpart := and(mload(src), not(mask))\r\n        let destpart := and(mload(dest), mask)\r\n        mstore(dest, or(destpart, srcpart))\r\n      }\r\n    }\r\n\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n   *      the capacity of the buffer.\r\n   * @param buf The buffer to append to.\r\n   * @param data The data to append.\r\n   * @param len The number of bytes to copy.\r\n   * @return The original buffer, for chaining.\r\n   */\r\n  function append(\r\n    buffer memory buf,\r\n    bytes memory data,\r\n    uint256 len\r\n  ) internal pure returns (buffer memory) {\r\n    return write(buf, buf.buf.length, data, len);\r\n  }\r\n\r\n  /**\r\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n   *      the capacity of the buffer.\r\n   * @param buf The buffer to append to.\r\n   * @param data The data to append.\r\n   * @return The original buffer, for chaining.\r\n   */\r\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\r\n    return write(buf, buf.buf.length, data, data.length);\r\n  }\r\n\r\n  /**\r\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\r\n   *      capacity of the buffer.\r\n   * @param buf The buffer to append to.\r\n   * @param off The offset to write the byte at.\r\n   * @param data The data to append.\r\n   * @return The original buffer, for chaining.\r\n   */\r\n  function writeUint8(\r\n    buffer memory buf,\r\n    uint256 off,\r\n    uint8 data\r\n  ) internal pure returns (buffer memory) {\r\n    if (off >= buf.capacity) {\r\n      resize(buf, buf.capacity * 2);\r\n    }\r\n\r\n    assembly {\r\n      // Memory address of the buffer data\r\n      let bufptr := mload(buf)\r\n      // Length of existing buffer data\r\n      let buflen := mload(bufptr)\r\n      // Address = buffer address + sizeof(buffer length) + off\r\n      let dest := add(add(bufptr, off), 32)\r\n      mstore8(dest, data)\r\n      // Update buffer length if we extended it\r\n      if eq(off, buflen) {\r\n        mstore(bufptr, add(buflen, 1))\r\n      }\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\r\n   *      capacity of the buffer.\r\n   * @param buf The buffer to append to.\r\n   * @param data The data to append.\r\n   * @return The original buffer, for chaining.\r\n   */\r\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\r\n    return writeUint8(buf, buf.buf.length, data);\r\n  }\r\n\r\n  /**\r\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\r\n   *      exceed the capacity of the buffer.\r\n   * @param buf The buffer to append to.\r\n   * @param off The offset to write at.\r\n   * @param data The data to append.\r\n   * @param len The number of bytes to write (left-aligned).\r\n   * @return The original buffer, for chaining.\r\n   */\r\n  function write(\r\n    buffer memory buf,\r\n    uint256 off,\r\n    bytes32 data,\r\n    uint256 len\r\n  ) private pure returns (buffer memory) {\r\n    if (len + off > buf.capacity) {\r\n      resize(buf, (len + off) * 2);\r\n    }\r\n\r\n    unchecked {\r\n      uint256 mask = (256**len) - 1;\r\n      // Right-align data\r\n      data = data >> (8 * (32 - len));\r\n      assembly {\r\n        // Memory address of the buffer data\r\n        let bufptr := mload(buf)\r\n        // Address = buffer address + sizeof(buffer length) + off + len\r\n        let dest := add(add(bufptr, off), len)\r\n        mstore(dest, or(and(mload(dest), not(mask)), data))\r\n        // Update buffer length if we extended it\r\n        if gt(add(off, len), mload(bufptr)) {\r\n          mstore(bufptr, add(off, len))\r\n        }\r\n      }\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\r\n   *      capacity of the buffer.\r\n   * @param buf The buffer to append to.\r\n   * @param off The offset to write at.\r\n   * @param data The data to append.\r\n   * @return The original buffer, for chaining.\r\n   */\r\n  function writeBytes20(\r\n    buffer memory buf,\r\n    uint256 off,\r\n    bytes20 data\r\n  ) internal pure returns (buffer memory) {\r\n    return write(buf, off, bytes32(data), 20);\r\n  }\r\n\r\n  /**\r\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\r\n   *      the capacity of the buffer.\r\n   * @param buf The buffer to append to.\r\n   * @param data The data to append.\r\n   * @return The original buffer, for chhaining.\r\n   */\r\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\r\n    return write(buf, buf.buf.length, bytes32(data), 20);\r\n  }\r\n\r\n  /**\r\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\r\n   *      the capacity of the buffer.\r\n   * @param buf The buffer to append to.\r\n   * @param data The data to append.\r\n   * @return The original buffer, for chaining.\r\n   */\r\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\r\n    return write(buf, buf.buf.length, data, 32);\r\n  }\r\n\r\n  /**\r\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\r\n   *      the capacity of the buffer.\r\n   * @param buf The buffer to append to.\r\n   * @param off The offset to write at.\r\n   * @param data The data to append.\r\n   * @param len The number of bytes to write (right-aligned).\r\n   * @return The original buffer, for chaining.\r\n   */\r\n  function writeInt(\r\n    buffer memory buf,\r\n    uint256 off,\r\n    uint256 data,\r\n    uint256 len\r\n  ) private pure returns (buffer memory) {\r\n    if (len + off > buf.capacity) {\r\n      resize(buf, (len + off) * 2);\r\n    }\r\n\r\n    uint256 mask = (256**len) - 1;\r\n    assembly {\r\n      // Memory address of the buffer data\r\n      let bufptr := mload(buf)\r\n      // Address = buffer address + off + sizeof(buffer length) + len\r\n      let dest := add(add(bufptr, off), len)\r\n      mstore(dest, or(and(mload(dest), not(mask)), data))\r\n      // Update buffer length if we extended it\r\n      if gt(add(off, len), mload(bufptr)) {\r\n        mstore(bufptr, add(off, len))\r\n      }\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\r\n   * exceed the capacity of the buffer.\r\n   * @param buf The buffer to append to.\r\n   * @param data The data to append.\r\n   * @return The original buffer.\r\n   */\r\n  function appendInt(\r\n    buffer memory buf,\r\n    uint256 data,\r\n    uint256 len\r\n  ) internal pure returns (buffer memory) {\r\n    return writeInt(buf, buf.buf.length, data, len);\r\n  }\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol@v0.4.0\r\n\r\n\r\nlibrary CBORChainlink {\r\n  using BufferChainlink for BufferChainlink.buffer;\r\n\r\n  uint8 private constant MAJOR_TYPE_INT = 0;\r\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\r\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\r\n  uint8 private constant MAJOR_TYPE_STRING = 3;\r\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\r\n  uint8 private constant MAJOR_TYPE_MAP = 5;\r\n  uint8 private constant MAJOR_TYPE_TAG = 6;\r\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\r\n\r\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\r\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\r\n\r\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\r\n    if(value <= 23) {\r\n      buf.appendUint8(uint8((major << 5) | value));\r\n    } else if (value <= 0xFF) {\r\n      buf.appendUint8(uint8((major << 5) | 24));\r\n      buf.appendInt(value, 1);\r\n    } else if (value <= 0xFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 25));\r\n      buf.appendInt(value, 2);\r\n    } else if (value <= 0xFFFFFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 26));\r\n      buf.appendInt(value, 4);\r\n    } else {\r\n      buf.appendUint8(uint8((major << 5) | 27));\r\n      buf.appendInt(value, 8);\r\n    }\r\n  }\r\n\r\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\r\n    buf.appendUint8(uint8((major << 5) | 31));\r\n  }\r\n\r\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\r\n    if(value > 0xFFFFFFFFFFFFFFFF) {\r\n      encodeBigNum(buf, value);\r\n    } else {\r\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\r\n    }\r\n  }\r\n\r\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\r\n    if(value < -0x10000000000000000) {\r\n      encodeSignedBigNum(buf, value);\r\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\r\n      encodeBigNum(buf, uint(value));\r\n    } else if(value >= 0) {\r\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\r\n    } else {\r\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\r\n    }\r\n  }\r\n\r\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\r\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\r\n    buf.append(value);\r\n  }\r\n\r\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\r\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\r\n    encodeBytes(buf, abi.encode(value));\r\n  }\r\n\r\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\r\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\r\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\r\n  }\r\n\r\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\r\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\r\n    buf.append(bytes(value));\r\n  }\r\n\r\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\r\n  }\r\n\r\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\r\n  }\r\n\r\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\r\n  }\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/Chainlink.sol@v0.4.0\r\n\r\n\r\n\r\n/**\r\n * @title Library for common Chainlink functions\r\n * @dev Uses imported CBOR library for encoding to buffer\r\n */\r\nlibrary Chainlink {\r\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\r\n\r\n  using CBORChainlink for BufferChainlink.buffer;\r\n\r\n  struct Request {\r\n    bytes32 id;\r\n    address callbackAddress;\r\n    bytes4 callbackFunctionId;\r\n    uint256 nonce;\r\n    BufferChainlink.buffer buf;\r\n  }\r\n\r\n  /**\r\n   * @notice Initializes a Chainlink request\r\n   * @dev Sets the ID, callback address, and callback function signature on the request\r\n   * @param self The uninitialized request\r\n   * @param jobId The Job Specification ID\r\n   * @param callbackAddr The callback address\r\n   * @param callbackFunc The callback function signature\r\n   * @return The initialized request\r\n   */\r\n  function initialize(\r\n    Request memory self,\r\n    bytes32 jobId,\r\n    address callbackAddr,\r\n    bytes4 callbackFunc\r\n  ) internal pure returns (Chainlink.Request memory) {\r\n    BufferChainlink.init(self.buf, defaultBufferSize);\r\n    self.id = jobId;\r\n    self.callbackAddress = callbackAddr;\r\n    self.callbackFunctionId = callbackFunc;\r\n    return self;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\r\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\r\n   * @param self The initialized request\r\n   * @param data The CBOR data\r\n   */\r\n  function setBuffer(Request memory self, bytes memory data) internal pure {\r\n    BufferChainlink.init(self.buf, data.length);\r\n    BufferChainlink.append(self.buf, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a string value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param key The name of the key\r\n   * @param value The string value to add\r\n   */\r\n  function add(\r\n    Request memory self,\r\n    string memory key,\r\n    string memory value\r\n  ) internal pure {\r\n    self.buf.encodeString(key);\r\n    self.buf.encodeString(value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a bytes value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param key The name of the key\r\n   * @param value The bytes value to add\r\n   */\r\n  function addBytes(\r\n    Request memory self,\r\n    string memory key,\r\n    bytes memory value\r\n  ) internal pure {\r\n    self.buf.encodeString(key);\r\n    self.buf.encodeBytes(value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a int256 value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param key The name of the key\r\n   * @param value The int256 value to add\r\n   */\r\n  function addInt(\r\n    Request memory self,\r\n    string memory key,\r\n    int256 value\r\n  ) internal pure {\r\n    self.buf.encodeString(key);\r\n    self.buf.encodeInt(value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a uint256 value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param key The name of the key\r\n   * @param value The uint256 value to add\r\n   */\r\n  function addUint(\r\n    Request memory self,\r\n    string memory key,\r\n    uint256 value\r\n  ) internal pure {\r\n    self.buf.encodeString(key);\r\n    self.buf.encodeUInt(value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds an array of strings to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param key The name of the key\r\n   * @param values The array of string values to add\r\n   */\r\n  function addStringArray(\r\n    Request memory self,\r\n    string memory key,\r\n    string[] memory values\r\n  ) internal pure {\r\n    self.buf.encodeString(key);\r\n    self.buf.startArray();\r\n    for (uint256 i = 0; i < values.length; i++) {\r\n      self.buf.encodeString(values[i]);\r\n    }\r\n    self.buf.endSequence();\r\n  }\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol@v0.4.0\r\n\r\n\r\ninterface ENSInterface {\r\n  // Logged when the owner of a node assigns a new owner to a subnode.\r\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n  // Logged when the owner of a node transfers ownership to a new account.\r\n  event Transfer(bytes32 indexed node, address owner);\r\n\r\n  // Logged when the resolver for a node changes.\r\n  event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n  // Logged when the TTL of a node changes\r\n  event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n  function setSubnodeOwner(\r\n    bytes32 node,\r\n    bytes32 label,\r\n    address owner\r\n  ) external;\r\n\r\n  function setResolver(bytes32 node, address resolver) external;\r\n\r\n  function setOwner(bytes32 node, address owner) external;\r\n\r\n  function setTTL(bytes32 node, uint64 ttl) external;\r\n\r\n  function owner(bytes32 node) external view returns (address);\r\n\r\n  function resolver(bytes32 node) external view returns (address);\r\n\r\n  function ttl(bytes32 node) external view returns (uint64);\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol@v0.4.0\r\n\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n  function name() external view returns (string memory tokenName);\r\n\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bool success);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool success);\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol@v0.4.0\r\n\r\n\r\ninterface ChainlinkRequestInterface {\r\n  function oracleRequest(\r\n    address sender,\r\n    uint256 requestPrice,\r\n    bytes32 serviceAgreementID,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 nonce,\r\n    uint256 dataVersion,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  function cancelOracleRequest(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration\r\n  ) external;\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol@v0.4.0\r\n\r\n\r\ninterface OracleInterface {\r\n  function fulfillOracleRequest(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration,\r\n    bytes32 data\r\n  ) external returns (bool);\r\n\r\n  function isAuthorizedSender(address node) external view returns (bool);\r\n\r\n  function withdraw(address recipient, uint256 amount) external;\r\n\r\n  function withdrawable() external view returns (uint256);\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol@v0.4.0\r\n\r\n\r\n\r\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\r\n  function operatorRequest(\r\n    address sender,\r\n    uint256 payment,\r\n    bytes32 specId,\r\n    bytes4 callbackFunctionId,\r\n    uint256 nonce,\r\n    uint256 dataVersion,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  function fulfillOracleRequest2(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration,\r\n    bytes calldata data\r\n  ) external returns (bool);\r\n\r\n  function ownerTransferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bool success);\r\n\r\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\r\n\r\n  function getAuthorizedSenders() external returns (address[] memory);\r\n\r\n  function setAuthorizedSenders(address[] calldata senders) external;\r\n\r\n  function getForwarder() external returns (address);\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol@v0.4.0\r\n\r\n\r\ninterface PointerInterface {\r\n  function getAddress() external view returns (address);\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/vendor/ENSResolver.sol@v0.4.0\r\n\r\n\r\nabstract contract ENSResolver_Chainlink {\r\n  function addr(bytes32 node) public view virtual returns (address);\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/ChainlinkClient.sol@v0.4.0\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The ChainlinkClient contract\r\n * @notice Contract writers can inherit this contract in order to create requests for the\r\n * Chainlink network\r\n */\r\nabstract contract ChainlinkClient {\r\n  using Chainlink for Chainlink.Request;\r\n\r\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\r\n  uint256 private constant AMOUNT_OVERRIDE = 0;\r\n  address private constant SENDER_OVERRIDE = address(0);\r\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\r\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\r\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\"link\");\r\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\"oracle\");\r\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\r\n\r\n  ENSInterface private s_ens;\r\n  bytes32 private s_ensNode;\r\n  LinkTokenInterface private s_link;\r\n  OperatorInterface private s_oracle;\r\n  uint256 private s_requestCount = 1;\r\n  mapping(bytes32 => address) private s_pendingRequests;\r\n\r\n  event ChainlinkRequested(bytes32 indexed id);\r\n  event ChainlinkFulfilled(bytes32 indexed id);\r\n  event ChainlinkCancelled(bytes32 indexed id);\r\n\r\n  /**\r\n   * @notice Creates a request that can hold additional parameters\r\n   * @param specId The Job Specification ID that the request will be created for\r\n   * @param callbackAddr address to operate the callback on\r\n   * @param callbackFunctionSignature function signature to use for the callback\r\n   * @return A Chainlink Request struct in memory\r\n   */\r\n  function buildChainlinkRequest(\r\n    bytes32 specId,\r\n    address callbackAddr,\r\n    bytes4 callbackFunctionSignature\r\n  ) internal pure returns (Chainlink.Request memory) {\r\n    Chainlink.Request memory req;\r\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a request that can hold additional parameters\r\n   * @param specId The Job Specification ID that the request will be created for\r\n   * @param callbackFunctionSignature function signature to use for the callback\r\n   * @return A Chainlink Request struct in memory\r\n   */\r\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\r\n    internal\r\n    view\r\n    returns (Chainlink.Request memory)\r\n  {\r\n    Chainlink.Request memory req;\r\n    return req.initialize(specId, address(this), callbackFunctionSignature);\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a Chainlink request to the stored oracle address\r\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\r\n   * @param req The initialized Chainlink Request\r\n   * @param payment The amount of LINK to send for the request\r\n   * @return requestId The request ID\r\n   */\r\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\r\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a Chainlink request to the specified oracle address\r\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\r\n   * send LINK which creates a request on the target oracle contract.\r\n   * Emits ChainlinkRequested event.\r\n   * @param oracleAddress The address of the oracle for the request\r\n   * @param req The initialized Chainlink Request\r\n   * @param payment The amount of LINK to send for the request\r\n   * @return requestId The request ID\r\n   */\r\n  function sendChainlinkRequestTo(\r\n    address oracleAddress,\r\n    Chainlink.Request memory req,\r\n    uint256 payment\r\n  ) internal returns (bytes32 requestId) {\r\n    uint256 nonce = s_requestCount;\r\n    s_requestCount = nonce + 1;\r\n    bytes memory encodedRequest = abi.encodeWithSelector(\r\n      ChainlinkRequestInterface.oracleRequest.selector,\r\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\r\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\r\n      req.id,\r\n      address(this),\r\n      req.callbackFunctionId,\r\n      nonce,\r\n      ORACLE_ARGS_VERSION,\r\n      req.buf.buf\r\n    );\r\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a Chainlink request to the stored oracle address\r\n   * @dev This function supports multi-word response\r\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\r\n   * @param req The initialized Chainlink Request\r\n   * @param payment The amount of LINK to send for the request\r\n   * @return requestId The request ID\r\n   */\r\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\r\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a Chainlink request to the specified oracle address\r\n   * @dev This function supports multi-word response\r\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\r\n   * send LINK which creates a request on the target oracle contract.\r\n   * Emits ChainlinkRequested event.\r\n   * @param oracleAddress The address of the oracle for the request\r\n   * @param req The initialized Chainlink Request\r\n   * @param payment The amount of LINK to send for the request\r\n   * @return requestId The request ID\r\n   */\r\n  function sendOperatorRequestTo(\r\n    address oracleAddress,\r\n    Chainlink.Request memory req,\r\n    uint256 payment\r\n  ) internal returns (bytes32 requestId) {\r\n    uint256 nonce = s_requestCount;\r\n    s_requestCount = nonce + 1;\r\n    bytes memory encodedRequest = abi.encodeWithSelector(\r\n      OperatorInterface.operatorRequest.selector,\r\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\r\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\r\n      req.id,\r\n      req.callbackFunctionId,\r\n      nonce,\r\n      OPERATOR_ARGS_VERSION,\r\n      req.buf.buf\r\n    );\r\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\r\n  }\r\n\r\n  /**\r\n   * @notice Make a request to an oracle\r\n   * @param oracleAddress The address of the oracle for the request\r\n   * @param nonce used to generate the request ID\r\n   * @param payment The amount of LINK to send for the request\r\n   * @param encodedRequest data encoded for request type specific format\r\n   * @return requestId The request ID\r\n   */\r\n  function _rawRequest(\r\n    address oracleAddress,\r\n    uint256 nonce,\r\n    uint256 payment,\r\n    bytes memory encodedRequest\r\n  ) private returns (bytes32 requestId) {\r\n    requestId = keccak256(abi.encodePacked(this, nonce));\r\n    s_pendingRequests[requestId] = oracleAddress;\r\n    emit ChainlinkRequested(requestId);\r\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \"unable to transferAndCall to oracle\");\r\n  }\r\n\r\n  /**\r\n   * @notice Allows a request to be cancelled if it has not been fulfilled\r\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\r\n   * Deletes the request from the `pendingRequests` mapping.\r\n   * Emits ChainlinkCancelled event.\r\n   * @param requestId The request ID\r\n   * @param payment The amount of LINK sent for the request\r\n   * @param callbackFunc The callback function specified for the request\r\n   * @param expiration The time of the expiration for the request\r\n   */\r\n  function cancelChainlinkRequest(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    bytes4 callbackFunc,\r\n    uint256 expiration\r\n  ) internal {\r\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\r\n    delete s_pendingRequests[requestId];\r\n    emit ChainlinkCancelled(requestId);\r\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\r\n  }\r\n\r\n  /**\r\n   * @notice the next request count to be used in generating a nonce\r\n   * @dev starts at 1 in order to ensure consistent gas cost\r\n   * @return returns the next request count to be used in a nonce\r\n   */\r\n  function getNextRequestCount() internal view returns (uint256) {\r\n    return s_requestCount;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the stored oracle address\r\n   * @param oracleAddress The address of the oracle contract\r\n   */\r\n  function setChainlinkOracle(address oracleAddress) internal {\r\n    s_oracle = OperatorInterface(oracleAddress);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the LINK token address\r\n   * @param linkAddress The address of the LINK token contract\r\n   */\r\n  function setChainlinkToken(address linkAddress) internal {\r\n    s_link = LinkTokenInterface(linkAddress);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the Chainlink token address for the public\r\n   * network as given by the Pointer contract\r\n   */\r\n  function setPublicChainlinkToken() internal {\r\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieves the stored address of the LINK token\r\n   * @return The address of the LINK token\r\n   */\r\n  function chainlinkTokenAddress() internal view returns (address) {\r\n    return address(s_link);\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieves the stored address of the oracle contract\r\n   * @return The address of the oracle contract\r\n   */\r\n  function chainlinkOracleAddress() internal view returns (address) {\r\n    return address(s_oracle);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows for a request which was created on another contract to be fulfilled\r\n   * on this contract\r\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\r\n   * @param requestId The request ID used for the response\r\n   */\r\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\r\n    s_pendingRequests[requestId] = oracleAddress;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\r\n   * @dev Accounts for subnodes having different resolvers\r\n   * @param ensAddress The address of the ENS contract\r\n   * @param node The ENS node hash\r\n   */\r\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\r\n    s_ens = ENSInterface(ensAddress);\r\n    s_ensNode = node;\r\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\r\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\r\n    setChainlinkToken(resolver.addr(linkSubnode));\r\n    updateChainlinkOracleWithENS();\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the stored oracle contract with the address resolved by ENS\r\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\r\n   */\r\n  function updateChainlinkOracleWithENS() internal {\r\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\r\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\r\n    setChainlinkOracle(resolver.addr(oracleSubnode));\r\n  }\r\n\r\n  /**\r\n   * @notice Ensures that the fulfillment is valid for this contract\r\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\r\n   * @param requestId The request ID for fulfillment\r\n   */\r\n  function validateChainlinkCallback(bytes32 requestId)\r\n    internal\r\n    recordChainlinkFulfillment(requestId)\r\n  // solhint-disable-next-line no-empty-blocks\r\n  {\r\n\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the sender is not the oracle of the request.\r\n   * Emits ChainlinkFulfilled event.\r\n   * @param requestId The request ID for fulfillment\r\n   */\r\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\r\n    require(msg.sender == s_pendingRequests[requestId], \"Source must be the oracle of the request\");\r\n    delete s_pendingRequests[requestId];\r\n    emit ChainlinkFulfilled(requestId);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the request is already pending\r\n   * @param requestId The request ID for fulfillment\r\n   */\r\n  modifier notPendingRequest(bytes32 requestId) {\r\n    require(s_pendingRequests[requestId] == address(0), \"Request is already pending\");\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/Math/BokkyPooBahsDateTimeLibrary.sol\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's DateTime Library v1.01\r\n//\r\n// A gas-efficient Solidity date and time library\r\n//\r\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\r\n//\r\n// Tested date range 1970/01/01 to 2345/12/31\r\n//\r\n// Conventions:\r\n// Unit      | Range         | Notes\r\n// :-------- |:-------------:|:-----\r\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\r\n// year      | 1970 ... 2345 |\r\n// month     | 1 ... 12      |\r\n// day       | 1 ... 31      |\r\n// hour      | 0 ... 23      |\r\n// minute    | 0 ... 59      |\r\n// second    | 0 ... 59      |\r\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\r\n//\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary BokkyPooBahsDateTimeLibrary {\r\n\r\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint constant SECONDS_PER_MINUTE = 60;\r\n    int constant OFFSET19700101 = 2440588;\r\n\r\n    uint constant DOW_MON = 1;\r\n    uint constant DOW_TUE = 2;\r\n    uint constant DOW_WED = 3;\r\n    uint constant DOW_THU = 4;\r\n    uint constant DOW_FRI = 5;\r\n    uint constant DOW_SAT = 6;\r\n    uint constant DOW_SUN = 7;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate the number of days from 1970/01/01 to year/month/day using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // days = day\r\n    //      - 32075\r\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\r\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\r\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\r\n    //      - offset\r\n    // ------------------------------------------------------------------------\r\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\r\n        require(year >= 1970);\r\n        int _year = int(year);\r\n        int _month = int(month);\r\n        int _day = int(day);\r\n\r\n        int __days = _day\r\n          - 32075\r\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\r\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\r\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\r\n          - OFFSET19700101;\r\n\r\n        _days = uint(__days);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate year/month/day from the number of days since 1970/01/01 using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // int L = days + 68569 + offset\r\n    // int N = 4 * L / 146097\r\n    // L = L - (146097 * N + 3) / 4\r\n    // year = 4000 * (L + 1) / 1461001\r\n    // L = L - 1461 * year / 4 + 31\r\n    // month = 80 * L / 2447\r\n    // dd = L - 2447 * month / 80\r\n    // L = month / 11\r\n    // month = month + 2 - 12 * L\r\n    // year = 100 * (N - 49) + year + L\r\n    // ------------------------------------------------------------------------\r\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\r\n        int __days = int(_days);\r\n\r\n        int L = __days + 68569 + OFFSET19700101;\r\n        int N = 4 * L / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int _year = 4000 * (L + 1) / 1461001;\r\n        L = L - 1461 * _year / 4 + 31;\r\n        int _month = 80 * L / 2447;\r\n        int _day = L - 2447 * _month / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n\r\n        year = uint(_year);\r\n        month = uint(_month);\r\n        day = uint(_day);\r\n    }\r\n\r\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\r\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\r\n    }\r\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\r\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\r\n    }\r\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\r\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\r\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        uint secs = timestamp % SECONDS_PER_DAY;\r\n        hour = secs / SECONDS_PER_HOUR;\r\n        secs = secs % SECONDS_PER_HOUR;\r\n        minute = secs / SECONDS_PER_MINUTE;\r\n        second = secs % SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\r\n        if (year >= 1970 && month > 0 && month <= 12) {\r\n            uint daysInMonth = _getDaysInMonth(year, month);\r\n            if (day > 0 && day <= daysInMonth) {\r\n                valid = true;\r\n            }\r\n        }\r\n    }\r\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\r\n        if (isValidDate(year, month, day)) {\r\n            if (hour < 24 && minute < 60 && second < 60) {\r\n                valid = true;\r\n            }\r\n        }\r\n    }\r\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\r\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        leapYear = _isLeapYear(year);\r\n    }\r\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\r\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n    }\r\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\r\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\r\n    }\r\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\r\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\r\n    }\r\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\r\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        daysInMonth = _getDaysInMonth(year, month);\r\n    }\r\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\r\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n            daysInMonth = 31;\r\n        } else if (month != 2) {\r\n            daysInMonth = 30;\r\n        } else {\r\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\r\n        }\r\n    }\r\n    // 1 = Monday, 7 = Sunday\r\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\r\n        uint _days = timestamp / SECONDS_PER_DAY;\r\n        dayOfWeek = (_days + 3) % 7 + 1;\r\n    }\r\n\r\n    function getYear(uint timestamp) internal pure returns (uint year) {\r\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function getMonth(uint timestamp) internal pure returns (uint month) {\r\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function getDay(uint timestamp) internal pure returns (uint day) {\r\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function getHour(uint timestamp) internal pure returns (uint hour) {\r\n        uint secs = timestamp % SECONDS_PER_DAY;\r\n        hour = secs / SECONDS_PER_HOUR;\r\n    }\r\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\r\n        uint secs = timestamp % SECONDS_PER_HOUR;\r\n        minute = secs / SECONDS_PER_MINUTE;\r\n    }\r\n    function getSecond(uint timestamp) internal pure returns (uint second) {\r\n        second = timestamp % SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\r\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        year += _years;\r\n        uint daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\r\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        month += _months;\r\n        year += (month - 1) / 12;\r\n        month = (month - 1) % 12 + 1;\r\n        uint daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp + _seconds;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\r\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        year -= _years;\r\n        uint daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\r\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        uint yearMonth = year * 12 + (month - 1) - _months;\r\n        year = yearMonth / 12;\r\n        month = yearMonth % 12 + 1;\r\n        uint daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp - _seconds;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\r\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\r\n        _years = toYear - fromYear;\r\n    }\r\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\r\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\r\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\r\n    }\r\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\r\n    }\r\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\r\n    }\r\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\r\n    }\r\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _seconds = toTimestamp - fromTimestamp;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Math/BokkyPooBahsDateTimeContract.sol\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's DateTime Library v1.00 - Contract Instance\r\n//\r\n// A gas-efficient Solidity date and time library\r\n//\r\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\r\n//\r\n// Tested date range 1970/01/01 to 2345/12/31\r\n//\r\n// Conventions:\r\n// Unit      | Range         | Notes\r\n// :-------- |:-------------:|:-----\r\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\r\n// year      | 1970 ... 2345 |\r\n// month     | 1 ... 12      |\r\n// day       | 1 ... 31      |\r\n// hour      | 0 ... 23      |\r\n// minute    | 0 ... 59      |\r\n// second    | 0 ... 59      |\r\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\r\n//\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\r\n//\r\n// GNU Lesser General Public License 3.0\r\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract BokkyPooBahsDateTimeContract {\r\n    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint public constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint public constant SECONDS_PER_MINUTE = 60;\r\n    int public constant OFFSET19700101 = 2440588;\r\n\r\n    uint public constant DOW_MON = 1;\r\n    uint public constant DOW_TUE = 2;\r\n    uint public constant DOW_WED = 3;\r\n    uint public constant DOW_THU = 4;\r\n    uint public constant DOW_FRI = 5;\r\n    uint public constant DOW_SAT = 6;\r\n    uint public constant DOW_SUN = 7;\r\n\r\n    function _now() public view returns (uint timestamp) {\r\n        timestamp = block.timestamp;\r\n    }\r\n    function _nowDateTime() public view returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\r\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\r\n    }\r\n    function _daysFromDate(uint year, uint month, uint day) public pure returns (uint _days) {\r\n        return BokkyPooBahsDateTimeLibrary._daysFromDate(year, month, day);\r\n    }\r\n    function _daysToDate(uint _days) public pure returns (uint year, uint month, uint day) {\r\n        return BokkyPooBahsDateTimeLibrary._daysToDate(_days);\r\n    }\r\n    function timestampFromDate(uint year, uint month, uint day) public pure returns (uint timestamp) {\r\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\r\n    }\r\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (uint timestamp) {\r\n        return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(year, month, day, hour, minute, second);\r\n    }\r\n    function timestampToDate(uint timestamp) public pure returns (uint year, uint month, uint day) {\r\n        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\r\n    }\r\n    function timestampToDateTime(uint timestamp) public pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\r\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(timestamp);\r\n    }\r\n\r\n    function isValidDate(uint year, uint month, uint day) public pure returns (bool valid) {\r\n        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\r\n    }\r\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (bool valid) {\r\n        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(year, month, day, hour, minute, second);\r\n    }\r\n    function isLeapYear(uint timestamp) public pure returns (bool leapYear) {\r\n        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\r\n    }\r\n    function _isLeapYear(uint year) public pure returns (bool leapYear) {\r\n        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\r\n    }\r\n    function isWeekDay(uint timestamp) public pure returns (bool weekDay) {\r\n        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\r\n    }\r\n    function isWeekEnd(uint timestamp) public pure returns (bool weekEnd) {\r\n        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\r\n    }\r\n\r\n    function getDaysInMonth(uint timestamp) public pure returns (uint daysInMonth) {\r\n        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\r\n    }\r\n    function _getDaysInMonth(uint year, uint month) public pure returns (uint daysInMonth) {\r\n        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\r\n    }\r\n    function getDayOfWeek(uint timestamp) public pure returns (uint dayOfWeek) {\r\n        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\r\n    }\r\n\r\n    function getYear(uint timestamp) public pure returns (uint year) {\r\n        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\r\n    }\r\n    function getMonth(uint timestamp) public pure returns (uint month) {\r\n        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\r\n    }\r\n    function getDay(uint timestamp) public pure returns (uint day) {\r\n        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\r\n    }\r\n    function getHour(uint timestamp) public pure returns (uint hour) {\r\n        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\r\n    }\r\n    function getMinute(uint timestamp) public pure returns (uint minute) {\r\n        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\r\n    }\r\n    function getSecond(uint timestamp) public pure returns (uint second) {\r\n        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\r\n    }\r\n\r\n    function addYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\r\n    }\r\n    function addMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\r\n    }\r\n    function addDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\r\n    }\r\n    function addHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\r\n    }\r\n    function addMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(timestamp, _minutes);\r\n    }\r\n    function addSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\r\n    }\r\n\r\n    function subYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\r\n    }\r\n    function subMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(timestamp, _months);\r\n    }\r\n    function subDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\r\n    }\r\n    function subHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\r\n    }\r\n    function subMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(timestamp, _minutes);\r\n    }\r\n    function subSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\r\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(timestamp, _seconds);\r\n    }\r\n\r\n    function diffYears(uint fromTimestamp, uint toTimestamp) public pure returns (uint _years) {\r\n        _years = BokkyPooBahsDateTimeLibrary.diffYears(fromTimestamp, toTimestamp);\r\n    }\r\n    function diffMonths(uint fromTimestamp, uint toTimestamp) public pure returns (uint _months) {\r\n        _months = BokkyPooBahsDateTimeLibrary.diffMonths(fromTimestamp, toTimestamp);\r\n    }\r\n    function diffDays(uint fromTimestamp, uint toTimestamp) public pure returns (uint _days) {\r\n        _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\r\n    }\r\n    function diffHours(uint fromTimestamp, uint toTimestamp) public pure returns (uint _hours) {\r\n        _hours = BokkyPooBahsDateTimeLibrary.diffHours(fromTimestamp, toTimestamp);\r\n    }\r\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) public pure returns (uint _minutes) {\r\n        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(fromTimestamp, toTimestamp);\r\n    }\r\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) public pure returns (uint _seconds) {\r\n        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(fromTimestamp, toTimestamp);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Uniswap/TransferHelper.sol\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Oracle/CPITrackerOracle.sol\r\n\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ========================= CPITrackerOracle =========================\r\n// ====================================================================\r\n// Pull in CPI data and track it in Dec 2021 dollars\r\n\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Sam Kazemian: https://github.com/samkazemian\r\n// Rich Gee: https://github.com/zer0blockchain\r\n// Dennis: https://github.com/denett\r\n\r\n// References\r\n// https://docs.chain.link/docs/make-a-http-get-request/#api-consumer-example\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CPITrackerOracle is Owned, ChainlinkClient {\r\n    using Chainlink for Chainlink.Request;\r\n  \r\n    // Core\r\n    BokkyPooBahsDateTimeContract public time_contract;\r\n    address public timelock_address;\r\n    address public bot_address;\r\n\r\n    // Data\r\n    uint256 public cpi_last = 28012600000; // Dec 2021 CPI-U, 280.126 * 100000000\r\n    uint256 public cpi_target = 28193300000; // Jan 2022 CPI-U, 281.933 * 100000000\r\n    uint256 public peg_price_last = 1e18; // Use currPegPrice(). Will always be in Dec 2021 dollars\r\n    uint256 public peg_price_target = 1006450668627688968; // Will always be in Dec 2021 dollars\r\n\r\n    // Chainlink\r\n    address public oracle; // Chainlink CPI oracle address\r\n    bytes32 public jobId; // Job ID for the CPI-U date\r\n    uint256 public fee; // LINK token fee\r\n\r\n    // Tracking\r\n    uint256 public stored_year = 2022; // Last time (year) the stored CPI data was updated\r\n    uint256 public stored_month = 1; // Last time (month) the stored CPI data was updated\r\n    uint256 public lastUpdateTime = 1644886800; // Last time the stored CPI data was updated.\r\n    uint256 public ramp_period = 28 * 86400; // Apply the CPI delta to the peg price over a set period\r\n    uint256 public future_ramp_period = 28 * 86400;\r\n    CPIObservation[] public cpi_observations; // Historical tracking of CPI data\r\n\r\n    // Safety\r\n    uint256 public max_delta_frac = 25000; // 2.5%. Max month-to-month CPI delta. \r\n\r\n    // Misc\r\n    string[13] public month_names; // English names of the 12 months\r\n    uint256 public fulfill_ready_day = 15; // Date of the month that CPI data is expected to by ready by\r\n\r\n\r\n    /* ========== STRUCTS ========== */\r\n    \r\n    struct CPIObservation {\r\n        uint256 result_year;\r\n        uint256 result_month;\r\n        uint256 cpi_target;\r\n        uint256 peg_price_target;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyByOwnGov() {\r\n        require(msg.sender == owner || msg.sender == timelock_address, \"Not owner or timelock\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyByOwnGovBot() {\r\n        require(msg.sender == owner || msg.sender == timelock_address || msg.sender == bot_address, \"Not owner, tlck, or bot\");\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor (\r\n        address _creator_address,\r\n        address _timelock_address\r\n    ) Owned(_creator_address) {\r\n        timelock_address = _timelock_address;\r\n\r\n        // Initialize the array. Cannot be done in the declaration\r\n        month_names = [\r\n            '',\r\n            'January',\r\n            'February',\r\n            'March',\r\n            'April',\r\n            'May',\r\n            'June',\r\n            'July',\r\n            'August',\r\n            'September',\r\n            'October',\r\n            'November',\r\n            'December'\r\n        ];\r\n\r\n        // CPI [Ethereum]\r\n        // =================================\r\n        // setPublicChainlinkToken();\r\n        // time_contract = BokkyPooBahsDateTimeContract(0x90503D86E120B3B309CEBf00C2CA013aB3624736);\r\n        // oracle = 0x049Bd8C3adC3fE7d3Fc2a44541d955A537c2A484;\r\n        // jobId = \"1c309d42c7084b34b1acf1a89e7b51fc\";\r\n        // fee = 50e18; // 50 LINK\r\n\r\n        // CPI [Polygon Mainnet]\r\n        // =================================\r\n        // setChainlinkToken(0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39);\r\n        // time_contract = BokkyPooBahsDateTimeContract(0x998da4fCB229Db1AA84395ef6f0c6be6Ef3dbE58);\r\n        // oracle = 0x9B44870bcc35734c08e40F847cC068c0bA618194;\r\n        // jobId = \"8107f18343a24980b2fe7d3c8f32630f\";\r\n        // fee = 1e17; // 0.1 LINK\r\n\r\n        // CPI [Polygon Mumbai]\r\n        // =================================\r\n        setChainlinkToken(0x326C977E6efc84E512bB9C30f76E30c160eD06FB);\r\n        time_contract = BokkyPooBahsDateTimeContract(0x2Dd1B4D4548aCCeA497050619965f91f78b3b532);\r\n        oracle = 0x3c30c5c415B2410326297F0f65f5Cbb32f3aefCc;\r\n        jobId = \"32c3e7b12fe44665a4e2bb87aa9779af\";\r\n        fee = 1e17; // 0.1 LINK\r\n\r\n        // Add the first observation\r\n        cpi_observations.push(CPIObservation(\r\n            2021,\r\n            12,\r\n            cpi_last,\r\n            peg_price_last,\r\n            1642208400 // Dec data observed on Jan 15 2021\r\n        ));\r\n\r\n        // Add the second observation\r\n        cpi_observations.push(CPIObservation(\r\n            2022,\r\n            1,\r\n            cpi_target,\r\n            peg_price_target,\r\n            1644886800 // Jan data observed on Feb 15 2022\r\n        ));\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n    function upcomingCPIParams() public view returns (\r\n        uint256 upcoming_year,\r\n        uint256 upcoming_month, \r\n        uint256 upcoming_timestamp\r\n    ) {\r\n        if (stored_month == 12) {\r\n            upcoming_year = stored_year + 1;\r\n            upcoming_month = 1;\r\n        }\r\n        else {\r\n            upcoming_year = stored_year;\r\n            upcoming_month = stored_month + 1;\r\n        }\r\n\r\n        // Data is usually released by the 15th day of the next month (fulfill_ready_day)\r\n        // https://www.usinflationcalculator.com/inflation/consumer-price-index-release-schedule/\r\n        upcoming_timestamp = time_contract.timestampFromDate(upcoming_year, upcoming_month, fulfill_ready_day);\r\n    }\r\n\r\n    // Display the upcoming CPI month\r\n    function upcomingSerie() external view returns (string memory serie_name) {\r\n        // Get the upcoming CPI params\r\n        (uint256 upcoming_year, uint256 upcoming_month, ) = upcomingCPIParams();\r\n\r\n        // Convert to a string\r\n        return string(abi.encodePacked(\"CUSR0000SA0\", \" \", month_names[upcoming_month], \" \", Strings.toString(upcoming_year)));\r\n    }\r\n\r\n    // Delta between the current and previous peg prices\r\n    function currDeltaFracE6() public view returns (int256) {\r\n        return int256(((peg_price_target - peg_price_last) * 1e6) / peg_price_last);\r\n    }\r\n\r\n    // Absolute value of the delta between the current and previous peg prices\r\n    function currDeltaFracAbsE6() public view returns (uint256) {\r\n        int256 curr_delta_frac = currDeltaFracE6();\r\n        if (curr_delta_frac > 0) return uint256(curr_delta_frac);\r\n        else return uint256(-curr_delta_frac);\r\n    }\r\n\r\n    // Current peg price in E18, accounting for the ramping\r\n    function currPegPrice() external view returns (uint256) {\r\n        uint256 elapsed_time = block.timestamp - lastUpdateTime;\r\n        if (elapsed_time >= ramp_period) {\r\n            return peg_price_target;\r\n        }\r\n        else {\r\n            // Calculate the fraction of the delta to use, based on the elapsed time\r\n            // Can be negative in case of deflation (that never happens right :])\r\n            int256 fractional_price_delta = (int256(peg_price_target - peg_price_last) * int256(elapsed_time)) / int256(ramp_period);\r\n            return uint256(int256(peg_price_last) + int256(fractional_price_delta));\r\n        }\r\n    }\r\n\r\n    /* ========== MUTATIVE ========== */\r\n\r\n    // Fetch the CPI data from the Chainlink oracle\r\n    function requestCPIData() external onlyByOwnGovBot returns (bytes32 requestId) \r\n    {\r\n        Chainlink.Request memory request = buildChainlinkRequest(jobId, address(this), this.fulfill.selector);\r\n\r\n        // Get the upcoming CPI params\r\n        (uint256 upcoming_year, uint256 upcoming_month, uint256 upcoming_timestamp) = upcomingCPIParams();\r\n\r\n        // Don't update too fast\r\n        require(block.timestamp >= upcoming_timestamp, \"Too early\");\r\n\r\n        request.add(\"serie\", \"CUSR0000SA0\"); // CPI-U: https://data.bls.gov/timeseries/CUSR0000SA0\r\n        request.add(\"month\", month_names[upcoming_month]);\r\n        request.add(\"year\", Strings.toString(upcoming_year)); \r\n        return sendChainlinkRequestTo(oracle, request, fee);\r\n    }\r\n\r\n    /**\r\n     * Callback function\r\n     */\r\n    //  Called by the Chainlink oracle\r\n    function fulfill(bytes32 _requestId, uint256 result) public recordChainlinkFulfillment(_requestId)\r\n    {\r\n        // Set the stored CPI and price to the old targets\r\n        cpi_last = cpi_target;\r\n        peg_price_last = peg_price_target;\r\n\r\n        // Set the target CPI and price based on the results\r\n        cpi_target = result;\r\n        peg_price_target = (peg_price_last * cpi_target) / cpi_last;\r\n\r\n        // Make sure the delta isn't too large\r\n        require(currDeltaFracAbsE6() <= max_delta_frac, \"Delta too high\");\r\n\r\n        // Update the timestamp\r\n        lastUpdateTime = block.timestamp;\r\n\r\n        // Update the year and month\r\n        (uint256 result_year, uint256 result_month, ) = upcomingCPIParams();\r\n        stored_year = result_year;\r\n        stored_month = result_month;\r\n\r\n        // Update the future ramp period, if applicable\r\n        // A ramp cannot be updated mid-month as it will mess up the last_price math;\r\n        ramp_period = future_ramp_period;\r\n\r\n        // Add the observation\r\n        cpi_observations.push(CPIObservation(\r\n            result_year,\r\n            result_month,\r\n            cpi_target,\r\n            peg_price_target,\r\n            block.timestamp\r\n        ));\r\n\r\n        emit CPIUpdated(result_year, result_month, result, peg_price_target, ramp_period);\r\n    }\r\n\r\n    function cancelRequest(\r\n        bytes32 _requestId,\r\n        uint256 _payment,\r\n        bytes4 _callbackFunc,\r\n        uint256 _expiration\r\n    ) external onlyByOwnGovBot {\r\n        cancelChainlinkRequest(_requestId, _payment, _callbackFunc, _expiration);\r\n    }\r\n    \r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function setTimelock(address _new_timelock_address) external onlyByOwnGov {\r\n        timelock_address = _new_timelock_address;\r\n    }\r\n\r\n    function setBot(address _new_bot_address) external onlyByOwnGov {\r\n        bot_address = _new_bot_address;\r\n    }\r\n\r\n    function setOracleInfo(address _oracle, bytes32 _jobId, uint256 _fee) external onlyByOwnGov {\r\n        oracle = _oracle;\r\n        jobId = _jobId;\r\n        fee = _fee;\r\n    }\r\n\r\n    function setMaxDeltaFrac(uint256 _max_delta_frac) external onlyByOwnGov {\r\n        max_delta_frac = _max_delta_frac; \r\n    }\r\n\r\n    function setFulfillReadyDay(uint256 _fulfill_ready_day) external onlyByOwnGov {\r\n        fulfill_ready_day = _fulfill_ready_day; \r\n    }\r\n\r\n    function setFutureRampPeriod(uint256 _future_ramp_period) external onlyByOwnGov {\r\n        future_ramp_period = _future_ramp_period; // In sec\r\n    }\r\n\r\n    // Mainly for recovering LINK\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\r\n        // Only the owner address can ever receive the recovery withdrawal\r\n        TransferHelper.safeTransfer(tokenAddress, owner, tokenAmount);\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    \r\n    event CPIUpdated(uint256 year, uint256 month, uint256 result, uint256 peg_price_target, uint256 ramp_period);\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/core/interfaces/IUniswapV2PairV5.sol\r\n\r\n\r\ninterface IUniswapV2PairV5 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/core/interfaces/IFraxswapPair.sol\r\n\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ========================= IFraxswapPair ==========================\r\n// ====================================================================\r\n// Fraxswap LP Pair Interface\r\n// Inspired by https://www.paradigm.xyz/2021/07/twamm\r\n// https://github.com/para-dave/twamm\r\n\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Rich Gee: https://github.com/zer0blockchain\r\n// Dennis: https://github.com/denett\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n// Sam Kazemian: https://github.com/samkazemian\r\n\r\ninterface IFraxswapPair is IUniswapV2PairV5 {\r\n    // TWAMM\r\n\r\n    event LongTermSwap0To1(address indexed addr, uint256 orderId, uint256 amount0In, uint256 numberOfTimeIntervals);\r\n    event LongTermSwap1To0(address indexed addr, uint256 orderId, uint256 amount1In, uint256 numberOfTimeIntervals);\r\n    event CancelLongTermOrder(address indexed addr, uint256 orderId, address sellToken, uint256 unsoldAmount, address buyToken, uint256 purchasedAmount);\r\n    event WithdrawProceedsFromLongTermOrder(address indexed addr, uint256 orderId, address indexed proceedToken, uint256 proceeds, bool orderExpired);\r\n\r\n    function longTermSwapFrom0To1(uint256 amount0In, uint256 numberOfTimeIntervals) external returns (uint256 orderId);\r\n    function longTermSwapFrom1To0(uint256 amount1In, uint256 numberOfTimeIntervals) external returns (uint256 orderId);\r\n    function cancelLongTermSwap(uint256 orderId) external;\r\n    function withdrawProceedsFromLongTermSwap(uint256 orderId) external returns (bool is_expired, address rewardTkn, uint256 totalReward);\r\n    function executeVirtualOrders(uint256 blockTimestamp) external;\r\n\r\n    function orderTimeInterval() external returns (uint256);\r\n    function getTWAPHistoryLength() external view returns (uint);\r\n    function getTwammReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast, uint112 _twammReserve0, uint112 _twammReserve1);\r\n    function getReserveAfterTwamm(uint256 blockTimestamp) external view returns (uint112 _reserve0, uint112 _reserve1, uint256 lastVirtualOrderTimestamp, uint112 _twammReserve0, uint112 _twammReserve1);\r\n    function getNextOrderID() external view returns (uint256);\r\n    function getOrderIDsForUser(address user) external view returns (uint256[] memory);\r\n    function getOrderIDsForUserLength(address user) external view returns (uint256);\r\n//    function getDetailedOrdersForUser(address user, uint256 offset, uint256 limit) external view returns (LongTermOrdersLib.Order[] memory detailed_orders);\r\n    function twammUpToDate() external view returns (bool);\r\n    function getTwammState() external view returns (uint256 token0Rate, uint256 token1Rate, uint256 lastVirtualOrderTimestamp, uint256 orderTimeInterval_rtn, uint256 rewardFactorPool0, uint256 rewardFactorPool1);\r\n    function getTwammSalesRateEnding(uint256 _blockTimestamp) external view returns (uint256 orderPool0SalesRateEnding, uint256 orderPool1SalesRateEnding);\r\n    function getTwammRewardFactor(uint256 _blockTimestamp) external view returns (uint256 rewardFactorPool0AtTimestamp, uint256 rewardFactorPool1AtTimestamp);\r\n    function getTwammOrder(uint256 orderId) external view returns (uint256 id, uint256 expirationTimestamp, uint256 saleRate, address owner, address sellTokenAddr, address buyTokenAddr);\r\n    function getTwammOrderProceedsView(uint256 orderId, uint256 blockTimestamp) external view returns (bool orderExpired, uint256 totalReward);\r\n    function getTwammOrderProceeds(uint256 orderId) external returns (bool orderExpired, uint256 totalReward);\r\n\r\n\r\n    function togglePauseNewSwaps() external;\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/core/interfaces/IUniswapV2FactoryV5.sol\r\n\r\n\r\ninterface IUniswapV2FactoryV5 {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/libraries/Babylonian.sol\r\n\r\n\r\n\r\n// computes square roots using the babylonian method\r\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\r\nlibrary Babylonian {\r\n    // credit for this implementation goes to\r\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\r\n    function sqrt(uint256 x) internal pure returns (uint256) {\r\n        if (x == 0) return 0;\r\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\r\n        // however that code costs significantly more gas\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) {\r\n            xx >>= 128;\r\n            r <<= 64;\r\n        }\r\n        if (xx >= 0x10000000000000000) {\r\n            xx >>= 64;\r\n            r <<= 32;\r\n        }\r\n        if (xx >= 0x100000000) {\r\n            xx >>= 32;\r\n            r <<= 16;\r\n        }\r\n        if (xx >= 0x10000) {\r\n            xx >>= 16;\r\n            r <<= 8;\r\n        }\r\n        if (xx >= 0x100) {\r\n            xx >>= 8;\r\n            r <<= 4;\r\n        }\r\n        if (xx >= 0x10) {\r\n            xx >>= 4;\r\n            r <<= 2;\r\n        }\r\n        if (xx >= 0x8) {\r\n            r <<= 1;\r\n        }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return (r < r1 ? r : r1);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/libraries/FullMath.sol\r\n\r\n\r\n\r\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\r\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\r\n/// @dev Handles \"phantom overflow\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\r\n    /// @param a The multiplicand.\r\n    /// @param b The multiplier.\r\n    /// @param denominator The divisor.\r\n    /// @return result The 256-bit result.\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n    unchecked {\r\n        // 512-bit multiply [prod1 prod0] = a * b.\r\n        // Compute the product mod 2**256 and mod 2**256 - 1,\r\n        // then use the Chinese Remainder Theorem to reconstruct\r\n        // the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0.\r\n        uint256 prod0; // Least significant 256 bits of the product.\r\n        uint256 prod1; // Most significant 256 bits of the product.\r\n        assembly {\r\n            let mm := mulmod(a, b, not(0))\r\n            prod0 := mul(a, b)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n        // Handle non-overflow cases, 256 by 256 division.\r\n        if (prod1 == 0) {\r\n            require(denominator > 0);\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n        // Make sure the result is less than 2**256 -\r\n        // also prevents denominator == 0.\r\n        require(denominator > prod1);\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n        // Make division exact by subtracting the remainder from [prod1 prod0] -\r\n        // compute remainder using mulmod.\r\n        uint256 remainder;\r\n        assembly {\r\n            remainder := mulmod(a, b, denominator)\r\n        }\r\n        // Subtract 256 bit number from 512 bit number.\r\n        assembly {\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n        // Factor powers of two out of denominator -\r\n        // compute largest power of two divisor of denominator\r\n        // (always >= 1).\r\n        uint256 twos = uint256(-int256(denominator)) & denominator;\r\n        // Divide denominator by power of two.\r\n        assembly {\r\n            denominator := div(denominator, twos)\r\n        }\r\n        // Divide [prod1 prod0] by the factors of two.\r\n        assembly {\r\n            prod0 := div(prod0, twos)\r\n        }\r\n        // Shift in bits from prod1 into prod0. For this we need\r\n        // to flip `twos` such that it is 2**256 / twos -\r\n        // if twos is zero, then it becomes one.\r\n        assembly {\r\n            twos := add(div(sub(0, twos), twos), 1)\r\n        }\r\n        prod0 |= prod1 * twos;\r\n        // Invert denominator mod 2**256 -\r\n        // now that denominator is an odd number, it has an inverse\r\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n        // Compute the inverse by starting with a seed that is correct\r\n        // for four bits. That is, denominator * inv = 1 mod 2**4.\r\n        uint256 inv = (3 * denominator) ^ 2;\r\n        // Now use Newton-Raphson iteration to improve the precision.\r\n        // Thanks to Hensel's lifting lemma, this also works in modular\r\n        // arithmetic, doubling the correct bits in each step.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**8.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**16.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**32.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**64.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**128.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**256.\r\n        // Because the division is now exact we can divide by multiplying\r\n        // with the modular inverse of denominator. This will give us the\r\n        // correct result modulo 2**256. Since the precoditions guarantee\r\n        // that the outcome is less than 2**256, this is the final result.\r\n        // We don't need to compute the high bits of the result and prod1\r\n        // is no longer required.\r\n        result = prod0 * inv;\r\n        return result;\r\n    }\r\n    }\r\n\r\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\r\n    /// @param a The multiplicand.\r\n    /// @param b The multiplier.\r\n    /// @param denominator The divisor.\r\n    /// @return result The 256-bit result.\r\n    function mulDivRoundingUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        result = mulDiv(a, b, denominator);\r\n    unchecked {\r\n        if (mulmod(a, b, denominator) != 0) {\r\n            require(result < type(uint256).max);\r\n            result++;\r\n        }\r\n    }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/periphery/libraries/UniswapV2LiquidityMathLibraryMini.sol\r\n\r\n\r\n\r\n\r\n\r\n// library containing some math for dealing with the liquidity shares of a pair, e.g. computing their exact value\r\n// in terms of the underlying tokens\r\nlibrary UniswapV2LiquidityMathLibraryMini {\r\n\r\n    // computes the direction and magnitude of the profit-maximizing trade\r\n    // function computeProfitMaximizingTrade(\r\n    //     uint256 truePriceTokenA,\r\n    //     uint256 truePriceTokenB,\r\n    //     uint256 reserveA,\r\n    //     uint256 reserveB\r\n    // ) pure internal returns (uint256 amountIn) {\r\n    //     bool aToB = ((reserveA * truePriceTokenB) / reserveB) < truePriceTokenA;\r\n\r\n    //     uint256 invariant = reserveA * reserveB;\r\n\r\n    //     // true price is expressed as a ratio, so both values must be non-zero\r\n    //     require(truePriceTokenA != 0 && truePriceTokenB != 0, \"CPMT: ZERO_PRICE\");\r\n\r\n    //     uint256 leftSide = Babylonian.sqrt(\r\n    //         FullMath.mulDiv(\r\n    //             (invariant * 1000),\r\n    //             aToB ? truePriceTokenA : truePriceTokenB,\r\n    //             (aToB ? truePriceTokenB : truePriceTokenA) * 997\r\n    //         )\r\n    //     );\r\n    //     uint256 rightSide = (aToB ? reserveA * 1000 : reserveB * 1000) / 997;\r\n\r\n    //     if (leftSide < rightSide) return (0);\r\n\r\n    //     // compute the amount that must be sent to move the price to the profit-maximizing price\r\n    //     amountIn = leftSide - rightSide;\r\n    // }\r\n\r\n    function computeProfitMaximizingTrade(\r\n        uint256 inTokenTruePrice,\r\n        uint256 outTokenTruePrice,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) pure internal returns (uint256 amountIn) {\r\n        uint256 invariant = reserveIn * reserveOut;\r\n\r\n        // true price is expressed as a ratio, so both values must be non-zero\r\n        require(inTokenTruePrice != 0 && outTokenTruePrice != 0, \"CPMT: ZERO_PRICE\");\r\n\r\n        uint256 leftSide = Babylonian.sqrt(\r\n            FullMath.mulDiv(\r\n                (invariant * 1000),\r\n                inTokenTruePrice,\r\n                outTokenTruePrice * 997\r\n            )\r\n        );\r\n        uint256 rightSide = (reserveIn * 1000) / 997;\r\n\r\n        if (leftSide < rightSide) return (0);\r\n\r\n        // compute the amount that must be sent to move the price to the profit-maximizing price\r\n        amountIn = leftSide - rightSide;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/FPI/FPIControllerPool.sol\r\n\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ========================= FPIControllerPool =========================\r\n// ====================================================================\r\n// Makes sure FPI is targeting the CPI peg\r\n// First method is minting / redeeming with FRAX\r\n// Second is bulk TWAMM trades\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Sam Kazemian: https://github.com/samkazemian\r\n// Rich Gee: https://github.com/zer0blockchain\r\n// Dennis: https://github.com/denett\r\n// Jack Corddry: https://github.com/corddry\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FPIControllerPool is Owned {\r\n\r\n    // Core\r\n    address public timelock_address;\r\n    FPI public FPI_TKN;\r\n    IFrax public FRAX;\r\n    IFraxswapPair public TWAMM;\r\n\r\n    // Oracles\r\n    AggregatorV3Interface public priceFeedFRAXUSD;\r\n    AggregatorV3Interface public priceFeedFPIUSD;\r\n    uint256 public chainlink_frax_usd_decimals;\r\n    uint256 public chainlink_fpi_usd_decimals;\r\n    CPITrackerOracle public cpiTracker;\r\n\r\n    // Tracking\r\n    uint256 public last_order_id_twamm; // Last TWAMM order ID that was used\r\n\r\n   // AMO addresses (lend out FRAX)\r\n    address[] public amos_array;\r\n    mapping(address => bool) public amos; // Mapping is also used for faster verification\r\n\r\n    // FRAX borrowed balances\r\n    mapping(address => int256) public frax_borrowed_balances; // Amount of FRAX the contract borrowed, by AMO\r\n    int256 public frax_borrowed_sum = 0; // Across all AMOs\r\n    int256 public frax_borrow_cap = int256(10000000e18); // Max amount of FRAX the contract can borrow from this contract\r\n\r\n    // Mint Fee Related\r\n    bool public use_manual_mint_fee = true;\r\n    uint256 public mint_fee_manual = 3000; // E6\r\n    uint256 public mint_fee_multiplier = 1000000; // E6\r\n    \r\n    // Redeem Fee Related\r\n    bool public use_manual_redeem_fee = true;\r\n    uint256 public redeem_fee_manual = 3000; // E6\r\n    uint256 public redeem_fee_multiplier = 1000000; // E6\r\n    \r\n    // Safety\r\n    uint256 public fpi_mint_cap = 110000000e18; // 110M\r\n    uint256 public peg_band_mint_redeem = 50000; // 5%\r\n    uint256 public peg_band_twamm = 100000; // 10%\r\n    uint256 public max_swap_frax_amt_in = 10000000e18; // 10M, mainly fat-finger precautions\r\n    uint256 public max_swap_fpi_amt_in = 10000000e18; // 10M, mainly fat-finger precautions\r\n    bool public mints_paused = false;\r\n    bool public redeems_paused = false;\r\n\r\n    // Constants for various precisions\r\n    uint256 public constant PRICE_PRECISION = 1e18;\r\n    uint256 public constant FEE_PRECISION = 1e6;\r\n    uint256 public constant PEG_BAND_PRECISION = 1e6;\r\n\r\n    // Misc\r\n    bool public frax_is_token0;\r\n    bool public pending_twamm_order = false;\r\n    uint256 public num_twamm_intervals = 168; // Each interval is default 3600 sec (1 hr)\r\n    uint256 public swap_period = 7 * 86400; // 7 days\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyByOwnGov() {\r\n        require(msg.sender == owner || msg.sender == timelock_address, \"Not owner or timelock\");\r\n        _;\r\n    }\r\n\r\n    modifier validAMO(address amo_address) {\r\n        require(amos[amo_address], \"Invalid AMO\");\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor (\r\n        address _creator_address,\r\n        address _timelock_address,\r\n        address[6] memory _address_pack\r\n    ) Owned(_creator_address) {\r\n        timelock_address = _timelock_address;\r\n\r\n        // Set instances\r\n        FRAX = IFrax(_address_pack[0]);\r\n        FPI_TKN = FPI(_address_pack[1]);\r\n        TWAMM = IFraxswapPair(_address_pack[2]);\r\n        priceFeedFRAXUSD = AggregatorV3Interface(_address_pack[3]);\r\n        priceFeedFPIUSD = AggregatorV3Interface(_address_pack[4]);\r\n        cpiTracker = CPITrackerOracle(_address_pack[5]);\r\n\r\n        // Set the oracle decimals\r\n        chainlink_frax_usd_decimals = priceFeedFRAXUSD.decimals();\r\n        chainlink_fpi_usd_decimals = priceFeedFPIUSD.decimals();\r\n\r\n        // Need to know which token FRAX is (0 or 1)\r\n        address token0 = TWAMM.token0();\r\n        if (token0 == address(FRAX)) frax_is_token0 = true;\r\n        else frax_is_token0 = false;\r\n\r\n        // Get the number of TWAMM intervals. Truncation desired\r\n        num_twamm_intervals = swap_period / TWAMM.orderTimeInterval();\r\n    }\r\n\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    // Needed as a FRAX AMO\r\n    function dollarBalances() public view returns (uint256 frax_val_e18, uint256 collat_val_e18) {\r\n        // Dummy values here. FPI is not FRAX and should not be treated as FRAX collateral\r\n        frax_val_e18 = 1e18;\r\n        collat_val_e18 = 1e18;\r\n    }\r\n\r\n    // In Chainlink decimals\r\n    function getFRAXPriceE18() public view returns (uint256) {\r\n        (uint80 roundID, int price, , uint256 updatedAt, uint80 answeredInRound) = priceFeedFRAXUSD.latestRoundData();\r\n        require(price >= 0 && updatedAt!= 0 && answeredInRound >= roundID, \"Invalid chainlink price\");\r\n\r\n        return ((uint256(price) * 1e18) / (10 ** chainlink_frax_usd_decimals));\r\n    }\r\n\r\n    // In Chainlink decimals    \r\n    function getFPIPriceE18() public view returns (uint256) {\r\n        (uint80 roundID, int price, , uint256 updatedAt, uint80 answeredInRound) = priceFeedFPIUSD.latestRoundData();\r\n        require(price >= 0 && updatedAt!= 0 && answeredInRound >= roundID, \"Invalid chainlink price\");\r\n\r\n        return ((uint256(price) * 1e18) / (10 ** chainlink_fpi_usd_decimals));\r\n    }\r\n\r\n    // Reserve spot price (fpi_price is dangerous / flash loan susceptible, so use carefully)    \r\n    function getReservesAndFPISpot() public returns (uint256 reserveFRAX, uint256 reserveFPI, uint256 fpi_price) {\r\n        // Update and get the reserves\r\n        TWAMM.executeVirtualOrders(block.timestamp);\r\n        {\r\n            (uint256 reserveA, uint256 reserveB, ) = TWAMM.getReserves();\r\n            if (frax_is_token0){\r\n                reserveFRAX = reserveA;\r\n                reserveFPI = reserveB;\r\n                \r\n            }\r\n            else {\r\n                reserveFRAX = reserveB;\r\n                reserveFPI = reserveA;\r\n            }\r\n        }\r\n\r\n        // Get the TWAMM reserve spot price\r\n        fpi_price = (reserveFRAX * 1e18) / reserveFPI;\r\n    }\r\n\r\n    // function getTwammToPegAmt() public returns (uint256 frax_in, uint256 fpi_in) {\r\n    //     // Update and get the reserves\r\n    //     (uint256 reserveFRAX, uint256 reserveFPI, uint256 reservePriceFPI) = getReservesAndFPISpot();\r\n        \r\n    //     // Get the CPI price\r\n    //     uint256 cpi_peg_price = cpiTracker.currPegPrice();\r\n\r\n    //     // Sort the pricing. NOTE: IN RATIOS, NOT PRICE\r\n    //     uint256 truePriceFRAX = 1e18;\r\n    //     uint256 truePriceFPI = cpi_peg_price;\r\n\r\n    //     // Determine the direction\r\n    //     if (fpi_to_frax) {\r\n    //         return UniswapV2LiquidityMathLibraryMini.computeProfitMaximizingTrade(\r\n    //             truePriceFPI, truePriceFRAX,\r\n    //             reserveFPI, reserveFRAX\r\n    //         );\r\n    //     }\r\n    //     else {\r\n    //         return UniswapV2LiquidityMathLibraryMini.computeProfitMaximizingTrade(\r\n    //             truePriceFRAX, truePriceFPI,\r\n    //             reserveFRAX, reserveFPI\r\n    //         );\r\n    //     }\r\n    // }\r\n\r\n    // In E6\r\n    function mint_fee() public view returns (uint256 fee) {\r\n        if (use_manual_mint_fee) fee = mint_fee_manual;\r\n        else {\r\n            // For future variable fees\r\n            fee = 0;\r\n\r\n            // Apply the multiplier\r\n            fee = (fee * mint_fee_multiplier) / 1e6;\r\n        }\r\n    }\r\n\r\n    // In E6\r\n    function redeem_fee() public view returns (uint256 fee) {\r\n        if (use_manual_redeem_fee) fee = redeem_fee_manual;\r\n        else {\r\n            // For future variable fees\r\n            fee = 0;\r\n\r\n            // Apply the multiplier\r\n            fee = (fee * redeem_fee_multiplier) / 1e6;\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    // Get some info about the peg status\r\n    function pegStatusMntRdm() public view returns (uint256 cpi_peg_price, uint256 diff_frac_abs, bool within_range) {\r\n        uint256 fpi_price = getFPIPriceE18();\r\n        cpi_peg_price = cpiTracker.currPegPrice();\r\n\r\n        if (fpi_price > cpi_peg_price){\r\n            diff_frac_abs = ((fpi_price - cpi_peg_price) * PEG_BAND_PRECISION) / fpi_price;\r\n        }\r\n        else {\r\n            diff_frac_abs = ((cpi_peg_price - fpi_price) * PEG_BAND_PRECISION) / fpi_price;\r\n        }\r\n\r\n        within_range = (diff_frac_abs <= peg_band_mint_redeem);\r\n    }\r\n\r\n    // Get additional info about the peg status\r\n    function price_info() public view returns (\r\n        int256 collat_imbalance, \r\n        uint256 cpi_peg_price,\r\n        uint256 fpi_price,\r\n        uint256 price_diff_frac_abs\r\n    ) {\r\n        fpi_price = getFPIPriceE18();\r\n        cpi_peg_price = cpiTracker.currPegPrice();\r\n        uint256 fpi_supply = FPI_TKN.totalSupply();\r\n\r\n        if (fpi_price > cpi_peg_price){\r\n            collat_imbalance = int256(((fpi_price - cpi_peg_price) * fpi_supply) / PRICE_PRECISION);\r\n            price_diff_frac_abs = ((fpi_price - cpi_peg_price) * PEG_BAND_PRECISION) / fpi_price;\r\n        }\r\n        else {\r\n            collat_imbalance = -1 * int256(((cpi_peg_price - fpi_price) * fpi_supply) / PRICE_PRECISION);\r\n            price_diff_frac_abs = ((cpi_peg_price - fpi_price) * PEG_BAND_PRECISION) / fpi_price;\r\n        }\r\n    }\r\n\r\n    /* ========== MUTATIVE ========== */\r\n\r\n    // Calculate Mint FPI with FRAX\r\n    function calcMintFPI(uint256 frax_in, uint256 min_fpi_out) public view returns (uint256 fpi_out) {\r\n        require(!mints_paused, \"Mints paused\");\r\n\r\n        // Fetch the CPI price and other info\r\n        (uint256 cpi_peg_price, , bool within_range) = pegStatusMntRdm();\r\n\r\n        // Make sure the peg is within range for minting\r\n        // Helps combat oracle errors and megadumping\r\n        require(within_range, \"Peg band [Mint]\");\r\n\r\n        // Calculate the amount of FPI that the incoming FRAX should give\r\n        fpi_out = (frax_in * PRICE_PRECISION) / cpi_peg_price;\r\n\r\n        // Apply the fee\r\n        fpi_out -= (fpi_out * mint_fee()) / FEE_PRECISION;\r\n\r\n        // Make sure enough FPI is generated\r\n        require(fpi_out >= min_fpi_out, \"Slippage [Mint]\");\r\n\r\n        // Check the mint cap\r\n        require(FPI_TKN.totalSupply() + fpi_out <= fpi_mint_cap, \"FPI mint cap\");\r\n    }\r\n\r\n    // Mint FPI with FRAX\r\n    function mintFPI(uint256 frax_in, uint256 min_fpi_out) external returns (uint256 fpi_out) {\r\n        fpi_out = calcMintFPI(frax_in, min_fpi_out);\r\n\r\n        // Pull in the FRAX\r\n        TransferHelper.safeTransferFrom(address(FRAX), msg.sender, address(this), frax_in);\r\n\r\n        // Mint FPI to the sender\r\n        FPI_TKN.minter_mint(msg.sender, fpi_out);\r\n\r\n        emit FPIMinted(frax_in, fpi_out);\r\n    }\r\n\r\n    // Calculate Redeem FPI for FRAX\r\n    function calcRedeemFPI(uint256 fpi_in, uint256 min_frax_out) public view returns (uint256 frax_out) {\r\n        require(!redeems_paused, \"Redeems paused\");\r\n\r\n        // Fetch the CPI price and other info\r\n        (uint256 cpi_peg_price, , bool within_range) = pegStatusMntRdm();\r\n\r\n        // Make sure the peg is within range for minting\r\n        // Helps combat oracle errors and megadumping\r\n        require(within_range, \"Peg band [Redeem]\");\r\n\r\n        // Calculate the amount of FRAX that the incoming FPI should give\r\n        frax_out = (fpi_in * cpi_peg_price) / PRICE_PRECISION;\r\n\r\n        // Apply the fee\r\n        frax_out -= (frax_out * redeem_fee()) / FEE_PRECISION;\r\n\r\n        // Make sure enough FRAX is generated\r\n        require(frax_out >= min_frax_out, \"Slippage [Redeem]\");\r\n    }\r\n\r\n    // Redeem FPI for FRAX\r\n    function redeemFPI(uint256 fpi_in, uint256 min_frax_out) external returns (uint256 frax_out) {\r\n        frax_out = calcRedeemFPI(fpi_in, min_frax_out);\r\n\r\n        // Pull in the FPI\r\n        TransferHelper.safeTransferFrom(address(FPI_TKN), msg.sender, address(this), fpi_in);\r\n\r\n        // Give FRAX to the sender\r\n        TransferHelper.safeTransfer(address(FRAX), msg.sender, frax_out);\r\n\r\n        emit FPIRedeemed(fpi_in, frax_out);\r\n    }\r\n\r\n    // Use the TWAMM for bulk peg corrections\r\n    function twammManual(uint256 frax_sell_amt, uint256 fpi_sell_amt, uint256 override_intervals) external onlyByOwnGov returns (uint256 frax_to_use, uint256 fpi_to_use) {\r\n        // Make sure only one direction occurs\r\n        require(!((frax_sell_amt > 0) && (fpi_sell_amt > 0)), \"Can only sell in one direction\");\r\n\r\n        // Update and get the reserves\r\n        // longTermSwapFrom0to1 and longTermSwapFrom1To0 do it automatically\r\n        // TWAMM.executeVirtualOrders(block.timestamp);\r\n        \r\n        // Cancel the previous order (if any) and collect any leftover tokens\r\n        if (pending_twamm_order) TWAMM.cancelLongTermSwap(last_order_id_twamm);\r\n\r\n        // Now calculate the imbalance after the burn\r\n        (, , , uint256 price_diff_abs) = price_info();\r\n\r\n        // Make sure the FPI oracle price hasn't moved away too much from the target peg price\r\n        require(price_diff_abs <= peg_band_twamm, \"Peg band [TWAMM]\");\r\n\r\n        // Create a new order\r\n        last_order_id_twamm = TWAMM.getNextOrderID(); \r\n        {\r\n            if (fpi_sell_amt > 0) {\r\n                // Mint FPI and sell for FRAX\r\n                // --------------------------------\r\n                fpi_to_use = fpi_sell_amt;\r\n    \r\n                // Make sure nonzero\r\n                require(fpi_to_use > 0, \"FPI sold must be nonzero\");\r\n\r\n                // Safety check\r\n                require(fpi_to_use <= max_swap_fpi_amt_in, \"Too much FPI sold\");\r\n\r\n                // Mint some FPI\r\n                FPI_TKN.minter_mint(address(this), fpi_to_use);\r\n\r\n                // Approve FPI first\r\n                FPI_TKN.approve(address(TWAMM), fpi_to_use);\r\n\r\n                // Sell FPI for FRAX\r\n                if (frax_is_token0) {\r\n                    TWAMM.longTermSwapFrom1To0(fpi_to_use, override_intervals > 0 ? override_intervals : num_twamm_intervals);\r\n                }\r\n                else {\r\n                    TWAMM.longTermSwapFrom0To1(fpi_to_use, override_intervals > 0 ? override_intervals : num_twamm_intervals);\r\n                }\r\n            }\r\n            else {\r\n                // Use FRAX to buy FPI\r\n                // --------------------------------\r\n                frax_to_use = frax_sell_amt;\r\n\r\n                // Make sure nonzero\r\n                require(frax_to_use > 0, \"FRAX sold must be nonzero\");\r\n\r\n                // Safety check\r\n                require(frax_to_use <= max_swap_frax_amt_in, \"Too much FRAX sold\");\r\n\r\n                // Approve FRAX first\r\n                FRAX.approve(address(TWAMM), frax_to_use);\r\n\r\n                // Sell FRAX for FPI\r\n                if (frax_is_token0) {\r\n                    TWAMM.longTermSwapFrom0To1(frax_to_use, override_intervals > 0 ? override_intervals : num_twamm_intervals);\r\n                }\r\n                else {\r\n                    TWAMM.longTermSwapFrom1To0(frax_to_use, override_intervals > 0 ? override_intervals : num_twamm_intervals);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Mark that there is a pending order\r\n        pending_twamm_order = true;\r\n\r\n        emit TWAMMedToPeg(last_order_id_twamm, frax_to_use, fpi_to_use, block.timestamp);\r\n    }\r\n\r\n    function cancelCurrTWAMMOrder(uint256 order_id_override) public onlyByOwnGov {\r\n        // Get the order id\r\n        uint256 order_id_to_use = (order_id_override == 0 ? last_order_id_twamm : order_id_override);\r\n\r\n        // Cancel the order\r\n        TWAMM.cancelLongTermSwap(order_id_to_use);\r\n\r\n        // Clear the pending order indicator\r\n        pending_twamm_order = false;\r\n\r\n        emit TWAMMOrderCancelled(order_id_to_use);\r\n    }\r\n\r\n    function collectCurrTWAMMProceeds(uint256 order_id_override) external onlyByOwnGov {\r\n        // Get the order id\r\n        uint256 order_id_to_use = (order_id_override == 0 ? last_order_id_twamm : order_id_override);\r\n\r\n        // Withdraw current proceeds\r\n        (bool is_expired, address rewardTkn, uint256 totalReward) = TWAMM.withdrawProceedsFromLongTermSwap(order_id_to_use);\r\n        \r\n        // If using the last_order_id_twamm and it is expired, clear the pending order indicator\r\n        if (is_expired && (order_id_override == 0)) pending_twamm_order = false;\r\n\r\n        emit TWAMMProceedsCollected(order_id_to_use, rewardTkn, totalReward);\r\n    }\r\n\r\n    /* ========== Burns and givebacks ========== */\r\n\r\n    // Burn unneeded or excess FPI.\r\n    function burnFPI(bool burn_all, uint256 fpi_amount) public onlyByOwnGov {\r\n        uint256 amt_to_burn = burn_all ? FPI_TKN.balanceOf(address(this)) : fpi_amount;\r\n\r\n        // Burn\r\n        FPI_TKN.burn(amt_to_burn);\r\n\r\n        emit FPIBurned(amt_to_burn);\r\n    }\r\n\r\n    // ------------------------------------------------------------------\r\n    // ------------------------------ FRAX ------------------------------\r\n    // ------------------------------------------------------------------\r\n\r\n    // Lend the FRAX collateral to an AMO\r\n    function giveFRAXToAMO(address destination_amo, uint256 frax_amount) external onlyByOwnGov validAMO(destination_amo) {\r\n        require(frax_amount <= (2**255 - 1), \"int256 overflow\");\r\n        int256 frax_amount_i256 = int256(frax_amount);\r\n\r\n        // Update the balances first\r\n        require((frax_borrowed_sum + frax_amount_i256) <= frax_borrow_cap, \"Borrow cap\");\r\n        frax_borrowed_balances[destination_amo] += frax_amount_i256;\r\n        frax_borrowed_sum += frax_amount_i256;\r\n\r\n        // Give the FRAX to the AMO\r\n        TransferHelper.safeTransfer(address(FRAX), destination_amo, frax_amount);\r\n\r\n        emit FRAXGivenToAMO(destination_amo, frax_amount);\r\n    }\r\n\r\n    // AMO gives back FRAX. Needed for proper accounting\r\n    function receiveFRAXFromAMO(uint256 frax_amount) external validAMO(msg.sender) {\r\n        require(frax_amount <= (2**255 - 1), \"int256 overflow\");\r\n        int256 frax_amt_i256 = int256(frax_amount);\r\n\r\n        // Give back first\r\n        TransferHelper.safeTransferFrom(address(FRAX), msg.sender, address(this), frax_amount);\r\n\r\n        // Then update the balances\r\n        frax_borrowed_balances[msg.sender] -= frax_amt_i256;\r\n        frax_borrowed_sum -= frax_amt_i256;\r\n\r\n        emit FRAXReceivedFromAMO(msg.sender, frax_amount);\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    // Adds an AMO \r\n    function addAMO(address amo_address) public onlyByOwnGov {\r\n        require(amo_address != address(0), \"Zero address detected\");\r\n\r\n        require(amos[amo_address] == false, \"Address already exists\");\r\n        amos[amo_address] = true; \r\n        amos_array.push(amo_address);\r\n\r\n        emit AMOAdded(amo_address);\r\n    }\r\n\r\n    // Removes an AMO\r\n    function removeAMO(address amo_address) public onlyByOwnGov {\r\n        require(amo_address != address(0), \"Zero address detected\");\r\n        require(amos[amo_address] == true, \"Address nonexistant\");\r\n        \r\n        // Delete from the mapping\r\n        delete amos[amo_address];\r\n\r\n        // 'Delete' from the array by setting the address to 0x0\r\n        for (uint i = 0; i < amos_array.length; i++){ \r\n            if (amos_array[i] == amo_address) {\r\n                amos_array[i] = address(0); // This will leave a null in the array and keep the indices the same\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit AMORemoved(amo_address);\r\n    }\r\n\r\n    function setOracles(address _frax_oracle, address _fpi_oracle, address _cpi_oracle) external onlyByOwnGov {\r\n        priceFeedFRAXUSD = AggregatorV3Interface(_frax_oracle);\r\n        priceFeedFPIUSD = AggregatorV3Interface(_fpi_oracle);\r\n        cpiTracker = CPITrackerOracle(_cpi_oracle);\r\n\r\n        // Set the Chainlink oracle decimals\r\n        chainlink_frax_usd_decimals = priceFeedFRAXUSD.decimals();\r\n        chainlink_fpi_usd_decimals = priceFeedFPIUSD.decimals();\r\n    }\r\n\r\n    function setTWAMMAndSwapPeriod(address _twamm_addr, uint256 _swap_period) external onlyByOwnGov {\r\n        // Cancel an outstanding order, if present\r\n        if (pending_twamm_order) cancelCurrTWAMMOrder(last_order_id_twamm);\r\n        \r\n        // Change the TWAMM parameters\r\n        TWAMM = IFraxswapPair(_twamm_addr);\r\n        swap_period = _swap_period;\r\n        num_twamm_intervals = _swap_period / TWAMM.orderTimeInterval();\r\n    }\r\n\r\n    function toggleMints() external onlyByOwnGov {\r\n        mints_paused = !mints_paused;\r\n    }\r\n\r\n    function toggleRedeems() external onlyByOwnGov {\r\n        redeems_paused = !redeems_paused;\r\n    }\r\n\r\n    function setFraxBorrowCap(int256 _frax_borrow_cap) external onlyByOwnGov {\r\n        require(_frax_borrow_cap >= 0, \"int256 underflow\");\r\n        require(_frax_borrow_cap <= (2**255 - 1), \"int256 overflow\");\r\n        frax_borrow_cap = _frax_borrow_cap;\r\n    }\r\n\r\n    function setMintCap(uint256 _fpi_mint_cap) external onlyByOwnGov {\r\n        fpi_mint_cap = _fpi_mint_cap;\r\n    }\r\n\r\n    function setPegBands(uint256 _peg_band_mint_redeem, uint256 _peg_band_twamm) external onlyByOwnGov {\r\n        peg_band_mint_redeem = _peg_band_mint_redeem;\r\n        peg_band_twamm = _peg_band_twamm;\r\n    }\r\n\r\n    function setMintRedeemFees(\r\n        bool _use_manual_mint_fee,\r\n        uint256 _mint_fee_manual, \r\n        uint256 _mint_fee_multiplier, \r\n        bool _use_manual_redeem_fee,\r\n        uint256 _redeem_fee_manual, \r\n        uint256 _redeem_fee_multiplier\r\n    ) external onlyByOwnGov {\r\n        use_manual_mint_fee = _use_manual_mint_fee;\r\n        mint_fee_manual = _mint_fee_manual;\r\n        mint_fee_multiplier = _mint_fee_multiplier;\r\n        use_manual_redeem_fee = _use_manual_redeem_fee;\r\n        redeem_fee_manual = _redeem_fee_manual;\r\n        redeem_fee_multiplier = _redeem_fee_multiplier;\r\n    }\r\n\r\n    function setTWAMMMaxSwapIn(uint256 _max_swap_frax_amt_in, uint256 _max_swap_fpi_amt_in) external onlyByOwnGov {\r\n        max_swap_frax_amt_in = _max_swap_frax_amt_in;\r\n        max_swap_fpi_amt_in = _max_swap_fpi_amt_in;\r\n    }\r\n\r\n    function setTimelock(address _new_timelock_address) external onlyByOwnGov {\r\n        timelock_address = _new_timelock_address;\r\n    }\r\n\r\n    // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\r\n        // Only the owner address can ever receive the recovery withdrawal\r\n        TransferHelper.safeTransfer(tokenAddress, owner, tokenAmount);\r\n        emit RecoveredERC20(tokenAddress, tokenAmount);\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    event FPIMinted(uint256 frax_in, uint256 fpi_out);\r\n    event FPIRedeemed(uint256 fpi_in, uint256 frax_out);\r\n    event TWAMMedToPeg(uint256 order_id, uint256 frax_amt, uint256 fpi_amt, uint256 timestamp);\r\n    event TWAMMOrderCancelled(uint256 order_id);\r\n    event TWAMMProceedsCollected(uint256 order_id, address reward_tkn, uint256 ttl_reward);\r\n    event FPIBurned(uint256 amt_burned);\r\n    event FRAXGivenToAMO(address destination_amo, uint256 frax_amount);\r\n    event FRAXReceivedFromAMO(address source_amo, uint256 frax_amount);\r\n    event AMOAdded(address amo_address);\r\n    event AMORemoved(address amo_address);\r\n    event RecoveredERC20(address token, uint256 amount);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\"},{\"internalType\":\"address[6]\",\"name\":\"_address_pack\",\"type\":\"address[6]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amo_address\",\"type\":\"address\"}],\"name\":\"AMOAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amo_address\",\"type\":\"address\"}],\"name\":\"AMORemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt_burned\",\"type\":\"uint256\"}],\"name\":\"FPIBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frax_in\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fpi_out\",\"type\":\"uint256\"}],\"name\":\"FPIMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fpi_in\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frax_out\",\"type\":\"uint256\"}],\"name\":\"FPIRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_amo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frax_amount\",\"type\":\"uint256\"}],\"name\":\"FRAXGivenToAMO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source_amo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frax_amount\",\"type\":\"uint256\"}],\"name\":\"FRAXReceivedFromAMO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"}],\"name\":\"TWAMMOrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward_tkn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ttl_reward\",\"type\":\"uint256\"}],\"name\":\"TWAMMProceedsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frax_amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fpi_amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TWAMMedToPeg\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FPI_TKN\",\"outputs\":[{\"internalType\":\"contract FPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FRAX\",\"outputs\":[{\"internalType\":\"contract IFrax\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PEG_BAND_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWAMM\",\"outputs\":[{\"internalType\":\"contract IFraxswapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amo_address\",\"type\":\"address\"}],\"name\":\"addAMO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amos_array\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"burn_all\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fpi_amount\",\"type\":\"uint256\"}],\"name\":\"burnFPI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_in\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_fpi_out\",\"type\":\"uint256\"}],\"name\":\"calcMintFPI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fpi_out\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fpi_in\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_frax_out\",\"type\":\"uint256\"}],\"name\":\"calcRedeemFPI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_out\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order_id_override\",\"type\":\"uint256\"}],\"name\":\"cancelCurrTWAMMOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlink_fpi_usd_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlink_frax_usd_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order_id_override\",\"type\":\"uint256\"}],\"name\":\"collectCurrTWAMMProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cpiTracker\",\"outputs\":[{\"internalType\":\"contract CPITrackerOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_val_e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collat_val_e18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fpi_mint_cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frax_borrow_cap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frax_borrowed_balances\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frax_borrowed_sum\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frax_is_token0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFPIPriceE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFRAXPriceE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesAndFPISpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveFRAX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFPI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fpi_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_amo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"frax_amount\",\"type\":\"uint256\"}],\"name\":\"giveFRAXToAMO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_order_id_twamm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_swap_fpi_amt_in\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_swap_frax_amt_in\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_in\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_fpi_out\",\"type\":\"uint256\"}],\"name\":\"mintFPI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fpi_out\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint_fee_manual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint_fee_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mints_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"num_twamm_intervals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegStatusMntRdm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cpi_peg_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diff_frac_abs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"within_range\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg_band_mint_redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg_band_twamm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending_twamm_order\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedFPIUSD\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedFRAXUSD\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_info\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"collat_imbalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cpi_peg_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fpi_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price_diff_frac_abs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_amount\",\"type\":\"uint256\"}],\"name\":\"receiveFRAXFromAMO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fpi_in\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_frax_out\",\"type\":\"uint256\"}],\"name\":\"redeemFPI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_out\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem_fee_manual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem_fee_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeems_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amo_address\",\"type\":\"address\"}],\"name\":\"removeAMO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_frax_borrow_cap\",\"type\":\"int256\"}],\"name\":\"setFraxBorrowCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fpi_mint_cap\",\"type\":\"uint256\"}],\"name\":\"setMintCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_use_manual_mint_fee\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_mint_fee_manual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mint_fee_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_use_manual_redeem_fee\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_redeem_fee_manual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeem_fee_multiplier\",\"type\":\"uint256\"}],\"name\":\"setMintRedeemFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_frax_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fpi_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cpi_oracle\",\"type\":\"address\"}],\"name\":\"setOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_peg_band_mint_redeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_peg_band_twamm\",\"type\":\"uint256\"}],\"name\":\"setPegBands\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_twamm_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swap_period\",\"type\":\"uint256\"}],\"name\":\"setTWAMMAndSwapPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max_swap_frax_amt_in\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_swap_fpi_amt_in\",\"type\":\"uint256\"}],\"name\":\"setTWAMMMaxSwapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_timelock_address\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRedeems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_sell_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fpi_sell_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"override_intervals\",\"type\":\"uint256\"}],\"name\":\"twammManual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_to_use\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fpi_to_use\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"use_manual_mint_fee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"use_manual_redeem_fee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FPIControllerPool", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000a448833bece66fd8803ac0c390936c79b5fd6edf0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000853d955acef822db058eb8505911ed77f175b99e0000000000000000000000005ca135cb8527d76e932f34b5145575f9d8cbe08e0000000000000000000000005a1ea0130dc4dc38420aa77929f992f1fbd482bb000000000000000000000000b9e1e3a9feff48998e45fa90847ed4d467e8bcfd00000000000000000000000059985d79e1e69f659f4ab97db07a35ce73d9174b0000000000000000000000007086f2acb5558043ff9ce3df346d8e3fb4f4f452", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fd640d2f59524648cf5069444f94bd2300b247e67b62c9a306b50f9da29ed567"}]}