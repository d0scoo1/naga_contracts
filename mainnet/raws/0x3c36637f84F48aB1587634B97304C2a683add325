{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/ContractDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract ContractDeployer is Ownable {\\n  event Deployed(address createdContract, address sender);\\n\\n  address public deployTokenAddress;\\n\\n  bool private _isDeployTokenLocked;\\n\\n  constructor(address payable _owner) {\\n    transferOwnership(_owner);\\n    deployTokenAddress = _owner;\\n  }\\n\\n  // See details here:\\n  // https://github.com/0xsequence/create3/blob/5f2569de603d2d75610746b419f7453aded9ff2c/contracts/Create3.sol#L13-L34\\n  bytes internal constant CONTRACT_INITIALIZER_BYTECODE =\\n    hex'67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3';\\n  bytes32 internal constant KECCAK256_CONTRACT_INITIALIZER_BYTECODE =\\n    0x21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f;\\n\\n  function deploy(bytes memory bytecode, uint256 nonce)\\n    external\\n    payable\\n    returns (address)\\n  {\\n    require(msg.sender == deployTokenAddress, 'invalid sender');\\n\\n    // Assembly code requires in-memory variable.\\n    // We copy the constant in here.\\n    bytes memory contractInitializerBytecode = CONTRACT_INITIALIZER_BYTECODE;\\n\\n    address contractInitializerAddress;\\n    assembly {\\n      contractInitializerAddress := create2(\\n        0,\\n        add(contractInitializerBytecode, 0x20),\\n        mload(contractInitializerBytecode),\\n        nonce\\n      )\\n    }\\n    require(\\n      contractInitializerAddress != address(0),\\n      'contractInitializer contract deployment failed'\\n    );\\n\\n    (bool success, ) = contractInitializerAddress.call{value: msg.value}(\\n      bytecode\\n    );\\n    address deployedContract = _generateContractAddress(\\n      contractInitializerAddress\\n    );\\n    require(\\n      success && deployedContract.code.length > 0,\\n      'target deployment failed'\\n    );\\n\\n    emit Deployed(deployedContract, msg.sender);\\n    return deployedContract;\\n  }\\n\\n  function setDeployTokenAddress(address _deployerNFTAddress) public onlyOwner {\\n    require(!_isDeployTokenLocked, 'cannot change NFT contract address');\\n\\n    deployTokenAddress = _deployerNFTAddress;\\n    _isDeployTokenLocked = true;\\n  }\\n\\n  function generateContractAddress(uint256 _nonce)\\n    public\\n    view\\n    returns (address)\\n  {\\n    address initializerAddress = _toAddress(\\n      keccak256(\\n        abi.encodePacked(\\n          hex'ff',\\n          address(this),\\n          _nonce,\\n          KECCAK256_CONTRACT_INITIALIZER_BYTECODE\\n        )\\n      )\\n    );\\n\\n    return _generateContractAddress(initializerAddress);\\n  }\\n\\n  function _generateContractAddress(address contractInitializerAddress)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    return\\n      _toAddress(\\n        keccak256(\\n          abi.encodePacked(hex'd6_94', contractInitializerAddress, hex'01')\\n        )\\n      );\\n  }\\n\\n  function _toAddress(bytes32 hash) internal pure returns (address) {\\n    return address(uint160(uint256(hash)));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"createdContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"generateContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployerNFTAddress\",\"type\":\"address\"}],\"name\":\"setDeployTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ContractDeployer", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000988e6ee6f1678220aa5d5464a3f5e2571529df4b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}