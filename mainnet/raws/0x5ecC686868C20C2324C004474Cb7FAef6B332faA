{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"contracts/libraries/MarketLib.sol\\\";\\nimport \\\"contracts/libraries/DigitalCertLib.sol\\\";\\nimport \\\"contracts/IDigitalCert.sol\\\";\\nimport \\\"contracts/IMarket.sol\\\";\\n\\ncontract SuperXMulticall {\\n\\n    IDigitalCert digitalCert;\\n    IMarket market;\\n\\n    constructor(address digitalCertAddress, address marketAddress) {\\n        digitalCert = IDigitalCert(digitalCertAddress);\\n        market = IMarket(marketAddress);\\n    }\\n\\n    function getRedeemByRedeemIdMulticall(uint256[] memory ids) public view returns(MarketLib.Redeemed[] memory) {\\n        MarketLib.Redeemed[] memory redeems = new MarketLib.Redeemed[](ids.length);\\n        for(uint256 i = 0; i < ids.length; i++) {\\n             MarketLib.Redeemed memory redeem = market.getRedeemByRedeemId(ids[i]);\\n             redeems[i] = redeem;\\n        }\\n        return redeems;\\n    }\\n\\n    function getRedeemByRedeemerAddress(address redeemer) public view returns (MarketLib.Redeemed[] memory) {\\n        uint256[] memory ids = market.getRedeemIdsByAddress(redeemer);\\n        MarketLib.Redeemed[] memory redeems = new MarketLib.Redeemed[](ids.length);\\n        if (ids.length <= 0) {\\n            return redeems;\\n        }\\n        redeems = getRedeemByRedeemIdMulticall(ids);\\n        return redeems;\\n    }\\n\\n    function getDigitalCertificateById(uint256 id) public view returns(DigitalCertLib.DigitalCertificateRes memory) {\\n        DigitalCertLib.DigitalCertificateRes memory cert = digitalCert.getDigitalCertificate(id, address(market));\\n        cert.isPaused = market.isDigitalCertPaused(id);\\n        return cert;\\n    }\\n\\n    function getDigitalCertificateByIdMulticall(uint256[] calldata ids) public view returns(DigitalCertLib.DigitalCertificateRes[] memory) {\\n        DigitalCertLib.DigitalCertificateRes[] memory certs = new  DigitalCertLib.DigitalCertificateRes[](ids.length);\\n        for(uint256 i = 0; i < ids.length; i++) {\\n            DigitalCertLib.DigitalCertificateRes memory cert = getDigitalCertificateById(ids[i]);\\n            certs[i] = cert;\\n        }\\n        return certs;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MarketLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nlibrary MarketLib {\\n  struct Redeemed {\\n        uint256 redeemedId;\\n        address redeemer;\\n        uint256 certId;\\n        uint256 amount;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/DigitalCertLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nlibrary DigitalCertLib {\\n    struct DigitalCertificate {\\n      uint256 expire; // unix timestamp\\n      uint256 price;\\n    }\\n\\n    struct DigitalCertificateRes {\\n      uint256 certId;\\n      uint256 expire;\\n      uint256 price;\\n      uint256 available;\\n      bool isPaused;\\n    }\\n}\"\r\n    },\r\n    \"contracts/IDigitalCert.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"contracts/libraries/DigitalCertLib.sol\\\";\\n\\ninterface IDigitalCert {\\n  function DEFAULT_ADMIN_ROLE (  ) external view returns ( bytes32 );\\n  function MINTER_ROLE (  ) external view returns ( bytes32 );\\n  function URI_SETTER_ROLE (  ) external view returns ( bytes32 );\\n  function balanceOf ( address account, uint256 id ) external view returns ( uint256 );\\n  function balanceOfBatch ( address[] memory accounts, uint256[] memory ids ) external view returns ( uint256[] memory );\\n  function burn ( address account, uint256 id, uint256 value ) external;\\n  function burnBatch ( address account, uint256[] memory ids, uint256[] memory values ) external;\\n  function createDigitalCert ( address account, uint256 amount, uint256 expire, uint256 price, bytes calldata data ) external;\\n  function createDigitalCertBatch ( address account, uint256[] calldata amounts, uint256[] calldata expires, uint256[] calldata prices, bytes calldata data ) external;\\n  function exists ( uint256 id ) external view returns ( bool );\\n  function getDigitalCertificate ( uint256 id, address marketAddress ) external view returns ( DigitalCertLib.DigitalCertificateRes memory );\\n  function getExpireDateById ( uint256 id ) external view returns ( uint256 );\\n  function getLastId (  ) external view returns ( uint256 );\\n  function getPriceById ( uint256 id ) external view returns ( uint256 );\\n  function getRoleAdmin ( bytes32 role ) external view returns ( bytes32 );\\n  function grantRole ( bytes32 role, address account ) external;\\n  function hasRole ( bytes32 role, address account ) external view returns ( bool );\\n  function isApprovedForAll ( address account, address operator ) external view returns ( bool );\\n  function mint ( address account, uint256 id, uint256 amount, bytes memory data ) external;\\n  function mintBatch ( address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) external;\\n  function renounceRole ( bytes32 role, address account ) external;\\n  function revokeRole ( bytes32 role, address account ) external;\\n  function safeBatchTransferFrom ( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) external;\\n  function safeTransferFrom ( address from, address to, uint256 id, uint256 amount, bytes memory data ) external;\\n  function setApprovalForAll ( address operator, bool approved ) external;\\n  function setExpireDate ( uint256 id, uint256 expire ) external;\\n  function setPrice ( uint256 id, uint256 price ) external;\\n  function setURI ( string memory newuri ) external;\\n  function supportsInterface ( bytes4 interfaceId ) external view returns ( bool );\\n  function totalSupply ( uint256 id ) external view returns ( uint256 );\\n  function uri ( uint256 ) external view returns ( string memory );\\n}\\n\"\r\n    },\r\n    \"contracts/IMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"contracts/libraries/DigitalCertLib.sol\\\";\\nimport \\\"contracts/libraries/MarketLib.sol\\\";\\ninterface IMarket {\\n  function DEFAULT_ADMIN_ROLE (  ) external view returns ( bytes32 );\\n  function MINTER_ROLE (  ) external view returns ( bytes32 );\\n  function burnBatchFor ( uint256[] calldata certIds, uint256[] calldata burnAmounts ) external;\\n  function burnFor ( uint256 certId, uint256 burnAmount ) external;\\n  function getLastRedeemId (  ) external view returns ( uint256 );\\n  function getRedeemByRedeemId ( uint256 redeemId ) external view returns ( MarketLib.Redeemed memory );\\n  function getRedeemIdsByAddress ( address customer ) external view returns ( uint256[] memory );\\n  function getRoleAdmin ( bytes32 role ) external view returns ( bytes32 );\\n  function grantRole ( bytes32 role, address account ) external;\\n  function hasRole ( bytes32 role, address account ) external view returns ( bool );\\n  function isDigitalCertPaused ( uint256 certId ) external view returns ( bool );\\n  function onERC1155BatchReceived ( address operator, address from, uint256[] memory ids, uint256[] memory values, bytes memory data ) external returns ( bytes4 );\\n  function onERC1155Received ( address operator, address from, uint256 id, uint256 value, bytes memory data ) external returns ( bytes4 );\\n  function onRedeem ( uint256 certId, uint256 amount ) external;\\n  function ownerAddress (  ) external view returns ( address );\\n  function renounceRole ( bytes32 role, address account ) external;\\n  function revokeRole ( bytes32 role, address account ) external;\\n  function setPauseForCertId ( uint256 certId, bool isPaused ) external;\\n  function supportsInterface ( bytes4 interfaceId ) external view returns ( bool );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"digitalCertAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getDigitalCertificateById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"certId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"internalType\":\"struct DigitalCertLib.DigitalCertificateRes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getDigitalCertificateByIdMulticall\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"certId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"internalType\":\"struct DigitalCertLib.DigitalCertificateRes[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getRedeemByRedeemIdMulticall\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"redeemedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"certId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketLib.Redeemed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"getRedeemByRedeemerAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"redeemedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"certId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketLib.Redeemed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SuperXMulticall", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d88a5cadffd8190be8af9aa49c5a2498e9a8f1c8000000000000000000000000665a95c2c179e40a22a1b1458444b086be88dd46", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}