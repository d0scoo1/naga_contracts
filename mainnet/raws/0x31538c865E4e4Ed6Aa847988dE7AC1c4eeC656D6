{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Shonen.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * telegram: https://t.me/shonenverify\\n * website: https://www.shonen.io/\\n */\\npragma solidity ^0.8.10;\\n\\ninterface ERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, TOKEN the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n            data\\n        );\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ncontract SHONEN is Context, ERC20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _holders;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    mapping(address => bool) private _isExcludedFromTax;\\n    mapping(address => bool) private _isExcludedFromMaxTx;\\n    mapping(address => bool) private _taxableExchange;\\n\\n    string private _name = \\\"SHONEN\\\";\\n    string private _symbol = \\\"SHONEN\\\";\\n    uint8 private _decimals = 18;\\n    uint256 private _tTotal = 100000000000 * 1e18;\\n\\n    IUniswapV2Router02 public uniswapRouter;\\n    address public immutable uniSwapPair;\\n\\n    address payable private marketingWallet;\\n    address payable private devWallet;\\n    address payable private daoWallet;\\n    address payable private tempBuyBackWallet;\\n\\n    uint256 _marketingTax;\\n    uint256 public _buyMarketingTax = 50; // 10%\\n    uint256 public _sellMarketingTax = 50;\\n\\n    uint256 _devTax;\\n    uint256 public _buyDevTax = 50;\\n    uint256 public _sellDevTax = 50;\\n\\n    uint256 _daoTax;\\n    uint256 public _buyDAOTax = 20; // 2%\\n    uint256 public _sellDAOTax = 20;\\n\\n    uint256 _tempBuyBackTax;\\n    uint256 public _buyBackTax = 30; // 3% can be turned off\\n\\n    bool inSwapAndLiquify = false;\\n    bool public swapAndLiquifyEnabled = true;\\n    bool public isBuyBackTaxEnabled = true;\\n\\n    uint256 public maxSellTransaction = 1000000000 * 10**9; // 1% of total suppy\\n    uint256 public maxBuyTransaction = 2000000000 * 10**9; // 2% of total suppy\\n    uint256 public minTokenNumberToSell = 100000000 * 10**9; // 0.1% of total supply\\n\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    constructor(\\n        address payable _marketingWallet,\\n        address payable _devWallet,\\n        address payable _daoWallet,\\n        address payable _tempBuyBackWallet\\n    ) {\\n        IUniswapV2Router02 _uniswapRouter = IUniswapV2Router02(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n\\n        // Create a Uniswap pair for this new token\\n        uniSwapPair = IUniswapV2Factory(_uniswapRouter.factory()).createPair(\\n            address(this),\\n            _uniswapRouter.WETH()\\n        );\\n\\n        _taxableExchange[uniSwapPair] = true;\\n\\n        // set the rest of the contract variables\\n        uniswapRouter = _uniswapRouter;\\n        tempBuyBackWallet = _tempBuyBackWallet;\\n        daoWallet = _daoWallet;\\n        marketingWallet = _marketingWallet;\\n        devWallet = _devWallet;\\n\\n        //exclude owner and this contract from Tax\\n        _isExcludedFromTax[owner()] = true;\\n        _isExcludedFromTax[address(this)] = true;\\n        _isExcludedFromTax[_tempBuyBackWallet] = true;\\n        _isExcludedFromTax[_daoWallet] = true;\\n        _isExcludedFromTax[_marketingWallet] = true;\\n        _isExcludedFromTax[_devWallet] = true;\\n\\n        // exclude from max tx\\n        _isExcludedFromMaxTx[owner()] = true;\\n        _isExcludedFromMaxTx[address(this)] = true;\\n        _isExcludedFromMaxTx[_tempBuyBackWallet] = true;\\n        _isExcludedFromMaxTx[_daoWallet] = true;\\n        _isExcludedFromMaxTx[_marketingWallet] = true;\\n        _isExcludedFromMaxTx[_devWallet] = true;\\n\\n        _holders[owner()] = _tTotal;\\n        emit Transfer(address(0), owner(), _tTotal);\\n    }\\n\\n    receive() external payable {}\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _holders[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"SHONEN: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"SHONEN: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    // getter functions\\n\\n    function getContractBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function isTaxableExchange(address pair) public view returns (bool) {\\n        return _taxableExchange[pair];\\n    }\\n\\n    function isExcludedFromTax(address account) public view returns (bool) {\\n        return _isExcludedFromTax[account];\\n    }\\n\\n    function excludeFromTax(address account) public onlyOwner {\\n        _isExcludedFromTax[account] = true;\\n    }\\n\\n    function includeInTax(address account) public onlyOwner {\\n        _isExcludedFromTax[account] = false;\\n    }\\n\\n    function setAmountLimits(uint256 _maxSellTxAmount, uint256 _maxBuyTxAmount)\\n        public\\n        onlyOwner\\n    {\\n        require(_maxSellTxAmount >= 500000000 * 1e18); // must be greater than 0.5%\\n        maxSellTransaction = _maxSellTxAmount;\\n        maxBuyTransaction = _maxBuyTxAmount;\\n    }\\n\\n    function removeMaxBuyLimit() public onlyOwner {\\n        maxBuyTransaction = _tTotal;\\n    }\\n\\n    function removeAllBuyTaxes() external onlyOwner {\\n        _tempBuyBackTax = 0;\\n        _buyDAOTax = 0;\\n        _buyMarketingTax = 0;\\n        _buyDevTax = 0;\\n    }\\n\\n    function removeAllSellTaxes() external onlyOwner {\\n        _tempBuyBackTax = 0;\\n        _sellDAOTax = 0;\\n        _sellMarketingTax = 0;\\n        _sellDevTax = 0;\\n    }\\n\\n    function setAllBuyTaxes(\\n        uint256 _bBuyBackTax,\\n        uint256 _bDAOTax,\\n        uint256 _bMarketingTax,\\n        uint256 _bDevTax\\n    ) external onlyOwner {\\n        uint256 sumOfTaxes = _bDevTax.add(_bMarketingTax).add(_bDAOTax).add(\\n            isBuyBackTaxEnabled ? _bBuyBackTax : 0\\n        );\\n        require(InTaxRange(sumOfTaxes));\\n        _buyBackTax = _bBuyBackTax;\\n        _buyDAOTax = _bDAOTax;\\n        _buyMarketingTax = _bMarketingTax;\\n        _buyDevTax = _bDevTax;\\n    }\\n\\n    function setSellSellTaxes(\\n        uint256 _sBuyBackTax,\\n        uint256 _sDAOTax,\\n        uint256 _sMarketingTax,\\n        uint256 _sDevTax\\n    ) external onlyOwner {\\n        uint256 sumOfTaxes = _sDevTax.add(_sMarketingTax).add(_sDAOTax).add(\\n            isBuyBackTaxEnabled ? _sBuyBackTax : 0\\n        );\\n        require(InTaxRange(sumOfTaxes));\\n        _buyBackTax = _sBuyBackTax;\\n        _sellDAOTax = _sDAOTax;\\n        _sellMarketingTax = _sMarketingTax;\\n        _sellDevTax = _sDevTax;\\n    }\\n\\n    function setMinTokenNumberToSell(uint256 _amount) public onlyOwner {\\n        minTokenNumberToSell = _amount;\\n    }\\n\\n    function setExcludeFromMaxTx(address _address, bool _state)\\n        public\\n        onlyOwner\\n    {\\n        _isExcludedFromMaxTx[_address] = _state;\\n    }\\n\\n    function addExchangePair(address _pairAddress) public onlyOwner {\\n        _taxableExchange[_pairAddress] = true;\\n    }\\n\\n    function removeExchangePair(address _pairAddress) public onlyOwner {\\n        _taxableExchange[_pairAddress] = false;\\n    }\\n\\n    function setSwapAndLiquifyEnabled(bool _state) public onlyOwner {\\n        swapAndLiquifyEnabled = _state;\\n        emit SwapAndLiquifyEnabledUpdated(_state);\\n    }\\n\\n    function setNewTaxWallets(\\n        address payable _tempBuyBackWallet,\\n        address payable _daoWallet,\\n        address payable _marketingWallet,\\n        address payable _devWallet\\n    ) external onlyOwner {\\n        tempBuyBackWallet = _tempBuyBackWallet;\\n        daoWallet = _daoWallet;\\n        marketingWallet = _marketingWallet;\\n        devWallet = _devWallet;\\n    }\\n\\n    function setTempBuyBackWallet(address payable _tempBuyBackWallet)\\n        external\\n        onlyOwner\\n    {\\n        tempBuyBackWallet = _tempBuyBackWallet;\\n    }\\n\\n    function setDAOWallet(address payable _daoWallet) external onlyOwner {\\n        daoWallet = _daoWallet;\\n    }\\n\\n    function setMarketingWallet(address payable _marketingWallet)\\n        external\\n        onlyOwner\\n    {\\n        marketingWallet = _marketingWallet;\\n    }\\n\\n    function setDevelopmentWallet(address payable _devWallet)\\n        external\\n        onlyOwner\\n    {\\n        devWallet = _devWallet;\\n    }\\n\\n    function removeMaxTxLimits() external onlyOwner {\\n        maxSellTransaction = _tTotal;\\n        maxBuyTransaction = _tTotal;\\n    }\\n\\n    function setUniswapRouter(IUniswapV2Router02 _uniswapRouter)\\n        external\\n        onlyOwner\\n    {\\n        uniswapRouter = _uniswapRouter;\\n    }\\n\\n    function toggleBuyBackTax() external onlyOwner {\\n        isBuyBackTaxEnabled = !isBuyBackTaxEnabled;\\n    }\\n\\n    // internal functions\\n\\n    function takeBuyBackTax() internal view returns (uint256) {\\n        return isBuyBackTaxEnabled ? _tempBuyBackTax : 0;\\n    }\\n\\n    function sumOfTaxPerTx(uint256 tAmount) internal view returns (uint256) {\\n        uint256 percentage = tAmount\\n            .mul(_daoTax.add(_marketingTax).add(_devTax).add(takeBuyBackTax()))\\n            .div(1e3);\\n        return percentage;\\n    }\\n\\n    function _takeAllTax(uint256 tAmount) internal {\\n        uint256 tFee = tAmount\\n            .mul(_daoTax.add(_marketingTax).add(_devTax).add(takeBuyBackTax()))\\n            .div(1e3);\\n\\n        _holders[address(this)] = _holders[address(this)].add(tFee);\\n        emit Transfer(_msgSender(), address(this), tFee);\\n    }\\n\\n    function InTaxRange(uint256 tAmount) private pure returns (bool) {\\n        uint256 max = 160; // 16%\\n        return tAmount <= max;\\n    }\\n\\n    function removeAllFee() private {\\n        _tempBuyBackTax = 0;\\n        _daoTax = 0;\\n        _marketingTax = 0;\\n        _devTax = 0;\\n    }\\n\\n    function takeBuyFee() private {\\n        _tempBuyBackTax = _buyBackTax;\\n        _daoTax = _buyDAOTax;\\n        _marketingTax = _buyMarketingTax;\\n        _devTax = _buyDevTax;\\n    }\\n\\n    function takeSellFee() private {\\n        _tempBuyBackTax = _buyBackTax;\\n        _daoTax = _sellDAOTax;\\n        _marketingTax = _sellMarketingTax;\\n        _devTax = _sellDevTax;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"SHONEN: approve from the zero address\\\");\\n        require(spender != address(0), \\\"SHONEN: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(from != address(0), \\\"SHONEN: transfer from the zero address\\\");\\n        require(to != address(0), \\\"SHONEN: transfer to the zero address\\\");\\n        require(\\n            amount > 0,\\n            \\\"SHONEN: Transfer amount must be greater than zero\\\"\\n        );\\n\\n        if (\\n            !_isExcludedFromMaxTx[from] && !_isExcludedFromMaxTx[to] // by default false\\n        ) {\\n            if (_taxableExchange[to]) {\\n                // sell\\n                require(\\n                    amount <= maxSellTransaction.add(5 * 1e18),\\n                    \\\"SHONEN: max sell transaction exceeded\\\"\\n                );\\n            }\\n            if (_taxableExchange[from]) {\\n                // buy\\n                require(\\n                    amount <= maxBuyTransaction.add(5 * 1e18),\\n                    \\\"SHONEN: max buy transaction exceeded\\\"\\n                );\\n            }\\n        }\\n\\n        // swap and liquify\\n        swapAndLiquify(from, to);\\n\\n        //indicates if fee should be deducted from transfer\\n        bool takeFee = true;\\n\\n        //if any account belongs to _isExcludedFromTax account then remove the fee\\n        if (_isExcludedFromTax[from] || _isExcludedFromTax[to]) {\\n            takeFee = false;\\n        }\\n\\n        //transfer amount, it will take tax, burn, liquidity fee\\n        _tokenTransfer(from, to, amount, takeFee);\\n    }\\n\\n    // take fee if takefee is true\\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool takeFee\\n    ) private {\\n        if (!takeFee) removeAllFee();\\n        else if (_taxableExchange[sender]) takeBuyFee();\\n        else if (_taxableExchange[recipient]) takeSellFee();\\n        else removeAllFee();\\n\\n        uint256 tTransferAmount = amount.sub(sumOfTaxPerTx(amount));\\n        _holders[sender] = _holders[sender].sub(amount);\\n        _holders[recipient] = _holders[recipient].add(tTransferAmount);\\n        _takeAllTax(amount);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function manualSwap() external onlyOwner {\\n        uint256 contractTokenBalance = balanceOf(address(this)).sub(\\n            1000 * 1e18\\n        ); // maintain tokens in the contract\\n        require(\\n            contractTokenBalance > 0,\\n            \\\"SHONEN: contract balance must be greater than zero\\\"\\n        );\\n        _approve(address(this), address(uniswapRouter), contractTokenBalance);\\n        swapTokensForETH(contractTokenBalance);\\n    }\\n\\n    function manualSend() external onlyOwner {\\n        uint256 deltaBalance = getContractBalance();\\n        require(deltaBalance > 0, \\\"SHONEN: Insufficient contract balance\\\");\\n        uint256 totalPercent = _daoTax.add(_marketingTax).add(_devTax).add(\\n            takeBuyBackTax()\\n        );\\n\\n        uint256 devisor = 1e3;\\n\\n        uint256 buyBackPercent = takeBuyBackTax().mul(devisor).div(\\n            totalPercent\\n        );\\n\\n        uint256 daoPercent = _daoTax.mul(devisor).div(totalPercent);\\n        uint256 marketingPercent = _marketingTax.mul(devisor).div(totalPercent);\\n        uint256 devPercent = _devTax.mul(devisor).div(totalPercent);\\n\\n        totalPercent = daoPercent.add(marketingPercent).add(devPercent).add(\\n            buyBackPercent\\n        );\\n\\n        if (totalPercent > 0) {\\n            if (isBuyBackTaxEnabled) {\\n                tempBuyBackWallet.transfer(\\n                    deltaBalance.mul(buyBackPercent).div(totalPercent)\\n                );\\n            }\\n\\n            daoWallet.transfer(deltaBalance.mul(daoPercent).div(totalPercent));\\n            marketingWallet.transfer(\\n                deltaBalance.mul(marketingPercent).div(totalPercent)\\n            );\\n            devWallet.transfer(deltaBalance.mul(devPercent).div(totalPercent));\\n        } else {\\n            devWallet.transfer(deltaBalance); // transfer all to dev if div by zero error (all tax values removed\\n        }\\n    }\\n\\n    function swapAndLiquify(address from, address to) private {\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n\\n        if (contractTokenBalance >= maxSellTransaction) {\\n            contractTokenBalance = maxSellTransaction;\\n        }\\n\\n        bool shouldSell = contractTokenBalance >= minTokenNumberToSell;\\n\\n        if (\\n            !inSwapAndLiquify &&\\n            shouldSell &&\\n            !_taxableExchange[from] &&\\n            swapAndLiquifyEnabled &&\\n            !(from == address(this) && _taxableExchange[to])\\n        ) {\\n            // split the contract balance\\n\\n            contractTokenBalance = minTokenNumberToSell;\\n            // approve contract\\n            _approve(\\n                address(this),\\n                address(uniswapRouter),\\n                contractTokenBalance\\n            );\\n\\n            takeSellFee();\\n            uint256 totalPercent = _daoTax.add(_marketingTax).add(_devTax).add(\\n                takeBuyBackTax()\\n            );\\n\\n            if (totalPercent > 0) {\\n                uint256 devisor = 1e3;\\n                uint256 buyBackPercent = takeBuyBackTax().mul(devisor).div(\\n                    totalPercent\\n                );\\n                uint256 daoPercent = _daoTax.mul(devisor).div(totalPercent);\\n                uint256 marketingPercent = _marketingTax.mul(devisor).div(\\n                    totalPercent\\n                );\\n                uint256 devPercent = _devTax.mul(devisor).div(totalPercent);\\n\\n                swapTokensForETH(contractTokenBalance);\\n\\n                uint256 deltaBalance = getContractBalance();\\n\\n                totalPercent = daoPercent\\n                    .add(marketingPercent)\\n                    .add(devPercent)\\n                    .add(buyBackPercent);\\n\\n                // tax transfers\\n                if (isBuyBackTaxEnabled) {\\n                    tempBuyBackWallet.transfer(\\n                        deltaBalance.mul(buyBackPercent).div(totalPercent)\\n                    );\\n                }\\n\\n                daoWallet.transfer(\\n                    deltaBalance.mul(daoPercent).div(totalPercent)\\n                );\\n                marketingWallet.transfer(\\n                    deltaBalance.mul(marketingPercent).div(totalPercent)\\n                );\\n                devWallet.transfer(\\n                    deltaBalance.mul(devPercent).div(totalPercent)\\n                );\\n            }\\n        }\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) internal lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapRouter.WETH();\\n\\n        // make the swap\\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_daoWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_tempBuyBackWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyBackTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDAOTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDevTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDAOTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDevTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"addExchangePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuyBackTaxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"isTaxableExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenNumberToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"removeExchangePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMaxBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMaxTxLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bBuyBackTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bDAOTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bDevTax\",\"type\":\"uint256\"}],\"name\":\"setAllBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSellTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuyTxAmount\",\"type\":\"uint256\"}],\"name\":\"setAmountLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_daoWallet\",\"type\":\"address\"}],\"name\":\"setDAOWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setDevelopmentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenNumberToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tempBuyBackWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_daoWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setNewTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sBuyBackTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sDAOTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sDevTax\",\"type\":\"uint256\"}],\"name\":\"setSellSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tempBuyBackWallet\",\"type\":\"address\"}],\"name\":\"setTempBuyBackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBuyBackTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniSwapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SHONEN", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000070b1f105defeb59a07bb9451531d9ad4a705e5a8000000000000000000000000124bce6441d61e09912e441c41a4240d6b003870000000000000000000000000046f80860b463419f1cf99826fc3d54928c4652400000000000000000000000066a6dc3b30d396bc12bdca172ab664c11d562a78", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}