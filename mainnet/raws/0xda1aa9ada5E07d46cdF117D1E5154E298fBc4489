{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Orderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\n\\nimport \\\"./libraries/BP.sol\\\";\\nimport \\\"./libraries/FullMath.sol\\\";\\nimport \\\"./libraries/UniswapV2PriceImpactLibrary.sol\\\";\\n\\nimport \\\"./interfaces/IvToken.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IOrderer.sol\\\";\\nimport \\\"./interfaces/IvTokenFactory.sol\\\";\\nimport \\\"./interfaces/IIndexRegistry.sol\\\";\\nimport \\\"./interfaces/IReweightableIndex.sol\\\";\\nimport \\\"./interfaces/IPhuturePriceOracle.sol\\\";\\n\\n/// @title Orderer\\n/// @notice Contains logic for reweigh execution, order creation and execution\\ncontract Orderer is IOrderer, UUPSUpgradeable, ERC165Upgradeable {\\n    using FullMath for uint;\\n    using ERC165CheckerUpgradeable for address;\\n\\n    /// @notice Order details structure containing assets list, creator address, creation timestamp and assetDetails\\n    struct OrderDetails {\\n        uint creationTimestamp;\\n        address creator;\\n        address[] assets;\\n        mapping(address => AssetDetails) assetDetails;\\n    }\\n\\n    /// @notice Asset details structure containing order side (buy/sell) and order shares amount\\n    struct AssetDetails {\\n        OrderSide side;\\n        uint248 shares;\\n    }\\n\\n    struct SwapDetails {\\n        address sellAsset;\\n        address buyAsset;\\n        IvToken sellVToken;\\n        IvToken buyVToken;\\n        IPhuturePriceOracle priceOracle;\\n    }\\n\\n    struct InternalSwapVaultsInfo {\\n        address sellAccount;\\n        address buyAccount;\\n        uint maxSellShares;\\n        IvToken buyVTokenSellAccount;\\n        IvToken buyVTokenBuyAccount;\\n        SwapDetails details;\\n    }\\n\\n    /// @notice Index role\\n    bytes32 internal constant INDEX_ROLE = keccak256(\\\"INDEX_ROLE\\\");\\n    /// @notice Keeper job role\\n    bytes32 internal constant KEEPER_JOB_ROLE = keccak256(\\\"KEEPER_JOB_ROLE\\\");\\n    /// @notice Exchange factory role\\n    bytes32 internal constant EXCHANGE_FACTORY_ROLE = keccak256(\\\"EXCHANGE_FACTORY_ROLE\\\");\\n    /// @notice Role allows configure ordering related data/components\\n    bytes32 internal constant ORDERING_MANAGER_ROLE = keccak256(\\\"ORDERING_MANAGER_ROLE\\\");\\n\\n    /// @notice Last placed order id\\n    uint internal _lastOrderId;\\n\\n    /// @notice Index registry address\\n    address internal registry;\\n\\n    /// @inheritdoc IOrderer\\n    uint64 public override orderLifetime;\\n\\n    /// @inheritdoc IOrderer\\n    uint16 public override maxAllowedPriceImpactInBP;\\n\\n    /// @inheritdoc IOrderer\\n    mapping(address => uint) public override lastOrderIdOf;\\n\\n    /// @notice Mapping of order id to order details\\n    mapping(uint => OrderDetails) internal orderDetailsOf;\\n\\n    /// @notice Requires msg.sender to have `_role` role\\n    /// @param _role Required role\\n    modifier onlyRole(bytes32 _role) {\\n        require(IAccessControl(registry).hasRole(_role, msg.sender), \\\"Orderer: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @inheritdoc IOrderer\\n    function initialize(\\n        address _registry,\\n        uint64 _orderLifetime,\\n        uint16 _maxAllowedPriceImpactInBP\\n    ) external override initializer {\\n        bytes4[] memory interfaceIds = new bytes4[](2);\\n        interfaceIds[0] = type(IAccessControl).interfaceId;\\n        interfaceIds[1] = type(IIndexRegistry).interfaceId;\\n        require(_registry.supportsAllInterfaces(interfaceIds), \\\"Orderer: INTERFACE\\\");\\n\\n        __ERC165_init();\\n        __UUPSUpgradeable_init();\\n\\n        registry = _registry;\\n        orderLifetime = _orderLifetime;\\n        maxAllowedPriceImpactInBP = _maxAllowedPriceImpactInBP;\\n    }\\n\\n    /// @inheritdoc IOrderer\\n    function setMaxAllowedPriceImpactInBP(uint16 _maxAllowedPriceImpactInBP)\\n        external\\n        override\\n        onlyRole(ORDERING_MANAGER_ROLE)\\n    {\\n        require(_maxAllowedPriceImpactInBP != 0 && _maxAllowedPriceImpactInBP <= BP.DECIMAL_FACTOR, \\\"Orderer: INVALID\\\");\\n\\n        maxAllowedPriceImpactInBP = _maxAllowedPriceImpactInBP;\\n    }\\n\\n    /// @inheritdoc IOrderer\\n    function setOrderLifetime(uint64 _orderLifetime) external override onlyRole(ORDERING_MANAGER_ROLE) {\\n        require(_orderLifetime != 0, \\\"Orderer: INVALID\\\");\\n\\n        orderLifetime = _orderLifetime;\\n    }\\n\\n    /// @inheritdoc IOrderer\\n    function placeOrder() external override onlyRole(INDEX_ROLE) returns (uint _orderId) {\\n        delete orderDetailsOf[lastOrderIdOf[msg.sender]];\\n        unchecked {\\n            ++_lastOrderId;\\n        }\\n        _orderId = _lastOrderId;\\n        OrderDetails storage order = orderDetailsOf[_orderId];\\n        order.creationTimestamp = block.timestamp;\\n        lastOrderIdOf[msg.sender] = _orderId;\\n        emit PlaceOrder(msg.sender, _orderId);\\n    }\\n\\n    /// @inheritdoc IOrderer\\n    function addOrderDetails(\\n        uint _orderId,\\n        address _asset,\\n        uint _shares,\\n        OrderSide _side\\n    ) external override onlyRole(INDEX_ROLE) {\\n        if (_asset != address(0) && _shares != 0) {\\n            OrderDetails storage order = orderDetailsOf[_orderId];\\n            order.assets.push(_asset);\\n            order.assetDetails[_asset] = AssetDetails({ side: _side, shares: _toUint248(_shares) });\\n            emit UpdateOrder(_orderId, _asset, _shares, _side == OrderSide.Sell);\\n        }\\n    }\\n\\n    /// @inheritdoc IOrderer\\n    function reduceOrderAsset(\\n        address _asset,\\n        uint _newTotalSupply,\\n        uint _oldTotalSupply\\n    ) external override onlyRole(INDEX_ROLE) {\\n        uint lastOrderId = lastOrderIdOf[msg.sender];\\n        if (lastOrderId != 0) {\\n            OrderDetails storage order = orderDetailsOf[lastOrderId];\\n            uint shares = order.assetDetails[_asset].shares;\\n            if (shares != 0) {\\n                uint248 newShares = _toUint248((shares * _newTotalSupply) / _oldTotalSupply);\\n                order.assetDetails[_asset].shares = newShares;\\n                emit UpdateOrder(lastOrderId, _asset, newShares, order.assetDetails[_asset].side == OrderSide.Sell);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IOrderer\\n    function reweight(address _index) external override onlyRole(KEEPER_JOB_ROLE) {\\n        IReweightableIndex(_index).reweight();\\n    }\\n\\n    /// @inheritdoc IOrderer\\n    function internalSwap(InternalSwap calldata _info) external override onlyRole(KEEPER_JOB_ROLE) {\\n        require(_info.buyPath.length == 2, \\\"Orderer: LENGTH\\\");\\n        require(_info.maxSellShares != 0 && _info.buyAccount != _info.sellAccount, \\\"Orderer: INVALID\\\");\\n        require(\\n            IAccessControl(registry).hasRole(INDEX_ROLE, _info.buyAccount) &&\\n                IAccessControl(registry).hasRole(INDEX_ROLE, _info.sellAccount),\\n            \\\"Orderer: INDEX\\\"\\n        );\\n\\n        address sellVTokenFactory = IIndex(_info.sellAccount).vTokenFactory();\\n        address buyVTokenFactory = IIndex(_info.buyAccount).vTokenFactory();\\n        SwapDetails memory _details = _swapDetails(sellVTokenFactory, buyVTokenFactory, _info.buyPath);\\n\\n        if (sellVTokenFactory == buyVTokenFactory) {\\n            _internalWithinVaultSwap(_info, _details);\\n        } else {\\n            _internalBetweenVaultsSwap(\\n                InternalSwapVaultsInfo(\\n                    _info.sellAccount,\\n                    _info.buyAccount,\\n                    _info.maxSellShares,\\n                    IvToken(IvTokenFactory(sellVTokenFactory).vTokenOf(_details.buyAsset)),\\n                    IvToken(IvTokenFactory(buyVTokenFactory).vTokenOf(_details.sellAsset)),\\n                    _details\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IOrderer\\n    function externalSwap(ExternalSwap calldata _info) external override onlyRole(KEEPER_JOB_ROLE) {\\n        require(_info.maxSellShares != 0, \\\"Orderer: ZERO\\\");\\n        require(_info.buyPath.length >= 2, \\\"Orderer: LENGTH\\\");\\n        require(\\n            IAccessControl(registry).hasRole(INDEX_ROLE, _info.account) &&\\n                IAccessControl(registry).hasRole(EXCHANGE_FACTORY_ROLE, _info.factory),\\n            \\\"Orderer: INVALID\\\"\\n        );\\n\\n        SwapDetails memory _details = _swapDetails(IIndex(_info.account).vTokenFactory(), address(0), _info.buyPath);\\n\\n        (uint lastOrderId, AssetDetails storage orderSellAsset, AssetDetails storage orderBuyAsset) = _validatedOrder(\\n            _info.account,\\n            _details.sellAsset,\\n            _details.buyAsset\\n        );\\n\\n        (uint248 _sellShares, uint _minSwapOutputAmount) = _calculateExternalSwapShares(\\n            _info,\\n            _details,\\n            Math.min(_info.maxSellShares, orderSellAsset.shares),\\n            orderBuyAsset.shares\\n        );\\n        if (_sellShares != 0) {\\n            _details.sellVToken.transferFrom(_info.account, address(_details.sellVToken), _sellShares);\\n            _details.sellVToken.burnFor(UniswapV2Library.pairFor(_info.factory, _info.buyPath[0], _info.buyPath[1]));\\n\\n            uint balanceBefore = IERC20(_info.buyPath[_info.buyPath.length - 1]).balanceOf(address(_details.buyVToken));\\n            _swapSupportingFeeOnTransferTokens(_info.buyPath, _info.factory, address(_details.buyVToken));\\n            require(\\n                IERC20(_info.buyPath[_info.buyPath.length - 1]).balanceOf(address(_details.buyVToken)) -\\n                    balanceBefore >=\\n                    _minSwapOutputAmount,\\n                \\\"Orderer: SLIPPAGE\\\"\\n            );\\n\\n            uint248 _buyShares = _toUint248(Math.min(_details.buyVToken.mintFor(_info.account), orderBuyAsset.shares));\\n\\n            orderSellAsset.shares -= _sellShares;\\n            orderBuyAsset.shares -= _buyShares;\\n\\n            emit CompleteOrder(lastOrderId, _details.sellAsset, _sellShares, _details.buyAsset, _buyShares);\\n        }\\n    }\\n\\n    /// @inheritdoc IOrderer\\n    function orderOf(address _account) external view override returns (Order memory order) {\\n        OrderDetails storage _order = orderDetailsOf[lastOrderIdOf[_account]];\\n        order = Order({ creationTimestamp: _order.creationTimestamp, assets: new OrderAsset[](_order.assets.length) });\\n\\n        uint assetsCount = _order.assets.length;\\n        for (uint i; i < assetsCount; ) {\\n            address asset = _order.assets[i];\\n            order.assets[i] = OrderAsset({\\n                asset: asset,\\n                side: _order.assetDetails[asset].side,\\n                shares: _order.assetDetails[asset].shares\\n            });\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IOrderer).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @notice Executes internal swap within single vault\\n    function _internalWithinVaultSwap(InternalSwap calldata _info, SwapDetails memory _details) internal {\\n        (\\n            uint lastSellOrderId,\\n            AssetDetails storage sellOrderSellAsset,\\n            AssetDetails storage sellOrderBuyAsset\\n        ) = _validatedOrder(_info.sellAccount, _details.sellAsset, _details.buyAsset);\\n        (\\n            uint lastBuyOrderId,\\n            AssetDetails storage buyOrderSellAsset,\\n            AssetDetails storage buyOrderBuyAsset\\n        ) = _validatedOrder(_info.buyAccount, _details.buyAsset, _details.sellAsset);\\n\\n        uint248 sellShares;\\n        uint248 buyShares;\\n        {\\n            uint _sellShares = Math.min(\\n                Math.min(_info.maxSellShares, sellOrderSellAsset.shares),\\n                buyOrderBuyAsset.shares\\n            );\\n            uint _buyShares = Math.min(sellOrderBuyAsset.shares, buyOrderSellAsset.shares);\\n            (sellShares, buyShares) = _calculateInternalSwapShares(\\n                _info.sellAccount,\\n                _info.buyAccount,\\n                _details,\\n                _sellShares,\\n                _buyShares\\n            );\\n        }\\n\\n        if (sellShares != 0 && buyShares != 0) {\\n            _details.sellVToken.transferFrom(_info.sellAccount, _info.buyAccount, sellShares);\\n            _details.buyVToken.transferFrom(_info.buyAccount, _info.sellAccount, buyShares);\\n\\n            sellOrderSellAsset.shares -= sellShares;\\n            sellOrderBuyAsset.shares -= buyShares;\\n            buyOrderSellAsset.shares -= buyShares;\\n            buyOrderBuyAsset.shares -= sellShares;\\n\\n            emit CompleteOrder(lastSellOrderId, _details.sellAsset, sellShares, _details.buyAsset, buyShares);\\n            emit CompleteOrder(lastBuyOrderId, _details.buyAsset, buyShares, _details.sellAsset, sellShares);\\n        }\\n    }\\n\\n    /// @notice Executes internal swap between different vaults\\n    function _internalBetweenVaultsSwap(InternalSwapVaultsInfo memory _info) internal {\\n        (\\n            uint lastSellOrderId,\\n            AssetDetails storage sellOrderSellAsset,\\n            AssetDetails storage sellOrderBuyAsset\\n        ) = _validatedOrder(_info.sellAccount, _info.details.sellAsset, _info.details.buyAsset);\\n        (\\n            uint lastBuyOrderId,\\n            AssetDetails storage buyOrderSellAsset,\\n            AssetDetails storage buyOrderBuyAsset\\n        ) = _validatedOrder(_info.buyAccount, _info.details.buyAsset, _info.details.sellAsset);\\n\\n        uint248 sellSharesSellAccount;\\n        uint248 sellSharesBuyAccount;\\n        {\\n            uint _sellSharesSellAccount = _scaleShares(\\n                Math.min(_info.maxSellShares, sellOrderSellAsset.shares),\\n                buyOrderBuyAsset.shares,\\n                _info.sellAccount,\\n                _info.details.sellVToken,\\n                _info.buyVTokenBuyAccount\\n            );\\n            uint _buySharesBuyAccount = _scaleShares(\\n                buyOrderSellAsset.shares,\\n                sellOrderBuyAsset.shares,\\n                _info.buyAccount,\\n                _info.details.buyVToken,\\n                _info.buyVTokenSellAccount\\n            );\\n\\n            (sellSharesSellAccount, sellSharesBuyAccount) = _calculateInternalSwapShares(\\n                _info.sellAccount,\\n                _info.buyAccount,\\n                _info.details,\\n                _sellSharesSellAccount,\\n                _buySharesBuyAccount\\n            );\\n        }\\n\\n        _info.details.sellVToken.transferFrom(\\n            _info.sellAccount,\\n            address(_info.details.sellVToken),\\n            sellSharesSellAccount\\n        );\\n        _info.details.sellVToken.burnFor(address(_info.buyVTokenBuyAccount));\\n        uint248 buySharesBuyAccount = _toUint248(_info.buyVTokenBuyAccount.mintFor(_info.buyAccount));\\n\\n        _info.details.buyVToken.transferFrom(_info.buyAccount, address(_info.details.buyVToken), sellSharesBuyAccount);\\n        _info.details.buyVToken.burnFor(address(_info.buyVTokenSellAccount));\\n        uint248 buySharesSellAccount = _toUint248(_info.buyVTokenSellAccount.mintFor(_info.sellAccount));\\n\\n        sellOrderSellAsset.shares -= sellSharesSellAccount;\\n        sellOrderBuyAsset.shares -= buySharesSellAccount;\\n        buyOrderSellAsset.shares -= sellSharesBuyAccount;\\n        buyOrderBuyAsset.shares -= buySharesBuyAccount;\\n\\n        emit CompleteOrder(\\n            lastSellOrderId,\\n            _info.details.sellAsset,\\n            sellSharesSellAccount,\\n            _info.details.buyAsset,\\n            buySharesSellAccount\\n        );\\n        emit CompleteOrder(\\n            lastBuyOrderId,\\n            _info.details.buyAsset,\\n            sellSharesBuyAccount,\\n            _info.details.sellAsset,\\n            buySharesBuyAccount\\n        );\\n    }\\n\\n    /// @notice Returns validated order's info\\n    /// @param _index Index address\\n    /// @param _sellAsset Sell asset address\\n    /// @param _buyAsset Buy asset address\\n    /// @return lastOrderId Id of last order\\n    /// @return orderSellAsset Order's details for sell asset\\n    /// @return orderBuyAsset Order's details for buy asset\\n    function _validatedOrder(\\n        address _index,\\n        address _sellAsset,\\n        address _buyAsset\\n    )\\n        internal\\n        view\\n        returns (\\n            uint lastOrderId,\\n            AssetDetails storage orderSellAsset,\\n            AssetDetails storage orderBuyAsset\\n        )\\n    {\\n        lastOrderId = lastOrderIdOf[_index];\\n        OrderDetails storage order = orderDetailsOf[lastOrderId];\\n\\n        orderSellAsset = order.assetDetails[_sellAsset];\\n        orderBuyAsset = order.assetDetails[_buyAsset];\\n\\n        require(order.creationTimestamp + orderLifetime > block.timestamp, \\\"Orderer: EXPIRED\\\");\\n        require(orderSellAsset.side == OrderSide.Sell && orderBuyAsset.side == OrderSide.Buy, \\\"Orderer: SIDE\\\");\\n    }\\n\\n    /// @inheritdoc UUPSUpgradeable\\n    function _authorizeUpgrade(address _newImpl) internal view override onlyRole(ORDERING_MANAGER_ROLE) {\\n        require(_newImpl.supportsInterface(type(IOrderer).interfaceId), \\\"Orderer: INTERFACE\\\");\\n    }\\n\\n    /// @notice Scales down shares\\n    function _scaleShares(\\n        uint _sellShares,\\n        uint _buyShares,\\n        address _sellAccount,\\n        IvToken _sellVToken,\\n        IvToken _buyVToken\\n    ) internal view returns (uint) {\\n        uint sharesInAsset = _sellVToken.assetDataOf(_sellAccount, _sellShares).amountInAsset;\\n        uint mintableShares = _buyVToken.mintableShares(sharesInAsset);\\n        return Math.min(_sellShares, (_sellShares * _buyShares) / mintableShares);\\n    }\\n\\n    /// @notice Calculates internal swap shares (buy and sell) for the given swap details\\n    function _calculateInternalSwapShares(\\n        address sellAccount,\\n        address buyAccount,\\n        SwapDetails memory _details,\\n        uint _sellOrderShares,\\n        uint _buyOrderShares\\n    ) internal returns (uint248 _sellShares, uint248 _buyShares) {\\n        uint sellAssetPerBaseInUQ = _details.priceOracle.refreshedAssetPerBaseInUQ(_details.sellAsset);\\n        uint buyAssetPerBaseInUQ = _details.priceOracle.refreshedAssetPerBaseInUQ(_details.buyAsset);\\n        {\\n            uint buyAmountInBuyAsset = _details.buyVToken.assetDataOf(buyAccount, _buyOrderShares).amountInAsset;\\n            uint buyAmountInSellAsset = buyAmountInBuyAsset.mulDiv(sellAssetPerBaseInUQ, buyAssetPerBaseInUQ);\\n            _sellOrderShares = Math.min(_sellOrderShares, _details.sellVToken.mintableShares(buyAmountInSellAsset));\\n        }\\n        {\\n            uint sellAmountInSellAsset = _details.sellVToken.assetDataOf(sellAccount, _sellOrderShares).amountInAsset;\\n            uint sellAmountInBuyAsset = sellAmountInSellAsset.mulDiv(buyAssetPerBaseInUQ, sellAssetPerBaseInUQ);\\n            _buyOrderShares = Math.min(_buyOrderShares, _details.buyVToken.mintableShares(sellAmountInBuyAsset));\\n        }\\n        _sellShares = _toUint248(_sellOrderShares);\\n        _buyShares = _toUint248(_buyOrderShares);\\n    }\\n\\n    /// @notice Calculates external swap shares for the given swap details\\n    function _calculateExternalSwapShares(\\n        ExternalSwap calldata _swapInfo,\\n        SwapDetails memory _details,\\n        uint _sellOrderShares,\\n        uint _buyOrderShares\\n    ) internal returns (uint248 sellShares, uint minSwapOutputAmount) {\\n        minSwapOutputAmount = _swapInfo.minSwapOutputAmount;\\n        uint buyAmountInBuyAsset = _details.buyVToken.assetDataOf(_swapInfo.account, _buyOrderShares).amountInAsset;\\n        {\\n            uint buyAmountInSellAsset = buyAmountInBuyAsset.mulDiv(\\n                _details.priceOracle.refreshedAssetPerBaseInUQ(_details.sellAsset),\\n                _details.priceOracle.refreshedAssetPerBaseInUQ(_details.buyAsset)\\n            );\\n            uint mintableShares = _details.sellVToken.mintableShares(buyAmountInSellAsset);\\n            if (_sellOrderShares > mintableShares) {\\n                minSwapOutputAmount = (minSwapOutputAmount * mintableShares) / _sellOrderShares;\\n                _sellOrderShares = mintableShares;\\n            }\\n        }\\n\\n        IvToken.AssetData memory assetData = _details.sellVToken.assetDataOf(_swapInfo.account, _sellOrderShares);\\n        {\\n            uint priceImpactInBP = UniswapV2PriceImpactLibrary.calculatePriceImpactInBP(\\n                _swapInfo.factory,\\n                assetData.amountInAsset,\\n                _swapInfo.buyPath\\n            );\\n            uint changeInBP = (Math.max(maxAllowedPriceImpactInBP, priceImpactInBP) * BP.DECIMAL_FACTOR) /\\n                maxAllowedPriceImpactInBP;\\n            if (changeInBP > BP.DECIMAL_FACTOR) {\\n                _sellOrderShares = (assetData.maxShares * BP.DECIMAL_FACTOR) / changeInBP;\\n                minSwapOutputAmount = (minSwapOutputAmount * BP.DECIMAL_FACTOR) / changeInBP;\\n                assetData = _details.sellVToken.assetDataOf(_swapInfo.account, _sellOrderShares);\\n            }\\n        }\\n        {\\n            uint[] memory amounts = UniswapV2Library.getAmountsOut(\\n                _swapInfo.factory,\\n                assetData.amountInAsset,\\n                _swapInfo.buyPath\\n            );\\n            if (amounts[amounts.length - 1] > buyAmountInBuyAsset) {\\n                amounts = UniswapV2Library.getAmountsIn(_swapInfo.factory, buyAmountInBuyAsset, _swapInfo.buyPath);\\n                _sellOrderShares = _details.sellVToken.mintableShares(amounts[0]);\\n                minSwapOutputAmount = (minSwapOutputAmount * amounts[0]) / assetData.amountInAsset;\\n            }\\n        }\\n\\n        sellShares = _toUint248(_sellOrderShares);\\n    }\\n\\n    /// @notice Swaps tokens along the list pairs determined by the path\\n    /// @param _path An array of token addresses (path.length must be >= 2)\\n    /// @param _factory Uniswap factory address\\n    /// @param _to Output tokens receiver account\\n    function _swapSupportingFeeOnTransferTokens(\\n        address[] memory _path,\\n        address _factory,\\n        address _to\\n    ) internal {\\n        for (uint i; i < _path.length - 1; ) {\\n            (address input, address output) = (_path[i], _path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(_factory, input, output));\\n            uint amountInput;\\n            uint amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint reserve0, uint reserve1, ) = pair.getReserves();\\n                (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n                amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\\n                amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n            address to = i < _path.length - 2 ? UniswapV2Library.pairFor(_factory, output, _path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns swap details for the provided buy path\\n    /// @param _sellVTokenFactory vTokenFactory address of sell account\\n    /// @param _buyVTokenFactory vTokenFactory address of buy account\\n    /// @param _buyPath Buy path, where the first element is input token and the last element is output token\\n    /// @return Swap details\\n    function _swapDetails(\\n        address _sellVTokenFactory,\\n        address _buyVTokenFactory,\\n        address[] calldata _buyPath\\n    ) internal view returns (SwapDetails memory) {\\n        (address sellAsset, address buyAsset) = (_buyPath[0], _buyPath[_buyPath.length - 1]);\\n        require(sellAsset != address(0) && buyAsset != address(0), \\\"Orderer: ZERO\\\");\\n        require(sellAsset != buyAsset, \\\"Orderer: INVALID\\\");\\n\\n        address buyVToken = IvTokenFactory(\\n            (_sellVTokenFactory == _buyVTokenFactory || _buyVTokenFactory == address(0))\\n                ? _sellVTokenFactory\\n                : _buyVTokenFactory\\n        ).vTokenOf(buyAsset);\\n\\n        return\\n            SwapDetails({\\n                sellAsset: sellAsset,\\n                buyAsset: buyAsset,\\n                sellVToken: IvToken(IvTokenFactory(_sellVTokenFactory).vTokenOf(sellAsset)),\\n                buyVToken: IvToken(buyVToken),\\n                priceOracle: IPhuturePriceOracle(IIndexRegistry(registry).priceOracle())\\n            });\\n    }\\n\\n    /// @notice Casts uint to uint248\\n    /// @param _value Value to convert\\n    /// @return Casted to uint248 value\\n    function _toUint248(uint _value) internal pure returns (uint248) {\\n        require(_value <= type(uint248).max, \\\"Orderer: OVERFLOW\\\");\\n        return uint248(_value);\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165Upgradeable).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\n/// @title Base point library\\n/// @notice Contains constant used to prevent underflow of math operations\\nlibrary BP {\\n    /// @notice Base point number\\n    /// @dev Used to prevent underflow of math operations\\n    uint16 constant DECIMAL_FACTOR = 10_000;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (~denominator + 1) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UniswapV2PriceImpactLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./BP.sol\\\";\\nimport \\\"./UniswapV2Library.sol\\\";\\n\\n/// @title Uniswap V2 price impact library\\n/// @notice Provides list of helper functions to calculate price impact\\nlibrary UniswapV2PriceImpactLibrary {\\n    /// @notice Returns difference between prices before and after swap\\n    /// @param _factory Uniswap V2 Factory\\n    /// @param _input Input amount\\n    /// @param _path List of tokens, that will be used to compose pairs for chained getAmountOut calculations\\n    /// @return Difference between prices before and after swap\\n    function calculatePriceImpactInBP(\\n        address _factory,\\n        uint _input,\\n        address[] calldata _path\\n    ) internal view returns (uint) {\\n        require(_path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n\\n        uint amountOutput = _input;\\n        uint quotedOutput = _input;\\n\\n        uint pLength = _path.length - 1;\\n        for (uint i; i < pLength; ) {\\n            (uint reserveIn, uint reserveOut) = UniswapV2Library.getReserves(_factory, _path[i], _path[i + 1]);\\n            amountOutput = UniswapV2Library.getAmountOut(amountOutput, reserveIn, reserveOut);\\n            quotedOutput = (quotedOutput * reserveOut) / reserveIn;\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        return ((quotedOutput - amountOutput) * BP.DECIMAL_FACTOR) / quotedOutput;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IvToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Vault token interface\\n/// @notice Contains logic for index's asset management\\ninterface IvToken {\\n    struct AssetData {\\n        uint maxShares;\\n        uint amountInAsset;\\n    }\\n\\n    event UpdateDeposit(address indexed account, uint depositedAmount);\\n    event SetVaultController(address vaultController);\\n    event VTokenTransfer(address indexed from, address indexed to, uint amount);\\n\\n    /// @notice Initializes vToken with the given parameters\\n    /// @param _asset Asset that will be stored\\n    /// @param _registry Index registry address\\n    function initialize(address _asset, address _registry) external;\\n\\n    /// @notice Sets vault controller for the vault\\n    /// @param _vaultController Vault controller to set\\n    function setController(address _vaultController) external;\\n\\n    /// @notice Updates reserve to expected deposit target\\n    function deposit() external;\\n\\n    /// @notice Withdraws all deposited amount\\n    function withdraw() external;\\n\\n    /// @notice Transfers shares between given accounts\\n    /// @param _from Account to transfer shares from\\n    /// @param _to Account to transfer shares to\\n    /// @param _shares Amount of shares to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint _shares\\n    ) external;\\n\\n    /// @notice Transfers asset to the given recipient\\n    /// @dev Method is restricted to orderer\\n    /// @param _recipient Recipient address\\n    /// @param _amount Amount to transfer\\n    function transferAsset(address _recipient, uint _amount) external;\\n\\n    /// @notice Mints shares for the current sender\\n    /// @return shares Amount of minted shares\\n    function mint() external returns (uint shares);\\n\\n    /// @notice Burns shares for the given recipient and returns assets to the given recipient\\n    /// @param _recipient Recipient to send assets to\\n    /// @return amount Amount of sent assets\\n    function burn(address _recipient) external returns (uint amount);\\n\\n    /// @notice Transfers shares from the sender to the given recipient\\n    /// @param _recipient Account to transfer shares to\\n    /// @param _amount Amount of shares to transfer\\n    function transfer(address _recipient, uint _amount) external;\\n\\n    /// @notice Manually synchronizes shares balances\\n    function sync() external;\\n\\n    /// @notice Mints shares for the given recipient\\n    /// @param _recipient Recipient to mint shares for\\n    /// @return Returns minted shares amount\\n    function mintFor(address _recipient) external returns (uint);\\n\\n    /// @notice Burns shares and sends assets to the given recipient\\n    /// @param _recipient Recipient to send assets to\\n    /// @return Returns amount of sent assets\\n    function burnFor(address _recipient) external returns (uint);\\n\\n    /// @notice Virtual supply amount: current balance + expected to be withdrawn using vault controller\\n    /// @return Returns virtual supply amount\\n    function virtualTotalAssetSupply() external view returns (uint);\\n\\n    /// @notice Total supply amount: current balance + deposited using vault controller\\n    /// @return Returns total supply amount\\n    function totalAssetSupply() external view returns (uint);\\n\\n    /// @notice Amount deposited using vault controller\\n    /// @return Returns amount deposited using vault controller\\n    function deposited() external view returns (uint);\\n\\n    /// @notice Returns mintable amount of shares for given asset's amount\\n    /// @param _amount Amount of assets to mint shares for\\n    /// @return Returns amount of shares available for minting\\n    function mintableShares(uint _amount) external view returns (uint);\\n\\n    /// @notice Returns amount of assets for the given account with the given shares amount\\n    /// @return Amount of assets for the given account with the given shares amount\\n    function assetDataOf(address _account, uint _shares) external view returns (AssetData memory);\\n\\n    /// @notice Asset balance of the given address\\n    /// @param _account Address to check balance of\\n    /// @return Returns asset balance of the given address\\n    function assetBalanceOf(address _account) external view returns (uint);\\n\\n    /// @notice Last asset balance for the given address\\n    /// @param _account Address to check balance of\\n    /// @return Returns last asset balance for the given address\\n    function lastAssetBalanceOf(address _account) external view returns (uint);\\n\\n    /// @notice Last asset balance\\n    /// @return Returns last asset balance\\n    function lastAssetBalance() external view returns (uint);\\n\\n    /// @notice Total shares supply\\n    /// @return Returns total shares supply\\n    function totalSupply() external view returns (uint);\\n\\n    /// @notice Shares balance of the given address\\n    /// @param _account Address to check balance of\\n    /// @return Returns shares balance of the given address\\n    function balanceOf(address _account) external view returns (uint);\\n\\n    /// @notice Returns the change in shares for a given amount of an asset\\n    /// @param _account Account to calculate shares for\\n    /// @param _amountInAsset Amount of asset to calculate shares\\n    /// @return newShares New shares value\\n    /// @return oldShares Old shares value\\n    function shareChange(address _account, uint _amountInAsset) external view returns (uint newShares, uint oldShares);\\n\\n    /// @notice Vault controller address\\n    /// @return Returns vault controller address\\n    function vaultController() external view returns (address);\\n\\n    /// @notice Stored asset address\\n    /// @return Returns stored asset address\\n    function asset() external view returns (address);\\n\\n    /// @notice Index registry address\\n    /// @return Returns index registry address\\n    function registry() external view returns (address);\\n\\n    /// @notice Percentage deposited using vault controller\\n    /// @return Returns percentage deposited using vault controller\\n    function currentDepositedPercentageInBP() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IIndexLayout.sol\\\";\\nimport \\\"./IAnatomyUpdater.sol\\\";\\n\\n/// @title Index interface\\n/// @notice Interface containing basic logic for indexes: mint, burn, anatomy info\\ninterface IIndex is IIndexLayout, IAnatomyUpdater {\\n    /// @notice Index minting\\n    /// @param _recipient Recipient address\\n    function mint(address _recipient) external;\\n\\n    /// @notice Index burning\\n    /// @param _recipient Recipient address\\n    function burn(address _recipient) external;\\n\\n    /// @notice Returns index assets weights information\\n    /// @return _assets Assets list\\n    /// @return _weights List of assets corresponding weights\\n    function anatomy() external view returns (address[] memory _assets, uint8[] memory _weights);\\n\\n    /// @notice Returns inactive assets\\n    /// @return Assets list\\n    function inactiveAnatomy() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOrderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IvToken.sol\\\";\\n\\n/// @title Orderer interface\\n/// @notice Describes methods for reweigh execution, order creation and execution\\ninterface IOrderer {\\n    struct Order {\\n        uint creationTimestamp;\\n        OrderAsset[] assets;\\n    }\\n\\n    struct OrderAsset {\\n        address asset;\\n        OrderSide side;\\n        uint shares;\\n    }\\n\\n    struct InternalSwap {\\n        address sellAccount;\\n        address buyAccount;\\n        uint maxSellShares;\\n        address[] buyPath;\\n    }\\n\\n    struct ExternalSwap {\\n        address factory;\\n        address account;\\n        uint maxSellShares;\\n        uint minSwapOutputAmount;\\n        address[] buyPath;\\n    }\\n\\n    enum OrderSide {\\n        Sell,\\n        Buy\\n    }\\n\\n    event PlaceOrder(address creator, uint id);\\n    event UpdateOrder(uint id, address asset, uint share, bool isSellSide);\\n    event CompleteOrder(uint id, address sellAsset, uint soldShares, address buyAsset, uint boughtShares);\\n\\n    /// @notice Initializes orderer with the given params\\n    /// @param _registry Index registry address\\n    /// @param _orderLifetime Order lifetime in which it stays valid\\n    /// @param _maxAllowedPriceImpactInBP Max allowed exchange price impact\\n    function initialize(\\n        address _registry,\\n        uint64 _orderLifetime,\\n        uint16 _maxAllowedPriceImpactInBP\\n    ) external;\\n\\n    /// @notice Sets max allowed exchange price impact\\n    /// @param _maxAllowedPriceImpactInBP Max allowed exchange price impact\\n    function setMaxAllowedPriceImpactInBP(uint16 _maxAllowedPriceImpactInBP) external;\\n\\n    /// @notice Sets order lifetime in which it stays valid\\n    /// @param _orderLifetime Order lifetime in which it stays valid\\n    function setOrderLifetime(uint64 _orderLifetime) external;\\n\\n    /// @notice Places order to orderer queue and returns order id\\n    /// @return Order id of the placed order\\n    function placeOrder() external returns (uint);\\n\\n    /// @notice Fulfills specified order with order details\\n    /// @param _orderId Order id to fulfill\\n    /// @param _asset Asset address to be exchanged\\n    /// @param _shares Amount of asset to be exchanged\\n    /// @param _side Order side: buy or sell\\n    function addOrderDetails(\\n        uint _orderId,\\n        address _asset,\\n        uint _shares,\\n        OrderSide _side\\n    ) external;\\n\\n    /// @notice Updates asset amount for the latest order placed by the sender\\n    /// @param _asset Asset to change amount for\\n    /// @param _newTotalSupply New amount value\\n    /// @param _oldTotalSupply Old amount value\\n    function reduceOrderAsset(\\n        address _asset,\\n        uint _newTotalSupply,\\n        uint _oldTotalSupply\\n    ) external;\\n\\n    /// @notice Reweighs the given index\\n    /// @param _index Index address to call reweight for\\n    function reweight(address _index) external;\\n\\n    /// @notice Swap shares between given indexes\\n    /// @param _info Swap info objects with exchange details\\n    function internalSwap(InternalSwap calldata _info) external;\\n\\n    /// @notice Swap shares using DEX\\n    /// @param _info Swap info objects with exchange details\\n    function externalSwap(ExternalSwap calldata _info) external;\\n\\n    /// @notice Max allowed exchange price impact\\n    /// @return Returns max allowed exchange price impact\\n    function maxAllowedPriceImpactInBP() external view returns (uint16);\\n\\n    /// @notice Order lifetime in which it stays valid\\n    /// @return Returns order lifetime in which it stays valid\\n    function orderLifetime() external view returns (uint64);\\n\\n    /// @notice Returns last order of the given account\\n    /// @param _account Account to get last order for\\n    /// @return order Last order of the given account\\n    function orderOf(address _account) external view returns (Order memory order);\\n\\n    /// @notice Returns last order id of the given account\\n    /// @param _account Account to get last order for\\n    /// @return Last order id of the given account\\n    function lastOrderIdOf(address _account) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IvTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title vToken factory interface\\n/// @notice Contains vToken creation logic\\ninterface IvTokenFactory {\\n    event VTokenCreated(address vToken, address asset);\\n\\n    /// @notice Initialize vToken factory with the given params\\n    /// @param _registry Index registry address\\n    /// @param _vTokenImpl Address of vToken implementation\\n    function initialize(address _registry, address _vTokenImpl) external;\\n\\n    /// @notice Upgrades beacon implementation\\n    /// @param _vTokenImpl Address of vToken implementation\\n    function upgradeBeaconTo(address _vTokenImpl) external;\\n\\n    /// @notice Creates vToken for the given asset\\n    /// @param _asset Asset to create vToken for\\n    function createVToken(address _asset) external;\\n\\n    /// @notice Creates and returns or returns address of previously created vToken for the given asset\\n    /// @param _asset Asset to create or return vToken for\\n    function createdVTokenOf(address _asset) external returns (address);\\n\\n    /// @notice Returns beacon address\\n    /// @return Beacon address\\n    function beacon() external view returns (address);\\n\\n    /// @notice Returns vToken for the given asset\\n    /// @param _asset Asset to retrieve vToken for\\n    /// @return vToken for the given asset\\n    function vTokenOf(address _asset) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IIndexFactory.sol\\\";\\n\\n/// @title Index registry interface\\n/// @notice Contains core components, addresses and asset market capitalizations\\ninterface IIndexRegistry {\\n    event SetIndexLogic(address indexed account, address indexLogic);\\n    event SetMaxComponents(address indexed account, uint maxComponents);\\n    event UpdateAsset(address indexed asset, uint marketCap);\\n    event SetOrderer(address indexed account, address orderer);\\n    event SetFeePool(address indexed account, address feePool);\\n    event SetPriceOracle(address indexed account, address priceOracle);\\n\\n    /// @notice Initializes IndexRegistry with the given params\\n    /// @param _indexLogic Index logic address\\n    /// @param _maxComponents Maximum assets for an index\\n    function initialize(address _indexLogic, uint _maxComponents) external;\\n\\n    /// @notice Sets maximum assets for an index\\n    /// @param _maxComponents Maximum assets for an index\\n    function setMaxComponents(uint _maxComponents) external;\\n\\n    /// @notice Index logic address\\n    /// @return Returns index logic address\\n    function indexLogic() external returns (address);\\n\\n    /// @notice Sets index logic address\\n    /// @param _indexLogic Index logic address\\n    function setIndexLogic(address _indexLogic) external;\\n\\n    /// @notice Sets adminRole as role's admin role.\\n    /// @param _role Role\\n    /// @param _adminRole AdminRole of given role\\n    function setRoleAdmin(bytes32 _role, bytes32 _adminRole) external;\\n\\n    /// @notice Registers new index\\n    /// @param _index Index address\\n    /// @param _nameDetails Name details (name and symbol) for provided index\\n    function registerIndex(address _index, IIndexFactory.NameDetails calldata _nameDetails) external;\\n\\n    /// @notice Registers asset in the system, updates it's market capitalization and assigns required roles\\n    /// @param _asset Asset to register\\n    /// @param _marketCap It's current market capitalization\\n    function addAsset(address _asset, uint _marketCap) external;\\n\\n    /// @notice Removes assets from the system\\n    /// @param _asset Asset to remove\\n    function removeAsset(address _asset) external;\\n\\n    /// @notice Updates market capitalization for the given asset\\n    /// @param _asset Asset address to update market capitalization for\\n    /// @param _marketCap Market capitalization value\\n    function updateAssetMarketCap(address _asset, uint _marketCap) external;\\n\\n    /// @notice Sets price oracle address\\n    /// @param _priceOracle Price oracle address\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    /// @notice Sets orderer address\\n    /// @param _orderer Orderer address\\n    function setOrderer(address _orderer) external;\\n\\n    /// @notice Sets fee pool address\\n    /// @param _feePool Fee pool address\\n    function setFeePool(address _feePool) external;\\n\\n    /// @notice Maximum assets for an index\\n    /// @return Returns maximum assets for an index\\n    function maxComponents() external view returns (uint);\\n\\n    /// @notice Market capitalization of provided asset\\n    /// @return _asset Returns market capitalization of provided asset\\n    function marketCapOf(address _asset) external view returns (uint);\\n\\n    /// @notice Returns total market capitalization of the given assets\\n    /// @param _assets Assets array to calculate market capitalization of\\n    /// @return _marketCaps Corresponding capitalizations of the given asset\\n    /// @return _totalMarketCap Total market capitalization of the given assets\\n    function marketCapsOf(address[] calldata _assets)\\n        external\\n        view\\n        returns (uint[] memory _marketCaps, uint _totalMarketCap);\\n\\n    /// @notice Total market capitalization of all registered assets\\n    /// @return Returns total market capitalization of all registered assets\\n    function totalMarketCap() external view returns (uint);\\n\\n    /// @notice Price oracle address\\n    /// @return Returns price oracle address\\n    function priceOracle() external view returns (address);\\n\\n    /// @notice Orderer address\\n    /// @return Returns orderer address\\n    function orderer() external view returns (address);\\n\\n    /// @notice Fee pool address\\n    /// @return Returns fee pool address\\n    function feePool() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReweightableIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Rewightable index interface\\n/// @notice Contains reweighting logic\\ninterface IReweightableIndex {\\n    /// @notice Call index reweight process\\n    function reweight() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPhuturePriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\n\\n/// @title Phuture price oracle interface\\n/// @notice Aggregates all price oracles and works with them through IPriceOracle interface\\ninterface IPhuturePriceOracle is IPriceOracle {\\n    /// @notice Initializes price oracle\\n    /// @param _registry Index registry address\\n    /// @param _base Base asset\\n    function initialize(address _registry, address _base) external;\\n\\n    /// @notice Assigns given oracle to specified asset. Then oracle will be used to manage asset price\\n    /// @param _asset Asset to register\\n    /// @param _oracle Oracle to assign\\n    function setOracleOf(address _asset, address _oracle) external;\\n\\n    /// @notice Removes oracle of specified asset\\n    /// @param _asset Asset to remove oracle from\\n    function removeOracleOf(address _asset) external;\\n\\n    /// @notice Converts to index amount\\n    /// @param _baseAmount Amount in base\\n    /// @param _indexDecimals Index's decimals\\n    /// @return Asset per base in UQ with index decimals\\n    function convertToIndex(uint _baseAmount, uint8 _indexDecimals) external view returns (uint);\\n\\n    /// @notice Checks if the given asset has oracle assigned\\n    /// @param _asset Asset to check\\n    /// @return Returns boolean flag defining if the given asset has oracle assigned\\n    function containsOracleOf(address _asset) external view returns (bool);\\n\\n    /// @notice Price oracle assigned to the given `_asset`\\n    /// @param _asset Asset to obtain price oracle for\\n    /// @return Returns price oracle assigned to the `_asset`\\n    function priceOracleOf(address _asset) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UniswapV2Library.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\n/// @title Uniswap V2 library\\n/// @notice Provides list of helper functions to calculate pair amounts and reserves\\nlibrary UniswapV2Library {\\n    /// @notice Returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    /// @param tokenA First pair token\\n    /// @param tokenB Second pair token\\n    /// @return token0 One of pair tokens that goes first after sorting\\n    /// @return token1 One of pair token that goes second after sorting\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    /// @notice Returns address of pair for given tokens\\n    /// @param factory Uniswap V2 factory\\n    /// @param tokenA First pair token\\n    /// @param tokenB Second pair token\\n    /// @return pair Returns pair address of the provided tokens\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        pair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\\n    }\\n\\n    /// @notice Fetches and sorts the reserves for a pair\\n    /// @param factory Uniswap V2 factory\\n    /// @param tokenA First pair token\\n    /// @param tokenB Second pair token\\n    /// @return reserveA Reserves of the token that goes first after sorting\\n    /// @return reserveB Reserves of the token that goes second after sorting\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    /// @notice Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    /// @param amountA Amount of token A\\n    /// @param reserveA Token A reserves\\n    /// @param reserveB Token B reserves\\n    /// @return amountB Equivalent amount of token B\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) internal pure returns (uint amountB) {\\n        require(amountA != 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA != 0 && reserveB != 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    /// @notice Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    /// @param amountIn Input token amount\\n    /// @param reserveIn Input token reserves\\n    /// @param reserveOut Output token reserves\\n    /// @return amountOut Output token amount\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) internal pure returns (uint amountOut) {\\n        require(amountIn != 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn != 0 && reserveOut != 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint amountInWithFee = amountIn * 997;\\n        uint numerator = amountInWithFee * reserveOut;\\n        uint denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /// @notice Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    /// @param amountOut Output token amount\\n    /// @param reserveIn Input token reserves\\n    /// @param reserveOut Output token reserves\\n    /// @return amountIn Input token amount\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) internal pure returns (uint amountIn) {\\n        require(amountOut != 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn != 0 && reserveOut != 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint numerator = reserveIn * amountOut * 1000;\\n        uint denominator = (reserveOut - amountOut) * 997;\\n        amountIn = numerator / denominator + 1;\\n    }\\n\\n    /// @notice Performs chained getAmountOut calculations on any number of pairs\\n    /// @param factory Uniswap V2 factory\\n    /// @param amountIn Input amount for the first token\\n    /// @param path List of tokens, that will be used to compose pairs for chained getAmountOut calculations\\n    /// @return amounts Array of output amounts\\n    function getAmountsOut(\\n        address factory,\\n        uint amountIn,\\n        address[] memory path\\n    ) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; ) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Performs chained getAmountIn calculations on any number of pairs\\n    /// @param factory Uniswap V2 factory\\n    /// @param amountOut Output amount for the first token\\n    /// @param path List of tokens, that will be used to compose pairs for chained getAmountIn calculations\\n    /// @return amounts Array of input amounts\\n    function getAmountsIn(\\n        address factory,\\n        uint amountOut,\\n        address[] memory path\\n    ) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexLayout.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Index layout interface\\n/// @notice Contains storage layout of index\\ninterface IIndexLayout {\\n    /// @notice Index factory address\\n    /// @return Returns index factory address\\n    function factory() external view returns (address);\\n\\n    /// @notice vTokenFactory address\\n    /// @return Returns vTokenFactory address\\n    function vTokenFactory() external view returns (address);\\n\\n    /// @notice Registry address\\n    /// @return Returns registry address\\n    function registry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAnatomyUpdater.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Anatomy Updater interface\\n/// @notice Contains event for aatomy update\\ninterface IAnatomyUpdater {\\n    event UpdateAnatomy(address asset, uint8 weight);\\n    event AssetRemoved(address asset);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Index factory interface\\n/// @notice Contains logic for initial fee management for indexes which will be created by this factory\\ninterface IIndexFactory {\\n    struct NameDetails {\\n        string name;\\n        string symbol;\\n    }\\n\\n    event SetVTokenFactory(address vTokenFactory);\\n    event SetDefaultMintingFeeInBP(address indexed account, uint16 mintingFeeInBP);\\n    event SetDefaultBurningFeeInBP(address indexed account, uint16 burningFeeInBP);\\n    event SetDefaultAUMScaledPerSecondsRate(address indexed account, uint AUMScaledPerSecondsRate);\\n\\n    /// @notice Sets default index minting fee in base point (BP) format\\n    /// @dev Will be set in FeePool on index creation\\n    /// @param _mintingFeeInBP New minting fee value\\n    function setDefaultMintingFeeInBP(uint16 _mintingFeeInBP) external;\\n\\n    /// @notice Sets default index burning fee in base point (BP) format\\n    /// @dev Will be set in FeePool on index creation\\n    /// @param _burningFeeInBP New burning fee value\\n    function setDefaultBurningFeeInBP(uint16 _burningFeeInBP) external;\\n\\n    /// @notice Sets reweighting logic address\\n    /// @param _reweightingLogic Reweighting logic address\\n    function setReweightingLogic(address _reweightingLogic) external;\\n\\n    /// @notice Sets default AUM scaled per seconds rate that will be used for fee calculation\\n    /**\\n        @dev Will be set in FeePool on index creation.\\n        Effective management fee rate (annual, in percent, after dilution) is calculated by the given formula:\\n        fee = (rpow(scaledPerSecondRate, numberOfSeconds, 10*27) - 10**27) * totalSupply / 10**27, where:\\n\\n        totalSupply - total index supply;\\n        numberOfSeconds - delta time for calculation period;\\n        scaledPerSecondRate - scaled rate, calculated off chain by the given formula:\\n\\n        scaledPerSecondRate = ((1 + k) ** (1 / 365 days)) * AUMCalculationLibrary.RATE_SCALE_BASE, where:\\n        k = (aumFeeInBP / BP) / (1 - aumFeeInBP / BP);\\n\\n        Note: rpow and RATE_SCALE_BASE are provided by AUMCalculationLibrary\\n        More info: https://docs.enzyme.finance/fee-formulas/management-fee\\n\\n        After value calculated off chain, scaledPerSecondRate is set to setDefaultAUMScaledPerSecondsRate\\n    */\\n    /// @param _AUMScaledPerSecondsRate New AUM scaled per seconds rate\\n    function setDefaultAUMScaledPerSecondsRate(uint _AUMScaledPerSecondsRate) external;\\n\\n    /// @notice Withdraw fee balance to fee pool for a given index\\n    /// @param _index Index to withdraw fee balance from\\n    function withdrawToFeePool(address _index) external;\\n\\n    /// @notice Index registry address\\n    /// @return Returns index registry address\\n    function registry() external view returns (address);\\n\\n    /// @notice vTokenFactory address\\n    /// @return Returns vTokenFactory address\\n    function vTokenFactory() external view returns (address);\\n\\n    /// @notice Minting fee in base point (BP) format\\n    /// @return Returns minting fee in base point (BP) format\\n    function defaultMintingFeeInBP() external view returns (uint16);\\n\\n    /// @notice Burning fee in base point (BP) format\\n    /// @return Returns burning fee in base point (BP) format\\n    function defaultBurningFeeInBP() external view returns (uint16);\\n\\n    /// @notice AUM scaled per seconds rate\\n    ///         See setDefaultAUMScaledPerSecondsRate method description for more details.\\n    /// @return Returns AUM scaled per seconds rate\\n    function defaultAUMScaledPerSecondsRate() external view returns (uint);\\n\\n    /// @notice Reweighting logic address\\n    /// @return Returns reweighting logic address\\n    function reweightingLogic() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Price oracle interface\\n/// @notice Returns price of single asset in relation to base\\ninterface IPriceOracle {\\n    /// @notice Updates and returns asset per base\\n    /// @return Asset per base in UQ\\n    function refreshedAssetPerBaseInUQ(address _asset) external returns (uint);\\n\\n    /// @notice Returns last asset per base\\n    /// @return Asset per base in UQ\\n    function lastAssetPerBaseInUQ(address _asset) external view returns (uint);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtShares\",\"type\":\"uint256\"}],\"name\":\"CompleteOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PlaceOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSellSide\",\"type\":\"bool\"}],\"name\":\"UpdateOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"enum IOrderer.OrderSide\",\"name\":\"_side\",\"type\":\"uint8\"}],\"name\":\"addOrderDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSellShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"buyPath\",\"type\":\"address[]\"}],\"internalType\":\"struct IOrderer.ExternalSwap\",\"name\":\"_info\",\"type\":\"tuple\"}],\"name\":\"externalSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_orderLifetime\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_maxAllowedPriceImpactInBP\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSellShares\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"buyPath\",\"type\":\"address[]\"}],\"internalType\":\"struct IOrderer.InternalSwap\",\"name\":\"_info\",\"type\":\"tuple\"}],\"name\":\"internalSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastOrderIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowedPriceImpactInBP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderLifetime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"orderOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum IOrderer.OrderSide\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderer.OrderAsset[]\",\"name\":\"assets\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IOrderer.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placeOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oldTotalSupply\",\"type\":\"uint256\"}],\"name\":\"reduceOrderAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_index\",\"type\":\"address\"}],\"name\":\"reweight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxAllowedPriceImpactInBP\",\"type\":\"uint16\"}],\"name\":\"setMaxAllowedPriceImpactInBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderLifetime\",\"type\":\"uint64\"}],\"name\":\"setOrderLifetime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Orderer", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}