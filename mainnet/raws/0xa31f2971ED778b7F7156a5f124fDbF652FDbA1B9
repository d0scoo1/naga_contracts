{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vaults/AladdinConvexVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IAladdinConvexVault.sol\\\";\\nimport \\\"../interfaces/IAladdinCRV.sol\\\";\\nimport \\\"../interfaces/IConvexBooster.sol\\\";\\nimport \\\"../interfaces/IConvexBasicRewards.sol\\\";\\nimport \\\"../interfaces/IConvexCRVDepositor.sol\\\";\\nimport \\\"../interfaces/ICurveFactoryPlainPool.sol\\\";\\nimport \\\"../interfaces/IZap.sol\\\";\\n\\n// solhint-disable no-empty-blocks, reason-string\\ncontract AladdinConvexVault is OwnableUpgradeable, ReentrancyGuardUpgradeable, IAladdinConvexVault {\\n  using SafeMathUpgradeable for uint256;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  struct PoolInfo {\\n    // The amount of total deposited token.\\n    uint128 totalUnderlying;\\n    // The amount of total deposited shares.\\n    uint128 totalShare;\\n    // The accumulated acrv reward per share, with 1e18 precision.\\n    uint256 accRewardPerShare;\\n    // The pool id in Convex Booster.\\n    uint256 convexPoolId;\\n    // The address of deposited token.\\n    address lpToken;\\n    // The address of Convex reward contract.\\n    address crvRewards;\\n    // The withdraw fee percentage, with 1e9 precision.\\n    uint256 withdrawFeePercentage;\\n    // The platform fee percentage, with 1e9 precision.\\n    uint256 platformFeePercentage;\\n    // The harvest bounty percentage, with 1e9 precision.\\n    uint256 harvestBountyPercentage;\\n    // Whether deposit for the pool is paused.\\n    bool pauseDeposit;\\n    // Whether withdraw for the pool is paused.\\n    bool pauseWithdraw;\\n    // The list of addresses of convex reward tokens.\\n    address[] convexRewardTokens;\\n  }\\n\\n  struct UserInfo {\\n    // The amount of shares the user deposited.\\n    uint128 shares;\\n    // The amount of current accrued rewards.\\n    uint128 rewards;\\n    // The reward per share already paid for the user, with 1e18 precision.\\n    uint256 rewardPerSharePaid;\\n  }\\n\\n  uint256 private constant PRECISION = 1e18;\\n  uint256 private constant FEE_DENOMINATOR = 1e9;\\n  uint256 private constant MAX_WITHDRAW_FEE = 1e8; // 10%\\n  uint256 private constant MAX_PLATFORM_FEE = 2e8; // 20%\\n  uint256 private constant MAX_HARVEST_BOUNTY = 1e8; // 10%\\n\\n  // The address of cvxCRV token.\\n  address private constant CVXCRV = 0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;\\n  // The address of CRV token.\\n  address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n  // The address of WETH token.\\n  address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n  // The address of Convex Booster Contract\\n  address private constant BOOSTER = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\\n  // The address of Curve cvxCRV/CRV Pool\\n  address private constant CURVE_CVXCRV_CRV_POOL = 0x9D0464996170c6B9e75eED71c68B99dDEDf279e8;\\n  // The address of Convex CRV => cvxCRV Contract.\\n  address private constant CRV_DEPOSITOR = 0x8014595F2AB54cD7c604B00E9fb932176fDc86Ae;\\n\\n  /// @dev The list of all supported pool.\\n  PoolInfo[] public poolInfo;\\n  /// @dev Mapping from pool id to account address to user share info.\\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n  /// @dev The address of AladdinCRV token.\\n  address public aladdinCRV;\\n  /// @dev The address of ZAP contract, will be used to swap tokens.\\n  address public zap;\\n\\n  /// @dev The address of recipient of platform fee\\n  address public platform;\\n\\n  function initialize(\\n    address _aladdinCRV,\\n    address _zap,\\n    address _platform\\n  ) external initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n    require(_aladdinCRV != address(0), \\\"AladdinConvexVault: zero acrv address\\\");\\n    require(_zap != address(0), \\\"AladdinConvexVault: zero zap address\\\");\\n    require(_platform != address(0), \\\"AladdinConvexVault: zero platform address\\\");\\n\\n    aladdinCRV = _aladdinCRV;\\n    zap = _zap;\\n    platform = _platform;\\n  }\\n\\n  /********************************** View Functions **********************************/\\n\\n  /// @notice Returns the number of pools.\\n  function poolLength() public view returns (uint256 pools) {\\n    pools = poolInfo.length;\\n  }\\n\\n  /// @dev Return the amount of pending AladdinCRV rewards for specific pool.\\n  /// @param _pid - The pool id.\\n  /// @param _account - The address of user.\\n  function pendingReward(uint256 _pid, address _account) public view override returns (uint256) {\\n    PoolInfo storage _pool = poolInfo[_pid];\\n    UserInfo storage _userInfo = userInfo[_pid][_account];\\n    return\\n      uint256(_userInfo.rewards).add(\\n        _pool.accRewardPerShare.sub(_userInfo.rewardPerSharePaid).mul(_userInfo.shares) / PRECISION\\n      );\\n  }\\n\\n  /// @dev Return the amount of pending AladdinCRV rewards for all pool.\\n  /// @param _account - The address of user.\\n  function pendingRewardAll(address _account) external view override returns (uint256) {\\n    uint256 _pending;\\n    for (uint256 i = 0; i < poolInfo.length; i++) {\\n      _pending += pendingReward(i, _account);\\n    }\\n    return _pending;\\n  }\\n\\n  /********************************** Mutated Functions **********************************/\\n\\n  /// @dev Deposit some token to specific pool.\\n  /// @param _pid - The pool id.\\n  /// @param _amount - The amount of token to deposit.\\n  /// @return share - The amount of share after deposit.\\n  function deposit(uint256 _pid, uint256 _amount) public override returns (uint256 share) {\\n    require(_amount > 0, \\\"AladdinConvexVault: zero amount deposit\\\");\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n\\n    // 1. update rewards\\n    PoolInfo storage _pool = poolInfo[_pid];\\n    require(!_pool.pauseDeposit, \\\"AladdinConvexVault: pool paused\\\");\\n    _updateRewards(_pid, msg.sender);\\n\\n    // 2. transfer user token\\n    address _lpToken = _pool.lpToken;\\n    {\\n      uint256 _before = IERC20Upgradeable(_lpToken).balanceOf(address(this));\\n      IERC20Upgradeable(_lpToken).safeTransferFrom(msg.sender, address(this), _amount);\\n      _amount = IERC20Upgradeable(_lpToken).balanceOf(address(this)) - _before;\\n    }\\n\\n    // 3. deposit\\n    return _deposit(_pid, _amount);\\n  }\\n\\n  /// @dev Deposit all token of the caller to specific pool.\\n  /// @param _pid - The pool id.\\n  /// @return share - The amount of share after deposit.\\n  function depositAll(uint256 _pid) external override returns (uint256 share) {\\n    PoolInfo storage _pool = poolInfo[_pid];\\n    uint256 _balance = IERC20Upgradeable(_pool.lpToken).balanceOf(msg.sender);\\n    return deposit(_pid, _balance);\\n  }\\n\\n  /// @dev Deposit some token to specific pool with zap.\\n  /// @param _pid - The pool id.\\n  /// @param _token - The address of token to deposit.\\n  /// @param _amount - The amount of token to deposit.\\n  /// @param _minAmount - The minimum amount of share to deposit.\\n  /// @return share - The amount of share after deposit.\\n  function zapAndDeposit(\\n    uint256 _pid,\\n    address _token,\\n    uint256 _amount,\\n    uint256 _minAmount\\n  ) public payable override returns (uint256 share) {\\n    require(_amount > 0, \\\"AladdinConvexVault: zero amount deposit\\\");\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n\\n    PoolInfo storage _pool = poolInfo[_pid];\\n    require(!_pool.pauseDeposit, \\\"AladdinConvexVault: pool paused\\\");\\n\\n    address _lpToken = _pool.lpToken;\\n    if (_lpToken == _token) {\\n      return deposit(_pid, _amount);\\n    }\\n\\n    // 1. update rewards\\n    _updateRewards(_pid, msg.sender);\\n\\n    // transfer token to zap contract.\\n    address _zap = zap;\\n    uint256 _before;\\n    if (_token != address(0)) {\\n      require(msg.value == 0, \\\"AladdinConvexVault: nonzero msg.value\\\");\\n      _before = IERC20Upgradeable(_token).balanceOf(_zap);\\n      IERC20Upgradeable(_token).safeTransferFrom(msg.sender, _zap, _amount);\\n      _amount = IERC20Upgradeable(_token).balanceOf(_zap) - _before;\\n    } else {\\n      require(msg.value == _amount, \\\"AladdinConvexVault: invalid amount\\\");\\n    }\\n\\n    // zap token to lp token using zap contract.\\n    _before = IERC20Upgradeable(_lpToken).balanceOf(address(this));\\n    IZap(_zap).zap{ value: msg.value }(_token, _amount, _lpToken, _minAmount);\\n    _amount = IERC20Upgradeable(_lpToken).balanceOf(address(this)) - _before;\\n\\n    share = _deposit(_pid, _amount);\\n\\n    require(share >= _minAmount, \\\"AladdinConvexVault: insufficient share\\\");\\n    return share;\\n  }\\n\\n  /// @dev Deposit all token to specific pool with zap.\\n  /// @param _pid - The pool id.\\n  /// @param _token - The address of token to deposit.\\n  /// @param _minAmount - The minimum amount of share to deposit.\\n  /// @return share - The amount of share after deposit.\\n  function zapAllAndDeposit(\\n    uint256 _pid,\\n    address _token,\\n    uint256 _minAmount\\n  ) external payable override returns (uint256) {\\n    uint256 _balance = IERC20Upgradeable(_token).balanceOf(msg.sender);\\n    return zapAndDeposit(_pid, _token, _balance, _minAmount);\\n  }\\n\\n  /// @dev Withdraw some token from specific pool and claim pending rewards.\\n  /// @param _pid - The pool id.\\n  /// @param _shares - The share of token want to withdraw.\\n  /// @param _minOut - The minimum amount of pending reward to receive.\\n  /// @param _option - The claim option (don't claim, as aCRV, cvxCRV, CRV, CVX, or ETH)\\n  /// @return withdrawn - The amount of token sent to caller.\\n  /// @return claimed - The amount of reward sent to caller.\\n  function withdrawAndClaim(\\n    uint256 _pid,\\n    uint256 _shares,\\n    uint256 _minOut,\\n    ClaimOption _option\\n  ) public override nonReentrant returns (uint256 withdrawn, uint256 claimed) {\\n    require(_shares > 0, \\\"AladdinConvexVault: zero share withdraw\\\");\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n\\n    // 1. update rewards\\n    PoolInfo storage _pool = poolInfo[_pid];\\n    require(!_pool.pauseWithdraw, \\\"AladdinConvexVault: pool paused\\\");\\n    _updateRewards(_pid, msg.sender);\\n\\n    // 2. withdraw lp token\\n    UserInfo storage _userInfo = userInfo[_pid][msg.sender];\\n    require(_shares <= _userInfo.shares, \\\"AladdinConvexVault: shares not enough\\\");\\n\\n    uint256 _totalShare = _pool.totalShare;\\n    uint256 _totalUnderlying = _pool.totalUnderlying;\\n    uint256 _withdrawable;\\n    if (_shares == _totalShare) {\\n      // If user is last to withdraw, don't take withdraw fee.\\n      // And there may still have some pending rewards, we just simple ignore it now.\\n      // If we want the reward later, we can upgrade the contract.\\n      _withdrawable = _totalUnderlying;\\n    } else {\\n      // take withdraw fee here\\n      _withdrawable = _shares.mul(_totalUnderlying) / _totalShare;\\n      uint256 _fee = _withdrawable.mul(_pool.withdrawFeePercentage) / FEE_DENOMINATOR;\\n      _withdrawable = _withdrawable - _fee; // never overflow\\n    }\\n\\n    _pool.totalShare = _toU128(_totalShare - _shares);\\n    _pool.totalUnderlying = _toU128(_totalUnderlying - _withdrawable);\\n    _userInfo.shares = _toU128(uint256(_userInfo.shares) - _shares);\\n\\n    IConvexBasicRewards(_pool.crvRewards).withdrawAndUnwrap(_withdrawable, false);\\n    IERC20Upgradeable(_pool.lpToken).safeTransfer(msg.sender, _withdrawable);\\n    emit Withdraw(_pid, msg.sender, _shares);\\n\\n    // 3. claim rewards\\n    if (_option == ClaimOption.None) {\\n      return (_withdrawable, 0);\\n    } else {\\n      uint256 _rewards = _userInfo.rewards;\\n      _userInfo.rewards = 0;\\n\\n      emit Claim(msg.sender, _rewards, _option);\\n      _rewards = _claim(_rewards, _minOut, _option);\\n\\n      return (_withdrawable, _rewards);\\n    }\\n  }\\n\\n  /// @dev Withdraw all share of token from specific pool and claim pending rewards.\\n  /// @param _pid - The pool id.\\n  /// @param _minOut - The minimum amount of pending reward to receive.\\n  /// @param _option - The claim option (as aCRV, cvxCRV, CRV, CVX, or ETH)\\n  /// @return withdrawn - The amount of token sent to caller.\\n  /// @return claimed - The amount of reward sent to caller.\\n  function withdrawAllAndClaim(\\n    uint256 _pid,\\n    uint256 _minOut,\\n    ClaimOption _option\\n  ) external override returns (uint256 withdrawn, uint256 claimed) {\\n    UserInfo storage _userInfo = userInfo[_pid][msg.sender];\\n    return withdrawAndClaim(_pid, _userInfo.shares, _minOut, _option);\\n  }\\n\\n  /// @dev Withdraw some token from specific pool and zap to token.\\n  /// @param _pid - The pool id.\\n  /// @param _shares - The share of token want to withdraw.\\n  /// @param _token - The address of token zapping to.\\n  /// @param _minOut - The minimum amount of token to receive.\\n  /// @return withdrawn - The amount of token sent to caller.\\n  function withdrawAndZap(\\n    uint256 _pid,\\n    uint256 _shares,\\n    address _token,\\n    uint256 _minOut\\n  ) public override nonReentrant returns (uint256 withdrawn) {\\n    require(_shares > 0, \\\"AladdinConvexVault: zero share withdraw\\\");\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n\\n    // 1. update rewards\\n    PoolInfo storage _pool = poolInfo[_pid];\\n    require(!_pool.pauseWithdraw, \\\"AladdinConvexVault: pool paused\\\");\\n    _updateRewards(_pid, msg.sender);\\n\\n    // 2. withdraw and zap\\n    address _lpToken = _pool.lpToken;\\n    if (_token == _lpToken) {\\n      return _withdraw(_pid, _shares, msg.sender);\\n    } else {\\n      address _zap = zap;\\n      // withdraw to zap contract\\n      uint256 _before = IERC20Upgradeable(_lpToken).balanceOf(_zap);\\n      _withdraw(_pid, _shares, _zap);\\n      uint256 _amount = IERC20Upgradeable(_lpToken).balanceOf(_zap) - _before;\\n\\n      // zap to desired token\\n      if (_token == address(0)) {\\n        _before = address(this).balance;\\n        IZap(_zap).zap(_lpToken, _amount, _token, _minOut);\\n        _amount = address(this).balance - _before;\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool _success, ) = msg.sender.call{ value: _amount }(\\\"\\\");\\n        require(_success, \\\"AladdinConvexVault: transfer failed\\\");\\n      } else {\\n        _before = IERC20Upgradeable(_token).balanceOf(address(this));\\n        IZap(_zap).zap(_lpToken, _amount, _token, _minOut);\\n        _amount = IERC20Upgradeable(_token).balanceOf(address(this)) - _before;\\n        IERC20Upgradeable(_token).safeTransfer(msg.sender, _amount);\\n      }\\n      return _amount;\\n    }\\n  }\\n\\n  /// @dev Withdraw all token from specific pool and zap to token.\\n  /// @param _pid - The pool id.\\n  /// @param _token - The address of token zapping to.\\n  /// @param _minOut - The minimum amount of token to receive.\\n  /// @return withdrawn - The amount of token sent to caller.\\n  function withdrawAllAndZap(\\n    uint256 _pid,\\n    address _token,\\n    uint256 _minOut\\n  ) external override returns (uint256 withdrawn) {\\n    UserInfo storage _userInfo = userInfo[_pid][msg.sender];\\n    return withdrawAndZap(_pid, _userInfo.shares, _token, _minOut);\\n  }\\n\\n  /// @dev claim pending rewards from specific pool.\\n  /// @param _pid - The pool id.\\n  /// @param _minOut - The minimum amount of pending reward to receive.\\n  /// @param _option - The claim option (as aCRV, cvxCRV, CRV, CVX, or ETH)\\n  /// @return claimed - The amount of reward sent to caller.\\n  function claim(\\n    uint256 _pid,\\n    uint256 _minOut,\\n    ClaimOption _option\\n  ) public override nonReentrant returns (uint256 claimed) {\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n\\n    PoolInfo storage _pool = poolInfo[_pid];\\n    require(!_pool.pauseWithdraw, \\\"AladdinConvexVault: pool paused\\\");\\n    _updateRewards(_pid, msg.sender);\\n\\n    UserInfo storage _userInfo = userInfo[_pid][msg.sender];\\n    uint256 _rewards = _userInfo.rewards;\\n    _userInfo.rewards = 0;\\n\\n    emit Claim(msg.sender, _rewards, _option);\\n    _rewards = _claim(_rewards, _minOut, _option);\\n    return _rewards;\\n  }\\n\\n  /// @dev claim pending rewards from all pools.\\n  /// @param _minOut - The minimum amount of pending reward to receive.\\n  /// @param _option - The claim option (as aCRV, cvxCRV, CRV, CVX, or ETH)\\n  /// @return claimed - The amount of reward sent to caller.\\n  function claimAll(uint256 _minOut, ClaimOption _option) external override nonReentrant returns (uint256 claimed) {\\n    uint256 _rewards;\\n    for (uint256 _pid = 0; _pid < poolInfo.length; _pid++) {\\n      if (poolInfo[_pid].pauseWithdraw) continue; // skip paused pool\\n\\n      UserInfo storage _userInfo = userInfo[_pid][msg.sender];\\n      // update if user has share\\n      if (_userInfo.shares > 0) {\\n        _updateRewards(_pid, msg.sender);\\n      }\\n      // withdraw if user has reward\\n      if (_userInfo.rewards > 0) {\\n        _rewards = _rewards.add(_userInfo.rewards);\\n        _userInfo.rewards = 0;\\n      }\\n    }\\n\\n    emit Claim(msg.sender, _rewards, _option);\\n    _rewards = _claim(_rewards, _minOut, _option);\\n    return _rewards;\\n  }\\n\\n  /// @dev Harvest the pending reward and convert to aCRV.\\n  /// @param _pid - The pool id.\\n  /// @param _recipient - The address of account to receive harvest bounty.\\n  /// @param _minimumOut - The minimum amount of cvxCRV should get.\\n  /// @return harvested - The amount of cvxCRV harvested after zapping all other tokens to it.\\n  function harvest(\\n    uint256 _pid,\\n    address _recipient,\\n    uint256 _minimumOut\\n  ) external override nonReentrant returns (uint256 harvested) {\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n\\n    PoolInfo storage _pool = poolInfo[_pid];\\n    // 1. claim rewards\\n    IConvexBasicRewards(_pool.crvRewards).getReward();\\n\\n    // 2. swap all rewards token to CRV\\n    address[] memory _rewardsToken = _pool.convexRewardTokens;\\n    uint256 _amount = address(this).balance;\\n    address _token;\\n    address _zap = zap;\\n    for (uint256 i = 0; i < _rewardsToken.length; i++) {\\n      _token = _rewardsToken[i];\\n      if (_token != CRV) {\\n        uint256 _balance = IERC20Upgradeable(_token).balanceOf(address(this));\\n        if (_balance > 0) {\\n          // saving gas\\n          IERC20Upgradeable(_token).safeTransfer(_zap, _balance);\\n          _amount = _amount.add(IZap(_zap).zap(_token, _balance, address(0), 0));\\n        }\\n      }\\n    }\\n    if (_amount > 0) {\\n      IZap(_zap).zap{ value: _amount }(address(0), _amount, CRV, 0);\\n    }\\n    _amount = IERC20Upgradeable(CRV).balanceOf(address(this));\\n    _amount = _swapCRVToCvxCRV(_amount, _minimumOut);\\n\\n    _token = aladdinCRV; // gas saving\\n    _approve(CVXCRV, _token, _amount);\\n    uint256 _rewards = IAladdinCRV(_token).deposit(address(this), _amount);\\n\\n    // 3. distribute rewards to platform and _recipient\\n    uint256 _platformFee = _pool.platformFeePercentage;\\n    uint256 _harvestBounty = _pool.harvestBountyPercentage;\\n    if (_platformFee > 0) {\\n      _platformFee = (_platformFee * _rewards) / FEE_DENOMINATOR;\\n      _rewards = _rewards - _platformFee;\\n      IERC20Upgradeable(_token).safeTransfer(platform, _platformFee);\\n    }\\n    if (_harvestBounty > 0) {\\n      _harvestBounty = (_harvestBounty * _rewards) / FEE_DENOMINATOR;\\n      _rewards = _rewards - _harvestBounty;\\n      IERC20Upgradeable(_token).safeTransfer(_recipient, _harvestBounty);\\n    }\\n\\n    // 4. update rewards info\\n    _pool.accRewardPerShare = _pool.accRewardPerShare.add(_rewards.mul(PRECISION) / _pool.totalShare);\\n\\n    emit Harvest(msg.sender, _rewards, _platformFee, _harvestBounty);\\n\\n    return _amount;\\n  }\\n\\n  /********************************** Restricted Functions **********************************/\\n\\n  /// @dev Update the withdraw fee percentage.\\n  /// @param _pid - The pool id.\\n  /// @param _feePercentage - The fee percentage to update.\\n  function updateWithdrawFeePercentage(uint256 _pid, uint256 _feePercentage) external onlyOwner {\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n    require(_feePercentage <= MAX_WITHDRAW_FEE, \\\"AladdinConvexVault: fee too large\\\");\\n\\n    poolInfo[_pid].withdrawFeePercentage = _feePercentage;\\n\\n    emit UpdateWithdrawalFeePercentage(_pid, _feePercentage);\\n  }\\n\\n  /// @dev Update the platform fee percentage.\\n  /// @param _pid - The pool id.\\n  /// @param _feePercentage - The fee percentage to update.\\n  function updatePlatformFeePercentage(uint256 _pid, uint256 _feePercentage) external onlyOwner {\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n    require(_feePercentage <= MAX_PLATFORM_FEE, \\\"AladdinConvexVault: fee too large\\\");\\n\\n    poolInfo[_pid].platformFeePercentage = _feePercentage;\\n\\n    emit UpdatePlatformFeePercentage(_pid, _feePercentage);\\n  }\\n\\n  /// @dev Update the harvest bounty percentage.\\n  /// @param _pid - The pool id.\\n  /// @param _percentage - The fee percentage to update.\\n  function updateHarvestBountyPercentage(uint256 _pid, uint256 _percentage) external onlyOwner {\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n    require(_percentage <= MAX_HARVEST_BOUNTY, \\\"AladdinConvexVault: fee too large\\\");\\n\\n    poolInfo[_pid].harvestBountyPercentage = _percentage;\\n\\n    emit UpdateHarvestBountyPercentage(_pid, _percentage);\\n  }\\n\\n  /// @dev Update the recipient\\n  function updatePlatform(address _platform) external onlyOwner {\\n    require(_platform != address(0), \\\"AladdinConvexVault: zero platform address\\\");\\n    platform = _platform;\\n\\n    emit UpdatePlatform(_platform);\\n  }\\n\\n  /// @dev Update the zap contract\\n  function updateZap(address _zap) external onlyOwner {\\n    require(_zap != address(0), \\\"AladdinConvexVault: zero zap address\\\");\\n    zap = _zap;\\n\\n    emit UpdateZap(_zap);\\n  }\\n\\n  /// @dev Add new Convex pool.\\n  /// @param _convexPid - The Convex pool id.\\n  /// @param _rewardTokens - The list of addresses of reward tokens.\\n  /// @param _withdrawFeePercentage - The withdraw fee percentage of the pool.\\n  /// @param _platformFeePercentage - The platform fee percentage of the pool.\\n  /// @param _harvestBountyPercentage - The harvest bounty percentage of the pool.\\n  function addPool(\\n    uint256 _convexPid,\\n    address[] memory _rewardTokens,\\n    uint256 _withdrawFeePercentage,\\n    uint256 _platformFeePercentage,\\n    uint256 _harvestBountyPercentage\\n  ) external onlyOwner {\\n    for (uint256 i = 0; i < poolInfo.length; i++) {\\n      require(poolInfo[i].convexPoolId != _convexPid, \\\"AladdinConvexVault: duplicate pool\\\");\\n    }\\n\\n    require(_withdrawFeePercentage <= MAX_WITHDRAW_FEE, \\\"AladdinConvexVault: fee too large\\\");\\n    require(_platformFeePercentage <= MAX_PLATFORM_FEE, \\\"AladdinConvexVault: fee too large\\\");\\n    require(_harvestBountyPercentage <= MAX_HARVEST_BOUNTY, \\\"AladdinConvexVault: fee too large\\\");\\n\\n    IConvexBooster.PoolInfo memory _info = IConvexBooster(BOOSTER).poolInfo(_convexPid);\\n    poolInfo.push(\\n      PoolInfo({\\n        totalUnderlying: 0,\\n        totalShare: 0,\\n        accRewardPerShare: 0,\\n        convexPoolId: _convexPid,\\n        lpToken: _info.lptoken,\\n        crvRewards: _info.crvRewards,\\n        withdrawFeePercentage: _withdrawFeePercentage,\\n        platformFeePercentage: _platformFeePercentage,\\n        harvestBountyPercentage: _harvestBountyPercentage,\\n        pauseDeposit: false,\\n        pauseWithdraw: false,\\n        convexRewardTokens: _rewardTokens\\n      })\\n    );\\n\\n    emit AddPool(poolInfo.length - 1, _convexPid, _rewardTokens);\\n  }\\n\\n  /// @dev update reward tokens\\n  /// @param _pid - The pool id.\\n  /// @param _rewardTokens - The address list of new reward tokens.\\n  function updatePoolRewardTokens(uint256 _pid, address[] memory _rewardTokens) external onlyOwner {\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n\\n    delete poolInfo[_pid].convexRewardTokens;\\n    poolInfo[_pid].convexRewardTokens = _rewardTokens;\\n\\n    emit UpdatePoolRewardTokens(_pid, _rewardTokens);\\n  }\\n\\n  /// @dev Pause withdraw for specific pool.\\n  /// @param _pid - The pool id.\\n  /// @param _status - The status to update.\\n  function pausePoolWithdraw(uint256 _pid, bool _status) external onlyOwner {\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n\\n    poolInfo[_pid].pauseWithdraw = _status;\\n\\n    emit PausePoolWithdraw(_pid, _status);\\n  }\\n\\n  /// @dev Pause deposit for specific pool.\\n  /// @param _pid - The pool id.\\n  /// @param _status - The status to update.\\n  function pausePoolDeposit(uint256 _pid, bool _status) external onlyOwner {\\n    require(_pid < poolInfo.length, \\\"AladdinConvexVault: invalid pool\\\");\\n\\n    poolInfo[_pid].pauseDeposit = _status;\\n\\n    emit PausePoolDeposit(_pid, _status);\\n  }\\n\\n  /********************************** Internal Functions **********************************/\\n\\n  function _updateRewards(uint256 _pid, address _account) internal {\\n    uint256 _rewards = pendingReward(_pid, _account);\\n    PoolInfo storage _pool = poolInfo[_pid];\\n    UserInfo storage _userInfo = userInfo[_pid][_account];\\n\\n    _userInfo.rewards = _toU128(_rewards);\\n    _userInfo.rewardPerSharePaid = _pool.accRewardPerShare;\\n  }\\n\\n  function _deposit(uint256 _pid, uint256 _amount) internal nonReentrant returns (uint256) {\\n    PoolInfo storage _pool = poolInfo[_pid];\\n\\n    _approve(_pool.lpToken, BOOSTER, _amount);\\n    IConvexBooster(BOOSTER).deposit(_pool.convexPoolId, _amount, true);\\n\\n    uint256 _totalShare = _pool.totalShare;\\n    uint256 _totalUnderlying = _pool.totalUnderlying;\\n    uint256 _shares;\\n    if (_totalShare == 0) {\\n      _shares = _amount;\\n    } else {\\n      _shares = _amount.mul(_totalShare) / _totalUnderlying;\\n    }\\n    _pool.totalShare = _toU128(_totalShare.add(_shares));\\n    _pool.totalUnderlying = _toU128(_totalUnderlying.add(_amount));\\n\\n    UserInfo storage _userInfo = userInfo[_pid][msg.sender];\\n    _userInfo.shares = _toU128(_shares + _userInfo.shares);\\n\\n    emit Deposit(_pid, msg.sender, _amount);\\n    return _shares;\\n  }\\n\\n  function _withdraw(\\n    uint256 _pid,\\n    uint256 _shares,\\n    address _recipient\\n  ) internal returns (uint256) {\\n    PoolInfo storage _pool = poolInfo[_pid];\\n\\n    // 2. withdraw lp token\\n    UserInfo storage _userInfo = userInfo[_pid][msg.sender];\\n    require(_shares <= _userInfo.shares, \\\"AladdinConvexVault: shares not enough\\\");\\n\\n    uint256 _totalShare = _pool.totalShare;\\n    uint256 _totalUnderlying = _pool.totalUnderlying;\\n    uint256 _withdrawable;\\n    if (_shares == _totalShare) {\\n      // If user is last to withdraw, don't take withdraw fee.\\n      // And there may still have some pending rewards, we just simple ignore it now.\\n      // If we want the reward later, we can upgrade the contract.\\n      _withdrawable = _totalUnderlying;\\n    } else {\\n      // take withdraw fee here\\n      _withdrawable = _shares.mul(_totalUnderlying) / _totalShare;\\n      uint256 _fee = _withdrawable.mul(_pool.withdrawFeePercentage) / FEE_DENOMINATOR;\\n      _withdrawable = _withdrawable - _fee; // never overflow\\n    }\\n\\n    _pool.totalShare = _toU128(_totalShare - _shares);\\n    _pool.totalUnderlying = _toU128(_totalUnderlying - _withdrawable);\\n    _userInfo.shares = _toU128(uint256(_userInfo.shares) - _shares);\\n\\n    IConvexBasicRewards(_pool.crvRewards).withdrawAndUnwrap(_withdrawable, false);\\n    IERC20Upgradeable(_pool.lpToken).safeTransfer(_recipient, _withdrawable);\\n    emit Withdraw(_pid, msg.sender, _shares);\\n\\n    return _withdrawable;\\n  }\\n\\n  function _claim(\\n    uint256 _amount,\\n    uint256 _minOut,\\n    ClaimOption _option\\n  ) internal returns (uint256) {\\n    if (_amount == 0) return _amount;\\n\\n    IAladdinCRV.WithdrawOption _withdrawOption;\\n    if (_option == ClaimOption.Claim) {\\n      require(_amount >= _minOut, \\\"AladdinConvexVault: insufficient output\\\");\\n      IERC20Upgradeable(aladdinCRV).safeTransfer(msg.sender, _amount);\\n      return _amount;\\n    } else if (_option == ClaimOption.ClaimAsCvxCRV) {\\n      _withdrawOption = IAladdinCRV.WithdrawOption.Withdraw;\\n    } else if (_option == ClaimOption.ClaimAsCRV) {\\n      _withdrawOption = IAladdinCRV.WithdrawOption.WithdrawAsCRV;\\n    } else if (_option == ClaimOption.ClaimAsCVX) {\\n      _withdrawOption = IAladdinCRV.WithdrawOption.WithdrawAsCVX;\\n    } else if (_option == ClaimOption.ClaimAsETH) {\\n      _withdrawOption = IAladdinCRV.WithdrawOption.WithdrawAsETH;\\n    } else {\\n      revert(\\\"AladdinConvexVault: invalid claim option\\\");\\n    }\\n    return IAladdinCRV(aladdinCRV).withdraw(msg.sender, _amount, _minOut, _withdrawOption);\\n  }\\n\\n  function _toU128(uint256 _value) internal pure returns (uint128) {\\n    require(_value < 340282366920938463463374607431768211456, \\\"AladdinConvexVault: overflow\\\");\\n    return uint128(_value);\\n  }\\n\\n  function _swapCRVToCvxCRV(uint256 _amountIn, uint256 _minOut) internal returns (uint256) {\\n    // CRV swap to CVXCRV or stake to CVXCRV\\n    // CRV swap to CVXCRV or stake to CVXCRV\\n    uint256 _amountOut = ICurveFactoryPlainPool(CURVE_CVXCRV_CRV_POOL).get_dy(0, 1, _amountIn);\\n    bool useCurve = _amountOut > _amountIn;\\n    require(_amountOut >= _minOut || _amountIn >= _minOut, \\\"AladdinCRVZap: insufficient output\\\");\\n\\n    if (useCurve) {\\n      _approve(CRV, CURVE_CVXCRV_CRV_POOL, _amountIn);\\n      _amountOut = ICurveFactoryPlainPool(CURVE_CVXCRV_CRV_POOL).exchange(0, 1, _amountIn, 0, address(this));\\n    } else {\\n      _approve(CRV, CRV_DEPOSITOR, _amountIn);\\n      uint256 _lockIncentive = IConvexCRVDepositor(CRV_DEPOSITOR).lockIncentive();\\n      // if use `lock = false`, will possible take fee\\n      // if use `lock = true`, some incentive will be given\\n      _amountOut = IERC20Upgradeable(CVXCRV).balanceOf(address(this));\\n      if (_lockIncentive == 0) {\\n        // no lock incentive, use `lock = false`\\n        IConvexCRVDepositor(CRV_DEPOSITOR).deposit(_amountIn, false, address(0));\\n      } else {\\n        // no lock incentive, use `lock = true`\\n        IConvexCRVDepositor(CRV_DEPOSITOR).deposit(_amountIn, true, address(0));\\n      }\\n      _amountOut = IERC20Upgradeable(CVXCRV).balanceOf(address(this)) - _amountOut; // never overflow here\\n    }\\n    return _amountOut;\\n  }\\n\\n  function _approve(\\n    address _token,\\n    address _spender,\\n    uint256 _amount\\n  ) internal {\\n    IERC20Upgradeable(_token).safeApprove(_spender, 0);\\n    IERC20Upgradeable(_token).safeApprove(_spender, _amount);\\n  }\\n\\n  receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAladdinConvexVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IAladdinConvexVault {\\n  enum ClaimOption {\\n    None,\\n    Claim,\\n    ClaimAsCvxCRV,\\n    ClaimAsCRV,\\n    ClaimAsCVX,\\n    ClaimAsETH\\n  }\\n\\n  event Deposit(uint256 indexed _pid, address indexed _sender, uint256 _amount);\\n  event Withdraw(uint256 indexed _pid, address indexed _sender, uint256 _shares);\\n  event Claim(address indexed _sender, uint256 _reward, ClaimOption _option);\\n  event Harvest(address indexed _caller, uint256 _reward, uint256 _platformFee, uint256 _harvestBounty);\\n\\n  event UpdateWithdrawalFeePercentage(uint256 indexed _pid, uint256 _feePercentage);\\n  event UpdatePlatformFeePercentage(uint256 indexed _pid, uint256 _feePercentage);\\n  event UpdateHarvestBountyPercentage(uint256 indexed _pid, uint256 _percentage);\\n  event UpdatePlatform(address indexed _platform);\\n  event UpdateZap(address indexed _zap);\\n  event UpdatePoolRewardTokens(uint256 indexed _pid, address[] _rewardTokens);\\n  event AddPool(uint256 indexed _pid, uint256 _convexPid, address[] _rewardTokens);\\n  event PausePoolDeposit(uint256 indexed _pid, bool _status);\\n  event PausePoolWithdraw(uint256 indexed _pid, bool _status);\\n\\n  function pendingReward(uint256 _pid, address _account) external view returns (uint256);\\n\\n  function pendingRewardAll(address _account) external view returns (uint256);\\n\\n  function deposit(uint256 _pid, uint256 _amount) external returns (uint256);\\n\\n  function depositAll(uint256 _pid) external returns (uint256);\\n\\n  function zapAndDeposit(\\n    uint256 _pid,\\n    address _token,\\n    uint256 _amount,\\n    uint256 _minAmount\\n  ) external payable returns (uint256);\\n\\n  function zapAllAndDeposit(\\n    uint256 _pid,\\n    address _token,\\n    uint256 _minAmount\\n  ) external payable returns (uint256);\\n\\n  function withdrawAndZap(\\n    uint256 _pid,\\n    uint256 _shares,\\n    address _token,\\n    uint256 _minOut\\n  ) external returns (uint256);\\n\\n  function withdrawAllAndZap(\\n    uint256 _pid,\\n    address _token,\\n    uint256 _minOut\\n  ) external returns (uint256);\\n\\n  function withdrawAndClaim(\\n    uint256 _pid,\\n    uint256 _shares,\\n    uint256 _minOut,\\n    ClaimOption _option\\n  ) external returns (uint256, uint256);\\n\\n  function withdrawAllAndClaim(\\n    uint256 _pid,\\n    uint256 _minOut,\\n    ClaimOption _option\\n  ) external returns (uint256, uint256);\\n\\n  function claim(\\n    uint256 _pid,\\n    uint256 _minOut,\\n    ClaimOption _option\\n  ) external returns (uint256);\\n\\n  function claimAll(uint256 _minOut, ClaimOption _option) external returns (uint256);\\n\\n  function harvest(\\n    uint256 _pid,\\n    address _recipient,\\n    uint256 _minimumOut\\n  ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAladdinCRV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IAladdinCRV is IERC20Upgradeable {\\n  event Harvest(address indexed _caller, uint256 _amount);\\n  event Deposit(address indexed _sender, address indexed _recipient, uint256 _amount);\\n  event Withdraw(\\n    address indexed _sender,\\n    address indexed _recipient,\\n    uint256 _shares,\\n    IAladdinCRV.WithdrawOption _option\\n  );\\n\\n  event UpdateWithdrawalFeePercentage(uint256 _feePercentage);\\n  event UpdatePlatformFeePercentage(uint256 _feePercentage);\\n  event UpdateHarvestBountyPercentage(uint256 _percentage);\\n  event UpdatePlatform(address indexed _platform);\\n  event UpdateZap(address indexed _zap);\\n\\n  enum WithdrawOption {\\n    Withdraw,\\n    WithdrawAndStake,\\n    WithdrawAsCRV,\\n    WithdrawAsCVX,\\n    WithdrawAsETH\\n  }\\n\\n  /// @dev return the total amount of cvxCRV staked.\\n  function totalUnderlying() external view returns (uint256);\\n\\n  /// @dev return the amount of cvxCRV staked for user\\n  function balanceOfUnderlying(address _user) external view returns (uint256);\\n\\n  function deposit(address _recipient, uint256 _amount) external returns (uint256);\\n\\n  function depositAll(address _recipient) external returns (uint256);\\n\\n  function depositWithCRV(address _recipient, uint256 _amount) external returns (uint256);\\n\\n  function depositAllWithCRV(address _recipient) external returns (uint256);\\n\\n  function withdraw(\\n    address _recipient,\\n    uint256 _shares,\\n    uint256 _minimumOut,\\n    WithdrawOption _option\\n  ) external returns (uint256);\\n\\n  function withdrawAll(\\n    address _recipient,\\n    uint256 _minimumOut,\\n    WithdrawOption _option\\n  ) external returns (uint256);\\n\\n  function harvest(address _recipient, uint256 _minimumOut) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConvexBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IConvexBooster {\\n  struct PoolInfo {\\n    address lptoken;\\n    address token;\\n    address gauge;\\n    address crvRewards;\\n    address stash;\\n    bool shutdown;\\n  }\\n\\n  function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n\\n  function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n  function deposit(\\n    uint256 _pid,\\n    uint256 _amount,\\n    bool _stake\\n  ) external returns (bool);\\n\\n  function earmarkRewards(uint256 _pid) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConvexBasicRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IConvexBasicRewards {\\n  function stakeFor(address, uint256) external returns (bool);\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function earned(address) external view returns (uint256);\\n\\n  function withdrawAll(bool) external returns (bool);\\n\\n  function withdraw(uint256, bool) external returns (bool);\\n\\n  function withdrawAndUnwrap(uint256, bool) external returns (bool);\\n\\n  function getReward() external returns (bool);\\n\\n  function stake(uint256) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConvexCRVDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IConvexCRVDepositor {\\n  function deposit(\\n    uint256 _amount,\\n    bool _lock,\\n    address _stakeAddress\\n  ) external;\\n\\n  function deposit(uint256 _amount, bool _lock) external;\\n\\n  function lockIncentive() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveFactoryPlainPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// solhint-disable var-name-mixedcase, func-name-mixedcase\\ninterface ICurveFactoryPlainPool {\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    int128 i,\\n    uint256 min_amount\\n  ) external returns (uint256);\\n\\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 _dx,\\n    uint256 _min_dy,\\n    address _receiver\\n  ) external returns (uint256);\\n\\n  function get_dy(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function coins(uint256 index) external view returns (address);\\n}\\n\\n/// @dev This is the interface of Curve Factory Plain Pool with 2 tokens, examples:\\ninterface ICurveFactoryPlain2Pool is ICurveFactoryPlainPool {\\n  function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256);\\n\\n  function calc_token_amount(uint256[2] memory amounts, bool _is_deposit) external view returns (uint256);\\n}\\n\\n/// @dev This is the interface of Curve Factory Plain Pool with 3 tokens, examples:\\ninterface ICurveFactoryPlain3Pool is ICurveFactoryPlainPool {\\n  function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external returns (uint256);\\n\\n  function calc_token_amount(uint256[3] memory amounts, bool _is_deposit) external view returns (uint256);\\n}\\n\\n/// @dev This is the interface of Curve Factory Plain Pool with 4 tokens, examples:\\ninterface ICurveFactoryPlain4Pool is ICurveFactoryPlainPool {\\n  function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external returns (uint256);\\n\\n  function calc_token_amount(uint256[4] memory amounts, bool _is_deposit) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IZap {\\n  function zap(\\n    address _fromToken,\\n    uint256 _amountIn,\\n    address _toToken,\\n    uint256 _minOut\\n  ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_convexPid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IAladdinConvexVault.ClaimOption\",\"name\":\"_option\",\"type\":\"uint8\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_harvestBounty\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"PausePoolDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"PausePoolWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"UpdateHarvestBountyPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"UpdatePlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"UpdatePlatformFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"UpdatePoolRewardTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"UpdateWithdrawalFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"}],\"name\":\"UpdateZap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_convexPid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platformFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestBountyPercentage\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aladdinCRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"enum IAladdinConvexVault.ClaimOption\",\"name\":\"_option\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"enum IAladdinConvexVault.ClaimOption\",\"name\":\"_option\",\"type\":\"uint8\"}],\"name\":\"claimAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"depositAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumOut\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aladdinCRV\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"pausePoolDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"pausePoolWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingRewardAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalUnderlying\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalShare\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"convexPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestBountyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pauseDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseWithdraw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"updateHarvestBountyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"updatePlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"updatePoolRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"}],\"name\":\"updateZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSharePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"enum IAladdinConvexVault.ClaimOption\",\"name\":\"_option\",\"type\":\"uint8\"}],\"name\":\"withdrawAllAndClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"withdrawAllAndZap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"enum IAladdinConvexVault.ClaimOption\",\"name\":\"_option\",\"type\":\"uint8\"}],\"name\":\"withdrawAndClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"withdrawAndZap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"zapAllAndDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"zapAndDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AladdinConvexVault", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}