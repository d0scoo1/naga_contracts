{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Subscription.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgValue() internal view virtual returns (uint256) {\\n        return msg.value;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ncontract Referrable is Ownable {\\n    uint256 public referral = 100; // 10%\\n    uint256 public constant PERCENTS_DIVIDER = 1000;\\n\\n    function updateReferral(uint256 value) public onlyOwner {\\n        require(value <= 100, \\\"Percentages must be less than 10%\\\");\\n        referral = value;\\n    }\\n}\\n\\ncontract Subscription is Referrable {\\n    struct Plan {\\n        uint256 price;\\n        uint256 duration;\\n        bool expired;\\n    }\\n\\n    struct User {\\n        uint256 validUntil;\\n        address referrer;\\n        uint256 referrals;\\n        uint256 bonus;\\n        uint256 withdrawn;\\n    }\\n\\n    Plan[] internal plans;\\n    mapping(address => User) internal users;\\n\\n    constructor() {\\n        plans.push(Plan(60000000000000000, 30, false)); // 1 month\\n        plans.push(Plan(150000000000000000, 90, false)); // 3 months\\n        plans.push(Plan(300000000000000000, 3650, false)); // 10 years\\n    }\\n\\n    function subscribe(uint256 planId, address referrer) public payable {\\n        require(planId < plans.length, \\\"Invalid Plan\\\");\\n        require(_msgValue() >= plans[planId].price, \\\"Insufficien Funds\\\");\\n        require(plans[planId].expired == false, \\\"Plan is expired\\\");\\n\\n        User storage user = users[_msgSender()];\\n        uint256 payment = _msgValue();\\n\\n        if (user.referrer == address(0)) {\\n            if (isSubscribed(referrer) && referrer != msg.sender) {\\n                user.referrer = referrer;\\n            }\\n        }\\n\\n        address upline = user.referrer;\\n        if (upline != address(0)) {\\n            uint256 amount = (plans[planId].price * referral) /\\n                PERCENTS_DIVIDER;\\n            users[upline].referrals++;\\n            users[upline].bonus += amount;\\n            payment -= amount;\\n        }\\n\\n        if (user.validUntil == 0) {\\n            user.validUntil = block.timestamp;\\n        }\\n\\n        user.validUntil += plans[planId].duration * 1 days;\\n\\n        payable(owner()).transfer(payment);\\n    }\\n\\n    function withdraw() public {\\n        User storage user = users[_msgSender()];\\n        uint256 amount = users[_msgSender()].bonus;\\n\\n        require(amount > 0, \\\"User has no referral bonus\\\");\\n        user.bonus = 0;\\n        user.withdrawn += amount;\\n\\n        payable(_msgSender()).transfer(amount);\\n    }\\n\\n    function isSubscribed(address owner) public view returns (bool) {\\n        User storage user = users[owner];\\n        return user.validUntil > block.timestamp;\\n    }\\n\\n    function isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    function addPlan(uint256 price, uint256 duration) public onlyOwner {\\n        require(\\n            price > plans[plans.length - 1].price,\\n            \\\"Price must be greater than previous plan\\\"\\n        );\\n        require(\\n            duration > plans[plans.length - 1].duration,\\n            \\\"Duration must be greater than previous plan\\\"\\n        );\\n\\n        plans.push(Plan(price, duration, false));\\n    }\\n\\n    function expirePlan(uint256 i) public onlyOwner {\\n        require(i < plans.length, \\\"Index out of bound\\\");\\n        plans[i].expired = true;\\n    }\\n\\n    function revivePlan(uint256 i) public onlyOwner {\\n        require(i < plans.length, \\\"Index out of bound\\\");\\n        plans[i].expired = false;\\n    }\\n\\n    function updatePlan(\\n        uint256 i,\\n        uint256 price,\\n        uint256 duration\\n    ) public onlyOwner {\\n        require(i < plans.length, \\\"Plan index out of bounds\\\");\\n        plans[i].price = price;\\n        plans[i].duration = duration;\\n    }\\n\\n    function getPlans() public view returns (Plan[] memory) {\\n        return plans;\\n    }\\n\\n    function getUser(address owner) public view returns (User memory) {\\n        return users[owner];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"expirePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"expired\",\"type\":\"bool\"}],\"internalType\":\"struct Subscription.Plan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct Subscription.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isSubscribed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"revivePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"updatePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Subscription", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}