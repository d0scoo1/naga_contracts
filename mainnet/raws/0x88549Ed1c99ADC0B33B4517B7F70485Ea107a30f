{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Earn copy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\ncontract Earn is Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public ALTA;\\n    IERC20 public USDC;\\n    address loanAddress;\\n    address feeAddress;\\n\\n    // Interest Bonus based off time late\\n    uint256 public baseBonusMultiplier;\\n    uint256 public altaBonusMultiplier;\\n\\n    uint256 public transferFee;\\n    uint256 reserveDays;\\n\\n    // USDC Amounts Needed for ALTA Value Tiers\\n    uint256 public highTier; // dollars + 6 decimals\\n    uint256 public medTier; // dollars + 6 decimals\\n    uint256 public lowTier; // dollars + 6 decimals\\n\\n    event ContractOpened(address indexed owner, uint256 earnContractId);\\n    event ContractClosed(address indexed owner, uint256 earnContractId);\\n    event EarnContractOwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner,\\n        uint256 earnContractId\\n    );\\n    event BidMade(address indexed bidder, uint256 bidId);\\n    event ContractForSale(uint256 earnContractId);\\n    event ContractOffMarket(uint256 earnContractId);\\n\\n    constructor(\\n        IERC20 _USDC,\\n        IERC20 _ALTA,\\n        address _loanAddress,\\n        address _feeAddress,\\n        EarnContract[] memory migratedContracts\\n    ) {\\n        USDC = _USDC;\\n        ALTA = _ALTA;\\n        baseBonusMultiplier = 150; //150 = 1.5x\\n        altaBonusMultiplier = 200; // 200 = 2x\\n        reserveDays = 7;\\n        loanAddress = _loanAddress;\\n        feeAddress = _feeAddress;\\n        for (uint256 i = 0; i < migratedContracts.length; i++) {\\n            _migrateContract(migratedContracts[i]);\\n        }\\n    }\\n\\n    enum ContractStatus {\\n        OPEN,\\n        CLOSED,\\n        FORSALE\\n    }\\n\\n    struct EarnTerm {\\n        // Time Locked (in Days);\\n        uint256 time;\\n        // USDC APR (simple interest) (1000 = 10%)\\n        uint16 usdcRate;\\n        // ALTA High Amount\\n        uint64 altaHighAmount;\\n        // ALTA Med Amount\\n        uint64 altaMedAmount;\\n        // ALTA Low Amount\\n        uint64 altaLowAmount;\\n        // Tokens other than ALTA accepted?\\n        bool otherTokens;\\n        // Tokens need to be whitelisted?\\n        bool whitelist;\\n        // Array of whitelisted tokens\\n        address[] tokensAccepted;\\n        // Max usdc accepted\\n        uint256 usdcMax;\\n        // Amount already accepted\\n        uint256 usdcAccepted;\\n        // True if open, False if closed\\n        bool open;\\n    }\\n\\n    struct EarnContract {\\n        // Contract Owner Address\\n        address owner;\\n        // Unix Epoch time started\\n        uint256 startTime;\\n        // length of contract in seconds\\n        uint256 contractLength;\\n        // Address of token lent\\n        address tokenAddress;\\n        // Amount of token lent\\n        uint256 tokenAmount;\\n        // Amount sent to contract in USDC (swap value);\\n        uint256 usdcPrincipal;\\n        // USDC interest rate\\n        uint256 usdcRate;\\n        // USDC Interest Paid\\n        uint256 usdcInterestPaid;\\n        // ALTA interet rate\\n        uint256 altaAmount;\\n        // Rate usdc interest will be paid for days overdue\\n        uint256 usdcBonusRate;\\n        // Fixed ALTA bonus for overdue payment\\n        uint256 altaBonusAmount;\\n        // Open, Closed, or ForSale\\n        ContractStatus status;\\n    }\\n\\n    struct Bid {\\n        // Bid Owner Address\\n        address bidder;\\n        // Address of Contract Owner\\n        address to;\\n        // Earn Contract Id\\n        uint256 earnContractId;\\n        // Amount\\n        uint256 amount;\\n        // Accepted - false if pending\\n        bool accepted;\\n    }\\n\\n    // Comes with a public getter function\\n    EarnTerm[] public earnTerms;\\n    EarnContract[] public earnContracts;\\n    Bid[] public bids;\\n\\n    // Maps the earn contract id to the owner\\n    mapping(uint256 => address) public earnContractToOwner;\\n\\n    // Maps the number of earn contracts for a given user\\n    mapping(address => uint256) public ownerEarnContractCount;\\n\\n    // Maps the number of bids per earn contract\\n    mapping(uint256 => uint256) public earnContractBidCount;\\n\\n    /**\\n     * @param _time Length of the contract in days\\n     * @param _usdcRate Interest rate for USDC (1000 = 10%)\\n     * @param _altaHighAmount ALTA bonus for the high tier\\n     * @param _altaMedAmount ALTA bonus for the medium tier\\n     * @param _altaLowAmount ALTA bonus for the low tier\\n     * @dev Add an earn term with 8 parameters\\n     */\\n    function addTerm(\\n        uint256 _time,\\n        uint16 _usdcRate,\\n        uint64 _altaHighAmount,\\n        uint64 _altaMedAmount,\\n        uint64 _altaLowAmount,\\n        bool _otherTokens,\\n        bool _whitelist,\\n        address[] memory _tokensAccepted,\\n        uint256 _usdcMax\\n    ) public onlyOwner {\\n        earnTerms.push(\\n            EarnTerm(\\n                _time,\\n                _usdcRate,\\n                _altaHighAmount,\\n                _altaMedAmount,\\n                _altaLowAmount,\\n                _otherTokens,\\n                _whitelist,\\n                _tokensAccepted,\\n                _usdcMax,\\n                0,\\n                true\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Close an earn term\\n     * @param _earnTermsId index of the earn term in earnTerms\\n     */\\n    function closeTerm(uint256 _earnTermsId) public onlyOwner {\\n        _closeTerm(_earnTermsId);\\n    }\\n\\n    function _closeTerm(uint256 _earnTermsId) internal {\\n        require(_earnTermsId < earnTerms.length);\\n        earnTerms[_earnTermsId].open = false;\\n    }\\n\\n    /**\\n     * Close an earn term\\n     * @param _earnTermsId index of the earn term in earnTerms\\n     */\\n    function openTerm(uint256 _earnTermsId) public onlyOwner {\\n        require(_earnTermsId < earnTerms.length);\\n        earnTerms[_earnTermsId].open = true;\\n    }\\n\\n    /**\\n     * @dev Update an earn term passing the individual parameters\\n     * @param _earnTermsId index of the earn term in earnTerms\\n     * @param _time Length of the contract in days\\n     * @param _usdcRate Interest rate for USDC (1000 = 10%)\\n     * @param _altaHighAmount ALTA bonus for the high tier\\n     * @param _altaMedAmount ALTA bonus for the medium tier\\n     * @param _altaLowAmount ALTA bonus for the low tier\\n     */\\n    function updateTerm(\\n        uint256 _earnTermsId,\\n        uint256 _time,\\n        uint16 _usdcRate,\\n        uint64 _altaHighAmount,\\n        uint64 _altaMedAmount,\\n        uint64 _altaLowAmount,\\n        bool _otherTokens,\\n        bool _whitelist,\\n        address[] memory _tokensAccepted,\\n        uint256 _usdcMax,\\n        uint256 _usdcAccepted,\\n        bool _open\\n    ) public onlyOwner {\\n        earnTerms[_earnTermsId] = EarnTerm(\\n            _time,\\n            _usdcRate,\\n            _altaHighAmount,\\n            _altaMedAmount,\\n            _altaLowAmount,\\n            _otherTokens,\\n            _whitelist,\\n            _tokensAccepted,\\n            _usdcMax,\\n            _usdcAccepted,\\n            _open\\n        );\\n    }\\n\\n    /**\\n     * @notice Use the public getter function for earnTerms for a single earnTerm\\n     * @return An array of type EarnTerm\\n     */\\n    function getAllEarnTerms() public view returns (EarnTerm[] memory) {\\n        return earnTerms;\\n    }\\n\\n    /**\\n     * @notice Use the public getter function for earnTerms for a single earnTerm\\n     * @return An array of type EarnTerm with open == true\\n     */\\n    function getAllOpenEarnTerms() public view returns (EarnTerm[] memory) {\\n        EarnTerm[] memory result = new EarnTerm[](earnTerms.length);\\n        uint256 counter = 0;\\n\\n        for (uint256 i = 0; i < earnTerms.length; i++) {\\n            if (earnTerms[i].open == true) {\\n                result[counter] = earnTerms[i];\\n                counter++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Use the public getter function for bids for a sinble bid\\n     * @return An array of type Bid\\n     */\\n    function getAllBids() public view returns (Bid[] memory) {\\n        return bids;\\n    }\\n\\n    function getContractTier(uint256 _amount, EarnTerm memory earnTerm)\\n        internal\\n        view\\n        returns (uint256 altaAmount)\\n    {\\n        if (_amount >= highTier) {\\n            altaAmount = earnTerm.altaHighAmount;\\n        } else if (_amount >= medTier) {\\n            altaAmount = earnTerm.altaMedAmount;\\n        } else if (_amount >= lowTier) {\\n            altaAmount = earnTerm.altaLowAmount;\\n        } else {\\n            altaAmount = 0;\\n        }\\n        return altaAmount;\\n    }\\n\\n    /**\\n     * Sends erc20 token to AltaFin Treasury Address and creates a contract with EarnContract[_id] terms for user.\\n     * User needs to approve USDC to be spent by this contract before calling this function\\n     * @param _earnTermsId index of the earn term in earnTerms\\n     * @param _amount Amount of USDC principal\\n     */\\n    function openContractUsdc(uint256 _earnTermsId, uint256 _amount)\\n        public\\n        whenNotPaused\\n    {\\n        EarnTerm memory earnTerm = earnTerms[_earnTermsId];\\n        require(earnTerm.open);\\n        require(earnTerm.otherTokens, \\\"Earn term doesn't accept USDC\\\");\\n        if (earnTerm.whitelist) {\\n            // Check to see if token is on whitelist for earn term\\n            require(checkTokenWhitelist(address(USDC), _earnTermsId));\\n        }\\n\\n        require(_amount > 0, \\\"USDC amount must be greater than zero\\\");\\n        // Check to see if the User has sufficient funds.\\n        require(\\n            USDC.balanceOf(address(msg.sender)) >= _amount,\\n            \\\"Insufficient Tokens\\\"\\n        );\\n\\n        earnTerms[_earnTermsId].usdcAccepted =\\n            earnTerms[_earnTermsId].usdcAccepted +\\n            _amount;\\n        require(\\n            earnTerms[_earnTermsId].usdcAccepted <=\\n                (earnTerms[_earnTermsId].usdcMax +\\n                    (earnTerms[_earnTermsId].usdcMax / 10))\\n        );\\n\\n        if (\\n            earnTerms[_earnTermsId].usdcAccepted >=\\n            earnTerms[_earnTermsId].usdcMax\\n        ) {\\n            _closeTerm(_earnTermsId);\\n        }\\n\\n        uint256 altaAmount = getContractTier(_amount, earnTerm);\\n\\n        uint256 earnDays = earnTerm.time * 1 days;\\n\\n        uint256 interestReserve = calculateInterestReserves(\\n            _amount,\\n            earnTerm.usdcRate\\n        );\\n\\n        uint256 amount = _amount - interestReserve;\\n\\n        USDC.safeTransferFrom(msg.sender, loanAddress, amount);\\n        USDC.safeTransferFrom(msg.sender, address(this), interestReserve);\\n\\n        _createContract(\\n            earnTerm,\\n            earnDays,\\n            _amount,\\n            altaAmount,\\n            _amount,\\n            address(USDC)\\n        );\\n    }\\n\\n    /**\\n     * Sends erc20 token to AltaFin Treasury Address and creates a contract with EarnContract[_id] terms for user.\\n     * @param _earnTermsId index of the earn term in earnTerms\\n     * @param _tokenAddress Contract address of input token\\n     * @param _amount Amount of token to be swapped for USDC principal\\n     */\\n    function openContractTokenSwapToUSDC(\\n        uint256 _earnTermsId,\\n        address _tokenAddress,\\n        uint256 _amount,\\n        address _swapTarget,\\n        bytes calldata _swapCallData\\n    ) public whenNotPaused {\\n        require(_amount > 0, \\\"Token amount must be greater than zero\\\");\\n        // User needs to first approve the token to be spent\\n        IERC20 token = IERC20(_tokenAddress);\\n        require(\\n            token.balanceOf(address(msg.sender)) >= _amount,\\n            \\\"Insufficient Tokens\\\"\\n        );\\n\\n        EarnTerm memory earnTerm = earnTerms[_earnTermsId];\\n\\n        require(earnTerm.open, \\\"Earn Term must be open\\\");\\n\\n        // Check if input token is ALTA\\n        if (_tokenAddress != address(ALTA)) {\\n            // Earn Term must accept other tokens\\n            require(earnTerm.otherTokens, \\\"token not accepted\\\");\\n            if (earnTerm.whitelist) {\\n                // Check to see if token is on whitelist for earn term\\n                require(checkTokenWhitelist(_tokenAddress, _earnTermsId));\\n            }\\n        }\\n\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Swap tokens for USDC\\n        uint256 amountUsdc = _swapToUSDCOnZeroX(\\n            _earnTermsId,\\n            _tokenAddress,\\n            _amount,\\n            payable(_swapTarget), // address payable swapTarget\\n            _swapCallData // bytes calldata swapCallData\\n        );\\n\\n        earnTerms[_earnTermsId].usdcAccepted =\\n            earnTerms[_earnTermsId].usdcAccepted +\\n            amountUsdc;\\n        require(\\n            earnTerms[_earnTermsId].usdcAccepted <=\\n                (earnTerms[_earnTermsId].usdcMax +\\n                    (earnTerms[_earnTermsId].usdcMax / 10)),\\n            \\\"usdc amount greater than max\\\"\\n        );\\n\\n        if (\\n            earnTerms[_earnTermsId].usdcAccepted >=\\n            earnTerms[_earnTermsId].usdcMax\\n        ) {\\n            _closeTerm(_earnTermsId);\\n        }\\n\\n        uint256 altaAmount = getContractTier(amountUsdc, earnTerm);\\n\\n        uint256 earnDays = earnTerm.time * 1 days;\\n\\n        _createContract(\\n            earnTerm,\\n            earnDays,\\n            amountUsdc,\\n            altaAmount,\\n            _amount,\\n            _tokenAddress\\n        );\\n    }\\n\\n    function _createContract(\\n        EarnTerm memory _earnTerm,\\n        uint256 _earnDays,\\n        uint256 _amountUsdc,\\n        uint256 _amountAlta,\\n        uint256 _assetAmount,\\n        address _assetAddress\\n    ) internal {\\n        EarnContract memory earnContract = EarnContract(\\n            msg.sender, // owner\\n            block.timestamp, // startTime\\n            _earnDays, //contractLength,\\n            _assetAddress, // tokenAddress\\n            _assetAmount, // tokenAmount\\n            _amountUsdc, // usdcPrincipal\\n            _earnTerm.usdcRate, // usdcRate\\n            0, // usdcInterestPaid\\n            _amountAlta, // altaAmount\\n            (_earnTerm.usdcRate * baseBonusMultiplier) / 100, // usdcBonusRate\\n            (_amountAlta * altaBonusMultiplier) / 100, // altaBonusAmount\\n            ContractStatus.OPEN\\n        );\\n\\n        earnContracts.push(earnContract);\\n        uint256 id = earnContracts.length - 1;\\n        earnContractToOwner[id] = msg.sender; // assign the earn contract to the owner;\\n        ownerEarnContractCount[msg.sender] =\\n            ownerEarnContractCount[msg.sender] +\\n            1; // increment the number of earn contract owned for the user;\\n        emit ContractOpened(msg.sender, id);\\n    }\\n\\n    function _migrateContract(EarnContract memory migrated) internal {\\n        EarnContract memory earnContract = EarnContract(\\n            migrated.owner, // owner\\n            migrated.startTime, // startTime\\n            migrated.contractLength, // contractLength,\\n            migrated.tokenAddress, // tokenAddress\\n            migrated.tokenAmount, // tokenAmount\\n            migrated.usdcPrincipal, // usdcPrincipal\\n            migrated.usdcRate, // usdcRate\\n            migrated.usdcInterestPaid, // usdcInterestPaid\\n            migrated.altaAmount, // altaAmount\\n            migrated.usdcBonusRate, // usdcBonusRate\\n            migrated.altaBonusAmount, // altaBonusAmount\\n            migrated.status\\n        );\\n\\n        earnContracts.push(earnContract);\\n        uint256 id = earnContracts.length - 1;\\n        earnContractToOwner[id] = migrated.owner; // assign the earn contract to the owner;\\n        ownerEarnContractCount[migrated.owner] =\\n            ownerEarnContractCount[migrated.owner] +\\n            1; // increment the number of earn contract owned for the user;\\n        emit ContractOpened(migrated.owner, id);\\n    }\\n\\n    /**\\n     * Sends the amount usdc and alta owed to the contract owner and deletes the EarnContract from the mapping.\\n     * @param _earnContractId index of earn contract in earnContracts\\n     */\\n    function closeContract(uint256 _earnContractId) external onlyOwner {\\n        require(\\n            earnContracts[_earnContractId].status != ContractStatus.CLOSED,\\n            \\\"Contract is already closed\\\"\\n        );\\n        (uint256 usdcAmount, uint256 altaAmount) = _calculatePaymentAmounts(\\n            _earnContractId\\n        );\\n\\n        address owner = earnContracts[_earnContractId].owner;\\n\\n        USDC.safeTransferFrom(msg.sender, address(owner), usdcAmount);\\n        ALTA.safeTransferFrom(msg.sender, address(owner), altaAmount);\\n\\n        emit ContractClosed(owner, _earnContractId);\\n\\n        _removeAllContractBids(_earnContractId);\\n\\n        // Mark the contract as closed\\n        require(\\n            _earnContractId < earnContracts.length,\\n            \\\"Contract Index not in the array\\\"\\n        );\\n\\n        earnContracts[_earnContractId].status = ContractStatus.CLOSED;\\n    }\\n\\n    /**\\n     * Internal function to calculate the amount of USDC and ALTA needed to close an earnContract\\n     * @param _earnContractId index of earn contract in earnContracts\\n     */\\n    // TODO: Test this function thoroughly\\n    function _calculatePaymentAmounts(uint256 _earnContractId)\\n        internal\\n        view\\n        returns (uint256 usdcAmount, uint256)\\n    {\\n        EarnContract memory earnContract = earnContracts[_earnContractId];\\n        (uint256 usdcInterestAmount, uint256 altaAmount) = calculateInterest(\\n            _earnContractId\\n        );\\n        usdcAmount = earnContract.usdcPrincipal + usdcInterestAmount;\\n        return (usdcAmount, altaAmount);\\n    }\\n\\n    function redeemInterestUSDC(uint256 _earnContractId) public {\\n        EarnContract memory earnContract = earnContracts[_earnContractId];\\n        require(earnContract.owner == msg.sender);\\n        (uint256 usdcInterestAmount, ) = calculateInterest(_earnContractId);\\n        earnContract.usdcInterestPaid =\\n            earnContract.usdcInterestPaid +\\n            usdcInterestAmount;\\n        USDC.safeTransfer(msg.sender, usdcInterestAmount);\\n    }\\n\\n    function calculateInterest(uint256 _earnContractId)\\n        public\\n        view\\n        returns (uint256 usdcInterestAmount, uint256 altaAmount)\\n    {\\n        EarnContract memory earnContract = earnContracts[_earnContractId];\\n        uint256 timeOpen = block.timestamp -\\n            earnContracts[_earnContractId].startTime;\\n\\n        if (timeOpen <= earnContract.contractLength + 7 days) {\\n            // Calculate the total amount of usdc to be paid out (principal + interest)\\n            usdcInterestAmount =\\n                (earnContract.usdcPrincipal *\\n                    earnContract.usdcRate *\\n                    timeOpen) /\\n                365 days /\\n                10000;\\n            altaAmount = earnContract.altaAmount;\\n        } else {\\n            uint256 extraTime = timeOpen - earnContract.contractLength;\\n            uint256 usdcRegInterest = earnContract.usdcPrincipal +\\n                ((earnContract.usdcPrincipal *\\n                    earnContract.usdcRate *\\n                    earnContract.contractLength) /\\n                    365 days /\\n                    10000);\\n\\n            uint256 usdcBonusInterest = (earnContract.usdcPrincipal *\\n                earnContract.usdcBonusRate *\\n                extraTime) /\\n                365 days /\\n                10000;\\n            usdcInterestAmount = usdcRegInterest + usdcBonusInterest;\\n            altaAmount = earnContract.altaBonusAmount;\\n        }\\n\\n        usdcInterestAmount = usdcInterestAmount - earnContract.usdcInterestPaid;\\n        return (usdcInterestAmount, altaAmount);\\n    }\\n\\n    function calculateInterestReserves(\\n        uint256 _usdcPrincipal,\\n        uint256 _usdcRate\\n    ) public view returns (uint256 usdcInterestAmount) {\\n        // Calculate the amount of usdc to be kept in address(this) upon earn contract creation\\n        usdcInterestAmount =\\n            (_usdcPrincipal * _usdcRate * reserveDays) /\\n            365 days /\\n            10000;\\n        return usdcInterestAmount;\\n    }\\n\\n    /**\\n     * Sends all Ether in the contract to the specified wallet.\\n     * @param _addr Address of wallet to send ether\\n     */\\n    function withdraw(address payable _addr) public onlyOwner {\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = _addr.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * Sends all USDC in the contract to the specified wallet.\\n     * @param _addr Address of wallet to send USDC\\n     */\\n    function withdrawUSDC(address payable _addr) public onlyOwner {\\n        uint256 amount = USDC.balanceOf(address(this));\\n        USDC.safeTransfer(_addr, amount);\\n    }\\n\\n    /**\\n     * @param _to address of transfer recipient\\n     * @param _amount amount of ether to be transferred\\n     */\\n    // Function to transfer Ether from this contract to address from input\\n    function transfer(address payable _to, uint256 _amount) public onlyOwner {\\n        // Note that \\\"to\\\" is declared as payable\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * Gets the current value of all earn terms for a given user\\n     * @param _owner address of owner to query\\n     */\\n    function getCurrentUsdcValueByOwner(address _owner)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory result = getContractsByOwner(_owner);\\n        uint256 currValue = 0;\\n\\n        for (uint256 i = 0; i < result.length; i++) {\\n            EarnContract memory earnContract = earnContracts[result[i]];\\n            if (earnContract.status != ContractStatus.CLOSED) {\\n                uint256 timeHeld = (block.timestamp - earnContract.startTime) /\\n                    365 days;\\n                currValue =\\n                    currValue +\\n                    earnContract.usdcPrincipal +\\n                    (earnContract.usdcPrincipal *\\n                        earnContract.usdcRate *\\n                        timeHeld);\\n            }\\n        }\\n        return currValue;\\n    }\\n\\n    /**\\n     * Gets the value at time of redemption for all earns terms for a given user\\n     * @param _owner address of owner to query\\n     */\\n    function getRedemptionUsdcValueByOwner(address _owner)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory result = getContractsByOwner(_owner);\\n        uint256 currValue = 0;\\n\\n        for (uint256 i = 0; i < result.length; i++) {\\n            EarnContract memory earnContract = earnContracts[result[i]];\\n            if (earnContract.status != ContractStatus.CLOSED) {\\n                currValue =\\n                    currValue +\\n                    earnContract.usdcPrincipal +\\n                    (\\n                        ((earnContract.usdcPrincipal *\\n                            earnContract.usdcRate *\\n                            earnContract.contractLength) / 365 days)\\n                    );\\n            }\\n        }\\n        return currValue;\\n    }\\n\\n    /**\\n     * Gets every earn contract for a given user\\n     * @param _owner Wallet Address for expected earn contract owner\\n     */\\n    function getContractsByOwner(address _owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory result = new uint256[](ownerEarnContractCount[_owner]);\\n        uint256 counter = 0;\\n        for (uint256 i = 0; i < earnContracts.length; i++) {\\n            if (earnContractToOwner[i] == _owner) {\\n                result[counter] = i;\\n                counter++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function getAllEarnContracts() public view returns (EarnContract[] memory) {\\n        return earnContracts;\\n    }\\n\\n    /**\\n     * Swaps ERC20->ERC20 tokens held by this contract using a 0x-API quote.\\n     * @param _swapTarget 'To' field from the 0x API response\\n     * @param _swapCallData 'Data' field from the 0x API response\\n     */\\n    function _swapToUSDCOnZeroX(\\n        uint256 _earnTermId,\\n        address _token,\\n        uint256 _amount,\\n        // The `to` field from the API response.\\n        address payable _swapTarget,\\n        // The `data` field from the API response.\\n        bytes calldata _swapCallData\\n    ) internal returns (uint256) {\\n        uint256 currentUsdcBalance = USDC.balanceOf(address(this));\\n\\n        require(IERC20(_token).approve(_swapTarget, _amount), \\\"approve failed\\\");\\n\\n        // Call the encoded swap function call on the contract at `swapTarget`,\\n        // passing along any ETH attached to this function call to cover protocol fees.\\n        (bool success, ) = _swapTarget.call{value: msg.value}(_swapCallData);\\n        require(success, \\\"SWAP_CALL_FAILED\\\");\\n\\n        uint256 usdcAmount = USDC.balanceOf(address(this)) - currentUsdcBalance;\\n        uint256 interestReserve = calculateInterestReserves(\\n            usdcAmount,\\n            earnTerms[_earnTermId].usdcRate\\n        );\\n        uint256 amount = usdcAmount - interestReserve;\\n        USDC.safeTransfer(loanAddress, amount);\\n        return usdcAmount;\\n    }\\n\\n    /**\\n     * @param _token Token contract address\\n     * @param _earnTermsId Index of earn term in earnTerms\\n     */\\n    function checkTokenWhitelist(address _token, uint256 _earnTermsId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        EarnTerm memory earnTerm = earnTerms[_earnTermsId];\\n        for (uint256 i = 0; i < earnTerm.tokensAccepted.length; i++) {\\n            if (_token == earnTerm.tokensAccepted[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * Lists the associated earn contract for sale on the market\\n     * @param _earnContractId index of earn contract in earnContracts\\n     */\\n    function putSale(uint256 _earnContractId) external whenNotPaused {\\n        require(\\n            msg.sender == earnContractToOwner[_earnContractId],\\n            \\\"Msg.sender is not the owner\\\"\\n        );\\n        earnContracts[_earnContractId].status = ContractStatus.FORSALE;\\n        emit ContractForSale(_earnContractId);\\n    }\\n\\n    /**\\n     * Submits a bid for an earn contract on sale in the market\\n     * User must sign an approval transaction for first. ALTA.approve(address(this), _amount);\\n     * @param _earnContractId index of earn contract in earnContracts\\n     * @param _amount Amount of ALTA offered for bid\\n     */\\n    function makeBid(uint256 _earnContractId, uint256 _amount)\\n        external\\n        whenNotPaused\\n    {\\n        EarnContract memory earnContract = earnContracts[_earnContractId];\\n        require(\\n            earnContract.status == ContractStatus.FORSALE,\\n            \\\"Contract not for sale\\\"\\n        );\\n\\n        Bid memory bid = Bid(\\n            msg.sender, // bidder\\n            earnContract.owner, // to\\n            _earnContractId, // earnContractId\\n            _amount, // amount\\n            false // accepted\\n        );\\n\\n        bids.push(bid);\\n        uint256 bidId = bids.length - 1;\\n        earnContractBidCount[_earnContractId] =\\n            earnContractBidCount[_earnContractId] +\\n            1; // increment the number of bids for the earn contract;\\n\\n        // Send the bid amount to this contract\\n        ALTA.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit BidMade(msg.sender, bidId);\\n    }\\n\\n    /**\\n     * Called by the owner of the earn contract for sale\\n     * Transfers the bid amount to the owner of the earn contract and transfers ownership of the contract to the bidder\\n     * @param _bidId index of bid in Bids\\n     */\\n    function acceptBid(uint256 _bidId) external whenNotPaused {\\n        Bid memory bid = bids[_bidId];\\n        uint256 earnContractId = bid.earnContractId;\\n\\n        uint256 fee = (bid.amount * transferFee) / 1000;\\n        if (fee > 0) {\\n            bid.amount = bid.amount - fee;\\n        }\\n\\n        // Transfer bid ALTA to contract seller\\n        require(\\n            msg.sender == earnContractToOwner[earnContractId],\\n            \\\"Msg.sender is not the owner of the earn contract\\\"\\n        );\\n        if (fee > 0) {\\n            ALTA.safeTransfer(feeAddress, fee);\\n            bid.amount = bid.amount - fee;\\n        }\\n        ALTA.safeTransfer(bid.to, bid.amount);\\n\\n        bids[_bidId].accepted = true;\\n\\n        // Transfer ownership of earn contract to bidder\\n        emit EarnContractOwnershipTransferred(\\n            bid.to,\\n            bid.bidder,\\n            earnContractId\\n        );\\n        earnContracts[earnContractId].owner = bid.bidder;\\n        earnContractToOwner[earnContractId] = bid.bidder;\\n        ownerEarnContractCount[bid.bidder] =\\n            ownerEarnContractCount[bid.bidder] +\\n            1;\\n\\n        // Remove all bids\\n        _removeContractFromMarket(earnContractId);\\n    }\\n\\n    /**\\n     * Remove Contract From Market\\n     * @param _earnContractId index of earn contract in earnContracts\\n     */\\n    function removeContractFromMarket(uint256 _earnContractId) external {\\n        require(\\n            earnContractToOwner[_earnContractId] == msg.sender,\\n            \\\"Msg.sender is not the owner of the earn contract\\\"\\n        );\\n        _removeContractFromMarket(_earnContractId);\\n    }\\n\\n    /**\\n     * Removes all contracts bids and sets the status flag back to open\\n     * @param _earnContractId index of earn contract in earnContracts\\n     */\\n    function _removeContractFromMarket(uint256 _earnContractId) internal {\\n        earnContracts[_earnContractId].status = ContractStatus.OPEN;\\n        _removeAllContractBids(_earnContractId);\\n        emit ContractOffMarket(_earnContractId);\\n    }\\n\\n    /**\\n     * Getter functions for all bids of a specified earn contract\\n     * @param _earnContractId index of earn contract in earnContracts\\n     */\\n    function getBidsByContract(uint256 _earnContractId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory result = new uint256[](\\n            earnContractBidCount[_earnContractId]\\n        );\\n        uint256 counter = 0;\\n        for (uint256 i = 0; i < bids.length; i++) {\\n            if (bids[i].earnContractId == _earnContractId) {\\n                result[counter] = i;\\n                counter++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * Sends all bid funds for an earn contract back to the bidder and removes them arrays and mappings\\n     * @param _earnContractId index of earn contract in earnContracts\\n     */\\n    function _removeAllContractBids(uint256 _earnContractId) internal {\\n        uint256[] memory contractBids = getBidsByContract(_earnContractId);\\n        for (uint256 i = 0; i < contractBids.length; i++) {\\n            uint256 bidId = contractBids[0];\\n            Bid memory bid = bids[bidId];\\n            if (bid.accepted != true) {\\n                ALTA.safeTransfer(bid.bidder, bid.amount);\\n            }\\n            _removeBid(bidId);\\n        }\\n    }\\n\\n    /**\\n     * Sends bid funds back to bidder and removes the bid from the array\\n     * @param _bidId index of bid in Bids\\n     */\\n    function removeBid(uint256 _bidId) external {\\n        Bid memory bid = bids[_bidId];\\n        require(msg.sender == bid.bidder, \\\"Msg.sender is not the bidder\\\");\\n        ALTA.safeTransfer(bid.bidder, bid.amount);\\n\\n        _removeBid(_bidId);\\n    }\\n\\n    // TODO: Test that the mappings and arrays are updated correctly\\n    /**\\n     * @param _bidId index of bid in Bids\\n     */\\n    function _removeBid(uint256 _bidId) internal {\\n        require(_bidId < bids.length, \\\"Bid ID longer than array length\\\");\\n        Bid memory bid = bids[_bidId];\\n\\n        // Update the mappings\\n        uint256 earnContractId = bid.earnContractId;\\n        if (earnContractBidCount[earnContractId] > 0) {\\n            earnContractBidCount[earnContractId] =\\n                earnContractBidCount[earnContractId] -\\n                1;\\n        }\\n\\n        // Update the array\\n        if (bids.length > 1) {\\n            bids[_bidId] = bids[bids.length - 1];\\n        }\\n        bids.pop();\\n    }\\n\\n    /**\\n     * Set the lower bound USDC amount needed to receive the respective ALTA amounts\\n     * @param _highTier Minimum usdc amount needed to qualify for earn contract high tier\\n     * @param _medTier Minimum usdc amount needed to qualify for earn contract medium tier\\n     * @param _lowTier Minimum usdc amount needed to quallify for earn contract low tier\\n     */\\n    function setAltaContractTiers(\\n        uint256 _highTier,\\n        uint256 _medTier,\\n        uint256 _lowTier\\n    ) external onlyOwner {\\n        highTier = _highTier; // initially $150k\\n        medTier = _medTier; // initially $100k\\n        lowTier = _lowTier; // initially $50k\\n    }\\n\\n    /**\\n     * Set the transfer fee rate for contracts sold on the market place\\n     * @param _transferFee Percent of accepted earn contract bid to be sent to AltaFin wallet\\n     */\\n    function setTransferFee(uint256 _transferFee) external onlyOwner {\\n        transferFee = _transferFee;\\n    }\\n\\n    /**\\n     * Set ALTA ERC20 token address\\n     * @param _ALTA Address of ALTA Token contract\\n     */\\n    function setAltaAddress(address _ALTA) external onlyOwner {\\n        ALTA = IERC20(_ALTA);\\n    }\\n\\n    /**\\n     * Set the reserveDays\\n     * @param _reserveDays Number of days interest to be stored in address(this) upon contract creation\\n     */\\n    function setReserveDays(uint256 _reserveDays) external onlyOwner {\\n        reserveDays = _reserveDays;\\n    }\\n\\n    /**\\n     * Set the Bonus USDC multiplier ( e.g. 20 = 2x multiplier on the interest rate)\\n     * @param _baseBonusMultiplier Base Bonus multiplier for contract left open after contract length completion\\n     */\\n    function setBaseBonusMultiplier(uint256 _baseBonusMultiplier)\\n        external\\n        onlyOwner\\n    {\\n        baseBonusMultiplier = _baseBonusMultiplier;\\n    }\\n\\n    /**\\n     * Set the Bonus ALTA multiplier ( e.g. 20 = 2x multiplier on the ALTA Amount)\\n     * @param _altaBonusMultiplier ALTA Bonus multiplier for contract left open after contract length completion\\n     */\\n    function setAltaBonusMultiplier(uint256 _altaBonusMultiplier)\\n        external\\n        onlyOwner\\n    {\\n        altaBonusMultiplier = _altaBonusMultiplier;\\n    }\\n\\n    /**\\n     * Set the loanAddress\\n     * @param _loanAddress Wallet address to recieve loan funds\\n     */\\n    function setLoanAddress(address _loanAddress) external onlyOwner {\\n        require(_loanAddress != address(0));\\n        loanAddress = _loanAddress;\\n    }\\n\\n    /**\\n     * Set the feeAddress\\n     * @param _feeAddress Wallet address to recieve fee funds\\n     */\\n    function setFeeAddress(address _feeAddress) external onlyOwner {\\n        require(_feeAddress != address(0));\\n        feeAddress = _feeAddress;\\n    }\\n\\n    /**\\n     * Pause the contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * Unpause the contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_USDC\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_ALTA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loanAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcInterestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBonusRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaBonusAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Earn.ContractStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Earn.EarnContract[]\",\"name\":\"migratedContracts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"BidMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"}],\"name\":\"ContractClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"}],\"name\":\"ContractForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"}],\"name\":\"ContractOffMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"}],\"name\":\"ContractOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"}],\"name\":\"EarnContractOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALTA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_usdcRate\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_altaHighAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_altaMedAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_altaLowAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_otherTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_whitelist\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_tokensAccepted\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_usdcMax\",\"type\":\"uint256\"}],\"name\":\"addTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"altaBonusMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBonusMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"}],\"name\":\"calculateInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcInterestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdcPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdcRate\",\"type\":\"uint256\"}],\"name\":\"calculateInterestReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcInterestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_earnTermsId\",\"type\":\"uint256\"}],\"name\":\"checkTokenWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"}],\"name\":\"closeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnTermsId\",\"type\":\"uint256\"}],\"name\":\"closeTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnContractBidCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnContractToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcInterestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBonusRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaBonusAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Earn.ContractStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnTerms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"usdcRate\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"altaHighAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"altaMedAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"altaLowAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"otherTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"usdcMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"internalType\":\"struct Earn.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllEarnContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcInterestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBonusRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaBonusAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Earn.ContractStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Earn.EarnContract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllEarnTerms\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"usdcRate\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"altaHighAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"altaMedAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"altaLowAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"otherTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"tokensAccepted\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"usdcMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"internalType\":\"struct Earn.EarnTerm[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOpenEarnTerms\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"usdcRate\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"altaHighAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"altaMedAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"altaLowAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"otherTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"tokensAccepted\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"usdcMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"internalType\":\"struct Earn.EarnTerm[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"}],\"name\":\"getBidsByContract\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getContractsByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getCurrentUsdcValueByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getRedemptionUsdcValueByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"medTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnTermsId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapCallData\",\"type\":\"bytes\"}],\"name\":\"openContractTokenSwapToUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnTermsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"openContractUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnTermsId\",\"type\":\"uint256\"}],\"name\":\"openTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerEarnContractCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"}],\"name\":\"putSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"}],\"name\":\"redeemInterestUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"removeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"}],\"name\":\"removeContractFromMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ALTA\",\"type\":\"address\"}],\"name\":\"setAltaAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_altaBonusMultiplier\",\"type\":\"uint256\"}],\"name\":\"setAltaBonusMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_medTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowTier\",\"type\":\"uint256\"}],\"name\":\"setAltaContractTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseBonusMultiplier\",\"type\":\"uint256\"}],\"name\":\"setBaseBonusMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanAddress\",\"type\":\"address\"}],\"name\":\"setLoanAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserveDays\",\"type\":\"uint256\"}],\"name\":\"setReserveDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnTermsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_usdcRate\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_altaHighAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_altaMedAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_altaLowAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_otherTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_whitelist\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_tokensAccepted\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_usdcMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdcAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"updateTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdrawUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Earn", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000e0cca86b254005889ac3a81e737f56a14f4a38f5000000000000000000000000bdffbabfc682f4a800ebfba3ed147fd629fc8572000000000000000000000000bdffbabfc682f4a800ebfba3ed147fd629fc857200000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d21602919e81e32a456195e9ce34215af504535a00000000000000000000000000000000000000000000000000000000621b9c150000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000e46f290cd59195a83e757891430d8d517d16b334000000000000000000000000000000000000000000000172cd9d6806c8bfc00000000000000000000000000000000000000000000000000000000000639f0921000000000000000000000000000000000000000000000000000000000000028f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}