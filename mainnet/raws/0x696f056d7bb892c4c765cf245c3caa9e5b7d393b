{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/verify/FlatBuilderShop.sol\": {\r\n      \"content\": \"// File: contracts/core/NiftyEntity.sol\\n\\n/**\\n * @dev Authenticator of state mutating operations for Nifty Gateway contracts. \\n *\\n * addresses for stateful operations. \\n *\\n * Rinkeby: 0xCefBf44ff649B6E0Bc63785699c6F1690b8cF73b\\n * Mainnet: 0x6e53130dDfF21E3BC963Ee902005223b9A202106\\n */\\ncontract NiftyEntity {\\n   \\n   // Address of {NiftyRegistry} contract. \\n   address internal immutable niftyRegistryContract;\\n   \\n   /**\\n    * @dev Determines whether accounts are allowed to invoke state mutating operations on child contracts.\\n    */\\n    modifier onlyValidSender() {\\n        NiftyRegistry niftyRegistry = NiftyRegistry(niftyRegistryContract);\\n        bool isValid = niftyRegistry.isValidNiftySender(msg.sender);\\n        require(isValid, \\\"NiftyEntity: Invalid msg.sender\\\");\\n        _;\\n    }\\n    \\n   /**\\n    * @param _niftyRegistryContract Points to the repository of authenticated\\n    */\\n    constructor(address _niftyRegistryContract) {\\n        niftyRegistryContract = _niftyRegistryContract;\\n    }\\n}\\n\\n/**\\n * @dev Defined to mediate interaction with externally deployed {NiftyRegistry} dependency. \\n */\\ninterface NiftyRegistry {\\n   function isValidNiftySender(address sending_key) external view returns (bool);\\n}\\n\\n// File: contracts/interface/IERC165.sol\\n\\n/**\\n * @title IERC165\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\\n */\\ninterface IERC165 {\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param interfaceId The interface identifier, as specified in ERC-165\\n   * @dev Interface identification is specified in ERC-165. This function\\n   * uses less than 30,000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    external\\n    view\\n    returns (bool);\\n}\\n\\n// File: contracts/interface/IERC721.sol\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\\n// File: contracts/interface/IERC721Receiver.sol\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\\n// File: contracts/interface/IERC721Metadata.sol\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n// File: contracts/util/Context.sol\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\n// File: contracts/util/Strings.sol\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n}\\n\\n// File: contracts/standard/ERC165.sol\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\n// File: contracts/core/ERC721.sol\\n\\n/**\\n * @dev Nifty Gateway implementation of Non-Fungible Token Standard.\\n */\\ncontract ERC721 is NiftyEntity, Context, ERC165, IERC721, IERC721Metadata {\\n\\n    // Tracked individual instance spawned by {BuilderShop} contract. \\n    uint immutable public _id;\\n\\n    // Number of distinct NFTs housed in this contract. \\n    uint immutable public _typeCount;\\n\\n    // Intial receiver of all newly minted NFTs.\\n    address immutable public _defaultOwner;\\n\\n    // Component(s) of 'tokenId' calculation. \\n    uint immutable internal topLevelMultiplier;\\n    uint immutable internal midLevelMultiplier;\\n\\n    // Token name.\\n    string private _name;\\n\\n    // Token symbol.\\n    string private _symbol;\\n\\n    // Token artifact location.\\n    string private _baseURI;\\n\\n    // Mapping from Nifty type to name of token.\\n    mapping(uint256 => string) private _niftyTypeName;\\n\\n    // Mapping from Nifty type to IPFS hash of canonical artifcat file.\\n    mapping(uint256 => string) private _niftyTypeIPFSHashes;\\n\\n    // Mapping from token ID to owner address.\\n    mapping (uint256 => address) internal _owners;\\n\\n    // Mapping owner address to token count, by aggregating all _typeCount NFTs in the contact.\\n    mapping (address => uint256) internal _balances;\\n\\n    // Mapping from token ID to approved address.\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals.\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the token collection.\\n     *\\n     * @param name_ Of the collection being deployed.\\n     * @param symbol_ Shorthand token identifier, for wallets, etc.\\n     * @param id_ Number instance deployed by {BuilderShop} contract.\\n     * @param baseURI_ The location where the artifact assets are stored.\\n     * @param typeCount_ The number of different Nifty types (different \\n     * individual NFTs) associated with the deployed collection.\\n     * @param defaultOwner_ Intial receiver of all newly minted NFTs.\\n     * @param niftyRegistryContract Points to the repository of authenticated\\n     * addresses for stateful operations. \\n     */\\n    constructor(string memory name_, \\n                string memory symbol_,\\n                uint256 id_,\\n                string memory baseURI_,\\n                uint256 typeCount_,\\n                address defaultOwner_, \\n                address niftyRegistryContract) NiftyEntity(niftyRegistryContract) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _id = id_;\\n        _baseURI = baseURI_;\\n        _typeCount = typeCount_;\\n        _defaultOwner = defaultOwner_;\\n\\n        midLevelMultiplier = 10000;\\n        topLevelMultiplier = id_ * 100000000;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the link to artificat location for a given token by 'tokenId'.\\n     * Throws if the token ID does not exist. May return an empty string.\\n     * @param tokenId uint256 ID of the token to query.\\n     * @return The location where the artifact assets are stored.\\n     */\\n    function tokenURI(uint256 tokenId) external view override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        string memory tokenIdStr = Strings.toString(tokenId);\\n        return string(abi.encodePacked(_baseURI, tokenIdStr));\\n    }\\n\\n    /**\\n     * @dev Returns an IPFS hash for a given token ID.\\n     * Throws if the token ID does not exist. May return an empty string.\\n     * @param tokenId uint256 ID of the token to query.\\n     * @return IPFS hash for this (_typeCount) NFT. \\n     */\\n    function tokenIPFSHash(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: IPFS hash query for nonexistent token\\\");\\n        uint256 niftyType = _getNiftyTypeId(tokenId);\\n        return _niftyTypeIPFSHashes[niftyType];\\n    }\\n    \\n    /**\\n     * @dev Determine which NFT in the contract (_typeCount) is associated \\n     * with this 'tokenId'.\\n     */\\n    function _getNiftyTypeId(uint256 tokenId) private view returns (uint256) {\\n        return (tokenId - topLevelMultiplier) / midLevelMultiplier;\\n    }\\n\\n    /**\\n     * @dev Returns the Name for a given token ID.\\n     * Throws if the token ID does not exist. May return an empty string.\\n     * @param tokenId uint256 ID of the token to query\\n     */\\n    function tokenName(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: Name query for nonexistent token\\\");\\n        uint256 niftyType = _getNiftyTypeId(tokenId);\\n        return _niftyTypeName[niftyType];\\n    }\\n   \\n    /**\\n     * @dev Internal function to set the token IPFS hash for a nifty type.\\n     * @param niftyType uint256 ID component of the token to set its IPFS hash\\n     * @param ipfs_hash string IPFS link to assign\\n     */\\n    function _setTokenIPFSHashNiftyType(uint256 niftyType, string memory ipfs_hash) internal {\\n        require(bytes(_niftyTypeIPFSHashes[niftyType]).length == 0, \\\"ERC721Metadata: IPFS hash already set\\\");\\n        _niftyTypeIPFSHashes[niftyType] = ipfs_hash;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the name for a nifty type.\\n     * @param niftyType uint256 of nifty type name to be set\\n     * @param nifty_type_name name of nifty type\\n     */\\n    function _setNiftyTypeName(uint256 niftyType, string memory nifty_type_name) internal {\\n        _niftyTypeName[niftyType] = nifty_type_name;\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (isContract(to)) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\\n// File: contracts/standard/ERC721Burnable.sol\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\\n// File: contracts/core/NiftyBuilderInstance.sol\\n\\n/** \\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  .***   XXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  ,*********  XXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXX  ***************  XXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXX  .*******************  XXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXX  ***********    **********  XXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXX   ***********       ***********  XXXXXX\\n * XXXXXXXXXXXXXXXXXX  ***********         ***************  XXX\\n * XXXXXXXXXXXXXXXX  ***********           ****    ********* XX\\n * XXXXXXXXXXXXXXXX *********      ***    ***      *********  X\\n * XXXXXXXXXXXXXXXX  **********  *****          *********** XXX\\n * XXXXXXXXXXXX   /////.*************         ***********  XXXX\\n * XXXXXXXXX  /////////...***********      ************  XXXXXX\\n * XXXXXXX/ ///////////..... /////////   ///////////   XXXXXXXX\\n * XXXXXX  /    //////.........///////////////////   XXXXXXXXXX\\n * XXXXXXXXXX .///////...........//////////////   XXXXXXXXXXXXX\\n * XXXXXXXXX .///////.....//..////  /////////  XXXXXXXXXXXXXXXX\\n * XXXXXXX# /////////////////////  XXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXX   ////////////////////   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XX   ////////////// //////   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n *\\n * @dev Nifty Gateway extension of customized NFT contract, encapsulates\\n * logic for minting new tokens, and concluding the minting process. \\n */\\ncontract NiftyBuilderInstance is ERC721, ERC721Burnable {\\n\\n    // The artist associated with the collection.\\n    string private _creator;\\n\\n    // Number of NFTs minted for a given 'typeCount'. \\n    mapping (uint256 => uint256) public _mintCount;\\n\\n    /**\\n     * @dev Serves as a gas cost optimized boolean flag \\n     * to indicate whether the minting process has been \\n     * concluded for a given 'typeCount', correspinds \\n     * to the {_getFinalized} and {setFinalized}.\\n     */\\n    mapping (uint256 => bytes32) private _finalized;\\n\\n    /**\\n     * @dev Emitted when tokens are created.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed fromAddress, address indexed toAddress);\\n\\n    /**\\n     * @dev Ultimate instantiation of a Nifty Gateway NFT collection. \\n     * \\n     * @param name Of the collection being deployed.\\n     * @param symbol Shorthand token identifier, for wallets, etc.\\n     * @param id Number instance deployed by {BuilderShop} contract.\\n     * @param typeCount The number of different Nifty types (different \\n     * individual NFTs) associated with the deployed collection.\\n     * @param baseURI The location where the artifact assets are stored.\\n     * @param creator_ The artist associated with the collection.\\n     * @param niftyRegistryContract Points to the repository of authenticated\\n     * addresses for stateful operations. \\n     * @param defaultOwner Intial receiver of all newly minted NFTs.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 id,\\n        uint256 typeCount,\\n        string memory baseURI,\\n        string memory creator_,\\n        address niftyRegistryContract,\\n        address defaultOwner) ERC721(name, symbol, id, baseURI, typeCount, defaultOwner, niftyRegistryContract) {\\n\\n        _creator = creator_;\\n    }\\n\\n    /**\\n     * @dev Generate canonical Nifty Gateway token representation. \\n     * Nifty contracts have a data model called a 'niftyType' (typeCount) \\n     * The 'niftyType' refers to a specific nifty in our contract, note \\n     * that it gives no information about the edition size. In a given \\n     * contract, 'niftyType' 1 could be an edition of 10, while 'niftyType' \\n     * 2 is a 1/1, etc.\\n     * The token IDs are encoded as follows: {id}{niftyType}{edition #}\\n     * 'niftyType' has 4 digits, and edition number does as well, to allow \\n     * for 9999 possible 'niftyType' and 9999 of each edition in each contract.\\n     * Example token id: [500010270]\\n     * This is from contract #5, it is 'niftyType' 1 in the contract, and it is \\n     * edition #270 of 'niftyType' 1.\\n     */\\n    function _encodeTokenId(uint256 niftyType, uint256 tokenNumber) private view returns (uint256) {\\n        return (topLevelMultiplier + (niftyType * midLevelMultiplier) + tokenNumber);\\n    }\\n\\n    /**\\n     * @dev Determine whether it is possible to mint additional NFTs for this 'niftyType'.\\n     */\\n    function _getFinalized(uint256 niftyType) public view returns (bool) {\\n        bytes32 chunk = _finalized[niftyType / 256];\\n        return (chunk & bytes32(1 << (niftyType % 256))) != 0x0;\\n    }\\n\\n    /**\\n     * @dev Prevent the minting of additional NFTs of this 'niftyType'.\\n     */\\n    function setFinalized(uint256 niftyType) public onlyValidSender {\\n        uint256 quotient = niftyType / 256;\\n        bytes32 chunk = _finalized[quotient];\\n        _finalized[quotient] = chunk | bytes32(1 << (niftyType % 256));\\n    }\\n\\n    /**\\n     * @dev The artist of this collection.\\n     */\\n    function creator() public view virtual returns (string memory) {\\n        return _creator;\\n    }\\n\\n    /**\\n     * @dev Assign the root location where the artifact assets are stored.\\n     */\\n    function setBaseURI(string memory baseURI) public onlyValidSender {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /**\\n     * @dev Allow owner to change nifty name, by 'niftyType'.\\n     */\\n    function setNiftyName(uint256 niftyType, string memory niftyName) public onlyValidSender {\\n        _setNiftyTypeName(niftyType, niftyName);\\n    }\\n\\n    /**\\n     * @dev Assign the IPFS hash of canonical artifcat file, by 'niftyType'.\\n     */   \\n    function setNiftyIPFSHash(uint256 niftyType, string memory hashIPFS) public onlyValidSender {\\n        _setTokenIPFSHashNiftyType(niftyType, hashIPFS);\\n    }\\n\\n    /**\\n     * @dev Create specified number of nifties en masse.\\n     * Once an NFT collection is spawned by the factory contract, we make calls to set the IPFS\\n     * hash (above) for each Nifty type in the collection. \\n     * Subsequently calls are issued to this function to mint the appropriate number of tokens \\n     * for the project.\\n     */\\n    function mintNifty(uint256 niftyType, uint256 count) public onlyValidSender {\\n        require(!_getFinalized(niftyType), \\\"NiftyBuilderInstance: minting concluded for nifty type\\\");\\n            \\n        uint256 tokenNumber = _mintCount[niftyType] + 1;\\n        uint256 tokenId00 = _encodeTokenId(niftyType, tokenNumber);\\n        uint256 tokenId01 = tokenId00 + count - 1;\\n        \\n        for (uint256 tokenId = tokenId00; tokenId <= tokenId01; tokenId++) {\\n            _owners[tokenId] = _defaultOwner;\\n        }\\n        _mintCount[niftyType] += count;\\n        _balances[_defaultOwner] += count;\\n\\n        emit ConsecutiveTransfer(tokenId00, tokenId01, address(0), _defaultOwner);\\n    }\\n\\n}\\n\\n// File: contracts/core/BuilderShop.sol\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n\\n\\n/**\\n *   ::::::::::::::::::::::::::::::::::::::::::::\\n * ::::::::::::::::::::::::::::::::::::::::::::::::\\n * ::::::::::::::::::::::::::::::::::::::::::::::::\\n * ::::::::::::NNNNNNNNN:::::::NNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNNNN::::::NNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNNNNN:::::NNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNNNNNN::::NNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNNNNNNN:::NNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNNNNNNNN::NNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNN:NNNNNN:NNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNN::NNNNNNNNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNN:::NNNNNNNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNN::::NNNNNNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNN:::::NNNNNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNN::::::NNNNNNNNNN::::::::::::\\n * ::::::::::::NNNNNNNN:::::::NNNNNNNNN::::::::::::\\n * ::::::::::::::::::::::::::::::::::::::::::::::::\\n * ::::::::::::::::::::::::::::::::::::::::::::::::\\n *   ::::::::::::::::::::::::::::::::::::::::::::\\n *  \\n * @dev Nexus of the Nifty Gateway smartcontract constellation.\\n * {BuilderShop} is a factory contract, when a new collection\\n * is slated for deployment, a call is made to this factory \\n * contract to create it. \\n */\\ncontract BuilderShop is NiftyEntity {\\n\\n    /**\\n     * @dev Tracks the latest {NiftyBuilderInstance} deployment, supplied as constructor \\n     * argument. Every time a new contract is deployed from this \\\"master\\\" factory contract, \\n     * it is given a contract id that is one higher than the previous contract deployed.\\n     */\\n    uint public _id;\\n\\n    // Provided as a argument to {NiftyBuilderInstance} deployment.\\n    address public _defaultOwner;\\n\\n    // Reference for validation of posible {NiftyBuilderInstance} by address.\\n    mapping (address => bool) public validBuilderInstance;\\n\\n    // Log the creation of each {NiftyBuilderInstance} deployment. \\n    event BuilderInstanceCreated(address instanceAddress, uint id);\\n\\n    /**\\n     * @param niftyRegistryContract Points to the mainnet repository of addresses\\n     * allowed to invoke state mutating operations via the modifier 'onlyValidSender'.\\n     * @param defaultOwner_ The address to which all tokens are initially minted.\\n     */\\n    constructor(address niftyRegistryContract,\\n                address defaultOwner_) NiftyEntity(niftyRegistryContract) {\\n        _defaultOwner = defaultOwner_;\\n    }\\n\\n    /**\\n     * @dev Configurable address for defaultOwner.\\n     * @param defaultOwner account to which newly minted tokens are allocated.\\n     */ \\n    function setDefaultOwner(address defaultOwner) onlyValidSender external {\\n        _defaultOwner = defaultOwner;\\n    }\\n\\n    /**\\n     * @dev Allow anyone to check if a contract address is a valid nifty gateway contract.\\n     * @param instanceAddress address of potential spawned {NiftyBuilderInstance}.\\n     * @return bool whether or not the contract was initialized by this {BuilderShop}.\\n     */\\n    function isValidBuilderInstance(address instanceAddress) external view returns (bool) {\\n        return (validBuilderInstance[instanceAddress]);\\n    }\\n\\n    /**\\n     * @dev Collections on the platform are associated with a call to this \\n     * function which will generate a {NiftyBuilderInstance} to house the \\n     * NFTs for that particular artist release. \\n     * \\n     * @param name Of the collection being deployed.\\n     * @param symbol Shorthand token identifier, for wallets, etc.\\n     * @param typeCount The number of different Nifty types (different \\n     * individual NFTs) associated with the deployed collection.\\n     * @param baseURI The location where the artifact assets are stored.\\n     * @param creator The artist associated with the collection.\\n     */\\n    function createNewBuilderInstance(\\n        string memory name,\\n        string memory symbol,\\n        uint256 typeCount,\\n        string memory baseURI,\\n        string memory creator) external onlyValidSender { \\n        \\n        _id += 1;\\n\\n        NiftyBuilderInstance instance = new NiftyBuilderInstance(\\n            name,\\n            symbol,\\n            _id,\\n            typeCount,\\n            baseURI,\\n            creator,\\n            niftyRegistryContract,\\n            _defaultOwner\\n        );\\n        address instanceAddress = address(instance);\\n        validBuilderInstance[instanceAddress] = true;\\n\\n        emit BuilderInstanceCreated(instanceAddress, _id);\\n    }\\n   \\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"creator_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"niftyRegistryContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_defaultOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"_getFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_typeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintNifty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"setFinalized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"hashIPFS\",\"type\":\"string\"}],\"name\":\"setNiftyIPFSHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"niftyName\",\"type\":\"string\"}],\"name\":\"setNiftyName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIPFSHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NiftyBuilderInstance", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000006e53130ddff21e3bc963ee902005223b9a202106000000000000000000000000e052113bd7d7700d623414a0a4585bcae754e9d5000000000000000000000000000000000000000000000000000000000000001b47454e455349532049444f4c53206279204d6f6e737465726361740000000000000000000000000000000000000000000000000000000000000000000000001847454e4553495349444f4c5342594d4f4e535445524341540000000000000000000000000000000000000000000000000000000000000000000000000000002d68747470733a2f2f6170692e6e69667479676174657761792e636f6d2f69646f6c736d6f6e737465726361742f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4d6f6e7374657263617400000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}