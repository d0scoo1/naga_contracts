{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IGauge {\r\n    function deposit(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n\r\n    /**\r\n     * @notice Claim available reward tokens for `_addr`\r\n     * @param _addr Address to claim for\r\n     * @param _receiver Address to transfer rewards to - if set to\r\n     *                  ZERO_ADDRESS, uses the default reward receiver\r\n     *                  for the caller\r\n     */\r\n    function claim_rewards(address _addr, address _receiver) external;\r\n\r\n    // The address of the LP token that may be deposited into the gauge.\r\n    function lp_token() external view returns (address);\r\n\r\n    function rewarded_token() external returns (address);\r\n\r\n    // Number of rewards tokens.\r\n    function reward_count() external view returns (uint256);\r\n\r\n    // Address of a reward token at a given index.\r\n    function reward_tokens(uint256 index) external view returns (address);\r\n}\r\n\r\n// Part: IAsset\r\n\r\ninterface IAsset {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n\r\n// Part: IVoteEscrow\r\n\r\ninterface IVoteEscrow {\r\n    function create_lock(uint256, uint256) external;\r\n\r\n    function increase_amount(uint256) external;\r\n\r\n    function withdraw() external;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeMath\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Part: IBalancerPool\r\n\r\ninterface IBalancerPool is IERC20 {\r\n    enum SwapKind {GIVEN_IN, GIVEN_OUT}\r\n\r\n    struct SwapRequest {\r\n        SwapKind kind;\r\n        IERC20 tokenIn;\r\n        IERC20 tokenOut;\r\n        uint256 amount;\r\n        // Misc data\r\n        bytes32 poolId;\r\n        uint256 lastChangeBlock;\r\n        address from;\r\n        address to;\r\n        bytes userData;\r\n    }\r\n\r\n    // virtual price of bpt\r\n    function getRate() external view returns (uint);\r\n\r\n    function getPoolId() external view returns (bytes32 poolId);\r\n\r\n    function symbol() external view returns (string memory s);\r\n\r\n    function onSwap(\r\n        SwapRequest memory swapRequest,\r\n        uint256[] memory balances,\r\n        uint256 indexIn,\r\n        uint256 indexOut\r\n    ) external view returns (uint256 amount);\r\n}\r\n\r\n// Part: IBalancerVault\r\n\r\ninterface IBalancerVault {\r\n    enum PoolSpecialization {GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN}\r\n    enum JoinKind {INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT, ALL_TOKENS_IN_FOR_EXACT_BPT_OUT}\r\n    enum ExitKind {EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT}\r\n    enum SwapKind {GIVEN_IN, GIVEN_OUT}\r\n\r\n    /**\r\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\r\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\r\n     *\r\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\r\n     * from the previous swap, depending on the swap kind.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct BatchSwapStep {\r\n        bytes32 poolId;\r\n        uint256 assetInIndex;\r\n        uint256 assetOutIndex;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n    /**\r\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\r\n     * `recipient` account.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\r\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\r\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\r\n     * `joinPool`.\r\n     *\r\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\r\n     * transferred. This matches the behavior of `exitPool`.\r\n     *\r\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\r\n     * revert.\r\n     */\r\n    struct FundManagement {\r\n        address sender;\r\n        bool fromInternalBalance;\r\n        address payable recipient;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\r\n     * the `kind` value.\r\n     *\r\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\r\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct SingleSwap {\r\n        bytes32 poolId;\r\n        SwapKind kind;\r\n        IAsset assetIn;\r\n        IAsset assetOut;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    // enconding formats https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/balancer-js/src/pool-weighted/encoder.ts\r\n    struct JoinPoolRequest {\r\n        address[] assets;\r\n        uint256[] maxAmountsIn;\r\n        bytes userData;\r\n        bool fromInternalBalance;\r\n    }\r\n\r\n    struct ExitPoolRequest {\r\n        address[] assets;\r\n        uint256[] minAmountsOut;\r\n        bytes userData;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    function joinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        JoinPoolRequest memory request\r\n    ) external payable;\r\n\r\n    function exitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address payable recipient,\r\n        ExitPoolRequest calldata request\r\n    ) external;\r\n\r\n    function getPool(bytes32 poolId) external view returns (address poolAddress, PoolSpecialization);\r\n\r\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token) external view returns (\r\n        uint256 cash,\r\n        uint256 managed,\r\n        uint256 lastChangeBlock,\r\n        address assetManager\r\n    );\r\n\r\n    function getPoolTokens(bytes32 poolId) external view returns (\r\n        IERC20[] calldata tokens,\r\n        uint256[] calldata balances,\r\n        uint256 lastChangeBlock\r\n    );\r\n    /**\r\n     * @dev Performs a swap with a single Pool.\r\n     *\r\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\r\n     * taken from the Pool, which must be greater than or equal to `limit`.\r\n     *\r\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\r\n     * sent to the Pool, which must be less than or equal to `limit`.\r\n     *\r\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\r\n     *\r\n     * Emits a `Swap` event.\r\n     */\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountCalculated);\r\n\r\n    /**\r\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\r\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\r\n     *\r\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\r\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\r\n     * the same index in the `assets` array.\r\n     *\r\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\r\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\r\n     * `amountOut` depending on the swap kind.\r\n     *\r\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\r\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\r\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\r\n     *\r\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\r\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\r\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\r\n     * or unwrapped from WETH by the Vault.\r\n     *\r\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\r\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\r\n     *\r\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\r\n     * equivalent `swap` call.\r\n     *\r\n     * Emits `Swap` events.\r\n     */\r\n    function batchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds,\r\n        int256[] memory limits,\r\n        uint256 deadline\r\n    ) external payable returns (int256[] memory);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeERC20\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Part: YearnBalancerVoter\r\n\r\n/**\r\n * @dev Where Yearn stores veBAL and boosted BPTs (balancer's LP tokens).\r\n */\r\ncontract YearnBalancerVoter {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 internal constant WETH =\r\n        IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IERC20 internal constant BAL =\r\n        IERC20(0xba100000625a3754423978a60c9317c58a424e3D);\r\n    IERC20 internal constant balWethLP =\r\n        IERC20(0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56);\r\n    IVoteEscrow internal constant veBAL =\r\n        IVoteEscrow(0xC128a9954e6c874eA3d62ce62B468bA073093F25);\r\n\r\n    address public governance;\r\n    address public pendingGovernance;\r\n    address public proxy;\r\n    IBalancerVault internal constant balancerVault =\r\n        IBalancerVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\r\n    IBalancerPool internal constant stakeLp =\r\n        IBalancerPool(0xcdE5a11a4ACB4eE4c805352Cec57E236bdBC3837);\r\n    address[] internal assets;\r\n\r\n    modifier onlyProxyOrGovernance() {\r\n        require(msg.sender == proxy || msg.sender == governance, \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        governance = msg.sender;\r\n        assets = [address(BAL), address(WETH)];\r\n    }\r\n\r\n    function execute(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external onlyProxyOrGovernance returns (bool, bytes memory) {\r\n        (bool success, bytes memory result) = to.call{value: value}(data);\r\n\r\n        return (success, result);\r\n    }\r\n\r\n    function getName() external pure returns (string memory) {\r\n        return \"YearnBalancerVoter\";\r\n    }\r\n\r\n    function setProxy(address _proxy) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        proxy = _proxy;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        pendingGovernance = _governance;\r\n    }\r\n\r\n    function acceptGovernance() external {\r\n        require(msg.sender == pendingGovernance, \"!pending_governance\");\r\n        governance = msg.sender;\r\n        pendingGovernance = address(0);\r\n    }\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\r\n        require(msg.sender == proxy, \"!controller\");\r\n        _asset.safeTransfer(proxy, _asset.balanceOf(address(this)));\r\n    }\r\n\r\n    function createLock(uint256 _value, uint256 _unlockTime)\r\n        external\r\n        onlyProxyOrGovernance\r\n    {\r\n        _checkAllowance(address(veBAL), balWethLP, _value);\r\n        veBAL.create_lock(_value, _unlockTime);\r\n    }\r\n\r\n    function increaseAmountMax() external onlyProxyOrGovernance {\r\n        uint256 _balanceOfBPT = balWethLP.balanceOf(address(this));\r\n        _checkAllowance(address(veBAL), balWethLP, _balanceOfBPT);\r\n        veBAL.increase_amount(_balanceOfBPT);\r\n    }\r\n\r\n    function increaseAmountExact(uint256 _amount)\r\n        external\r\n        onlyProxyOrGovernance\r\n    {\r\n        uint256 _balanceOfBPT = balWethLP.balanceOf(address(this));\r\n        require(_amount <= _balanceOfBPT, \"!too_much\");\r\n        _checkAllowance(address(veBAL), balWethLP, _amount);\r\n        veBAL.increase_amount(_amount);\r\n    }\r\n\r\n    function release() external onlyProxyOrGovernance {\r\n        veBAL.withdraw();\r\n    }\r\n\r\n    function convertBALIntoBPT(uint256 _amount) external onlyProxyOrGovernance {\r\n        _convertBALIntoBPT(_amount);\r\n    }\r\n\r\n    function convertLooseBALIntoBPT() external onlyProxyOrGovernance {\r\n        uint256 _balanceOfBal = BAL.balanceOf(address(this));\r\n        if (_balanceOfBal > 0) {\r\n            _convertBALIntoBPT(_balanceOfBal);\r\n        }\r\n    }\r\n\r\n    function convertBPTIntoBAL(uint256 _amount) external onlyProxyOrGovernance {\r\n        _convertBPTIntoBAL(_amount);\r\n    }\r\n\r\n    function convertLooseBPTIntoBAL() external onlyProxyOrGovernance {\r\n        uint256 _balanceOfBpt = balWethLP.balanceOf(address(this));\r\n        if (_balanceOfBpt > 0) {\r\n            _convertBPTIntoBAL(_balanceOfBpt);\r\n        }\r\n    }\r\n\r\n    // Converts BAL into the BAL/WETH BPT used for veBAL\r\n    function _convertBALIntoBPT(uint256 _amount) internal {\r\n        _checkAllowance(address(balancerVault), BAL, _amount);\r\n        uint256[] memory amounts = new uint256[](2);\r\n        amounts[0] = _amount; // BAL\r\n        bytes memory userData =\r\n            abi.encode(\r\n                IBalancerVault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT,\r\n                amounts,\r\n                0\r\n            );\r\n        IBalancerVault.JoinPoolRequest memory request =\r\n            IBalancerVault.JoinPoolRequest(assets, amounts, userData, false);\r\n        balancerVault.joinPool(\r\n            IBalancerPool(address(balWethLP)).getPoolId(),\r\n            address(this),\r\n            address(this),\r\n            request\r\n        );\r\n    }\r\n\r\n    function _convertBPTIntoBAL(uint256 _amount) internal {\r\n        _checkAllowance(address(balancerVault), balWethLP, _amount);\r\n        uint256[] memory amounts = new uint256[](2);\r\n        amounts[0] = _amount;\r\n        bytes memory userData =\r\n            abi.encode(\r\n                IBalancerVault.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\r\n                _amount,\r\n                0\r\n            );\r\n        IBalancerVault.ExitPoolRequest memory request =\r\n            IBalancerVault.ExitPoolRequest(assets, amounts, userData, false);\r\n        balancerVault.exitPool(\r\n            IBalancerPool(address(balWethLP)).getPoolId(),\r\n            address(this),\r\n            payable(address(this)),\r\n            request\r\n        );\r\n    }\r\n\r\n    // _checkAllowance adapted from https://github.com/therealmonoloco/liquity-stability-pool-strategy/blob/1fb0b00d24e0f5621f1e57def98c26900d551089/contracts/Strategy.sol#L316\r\n\r\n    function _checkAllowance(\r\n        address _spender,\r\n        IERC20 _token,\r\n        uint256 _amount\r\n    ) internal {\r\n        uint256 _currentAllowance = _token.allowance(address(this), _spender);\r\n        if (_currentAllowance < _amount) {\r\n            _token.safeIncreaseAllowance(_spender, _amount - _currentAllowance);\r\n        }\r\n    }\r\n}\r\n\r\n// Part: SafeVoter\r\n\r\nlibrary SafeVoter {\r\n    function safeExecute(\r\n        YearnBalancerVoter voter,\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal {\r\n        (bool success, ) = voter.execute(to, value, data);\r\n        require(success);\r\n    }\r\n}\r\n\r\n// File: BalancerStrategyVoterProxy.sol\r\n\r\n/**\r\n * @dev Yearn strategies which auto-compound BPT tokens communicate with the Yearn\r\n * Balancer voter through this contract. We use a proxy because the voter itself holds\r\n * veBAL, which are locked and prevent us from migrating / upgrading that contract.\r\n */\r\ncontract BalancerStrategyVoterProxy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    using SafeVoter for YearnBalancerVoter;\r\n\r\n    enum ROLE {GOVERNANCE, VOTER, LOCKER}\r\n\r\n    YearnBalancerVoter public voter;\r\n\r\n    address public constant balMinter =\r\n        address(0x239e55F427D44C3cc793f49bFB507ebe76638a2b);\r\n    address public constant bal =\r\n        address(0xba100000625a3754423978a60c9317c58a424e3D);\r\n    address public constant gaugeController =\r\n        address(0xC128468b7Ce63eA702C1f104D55A2566b13D3ABD);\r\n\r\n    // gauge => strategies\r\n    mapping(address => address) public strategies;\r\n    mapping(address => bool) public voters;\r\n    mapping(address => bool) public lockers;\r\n    address public governance;\r\n\r\n    event VoterApproved(address voter);\r\n    event VoterRevoked(address voter);\r\n    event LockerApproved(address locker);\r\n    event LockerRevoked(address locker);\r\n    event StrategyApproved(address strategy);\r\n    event StrategyRevoked(address strategy);\r\n    event NewGovernance(address governance);\r\n\r\n    modifier hasRole(ROLE _role) {\r\n        _checkRole(_role);\r\n        _;\r\n    }\r\n\r\n    modifier isStrategy(address _gauge) {\r\n        require(strategies[_gauge] == msg.sender, \"!strategy\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _voter) public {\r\n        governance = msg.sender;\r\n        voter = YearnBalancerVoter(_voter);\r\n    }\r\n\r\n    function setGovernance(address _governance)\r\n        external\r\n        hasRole(ROLE.GOVERNANCE)\r\n    {\r\n        require(_governance != address(0));\r\n        governance = _governance;\r\n        emit NewGovernance(_governance);\r\n    }\r\n\r\n    function approveStrategy(address _gauge, address _strategy)\r\n        external\r\n        hasRole(ROLE.GOVERNANCE)\r\n    {\r\n        strategies[_gauge] = _strategy;\r\n        emit StrategyApproved(_strategy);\r\n    }\r\n\r\n    function revokeStrategy(address _gauge) external hasRole(ROLE.GOVERNANCE) {\r\n        require(strategies[_gauge] != address(0), \"!exists\");\r\n        address _strategy = strategies[_gauge];\r\n        strategies[_gauge] = address(0);\r\n        emit StrategyRevoked(_strategy);\r\n    }\r\n\r\n    function approveVoter(address _voter) external hasRole(ROLE.GOVERNANCE) {\r\n        voters[_voter] = true;\r\n        emit VoterApproved(_voter);\r\n    }\r\n\r\n    function revokeVoter(address _voter) external hasRole(ROLE.GOVERNANCE) {\r\n        voters[_voter] = false;\r\n        emit VoterRevoked(_voter);\r\n    }\r\n\r\n    function approveLocker(address _locker) external hasRole(ROLE.GOVERNANCE) {\r\n        lockers[_locker] = true;\r\n        emit LockerApproved(_locker);\r\n    }\r\n\r\n    function revokeLocker(address _locker) external hasRole(ROLE.GOVERNANCE) {\r\n        lockers[_locker] = false;\r\n        emit LockerRevoked(_locker);\r\n    }\r\n\r\n    function lock() external {\r\n        voter.increaseAmountMax();\r\n    }\r\n\r\n    function transferBALToVoter() external {\r\n        IERC20(bal).transfer(\r\n            address(voter),\r\n            IERC20(bal).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function convertAndLockMax() external hasRole(ROLE.LOCKER) {\r\n        voter.convertLooseBALIntoBPT();\r\n        voter.increaseAmountMax();\r\n    }\r\n\r\n    function convertAndLockExact(uint256 _amount)\r\n        external\r\n        hasRole(ROLE.LOCKER)\r\n    {\r\n        if (_amount > 0) voter.increaseAmountExact(_amount);\r\n    }\r\n\r\n    function withdrawAll(address _gauge, address _token)\r\n        external\r\n        isStrategy(_gauge)\r\n        returns (uint256)\r\n    {\r\n        return withdraw(_gauge, _token, balanceOf(_gauge));\r\n    }\r\n\r\n    function deposit(address _gauge, address _token)\r\n        external\r\n        isStrategy(_gauge)\r\n    {\r\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).safeTransfer(address(voter), _balance);\r\n        _balance = IERC20(_token).balanceOf(address(voter));\r\n\r\n        voter.safeExecute(\r\n            _token,\r\n            0,\r\n            abi.encodeWithSignature(\"approve(address,uint256)\", _gauge, 0)\r\n        );\r\n        voter.safeExecute(\r\n            _token,\r\n            0,\r\n            abi.encodeWithSignature(\r\n                \"approve(address,uint256)\",\r\n                _gauge,\r\n                _balance\r\n            )\r\n        );\r\n        voter.safeExecute(\r\n            _gauge,\r\n            0,\r\n            abi.encodeWithSignature(\"deposit(uint256)\", _balance)\r\n        );\r\n    }\r\n\r\n    // Claim BAL rewards\r\n    function claimBal(address _gauge) external isStrategy(_gauge) {\r\n        uint256 _balance = IERC20(bal).balanceOf(address(voter));\r\n        voter.safeExecute(\r\n            balMinter,\r\n            0,\r\n            abi.encodeWithSignature(\"mint(address)\", _gauge)\r\n        );\r\n        _balance = (IERC20(bal).balanceOf(address(voter))).sub(_balance);\r\n        voter.safeExecute(\r\n            bal,\r\n            0,\r\n            abi.encodeWithSignature(\r\n                \"transfer(address,uint256)\",\r\n                msg.sender,\r\n                _balance\r\n            )\r\n        );\r\n    }\r\n\r\n    // Claim other rewards\r\n    function claimRewards(address _gauge) external isStrategy(_gauge) {\r\n        voter.safeExecute(\r\n            _gauge,\r\n            0,\r\n            abi.encodeWithSelector(\r\n                IGauge.claim_rewards.selector,\r\n                address(voter),\r\n                msg.sender // This should forward along all rewards to the strategy\r\n            )\r\n        );\r\n    }\r\n\r\n    function vote(address _gauge, uint256 _amount)\r\n        external\r\n        hasRole(ROLE.VOTER)\r\n    {\r\n        voter.safeExecute(\r\n            gaugeController,\r\n            0,\r\n            abi.encodeWithSignature(\r\n                \"vote_for_gauge_weights(address,uint256)\",\r\n                _gauge,\r\n                _amount\r\n            )\r\n        );\r\n    }\r\n\r\n    function withdraw(\r\n        address _gauge,\r\n        address _token,\r\n        uint256 _amount\r\n    ) public isStrategy(_gauge) returns (uint256) {\r\n        uint256 _balance = IERC20(_token).balanceOf(address(voter));\r\n        voter.safeExecute(\r\n            _gauge,\r\n            0,\r\n            abi.encodeWithSignature(\"withdraw(uint256)\", _amount)\r\n        );\r\n        _balance = IERC20(_token).balanceOf(address(voter)).sub(_balance);\r\n        voter.safeExecute(\r\n            _token,\r\n            0,\r\n            abi.encodeWithSignature(\r\n                \"transfer(address,uint256)\",\r\n                msg.sender,\r\n                _balance\r\n            )\r\n        );\r\n        return _balance;\r\n    }\r\n\r\n    function balanceOf(address _gauge) public view returns (uint256) {\r\n        return IERC20(_gauge).balanceOf(address(voter));\r\n    }\r\n\r\n    function _checkRole(ROLE _role) internal view {\r\n        if (_role == ROLE.GOVERNANCE) {\r\n            require(msg.sender == governance, \"!governance\");\r\n        } else if (_role == ROLE.VOTER) {\r\n            require(voters[msg.sender], \"!voter\");\r\n        } else {\r\n            require(lockers[msg.sender], \"!locker\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"LockerApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"LockerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"NewGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoterApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoterRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"approveLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"approveVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertAndLockExact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertAndLockMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"revokeLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"revokeVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBALToVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract YearnBalancerVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BalancerStrategyVoterProxy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000095c764ec4577e0cb96e884047740c6b08137e052", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4a87c21456c8257dac6bfa0a0a295523ac2946f025584eb55f4dfdb4abea00f8"}]}