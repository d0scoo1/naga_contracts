{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\n\r\ninterface IUncirculatedFakeInternetMoney {\r\n  function owner() external view returns (address);\r\n  function exists(uint256 tokenId) external view returns (bool);\r\n}\r\n\r\ncontract TokenURI {\r\n  using Strings for uint256;\r\n\r\n  IUncirculatedFakeInternetMoney public immutable uFIMContract;\r\n  string public baseImgUrl = 'ipfs://bafybeierik4sprq6kr4jocdwxpx52kwsorqqqw6t5xo6ymcw6tvsfscfga/';\r\n  string public baseExternalUrl = 'https://uncirculatedmoney.com/';\r\n  string public license = 'CC BY-NC 4.0';\r\n  string public imgExtension = '.jpeg';\r\n  string public description = 'Uncirculated Fake Internet Money is a purely commemorative collection, and holds no monetary value whatsoever.';\r\n\r\n  constructor(address _uFIMContractAddress) {\r\n    uFIMContract = IUncirculatedFakeInternetMoney(_uFIMContractAddress);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == uFIMContract.owner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n    require(uFIMContract.exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\r\n\r\n    string memory tokenString = tokenId.toString();\r\n\r\n    string memory json = Base64.encode(\r\n      abi.encodePacked(\r\n        '{\"name\": \"Uncirculated Fake Internet Money #', tokenString,\r\n        '\", \"description\": \"', description,\r\n        '\", \"license\": \"', license,\r\n        '\", \"image\": \"', baseImgUrl, tokenString, imgExtension,\r\n        '\", \"external_url\": \"', baseExternalUrl,\r\n        '\"}'\r\n      )\r\n    );\r\n    return string(abi.encodePacked('data:application/json;base64,', json));\r\n  }\r\n\r\n  function setBaseMetadata(\r\n    string calldata _baseImgUrl,\r\n    string calldata _imgExtension,\r\n    string calldata _baseExternalUrl,\r\n    string calldata _license,\r\n    string calldata _description\r\n  ) external onlyOwner {\r\n    baseImgUrl = _baseImgUrl;\r\n    imgExtension = _imgExtension;\r\n    baseExternalUrl = _baseExternalUrl;\r\n    license = _license;\r\n    description = _description;\r\n  }\r\n}\r\n\r\n\r\n/// [MIT License]\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uFIMContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"baseExternalUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseImgUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imgExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"license\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseImgUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imgExtension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseExternalUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_license\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setBaseMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uFIMContract\",\"outputs\":[{\"internalType\":\"contract IUncirculatedFakeInternetMoney\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenURI", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f49b26cf118db11a7dd1d9b88c7e1bc153851757", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d94645c23723405b36d6ed2598b62cd52146afac65e48a93f2a3ab9dbb105c6c"}]}