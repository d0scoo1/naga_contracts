{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Funding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/badger/IVault.sol\\\";\\nimport \\\"./interfaces/erc20/IERC20.sol\\\";\\nimport \\\"./lib/GlobalAccessControlManaged.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./interfaces/citadel/IMedianOracle.sol\\\";\\n\\n/**\\n * @notice Sells a token at a predetermined price to whitelisted buyers.\\n * TODO: Better revert strings\\n */\\ncontract Funding is GlobalAccessControlManaged, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    // Roles used from GAC\\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\\n        keccak256(\\\"CONTRACT_GOVERNANCE_ROLE\\\");\\n    bytes32 public constant POLICY_OPERATIONS_ROLE =\\n        keccak256(\\\"POLICY_OPERATIONS_ROLE\\\");\\n    bytes32 public constant TREASURY_OPERATIONS_ROLE = keccak256(\\\"TREASURY_OPERATIONS_ROLE\\\");\\n    bytes32 public constant TREASURY_VAULT_ROLE =\\n        keccak256(\\\"TREASURY_VAULT_ROLE\\\");\\n    bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n\\n    uint256 public constant MAX_BPS = 10000;\\n\\n    IERC20 public citadel; /// token to distribute (in vested xCitadel form)\\n    IVault public xCitadel; /// wrapped citadel form that is actually distributed\\n    IERC20 public asset; /// token to take in WBTC / bibbtc LP / CVX / bveCVX\\n\\n    uint256 public citadelPriceInAsset; /// asset per citadel price eg. 1 WBTC (8 decimals) = 40,000 CTDL ==> price = 10^8 / 40,000\\n    uint256 public minCitadelPriceInAsset; /// Lower bound on expected citadel price in asset terms. Used as circuit breaker oracle.\\n    uint256 public maxCitadelPriceInAsset; /// Upper bound on expected citadel price in asset terms. Used as circuit breaker oracle.\\n    bool public citadelPriceFlag; /// Flag citadel price for review by guardian if it exceeds min and max bounds;\\n\\n    uint256 public assetDecimalsNormalizationValue;\\n\\n    address public citadelPriceInAssetOracle;\\n    address public saleRecipient;\\n\\n    struct FundingParams {\\n        uint256 discount;\\n        uint256 minDiscount;\\n        uint256 maxDiscount;\\n        address discountManager;\\n        uint256 assetCumulativeFunded; /// persistent sum of asset amount in over lifetime of contract.\\n        uint256 assetCap; /// Max asset token that can be taken in by the contract (defines the cap for citadel sold)\\n    }\\n\\n    FundingParams public funding;\\n\\n    /// ==================\\n    /// ===== Events =====\\n    /// ==================\\n\\n    // TODO: we should conform to some interface here\\n    event Deposit(\\n        address indexed buyer,\\n        uint256 assetIn,\\n        uint256 citadelOutValue\\n    );\\n\\n    event CitadelPriceInAssetUpdated(uint256 citadelPrice);\\n\\n    event CitadelPriceBoundsSet(uint256 minPrice, uint256 maxPrice);\\n    event CitadelPriceFlag(uint256 price, uint256 minPrice, uint256 maxPrice);\\n\\n    event SaleRecipientUpdated(address indexed recipient);\\n    event AssetCapUpdated(uint256 assetCap);\\n\\n    event Sweep(address indexed token, uint256 amount);\\n    event ClaimToTreasury(address indexed token, uint256 amount);\\n\\n    modifier onlyCitadelPriceInAssetOracle() {\\n        require(\\n            msg.sender == citadelPriceInAssetOracle,\\n            \\\"onlyCitadelPriceInAssetOracle\\\"\\n        );\\n        _;\\n    }\\n\\n    event DiscountLimitsSet(uint256 minDiscount, uint256 maxDiscount);\\n    event DiscountSet(uint256 discount);\\n    event DiscountManagerSet(address discountManager);\\n\\n    /// =======================\\n    /// ===== Initializer =====\\n    /// =======================\\n\\n    /**\\n     * @notice Initializer.\\n     * @param _gac Global access control\\n     * @param _citadel The token this contract will return in a trade\\n     * @param _asset The token this contract will receive in a trade\\n     * @param _xCitadel Staked citadel, citadel will be granted to funders in this form\\n     * @param _saleRecipient The address receiving the proceeds of the sale - will be citadel multisig\\n     * @param _assetCap The max asset that the contract can take\\n     */\\n    function initialize(\\n        address _gac,\\n        address _citadel,\\n        address _asset,\\n        address _xCitadel,\\n        address _saleRecipient,\\n        address _citadelPriceInAssetOracle,\\n        uint256 _assetCap\\n    ) external initializer {\\n        require(\\n            _saleRecipient != address(0),\\n            \\\"Funding: 0 sale\\\"\\n        );\\n        require(\\n            _citadelPriceInAssetOracle != address(0),\\n            \\\"Funding: 0 oracle\\\"\\n        );\\n\\n        __GlobalAccessControlManaged_init(_gac);\\n        __ReentrancyGuard_init();\\n\\n        citadel = IERC20(_citadel);\\n        xCitadel = IVault(_xCitadel);\\n        asset = IERC20(_asset);\\n        saleRecipient = _saleRecipient;\\n\\n        citadelPriceInAssetOracle = _citadelPriceInAssetOracle;\\n\\n        funding = FundingParams(0, 0, 0, address(0), 0, _assetCap);\\n\\n        assetDecimalsNormalizationValue = 10**asset.decimals();\\n\\n        // No circuit breaker on price by default\\n        minCitadelPriceInAsset = 0;\\n        maxCitadelPriceInAsset = type(uint256).max;\\n\\n        // Allow to deposit in vault\\n        // Done last for reEntrancy concerns\\n        IERC20(_citadel).safeApprove(address(_xCitadel), type(uint256).max);\\n    }\\n\\n    modifier onlyWhenPriceNotFlagged() {\\n        require(\\n            citadelPriceFlag == false,\\n            \\\"Funding: citadel price from oracle flagged and pending review\\\"\\n        );\\n        _;\\n    }\\n\\n    /// ==========================\\n    /// ===== Public actions =====\\n    /// ==========================\\n\\n    /**\\n     * @notice Exchange `_assetAmountIn` of `asset` for `citadel`\\n     * @param _assetAmountIn Amount of `asset` to give\\n     * @param _minCitadelOut ID of DAO to vote for\\n     * @return citadelAmount_ Amount of `xCitadel` bought\\n     */\\n    function deposit(uint256 _assetAmountIn, uint256 _minCitadelOut)\\n        external\\n        onlyWhenPriceNotFlagged\\n        gacPausable\\n        nonReentrant\\n        returns (uint256 citadelAmount_)\\n    {\\n        require(_assetAmountIn > 0, \\\"_assetAmountIn must not be 0\\\");\\n        require(\\n            funding.assetCumulativeFunded + _assetAmountIn <= funding.assetCap,\\n            \\\"asset funding cap exceeded\\\"\\n        );\\n        funding.assetCumulativeFunded = funding.assetCumulativeFunded + _assetAmountIn;\\n        // Take in asset from user\\n        citadelAmount_ = getAmountOut(_assetAmountIn);\\n        require(citadelAmount_ >= _minCitadelOut, \\\"minCitadelOut\\\");\\n\\n        asset.safeTransferFrom(msg.sender, saleRecipient, _assetAmountIn);\\n        \\n        // Deposit xCitadel and send to user\\n        // TODO: Check gas costs. How does this relate to market buying if you do want to deposit to xCTDL?\\n        xCitadel.depositFor(msg.sender, citadelAmount_);\\n\\n        emit Deposit(\\n            msg.sender,\\n            _assetAmountIn,\\n            citadelAmount_\\n        );\\n    }\\n\\n    /// =======================\\n    /// ===== Public view =====\\n    /// =======================\\n\\n    /**\\n     * @notice Get the amount received when exchanging `asset`\\n     * @param _assetAmountIn Amount of `asset` to exchange\\n     * @return citadelAmount_ Amount of `citadel` received\\n     */\\n    function getAmountOut(uint256 _assetAmountIn)\\n        public\\n        view\\n        returns (uint256 citadelAmount_)\\n    {\\n        uint256 citadelAmountWithoutDiscount = _assetAmountIn * citadelPriceInAsset;\\n\\n        if (funding.discount > 0) {\\n            citadelAmount_ =\\n                (citadelAmountWithoutDiscount * MAX_BPS) /\\n                (MAX_BPS - funding.discount);\\n        } else {\\n            citadelAmount_ = citadelAmountWithoutDiscount;\\n        }\\n\\n        // TODO: if discount is not set, citadelAmount_ in the right reference is 0\\n        citadelAmount_ = citadelAmount_ / assetDecimalsNormalizationValue;\\n    }\\n\\n    /**\\n     * @notice Get the amount received when exchanging `asset`, in terms of xCitadel at current price per share\\n     * @param _assetAmountIn Amount of `asset` to exchange\\n     * @return xCitadelAmount_ Amount of `xCitadel` received at current price per share\\n     */\\n    function getStakedCitadelAmountOut(uint256 _assetAmountIn) public view returns (uint256 xCitadelAmount_) {\\n        uint citadelAmount = getAmountOut(_assetAmountIn);\\n        xCitadelAmount_ = citadelAmount * 10**citadel.decimals() / xCitadel.getPricePerFullShare();\\n    }\\n\\n    /**\\n     * @notice Check how much `asset` can still be taken in, based on cap and cumulative amount funded\\n     * @return limitLeft_ Amount of `asset` that can still be exchanged for citadel\\n     */\\n    function getRemainingFundable() external view returns (uint256 limitLeft_) {\\n        uint256 assetCumulativeFunded = funding.assetCumulativeFunded;\\n        uint256 assetCap = funding.assetCap;\\n        if (assetCumulativeFunded < assetCap) {\\n            limitLeft_ = assetCap - assetCumulativeFunded;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get all funding params\\n     * @return funding all funding params\\n     */\\n    function getFundingParams() external view returns (FundingParams memory) {\\n        return funding;\\n    }\\n\\n    /**\\n     * @notice Convenience function to get current discount rate\\n     * @return discount current discount rate\\n     */\\n    function getDiscount() external view returns (uint256) {\\n        return funding.discount;\\n    }\\n\\n    /// ==============================\\n    /// ===== Policy Ops actions =====\\n    /// ==============================\\n\\n    /**\\n     * @notice Set discount manually, within the constraints of min and max discount values\\n     * @dev managed by policy operations for rapid response to market conditions\\n     * @param _discount active discount (in bps)\\n     */\\n    function setDiscount(uint256 _discount)\\n        external\\n        gacPausable\\n        onlyRoleOrAddress(POLICY_OPERATIONS_ROLE, funding.discountManager)\\n    {\\n        require(_discount >= funding.minDiscount, \\\"discount < minDiscount\\\");\\n        require(_discount <= funding.maxDiscount, \\\"discount > maxDiscount\\\");\\n\\n        funding.discount = _discount;\\n\\n        emit DiscountSet(_discount);\\n    }\\n\\n    function clearCitadelPriceFlag()\\n        external\\n        gacPausable\\n        onlyRole(POLICY_OPERATIONS_ROLE)\\n    {\\n        citadelPriceFlag = false;\\n    }\\n\\n    /**\\n     * @notice Modify the max asset amount that this contract can take. Managed by policy governance.\\n     * @dev This is cumulative asset cap, so must take into account the asset amount already funded.\\n     * @param _assetCap New max cumulatiive amountIn\\n     */\\n    function setAssetCap(uint256 _assetCap)\\n        external\\n        gacPausable\\n        onlyRole(POLICY_OPERATIONS_ROLE)\\n    {\\n        require(\\n            _assetCap > funding.assetCumulativeFunded,\\n            \\\"cannot decrease cap below global sum of assets in\\\"\\n        );\\n        funding.assetCap = _assetCap;\\n        emit AssetCapUpdated(_assetCap);\\n    }\\n\\n    /// ================================\\n    /// ===== Treasury Ops actions =====\\n    /// ================================\\n\\n    /**\\n     * @notice Transfers out any tokens accidentally sent to the contract. Can only be called by owner\\n     * @dev The contract transfers all `asset` directly to `saleRecipient` during a sale so it's safe\\n     *      to sweep `asset`. For `citadel`, the function only sweeps the extra amount\\n     *      (current contract balance - amount left to be claimed)\\n     * @param _token The token to sweep\\n     */\\n    function sweep(address _token)\\n        external\\n        gacPausable\\n        nonReentrant\\n        onlyRole(TREASURY_OPERATIONS_ROLE)\\n    {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        require(amount > 0, \\\"nothing to sweep\\\");\\n        require(\\n            _token != address(asset),\\n            \\\"cannot sweep funding asset, use claimAssetToTreasury()\\\"\\n        );\\n\\n        emit Sweep(_token, amount);\\n        IERC20(_token).safeTransfer(saleRecipient, amount);\\n    }\\n\\n    /// @notice Claim accumulated asset token to treasury\\n    /// @dev We let assets accumulate and batch transfer to treasury (rather than transfer atomically on each deposi)t for user gas savings\\n    function claimAssetToTreasury()\\n        external\\n        gacPausable\\n        onlyRole(TREASURY_OPERATIONS_ROLE)\\n    {\\n        uint256 amount = asset.balanceOf(address(this));\\n        require(amount > 0, \\\"nothing to claim\\\");\\n        asset.safeTransfer(saleRecipient, amount);\\n\\n        emit ClaimToTreasury(address(asset), amount);\\n    }\\n\\n    /// ==============================\\n    /// ===== Governance actions =====\\n    /// ==============================\\n\\n    /**\\n     * @notice Set minimum and maximum discount\\n     * @dev managed by contract governance to place constraints around the parameter for policy operations to play within\\n     * @param _minDiscount minimum discount (in bps)\\n     * @param _maxDiscount maximum discount (in bps)\\n     */\\n    function setDiscountLimits(uint256 _minDiscount, uint256 _maxDiscount)\\n        external\\n        gacPausable\\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\\n    {\\n        require(_maxDiscount < MAX_BPS , \\\"maxDiscount >= MAX_BPS\\\");\\n        funding.minDiscount = _minDiscount;\\n        funding.maxDiscount = _maxDiscount;\\n\\n        emit DiscountLimitsSet(_minDiscount, _maxDiscount);\\n    }\\n\\n    /**\\n     * @notice Set a discount manager address\\n     * @dev This is intended to be used for an automated discount manager contract to supplement or replace manual calls\\n     * @param _discountManager discount manager address\\n     */\\n    function setDiscountManager(address _discountManager)\\n        external\\n        gacPausable\\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\\n    {\\n        funding.discountManager = _discountManager;\\n\\n        emit DiscountManagerSet(_discountManager);\\n    }\\n\\n    function setSaleRecipient(address _saleRecipient)\\n        external\\n        gacPausable\\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\\n    {\\n        require(\\n            _saleRecipient != address(0),\\n            \\\"Funding: sale recipient should not be zero\\\"\\n        );\\n\\n        saleRecipient = _saleRecipient;\\n        emit SaleRecipientUpdated(_saleRecipient);\\n    }\\n\\n    function setCitadelAssetPriceBounds(uint256 _minPrice, uint256 _maxPrice)\\n        external\\n        gacPausable\\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\\n    {\\n        minCitadelPriceInAsset = _minPrice;\\n        maxCitadelPriceInAsset = _maxPrice;\\n\\n        emit CitadelPriceBoundsSet(_minPrice, _maxPrice);\\n    }\\n\\n    /// ==========================\\n    /// ===== Oracle actions =====\\n    /// ==========================\\n\\n    /// @notice Update citadel price in asset terms from oracle source\\n    /// @dev Note that the oracle mechanics are abstracted to the oracle address\\n    function updateCitadelPriceInAsset()\\n        external\\n        gacPausable\\n        onlyRole(KEEPER_ROLE)\\n    {   \\n        uint _citadelPriceInAsset;\\n        bool _valid;\\n\\n        (_citadelPriceInAsset, _valid) = IMedianOracle(citadelPriceInAssetOracle).getData();\\n\\n        require(_citadelPriceInAsset > 0, \\\"citadel price must not be zero\\\");\\n        require(_valid, \\\"oracle data must be valid\\\");\\n\\n        if (\\n            _citadelPriceInAsset < minCitadelPriceInAsset ||\\n            _citadelPriceInAsset > maxCitadelPriceInAsset\\n        ) {\\n            citadelPriceFlag = true;\\n            emit CitadelPriceFlag(\\n                _citadelPriceInAsset,\\n                minCitadelPriceInAsset,\\n                maxCitadelPriceInAsset\\n            );\\n        } else {\\n            citadelPriceInAsset = _citadelPriceInAsset;\\n            emit CitadelPriceInAssetUpdated(_citadelPriceInAsset);\\n        }\\n    }\\n\\n\\n    /// @dev OUT OF AUDIT SCOPE: This is a test function that will be removed in final code\\n    /// @notice Update citadel price in asset terms from oracle source\\n    /// @dev Note that the oracle mechanics are abstracted to the oracle address\\n    function updateCitadelPriceInAsset(uint256 _citadelPriceInAsset)\\n        external\\n        gacPausable\\n        onlyCitadelPriceInAssetOracle\\n    {\\n        require(_citadelPriceInAsset > 0, \\\"citadel price must not be zero\\\");\\n\\n        if (\\n            _citadelPriceInAsset < minCitadelPriceInAsset ||\\n            _citadelPriceInAsset > maxCitadelPriceInAsset\\n        ) {\\n            citadelPriceFlag = true;\\n            emit CitadelPriceFlag(\\n                _citadelPriceInAsset,\\n                minCitadelPriceInAsset,\\n                maxCitadelPriceInAsset\\n            );\\n        } else {\\n            citadelPriceInAsset = _citadelPriceInAsset;\\n            emit CitadelPriceInAssetUpdated(_citadelPriceInAsset);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/badger/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.5.0 <= 0.9.0;\\n\\nimport {IERC20} from \\\"../erc20/IERC20.sol\\\";\\n\\ninterface IVault is IERC20 {\\n    function token() external view returns (address);\\n\\n    function rewards() external view returns (address);\\n\\n    function reportHarvest(uint256 _harvestedAmount) external;\\n\\n    function reportAdditionalToken(address _token) external;\\n\\n    // Fees\\n    function performanceFeeGovernance() external view returns (uint256);\\n\\n    function performanceFeeStrategist() external view returns (uint256);\\n\\n    function withdrawalFee() external view returns (uint256);\\n\\n    function managementFee() external view returns (uint256);\\n\\n    // Actors\\n    function governance() external view returns (address);\\n\\n    function keeper() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function strategist() external view returns (address);\\n\\n    // External\\n    function deposit(uint256 _amount) external;\\n\\n    function depositFor(address _recipient, uint256 _amount) external;\\n\\n    // View\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/erc20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.5.0 <= 0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"src/lib/GlobalAccessControlManaged.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"../interfaces/citadel/IGac.sol\\\";\\n\\n/**\\n * @title Global Access Control Managed - Base Class\\n * @notice allows inheriting contracts to leverage global access control permissions conveniently, as well as granting contract-specific pausing functionality\\n */\\ncontract GlobalAccessControlManaged is PausableUpgradeable {\\n    IGac public gac;\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant UNPAUSER_ROLE = keccak256(\\\"UNPAUSER_ROLE\\\");\\n\\n    /// =======================\\n    /// ===== Initializer =====\\n    /// =======================\\n\\n    /**\\n     * @notice Initializer\\n     * @dev this is assumed to be used in the initializer of the inhereiting contract\\n     * @param _globalAccessControl global access control which is pinged to allow / deny access to permissioned calls by role\\n     */\\n    function __GlobalAccessControlManaged_init(address _globalAccessControl)\\n        public\\n        onlyInitializing\\n    {\\n        __Pausable_init_unchained();\\n        gac = IGac(_globalAccessControl);\\n    }\\n\\n    /// =====================\\n    /// ===== Modifiers =====\\n    /// =====================\\n\\n    // @dev only holders of the given role on the GAC can call\\n    modifier onlyRole(bytes32 role) {\\n        require(gac.hasRole(role, msg.sender), \\\"GAC: invalid-caller-role\\\");\\n        _;\\n    }\\n\\n    // @dev only holders of any of the given set of roles on the GAC can call\\n    modifier onlyRoles(bytes32[] memory roles) {\\n        bool validRoleFound = false;\\n        for (uint256 i = 0; i < roles.length; i++) {\\n            bytes32 role = roles[i];\\n            if (gac.hasRole(role, msg.sender)) {\\n                validRoleFound = true;\\n                break;\\n            }\\n        }\\n        require(validRoleFound, \\\"GAC: invalid-caller-role\\\");\\n        _;\\n    }\\n\\n    // @dev only holders of the given role on the GAC can call, or a specified address\\n    // @dev used to faciliate extra contract-specific permissioned accounts\\n    modifier onlyRoleOrAddress(bytes32 role, address account) {\\n        require(\\n            gac.hasRole(role, msg.sender) || msg.sender == account,\\n            \\\"GAC: invalid-caller-role-or-address\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev can be pausable by GAC or local flag\\n    modifier gacPausable() {\\n        require(!gac.paused(), \\\"global-paused\\\");\\n        require(!paused(), \\\"local-paused\\\");\\n        _;\\n    }\\n\\n    /// ================================\\n    /// ===== Permissioned actions =====\\n    /// ================================\\n\\n    function pause() external {\\n        require(gac.hasRole(PAUSER_ROLE, msg.sender));\\n        _pause();\\n    }\\n\\n    function unpause() external {\\n        require(gac.hasRole(UNPAUSER_ROLE, msg.sender));\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"../interfaces/erc20/IERC20.sol\\\";\\n\\n// Modified dependencies to work with ERC20 interface that features name, symbol, decimals.\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {AddressUpgradeable.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"src/interfaces/citadel/IMedianOracle.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0 <=0.9.0;\\n\\ninterface IMedianOracle {\\n\\n    struct Report {\\n        uint256 timestamp;\\n        uint256 payload;\\n    }\\n\\n    event ProviderAdded(address provider);\\n    event ProviderRemoved(address provider);\\n    event ReportTimestampOutOfRange(address provider);\\n    event ProviderReportPushed(address indexed provider, uint256 payload, uint256 timestamp);\\n\\n    function reportExpirationTimeSec() external view returns(uint256);\\n    function getData() external view returns (uint256, bool);\\n    function providerReports(address provider) external view returns (Report[2] calldata);\\n\\n    function pushReport(uint256 payload) external;\\n    \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/citadel/IGac.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.5.0 <= 0.9.0;\\n\\ninterface IGac {\\n    function paused() external view returns (bool);\\n\\n    function transferFromDisabled() external view returns (bool);\\n\\n    function unpause() external;\\n\\n    function pause() external;\\n\\n    function enableTransferFrom() external;\\n\\n    function disableTransferFrom() external;\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function hasRole(bytes32 role, address account)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getRoleMember(bytes32 role, uint256 index)\\n        external\\n        view\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetCap\",\"type\":\"uint256\"}],\"name\":\"AssetCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"CitadelPriceBoundsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"CitadelPriceFlag\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"citadelPrice\",\"type\":\"uint256\"}],\"name\":\"CitadelPriceInAssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimToTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"citadelOutValue\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDiscount\",\"type\":\"uint256\"}],\"name\":\"DiscountLimitsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"discountManager\",\"type\":\"address\"}],\"name\":\"DiscountManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"DiscountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SaleRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_GOVERNANCE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_OPERATIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY_OPERATIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY_VAULT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNPAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_globalAccessControl\",\"type\":\"address\"}],\"name\":\"__GlobalAccessControlManaged_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetDecimalsNormalizationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"citadel\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"citadelPriceFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"citadelPriceInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"citadelPriceInAssetOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAssetToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearCitadelPriceFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCitadelOut\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"citadelAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDiscount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"discountManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetCumulativeFunded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gac\",\"outputs\":[{\"internalType\":\"contract IGac\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetAmountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"citadelAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDiscount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"discountManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetCumulativeFunded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetCap\",\"type\":\"uint256\"}],\"internalType\":\"struct Funding.FundingParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingFundable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"limitLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetAmountIn\",\"type\":\"uint256\"}],\"name\":\"getStakedCitadelAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xCitadelAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gac\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_citadel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xCitadel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_citadelPriceInAssetOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetCap\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCitadelPriceInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCitadelPriceInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetCap\",\"type\":\"uint256\"}],\"name\":\"setAssetCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"setCitadelAssetPriceBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"}],\"name\":\"setDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDiscount\",\"type\":\"uint256\"}],\"name\":\"setDiscountLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_discountManager\",\"type\":\"address\"}],\"name\":\"setDiscountManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"}],\"name\":\"setSaleRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_citadelPriceInAsset\",\"type\":\"uint256\"}],\"name\":\"updateCitadelPriceInAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCitadelPriceInAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xCitadel\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Funding", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}