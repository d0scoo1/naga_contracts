{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin\\contracts\\utils\\Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts\\TransferHelper.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n\r\n// File: contracts\\HashBridge.sol\r\n\r\npragma solidity ^0.8.0;\r\ncontract HashBridge is Ownable {\r\n\taddress public hashAddress;\r\n\tuint public chainId;\r\n\tuint public reservationTime;\r\n\tuint public minVoteWeight;\r\n\tuint public votesThreshold;\r\n\tuint public arbitratorGuaranteePercent;\r\n\tuint public commissionForDeal;\r\n\tuint public finalVoteBonusPercent;\r\n\r\n\tuint public constant RATE_DECIMALS = 18;\r\n\r\n\tstruct Offer {\r\n\t\taddress token;\r\n\t\tuint amount;\r\n\t\tuint payChainId;\r\n\t\taddress payToken;\r\n\t\tuint rate;\r\n\t\taddress ownerAddress;\r\n\t\taddress payAddress;\r\n\t\tuint minPurchase;\r\n\t\tbool active;\r\n\t}\r\n\tstruct Order {\r\n\t\tuint offerId;\r\n\t\tuint rate;\r\n\t\taddress ownerAddress;\r\n\t\taddress withdrawAddress;\r\n\t\tuint amount;\r\n\t\tuint payAmount;\r\n\t\taddress payAddress;\r\n\t\tuint reservedUntil;\r\n\t\tuint votesFor;\r\n\t\tuint votesAgainst;\r\n\t\tbool complete;\r\n\t\tbool declined;\r\n\t}\r\n\tstruct Payment {\r\n\t\tuint chainId;\r\n\t\tuint orderId;\r\n\t\tuint payAmount;\r\n\t\taddress payToken;\r\n\t\taddress payAddress;\r\n\t}\r\n\tstruct Vote {\r\n\t    uint orderId;\r\n\t    address voterAddress;\r\n\t    uint voteWeight;\r\n\t    uint guarantee;\r\n\t    bool success;\r\n\t    bool ultimate;\r\n\t}\r\n\r\n\tOffer[] public offers;\r\n\tOrder[] public orders;\r\n\tPayment[] public payments;\r\n\tVote[] public votes;\r\n\r\n\tevent OfferAdd(\r\n\t\tuint indexed offerId,\r\n\t\taddress indexed token,\r\n\t\tuint indexed payChainId,\r\n\t\taddress payToken,\r\n\t\taddress ownerAddress,\r\n\t\taddress payAddress,\r\n\t\tuint amount,\r\n\t\tuint rate,\r\n\t\tuint minPurchase,\r\n\t\tbool active\r\n\t);\r\n\tevent OfferUpdate(\r\n\t\tuint indexed offerId,\r\n\t\taddress payAddress,\r\n\t\tuint amount,\r\n\t\tuint rate,\r\n\t\tuint minPurchase,\r\n\t\tbool active\r\n\t);\r\n\tevent OrderAdd(\r\n\t\tuint indexed orderId,\r\n\t\tuint indexed offerId,\r\n\t\taddress indexed ownerAddress,\r\n\t\tuint rate,\r\n\t\taddress withdrawAddress,\r\n\t\tuint amount,\r\n\t\tuint payAmount,\r\n\t\taddress payAddress,\r\n\t\tuint reservedUntil\r\n\t);\r\n\tevent OrderPay(\r\n\t\tuint indexed paymentId,\r\n\t\tuint indexed chainId,\r\n\t\tuint indexed orderId,\r\n\t\tuint payAmount,\r\n\t\taddress payToken,\r\n\t\taddress payAddress\r\n\t);\r\n\tevent VoteAdd(\r\n\t\tuint indexed voteId,\r\n\t\tuint indexed orderId,\r\n\t\taddress indexed voterAddress,\r\n\t\tuint voteWeight,\r\n\t\tuint guarantee,\r\n\t\tbool success,\r\n\t\tbool ultimate,\r\n\t\tuint offerAmount\r\n\t);\r\n\r\n\tconstructor(\r\n\t\taddress _hashAddress,\r\n\t\tuint _chainId,\r\n\t\tuint _reservationTime,\r\n\t\tuint _minVoteWeight,\r\n\t\tuint _votesThreshold,\r\n\t\tuint _arbitratorGuaranteePercent,\r\n\t\tuint _commissionForDeal,\r\n\t\tuint _finalVoteBonusPercent\r\n\t) {\r\n        hashAddress = _hashAddress;\r\n\t\tchainId = _chainId;\r\n\t\treservationTime = _reservationTime;\r\n\t\tminVoteWeight = _minVoteWeight;\r\n\t\tvotesThreshold = _votesThreshold;\r\n\t\tarbitratorGuaranteePercent = _arbitratorGuaranteePercent;\r\n\t\tcommissionForDeal = _commissionForDeal;\r\n\t\tfinalVoteBonusPercent = _finalVoteBonusPercent;\r\n    }\r\n\r\n\tfunction changeHashAddress(address _hashAddress) external onlyOwner {\r\n        hashAddress = _hashAddress;\r\n    }\r\n\r\n\tfunction changeReservationTime(uint _reservationTime) external onlyOwner {\r\n\t\treservationTime = _reservationTime;\r\n\t}\r\n\r\n\tfunction changeMinVoteWeight(uint _minVoteWeight) external onlyOwner {\r\n\t\tminVoteWeight = _minVoteWeight;\r\n\t}\r\n\r\n\tfunction changeVotesThreshold(uint _votesThreshold) external onlyOwner {\r\n\t\tvotesThreshold = _votesThreshold;\r\n\t}\r\n\r\n\tfunction changeArbitratorGuaranteePercent(uint _arbitratorGuaranteePercent) external onlyOwner {\r\n\t\tarbitratorGuaranteePercent = _arbitratorGuaranteePercent;\r\n\t}\r\n\r\n\tfunction changeCommissionForDeal(uint _commissionForDeal) external onlyOwner {\r\n\t\tcommissionForDeal = _commissionForDeal;\r\n\t}\r\n\r\n\tfunction changeFinalVoteBonusPercent(uint _finalVoteBonusPercent) external onlyOwner {\r\n\t\tfinalVoteBonusPercent = _finalVoteBonusPercent;\r\n\t}\r\n\r\n\tfunction addOffer(\r\n\t\taddress _token,\r\n\t\tuint _amount,\r\n\t\tuint _payChainId,\r\n\t\taddress _payToken,\r\n\t\tuint _rate,\r\n\t\taddress _payAddress,\r\n\t\tuint _minPurchase\r\n\t) external {\r\n\t\trequire(_amount > 0, \"Amount must be greater than 0\");\r\n\t\trequire(_amount >= _minPurchase, \"Amount must not be less than the minimum purchase\");\r\n\t\trequire(_rate > 0, \"Rate must be greater than 0\");\r\n\t\t_checkExchangerHashBalance(msg.sender);\r\n\t\tTransferHelper.safeTransferFrom(_token, msg.sender, address(this), _amount);\r\n\t\tuint offerId = offers.length;\r\n\t\toffers.push(Offer(_token, _amount, _payChainId, _payToken, _rate, msg.sender, _payAddress, _minPurchase, true));\r\n\t\temit OfferAdd(offerId, _token, _payChainId, _payToken, msg.sender, _payAddress, _amount, _rate, _minPurchase, true);\r\n\t}\r\n\r\n\tfunction updateOffer(uint _offerId, uint _amount, uint _rate, address _payAddress, uint _minPurchase) external {\r\n\t\t_checkOfferAccess(_offerId);\r\n\t\trequire(_rate > 0, \"Rate must be greater than 0\");\r\n\t\tuint blockedAmount = _getBlockedAmount(_offerId);\r\n\t\trequire(_amount >= blockedAmount, \"You can not withdraw tokens ordered by customers\");\r\n\t\tif (_amount > offers[_offerId].amount) {\r\n\t\t\tTransferHelper.safeTransferFrom(offers[_offerId].token, msg.sender, address(this), _amount - offers[_offerId].amount);\r\n\t\t} else {\r\n\t\t\tTransferHelper.safeTransfer(offers[_offerId].token, msg.sender, offers[_offerId].amount - _amount);\r\n\t\t}\r\n\t\toffers[_offerId].amount = _amount;\r\n\t\toffers[_offerId].rate = _rate;\r\n\t\toffers[_offerId].payAddress = _payAddress;\r\n\t\toffers[_offerId].minPurchase = _minPurchase;\r\n\t\temit OfferUpdate(_offerId, _payAddress, _amount, _rate, _minPurchase, offers[_offerId].active);\r\n\t}\r\n\r\n\tfunction activateOffer(uint _offerId) external {\r\n\t\t_checkOfferAccess(_offerId);\r\n\t\trequire(offers[_offerId].active == false, \"Offer is already active\");\r\n\t\toffers[_offerId].active = true;\r\n\t\temit OfferUpdate(_offerId, offers[_offerId].payAddress, offers[_offerId].amount, offers[_offerId].rate, offers[_offerId].minPurchase, true);\r\n\t}\r\n\r\n\tfunction deactivateOffer(uint _offerId) external {\r\n\t\t_checkOfferAccess(_offerId);\r\n\t\trequire(offers[_offerId].active == true, \"Offer is already inactive\");\r\n\t\toffers[_offerId].active = false;\r\n\t\temit OfferUpdate(_offerId, offers[_offerId].payAddress, offers[_offerId].amount, offers[_offerId].rate, offers[_offerId].minPurchase, false);\r\n\t}\r\n\r\n\tfunction addOrder(uint _offerId, address _withdrawAddress, uint _amount, uint _payAmount) external {\r\n\t\trequire(_offerId < offers.length, \"Incorrect offerId\");\r\n\t\trequire(offers[_offerId].active == true, \"Offer is inactive\");\r\n\t\trequire(_amount > 0 || _payAmount > 0, \"Amount must be greater than 0\");\r\n\t\t_checkExchangerHashBalance(offers[_offerId].ownerAddress);\r\n\t\tuint rate = offers[_offerId].rate;\r\n\t\tif (_amount > 0) {\r\n\t\t\t_payAmount = _amount * rate / (10 ** RATE_DECIMALS);\r\n\t\t} else {\r\n\t\t\t_amount = _payAmount * (10 ** RATE_DECIMALS) / rate;\r\n\t\t}\r\n\t\trequire(_amount >= offers[_offerId].minPurchase, \"Amount is less than the minimum purchase\");\r\n\t\tuint blockedAmount = _getBlockedAmount(_offerId);\r\n\t\trequire(_amount <= offers[_offerId].amount - blockedAmount, \"Not enough tokens in the offer\");\r\n\t\taddress _payAddress = offers[_offerId].payAddress;\r\n\t\tuint reservedUntil = block.timestamp + reservationTime;\r\n\t\tuint orderId = orders.length;\r\n\t\torders.push(Order(_offerId, rate, msg.sender, _withdrawAddress, _amount, _payAmount, _payAddress, reservedUntil, 0, 0, false, false));\r\n\t\temit OrderAdd(orderId, _offerId, msg.sender, rate, _withdrawAddress, _amount, _payAmount, _payAddress, reservedUntil);\r\n\t}\r\n\r\n\tfunction payOrder(uint _chainId, uint _orderId, uint _payAmount, address _payToken, address _payAddress) external {\r\n\t\trequire(_payAmount > 0, \"Amount must be greater than 0\");\r\n\t\tTransferHelper.safeTransferFrom(_payToken, msg.sender, _payAddress, _payAmount);\r\n\t\tuint paymentId = payments.length;\r\n\t\tpayments.push(Payment(_chainId, _orderId, _payAmount, _payToken, _payAddress));\r\n\t\temit OrderPay(paymentId, _chainId, _orderId, _payAmount, _payToken, _payAddress);\r\n\t}\r\n\r\n\tfunction vote(uint _orderId, bool _success) external {\r\n\t    require(_orderId < orders.length, \"Incorrect orderId\");\r\n        require(orders[_orderId].complete == false, \"Tokens are already withdrawn\");\r\n        require(orders[_orderId].declined == false, \"Order is already declined\");\r\n        for (uint i = 0; i < votes.length; i++) {\r\n            if (votes[i].orderId == _orderId) {\r\n                require(votes[i].voterAddress != msg.sender, \"You've alreay voted for this order\");\r\n            }\r\n        }\r\n        uint voteWeight = _getHashBalance(msg.sender);\r\n        uint hashAllowance = _getHashAllowance(msg.sender);\r\n        if (hashAllowance < voteWeight) {\r\n            voteWeight = hashAllowance;\r\n        }\r\n        require(voteWeight >= minVoteWeight, \"Not enough HASH tokens\");\r\n        uint guarantee = voteWeight * arbitratorGuaranteePercent / 100;\r\n        uint offerId = orders[_orderId].offerId;\r\n\t\tbool ultimate = false;\r\n        if (_success) {\r\n            orders[_orderId].votesFor += voteWeight;\r\n            if (orders[_orderId].votesFor > votesThreshold) {\r\n                TransferHelper.safeTransfer(offers[offerId].token, orders[_orderId].withdrawAddress, orders[_orderId].amount);\r\n                orders[_orderId].complete = true;\r\n\t\t        offers[offerId].amount -= orders[_orderId].amount;\r\n\t\t        ultimate = true;\r\n            }\r\n        } else {\r\n            orders[_orderId].votesAgainst += voteWeight;\r\n            if (orders[_orderId].votesAgainst > votesThreshold) {\r\n                orders[_orderId].declined = true;\r\n                ultimate = true;\r\n            }\r\n        }\r\n        if (ultimate) {\r\n            (uint votesWeight, uint penalties) = _getOrderVotesInfo(_orderId, _success);\r\n            votesWeight += voteWeight;\r\n            uint commissionSent = 0;\r\n            uint penaltiesSent = 0;\r\n            for (uint i = 0; i < votes.length; i++) {\r\n    \t\t\tif (votes[i].orderId == _orderId && votes[i].success == _success) {\r\n    \t\t\t    uint commission = commissionForDeal * votes[i].voteWeight * (100 - finalVoteBonusPercent) / (votesWeight * 100);\r\n    \t\t\t    if (_success && commission > 0) {\r\n    \t\t\t        TransferHelper.safeTransferFrom(hashAddress, offers[offerId].ownerAddress, votes[i].voterAddress, commission);\r\n    \t\t\t\t    commissionSent += commission;\r\n    \t\t\t    }\r\n\t\t\t\t    uint penaltyCommission = penalties * votes[i].voteWeight * (100 - finalVoteBonusPercent) / (votesWeight * 100);\r\n\t\t\t        TransferHelper.safeTransfer(hashAddress, votes[i].voterAddress, penaltyCommission + votes[i].guarantee);\r\n\t\t\t        penaltiesSent += penaltyCommission;\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\tif (_success && commissionForDeal > commissionSent) {\r\n    \t\t    TransferHelper.safeTransferFrom(hashAddress, offers[offerId].ownerAddress, msg.sender, commissionForDeal - commissionSent);\r\n    \t\t}\r\n    \t\tif (penalties > penaltiesSent) {\r\n    \t\t    TransferHelper.safeTransfer(hashAddress, msg.sender, penalties - penaltiesSent);\r\n    \t\t}\r\n        } else {\r\n            TransferHelper.safeTransferFrom(hashAddress, msg.sender, address(this), guarantee);\r\n        }\r\n        uint voteId = votes.length;\r\n        votes.push(Vote(_orderId, msg.sender, voteWeight, guarantee, _success, ultimate));\r\n        emit VoteAdd(voteId, _orderId, msg.sender, voteWeight, guarantee, _success, ultimate, offers[offerId].amount);\r\n\t}\r\n\r\n\tfunction getOrderIdForArbitration(address _arbitratorAddress, uint _startId) external view returns(uint, bool) {\r\n\t    for (uint i = _startId; i < orders.length; i++) {\r\n\t\t\tif (orders[i].complete == true || orders[i].declined == true) {\r\n\t\t\t    continue;\r\n\t\t\t}\r\n\t\t\tbool returnThis = true;\r\n\t\t\tfor (uint j = 0; j < votes.length; j++) {\r\n\t\t\t    if (votes[j].orderId == i && votes[j].voterAddress == _arbitratorAddress) {\r\n\t\t\t        returnThis = false;\r\n\t\t\t        break;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t    if (returnThis) {\r\n\t\t        return (i, true);\r\n\t\t    }\r\n\t\t}\r\n\t\treturn (0, false);\r\n\t}\r\n\r\n\tfunction checkPayment(\r\n\t\tuint _chainId,\r\n\t\tuint _orderId,\r\n\t\tuint _payAmount,\r\n\t\taddress _payToken,\r\n\t\taddress _payAddress\r\n\t) external view returns(bool) {\r\n\t    for (uint i = 0; i < payments.length; i++) {\r\n\t        if (\r\n\t\t\t\tpayments[i].chainId == _chainId &&\r\n\t\t\t\tpayments[i].orderId == _orderId &&\r\n\t\t\t\tpayments[i].payAmount == _payAmount &&\r\n\t\t\t\tpayments[i].payToken == _payToken &&\r\n\t\t\t\tpayments[i].payAddress == _payAddress\r\n\t\t\t) {\r\n\t            return true;\r\n\t        }\r\n\t    }\r\n\t    return false;\r\n\t}\r\n\r\n\tfunction _checkOfferAccess(uint _offerId) private view {\r\n\t\trequire(_offerId < offers.length, \"Incorrect offerId\");\r\n\t\trequire(offers[_offerId].ownerAddress == msg.sender, \"Forbidden\");\r\n\t}\r\n\r\n\tfunction _getBlockedAmount(uint _offerId) private view returns(uint blockedAmount) {\r\n\t\tblockedAmount = 0;\r\n\t\tfor (uint i = 0; i < orders.length; i++) {\r\n\t\t\tif (orders[i].offerId == _offerId && orders[i].complete == false && orders[i].declined == false && orders[i].reservedUntil >= block.timestamp) {\r\n\t\t\t\tblockedAmount += orders[i].amount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _getHashBalance(address _address) private returns(uint balance) {\r\n\t    (bool success, bytes memory data) = hashAddress.call(\r\n\t        abi.encodeWithSelector(bytes4(keccak256(bytes('balanceOf(address)'))), _address)\r\n        );\r\n        require(success, \"Getting HASH balance failed\");\r\n        balance = abi.decode(data, (uint));\r\n\t}\r\n\r\n\tfunction _getHashAllowance(address _address) private returns(uint allowance) {\r\n\t    (bool success, bytes memory data) = hashAddress.call(\r\n\t        abi.encodeWithSelector(bytes4(keccak256(bytes('balanceOf(address)'))), _address, address(this))\r\n        );\r\n        require(success, \"Getting HASH allowance failed\");\r\n        allowance = abi.decode(data, (uint));\r\n\t}\r\n\r\n\tfunction _getOrderVotesInfo(uint _orderId, bool _success) private view returns(uint votesWeight, uint penalties) {\r\n\t    votesWeight = 0;\r\n\t    penalties = 0;\r\n\t    for (uint i = 0; i < votes.length; i++) {\r\n\t\t\tif (votes[i].orderId == _orderId) {\r\n    \t\t\tif (votes[i].success == _success) {\r\n    \t\t\t\tvotesWeight += votes[i].voteWeight;\r\n    \t\t\t} else {\r\n    \t\t\t    penalties += votes[i].guarantee;\r\n    \t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _checkExchangerHashBalance(address _address) private {\r\n\t    uint balance = _getHashBalance(_address);\r\n\t    uint allowance = _getHashAllowance(_address);\r\n\t    for (uint i = 0; i < offers.length; i++) {\r\n\t        if (offers[i].ownerAddress != _address) {\r\n\t            continue;\r\n\t        }\r\n\t        for (uint j = 0; j < orders.length; j++) {\r\n\t            if (orders[j].offerId == i && orders[j].complete == false && orders[j].declined == false && orders[j].reservedUntil >= block.timestamp) {\r\n\t                balance -= commissionForDeal;\r\n\t                allowance -= commissionForDeal;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    require(balance >= commissionForDeal && allowance >= commissionForDeal, \"Exchanger does not have enough HASH tokens for the deal arbitration\");\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hashAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votesThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_arbitratorGuaranteePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionForDeal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_finalVoteBonusPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"OfferAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"OfferUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservedUntil\",\"type\":\"uint256\"}],\"name\":\"OrderAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payAddress\",\"type\":\"address\"}],\"name\":\"OrderPay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guarantee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ultimate\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerAmount\",\"type\":\"uint256\"}],\"name\":\"VoteAdd\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"activateOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPurchase\",\"type\":\"uint256\"}],\"name\":\"addOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payAmount\",\"type\":\"uint256\"}],\"name\":\"addOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitratorGuaranteePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_arbitratorGuaranteePercent\",\"type\":\"uint256\"}],\"name\":\"changeArbitratorGuaranteePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionForDeal\",\"type\":\"uint256\"}],\"name\":\"changeCommissionForDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_finalVoteBonusPercent\",\"type\":\"uint256\"}],\"name\":\"changeFinalVoteBonusPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hashAddress\",\"type\":\"address\"}],\"name\":\"changeHashAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minVoteWeight\",\"type\":\"uint256\"}],\"name\":\"changeMinVoteWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservationTime\",\"type\":\"uint256\"}],\"name\":\"changeReservationTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votesThreshold\",\"type\":\"uint256\"}],\"name\":\"changeVotesThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payAddress\",\"type\":\"address\"}],\"name\":\"checkPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionForDeal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"deactivateOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalVoteBonusPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arbitratorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startId\",\"type\":\"uint256\"}],\"name\":\"getOrderIdForArbitration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"complete\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"declined\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payAddress\",\"type\":\"address\"}],\"name\":\"payOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPurchase\",\"type\":\"uint256\"}],\"name\":\"updateOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guarantee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ultimate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votesThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HashBridge", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000eb1112ac78d537853150e2a07e8b765e29d3f01900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000002116545850052128000000000000000000000000000000000000000000000000422ca8b0a00a425000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000d8d726b7177a8000000000000000000000000000000000000000000000000000000000000000000014", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5d15498b4c9320505b84c261fa55bbf0cfd3349e339765b914e5e583aedd1fbf"}]}