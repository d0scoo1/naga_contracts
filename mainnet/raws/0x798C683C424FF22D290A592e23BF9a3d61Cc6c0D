{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UIResolver/main.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface.sol\\\";\\nimport \\\"./helpers.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract InstaVaultUIResolver is Helpers {\\n    struct CommonVaultInfo {\\n        address token;\\n        uint8 decimals;\\n        uint256 userBalance;\\n        uint256 userBalanceStETH;\\n        uint256 aaveTokenSupplyRate;\\n        uint256 aaveWETHBorrowRate_;\\n        uint256 totalStEthBal;\\n        uint256 wethDebtAmt;\\n        uint256 userSupplyAmount;\\n        uint256 vaultTVLInAsset;\\n        uint256 availableWithdraw;\\n        uint256 ratioMin;\\n    }\\n\\n    /**\\n     * @dev Get all the info\\n     * @notice Get info of all the vaults and the user\\n     */\\n    function getInfoCommon(address user_, address[] memory vaults_)\\n        public\\n        view\\n        returns (CommonVaultInfo[] memory commonInfo_)\\n    {\\n        uint256 len_ = vaults_.length;\\n        commonInfo_ = new CommonVaultInfo[](vaults_.length);\\n\\n        for (uint256 i = 0; i < len_; i++) {\\n            VaultInterfaceCommon vault_ = VaultInterfaceCommon(vaults_[i]);\\n            IAavePriceOracle aaveOracle_ = IAavePriceOracle(AAVE_ADDR_PROVIDER.getPriceOracle());\\n            uint256 ethPriceInBaseCurrency_ = aaveOracle_.getAssetPrice(WETH_ADDR);\\n\\n            if (vaults_[i] == ETH_VAULT_ADDR) {\\n                HelperStruct memory helper_;\\n                VaultInterfaceETH ethVault_ = VaultInterfaceETH(vaults_[i]);\\n                VaultInterfaceETH.Ratios memory ratios_ = ethVault_.ratios();\\n\\n                commonInfo_[i].token = ETH_ADDR;\\n                commonInfo_[i].decimals = 18;\\n                commonInfo_[i].userBalance = user_.balance;\\n                commonInfo_[i].userBalanceStETH = TokenInterface(STETH_ADDR)\\n                    .balanceOf(user_);\\n                commonInfo_[i].aaveTokenSupplyRate = 0;\\n\\n                VaultInterfaceETH.BalVariables memory balances_;\\n                (\\n                    helper_.stethCollateralAmt,\\n                    commonInfo_[i].wethDebtAmt,\\n                    balances_,\\n                    ,\\n\\n                ) = ethVault_.netAssets();\\n\\n                commonInfo_[i].totalStEthBal =\\n                    helper_.stethCollateralAmt +\\n                    balances_.stethDsaBal +\\n                    balances_.stethVaultBal;\\n                commonInfo_[i].availableWithdraw =\\n                    balances_.stethDsaBal +\\n                    balances_.stethVaultBal +\\n                    balances_.wethDsaBal +\\n                    balances_.wethVaultBal;\\n                commonInfo_[i].ratioMin = ratios_.minLimit;\\n            } else {\\n                VaultInterfaceToken tokenVault_ = VaultInterfaceToken(\\n                    vaults_[i]\\n                );\\n                VaultInterfaceToken.Ratios memory ratios_ = tokenVault_\\n                    .ratios();\\n\\n                commonInfo_[i].token = vault_.token();\\n                commonInfo_[i].decimals = vault_.decimals();\\n                commonInfo_[i].userBalance = TokenInterface(commonInfo_[i].token).balanceOf(user_);\\n                commonInfo_[i].userBalanceStETH = 0;\\n                (\\n                    ,\\n                    ,\\n                    ,\\n                    commonInfo_[i].aaveTokenSupplyRate,\\n                    ,\\n                    ,\\n                    ,\\n                    ,\\n                    ,\\n\\n                ) = AAVE_DATA.getReserveData(commonInfo_[i].token);\\n\\n                uint256 maxLimitThreshold = ratios_.maxLimit - 100;\\n                uint256 stethCollateralAmt_;\\n\\n                (\\n                    stethCollateralAmt_,\\n                    commonInfo_[i].wethDebtAmt,\\n                    commonInfo_[i].availableWithdraw\\n                ) = getAmounts(\\n                    vaults_[i],\\n                    commonInfo_[i].decimals,\\n                    aaveOracle_.getAssetPrice(commonInfo_[i].token),\\n                    ethPriceInBaseCurrency_,\\n                    ratios_.stEthLimit,\\n                    maxLimitThreshold\\n                );\\n\\n                commonInfo_[i].totalStEthBal =\\n                    stethCollateralAmt_ +\\n                    IERC20(STETH_ADDR).balanceOf(vault_.vaultDsa()) +\\n                    IERC20(STETH_ADDR).balanceOf(vaults_[i]);\\n                commonInfo_[i].ratioMin = ratios_.minLimit;\\n            }\\n\\n            (uint256 exchangePrice, ) = vault_.getCurrentExchangePrice();\\n            commonInfo_[i].userSupplyAmount =\\n                (vault_.balanceOf(user_) * exchangePrice) /\\n                1e18;\\n\\n            (, , , , commonInfo_[i].aaveWETHBorrowRate_, , , , , ) = AAVE_DATA\\n                .getReserveData(WETH_ADDR);\\n\\n            commonInfo_[i].vaultTVLInAsset =\\n                (vault_.totalSupply() * exchangePrice) /\\n                1e18;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/UIResolver/interface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IAaveAddressProvider {\\n    function getPriceOracle() external view returns (address);\\n}\\n\\ninterface IAavePriceOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\\n\\ninterface IAaveDataprovider {\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint40\\n        );\\n}\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n\\n    function transfer(address, uint256) external;\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface VaultInterfaceETH {\\n    struct BalVariables {\\n        uint256 wethVaultBal;\\n        uint256 wethDsaBal;\\n        uint256 stethVaultBal;\\n        uint256 stethDsaBal;\\n        uint256 totalBal;\\n    }\\n\\n    function netAssets()\\n        external\\n        view\\n        returns (\\n            uint256 netCollateral_,\\n            uint256 netBorrow_,\\n            BalVariables memory balances_,\\n            uint256 netSupply_,\\n            uint256 netBal_\\n        );\\n\\n    struct Ratios {\\n        uint16 maxLimit;\\n        uint16 minLimit;\\n        uint16 minLimitGap;\\n        uint128 maxBorrowRate;\\n    }\\n\\n    function ratios() external view returns (Ratios memory);\\n}\\n\\ninterface VaultInterfaceToken {\\n    struct Ratios {\\n        uint16 maxLimit;\\n        uint16 maxLimitGap;\\n        uint16 minLimit;\\n        uint16 minLimitGap;\\n        uint16 stEthLimit;\\n        uint128 maxBorrowRate;\\n    }\\n\\n    function ratios() external view returns (Ratios memory);\\n\\n    function idealExcessAmt() external view returns (uint256);\\n\\n    function getVaultBalances()\\n        external\\n        view\\n        returns (\\n            uint256 tokenCollateralAmt_,\\n            uint256 stethCollateralAmt_,\\n            uint256 wethDebtAmt_,\\n            uint256 tokenVaultBal_,\\n            uint256 tokenDSABal_,\\n            uint256 netTokenBal_\\n        );\\n}\\n\\ninterface VaultInterfaceCommon {\\n    function token() external view returns (address);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function getCurrentExchangePrice()\\n        external\\n        view\\n        returns (uint256 exchangePrice_, uint256 newRevenue_);\\n\\n    function vaultDsa() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/UIResolver/helpers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface.sol\\\";\\n\\ncontract Helpers {\\n    IAaveAddressProvider internal constant AAVE_ADDR_PROVIDER =\\n        IAaveAddressProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\\n    IAaveDataprovider internal constant AAVE_DATA =\\n        IAaveDataprovider(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n\\n    address internal constant ETH_ADDR =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant WETH_ADDR =\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal constant STETH_ADDR =\\n        0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n    address internal constant ETH_VAULT_ADDR =\\n        0xc383a3833A87009fD9597F8184979AF5eDFad019;\\n\\n    struct BalVariables {\\n        uint256 wethVaultBal;\\n        uint256 wethDsaBal;\\n        uint256 stethVaultBal;\\n        uint256 stethDsaBal;\\n        uint256 totalBal;\\n    }\\n\\n    struct HelperStruct {\\n        uint256 stethCollateralAmt;\\n        uint256 tokenVaultBal;\\n        uint256 tokenDSABal;\\n        uint256 netTokenBal;\\n        uint256 tokenCollateralAmt;\\n    }\\n\\n    /**\\n     * @dev Helper function\\n     * @notice Helper function for calculating amounts\\n     */\\n    function getAmounts(\\n        address vaultAddr_,\\n        uint256 decimals_,\\n        uint256 tokenPriceInBaseCurrency_,\\n        uint256 ethPriceInBaseCurrency_,\\n        uint256 stEthLimit_,\\n        uint256 maxLimitThreshold_\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 stethCollateralAmt,\\n            uint256 wethDebtAmt,\\n            uint256 availableWithdraw\\n        )\\n    {\\n        VaultInterfaceToken tokenVault_ = VaultInterfaceToken(vaultAddr_);\\n        HelperStruct memory helper_;\\n\\n        (\\n            helper_.tokenCollateralAmt,\\n            stethCollateralAmt,\\n            wethDebtAmt,\\n            helper_.tokenVaultBal,\\n            helper_.tokenDSABal,\\n            helper_.netTokenBal\\n        ) = tokenVault_.getVaultBalances();\\n\\n        uint256 tokenPriceInEth = (tokenPriceInBaseCurrency_ * 1e18) /\\n            ethPriceInBaseCurrency_;\\n        uint256 tokenColInEth_ = (helper_.tokenCollateralAmt *\\n            tokenPriceInEth) / (10**decimals_);\\n        uint256 ethCoveringDebt_ = (stethCollateralAmt * stEthLimit_) / 10000;\\n        uint256 excessDebt_ = (ethCoveringDebt_ < wethDebtAmt)\\n            ? wethDebtAmt - ethCoveringDebt_\\n            : 0;\\n        uint256 currentRatioMax = tokenColInEth_ == 0\\n            ? 0\\n            : (excessDebt_ * 10000) / tokenColInEth_;\\n\\n        availableWithdraw = helper_.tokenVaultBal + helper_.tokenDSABal;\\n        if (currentRatioMax < maxLimitThreshold_) {\\n            availableWithdraw += (((maxLimitThreshold_ - currentRatioMax) *\\n                helper_.tokenCollateralAmt) / maxLimitThreshold_);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"vaults_\",\"type\":\"address[]\"}],\"name\":\"getInfoCommon\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalanceStETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aaveTokenSupplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aaveWETHBorrowRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStEthBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethDebtAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userSupplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultTVLInAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratioMin\",\"type\":\"uint256\"}],\"internalType\":\"struct InstaVaultUIResolver.CommonVaultInfo[]\",\"name\":\"commonInfo_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InstaVaultUIResolver", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}