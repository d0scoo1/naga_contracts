{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ninterface IStreamable {\r\n    struct Stream {\r\n        uint256 deposit;\r\n        uint256 ratePerSecond;\r\n        uint256 remainingBalance;\r\n        uint256 startTime;\r\n        uint256 stopTime;\r\n        address recipient;\r\n        address sender;\r\n        address tokenAddress;\r\n        bool isEntity;\r\n    }\r\n\r\n    event CreateStream(\r\n        uint256 indexed streamId,\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 deposit,\r\n        address tokenAddress,\r\n        uint256 startTime,\r\n        uint256 stopTime\r\n    );\r\n\r\n    event WithdrawFromStream(\r\n        uint256 indexed streamId,\r\n        address indexed recipient,\r\n        uint256 amount\r\n    );\r\n\r\n    event CancelStream(\r\n        uint256 indexed streamId,\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 senderBalance,\r\n        uint256 recipientBalance\r\n    );\r\n\r\n    function balanceOf(uint256 streamId, address who)\r\n        external\r\n        view\r\n        returns (uint256 balance);\r\n\r\n    function getStream(uint256 streamId)\r\n        external\r\n        view\r\n        returns (\r\n            address sender,\r\n            address recipient,\r\n            uint256 deposit,\r\n            address token,\r\n            uint256 startTime,\r\n            uint256 stopTime,\r\n            uint256 remainingBalance,\r\n            uint256 ratePerSecond\r\n        );\r\n\r\n    function createStream(\r\n        address recipient,\r\n        uint256 deposit,\r\n        address tokenAddress,\r\n        uint256 startTime,\r\n        uint256 stopTime\r\n    ) external returns (uint256 streamId);\r\n\r\n    function withdrawFromStream(uint256 streamId, uint256 funds)\r\n        external\r\n        returns (bool);\r\n\r\n    function cancelStream(uint256 streamId) external returns (bool);\r\n\r\n    function initialize(address fundsAdmin) external;\r\n}\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IAdminControlledEcosystemReserve {\r\n    /** @notice Emitted when the funds admin changes\r\n     * @param fundsAdmin The new funds admin\r\n     **/\r\n    event NewFundsAdmin(address indexed fundsAdmin);\r\n\r\n    /** @notice Returns the mock ETH reference address\r\n     * @return address The address\r\n     **/\r\n    function ETH_MOCK_ADDRESS() external pure returns (address);\r\n\r\n    /**\r\n     * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\r\n     * @return address The address of the funds admin\r\n     **/\r\n    function getFundsAdmin() external view returns (address);\r\n\r\n    /**\r\n     * @dev Function for the funds admin to give ERC20 allowance to other parties\r\n     * @param token The address of the token to give allowance from\r\n     * @param recipient Allowance's recipient\r\n     * @param amount Allowance to approve\r\n     **/\r\n    function approve(\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Function for the funds admin to transfer ERC20 tokens to other parties\r\n     * @param token The address of the token to transfer\r\n     * @param recipient Transfer's recipient\r\n     * @param amount Amount to transfer\r\n     **/\r\n    function transfer(\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n}\r\ninterface IAaveEcosystemReserveController {\r\n    /**\r\n     * @notice Proxy function for ERC20's approve(), pointing to a specific collector contract\r\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\r\n     * @param token The asset address\r\n     * @param recipient Allowance's recipient\r\n     * @param amount Allowance to approve\r\n     **/\r\n    function approve(\r\n        address collector,\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Proxy function for ERC20's transfer(), pointing to a specific collector contract\r\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\r\n     * @param token The asset address\r\n     * @param recipient Transfer's recipient\r\n     * @param amount Amount to transfer\r\n     **/\r\n    function transfer(\r\n        address collector,\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Proxy function to create a stream of token on a specific collector contract\r\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\r\n     * @param recipient The recipient of the stream of token\r\n     * @param deposit Total amount to be streamed\r\n     * @param tokenAddress The ERC20 token to use as streaming asset\r\n     * @param startTime The unix timestamp for when the stream starts\r\n     * @param stopTime The unix timestamp for when the stream stops\r\n     * @return uint256 The stream id created\r\n     **/\r\n    function createStream(\r\n        address collector,\r\n        address recipient,\r\n        uint256 deposit,\r\n        IERC20 tokenAddress,\r\n        uint256 startTime,\r\n        uint256 stopTime\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Proxy function to withdraw from a stream of token on a specific collector contract\r\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\r\n     * @param streamId The id of the stream to withdraw tokens from\r\n     * @param funds Amount to withdraw\r\n     * @return bool If the withdrawal finished properly\r\n     **/\r\n    function withdrawFromStream(\r\n        address collector,\r\n        uint256 streamId,\r\n        uint256 funds\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @notice Proxy function to cancel a stream of token on a specific collector contract\r\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\r\n     * @param streamId The id of the stream to cancel\r\n     * @return bool If the cancellation happened correctly\r\n     **/\r\n    function cancelStream(address collector, uint256 streamId)\r\n        external\r\n        returns (bool);\r\n}\r\n\r\n\r\ncontract AaveEcosystemReserveController is\r\n    Ownable,\r\n    IAaveEcosystemReserveController\r\n{\r\n    /**\r\n     * @notice Constructor.\r\n     * @param aaveGovShortTimelock The address of the Aave's governance executor, owning this contract\r\n     */\r\n    constructor(address aaveGovShortTimelock) {\r\n        transferOwnership(aaveGovShortTimelock);\r\n    }\r\n\r\n    /// @inheritdoc IAaveEcosystemReserveController\r\n    function approve(\r\n        address collector,\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IAdminControlledEcosystemReserve(collector).approve(\r\n            token,\r\n            recipient,\r\n            amount\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc IAaveEcosystemReserveController\r\n    function transfer(\r\n        address collector,\r\n        IERC20 token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IAdminControlledEcosystemReserve(collector).transfer(\r\n            token,\r\n            recipient,\r\n            amount\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc IAaveEcosystemReserveController\r\n    function createStream(\r\n        address collector,\r\n        address recipient,\r\n        uint256 deposit,\r\n        IERC20 tokenAddress,\r\n        uint256 startTime,\r\n        uint256 stopTime\r\n    ) external onlyOwner returns (uint256) {\r\n        return\r\n            IStreamable(collector).createStream(\r\n                recipient,\r\n                deposit,\r\n                address(tokenAddress),\r\n                startTime,\r\n                stopTime\r\n            );\r\n    }\r\n\r\n    /// @inheritdoc IAaveEcosystemReserveController\r\n    function withdrawFromStream(\r\n        address collector,\r\n        uint256 streamId,\r\n        uint256 funds\r\n    ) external onlyOwner returns (bool) {\r\n        return IStreamable(collector).withdrawFromStream(streamId, funds);\r\n    }\r\n\r\n    /// @inheritdoc IAaveEcosystemReserveController\r\n    function cancelStream(address collector, uint256 streamId)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return IStreamable(collector).cancelStream(streamId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aaveGovShortTimelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AaveEcosystemReserveController", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ee56e2b3d491590b5b31738cc34d5232f378a8d5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4779d342467c7c0a113002ce3201d9ac1c081eebfe13a5a40addb0b05c6efcba"}]}