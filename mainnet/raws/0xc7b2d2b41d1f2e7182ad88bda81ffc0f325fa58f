{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IERC20Custom {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract TokenVesting is Ownable, ReentrancyGuard {\r\n    IERC20Custom public tokenContract;\r\n    address public stakingContract;\r\n    \r\n    uint256 public lockedPeriod;\r\n    uint256 public totalLocked;\r\n    \r\n    mapping(address => uint256) private _userBalances;\r\n    mapping(address => uint256[2][]) private _userLocks;\r\n\r\n    modifier onlyStakingContract() {\r\n        require(stakingContract == _msgSender(), \"TokenVesting: caller is not allowed\");\r\n        _;\r\n    }\r\n\r\n\r\n    // constructor\r\n    constructor(address token, address staking, uint256 period) {\r\n        require(token != address(0) && staking != address(0), \"TokenVesting: not valid address\");\r\n        _setLockPeriod(period);\r\n        tokenContract = IERC20Custom(token);\r\n        stakingContract = staking;\r\n    }\r\n\r\n\r\n    // ownable public functions\r\n    function setTokenContract(address tokenContract_) public onlyOwner {\r\n        require(tokenContract_ != address(0), \"TokenVesting: null address for Token contract\");\r\n        tokenContract = IERC20Custom(tokenContract_);\r\n    }\r\n\r\n    function setStakingContract(address stakingContract_) public onlyOwner {\r\n        require(stakingContract_ != address(0), \"TokenVesting: null address for Token contract\");\r\n        stakingContract = stakingContract_;\r\n    }\r\n\r\n    function setLockPeriod(uint256 period) public onlyOwner {\r\n        _setLockPeriod(period);\r\n    }\r\n\r\n    function addVestingData(address user, uint256 amount) public onlyOwner {\r\n        _addVestingData(user, amount);\r\n    }\r\n\r\n    function batchAddVestingData(address[] calldata users, uint256[] calldata amounts) public onlyOwner {\r\n        require(users.length == amounts.length,\"TokenVesting: wrong length\");\r\n\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            _addVestingData(users[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n\r\n    // restricted public functions\r\n    function addLock(address user, uint256 amount) public onlyStakingContract {\r\n        _addVestingData(user, amount);\r\n    }\r\n    \r\n    \r\n    // public functions\r\n    function getLockedBalance(address user) public view returns (uint256 balance) {\r\n        return _userBalances[user];\r\n    }\r\n    \r\n    function getLocksCount(address user) public view returns (uint256 count) {\r\n        return _userLocks[user].length;\r\n    }\r\n    \r\n    function getLockByIndex(address user, uint256 index) public view returns (uint256, uint256) {\r\n        require(index < _userLocks[user].length, \"TokenVesting: index out of range\");\r\n        uint256 amount = _userLocks[user][index][0];\r\n        uint256 releaseTime = _userLocks[user][index][1];\r\n        return (amount, releaseTime);\r\n    }\r\n    \r\n    function release() public nonReentrant {\r\n        require(_userBalances[_msgSender()] > 0, \"TokenVesting: empty balance\");\r\n        uint256 count;\r\n        \r\n        for (uint256 i = 0; i < _userLocks[_msgSender()].length; i++) {\r\n            if (block.timestamp >= _userLocks[_msgSender()][i][1]) {\r\n                uint256 amount = _userLocks[_msgSender()][i][0];\r\n                require(tokenContract.balanceOf(address(this)) >= amount, \"TokenVesting: insufficient tokens\");\r\n                _userBalances[_msgSender()] = _userBalances[_msgSender()] - amount;\r\n                totalLocked = totalLocked - amount;\r\n                tokenContract.transfer(_msgSender(), amount);\r\n                count++;            \r\n            }\r\n        }\r\n\r\n        while (count != 0) {\r\n            _userLocks[_msgSender()].pop();\r\n            count--;\r\n        } \r\n    }\r\n\r\n    function getUnlockedBalance(address user) public view returns (uint256) {\r\n        uint256 balance = 0;\r\n        if (_userBalances[user] == 0) {\r\n            return balance;\r\n        }\r\n        \r\n        for (uint256 i = 0; i < _userLocks[user].length; i++) {\r\n            if (block.timestamp >= _userLocks[user][i][1]) {\r\n                balance = balance + _userLocks[user][i][0];          \r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    // private functions\r\n    function _setLockPeriod(uint256 period) private {\r\n        require(period > lockedPeriod, \"TokenVesting: not valid locked period\");\r\n        lockedPeriod = period;\r\n    }\r\n\r\n    function _addVestingData(address user, uint256 amount) private {\r\n        uint256 releaseTime = block.timestamp + lockedPeriod;\r\n        uint256 len = _userLocks[user].length + 1;\r\n        uint256[2][] memory newLocks = new uint256[2][](len);\r\n        newLocks[0][0] = amount;\r\n        newLocks[0][1] = releaseTime;\r\n\r\n        for (uint256 i = 0; i < _userLocks[user].length; i++) {\r\n            newLocks[i + 1] = _userLocks[user][i];\r\n        }\r\n        _userLocks[user] = newLocks;\r\n        _userBalances[user] = _userBalances[user] + amount;\r\n        totalLocked = totalLocked + amount;       \r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVestingData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchAddVestingData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLockByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLocksCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract_\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract_\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20Custom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenVesting", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b0915aa56d49785926c62b862115cb979a0f6443000000000000000000000000c0de9e35833ab6089a2657149cef8cac08dab95f0000000000000000000000000000000000000000000000000000000000f0c2ac", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://89b5977ac56be197258d365d61121f45f11b94c602bd5fa0ab78661adb843707"}]}