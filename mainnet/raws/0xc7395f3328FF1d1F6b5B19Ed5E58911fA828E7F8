{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/bridges/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../common/Upgradeable.sol\\\";\\n\\ncontract Bridge is Upgradeable {\\n    using SignatureUtils for TransferData;\\n\\n    constructor(address _proxy) Upgradeable(_proxy) {}\\n\\n    /**\\n     * @dev To approve or revoke a token from acceptance list\\n     * @param _tokenAddress the token address\\n     * @param _value true/false\\n     */\\n    function setTokenApproval(address _tokenAddress, bool _value)\\n        public\\n        onlyOwner\\n    {\\n        isApprovedToken[_tokenAddress] = _value;\\n    }\\n\\n    /**\\n     * @dev To approve or revoke a signer from list\\n     * @param _newSigner the address of new signer\\n     */\\n    function setSigner(address _newSigner) public onlyOwner {\\n        require(_newSigner != address(0), \\\"Bridge: signer is zero address\\\");\\n        require(\\n            _newSigner != signer,\\n            \\\"Bridge: cannot transfer to current signer\\\"\\n        );\\n        signer = _newSigner;\\n        emit SetSignerEvent(_newSigner);\\n    }\\n\\n    /**\\n     * @dev To add or remove an account from blacklist\\n     * @param _account the address of account\\n     * @param _value true/false\\n     */\\n    function setBlacklist(address _account, bool _value) public onlyOwner {\\n        require(_account != address(0), \\\"Bridge: receive zero address\\\");\\n        blacklist[_account] = _value;\\n    }\\n\\n    /**\\n     * @dev To check an account blacklisted or not\\n     * @param _account the account to check\\n     */\\n    function isBlacklisted(address _account) public view returns (bool) {\\n        return blacklist[_account];\\n    }\\n\\n    /**\\n     * @dev Call when the user swap from chain A to chain B\\n     * @notice The user will burn the token, then it will return the other token on other chain\\n\\n     * @param _addr (0) fromToken, (1) toToken, (2) fromAddress, (3) toAddress\\n     * @param _data (0) amount\\n     * @param _internalTxId the transaction id\\n     */\\n    function burnToken(\\n        address[] memory _addr,\\n        uint256[] memory _data,\\n        string memory _internalTxId\\n    ) public notBlacklisted nonReentrant {\\n        TransferData memory transferData = TransferData(\\n            _addr[0],\\n            _addr[1],\\n            _addr[2],\\n            _addr[3],\\n            _data[0],\\n            _internalTxId\\n        );\\n\\n        _execute(transferData, 0, \\\"\\\", address(0));\\n    }\\n\\n    /**\\n     * @dev Call when the user claim on chain B when swapping from chain A to chain B\\n     * @param _addr (0) fromToken, (1) toToken, (2) fromAddress, (3) toAddress, (4) signer\\n     * @param _data (0) amount\\n     * @param _internalTxId the transaction id\\n     * @param _signature the transaction's signature created by the signer\\n     */\\n    function mintToken(\\n        address[] memory _addr,\\n        uint256[] memory _data,\\n        string memory _internalTxId,\\n        bytes memory _signature\\n    ) public notBlacklisted nonReentrant {\\n        TransferData memory transferData = TransferData(\\n            _addr[0],\\n            _addr[1],\\n            _addr[2],\\n            _addr[3],\\n            _data[0],\\n            _internalTxId\\n        );\\n\\n        _execute(transferData, 1, _signature, _addr[4]);\\n    }\\n\\n    /**\\n     * @dev Internal function to execute the lock/unlock request\\n     * @param _transferData the transfer data\\n     * @param _type 0: lock , 1: unlock\\n     * @param _signature the transaction's signature created by the signer\\n     */\\n    function _execute(\\n        TransferData memory _transferData,\\n        uint8 _type,\\n        bytes memory _signature,\\n        address _signer\\n    ) internal {\\n        {\\n            require(\\n                _transferData.amount > 0,\\n                \\\"Diamond Alpha Bridge: Amount must be greater than 0\\\"\\n            );\\n            require(\\n                _transferData.toAddress != address(0),\\n                \\\"Diamond Alpha Bridge: To address is zero address\\\"\\n            );\\n            require(\\n                _transferData.fromAddress != address(0),\\n                \\\"Diamond Alpha Bridge: From address is zero address\\\"\\n            );\\n            require(\\n                _transferData.fromToken != address(0),\\n                \\\"Diamond Alpha Bridge: Token address is zero address\\\"\\n            );\\n            require(\\n                _transferData.toToken != address(0),\\n                \\\"Diamond Alpha Bridge: Token address is zero address\\\"\\n            );\\n        }\\n\\n        if (_type == 0) {\\n            // 0: Lock --> Burn, 1: Unlock --> Mint\\n            require(\\n                msg.sender == _transferData.fromAddress,\\n                \\\"Diamond Alpha Bridge: Cannot lock token\\\"\\n            );\\n\\n            require(\\n                isApprovedToken[_transferData.fromToken],\\n                \\\"Diamond Alpha Bridge: Token is not supported\\\"\\n            );\\n\\n            IERC20(_transferData.fromToken).burnFrom(\\n                _transferData.fromAddress,\\n                _transferData.amount\\n            );\\n        } else {\\n            require(\\n                _transferData.toAddress == msg.sender,\\n                \\\"Diamond Alpha Bridge: You are not recipient\\\"\\n            );\\n\\n            require(_signer == signer, \\\"Diamond Alpha Bridge: Only signer\\\");\\n\\n            require(\\n                isApprovedToken[_transferData.toToken],\\n                \\\"Diamond Alpha Bridge: Token is not supported\\\"\\n            );\\n\\n            require(\\n                _transferData.verify(_signature, _signer),\\n                \\\"Diamond Alpha Bridge: Verify transfer data failed\\\"\\n            );\\n\\n            require(\\n                !isExecutedTransaction[_signature],\\n                \\\"Diamond Alpha Bridge: Transfer data has been processed before\\\"\\n            );\\n\\n            IERC20(_transferData.toToken).mint(\\n                _transferData.toAddress,\\n                _transferData.amount\\n            );\\n\\n            isExecutedTransaction[_signature] = true;\\n        }\\n\\n        emit MintOrBurnEvent(\\n            _transferData.internalTxId,\\n            _transferData.toAddress,\\n            _transferData.fromAddress,\\n            _transferData.fromToken,\\n            _transferData.toToken,\\n            _transferData.amount,\\n            _type\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"../utils/SignatureUtils.sol\\\";\\nimport \\\"./Structs.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IProxy.sol\\\";\\n\\ncontract Upgradeable is ReentrancyGuard {\\n    address public immutable proxy;\\n    address public signer;\\n    mapping(address => bool) public isApprovedToken;\\n    mapping(bytes => bool) public isExecutedTransaction;\\n    mapping(address => bool) blacklist;\\n\\n    constructor(address _proxy) {\\n        proxy = _proxy;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == IProxy(proxy).proxyOwner(),\\n            \\\"Diamond Alpha Bridge: Only owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notBlacklisted() {\\n        require(\\n            !blacklist[msg.sender],\\n            \\\"Diamond Alpha Bridge: This address is blacklisted\\\"\\n        );\\n        _;\\n    }\\n\\n    event MintOrBurnEvent(\\n        string internalTxId,\\n        address indexed toAddress,\\n        address indexed fromAddress,\\n        address indexed fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint8 eventType\\n    );\\n\\n    event SetSignerEvent(address indexed newSigner);\\n}\\n\"\r\n    },\r\n    \"contracts/common/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/SignatureUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../common/Structs.sol\\\";\\n\\nlibrary SignatureUtils {\\n    \\n    /**\\n     * @dev To hash the transfer data into bytes32 \\n     * @param _data the transfer data\\n     * @return hash the hash of transfer data\\n     */\\n    function getMessageHash(TransferData memory _data)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _data.fromToken,\\n                    _data.toToken,\\n                    _data.fromAddress,\\n                    _data.toAddress,\\n                    _data.amount,\\n                    _data.internalTxId\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev To get the eth-signed message of hash\\n     * @param _messageHash the hash of transfer data\\n     * @return ethSignedMessage the eth signed message hash\\n     */\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    _messageHash\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev To verify the transfer data and transfer signature\\n     * @param _data the transfer data\\n     * @param _signature the signature of transfer\\n     * @return result true/false\\n     */\\n    function verify(TransferData memory _data, bytes memory _signature, address _signer)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes32 messageHash = getMessageHash(_data);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n        return recoverSigner(ethSignedMessageHash, _signature) == _signer;\\n    }\\n\\n    /**\\n     * @dev To recover the signer from signature and hash\\n     * @param _hash the hash of transfer data\\n     * @param _signature the signature which was signed by the admin\\n     * @return signer the address of signer\\n     */\\n    function recoverSigner(bytes32 _hash, bytes memory _signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        if (_signature.length != 65) {\\n            return (address(0));\\n        }\\n\\n        assembly {\\n            r := mload(add(_signature, 0x20))\\n            s := mload(add(_signature, 0x40))\\n            v := byte(0, mload(add(_signature, 0x60)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            // solium-disable-next-line arg-overflow\\n            return ecrecover(_hash, v, r, s);\\n        }\\n    }\\n}\\n// [\\\"0xeDb21A5bAdc10a5233767e6019C1a92AE6D14793\\\", \\\"0x577f0d8EE0e2C570fbC4f1f98beB85A848ef7556\\\", \\\"0xa781bc9ef3dc0d1e13f973264ff49531a1c84577\\\", \\\"0xa781bc9ef3dc0d1e13f973264ff49531a1c84577\\\", 100000000, \\\"62329a1cabac1e4302f4a07f\\\"]\"\r\n    },\r\n    \"contracts/common/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct TransferData {\\n    address fromToken;\\n    address toToken;\\n    address fromAddress;\\n    address toAddress;\\n    uint256 amount;\\n    string internalTxId;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Create `amount` tokens and assigns them to `account``, increasing the total supply\\n     */\\n    function mint(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IProxy {\\n    function proxyOwner() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"internalTxId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"MintOrBurnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"SetSignerEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_internalTxId\",\"type\":\"string\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isExecutedTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_internalTxId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setTokenApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Bridge", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004fcf47e196ae1b4db310aa3bec1c7862eea8f8c4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}