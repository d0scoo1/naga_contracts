{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/connectors/compound-import/main.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Compound-Import.\\n * @dev Lending & Borrowing.\\n */\\n\\nimport { TokenInterface, AccountInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { CompoundHelper } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\n\\ncontract CompoundImportResolver is CompoundHelper {\\n\\t/**\\n\\t * @notice this function performs the import of user's Compound positions into its DSA\\n\\t * @dev called internally by the importCompound and migrateCompound functions\\n\\t * @param _importInputData the struct containing borrowIds of the users borrowed tokens\\n\\t * @param _flashLoanFees list of flash loan fees\\n\\t */\\n\\tfunction _importCompound(\\n\\t\\tImportInputData memory _importInputData,\\n\\t\\tuint256[] memory _flashLoanFees\\n\\t) internal returns (string memory _eventName, bytes memory _eventParam) {\\n\\t\\trequire(\\n\\t\\t\\tAccountInterface(address(this)).isAuth(\\n\\t\\t\\t\\t_importInputData.userAccount\\n\\t\\t\\t),\\n\\t\\t\\t\\\"user-account-not-auth\\\"\\n\\t\\t);\\n\\n\\t\\trequire(_importInputData.supplyIds.length > 0, \\\"0-length-not-allowed\\\");\\n\\n\\t\\tImportData memory data;\\n\\n\\t\\tuint256 _length = add(\\n\\t\\t\\t_importInputData.supplyIds.length,\\n\\t\\t\\t_importInputData.borrowIds.length\\n\\t\\t);\\n\\t\\tdata.cTokens = new address[](_length);\\n\\n\\t\\t// get info about all borrowings and lendings by the user on Compound\\n\\t\\tdata = getBorrowAmounts(_importInputData, data);\\n\\t\\tdata = getSupplyAmounts(_importInputData, data);\\n\\n\\t\\t_enterMarkets(data.cTokens);\\n\\n\\t\\t// pay back user's debt using flash loan funds\\n\\t\\t_repayUserDebt(\\n\\t\\t\\t_importInputData.userAccount,\\n\\t\\t\\tdata.borrowCtokens,\\n\\t\\t\\tdata.borrowAmts\\n\\t\\t);\\n\\n\\t\\t// transfer user's tokens to DSA\\n\\t\\t_transferTokensToDsa(\\n\\t\\t\\t_importInputData.userAccount,\\n\\t\\t\\tdata.supplyCtokens,\\n\\t\\t\\tdata.supplyAmts\\n\\t\\t);\\n\\n\\t\\t// borrow the earlier position from Compound with flash loan fee added\\n\\t\\t_borrowDebtPosition(\\n\\t\\t\\tdata.borrowCtokens,\\n\\t\\t\\tdata.borrowAmts,\\n\\t\\t\\t_flashLoanFees\\n\\t\\t);\\n\\n\\t\\t_eventName = \\\"LogCompoundImport(address,address[],string[],string[],uint256[],uint256[])\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_importInputData.userAccount,\\n\\t\\t\\tdata.cTokens,\\n\\t\\t\\t_importInputData.supplyIds,\\n\\t\\t\\t_importInputData.borrowIds,\\n\\t\\t\\tdata.supplyAmts,\\n\\t\\t\\tdata.borrowAmts\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice import Compound position of the address passed in as userAccount\\n\\t * @dev internally calls _importContract to perform the actual import\\n\\t * @param _userAccount address of user whose position is to be imported to DSA\\n\\t * @param _supplyIds Ids of all tokens the user has supplied to Compound\\n\\t * @param _borrowIds Ids of all token borrowed by the user\\n\\t * @param _flashLoanFees list of flash loan fees\\n\\t */\\n\\tfunction importCompound(\\n\\t\\taddress _userAccount,\\n\\t\\tstring[] memory _supplyIds,\\n\\t\\tstring[] memory _borrowIds,\\n\\t\\tuint256[] memory _flashLoanFees\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\tImportInputData memory inputData = ImportInputData({\\n\\t\\t\\tuserAccount: _userAccount,\\n\\t\\t\\tsupplyIds: _supplyIds,\\n\\t\\t\\tborrowIds: _borrowIds\\n\\t\\t});\\n\\n\\t\\t(_eventName, _eventParam) = _importCompound(inputData, _flashLoanFees);\\n\\t}\\n}\\n\\ncontract ConnectV2CompoundImport is CompoundImportResolver {\\n\\tstring public constant name = \\\"Compound-Import-v2\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/interfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/compound-import/helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport { DSMath } from \\\"../../common/math.sol\\\";\\nimport { Basic } from \\\"../../common/basic.sol\\\";\\nimport { TokenInterface, AccountInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { ComptrollerInterface, CompoundMappingInterface, CETHInterface, CTokenInterface } from \\\"./interface.sol\\\";\\n\\nabstract contract Helpers is DSMath, Basic {\\n\\t/**\\n\\t * @dev Compound CEth\\n\\t */\\n\\tCETHInterface internal constant cEth =\\n\\t\\tCETHInterface(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\\n\\n\\t/**\\n\\t * @dev Compound Comptroller\\n\\t */\\n\\tComptrollerInterface internal constant troller =\\n\\t\\tComptrollerInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n\\n\\t/**\\n\\t * @dev Compound Mapping\\n\\t */\\n\\tCompoundMappingInterface internal constant compMapping =\\n\\t\\tCompoundMappingInterface(0xe7a85d0adDB972A4f0A4e57B698B37f171519e88);\\n\\n\\tstruct ImportData {\\n\\t\\taddress[] cTokens; // is the list of all tokens the user has interacted with (supply/borrow) -> used to enter markets\\n\\t\\tuint256[] borrowAmts;\\n\\t\\tuint256[] supplyAmts;\\n\\t\\taddress[] borrowTokens;\\n\\t\\taddress[] supplyTokens;\\n\\t\\tCTokenInterface[] borrowCtokens;\\n\\t\\tCTokenInterface[] supplyCtokens;\\n\\t\\taddress[] supplyCtokensAddr;\\n\\t\\taddress[] borrowCtokensAddr;\\n\\t}\\n\\n\\tstruct ImportInputData {\\n\\t\\taddress userAccount;\\n\\t\\tstring[] supplyIds;\\n\\t\\tstring[] borrowIds;\\n\\t}\\n\\n\\t/**\\n\\t * @dev enter compound market\\n\\t * @param _cotkens array of ctoken addresses to enter compound market\\n\\t */\\n\\tfunction _enterMarkets(address[] memory _cotkens) internal {\\n\\t\\ttroller.enterMarkets(_cotkens);\\n\\t}\\n}\\n\\ncontract CompoundHelper is Helpers {\\n\\t/**\\n\\t * @notice fetch the borrow details of the user\\n\\t * @dev approve the cToken to spend (borrowed amount of) tokens to allow for repaying later\\n\\t * @param _importInputData the struct containing borrowIds of the users borrowed tokens\\n\\t * @param data struct used to store the final data on which the CompoundHelper contract functions operate\\n\\t * @return ImportData the final value of param data\\n\\t */\\n\\tfunction getBorrowAmounts(\\n\\t\\tImportInputData memory _importInputData,\\n\\t\\tImportData memory data\\n\\t) internal returns (ImportData memory) {\\n\\t\\tif (_importInputData.borrowIds.length > 0) {\\n\\t\\t\\t// initialize arrays for borrow data\\n\\t\\t\\tuint256 _length = _importInputData.borrowIds.length;\\n\\t\\t\\tdata.borrowTokens = new address[](_length);\\n\\t\\t\\tdata.borrowCtokens = new CTokenInterface[](_length);\\n\\t\\t\\tdata.borrowCtokensAddr = new address[](_length);\\n\\t\\t\\tdata.borrowAmts = new uint256[](_length);\\n\\n\\t\\t\\t// populate the arrays with borrow tokens, cToken addresses and instances, and borrow amounts\\n\\t\\t\\tfor (uint256 i; i < _length; i++) {\\n\\t\\t\\t\\t(address _token, address _cToken) = compMapping.getMapping(\\n\\t\\t\\t\\t\\t_importInputData.borrowIds[i]\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t_token != address(0) && _cToken != address(0),\\n\\t\\t\\t\\t\\t\\\"ctoken mapping not found\\\"\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tdata.cTokens[i] = _cToken;\\n\\n\\t\\t\\t\\tdata.borrowTokens[i] = _token;\\n\\t\\t\\t\\tdata.borrowCtokens[i] = CTokenInterface(_cToken);\\n\\t\\t\\t\\tdata.borrowCtokensAddr[i] = _cToken;\\n\\t\\t\\t\\tdata.borrowAmts[i] = data.borrowCtokens[i].borrowBalanceCurrent(\\n\\t\\t\\t\\t\\t_importInputData.userAccount\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// give the resp. cToken address approval to spend tokens\\n\\t\\t\\t\\tif (_token != ethAddr && data.borrowAmts[i] > 0) {\\n\\t\\t\\t\\t\\t// will be required when repaying the borrow amount on behalf of the user\\n\\t\\t\\t\\t\\tTokenInterface(_token).approve(_cToken, data.borrowAmts[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn data;\\n\\t}\\n\\n\\t/**\\n\\t * @notice fetch the supply details of the user\\n\\t * @dev only reads data from blockchain hence view\\n\\t * @param _importInputData the struct containing supplyIds of the users supplied tokens\\n\\t * @param data struct used to store the final data on which the CompoundHelper contract functions operate\\n\\t * @return ImportData the final value of param data\\n\\t */\\n\\tfunction getSupplyAmounts(\\n\\t\\tImportInputData memory _importInputData,\\n\\t\\tImportData memory data\\n\\t) internal view returns (ImportData memory) {\\n\\t\\t// initialize arrays for supply data\\n\\t\\tuint256 _length = _importInputData.supplyIds.length;\\n\\t\\tdata.supplyTokens = new address[](_length);\\n\\t\\tdata.supplyCtokens = new CTokenInterface[](_length);\\n\\t\\tdata.supplyCtokensAddr = new address[](_length);\\n\\t\\tdata.supplyAmts = new uint256[](_length);\\n\\n\\t\\t// populate arrays with supply data (supply tokens address, cToken addresses, cToken instances and supply amounts)\\n\\t\\tfor (uint256 i; i < _length; i++) {\\n\\t\\t\\t(address _token, address _cToken) = compMapping.getMapping(\\n\\t\\t\\t\\t_importInputData.supplyIds[i]\\n\\t\\t\\t);\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_token != address(0) && _cToken != address(0),\\n\\t\\t\\t\\t\\\"ctoken mapping not found\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\tuint256 _supplyIndex = add(i, _importInputData.borrowIds.length);\\n\\t\\t\\tdata.cTokens[_supplyIndex] = _cToken;\\n\\n\\t\\t\\tdata.supplyTokens[i] = _token;\\n\\t\\t\\tdata.supplyCtokens[i] = CTokenInterface(_cToken);\\n\\t\\t\\tdata.supplyCtokensAddr[i] = (_cToken);\\n\\t\\t\\tdata.supplyAmts[i] = data.supplyCtokens[i].balanceOf(\\n\\t\\t\\t\\t_importInputData.userAccount\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\treturn data;\\n\\t}\\n\\n\\t/**\\n\\t * @notice repays the debt taken by user on Compound on its behalf to free its collateral for transfer\\n\\t * @dev uses the cEth contract for ETH repays, otherwise the general cToken interface\\n\\t * @param _userAccount the user address for which debt is to be repayed\\n\\t * @param _cTokenContracts array containing all interfaces to the cToken contracts in which the user has debt positions\\n\\t * @param _borrowAmts array containing the amount borrowed for each token\\n\\t */\\n\\tfunction _repayUserDebt(\\n\\t\\taddress _userAccount,\\n\\t\\tCTokenInterface[] memory _cTokenContracts,\\n\\t\\tuint256[] memory _borrowAmts\\n\\t) internal {\\n\\t\\tfor (uint256 i; i < _cTokenContracts.length; i++) {\\n\\t\\t\\tif (_borrowAmts[i] > 0) {\\n\\t\\t\\t\\tif (address(_cTokenContracts[i]) == address(cEth))\\n\\t\\t\\t\\t\\tcEth.repayBorrowBehalf{ value: _borrowAmts[i] }(\\n\\t\\t\\t\\t\\t\\t_userAccount\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\t_cTokenContracts[i].repayBorrowBehalf(\\n\\t\\t\\t\\t\\t\\t\\t_userAccount,\\n\\t\\t\\t\\t\\t\\t\\t_borrowAmts[i]\\n\\t\\t\\t\\t\\t\\t) == 0,\\n\\t\\t\\t\\t\\t\\t\\\"repayOnBehalf-failed\\\"\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice used to transfer user's supply position on Compound to DSA\\n\\t * @dev uses the transferFrom token in cToken contracts to transfer positions, requires approval from user first\\n\\t * @param _userAccount address of the user account whose position is to be transferred\\n\\t * @param _cTokenContracts array containing all interfaces to the cToken contracts in which the user has supply positions\\n\\t * @param _amts array containing the amount supplied for each token\\n\\t */\\n\\tfunction _transferTokensToDsa(\\n\\t\\taddress _userAccount,\\n\\t\\tCTokenInterface[] memory _cTokenContracts,\\n\\t\\tuint256[] memory _amts\\n\\t) internal {\\n\\t\\tfor (uint256 i; i < _cTokenContracts.length; i++)\\n\\t\\t\\tif (_amts[i] > 0)\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t_cTokenContracts[i].transferFrom(\\n\\t\\t\\t\\t\\t\\t_userAccount,\\n\\t\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\t\\t_amts[i]\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\\"ctoken-transfer-failed-allowance?\\\"\\n\\t\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice borrows the user's debt positions from Compound via DSA, so that its debt positions get imported to DSA\\n\\t * @dev actually borrow some extra amount than the original position to cover the flash loan fee\\n\\t * @param _cTokenContracts array containing all interfaces to the cToken contracts in which the user has debt positions\\n\\t * @param _amts array containing the amounts the user had borrowed originally from Compound plus the flash loan fee\\n\\t * @param _flashLoanFees flash loan fee (in percentage and scaled up to 10**2)\\n\\t */\\n\\tfunction _borrowDebtPosition(\\n\\t\\tCTokenInterface[] memory _cTokenContracts,\\n\\t\\tuint256[] memory _amts,\\n\\t\\tuint256[] memory _flashLoanFees\\n\\t) internal {\\n\\t\\tfor (uint256 i; i < _cTokenContracts.length; i++)\\n\\t\\t\\tif (_amts[i] > 0)\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t_cTokenContracts[i].borrow(\\n\\t\\t\\t\\t\\t\\tadd(_amts[i], _flashLoanFees[i])\\n\\t\\t\\t\\t\\t) == 0,\\n\\t\\t\\t\\t\\t\\\"borrow-failed-collateral?\\\"\\n\\t\\t\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/compound-import/events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ncontract Events {\\n\\tevent LogCompoundImport(\\n\\t\\taddress indexed user,\\n\\t\\taddress[] ctokens,\\n\\t\\tstring[] supplyIds,\\n\\t\\tstring[] borrowIds,\\n\\t\\tuint256[] supplyAmts,\\n\\t\\tuint256[] borrowAmts\\n\\t);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/math.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/basic.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\\n        try token.approve(spender, amount) {\\n\\n        } catch {\\n            token.approve(spender, 0);\\n            token.approve(spender, amount);\\n        }\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function changeEthAddrToWethAddr(address token) internal pure returns(address tokenAddr){\\n        tokenAddr = token == ethAddr ? wethAddr : token;\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            approve(token, address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/compound-import/interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface TokenInterface {\\n\\tfunction balanceOf(address) external view returns (uint256);\\n\\n\\tfunction allowance(address, address) external view returns (uint256);\\n\\n\\tfunction approve(address, uint256) external;\\n\\n\\tfunction transfer(address, uint256) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256\\n\\t) external returns (bool);\\n}\\n\\ninterface CTokenInterface {\\n\\tfunction mint(uint256 mintAmount) external returns (uint256);\\n\\n\\tfunction redeem(uint256 redeemTokens) external returns (uint256);\\n\\n\\tfunction borrow(uint256 borrowAmount) external returns (uint256);\\n\\n\\tfunction repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n\\tfunction repayBorrowBehalf(address borrower, uint256 repayAmount)\\n\\t\\texternal\\n\\t\\treturns (uint256); // For ERC20\\n\\n\\tfunction liquidateBorrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\taddress cTokenCollateral\\n\\t) external returns (uint256);\\n\\n\\tfunction borrowBalanceCurrent(address account) external returns (uint256);\\n\\n\\tfunction redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n\\tfunction exchangeRateCurrent() external returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256\\n\\t) external returns (bool);\\n\\n\\tfunction allowance(address, address) external view returns (uint256);\\n}\\n\\ninterface CETHInterface {\\n\\tfunction mint() external payable;\\n\\n\\tfunction repayBorrow() external payable;\\n\\n\\tfunction repayBorrowBehalf(address borrower) external payable;\\n\\n\\tfunction liquidateBorrow(address borrower, address cTokenCollateral)\\n\\t\\texternal\\n\\t\\tpayable;\\n}\\n\\ninterface ComptrollerInterface {\\n\\tfunction enterMarkets(address[] calldata cTokens)\\n\\t\\texternal\\n\\t\\treturns (uint256[] memory);\\n\\n\\tfunction exitMarket(address cTokenAddress) external returns (uint256);\\n\\n\\tfunction getAssetsIn(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address[] memory);\\n\\n\\tfunction getAccountLiquidity(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n}\\n\\ninterface CompoundMappingInterface {\\n\\tfunction cTokenMapping(string calldata tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address);\\n\\n\\tfunction getMapping(string calldata tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address, address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/stores.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAccount\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_supplyIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_borrowIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_flashLoanFees\",\"type\":\"uint256[]\"}],\"name\":\"importCompound\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConnectV2CompoundImport", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}