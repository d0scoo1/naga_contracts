{"status": "1", "message": "OK", "result": [{"SourceCode": "// Verified using https://dapp.tools\n\n// hevm: flattened sources of /nix/store/jhkj8my1hkpiklhhkl8xyzpxwpzix5fj-geb-uniswap-median/dapp/geb-uniswap-median/src/ConverterFeed.sol\npragma solidity =0.6.7;\n\n////// /nix/store/jhkj8my1hkpiklhhkl8xyzpxwpzix5fj-geb-uniswap-median/dapp/geb-uniswap-median/src/ConverterFeed.sol\n/* pragma solidity 0.6.7; */\n\nabstract contract ConverterFeedLike_1 {\n    function getResultWithValidity() virtual external view returns (uint256,bool);\n    function updateResult(address) virtual external;\n}\n\ncontract ConverterFeed {\n    // --- Auth ---\n    mapping (address => uint) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) virtual external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) virtual external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"ConverterFeed/account-not-authorized\");\n        _;\n    }\n\n    // --- General Vars ---\n    // Base feed you want to convert into another currency. ie: (RAI/ETH)\n    ConverterFeedLike_1 public targetFeed;\n    // Feed user for conversion. (i.e: Using the example above and ETH/USD willoutput RAI price in USD)\n    ConverterFeedLike_1 public denominationFeed;\n    // This is the denominator for computing\n    uint256           public converterFeedScalingFactor;    \n    // Manual flag that can be set by governance and indicates if a result is valid or not\n    uint256           public validityFlag;\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event ModifyParameters(\n      bytes32 parameter,\n      address addr\n    );\n    event ModifyParameters(\n      bytes32 parameter,\n      uint256 val\n    );\n    event FailedUpdate(address feed, bytes out);\n\n    constructor(\n      address targetFeed_,\n      address denominationFeed_,\n      uint256 converterFeedScalingFactor_\n    ) public {\n        require(targetFeed_ != address(0), \"ConverterFeed/null-target-feed\");\n        require(denominationFeed_ != address(0), \"ConverterFeed/null-denomination-feed\");\n        require(converterFeedScalingFactor_ > 0, \"ConverterFeed/null-scaling-factor\");\n\n        authorizedAccounts[msg.sender] = 1;\n\n        targetFeed                    = ConverterFeedLike_1(targetFeed_);\n        denominationFeed              = ConverterFeedLike_1(denominationFeed_);\n        validityFlag                  = 1;\n        converterFeedScalingFactor    = converterFeedScalingFactor_;\n\n        // Emit events\n        emit AddAuthorization(msg.sender);\n        emit ModifyParameters(bytes32(\"validityFlag\"), 1);\n        emit ModifyParameters(bytes32(\"converterFeedScalingFactor\"), converterFeedScalingFactor_);\n        emit ModifyParameters(bytes32(\"targetFeed\"), targetFeed_);\n        emit ModifyParameters(bytes32(\"denominationFeed\"), denominationFeed_);\n    }\n\n    // --- General Utils --\n    function both(bool x, bool y) private pure returns (bool z) {\n        assembly{ z := and(x, y)}\n    }\n    function either(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := or(x, y)}\n    }\n\n    // --- Math ---\n    function multiply(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }    \n\n    // --- Administration ---\n    /**\n    * @notice Modify uint256 parameters\n    * @param parameter Name of the parameter to modify\n    * @param data New parameter value\n    **/\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n        if (parameter == \"validityFlag\") {\n          require(either(data == 1, data == 0), \"ConverterFeed/invalid-data\");\n          validityFlag = data;\n        } else if (parameter == \"scalingFactor\") {\n          require(data > 0, \"ConverterFeed/invalid-data\");\n          converterFeedScalingFactor = data;\n        }\n        else revert(\"ConverterFeed/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n    /**\n    * @notice Modify uint256 parameters\n    * @param parameter Name of the parameter to modify\n    * @param data New parameter value\n    **/\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\n        require(data != address(0), \"ConverterFeed/invalid-data\");\n        if (parameter == \"targetFeed\") {\n          targetFeed = ConverterFeedLike_1(data);\n        } else if (parameter == \"denominationFeed\") {\n          denominationFeed = ConverterFeedLike_1(data);\n        } \n        else revert(\"ConverterFeed/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }  \n\n    /**\n    * @notice Updates both feeds\n    **/\n    function updateResult(address feeReceiver) external {\n        try targetFeed.updateResult(feeReceiver) {}\n        catch (bytes memory out) {\n          emit FailedUpdate(address(targetFeed), out);\n        }\n        try denominationFeed.updateResult(feeReceiver) {}\n        catch (bytes memory out) {\n          emit FailedUpdate(address(denominationFeed), out);\n        }        \n    }\n\n    // --- Getters ---\n    /**\n    * @notice Fetch the latest medianPrice (for maxWindow) or revert if is is null\n    **/\n    function read() external view returns (uint256) {\n        (uint256 value, bool valid) = getResultWithValidity();\n        require(valid, \"ConverterFeed/invalid-price-feed\");\n        return value;\n    }\n    /**\n    * @notice Fetch the latest medianPrice and whether it is null or not\n    **/\n    function getResultWithValidity() public view returns (uint256 value, bool valid) {\n        (uint256 targetValue, bool targetValid) = targetFeed.getResultWithValidity();\n        (uint256 denominationValue, bool denominationValid) = denominationFeed.getResultWithValidity();\n        value = multiply(targetValue, denominationValue) / converterFeedScalingFactor;\n        valid = both(\n            both(targetValid, denominationValid), \n            both(validityFlag == 1, value > 0)\n        );\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetFeed_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"denominationFeed_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"converterFeedScalingFactor_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"out\",\"type\":\"bytes\"}],\"name\":\"FailedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converterFeedScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominationFeed\",\"outputs\":[{\"internalType\":\"contract ConverterFeedLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResultWithValidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetFeed\",\"outputs\":[{\"internalType\":\"contract ConverterFeedLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"updateResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validityFlag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConverterFeed", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b7863264684f84fdc9d0bf77b1f339edd19d530e0000000000000000000000005e2bc99c193c11024456115a5f868ac2d502dfb80000000000000000000000000000000000000000000000000de0b6b3a7640000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}