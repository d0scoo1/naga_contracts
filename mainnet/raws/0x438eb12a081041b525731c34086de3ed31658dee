{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol@v4.3.2\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlUpgradeable {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal initializer {\r\n        __ERC165_init_unchained();\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal initializer {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\r\n    function __AccessControl_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __AccessControl_init_unchained();\r\n    }\r\n\r\n    function __AccessControl_init_unchained() internal initializer {\r\n    }\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        StringsUpgradeable.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        StringsUpgradeable.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeaconUpgradeable {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\r\n    function __ERC1967Upgrade_init() internal initializer {\r\n        __ERC1967Upgrade_init_unchained();\r\n    }\r\n\r\n    function __ERC1967Upgrade_init_unchained() internal initializer {\r\n    }\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallSecure(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        address oldImplementation = _getImplementation();\r\n\r\n        // Initial upgrade and setup call\r\n        _setImplementation(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(newImplementation, data);\r\n        }\r\n\r\n        // Perform rollback test if not already in progress\r\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\r\n        if (!rollbackTesting.value) {\r\n            // Trigger rollback using upgradeTo from the new implementation\r\n            rollbackTesting.value = true;\r\n            _functionDelegateCall(\r\n                newImplementation,\r\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\r\n            );\r\n            rollbackTesting.value = false;\r\n            // Check rollback was effective\r\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\r\n            // Finally reset to the new implementation and log the upgrade\r\n            _upgradeTo(newImplementation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is upgraded.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(\r\n        address newBeacon,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\r\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\r\n    function __UUPSUpgradeable_init() internal initializer {\r\n        __ERC1967Upgrade_init_unchained();\r\n        __UUPSUpgradeable_init_unchained();\r\n    }\r\n\r\n    function __UUPSUpgradeable_init_unchained() internal initializer {\r\n    }\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\r\n    address private immutable __self = address(this);\r\n\r\n    /**\r\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\r\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\r\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\r\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\r\n     * fail.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(address(this) != __self, \"Function must be called through delegatecall\");\r\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n     * encoded in `data`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallSecure(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n     * {upgradeTo} and {upgradeToAndCall}.\r\n     *\r\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n     *\r\n     * ```solidity\r\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n     * ```\r\n     */\r\n    function _authorizeUpgrade(address newImplementation) internal virtual;\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/DAOStackInterfaces.sol\r\n\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface Avatar {\r\n\tfunction nativeToken() external view returns (address);\r\n\r\n\tfunction nativeReputation() external view returns (address);\r\n\r\n\tfunction owner() external view returns (address);\r\n}\r\n\r\ninterface Controller {\r\n\tevent RegisterScheme(address indexed _sender, address indexed _scheme);\r\n\tevent UnregisterScheme(address indexed _sender, address indexed _scheme);\r\n\r\n\tfunction genericCall(\r\n\t\taddress _contract,\r\n\t\tbytes calldata _data,\r\n\t\taddress _avatar,\r\n\t\tuint256 _value\r\n\t) external returns (bool, bytes memory);\r\n\r\n\tfunction avatar() external view returns (address);\r\n\r\n\tfunction unregisterScheme(address _scheme, address _avatar)\r\n\t\texternal\r\n\t\treturns (bool);\r\n\r\n\tfunction unregisterSelf(address _avatar) external returns (bool);\r\n\r\n\tfunction registerScheme(\r\n\t\taddress _scheme,\r\n\t\tbytes32 _paramsHash,\r\n\t\tbytes4 _permissions,\r\n\t\taddress _avatar\r\n\t) external returns (bool);\r\n\r\n\tfunction isSchemeRegistered(address _scheme, address _avatar)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\r\n\tfunction getSchemePermissions(address _scheme, address _avatar)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bytes4);\r\n\r\n\tfunction addGlobalConstraint(\r\n\t\taddress _constraint,\r\n\t\tbytes32 _paramHash,\r\n\t\taddress _avatar\r\n\t) external returns (bool);\r\n\r\n\tfunction mintTokens(\r\n\t\tuint256 _amount,\r\n\t\taddress _beneficiary,\r\n\t\taddress _avatar\r\n\t) external returns (bool);\r\n\r\n\tfunction externalTokenTransfer(\r\n\t\taddress _token,\r\n\t\taddress _recipient,\r\n\t\tuint256 _amount,\r\n\t\taddress _avatar\r\n\t) external returns (bool);\r\n\r\n\tfunction sendEther(\r\n\t\tuint256 _amountInWei,\r\n\t\taddress payable _to,\r\n\t\taddress _avatar\r\n\t) external returns (bool);\r\n}\r\n\r\ninterface GlobalConstraintInterface {\r\n\tenum CallPhase {\r\n\t\tPre,\r\n\t\tPost,\r\n\t\tPreAndPost\r\n\t}\r\n\r\n\tfunction pre(\r\n\t\taddress _scheme,\r\n\t\tbytes32 _params,\r\n\t\tbytes32 _method\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev when return if this globalConstraints is pre, post or both.\r\n\t * @return CallPhase enum indication  Pre, Post or PreAndPost.\r\n\t */\r\n\tfunction when() external returns (CallPhase);\r\n}\r\n\r\ninterface ReputationInterface {\r\n\tfunction balanceOf(address _user) external view returns (uint256);\r\n\r\n\tfunction balanceOfAt(address _user, uint256 _blockNumber)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction getVotes(address _user) external view returns (uint256);\r\n\r\n\tfunction getVotesAt(\r\n\t\taddress _user,\r\n\t\tbool _global,\r\n\t\tuint256 _blockNumber\r\n\t) external view returns (uint256);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction totalSupplyAt(uint256 _blockNumber)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction delegateOf(address _user) external returns (address);\r\n}\r\n\r\ninterface SchemeRegistrar {\r\n\tfunction proposeScheme(\r\n\t\tAvatar _avatar,\r\n\t\taddress _scheme,\r\n\t\tbytes32 _parametersHash,\r\n\t\tbytes4 _permissions,\r\n\t\tstring memory _descriptionHash\r\n\t) external returns (bytes32);\r\n\r\n\tevent NewSchemeProposal(\r\n\t\taddress indexed _avatar,\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _intVoteInterface,\r\n\t\taddress _scheme,\r\n\t\tbytes32 _parametersHash,\r\n\t\tbytes4 _permissions,\r\n\t\tstring _descriptionHash\r\n\t);\r\n}\r\n\r\ninterface IntVoteInterface {\r\n\tevent NewProposal(\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _organization,\r\n\t\tuint256 _numOfChoices,\r\n\t\taddress _proposer,\r\n\t\tbytes32 _paramsHash\r\n\t);\r\n\r\n\tevent ExecuteProposal(\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _organization,\r\n\t\tuint256 _decision,\r\n\t\tuint256 _totalReputation\r\n\t);\r\n\r\n\tevent VoteProposal(\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _organization,\r\n\t\taddress indexed _voter,\r\n\t\tuint256 _vote,\r\n\t\tuint256 _reputation\r\n\t);\r\n\r\n\tevent CancelProposal(\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _organization\r\n\t);\r\n\tevent CancelVoting(\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _organization,\r\n\t\taddress indexed _voter\r\n\t);\r\n\r\n\t/**\r\n\t * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n\t * generated by calculating keccak256 of a incremented counter.\r\n\t * @param _numOfChoices number of voting choices\r\n\t * @param _proposalParameters defines the parameters of the voting machine used for this proposal\r\n\t * @param _proposer address\r\n\t * @param _organization address - if this address is zero the msg.sender will be used as the organization address.\r\n\t * @return proposal's id.\r\n\t */\r\n\tfunction propose(\r\n\t\tuint256 _numOfChoices,\r\n\t\tbytes32 _proposalParameters,\r\n\t\taddress _proposer,\r\n\t\taddress _organization\r\n\t) external returns (bytes32);\r\n\r\n\tfunction vote(\r\n\t\tbytes32 _proposalId,\r\n\t\tuint256 _vote,\r\n\t\tuint256 _rep,\r\n\t\taddress _voter\r\n\t) external returns (bool);\r\n\r\n\tfunction cancelVote(bytes32 _proposalId) external;\r\n\r\n\tfunction getNumberOfChoices(bytes32 _proposalId)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction isVotable(bytes32 _proposalId) external view returns (bool);\r\n\r\n\t/**\r\n\t * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n\t * @param _proposalId the ID of the proposal\r\n\t * @param _choice the index in the\r\n\t * @return voted reputation for the given choice\r\n\t */\r\n\tfunction voteStatus(bytes32 _proposalId, uint256 _choice)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\t/**\r\n\t * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n\t * @return bool true or false\r\n\t */\r\n\tfunction isAbstainAllow() external pure returns (bool);\r\n\r\n\t/**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n\tfunction getAllowedRangeOfChoices()\r\n\t\texternal\r\n\t\tpure\r\n\t\treturns (uint256 min, uint256 max);\r\n}\r\n\r\n\r\n// File contracts/utils/DataTypes.sol\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\nlibrary DataTypes {\r\n\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n\tstruct ReserveData {\r\n\t\t//stores the reserve configuration\r\n\t\tReserveConfigurationMap configuration;\r\n\t\t//the liquidity index. Expressed in ray\r\n\t\tuint128 liquidityIndex;\r\n\t\t//variable borrow index. Expressed in ray\r\n\t\tuint128 variableBorrowIndex;\r\n\t\t//the current supply rate. Expressed in ray\r\n\t\tuint128 currentLiquidityRate;\r\n\t\t//the current variable borrow rate. Expressed in ray\r\n\t\tuint128 currentVariableBorrowRate;\r\n\t\t//the current stable borrow rate. Expressed in ray\r\n\t\tuint128 currentStableBorrowRate;\r\n\t\tuint40 lastUpdateTimestamp;\r\n\t\t//tokens addresses\r\n\t\taddress aTokenAddress;\r\n\t\taddress stableDebtTokenAddress;\r\n\t\taddress variableDebtTokenAddress;\r\n\t\t//address of the interest rate strategy\r\n\t\taddress interestRateStrategyAddress;\r\n\t\t//the id of the reserve. Represents the position in the list of the active reserves\r\n\t\tuint8 id;\r\n\t}\r\n\r\n\tstruct ReserveConfigurationMap {\r\n\t\t//bit 0-15: LTV\r\n\t\t//bit 16-31: Liq. threshold\r\n\t\t//bit 32-47: Liq. bonus\r\n\t\t//bit 48-55: Decimals\r\n\t\t//bit 56: Reserve is active\r\n\t\t//bit 57: reserve is frozen\r\n\t\t//bit 58: borrowing is enabled\r\n\t\t//bit 59: stable rate borrowing enabled\r\n\t\t//bit 60-63: reserved\r\n\t\t//bit 64-79: reserve factor\r\n\t\tuint256 data;\r\n\t}\r\n\tenum InterestRateMode { NONE, STABLE, VARIABLE }\r\n}\r\n\r\n\r\n// File contracts/Interfaces.sol\r\n\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ERC20 {\r\n\tfunction balanceOf(address addr) external view returns (uint256);\r\n\r\n\tfunction transfer(address to, uint256 amount) external returns (bool);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction decimals() external view returns (uint8);\r\n\r\n\tfunction mint(address to, uint256 mintAmount) external returns (uint256);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tfunction name() external view returns (string memory);\r\n\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 amount);\r\n\tevent Transfer(\r\n\t\taddress indexed from,\r\n\t\taddress indexed to,\r\n\t\tuint256 amount,\r\n\t\tbytes data\r\n\t);\r\n}\r\n\r\ninterface cERC20 is ERC20 {\r\n\tfunction mint(uint256 mintAmount) external returns (uint256);\r\n\r\n\tfunction redeemUnderlying(uint256 mintAmount) external returns (uint256);\r\n\r\n\tfunction redeem(uint256 mintAmount) external returns (uint256);\r\n\r\n\tfunction exchangeRateCurrent() external returns (uint256);\r\n\r\n\tfunction exchangeRateStored() external view returns (uint256);\r\n\r\n\tfunction underlying() external returns (address);\r\n}\r\n\r\ninterface IGoodDollar is ERC20 {\r\n\tfunction getFees(uint256 value) external view returns (uint256, bool);\r\n\r\n\tfunction burn(uint256 amount) external;\r\n\r\n\tfunction burnFrom(address account, uint256 amount) external;\r\n\r\n\tfunction renounceMinter() external;\r\n\r\n\tfunction addMinter(address minter) external;\r\n\r\n\tfunction isMinter(address minter) external view returns (bool);\r\n\r\n\tfunction transferAndCall(\r\n\t\taddress to,\r\n\t\tuint256 value,\r\n\t\tbytes calldata data\r\n\t) external returns (bool);\r\n\r\n\tfunction formula() external view returns (address);\r\n}\r\n\r\ninterface IERC2917 is ERC20 {\r\n\t/// @dev This emit when interests amount per block is changed by the owner of the contract.\r\n\t/// It emits with the old interests amount and the new interests amount.\r\n\tevent InterestRatePerBlockChanged(uint256 oldValue, uint256 newValue);\r\n\r\n\t/// @dev This emit when a users' productivity has changed\r\n\t/// It emits with the user's address and the the value after the change.\r\n\tevent ProductivityIncreased(address indexed user, uint256 value);\r\n\r\n\t/// @dev This emit when a users' productivity has changed\r\n\t/// It emits with the user's address and the the value after the change.\r\n\tevent ProductivityDecreased(address indexed user, uint256 value);\r\n\r\n\t/// @dev Return the current contract's interests rate per block.\r\n\t/// @return The amount of interests currently producing per each block.\r\n\tfunction interestsPerBlock() external view returns (uint256);\r\n\r\n\t/// @notice Change the current contract's interests rate.\r\n\t/// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\r\n\t/// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestRatePerBlockChanged event.\r\n\tfunction changeInterestRatePerBlock(uint256 value) external returns (bool);\r\n\r\n\t/// @notice It will get the productivity of given user.\r\n\t/// @dev it will return 0 if user has no productivity proved in the contract.\r\n\t/// @return user's productivity and overall productivity.\r\n\tfunction getProductivity(address user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256, uint256);\r\n\r\n\t/// @notice increase a user's productivity.\r\n\t/// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\r\n\t/// @return true to confirm that the productivity added success.\r\n\tfunction increaseProductivity(address user, uint256 value)\r\n\t\texternal\r\n\t\treturns (bool);\r\n\r\n\t/// @notice decrease a user's productivity.\r\n\t/// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\r\n\t/// @return true to confirm that the productivity removed success.\r\n\tfunction decreaseProductivity(address user, uint256 value)\r\n\t\texternal\r\n\t\treturns (bool);\r\n\r\n\t/// @notice take() will return the interests that callee will get at current block height.\r\n\t/// @dev it will always calculated by block.number, so it will change when block height changes.\r\n\t/// @return amount of the interests that user are able to mint() at current block height.\r\n\tfunction take() external view returns (uint256);\r\n\r\n\t/// @notice similar to take(), but with the block height joined to calculate return.\r\n\t/// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\r\n\t/// @return amount of interests and the block height.\r\n\tfunction takeWithBlock() external view returns (uint256, uint256);\r\n\r\n\t/// @notice mint the avaiable interests to callee.\r\n\t/// @dev once it mint, the amount of interests will transfer to callee's address.\r\n\t/// @return the amount of interests minted.\r\n\tfunction mint() external returns (uint256);\r\n}\r\n\r\ninterface Staking {\r\n\tstruct Staker {\r\n\t\t// The staked DAI amount\r\n\t\tuint256 stakedDAI;\r\n\t\t// The latest block number which the\r\n\t\t// staker has staked tokens\r\n\t\tuint256 lastStake;\r\n\t}\r\n\r\n\tfunction stakeDAI(uint256 amount) external;\r\n\r\n\tfunction withdrawStake() external;\r\n\r\n\tfunction stakers(address staker) external view returns (Staker memory);\r\n}\r\n\r\ninterface Uniswap {\r\n\tfunction swapExactETHForTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETH(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction quote(\r\n\t\tuint256 amountA,\r\n\t\tuint256 reserveA,\r\n\t\tuint256 reserveB\r\n\t) external pure returns (uint256 amountB);\r\n\r\n\tfunction getAmountIn(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountIn);\r\n\r\n\tfunction getAmountOut(\r\n\t\tuint256 amountI,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountOut);\r\n\r\n\tfunction getAmountsOut(uint256 amountIn, address[] memory path)\r\n\t\texternal\r\n\t\tpure\r\n\t\treturns (uint256[] memory amounts);\r\n}\r\n\r\ninterface UniswapFactory {\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (address);\r\n}\r\n\r\ninterface UniswapPair {\r\n\tfunction getReserves()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint112 reserve0,\r\n\t\t\tuint112 reserve1,\r\n\t\t\tuint32 blockTimestampLast\r\n\t\t);\r\n\r\n\tfunction kLast() external view returns (uint256);\r\n\r\n\tfunction token0() external view returns (address);\r\n\r\n\tfunction token1() external view returns (address);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address owner) external view returns (uint256);\r\n}\r\n\r\ninterface Reserve {\r\n\tfunction buy(\r\n\t\taddress _buyWith,\r\n\t\tuint256 _tokenAmount,\r\n\t\tuint256 _minReturn\r\n\t) external returns (uint256);\r\n}\r\n\r\ninterface IIdentity {\r\n\tfunction isWhitelisted(address user) external view returns (bool);\r\n\r\n\tfunction addWhitelistedWithDID(address account, string memory did) external;\r\n\r\n\tfunction removeWhitelisted(address account) external;\r\n\r\n\tfunction addIdentityAdmin(address account) external returns (bool);\r\n\r\n\tfunction setAvatar(address _avatar) external;\r\n\r\n\tfunction isIdentityAdmin(address account) external view returns (bool);\r\n\r\n\tfunction owner() external view returns (address);\r\n\r\n\tevent WhitelistedAdded(address user);\r\n}\r\n\r\ninterface IUBIScheme {\r\n\tfunction currentDay() external view returns (uint256);\r\n\r\n\tfunction periodStart() external view returns (uint256);\r\n\r\n\tfunction hasClaimed(address claimer) external view returns (bool);\r\n}\r\n\r\ninterface IFirstClaimPool {\r\n\tfunction awardUser(address user) external returns (uint256);\r\n\r\n\tfunction claimAmount() external view returns (uint256);\r\n}\r\n\r\ninterface ProxyAdmin {\r\n\tfunction getProxyImplementation(address proxy)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (address);\r\n\r\n\tfunction getProxyAdmin(address proxy) external view returns (address);\r\n\r\n\tfunction upgrade(address proxy, address implementation) external;\r\n\r\n\tfunction owner() external view returns (address);\r\n\r\n\tfunction transferOwnership(address newOwner) external;\r\n}\r\n\r\n/**\r\n * @dev Interface for chainlink oracles to obtain price datas\r\n */\r\ninterface AggregatorV3Interface {\r\n\tfunction decimals() external view returns (uint8);\r\n\r\n\tfunction description() external view returns (string memory);\r\n\r\n\tfunction version() external view returns (uint256);\r\n\r\n\t// getRoundData and latestRoundData should both raise \"No data present\"\r\n\t// if they do not have data to report, instead of returning unset values\r\n\t// which could be misinterpreted as actual reported values.\r\n\tfunction getRoundData(uint80 _roundId)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint80 roundId,\r\n\t\t\tint256 answer,\r\n\t\t\tuint256 startedAt,\r\n\t\t\tuint256 updatedAt,\r\n\t\t\tuint80 answeredInRound\r\n\t\t);\r\n\r\n\tfunction latestAnswer() external view returns (int256);\r\n}\r\n\r\n/**\r\n\t@dev interface for AAVE lending Pool\r\n */\r\ninterface ILendingPool {\r\n\t/**\r\n\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\r\n\t * @param asset The address of the underlying asset to deposit\r\n\t * @param amount The amount to be deposited\r\n\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n\t *   is a different wallet\r\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n\t *   0 if the action is executed directly by the user, without any middle-man\r\n\t **/\r\n\tfunction deposit(\r\n\t\taddress asset,\r\n\t\tuint256 amount,\r\n\t\taddress onBehalfOf,\r\n\t\tuint16 referralCode\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n\t * @param asset The address of the underlying asset to withdraw\r\n\t * @param amount The underlying amount to be withdrawn\r\n\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n\t * @param to Address that will receive the underlying, same as msg.sender if the user\r\n\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n\t *   different wallet\r\n\t * @return The final amount withdrawn\r\n\t **/\r\n\tfunction withdraw(\r\n\t\taddress asset,\r\n\t\tuint256 amount,\r\n\t\taddress to\r\n\t) external returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the state and configuration of the reserve\r\n\t * @param asset The address of the underlying asset of the reserve\r\n\t * @return The state of the reserve\r\n\t **/\r\n\tfunction getReserveData(address asset)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (DataTypes.ReserveData memory);\r\n}\r\n\r\ninterface IDonationStaking {\r\n\tfunction stakeDonations() external payable;\r\n}\r\n\r\ninterface INameService {\r\n\tfunction getAddress(string memory _name) external view returns (address);\r\n}\r\n\r\ninterface IAaveIncentivesController {\r\n\t/**\r\n\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\r\n\t * @param amount Amount of rewards to claim\r\n\t * @param to Address that will be receiving the rewards\r\n\t * @return Rewards claimed\r\n\t **/\r\n\tfunction claimRewards(\r\n\t\taddress[] calldata assets,\r\n\t\tuint256 amount,\r\n\t\taddress to\r\n\t) external returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\r\n\t * @param user The address of the user\r\n\t * @return The rewards\r\n\t **/\r\n\tfunction getRewardsBalance(address[] calldata assets, address user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n}\r\n\r\ninterface IGoodStaking {\r\n\tfunction collectUBIInterest(address recipient)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t);\r\n\r\n\tfunction iToken() external view returns (address);\r\n\r\n\tfunction currentGains(\r\n\t\tbool _returnTokenBalanceInUSD,\r\n\t\tbool _returnTokenGainsInUSD\r\n\t)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t);\r\n\r\n\tfunction getRewardEarned(address user) external view returns (uint256);\r\n\r\n\tfunction getGasCostForInterestTransfer() external view returns (uint256);\r\n\r\n\tfunction rewardsMinted(\r\n\t\taddress user,\r\n\t\tuint256 rewardsPerBlock,\r\n\t\tuint256 blockStart,\r\n\t\tuint256 blockEnd\r\n\t) external returns (uint256);\r\n}\r\n\r\ninterface IHasRouter {\r\n\tfunction getRouter() external view returns (Uniswap);\r\n}\r\n\r\ninterface IAdminWallet {\r\n\tfunction addAdmins(address payable[] memory _admins) external;\r\n\r\n\tfunction removeAdmins(address[] memory _admins) external;\r\n\r\n\tfunction owner() external view returns (address);\r\n\r\n\tfunction transferOwnership(address _owner) external;\r\n}\r\n\r\n\r\n// File contracts/utils/DAOContract.sol\r\n\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\n\r\n/**\r\n@title Simple contract that keeps DAO contracts registery\r\n*/\r\n\r\ncontract DAOContract {\r\n\tController public dao;\r\n\r\n\taddress public avatar;\r\n\r\n\tINameService public nameService;\r\n\r\n\tfunction _onlyAvatar() internal view {\r\n\t\trequire(\r\n\t\t\taddress(dao.avatar()) == msg.sender,\r\n\t\t\t\"only avatar can call this method\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction setDAO(INameService _ns) internal {\r\n\t\tnameService = _ns;\r\n\t\tupdateAvatar();\r\n\t}\r\n\r\n\tfunction updateAvatar() public {\r\n\t\tdao = Controller(nameService.getAddress(\"CONTROLLER\"));\r\n\t\tavatar = dao.avatar();\r\n\t}\r\n\r\n\tfunction nativeToken() public view returns (IGoodDollar) {\r\n\t\treturn IGoodDollar(nameService.getAddress(\"GOODDOLLAR\"));\r\n\t}\r\n\r\n\tuint256[50] private gap;\r\n}\r\n\r\n\r\n// File contracts/utils/DAOUpgradeableContract.sol\r\n\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\n\r\n/**\r\n@title Simple contract that adds upgradability to DAOContract\r\n*/\r\n\r\ncontract DAOUpgradeableContract is Initializable, UUPSUpgradeable, DAOContract {\r\n\tfunction _authorizeUpgrade(address) internal virtual override {\r\n\t\t_onlyAvatar();\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/governance/Reputation.sol\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * based on https://github.com/daostack/infra/blob/60a79a1be02942174e21156c3c9655a7f0695dbd/contracts/Reputation.sol\r\n * @title Reputation system\r\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\r\n * A reputation is used to assign influence measure to a DAO'S peers.\r\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\r\n * The Reputation contract maintain a map of address to reputation value.\r\n * It provides an only minter role functions to mint and burn reputation _to (or _from) a specific address.\r\n */\r\ncontract Reputation is DAOUpgradeableContract, AccessControlUpgradeable {\r\n\tbytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n\r\n\tstring public name;\r\n\tstring public symbol;\r\n\r\n\tuint8 public decimals; //Number of decimals of the smallest unit\r\n\t// Event indicating minting of reputation to an address.\r\n\tevent Mint(address indexed _to, uint256 _amount);\r\n\t// Event indicating burning of reputation for an address.\r\n\tevent Burn(address indexed _from, uint256 _amount);\r\n\tuint256 private constant ZERO_HALF_256 = 0xffffffffffffffffffffffffffffffff;\r\n\r\n\t/// @dev `Checkpoint` is the structure that attaches a block number to a\r\n\t///  given value, the block number attached is the one that last changed the\r\n\t///  value\r\n\t//Checkpoint is uint256 :\r\n\t// bits 0-127 `fromBlock` is the block number that the value was generated from\r\n\t// bits 128-255 `value` is the amount of reputation at a specific block number\r\n\r\n\t// `balances` is the map that tracks the balance of each address, in this\r\n\t//  contract when the balance changes the block number that the change\r\n\t//  occurred is also included in the map\r\n\tmapping(address => uint256[]) public balances;\r\n\r\n\t// Tracks the history of the `totalSupply` of the reputation\r\n\tuint256[] public totalSupplyHistory;\r\n\r\n\t/**\r\n\t * @dev initialize\r\n\t */\r\n\tfunction initialize(INameService _ns) public initializer {\r\n\t\t__Reputation_init(_ns);\r\n\t}\r\n\r\n\tfunction __Reputation_init(INameService _ns) internal {\r\n\t\tdecimals = 18;\r\n\t\tname = \"GoodDAO\";\r\n\t\tsymbol = \"GOOD\";\r\n\t\t__Context_init_unchained();\r\n\t\t__ERC165_init_unchained();\r\n\t\t__AccessControl_init_unchained();\r\n\r\n\t\tsetDAO(_ns);\r\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, address(avatar));\r\n\t\t_setupRole(MINTER_ROLE, address(avatar));\r\n\t}\r\n\r\n\tfunction _canMint() internal view virtual {\r\n\t\trequire(hasRole(MINTER_ROLE, _msgSender()), \"Reputation: need minter role\");\r\n\t}\r\n\r\n\t/// @notice Generates `_amount` reputation that are assigned to `_owner`\r\n\t/// @param _user The address that will be assigned the new reputation\r\n\t/// @param _amount The quantity of reputation generated\r\n\t/// @return True if the reputation are generated correctly\r\n\tfunction mint(address _user, uint256 _amount) public returns (bool) {\r\n\t\t_canMint();\r\n\t\t_mint(_user, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _mint(address _user, uint256 _amount)\r\n\t\tinternal\r\n\t\tvirtual\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 curTotalSupply = totalSupplyLocalAt(block.number);\r\n\t\tuint256 previousBalanceTo = balanceOfLocalAt(_user, block.number);\r\n\r\n\t\tupdateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n\t\tupdateValueAtNow(balances[_user], previousBalanceTo + _amount);\r\n\t\temit Mint(_user, _amount);\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\t/// @notice Burns `_amount` reputation from `_owner`\r\n\t/// @param _user The address that will lose the reputation\r\n\t/// @param _amount The quantity of reputation to burn\r\n\t/// @return True if the reputation are burned correctly\r\n\tfunction burn(address _user, uint256 _amount) public returns (bool) {\r\n\t\t//user can burn his own rep other wise we check _canMint\r\n\t\tif (_user != _msgSender()) _canMint();\r\n\t\t_burn(_user, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _burn(address _user, uint256 _amount)\r\n\t\tinternal\r\n\t\tvirtual\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 curTotalSupply = totalSupplyLocalAt(block.number);\r\n\t\tuint256 amountBurned = _amount;\r\n\t\tuint256 previousBalanceFrom = balanceOfLocalAt(_user, block.number);\r\n\t\tif (previousBalanceFrom < amountBurned) {\r\n\t\t\tamountBurned = previousBalanceFrom;\r\n\t\t}\r\n\t\tupdateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\r\n\t\tupdateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\r\n\t\temit Burn(_user, amountBurned);\r\n\t\treturn amountBurned;\r\n\t}\r\n\r\n\tfunction balanceOfLocal(address _owner) public view returns (uint256) {\r\n\t\treturn balanceOfLocalAt(_owner, block.number);\r\n\t}\r\n\r\n\t/// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n\t/// @param _owner The address from which the balance will be retrieved\r\n\t/// @param _blockNumber The block number when the balance is queried\r\n\t/// @return The balance at `_blockNumber`\r\n\tfunction balanceOfLocalAt(address _owner, uint256 _blockNumber)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tif (\r\n\t\t\t(balances[_owner].length == 0) ||\r\n\t\t\t(uint128(balances[_owner][0]) > _blockNumber)\r\n\t\t) {\r\n\t\t\treturn 0;\r\n\t\t\t// This will return the expected balance during normal situations\r\n\t\t} else {\r\n\t\t\treturn getValueAt(balances[_owner], _blockNumber);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction totalSupplyLocal() public view virtual returns (uint256) {\r\n\t\treturn totalSupplyLocalAt(block.number);\r\n\t}\r\n\r\n\t/// @notice Total amount of reputation at a specific `_blockNumber`.\r\n\t/// @param _blockNumber The block number when the totalSupply is queried\r\n\t/// @return The total amount of reputation at `_blockNumber`\r\n\tfunction totalSupplyLocalAt(uint256 _blockNumber)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tif (\r\n\t\t\t(totalSupplyHistory.length == 0) ||\r\n\t\t\t(uint128(totalSupplyHistory[0]) > _blockNumber)\r\n\t\t) {\r\n\t\t\treturn 0;\r\n\t\t\t// This will return the expected totalSupply during normal situations\r\n\t\t} else {\r\n\t\t\treturn getValueAt(totalSupplyHistory, _blockNumber);\r\n\t\t}\r\n\t}\r\n\r\n\t////////////////\r\n\t// Internal helper functions to query and set a value in a snapshot array\r\n\t////////////////\r\n\t/// @dev `getValueAt` retrieves the number of reputation at a given block number\r\n\t/// @param checkpoints The history of values being queried\r\n\t/// @param _block The block number to retrieve the value at\r\n\t/// @return The number of reputation being queried\r\n\tfunction getValueAt(uint256[] storage checkpoints, uint256 _block)\r\n\t\tinternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 len = checkpoints.length;\r\n\t\tif (len == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Shortcut for the actual value\r\n\t\tuint256 cur = checkpoints[len - 1];\r\n\t\tif (_block >= uint128(cur)) {\r\n\t\t\treturn cur >> 128;\r\n\t\t}\r\n\r\n\t\tif (_block < uint128(checkpoints[0])) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// Binary search of the value in the array\r\n\t\tuint256 min = 0;\r\n\t\tuint256 max = len - 1;\r\n\t\twhile (max > min) {\r\n\t\t\tuint256 mid = (max + min + 1) / 2;\r\n\t\t\tif (uint128(checkpoints[mid]) <= _block) {\r\n\t\t\t\tmin = mid;\r\n\t\t\t} else {\r\n\t\t\t\tmax = mid - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn checkpoints[min] >> 128;\r\n\t}\r\n\r\n\t/// @dev `updateValueAtNow` used to update the `balances` map and the\r\n\t///  `totalSupplyHistory`\r\n\t/// @param checkpoints The history of data being updated\r\n\t/// @param _value The new number of reputation\r\n\tfunction updateValueAtNow(uint256[] storage checkpoints, uint256 _value)\r\n\t\tinternal\r\n\t{\r\n\t\trequire(uint128(_value) == _value, \"reputation overflow\"); //check value is in the 128 bits bounderies\r\n\t\tif (\r\n\t\t\t(checkpoints.length == 0) ||\r\n\t\t\t(uint128(checkpoints[checkpoints.length - 1]) < block.number)\r\n\t\t) {\r\n\t\t\tcheckpoints.push(uint256(uint128(block.number)) | (_value << 128));\r\n\t\t} else {\r\n\t\t\tcheckpoints[checkpoints.length - 1] = uint256(\r\n\t\t\t\t(checkpoints[checkpoints.length - 1] & uint256(ZERO_HALF_256)) |\r\n\t\t\t\t\t(_value << 128)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/governance/GReputation.sol\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\n\r\n/**\r\n * @title GReputation extends Reputation with delegation and cross blockchain merkle states\r\n * @dev NOTICE: this breaks DAOStack nativeReputation usage, since it is not possiible to upgrade\r\n * the original nativeReputation token. it means you can no longer rely on avatar.nativeReputation() or controller.nativeReputation()\r\n * to return the current reputation token.\r\n * The DAO avatar will be the owner of this reputation token and not the Controller.\r\n * Minting by the DAO will be done using controller.genericCall and not via controller.mintReputation\r\n */\r\ncontract GReputation is Reputation {\r\n\tbytes32 public constant ROOT_STATE = keccak256(\"rootState\");\r\n\r\n\t/// @notice The EIP-712 typehash for the contract's domain\r\n\tbytes32 public constant DOMAIN_TYPEHASH =\r\n\t\tkeccak256(\r\n\t\t\t\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\r\n\t\t);\r\n\r\n\t/// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n\tbytes32 public constant DELEGATION_TYPEHASH =\r\n\t\tkeccak256(\"Delegation(address delegate,uint256 nonce,uint256 expiry)\");\r\n\r\n\t/// @notice describe a single blockchain states\r\n\t/// @param stateHash the hash with the reputation state\r\n\t/// @param hashType the type of hash. currently just 0 = merkle tree root hash\r\n\t/// @param totalSupply the totalSupply at the blockchain\r\n\t/// @param blockNumber the effective blocknumber\r\n\tstruct BlockchainState {\r\n\t\tbytes32 stateHash;\r\n\t\tuint256 hashType;\r\n\t\tuint256 totalSupply;\r\n\t\tuint256 blockNumber;\r\n\t\tuint256[5] __reserevedSpace;\r\n\t}\r\n\r\n\t/// @notice A record of states for signing / validating signatures\r\n\tmapping(address => uint256) public nonces;\r\n\r\n\t/// @notice mapping from blockchain id hash to list of states\r\n\tmapping(bytes32 => BlockchainState[]) public blockchainStates;\r\n\r\n\t/// @notice mapping from stateHash to the user balance can be >0 only after supplying state proof\r\n\tmapping(bytes32 => mapping(address => uint256)) public stateHashBalances;\r\n\r\n\t/// @notice list of blockchains having a statehash for easy iteration\r\n\tbytes32[] public activeBlockchains;\r\n\r\n\t/// @notice keep map of user -> delegate\r\n\tmapping(address => address) public delegates;\r\n\r\n\t/// @notice map of user non delegated + delegated votes to user. this is used for actual voting\r\n\tmapping(address => uint256[]) public activeVotes;\r\n\r\n\t/// @notice keep map of address -> reputation recipient, an address can set that its earned rep will go to another address\r\n\tmapping(address => address) public reputationRecipients;\r\n\r\n\t/// @notice An event thats emitted when a delegate account's vote balance changes\r\n\tevent DelegateVotesChanged(\r\n\t\taddress indexed delegate,\r\n\t\taddress indexed delegator,\r\n\t\tuint256 previousBalance,\r\n\t\tuint256 newBalance\r\n\t);\r\n\r\n\tevent StateHash(string blockchain, bytes32 merkleRoot, uint256 totalSupply);\r\n\r\n\tevent StateHashProof(\r\n\t\tstring blockchain,\r\n\t\taddress indexed user,\r\n\t\tuint256 repBalance\r\n\t);\r\n\r\n\t/**\r\n\t * @dev initialize\r\n\t */\r\n\tfunction initialize(\r\n\t\tINameService _ns,\r\n\t\tstring calldata _stateId,\r\n\t\tbytes32 _stateHash,\r\n\t\tuint256 _totalSupply\r\n\t) external initializer {\r\n\t\t__Reputation_init(_ns);\r\n\t\tif (_totalSupply > 0)\r\n\t\t\t_setBlockchainStateHash(_stateId, _stateHash, _totalSupply);\r\n\t}\r\n\r\n\tfunction _canMint() internal view override {\r\n\t\trequire(\r\n\t\t\t_msgSender() == nameService.getAddress(\"GDAO_CLAIMERS\") ||\r\n\t\t\t\t_msgSender() == nameService.getAddress(\"GDAO_STAKING\") ||\r\n\t\t\t\t_msgSender() == nameService.getAddress(\"GDAO_STAKERS\") ||\r\n\t\t\t\thasRole(MINTER_ROLE, _msgSender()),\r\n\t\t\t\"GReputation: need minter role or be GDAO contract\"\r\n\t\t);\r\n\t}\r\n\r\n\t/// @notice internal function that overrides Reputation.sol with consideration to delegation\r\n\t/// @param _user the address to mint for\r\n\t/// @param _amount the amount of rep to mint\r\n\t/// @return the actual amount minted\r\n\tfunction _mint(address _user, uint256 _amount)\r\n\t\tinternal\r\n\t\toverride\r\n\t\treturns (uint256)\r\n\t{\r\n\t\taddress repTarget = reputationRecipients[_user];\r\n\t\trepTarget = repTarget != address(0) ? repTarget : _user;\r\n\r\n\t\tsuper._mint(repTarget, _amount);\r\n\r\n\t\t//set self as initial delegator\r\n\t\taddress delegator = delegates[repTarget];\r\n\t\tif (delegator == address(0)) {\r\n\t\t\tdelegates[repTarget] = repTarget;\r\n\t\t\tdelegator = repTarget;\r\n\t\t}\r\n\t\tuint256 previousVotes = getVotesAt(delegator, false, block.number);\r\n\r\n\t\t_updateDelegateVotes(\r\n\t\t\tdelegator,\r\n\t\t\trepTarget,\r\n\t\t\tpreviousVotes,\r\n\t\t\tpreviousVotes + _amount\r\n\t\t);\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\t/// @notice internal function that overrides Reputation.sol with consideration to delegation\r\n\t/// @param _user the address to burn from\r\n\t/// @param _amount the amount of rep to mint\r\n\t/// @return the actual amount burned\r\n\tfunction _burn(address _user, uint256 _amount)\r\n\t\tinternal\r\n\t\toverride\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 amountBurned = super._burn(_user, _amount);\r\n\t\taddress delegator = delegates[_user];\r\n\t\tdelegator = delegator != address(0) ? delegator : _user;\r\n\t\tdelegates[_user] = delegator;\r\n\r\n\t\tuint256 previousVotes = getVotesAt(delegator, false, block.number);\r\n\r\n\t\t_updateDelegateVotes(\r\n\t\t\tdelegator,\r\n\t\t\t_user,\r\n\t\t\tpreviousVotes,\r\n\t\t\tpreviousVotes - amountBurned\r\n\t\t);\r\n\r\n\t\treturn amountBurned;\r\n\t}\r\n\r\n\t/// @notice sets the state hash of a blockchain, can only be called by owner\r\n\t/// @param _id the string name of the blockchain (will be hashed to produce byte32 id)\r\n\t/// @param _hash the state hash\r\n\t/// @param _totalSupply total supply of reputation on the specific blockchain\r\n\tfunction setBlockchainStateHash(\r\n\t\tstring memory _id,\r\n\t\tbytes32 _hash,\r\n\t\tuint256 _totalSupply\r\n\t) public {\r\n\t\t_onlyAvatar();\r\n\t\t_setBlockchainStateHash(_id, _hash, _totalSupply);\r\n\t}\r\n\r\n\t/// @notice sets the state hash of a blockchain, can only be called by owner\r\n\t/// @param _id the string name of the blockchain (will be hashed to produce byte32 id)\r\n\t/// @param _hash the state hash\r\n\t/// @param _totalSupply total supply of reputation on the specific blockchain\r\n\tfunction _setBlockchainStateHash(\r\n\t\tstring memory _id,\r\n\t\tbytes32 _hash,\r\n\t\tuint256 _totalSupply\r\n\t) internal {\r\n\t\tbytes32 idHash = keccak256(bytes(_id));\r\n\r\n\t\t//dont consider rootState as blockchain,  it is a special state hash\r\n\t\tbool isRootState = idHash == ROOT_STATE;\r\n\t\trequire(\r\n\t\t\t!isRootState || totalSupplyLocalAt(block.number) == 0,\r\n\t\t\t\"rootState already created\"\r\n\t\t);\r\n\t\tif (isRootState) {\r\n\t\t\tupdateValueAtNow(totalSupplyHistory, _totalSupply);\r\n\t\t}\r\n\t\tuint256 i = 0;\r\n\t\tfor (; !isRootState && i < activeBlockchains.length; i++) {\r\n\t\t\tif (activeBlockchains[i] == idHash) break;\r\n\t\t}\r\n\r\n\t\t//if new blockchain\r\n\t\tif (!isRootState && i == activeBlockchains.length) {\r\n\t\t\tactiveBlockchains.push(idHash);\r\n\t\t}\r\n\r\n\t\tBlockchainState memory state;\r\n\t\tstate.stateHash = _hash;\r\n\t\tstate.totalSupply = _totalSupply;\r\n\t\tstate.blockNumber = block.number;\r\n\t\tblockchainStates[idHash].push(state);\r\n\r\n\t\temit StateHash(_id, _hash, _totalSupply);\r\n\t}\r\n\r\n\t/// @notice get the number of active votes a user holds after delegation (vs the basic balance of reputation he holds)\r\n\t/// @param _user the user to get active votes for\r\n\t/// @param _global wether to include reputation from other blockchains\r\n\t/// @param _blockNumber get votes state at specific block\r\n\t/// @return the number of votes\r\n\tfunction getVotesAt(\r\n\t\taddress _user,\r\n\t\tbool _global,\r\n\t\tuint256 _blockNumber\r\n\t) public view returns (uint256) {\r\n\t\tuint256 startingBalance = getValueAt(activeVotes[_user], _blockNumber);\r\n\r\n\t\tif (_global) {\r\n\t\t\tfor (uint256 i = 0; i < activeBlockchains.length; i++) {\r\n\t\t\t\tstartingBalance += getVotesAtBlockchain(\r\n\t\t\t\t\tactiveBlockchains[i],\r\n\t\t\t\t\t_user,\r\n\t\t\t\t\t_blockNumber\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn startingBalance;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice returns aggregated active votes in all blockchains and delegated\r\n\t * @param _user the user to get active votes for\r\n\t * @return the number of votes\r\n\t */\r\n\tfunction getVotes(address _user) public view returns (uint256) {\r\n\t\treturn getVotesAt(_user, true, block.number);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice same as getVotes, be compatible with metamask\r\n\t */\r\n\tfunction balanceOf(address _user) public view returns (uint256 balance) {\r\n\t\treturn getVotesAt(_user, block.number);\r\n\t}\r\n\r\n\t/**\r\n\t same as getVotes be compatible with compound \r\n\t */\r\n\tfunction getCurrentVotes(address _user) public view returns (uint256) {\r\n\t\treturn getVotesAt(_user, true, block.number);\r\n\t}\r\n\r\n\tfunction getPriorVotes(address _user, uint256 _block)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn getVotesAt(_user, true, _block);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice returns aggregated active votes in all blockchains and delegated at specific block\r\n\t * @param _user user to get active votes for\r\n\t * @param _blockNumber get votes state at specific block\r\n\t * @return the number of votes\r\n\t */\r\n\tfunction getVotesAt(address _user, uint256 _blockNumber)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn getVotesAt(_user, true, _blockNumber);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice returns total supply in current blockchain\r\n\t * @param _blockNumber get total supply at specific block\r\n\t * @return the totaly supply\r\n\t */\r\n\tfunction totalSupplyLocal(uint256 _blockNumber)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn totalSupplyLocalAt(_blockNumber);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice returns total supply in all blockchain aggregated\r\n\t * @param _blockNumber get total supply at specific block\r\n\t * @return the totaly supply\r\n\t */\r\n\tfunction totalSupplyAt(uint256 _blockNumber) public view returns (uint256) {\r\n\t\tuint256 startingSupply = totalSupplyLocalAt(_blockNumber);\r\n\t\tfor (uint256 i = 0; i < activeBlockchains.length; i++) {\r\n\t\t\tstartingSupply += totalSupplyAtBlockchain(\r\n\t\t\t\tactiveBlockchains[i],\r\n\t\t\t\t_blockNumber\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn startingSupply;\r\n\t}\r\n\r\n\t/// @dev This function makes it easy to get the total number of reputation\r\n\t/// @return The total number of reputation\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn totalSupplyAt(block.number);\r\n\t}\r\n\r\n\t/// @notice get the number of active votes a user holds after delegation in specific blockchain\r\n\t/// @param _id the keccak hash of the blockchain string id\r\n\t/// @param _user the user to get active votes for\r\n\t/// @param _blockNumber get votes state at specific block\r\n\t/// @return the number of votes\r\n\tfunction getVotesAtBlockchain(\r\n\t\tbytes32 _id,\r\n\t\taddress _user,\r\n\t\tuint256 _blockNumber\r\n\t) public view returns (uint256) {\r\n\t\tBlockchainState[] storage states = blockchainStates[_id];\r\n\t\tint256 i = int256(states.length);\r\n\r\n\t\tif (i == 0) return 0;\r\n\t\tBlockchainState storage state = states[uint256(i - 1)];\r\n\t\tfor (i = i - 1; i >= 0; i--) {\r\n\t\t\tif (state.blockNumber <= _blockNumber) break;\r\n\t\t\tstate = states[uint256(i - 1)];\r\n\t\t}\r\n\t\tif (i < 0) return 0;\r\n\r\n\t\treturn stateHashBalances[state.stateHash][_user];\r\n\t}\r\n\r\n\t/**\r\n\t * @notice returns total supply in a specific blockchain\r\n\t * @param _blockNumber get total supply at specific block\r\n\t * @return the totaly supply\r\n\t */\r\n\tfunction totalSupplyAtBlockchain(bytes32 _id, uint256 _blockNumber)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tBlockchainState[] storage states = blockchainStates[_id];\r\n\t\tint256 i;\r\n\t\tif (states.length == 0) return 0;\r\n\t\tfor (i = int256(states.length - 1); i >= 0; i--) {\r\n\t\t\tif (states[uint256(i)].blockNumber <= _blockNumber) break;\r\n\t\t}\r\n\t\tif (i < 0) return 0;\r\n\r\n\t\tBlockchainState storage state = states[uint256(i)];\r\n\t\treturn state.totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice prove user balance in a specific blockchain state hash\r\n\t * @dev \"rootState\" is a special state that can be supplied once, and actually mints reputation on the current blockchain\r\n\t * we use non sorted merkle tree, as sorting while preparing merkle tree is heavy\r\n\t * @param _id the string id of the blockchain we supply proof for\r\n\t * @param _user the user to prove his balance\r\n\t * @param _balance the balance we are prooving\r\n\t * @param _proof array of byte32 with proof data (currently merkle tree path)\r\n \t * @param _nodeIndex index of node in the tree (for unsorted merkle tree proof)\r\n\r\n\t * @return true if proof is valid\r\n\t */\r\n\tfunction proveBalanceOfAtBlockchain(\r\n\t\tstring memory _id,\r\n\t\taddress _user,\r\n\t\tuint256 _balance,\r\n\t\tbytes32[] memory _proof,\r\n\t\tuint256 _nodeIndex\r\n\t) public returns (bool) {\r\n\t\tbytes32 idHash = keccak256(bytes(_id));\r\n\t\trequire(\r\n\t\t\tblockchainStates[idHash].length > 0,\r\n\t\t\t\"no state found for given _id\"\r\n\t\t);\r\n\t\tbytes32 stateHash = blockchainStates[idHash][\r\n\t\t\tblockchainStates[idHash].length - 1\r\n\t\t].stateHash;\r\n\r\n\t\t//this is specifically important for rootState that should update real balance only once\r\n\t\trequire(\r\n\t\t\tstateHashBalances[stateHash][_user] == 0,\r\n\t\t\t\"stateHash already proved\"\r\n\t\t);\r\n\r\n\t\tbytes32 leafHash = keccak256(abi.encode(_user, _balance));\r\n\t\tbool isProofValid = checkProofOrdered(\r\n\t\t\t_proof,\r\n\t\t\tstateHash,\r\n\t\t\tleafHash,\r\n\t\t\t_nodeIndex\r\n\t\t);\r\n\r\n\t\trequire(isProofValid, \"invalid merkle proof\");\r\n\r\n\t\t//if initiial state then set real balance\r\n\t\tif (idHash == ROOT_STATE) {\r\n\t\t\tuint256 curTotalSupply = totalSupplyLocalAt(block.number);\r\n\t\t\t_mint(_user, _balance);\r\n\t\t\tupdateValueAtNow(totalSupplyHistory, curTotalSupply); // we undo the totalsupply, as we alredy set the totalsupply of the airdrop\r\n\t\t}\r\n\r\n\t\t//if proof is valid then set balances\r\n\t\tstateHashBalances[stateHash][_user] = _balance;\r\n\r\n\t\temit StateHashProof(_id, _user, _balance);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @notice returns current delegate of _user\r\n\t/// @param _user the delegatee\r\n\t/// @return the address of the delegate (can be _user  if no delegate or 0x0 if _user doesnt exists)\r\n\tfunction delegateOf(address _user) public view returns (address) {\r\n\t\treturn delegates[_user];\r\n\t}\r\n\r\n\t/// @notice delegate votes to another user\r\n\t/// @param _delegate the recipient of votes\r\n\tfunction delegateTo(address _delegate) public {\r\n\t\treturn _delegateTo(_msgSender(), _delegate);\r\n\t}\r\n\r\n\t/// @notice cancel user delegation\r\n\t/// @dev makes user his own delegate\r\n\tfunction undelegate() public {\r\n\t\treturn _delegateTo(_msgSender(), _msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Delegates votes from signatory to `delegate`\r\n\t * @param _delegate The address to delegate votes to\r\n\t * @param _nonce The contract state required to match the signature\r\n\t * @param _expiry The time at which to expire the signature\r\n\t * @param _v The recovery byte of the signature\r\n\t * @param _r Half of the ECDSA signature pair\r\n\t * @param _s Half of the ECDSA signature pair\r\n\t */\r\n\tfunction delegateBySig(\r\n\t\taddress _delegate,\r\n\t\tuint256 _nonce,\r\n\t\tuint256 _expiry,\r\n\t\tuint8 _v,\r\n\t\tbytes32 _r,\r\n\t\tbytes32 _s\r\n\t) public {\r\n\t\tbytes32 domainSeparator = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tDOMAIN_TYPEHASH,\r\n\t\t\t\tkeccak256(bytes(name)),\r\n\t\t\t\tgetChainId(),\r\n\t\t\t\taddress(this)\r\n\t\t\t)\r\n\t\t);\r\n\t\tbytes32 structHash = keccak256(\r\n\t\t\tabi.encode(DELEGATION_TYPEHASH, _delegate, _nonce, _expiry)\r\n\t\t);\r\n\t\tbytes32 digest = keccak256(\r\n\t\t\tabi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n\t\t);\r\n\t\taddress signatory = ecrecover(digest, _v, _r, _s);\r\n\t\trequire(\r\n\t\t\tsignatory != address(0),\r\n\t\t\t\"GReputation::delegateBySig: invalid signature\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_nonce == nonces[signatory]++,\r\n\t\t\t\"GReputation::delegateBySig: invalid nonce\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tblock.timestamp <= _expiry,\r\n\t\t\t\"GReputation::delegateBySig: signature expired\"\r\n\t\t);\r\n\t\treturn _delegateTo(signatory, _delegate);\r\n\t}\r\n\r\n\t/// @notice internal function to delegate votes to another user\r\n\t/// @param _user the source of votes (delegator)\r\n\t/// @param _delegate the recipient of votes\r\n\tfunction _delegateTo(address _user, address _delegate) internal {\r\n\t\trequire(\r\n\t\t\t_delegate != address(0),\r\n\t\t\t\"GReputation::delegate can't delegate to null address\"\r\n\t\t);\r\n\r\n\t\taddress curDelegator = delegates[_user];\r\n\t\trequire(curDelegator != _delegate, \"already delegating to delegator\");\r\n\r\n\t\tdelegates[_user] = _delegate;\r\n\r\n\t\t// remove votes from current delegator\r\n\t\tuint256 coreBalance = balanceOfLocalAt(_user, block.number);\r\n\t\t//redundant check - should not be possible to have address 0 as delegator\r\n\t\tif (curDelegator != address(0)) {\r\n\t\t\tuint256 removeVotes = getVotesAt(curDelegator, false, block.number);\r\n\t\t\t_updateDelegateVotes(\r\n\t\t\t\tcurDelegator,\r\n\t\t\t\t_user,\r\n\t\t\t\tremoveVotes,\r\n\t\t\t\tremoveVotes - coreBalance\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t//move votes to new delegator\r\n\t\tuint256 addVotes = getVotesAt(_delegate, false, block.number);\r\n\t\t_updateDelegateVotes(_delegate, _user, addVotes, addVotes + coreBalance);\r\n\t}\r\n\r\n\t/// @notice internal function to update delegated votes, emits event with changes\r\n\t/// @param _delegate the delegate whose record we are updating\r\n\t/// @param _delegator the delegator\r\n\t/// @param _oldVotes the delegate previous votes\r\n\t/// @param _newVotes the delegate votes after the change\r\n\tfunction _updateDelegateVotes(\r\n\t\taddress _delegate,\r\n\t\taddress _delegator,\r\n\t\tuint256 _oldVotes,\r\n\t\tuint256 _newVotes\r\n\t) internal {\r\n\t\tupdateValueAtNow(activeVotes[_delegate], _newVotes);\r\n\t\temit DelegateVotesChanged(_delegate, _delegator, _oldVotes, _newVotes);\r\n\t}\r\n\r\n\t// from StorJ -- https://github.com/nginnever/storj-audit-verifier/blob/master/contracts/MerkleVerifyv3.sol\r\n\t/**\r\n\t * @dev non sorted merkle tree proof check\r\n\t */\r\n\tfunction checkProofOrdered(\r\n\t\tbytes32[] memory _proof,\r\n\t\tbytes32 _root,\r\n\t\tbytes32 _hash,\r\n\t\tuint256 _index\r\n\t) public pure returns (bool) {\r\n\t\t// use the index to determine the node ordering\r\n\t\t// index ranges 1 to n\r\n\r\n\t\tbytes32 proofElement;\r\n\t\tbytes32 computedHash = _hash;\r\n\t\tuint256 remaining;\r\n\r\n\t\tfor (uint256 j = 0; j < _proof.length; j++) {\r\n\t\t\tproofElement = _proof[j];\r\n\r\n\t\t\t// calculate remaining elements in proof\r\n\t\t\tremaining = _proof.length - j;\r\n\r\n\t\t\t// we don't assume that the tree is padded to a power of 2\r\n\t\t\t// if the index is odd then the proof will start with a hash at a higher\r\n\t\t\t// layer, so we have to adjust the index to be the index at that layer\r\n\t\t\twhile (remaining > 0 && _index % 2 == 1 && _index > 2**remaining) {\r\n\t\t\t\t_index = _index / 2 + 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (_index % 2 == 0) {\r\n\t\t\t\tcomputedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n\t\t\t\t_index = _index / 2;\r\n\t\t\t} else {\r\n\t\t\t\tcomputedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n\t\t\t\t_index = _index / 2 + 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn computedHash == _root;\r\n\t}\r\n\r\n\t/// @notice helper function to get current chain id\r\n\t/// @return chain id\r\n\tfunction getChainId() internal view returns (uint256) {\r\n\t\tuint256 chainId;\r\n\t\tassembly {\r\n\t\t\tchainId := chainid()\r\n\t\t}\r\n\t\treturn chainId;\r\n\t}\r\n\r\n\tfunction setReputationRecipient(address _target) public {\r\n\t\treputationRecipients[msg.sender] = _target;\r\n\t}\r\n\r\n\tfunction restoreState(\r\n\t\tbytes32 _fuseStateHash,\r\n\t\tuint256 _totalSupply,\r\n\t\taddress[] calldata _accounts,\r\n\t\tuint256[] calldata _stateValue,\r\n\t\tuint256[] calldata _mintValue\r\n\t) public {\r\n\t\trequire(activeBlockchains.length == 0, \"too late\");\r\n\t\t_setBlockchainStateHash(\"fuse\", _fuseStateHash, _totalSupply);\r\n\t\tfor (uint256 i = 0; i < _accounts.length; i++) {\r\n\t\t\taddress account = _accounts[i];\r\n\t\t\tif (_stateValue[i] > 0) {\r\n\t\t\t\tstateHashBalances[_fuseStateHash][account] = _stateValue[i];\r\n\t\t\t\temit StateHashProof(\"fuse\", account, _stateValue[i]);\r\n\t\t\t}\r\n\t\t\treputationRecipients[account] = GReputation(\r\n\t\t\t\taddress(0x3A9299BE789ac3730e4E4c49d6d2Ad1b8BC34DFf)\r\n\t\t\t).reputationRecipients(account);\r\n\t\t\tif (_mintValue[i] > 0) _mint(account, _mintValue[i]);\r\n\t\t}\r\n\t\tfor (uint256 i = 0; i < _accounts.length; i++) {\r\n\t\t\taddress delegatee = GReputation(\r\n\t\t\t\taddress(0x3A9299BE789ac3730e4E4c49d6d2Ad1b8BC34DFf)\r\n\t\t\t).delegateOf(_accounts[i]);\r\n\t\t\tif (delegatee != address(0) && delegatee != _accounts[i])\r\n\t\t\t\t_delegateTo(_accounts[i], delegatee);\r\n\t\t}\r\n\t}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"blockchain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"StateHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"blockchain\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repBalance\",\"type\":\"uint256\"}],\"name\":\"StateHashProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_STATE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeBlockchains\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avatar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfLocal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfLocalAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockchainStates\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"hashType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"checkProofOrdered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract Controller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"delegateOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"delegateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getVotesAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_global\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getVotesAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getVotesAtBlockchain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INameService\",\"name\":\"_ns\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_stateId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INameService\",\"name\":\"_ns\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameService\",\"outputs\":[{\"internalType\":\"contract INameService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"contract IGoodDollar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_nodeIndex\",\"type\":\"uint256\"}],\"name\":\"proveBalanceOfAtBlockchain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reputationRecipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fuseStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_stateValue\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_mintValue\",\"type\":\"uint256[]\"}],\"name\":\"restoreState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"setBlockchainStateHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setReputationRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stateHashBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtBlockchain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupplyHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyLocal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyLocal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyLocalAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "GReputation", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1e7830db1a53f692d0a8d17f8822de01acb7a725de79fc966a838d4064036f0a"}]}