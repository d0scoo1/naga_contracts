{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/council/features/Airdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"../libraries/Authorizable.sol\\\";\\nimport \\\"../libraries/MerkleRewards.sol\\\";\\n\\n// A merkle rewards contract with an expiration time\\n\\ncontract Airdrop is MerkleRewards, Authorizable {\\n    // The time after which the token cannot be claimed\\n    uint256 public immutable expiration;\\n\\n    /// @notice Constructs the contract and sets state and immutable variables\\n    /// @param _governance The address which can withdraw funds when the drop expires\\n    /// @param _merkleRoot The root a keccak256 merkle tree with leaves which are address amount pairs\\n    /// @param _token The erc20 contract which will be sent to the people with claims on the contract\\n    /// @param _expiration The unix second timestamp when the airdrop expires\\n    /// @param _lockingVault The governance vault which this deposits to on behalf of users\\n    constructor(\\n        address _governance,\\n        bytes32 _merkleRoot,\\n        IERC20 _token,\\n        uint256 _expiration,\\n        ILockingVault _lockingVault\\n    ) MerkleRewards(_merkleRoot, _token, _lockingVault) {\\n        // Set expiration immutable and governance to the owner\\n        expiration = _expiration;\\n        setOwner(_governance);\\n    }\\n\\n    /// @notice Allows governance to remove the funds in this contract once the airdrop is over.\\n    ///         Claims aren't blocked the airdrop ending at expiration is optional and gov has to\\n    ///         manually end it.\\n    /// @param destination The treasury contract which will hold the freed tokens\\n    function reclaim(address destination) external onlyOwner {\\n        require(block.timestamp > expiration, \\\"Not expired\\\");\\n        uint256 unclaimed = token.balanceOf(address(this));\\n        token.transfer(destination, unclaimed);\\n    }\\n\\n    /// @notice Claims an amount of tokens which are in the tree and send them to the user\\n    /// @param amount The amount of tokens to claim\\n    /// @param totalGrant The total amount of tokens the user was granted\\n    /// @param merkleProof The merkle de-commitment which proves the user is in the merkle root\\n    /// @param destination The address which will be credited with funds\\n    function claim(\\n        uint256 amount,\\n        uint256 totalGrant,\\n        bytes32[] calldata merkleProof,\\n        address destination\\n    ) external virtual override {\\n        revert(\\\"Not Allowed to claim\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/council/libraries/Authorizable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.0;\\n\\ncontract Authorizable {\\n    // This contract allows a flexible authorization scheme\\n\\n    // The owner who can change authorization status\\n    address public owner;\\n    // A mapping from an address to its authorization status\\n    mapping(address => bool) public authorized;\\n\\n    /// @dev We set the deployer to the owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev This modifier checks if the msg.sender is the owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sender not owner\\\");\\n        _;\\n    }\\n\\n    /// @dev This modifier checks if an address is authorized\\n    modifier onlyAuthorized() {\\n        require(isAuthorized(msg.sender), \\\"Sender not Authorized\\\");\\n        _;\\n    }\\n\\n    /// @dev Returns true if an address is authorized\\n    /// @param who the address to check\\n    /// @return true if authorized false if not\\n    function isAuthorized(address who) public view returns (bool) {\\n        return authorized[who];\\n    }\\n\\n    /// @dev Privileged function authorize an address\\n    /// @param who the address to authorize\\n    function authorize(address who) external onlyOwner() {\\n        _authorize(who);\\n    }\\n\\n    /// @dev Privileged function to de authorize an address\\n    /// @param who The address to remove authorization from\\n    function deauthorize(address who) external onlyOwner() {\\n        authorized[who] = false;\\n    }\\n\\n    /// @dev Function to change owner\\n    /// @param who The new owner address\\n    function setOwner(address who) public onlyOwner() {\\n        owner = who;\\n    }\\n\\n    /// @dev Inheritable function which authorizes someone\\n    /// @param who the address to authorize\\n    function _authorize(address who) internal {\\n        authorized[who] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/council/libraries/MerkleRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/ILockingVault.sol\\\";\\n\\nabstract contract AbstractMerkleRewards {\\n    // The merkle root with deposits encoded into it as hash [address, amount]\\n    // Assumed to be a node sorted tree\\n    bytes32 public rewardsRoot;\\n    // The token to pay out\\n    IERC20 public immutable token;\\n    // The historic user claims\\n    mapping(address => uint256) public claimed;\\n    // The locking gov vault\\n    ILockingVault public lockingVault;\\n\\n    /// @notice Constructs the contract and sets state and immutable variables\\n    /// @param _rewardsRoot The root a keccak256 merkle tree with leaves which are address amount pairs\\n    /// @param _token The erc20 contract which will be sent to the people with claims on the contract\\n    /// @param _lockingVault The governance vault which this deposits to on behalf of users\\n    constructor(\\n        bytes32 _rewardsRoot,\\n        IERC20 _token,\\n        ILockingVault _lockingVault\\n    ) {\\n        rewardsRoot = _rewardsRoot;\\n        token = _token;\\n        lockingVault = _lockingVault;\\n        // We approve the locking vault so that it we can deposit on behalf of users\\n        _token.approve(address(lockingVault), type(uint256).max);\\n    }\\n\\n    /// @notice Claims an amount of tokens which are in the tree and moves them directly into\\n    ///         governance\\n    /// @param amount The amount of tokens to claim\\n    /// @param delegate The address the user will delegate to, WARNING - should not be zero\\n    /// @param totalGrant The total amount of tokens the user was granted\\n    /// @param merkleProof The merkle de-commitment which proves the user is in the merkle root\\n    /// @param destination The address which will be credited with funds\\n    function claimAndDelegate(\\n        uint256 amount,\\n        address delegate,\\n        uint256 totalGrant,\\n        bytes32[] calldata merkleProof,\\n        address destination\\n    ) external {\\n        // No delegating to zero\\n        require(delegate != address(0), \\\"Zero addr delegation\\\");\\n        // Validate the withdraw\\n        _validateWithdraw(amount, totalGrant, merkleProof);\\n        // Deposit for this sender into governance locking vault\\n        lockingVault.deposit(destination, amount, delegate);\\n    }\\n\\n    /// @notice Claims an amount of tokens which are in the tree and send them to the user\\n    /// @param amount The amount of tokens to claim\\n    /// @param totalGrant The total amount of tokens the user was granted\\n    /// @param merkleProof The merkle de-commitment which proves the user is in the merkle root\\n    /// @param destination The address which will be credited with funds\\n    function claim(\\n        uint256 amount,\\n        uint256 totalGrant,\\n        bytes32[] calldata merkleProof,\\n        address destination\\n    ) external virtual {\\n        // Validate the withdraw\\n        _validateWithdraw(amount, totalGrant, merkleProof);\\n        // Transfer to the user\\n        token.transfer(destination, amount);\\n    }\\n\\n    /// @notice Validate a withdraw attempt by checking merkle proof and ensuring the user has not\\n    ///         previously withdrawn\\n    /// @param amount The amount of tokens being claimed\\n    /// @param totalGrant The total amount of tokens the user was granted\\n    /// @param merkleProof The merkle de-commitment which proves the user is in the merkle root\\n    function _validateWithdraw(\\n        uint256 amount,\\n        uint256 totalGrant,\\n        bytes32[] memory merkleProof\\n    ) internal {\\n        // Hash the user plus the total grant amount\\n        bytes32 leafHash = keccak256(abi.encodePacked(msg.sender, totalGrant));\\n\\n        // Verify the proof for this leaf\\n        require(\\n            MerkleProof.verify(merkleProof, rewardsRoot, leafHash),\\n            \\\"Invalid Proof\\\"\\n        );\\n        // Check that this claim won't give them more than the total grant then\\n        // increase the stored claim amount\\n        require(claimed[msg.sender] + amount <= totalGrant, \\\"Claimed too much\\\");\\n        claimed[msg.sender] += amount;\\n    }\\n}\\n\\n// Deployable version of the abstract\\ncontract MerkleRewards is AbstractMerkleRewards {\\n    /// @notice Constructs the contract and sets state and immutable variables\\n    /// @param _rewardsRoot The root a keccak256 merkle tree with leaves which are address amount pairs\\n    /// @param _token The erc20 contract which will be sent to the people with claims on the contract\\n    /// @param _lockingVault The governance vault which this deposits to on behalf of users\\n    constructor(\\n        bytes32 _rewardsRoot,\\n        IERC20 _token,\\n        ILockingVault _lockingVault\\n    ) AbstractMerkleRewards(_rewardsRoot, _token, _lockingVault) {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/council/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    // Note this is non standard but nearly all ERC20 have exposed decimal functions\\n    function decimals() external view returns (uint8);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/council/interfaces/ILockingVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface ILockingVault {\\n    /// @notice Deposits and delegates voting power to an address provided with the call\\n    /// @param fundedAccount The address to credit this deposit to\\n    /// @param amount The amount of token which is deposited\\n    /// @param firstDelegation First delegation address\\n    function deposit(\\n        address fundedAccount,\\n        uint256 amount,\\n        address firstDelegation\\n    ) external;\\n\\n    /// @notice Removes tokens from this contract and the voting power they represent\\n    /// @param amount The amount of token to withdraw\\n    function withdraw(uint256 amount) external;\\n\\n    /// @notice The token for this locking vault\\n    function token() external returns (IERC20);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"contract ILockingVault\",\"name\":\"_lockingVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalGrant\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalGrant\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"claimAndDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingVault\",\"outputs\":[{\"internalType\":\"contract ILockingVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"reclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Airdrop", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "00000000000000000000000081758f3361a769016eae4844072fa6d7f828a6515868b38fb60678b88b07721f03bc9bfd5be6b4f17829f5703e3556b31f4073c60000000000000000000000005c6d51ecba4d8e4f20373e3ce96a62342b125d6d000000000000000000000000000000000000000000000000000000006426227f00000000000000000000000002bd4a3b1b95b01f2aa61655415a5d3eaacaafdd", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}