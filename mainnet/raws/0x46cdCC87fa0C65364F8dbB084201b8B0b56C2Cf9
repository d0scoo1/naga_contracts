{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ProtocolSettings.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"State.sol\\\";\\nimport \\\"ProtocolSettingsEvents.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IVestingToken.sol\\\";\\nimport \\\"MathUtil.sol\\\";\\nimport \\\"IDexRecords.sol\\\";\\nimport \\\"PausableGuardian.sol\\\";\\n\\n\\ncontract ProtocolSettings is State, ProtocolSettingsEvents, PausableGuardian {\\n    using SafeERC20 for IERC20;\\n    using MathUtil for uint256;\\n\\n    function initialize(\\n        address target)\\n        external\\n        onlyOwner\\n    {\\n        _setTarget(this.setPriceFeedContract.selector, target);\\n        _setTarget(this.setSwapsImplContract.selector, target);\\n        _setTarget(this.setLoanPool.selector, target);\\n        _setTarget(this.setSupportedTokens.selector, target);\\n        _setTarget(this.setLendingFeePercent.selector, target);\\n        _setTarget(this.setTradingFeePercent.selector, target);\\n        _setTarget(this.setBorrowingFeePercent.selector, target);\\n        _setTarget(this.setAffiliateFeePercent.selector, target);\\n        _setTarget(this.setLiquidationIncentivePercent.selector, target);\\n        _setTarget(this.setMaxDisagreement.selector, target);\\n        _setTarget(this.setSourceBufferPercent.selector, target);\\n        _setTarget(this.setMaxSwapSize.selector, target);\\n        _setTarget(this.setFeesController.selector, target);\\n        _setTarget(this.withdrawFees.selector, target);\\n        _setTarget(this.queryFees.selector, target);\\n        _setTarget(this.getLoanPoolsList.selector, target);\\n        _setTarget(this.isLoanPool.selector, target);\\n        _setTarget(this.revokeApprovals.selector, target);\\n\\n        /*\\n            Targets still exist, but functions are decommissioned:\\n            _setTarget(this.withdrawProtocolToken.selector, target);\\n            _setTarget(this.depositProtocolToken.selector, target);\\n            _setTarget(this.grantRewards.selector, target);\\n        */\\n\\n    }\\n\\n    function setPriceFeedContract(\\n        address newContract)\\n        external\\n        onlyOwner\\n    {\\n        address oldContract = priceFeeds;\\n        priceFeeds = newContract;\\n\\n        emit SetPriceFeedContract(\\n            msg.sender,\\n            oldContract,\\n            newContract\\n        );\\n    }\\n\\n    function setSwapsImplContract(\\n        address newContract)\\n        external\\n        onlyOwner\\n    {\\n        address oldContract = swapsImpl;\\n        swapsImpl = newContract;\\n\\n        emit SetSwapsImplContract(\\n            msg.sender,\\n            oldContract,\\n            newContract\\n        );\\n    }\\n\\n    function setLoanPool(\\n        address[] calldata pools,\\n        address[] calldata assets)\\n        external\\n        onlyOwner\\n    {\\n        require(pools.length == assets.length, \\\"count mismatch\\\");\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            require(pools[i] != assets[i], \\\"pool == asset\\\");\\n            require(pools[i] != address(0), \\\"pool == 0\\\");\\n\\n            address pool = loanPoolToUnderlying[pools[i]];\\n            if (assets[i] == address(0)) {\\n                // removal action\\n                require(pool != address(0), \\\"pool not exists\\\");\\n            } else {\\n                // add action\\n                require(pool == address(0), \\\"pool exists\\\");\\n            }\\n\\n            if (assets[i] == address(0)) {\\n                underlyingToLoanPool[loanPoolToUnderlying[pools[i]]] = address(0);\\n                loanPoolToUnderlying[pools[i]] = address(0);\\n                loanPoolsSet.removeAddress(pools[i]);\\n            } else {\\n                loanPoolToUnderlying[pools[i]] = assets[i];\\n                underlyingToLoanPool[assets[i]] = pools[i];\\n                loanPoolsSet.addAddress(pools[i]);\\n            }\\n\\n            emit SetLoanPool(\\n                msg.sender,\\n                pools[i],\\n                assets[i]\\n            );\\n        }\\n    }\\n\\n    function setSupportedTokens(\\n        address[] calldata addrs,\\n        bool[] calldata toggles,\\n        bool withApprovals)\\n        external\\n        onlyOwner\\n    {\\n        require(addrs.length == toggles.length, \\\"count mismatch\\\");\\n\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            supportedTokens[addrs[i]] = toggles[i];\\n\\n            emit SetSupportedTokens(\\n                msg.sender,\\n                addrs[i],\\n                toggles[i]\\n            );\\n        }\\n\\n        if (withApprovals) {\\n            bytes memory data = abi.encodeWithSelector(\\n                0x4a99e3a1, // setSwapApprovals(address[])\\n                addrs\\n            );\\n            IDexRecords records = IDexRecords(swapsImpl);\\n            for(uint256 i = 1; i<=records.getDexCount();i++){\\n                address swapImpl = records.retrieveDexAddress(i);\\n                (bool success,) = swapImpl.delegatecall(data);\\n                require(success, \\\"approval calls failed\\\");\\n            }\\n        }\\n    }\\n    \\n    function revokeApprovals(address[] calldata addrs) external onlyGuardian {\\n        bytes memory data = abi.encodeWithSelector(\\n            0x7265766f, // revokeApprovals(address[])\\n            addrs\\n        );\\n        IDexRecords records = IDexRecords(swapsImpl);\\n        for(uint256 i = 1; i<=records.getDexCount();i++){\\n            address swapImpl = records.retrieveDexAddress(i);\\n            (bool success,) = swapImpl.delegatecall(data);\\n            require(success, \\\"approval calls failed\\\");\\n        }\\n    }\\n\\n    function setLendingFeePercent(\\n        uint256 newValue)\\n        external\\n        onlyOwner\\n    {\\n        require(newValue <= WEI_PERCENT_PRECISION, \\\"value too high\\\");\\n        uint256 oldValue = lendingFeePercent;\\n        lendingFeePercent = newValue;\\n\\n        emit SetLendingFeePercent(\\n            msg.sender,\\n            oldValue,\\n            newValue\\n        );\\n    }\\n\\n    function setTradingFeePercent(\\n        uint256 newValue)\\n        external\\n        onlyOwner\\n    {\\n        require(newValue <= WEI_PERCENT_PRECISION, \\\"value too high\\\");\\n        uint256 oldValue = tradingFeePercent;\\n        tradingFeePercent = newValue;\\n\\n        emit SetTradingFeePercent(\\n            msg.sender,\\n            oldValue,\\n            newValue\\n        );\\n    }\\n\\n    function setBorrowingFeePercent(\\n        uint256 newValue)\\n        external\\n        onlyOwner\\n    {\\n        require(newValue <= WEI_PERCENT_PRECISION, \\\"value too high\\\");\\n        uint256 oldValue = borrowingFeePercent;\\n        borrowingFeePercent = newValue;\\n\\n        emit SetBorrowingFeePercent(\\n            msg.sender,\\n            oldValue,\\n            newValue\\n        );\\n    }\\n\\n    function setAffiliateFeePercent(\\n        uint256 newValue)\\n        external\\n        onlyOwner\\n    {\\n        require(newValue <= WEI_PERCENT_PRECISION, \\\"value too high\\\");\\n        uint256 oldValue = affiliateFeePercent;\\n        affiliateFeePercent = newValue;\\n\\n        emit SetAffiliateFeePercent(\\n            msg.sender,\\n            oldValue,\\n            newValue\\n        );\\n    }\\n\\n    function setLiquidationIncentivePercent(\\n        address[] calldata loanTokens,\\n        address[] calldata collateralTokens,\\n        uint256[] calldata amounts)\\n        external\\n        onlyOwner\\n    {\\n        require(loanTokens.length == collateralTokens.length && loanTokens.length == amounts.length, \\\"count mismatch\\\");\\n\\n        for (uint256 i = 0; i < loanTokens.length; i++) {\\n            require(amounts[i] <= WEI_PERCENT_PRECISION, \\\"value too high\\\");\\n\\n            uint256 oldValue = liquidationIncentivePercent[loanTokens[i]][collateralTokens[i]];\\n            liquidationIncentivePercent[loanTokens[i]][collateralTokens[i]] = amounts[i];\\n\\n            emit SetLiquidationIncentivePercent(\\n                msg.sender,\\n                loanTokens[i],\\n                collateralTokens[i],\\n                oldValue,\\n                amounts[i]\\n            );\\n        }\\n    }\\n\\n    function setMaxDisagreement(\\n        uint256 newValue)\\n        external\\n        onlyOwner\\n    {\\n        maxDisagreement = newValue;\\n    }\\n\\n    function setSourceBufferPercent(\\n        uint256 newValue)\\n        external\\n        onlyOwner\\n    {\\n        sourceBufferPercent = newValue;\\n    }\\n\\n    function setMaxSwapSize(\\n        uint256 newValue)\\n        external\\n        onlyOwner\\n    {\\n        uint256 oldValue = maxSwapSize;\\n        maxSwapSize = newValue;\\n\\n        emit SetMaxSwapSize(\\n            msg.sender,\\n            oldValue,\\n            newValue\\n        );\\n    }\\n\\n    function setFeesController(\\n        address newController)\\n        external\\n        onlyOwner\\n    {\\n        address oldController = feesController;\\n        feesController = newController;\\n\\n        emit SetFeesController(\\n            msg.sender,\\n            oldController,\\n            newController\\n        );\\n    }\\n\\n    function withdrawFees(\\n        address[] calldata tokens,\\n        address receiver,\\n        FeeClaimType feeType)\\n        external\\n        returns (uint256[] memory amounts)\\n    {\\n        require(msg.sender == feesController, \\\"unauthorized\\\");\\n\\n        amounts = new uint256[](tokens.length);\\n        uint256 balance;\\n        address token;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            token = tokens[i];\\n\\n            if (feeType == FeeClaimType.All || feeType == FeeClaimType.Lending) {\\n                balance = lendingFeeTokensHeld[token];\\n                if (balance != 0) {\\n                    amounts[i] = balance;  // will not overflow\\n                    lendingFeeTokensHeld[token] = 0;\\n                    lendingFeeTokensPaid[token] = lendingFeeTokensPaid[token]\\n                        .add(balance);\\n                    emit WithdrawLendingFees(\\n                        msg.sender,\\n                        token,\\n                        receiver,\\n                        balance\\n                    );\\n                }\\n            }\\n            if (feeType == FeeClaimType.All || feeType == FeeClaimType.Trading) {\\n                balance = tradingFeeTokensHeld[token];\\n                if (balance != 0) {\\n                    amounts[i] += balance;  // will not overflow\\n                    tradingFeeTokensHeld[token] = 0;\\n                    tradingFeeTokensPaid[token] = tradingFeeTokensPaid[token]\\n                        .add(balance);\\n                    emit WithdrawTradingFees(\\n                        msg.sender,\\n                        token,\\n                        receiver,\\n                        balance\\n                    );\\n                }\\n            }\\n            if (feeType == FeeClaimType.All || feeType == FeeClaimType.Borrowing) {\\n                balance = borrowingFeeTokensHeld[token];\\n                if (balance != 0) {\\n                    amounts[i] += balance;  // will not overflow\\n                    borrowingFeeTokensHeld[token] = 0;\\n                    borrowingFeeTokensPaid[token] = borrowingFeeTokensPaid[token]\\n                        .add(balance);\\n                    emit WithdrawBorrowingFees(\\n                        msg.sender,\\n                        token,\\n                        receiver,\\n                        balance\\n                    );\\n                }\\n            }\\n\\n            if (amounts[i] != 0) {\\n                IERC20(token).safeTransfer(\\n                    receiver,\\n                    amounts[i]\\n                );\\n            }\\n        }\\n    }\\n\\n    // NOTE: this doesn't sanitize inputs -> inaccurate values may be returned if there are duplicates tokens input\\n    function queryFees(\\n        address[] calldata tokens,\\n        FeeClaimType feeType)\\n        external\\n        view\\n        returns (uint256[] memory amountsHeld, uint256[] memory amountsPaid)\\n    {\\n        amountsHeld = new uint256[](tokens.length);\\n        amountsPaid = new uint256[](tokens.length);\\n        address token;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            token = tokens[i];\\n            \\n            if (feeType == FeeClaimType.Lending) {\\n                amountsHeld[i] = lendingFeeTokensHeld[token];\\n                amountsPaid[i] = lendingFeeTokensPaid[token];\\n            } else if (feeType == FeeClaimType.Trading) {\\n                amountsHeld[i] = tradingFeeTokensHeld[token];\\n                amountsPaid[i] = tradingFeeTokensPaid[token];\\n            } else if (feeType == FeeClaimType.Borrowing) {\\n                amountsHeld[i] = borrowingFeeTokensHeld[token];\\n                amountsPaid[i] = borrowingFeeTokensPaid[token];\\n            } else {\\n                amountsHeld[i] = lendingFeeTokensHeld[token] + tradingFeeTokensHeld[token] + borrowingFeeTokensHeld[token]; // will not overflow\\n                amountsPaid[i] = lendingFeeTokensPaid[token] + tradingFeeTokensPaid[token] + borrowingFeeTokensPaid[token]; // will not overflow\\n            }\\n        }\\n    }\\n\\n    function getLoanPoolsList(\\n        uint256 start,\\n        uint256 count)\\n        external\\n        view\\n        returns (address[] memory loanPoolsList)\\n    {\\n        EnumerableBytes32Set.Bytes32Set storage set = loanPoolsSet;\\n        uint256 end = start.add(count).min256(set.length());\\n        if (start >= end) {\\n            return loanPoolsList;\\n        }\\n        count = end-start;\\n\\n        loanPoolsList = new address[](count);\\n        for (uint256 i = --end; i >= start; i--) {\\n            loanPoolsList[--count] = set.getAddress(i);\\n\\n            if (i == 0) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function isLoanPool(\\n        address loanPool)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return loanPoolToUnderlying[loanPool] != address(0);\\n    }\\n\\n    /*\\n    function withdrawProtocolToken(\\n        address receiver,\\n        uint256 amount)\\n        external\\n        onlyOwner\\n        returns (address rewardToken, uint256 withdrawAmount)\\n    {\\n        rewardToken = vbzrxTokenAddress;\\n        withdrawAmount = amount;\\n\\n        uint256 tokenBalance = protocolTokenHeld;\\n        if (withdrawAmount > tokenBalance) {\\n            withdrawAmount = tokenBalance;\\n        }\\n        if (withdrawAmount != 0) {\\n            protocolTokenHeld = tokenBalance\\n                .sub(withdrawAmount);\\n\\n            IERC20(vbzrxTokenAddress).transfer(\\n                receiver,\\n                withdrawAmount\\n            );\\n        }\\n\\n        uint256 totalEmission = IVestingToken(vbzrxTokenAddress).claimedBalanceOf(address(this));\\n\\n        uint256 totalWithdrawn;\\n        // keccak256(\\\"BZRX_TotalWithdrawn\\\")\\n        bytes32 slot = 0xf0cbcfb4979ecfbbd8f7e7430357fc20e06376d29a69ad87c4f21360f6846545;\\n        assembly {\\n            totalWithdrawn := sload(slot)\\n        }\\n\\n        if (totalEmission > totalWithdrawn) {\\n            IERC20(bzrxTokenAddress).transfer(\\n                receiver,\\n                totalEmission - totalWithdrawn\\n            );\\n            assembly {\\n                sstore(slot, totalEmission)\\n            }\\n        }\\n    }\\n\\n    function depositProtocolToken(\\n        uint256 amount)\\n        external\\n        onlyOwner\\n    {\\n        protocolTokenHeld = protocolTokenHeld\\n            .add(amount);\\n\\n        IERC20(vbzrxTokenAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    function grantRewards(\\n        address[] calldata users,\\n        uint256[] calldata amounts)\\n        external\\n        onlyOwner\\n        returns (uint256 totalAmount)\\n    {\\n        require(users.length == amounts.length, \\\"count mismatch\\\");\\n\\n        uint256 amount;\\n        bytes32 slot;\\n        for (uint256 i = 0; i < users.length; i++) {\\n            amount = amounts[i];\\n            totalAmount = totalAmount\\n                .add(amount);\\n\\n            slot = keccak256(abi.encodePacked(users[i], UserRewardsID));\\n            assembly {\\n                sstore(slot, add(sload(slot), amount))\\n            }\\n        }\\n\\n        if (totalAmount != 0) {\\n            IERC20(vbzrxTokenAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                totalAmount\\n            );\\n        }\\n    }\\n    */\\n\\n}\\n\"\r\n    },\r\n    \"State.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\nimport \\\"Constants.sol\\\";\\nimport \\\"Objects.sol\\\";\\nimport \\\"EnumerableBytes32Set.sol\\\";\\nimport \\\"ReentrancyGuard.sol\\\";\\nimport \\\"InterestOracle.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\n\\n\\ncontract State is Constants, Objects, ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\\n    address public priceFeeds;                                                              // handles asset reference price lookups\\n    address public swapsImpl;                                                               // handles asset swaps using dex liquidity\\n\\n    mapping (bytes4 => address) public logicTargets;                                        // implementations of protocol functions\\n\\n    mapping (bytes32 => Loan) public loans;                                                 // loanId => Loan\\n    mapping (bytes32 => LoanParams) public loanParams;                                      // loanParamsId => LoanParams\\n\\n    mapping (address => mapping (bytes32 => Order)) public lenderOrders;                    // lender => orderParamsId => Order\\n    mapping (address => mapping (bytes32 => Order)) public borrowerOrders;                  // borrower => orderParamsId => Order\\n\\n    mapping (bytes32 => mapping (address => bool)) public delegatedManagers;                // loanId => delegated => approved\\n\\n    // Interest\\n    mapping (address => mapping (address => LenderInterest)) public lenderInterest;         // lender => loanToken => LenderInterest object (depreciated)\\n    mapping (bytes32 => LoanInterest) public loanInterest;                                  // loanId => LoanInterest object (depreciated)\\n\\n    // Internals\\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet;                               // implementations set\\n    EnumerableBytes32Set.Bytes32Set internal activeLoansSet;                                // active loans set\\n\\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets;           // lender loans set\\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal borrowerLoanSets;         // borrow loans set\\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal userLoanParamSets;        // user loan params set\\n\\n    address public feesController;                                                          // address controlling fee withdrawals\\n\\n    uint256 public lendingFeePercent = 10 ether; // 10% fee                                 // fee taken from lender interest payments\\n    mapping (address => uint256) public lendingFeeTokensHeld;                               // total interest fees received and not withdrawn per asset\\n    mapping (address => uint256) public lendingFeeTokensPaid;                               // total interest fees withdraw per asset (lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid)\\n\\n    uint256 public tradingFeePercent = 0.15 ether; // 0.15% fee                             // fee paid for each trade\\n    mapping (address => uint256) public tradingFeeTokensHeld;                               // total trading fees received and not withdrawn per asset\\n    mapping (address => uint256) public tradingFeeTokensPaid;                               // total trading fees withdraw per asset (lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid)\\n\\n    uint256 public borrowingFeePercent = 0.09 ether; // 0.09% fee                           // origination fee paid for each loan\\n    mapping (address => uint256) public borrowingFeeTokensHeld;                             // total borrowing fees received and not withdrawn per asset\\n    mapping (address => uint256) public borrowingFeeTokensPaid;                             // total borrowing fees withdraw per asset (lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid)\\n\\n    uint256 public protocolTokenHeld;                                                       // current protocol token deposit balance\\n    uint256 public protocolTokenPaid;                                                       // lifetime total payout of protocol token\\n\\n    uint256 public affiliateFeePercent = 30 ether; // 30% fee share                         // fee share for affiliate program\\n\\n    mapping (address => mapping (address => uint256)) public liquidationIncentivePercent;   // percent discount on collateral for liquidators per loanToken and collateralToken\\n\\n    mapping (address => address) public loanPoolToUnderlying;                               // loanPool => underlying\\n    mapping (address => address) public underlyingToLoanPool;                               // underlying => loanPool\\n    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet;                                  // loan pools set\\n\\n    mapping (address => bool) public supportedTokens;                                       // supported tokens for swaps\\n\\n    uint256 public maxDisagreement = 5 ether;                                               // % disagreement between swap rate and reference rate\\n\\n    uint256 public sourceBufferPercent = 5 ether;                                           // used to estimate kyber swap source amount\\n\\n    uint256 public maxSwapSize = 1500 ether;                                                // maximum supported swap size in ETH\\n\\n\\n    /**** new interest model start */\\n    mapping(address => uint256) public poolLastUpdateTime; // per itoken\\n    mapping(address => uint256) public poolPrincipalTotal; // per itoken\\n    mapping(address => uint256) public poolInterestTotal; // per itoken\\n    mapping(address => uint256) public poolRatePerTokenStored; // per itoken\\n\\n    mapping(bytes32 => uint256) public loanInterestTotal; // per loan\\n    mapping(bytes32 => uint256) public loanRatePerTokenPaid; // per loan\\n\\n    mapping(address => uint256) internal poolLastInterestRate; // per itoken\\n    mapping(address => InterestOracle.Observation[256]) internal poolInterestRateObservations; // per itoken\\n    mapping(address => uint8) internal poolLastIdx; // per itoken\\n    uint32 public timeDelta;\\n    uint32 public twaiLength;\\n    /**** new interest model end */\\n\\n\\n    function _setTarget(\\n        bytes4 sig,\\n        address target)\\n        internal\\n    {\\n        logicTargets[sig] = target;\\n\\n        if (target != address(0)) {\\n            logicTargetsSet.addBytes32(bytes32(sig));\\n        } else {\\n            logicTargetsSet.removeBytes32(bytes32(sig));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Constants.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"IWethERC20.sol\\\";\\n\\n\\ncontract Constants {\\n\\n    uint256 internal constant WEI_PRECISION = 10**18;\\n    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\\n\\n    uint256 internal constant DAYS_IN_A_YEAR = 365;\\n    uint256 internal constant ONE_MONTH = 2628000; // approx. seconds in a month\\n\\n    // string internal constant UserRewardsID = \\\"UserRewards\\\"; // decommissioned\\n    string internal constant LoanDepositValueID = \\\"LoanDepositValue\\\";\\n\\n    IWethERC20 public constant wethToken = IWethERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // mainnet\\n    address public constant bzrxTokenAddress = 0x56d811088235F11C8920698a204A5010a788f4b3; // mainnet\\n    address public constant vbzrxTokenAddress = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F; // mainnet\\n    address public constant OOKI = address(0x0De05F6447ab4D22c8827449EE4bA2D5C288379B); // mainnet\\n\\n    //IWethERC20 public constant wethToken = IWethERC20(0xd0A1E359811322d97991E03f863a0C30C2cF029C); // kovan\\n    //address public constant bzrxTokenAddress = 0xB54Fc2F2ea17d798Ad5C7Aba2491055BCeb7C6b2; // kovan\\n    //address public constant vbzrxTokenAddress = 0x6F8304039f34fd6A6acDd511988DCf5f62128a32; // kovan\\n    \\n    //IWethERC20 public constant wethToken = IWethERC20(0x602C71e4DAC47a042Ee7f46E0aee17F94A3bA0B6); // local testnet only\\n    //address public constant bzrxTokenAddress = 0x3194cBDC3dbcd3E11a07892e7bA5c3394048Cc87; // local testnet only\\n    //address public constant vbzrxTokenAddress = 0xa3B53dDCd2E3fC28e8E130288F2aBD8d5EE37472; // local testnet only\\n\\n    //IWethERC20 public constant wethToken = IWethERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c); // bsc (Wrapped BNB)\\n    //address public constant bzrxTokenAddress = address(0); // bsc\\n    //address public constant vbzrxTokenAddress = address(0); // bsc\\n    //address public constant OOKI = address(0); // bsc\\n\\n    // IWethERC20 public constant wethToken = IWethERC20(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270); // polygon (Wrapped MATIC)\\n    // address public constant bzrxTokenAddress = address(0); // polygon\\n    // address public constant vbzrxTokenAddress = address(0); // polygon\\n    // address public constant OOKI = 0xCd150B1F528F326f5194c012f32Eb30135C7C2c9; // polygon\\n\\n    //IWethERC20 public constant wethToken = IWethERC20(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7); // avax (Wrapped AVAX)\\n    //address public constant bzrxTokenAddress = address(0); // avax\\n    //address public constant vbzrxTokenAddress = address(0); // avax\\n\\n    // IWethERC20 public constant wethToken = IWethERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1); // arbitrum\\n    // address public constant bzrxTokenAddress = address(0); // arbitrum\\n    // address public constant vbzrxTokenAddress = address(0); // arbitrum\\n    // address public constant OOKI = address(0x400F3ff129Bc9C9d239a567EaF5158f1850c65a4); // arbitrum\\n}\\n\"\r\n    },\r\n    \"IWethERC20.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"IWeth.sol\\\";\\nimport \\\"IERC20.sol\\\";\\n\\n\\ncontract IWethERC20 is IWeth, IERC20 {}\\n\"\r\n    },\r\n    \"IWeth.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\n\\ninterface IWeth {\\n    function deposit() external payable;\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Objects.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"LoanStruct.sol\\\";\\nimport \\\"LoanParamsStruct.sol\\\";\\nimport \\\"OrderStruct.sol\\\";\\nimport \\\"LenderInterestStruct.sol\\\";\\nimport \\\"LoanInterestStruct.sol\\\";\\n\\n\\ncontract Objects is\\n    LoanStruct,\\n    LoanParamsStruct,\\n    OrderStruct,\\n    LenderInterestStruct,\\n    LoanInterestStruct\\n{}\"\r\n    },\r\n    \"LoanStruct.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract LoanStruct {\\n    struct Loan {\\n        bytes32 id;                 // id of the loan\\n        bytes32 loanParamsId;       // the linked loan params id\\n        bytes32 pendingTradesId;    // the linked pending trades id\\n        uint256 principal;          // total borrowed amount outstanding\\n        uint256 collateral;         // total collateral escrowed for the loan\\n        uint256 startTimestamp;     // loan start time\\n        uint256 endTimestamp;       // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\\n        uint256 startMargin;        // initial margin when the loan opened\\n        uint256 startRate;          // reference rate when the loan opened for converting collateralToken to loanToken\\n        address borrower;           // borrower of this loan\\n        address lender;             // lender of this loan\\n        bool active;                // if false, the loan has been fully closed\\n    }\\n}\\n\"\r\n    },\r\n    \"LoanParamsStruct.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract LoanParamsStruct {\\n    struct LoanParams {\\n        bytes32 id;                 // id of loan params object\\n        bool active;                // if false, this object has been disabled by the owner and can't be used for future loans\\n        address owner;              // owner of this object\\n        address loanToken;          // the token being loaned\\n        address collateralToken;    // the required collateral token\\n        uint256 minInitialMargin;   // the minimum allowed initial margin\\n        uint256 maintenanceMargin;  // an unhealthy loan when current margin is at or below this value\\n        uint256 maxLoanTerm;        // the maximum term for new loans (0 means there's no max term)\\n    }\\n}\\n\"\r\n    },\r\n    \"OrderStruct.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract OrderStruct {\\n    struct Order {\\n        uint256 lockedAmount;           // escrowed amount waiting for a counterparty\\n        uint256 interestRate;           // interest rate defined by the creator of this order\\n        uint256 minLoanTerm;            // minimum loan term allowed\\n        uint256 maxLoanTerm;            // maximum loan term allowed\\n        uint256 createdTimestamp;       // timestamp when this order was created\\n        uint256 expirationTimestamp;    // timestamp when this order expires\\n    }\\n}\\n\"\r\n    },\r\n    \"LenderInterestStruct.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract LenderInterestStruct {\\n    struct LenderInterest {\\n        uint256 principalTotal;     // total borrowed amount outstanding of asset (DEPRECIATED)\\n        uint256 owedPerDay;         // interest owed per day for all loans of asset (DEPRECIATED)\\n        uint256 owedTotal;          // total interest owed for all loans of asset (DEPRECIATED)\\n        uint256 paidTotal;          // total interest paid so far for asset (DEPRECIATED)\\n        uint256 updatedTimestamp;   // last update (DEPRECIATED)\\n    }\\n}\\n\"\r\n    },\r\n    \"LoanInterestStruct.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract LoanInterestStruct {\\n    struct LoanInterest {\\n        uint256 owedPerDay;         // interest owed per day for loan (DEPRECIATED)\\n        uint256 depositTotal;       // total escrowed interest for loan (DEPRECIATED)\\n        uint256 updatedTimestamp;   // last update (DEPRECIATED)\\n    }\\n}\\n\"\r\n    },\r\n    \"EnumerableBytes32Set.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @dev Library for managing loan sets\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\\n *\\n */\\nlibrary EnumerableBytes32Set {\\n\\n    struct Bytes32Set {\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) index;\\n        bytes32[] values;\\n    }\\n\\n    /**\\n     * @dev Add an address value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function addAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return addBytes32(set, value);\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function addBytes32(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        if (!contains(set, value)){\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes an address value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function removeAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return removeBytes32(set, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        if (contains(set, value)){\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set.values[lastIndex];\\n\\n                // Move the last value to the index where the deleted value is\\n                set.values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the index entry for the deleted value\\n            delete set.index[value];\\n\\n            // Delete the old entry for the moved value\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function containsAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array with all values in the set. O(N).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\\n        internal\\n        view\\n        returns (bytes32[] memory output)\\n    {\\n        uint256 end = start + count;\\n        require(end >= start, \\\"addition overflow\\\");\\n        end = set.values.length < end ? set.values.length : end;\\n        if (end == 0 || start >= end) {\\n            return output;\\n        }\\n\\n        output = new bytes32[](end-start);\\n        for (uint256 i = start; i < end; i++) {\\n            output[i-start] = set.values[i];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements on the set. O(1).\\n     */\\n    function length(Bytes32Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return set.values.length;\\n    }\\n\\n   /** @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function get(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return set.values[index];\\n    }\\n\\n   /** @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function getAddress(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        bytes32 value = set.values[index];\\n        address addrvalue;\\n        assembly {\\n            addrvalue := value\\n        }\\n        return addrvalue;\\n    }\\n}\\n\"\r\n    },\r\n    \"ReentrancyGuard.sol\": {\r\n      \"content\": \"\\npragma solidity >=0.5.0 <0.6.0;\\n\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n\\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\\n\\n    /// @dev Constant for locked guard state\\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\\n\\n    /**\\n    * @dev We use a single lock for the whole contract.\\n    */\\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\\n\\n    /**\\n    * @dev Prevents a contract from calling itself, directly or indirectly.\\n    * If you mark a function `nonReentrant`, you should also\\n    * mark it `external`. Calling one `nonReentrant` function from\\n    * another is not supported. Instead, you can implement a\\n    * `private` function doing the actual work, and an `external`\\n    * wrapper marked as `nonReentrant`.\\n    */\\n    modifier nonReentrant() {\\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \\\"nonReentrant\\\");\\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\\n        _;\\n        reentrancyLock = REENTRANCY_GUARD_FREE;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"InterestOracle.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nlibrary InterestOracle {\\n    struct Observation {\\n        uint32 blockTimestamp;\\n        int56 irCumulative;\\n        int24 tick;\\n    }\\n\\n    /// @param last The specified observation\\n    /// @param blockTimestamp The new timestamp\\n    /// @param tick The active tick\\n    /// @return Observation The newly populated observation\\n    function convert(\\n        Observation memory last,\\n        uint32 blockTimestamp,\\n        int24 tick\\n    ) private pure returns (Observation memory) {\\n        return\\n            Observation({\\n                blockTimestamp: blockTimestamp,\\n                irCumulative: last.irCumulative + int56(tick) * (blockTimestamp - last.blockTimestamp),\\n                tick: tick\\n            });\\n    }\\n\\n    /// @param self oracle array\\n    /// @param index most recent observation index\\n    /// @param blockTimestamp timestamp of observation\\n    /// @param tick active tick\\n    /// @param cardinality populated elements\\n    /// @param minDelta minimum time delta between observations\\n    /// @return indexUpdated The new index\\n    function write(\\n        Observation[256] storage self,\\n        uint8 index,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint8 cardinality,\\n        uint32 minDelta\\n    ) internal returns (uint8 indexUpdated) {\\n        Observation memory last = self[index];\\n\\n        // early return if we've already written an observation in last minDelta seconds\\n        if (last.blockTimestamp + minDelta >= blockTimestamp) return index;\\n\\n        indexUpdated = (index + 1) % cardinality;\\n        self[indexUpdated] = convert(last, blockTimestamp, tick);\\n    }\\n\\n    /// @param self oracle array\\n    /// @param target targeted timestamp to retrieve value\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    function binarySearch(\\n        Observation[256] storage self,\\n        uint32 target,\\n        uint8 index,\\n        uint8 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 l = (index + 1) % cardinality; // oldest observation\\n        uint256 r = l + cardinality - 1; // newest observation\\n        uint256 i;\\n        while (true) {\\n            i = (l + r) / 2;\\n\\n            beforeOrAt = self[i % cardinality];\\n\\n            if (beforeOrAt.blockTimestamp == 0) {\\n                l = 0;\\n                r = index;\\n                continue;\\n            }\\n\\n            atOrAfter = self[(i + 1) % cardinality];\\n\\n            bool targetAtOrAfter = beforeOrAt.blockTimestamp <= target;\\n            bool targetBeforeOrAt = atOrAfter.blockTimestamp >= target;\\n            if (!targetAtOrAfter) {\\n                r = i - 1;\\n                continue;\\n            } else if (!targetBeforeOrAt) {\\n                l = i + 1;\\n                continue;\\n            }\\n            break;\\n        }\\n    }\\n\\n    /// @param self oracle array\\n    /// @param target targeted timestamp to retrieve value\\n    /// @param tick current tick\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    function getSurroundingObservations(\\n        Observation[256] storage self,\\n        uint32 target,\\n        int24 tick,\\n        uint8 index,\\n        uint8 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n\\n        beforeOrAt = self[index];\\n\\n        if (beforeOrAt.blockTimestamp <= target) {\\n            if (beforeOrAt.blockTimestamp == target) {\\n                return (beforeOrAt, atOrAfter);\\n            } else {\\n                return (beforeOrAt, convert(beforeOrAt, target, tick));\\n            }\\n        }\\n\\n        beforeOrAt = self[(index + 1) % cardinality];\\n        if (beforeOrAt.blockTimestamp == 0) beforeOrAt = self[0];\\n        require(beforeOrAt.blockTimestamp <= target && beforeOrAt.blockTimestamp != 0, \\\"OLD\\\");\\n        return binarySearch(self, target, index, cardinality);\\n    }\\n\\n    /// @param self oracle array\\n    /// @param time current timestamp\\n    /// @param secondsAgo lookback time\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    /// @return irCumulative cumulative interest rate, calculated with rate * time\\n    function observeSingle(\\n        Observation[256] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        int24 tick,\\n        uint8 index,\\n        uint8 cardinality\\n    ) internal view returns (int56 irCumulative) {\\n        if (secondsAgo == 0) {\\n            Observation memory last = self[index];\\n            if (last.blockTimestamp != time) {\\n                last = convert(last, time, tick);\\n            }\\n            return last.irCumulative;\\n        }\\n\\n        uint32 target = time - secondsAgo;\\n\\n        (Observation memory beforeOrAt, Observation memory atOrAfter) =\\n            getSurroundingObservations(self, target, tick, index, cardinality);\\n\\n        if (target == beforeOrAt.blockTimestamp) {\\n            // left boundary\\n            return beforeOrAt.irCumulative;\\n        } else if (target == atOrAfter.blockTimestamp) {\\n            // right boundary\\n            return atOrAfter.irCumulative;\\n        } else {\\n            // middle\\n            return\\n                beforeOrAt.irCumulative +\\n                    ((atOrAfter.irCumulative - beforeOrAt.irCumulative) / (atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp)) *\\n                    (target - beforeOrAt.blockTimestamp);\\n        }\\n    }\\n\\n    /// @param self oracle array\\n    /// @param time current timestamp\\n    /// @param secondsAgos lookback time\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    /// @return irCumulative cumulative interest rate, calculated with rate * time\\n    function arithmeticMean(\\n        Observation[256] storage self,\\n        uint32 time,\\n        uint32[2] memory secondsAgos,\\n        int24 tick,\\n        uint8 index,\\n        uint8 cardinality\\n    ) internal view returns (int24) {\\n        int56 firstPoint = observeSingle(self, time, secondsAgos[1], tick, index, cardinality);\\n        int56 secondPoint = observeSingle(self, time, secondsAgos[0], tick, index, cardinality);\\n        return int24((firstPoint-secondPoint) / (secondsAgos[0]-secondsAgos[1]));\\n    }\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"ProtocolSettingsEvents.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract ProtocolSettingsEvents {\\n\\n    event SetPriceFeedContract(\\n        address indexed sender,\\n        address oldValue,\\n        address newValue\\n    );\\n\\n    event SetSwapsImplContract(\\n        address indexed sender,\\n        address oldValue,\\n        address newValue\\n    );\\n\\n    event SetLoanPool(\\n        address indexed sender,\\n        address indexed loanPool,\\n        address indexed underlying\\n    );\\n\\n    event SetSupportedTokens(\\n        address indexed sender,\\n        address indexed token,\\n        bool isActive\\n    );\\n\\n    event SetLendingFeePercent(\\n        address indexed sender,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event SetTradingFeePercent(\\n        address indexed sender,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event SetBorrowingFeePercent(\\n        address indexed sender,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event SetAffiliateFeePercent(\\n        address indexed sender,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event SetLiquidationIncentivePercent(\\n        address indexed sender,\\n        address indexed loanToken,\\n        address indexed collateralToken,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event SetMaxSwapSize(\\n        address indexed sender,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event SetFeesController(\\n        address indexed sender,\\n        address indexed oldController,\\n        address indexed newController\\n    );\\n\\n    event WithdrawLendingFees(\\n        address indexed sender,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    event WithdrawTradingFees(\\n        address indexed sender,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    event WithdrawBorrowingFees(\\n        address indexed sender,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    enum FeeClaimType {\\n        All,\\n        Lending,\\n        Trading,\\n        Borrowing\\n    }\\n}\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"IVestingToken.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"SafeERC20.sol\\\";\\n\\n\\ncontract IVestingToken is IERC20 {\\n    function claim()\\n        external;\\n\\n    function vestedBalanceOf(\\n        address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claimedBalanceOf(\\n        address _owner)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"MathUtil.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary MathUtil {\\n\\n    /**\\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\\n    */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\\n    */\\n    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\"\r\n    },\r\n    \"IDexRecords.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17;\\n\\ninterface IDexRecords {\\n    function retrieveDexAddress(uint256 dexNumber)\\n        external\\n        view\\n        returns (address);\\n\\n    function setDexID(address dexAddress) external;\\n\\t\\n    function setDexID(uint256 dexID, address dexAddress) external;\\n\\t\\n    function getDexCount() external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"PausableGuardian.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"Ownable.sol\\\";\\n\\n\\ncontract PausableGuardian is Ownable {\\n\\n    // keccak256(\\\"Pausable_FunctionPause\\\")\\n    bytes32 internal constant Pausable_FunctionPause = 0xa7143c84d793a15503da6f19bf9119a2dac94448ca45d77c8bf08f57b2e91047;\\n\\n    // keccak256(\\\"Pausable_GuardianAddress\\\")\\n    bytes32 internal constant Pausable_GuardianAddress = 0x80e6706973d0c59541550537fd6a33b971efad732635e6c3b99fb01006803cdf;\\n\\n    modifier pausable {\\n        require(!_isPaused(msg.sig), \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyGuardian {\\n        require(msg.sender == getGuardian() || msg.sender == owner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    function _isPaused(bytes4 sig) public view returns (bool isPaused) {\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            isPaused := sload(slot)\\n        }\\n    }\\n\\n    function toggleFunctionPause(bytes4 sig) public onlyGuardian {\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            sstore(slot, 1)\\n        }\\n    }\\n\\n    function toggleFunctionUnPause(bytes4 sig) public onlyGuardian {\\n        // only DAO can unpause, and adding guardian temporarily\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            sstore(slot, 0)\\n        }\\n    }\\n\\n    function changeGuardian(address newGuardian) public onlyGuardian {\\n        assembly {\\n            sstore(Pausable_GuardianAddress, newGuardian)\\n        }\\n    }\\n\\n    function getGuardian() public view returns (address guardian) {\\n        assembly {\\n            guardian := sload(Pausable_GuardianAddress)\\n        }\\n    }\\n\\n    function pause(bytes4 [] calldata sig)\\n        external\\n        onlyGuardian\\n    {\\n        for(uint256 i = 0; i < sig.length; ++i){\\n            toggleFunctionPause(sig[i]);\\n        }\\n    }\\n\\n    function unpause(bytes4 [] calldata sig)\\n        external\\n        onlyGuardian\\n    {\\n        for(uint256 i = 0; i < sig.length; ++i){\\n            toggleFunctionUnPause(sig[i]);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"ProtocolSettings.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetAffiliateFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetBorrowingFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"SetFeesController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetLendingFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetLiquidationIncentivePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"SetLoanPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetMaxSwapSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"SetPriceFeedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SetSupportedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"SetSwapsImplContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetTradingFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBorrowingFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawLendingFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTradingFees\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"OOKI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"_isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"borrowerOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bzrxTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"changeGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getLoanPoolsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"loanPoolsList\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanPool\",\"type\":\"address\"}],\"name\":\"isLoanPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenderInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principalTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lenderOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationIncentivePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanInterestTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintenanceMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanPoolToUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanRatePerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"loanParamsId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pendingTradesId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"logicTargets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSwapSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sig\",\"type\":\"bytes4[]\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInterestTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolLastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolPrincipalTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolRatePerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"enum ProtocolSettingsEvents.FeeClaimType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"queryFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsHeld\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsPaid\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"revokeApprovals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAffiliateFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setBorrowingFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setFeesController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLendingFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"loanTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setLiquidationIncentivePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"setLoanPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxDisagreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxSwapSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"setPriceFeedContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSourceBufferPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"toggles\",\"type\":\"bool[]\"},{\"internalType\":\"bool\",\"name\":\"withApprovals\",\"type\":\"bool\"}],\"name\":\"setSupportedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"setSwapsImplContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTradingFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sourceBufferPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapsImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeDelta\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"toggleFunctionPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"toggleFunctionUnPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twaiLength\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingToLoanPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sig\",\"type\":\"bytes4[]\"}],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vbzrxTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"contract IWethERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"enum ProtocolSettingsEvents.FeeClaimType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"withdrawFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProtocolSettings", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}