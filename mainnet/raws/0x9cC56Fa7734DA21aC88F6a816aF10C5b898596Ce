{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/strategies/balancer/BalLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../governance/ControllableV2.sol\\\";\\r\\nimport \\\"../../../openzeppelin/SafeERC20.sol\\\";\\r\\nimport \\\"../../../third_party/IDelegation.sol\\\";\\r\\nimport \\\"../../../third_party/balancer/IFeeDistributor.sol\\\";\\r\\nimport \\\"./IBalLocker.sol\\\";\\r\\nimport \\\"../../../third_party/curve/IGauge.sol\\\";\\r\\nimport \\\"../../../third_party/curve/IGaugeController.sol\\\";\\r\\nimport \\\"../../../third_party/balancer/IBalancerMinter.sol\\\";\\r\\n\\r\\n\\r\\n/// @title Dedicated contract for staking and managing veBAL\\r\\n/// @author belbix\\r\\ncontract BalLocker is ControllableV2, IBalLocker {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  address public constant override VE_BAL = 0xC128a9954e6c874eA3d62ce62B468bA073093F25;\\r\\n  address public constant override VE_BAL_UNDERLYING = 0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56;\\r\\n  address public constant override BALANCER_MINTER = 0x239e55F427D44C3cc793f49bFB507ebe76638a2b;\\r\\n  address public constant override BAL = 0xba100000625a3754423978a60c9317c58a424e3D;\\r\\n  uint256 private constant _MAX_LOCK = 365 * 86400;\\r\\n  uint256 private constant _WEEK = 7 * 86400;\\r\\n\\r\\n  address public override gaugeController;\\r\\n  address public override feeDistributor;\\r\\n  address public override operator;\\r\\n  address public override voter;\\r\\n  mapping(address => address) public gaugesToDepositors;\\r\\n\\r\\n  event ChangeOperator(address oldValue, address newValue);\\r\\n  event ChangeGaugeController(address oldValue, address newValue);\\r\\n  event ChangeFeeDistributor(address oldValue, address newValue);\\r\\n  event ChangeVoter(address oldValue, address newValue);\\r\\n  event LinkGaugeToDistributor(address gauge, address depositor);\\r\\n\\r\\n  constructor(\\r\\n    address controller_,\\r\\n    address operator_,\\r\\n    address gaugeController_,\\r\\n    address feeDistributor_\\r\\n  ) {\\r\\n    require(controller_ != address(0), \\\"Zero controller\\\");\\r\\n    require(operator_ != address(0), \\\"Zero operator\\\");\\r\\n    require(gaugeController_ != address(0), \\\"Zero gaugeController\\\");\\r\\n    require(feeDistributor_ != address(0), \\\"Zero feeDistributor\\\");\\r\\n\\r\\n    ControllableV2.initializeControllable(controller_);\\r\\n    operator = operator_;\\r\\n    gaugeController = gaugeController_;\\r\\n    feeDistributor = feeDistributor_;\\r\\n    // governance by default\\r\\n    voter = IController(_controller()).governance();\\r\\n\\r\\n    IERC20(VE_BAL_UNDERLYING).safeApprove(VE_BAL, type(uint).max);\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    require(_isGovernance(msg.sender), \\\"Not gov\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyVoter() {\\r\\n    require(msg.sender == voter, \\\"Not voter\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyAllowedDepositor(address gauge) {\\r\\n    require(gaugesToDepositors[gauge] == msg.sender, \\\"Not allowed\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  //*****************************************************************\\r\\n  //********************* SNAPSHOT **********************************\\r\\n  //*****************************************************************\\r\\n\\r\\n  /// @dev Snapshot voting delegation. ID assumed to be a snapshot space name ex. name.eth\\r\\n  function delegateVotes(\\r\\n    bytes32 _id,\\r\\n    address _delegateContract,\\r\\n    address _delegate\\r\\n  ) external override onlyVoter {\\r\\n    IDelegation(_delegateContract).setDelegate(_id, _delegate);\\r\\n  }\\r\\n\\r\\n  /// @dev Clear snapshot voting delegation. ID assumed to be a snapshot space name ex. name.eth\\r\\n  function clearDelegatedVotes(\\r\\n    bytes32 _id,\\r\\n    address _delegateContract\\r\\n  ) external override onlyVoter {\\r\\n    IDelegation(_delegateContract).clearDelegate(_id);\\r\\n  }\\r\\n\\r\\n  //*****************************************************************\\r\\n  //********************* veBAL ACTIONS *****************************\\r\\n  //*****************************************************************\\r\\n\\r\\n  /// @dev Stake BAL-ETH LP to the veBAL with max lock. Extend period if necessary.\\r\\n  ///      Without permissions - anyone can deposit.\\r\\n  ///      Requires transfer tokens and call in the same block via contract.\\r\\n  function depositVe(uint256 amount) external override {\\r\\n    require(amount != 0, \\\"Zero amount\\\");\\r\\n\\r\\n    // lock on max period\\r\\n    IVotingEscrow ve = IVotingEscrow(VE_BAL);\\r\\n\\r\\n    (uint balanceLocked, uint unlockTime) = ve.locked(address(this));\\r\\n    if (unlockTime == 0 && balanceLocked == 0) {\\r\\n      ve.create_lock(amount, block.timestamp + _MAX_LOCK);\\r\\n    } else {\\r\\n      ve.increase_amount(amount);\\r\\n\\r\\n      uint256 unlockAt = block.timestamp + _MAX_LOCK;\\r\\n      uint256 unlockInWeeks = (unlockAt / _WEEK) * _WEEK;\\r\\n\\r\\n      //increase time too if over 2 week buffer\\r\\n      if (unlockInWeeks > unlockTime && unlockInWeeks - unlockTime > 2) {\\r\\n        ve.increase_unlock_time(unlockAt);\\r\\n      }\\r\\n    }\\r\\n    IFeeDistributor(feeDistributor).checkpointUser(address(this));\\r\\n  }\\r\\n\\r\\n  /// @dev Claim rewards and send to recipient.\\r\\n  ///      Only operator can call it.\\r\\n  ///      Assume that claimed rewards will be immediately transfer to Polygon.\\r\\n  function claimVeRewards(IERC20[] memory tokens, address recipient) external override {\\r\\n    require(msg.sender == operator, \\\"Not operator\\\");\\r\\n    require(recipient != address(0), \\\"Zero recipient\\\");\\r\\n\\r\\n    IFeeDistributor(feeDistributor).claimTokens(address(this), tokens);\\r\\n\\r\\n    // transfer all rewards to operator\\r\\n    for (uint i; i < tokens.length; ++i) {\\r\\n      IERC20 token = tokens[i];\\r\\n      uint balance = token.balanceOf(address(this));\\r\\n      if (balance != 0) {\\r\\n        token.safeTransfer(recipient, balance);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return underlying balance under control.\\r\\n  function investedUnderlyingBalance() external override view returns (uint) {\\r\\n    (uint amount,) = IVotingEscrow(VE_BAL).locked(address(this));\\r\\n    return amount;\\r\\n  }\\r\\n\\r\\n  //*****************************************************************\\r\\n  //********************* GAUGES ACTIONS ****************************\\r\\n  //*****************************************************************\\r\\n\\r\\n  /// @dev Deposit to given gauge LP token. Sender should be linked to the gauge.\\r\\n  function depositToGauge(address gauge, uint amount) external override onlyAllowedDepositor(gauge) {\\r\\n    require(amount != 0, \\\"Zero amount\\\");\\r\\n    require(gauge != address(0), \\\"Zero gauge\\\");\\r\\n\\r\\n    address underlying = IGauge(gauge).lp_token();\\r\\n    IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    IERC20(underlying).safeApprove(gauge, 0);\\r\\n    IERC20(underlying).safeApprove(gauge, amount);\\r\\n    IGauge(gauge).deposit(amount, address(this), false);\\r\\n  }\\r\\n\\r\\n  /// @dev Withdraw from given gauge LP tokens. Sender should be linked to the gauge.\\r\\n  function withdrawFromGauge(\\r\\n    address gauge,\\r\\n    uint amount\\r\\n  ) external override onlyAllowedDepositor(gauge) {\\r\\n    require(amount != 0, \\\"Zero amount\\\");\\r\\n    require(gauge != address(0), \\\"Zero gauge\\\");\\r\\n\\r\\n    IGauge(gauge).withdraw(amount, false);\\r\\n    address underlying = IGauge(gauge).lp_token();\\r\\n    IERC20(underlying).safeTransfer(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  /// @dev Claim rewards from given gauge. Sender should be linked to the gauge.\\r\\n  function claimRewardsFromGauge(\\r\\n    address gauge,\\r\\n    address receiver\\r\\n  ) external override onlyAllowedDepositor(gauge) {\\r\\n    require(gauge != address(0), \\\"Zero gauge\\\");\\r\\n    require(receiver != address(0), \\\"Zero receiver\\\");\\r\\n\\r\\n    IGauge(gauge).claim_rewards(address(this), receiver);\\r\\n  }\\r\\n\\r\\n  /// @dev Claim rewards from BalancerMinter for given gauge. Sender should be linked to the gauge.\\r\\n  function claimRewardsFromMinter(\\r\\n    address gauge,\\r\\n    address receiver\\r\\n  ) external override onlyAllowedDepositor(gauge) returns (uint) {\\r\\n    require(gauge != address(0), \\\"Zero gauge\\\");\\r\\n    require(receiver != address(0), \\\"Zero receiver\\\");\\r\\n\\r\\n    uint balance = IERC20(BAL).balanceOf(address(this));\\r\\n    IBalancerMinter(BALANCER_MINTER).mint(gauge);\\r\\n    uint claimed = IERC20(BAL).balanceOf(address(this)) - balance;\\r\\n    IERC20(BAL).safeTransfer(receiver, claimed);\\r\\n    return claimed;\\r\\n  }\\r\\n\\r\\n  //*****************************************************************\\r\\n  //********************* veBAL VOTING ******************************\\r\\n  //*****************************************************************\\r\\n\\r\\n  /// @notice Allocate voting power for changing pool weights\\r\\n  /// @param _gauges Gauges which _users votes for\\r\\n  /// @param _userWeights Weights for gauges in bps (units of 0.01%). Minimal is 0.01%. Ignored if 0\\r\\n  function voteForManyGaugeWeights(\\r\\n    address[] memory _gauges,\\r\\n    uint[] memory _userWeights\\r\\n  ) external onlyVoter {\\r\\n    require(_gauges.length == _userWeights.length, \\\"Wrong input\\\");\\r\\n    for (uint i; i < _gauges.length; i++) {\\r\\n      IGaugeController(gaugeController).vote_for_gauge_weights(_gauges[i], _userWeights[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  //*****************************************************************\\r\\n  //********************* GOV ACTIONS *******************************\\r\\n  //*****************************************************************\\r\\n\\r\\n  /// @dev Set a new operator address.\\r\\n  function setOperator(address operator_) external onlyGovernance {\\r\\n    require(operator_ != address(0), \\\"Zero operator\\\");\\r\\n    emit ChangeOperator(operator, operator_);\\r\\n    operator = operator_;\\r\\n  }\\r\\n\\r\\n  /// @dev Set a new gauge controller address.\\r\\n  function setGaugeController(address value) external onlyGovernance {\\r\\n    require(value != address(0), \\\"Zero value\\\");\\r\\n    emit ChangeGaugeController(gaugeController, value);\\r\\n    gaugeController = value;\\r\\n  }\\r\\n\\r\\n  /// @dev Set a new operator address.\\r\\n  function setFeeDistributor(address value) external onlyGovernance {\\r\\n    require(value != address(0), \\\"Zero value\\\");\\r\\n    emit ChangeFeeDistributor(feeDistributor, value);\\r\\n    feeDistributor = value;\\r\\n  }\\r\\n\\r\\n  /// @dev Set a new voter address.\\r\\n  function setVoter(address value) external onlyVoter {\\r\\n    require(value != address(0), \\\"Zero value\\\");\\r\\n    emit ChangeVoter(voter, value);\\r\\n    voter = value;\\r\\n  }\\r\\n\\r\\n  /// @dev Link an address to a gauge.\\r\\n  ///      Governance can link a depositor only for not linked gauges.\\r\\n  function linkDepositorsToGauges(\\r\\n    address[] memory depositors,\\r\\n    address[] memory gauges\\r\\n  ) external onlyGovernance {\\r\\n    for (uint i; i < depositors.length; i++) {\\r\\n      address depositor = depositors[i];\\r\\n      address gauge = gauges[i];\\r\\n      require(gaugesToDepositors[gauge] == address(0), \\\"Gauge already linked\\\");\\r\\n      gaugesToDepositors[gauge] = depositor;\\r\\n      emit LinkGaugeToDistributor(gauge, depositor);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Transfer control under a gauge to another address.\\r\\n  ///      Should have strict control and time-lock in the implementation.\\r\\n  function changeDepositorToGaugeLink(address gauge, address newDepositor) external {\\r\\n    address depositor = gaugesToDepositors[gauge];\\r\\n    require(depositor == msg.sender, \\\"Not depositor\\\");\\r\\n    gaugesToDepositors[gauge] = newDepositor;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/governance/ControllableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\r\\nimport \\\"../interface/IControllable.sol\\\";\\r\\nimport \\\"../interface/IControllableExtended.sol\\\";\\r\\nimport \\\"../interface/IController.sol\\\";\\r\\n\\r\\n/// @title Implement basic functionality for any contract that require strict control\\r\\n///        V2 is optimised version for less gas consumption\\r\\n/// @dev Can be used with upgradeable pattern.\\r\\n///      Require call initializeControllable() in any case.\\r\\n/// @author belbix\\r\\nabstract contract ControllableV2 is Initializable, IControllable, IControllableExtended {\\r\\n\\r\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\r\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\r\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\r\\n\\r\\n  event ContractInitialized(address controller, uint ts, uint block);\\r\\n\\r\\n  /// @notice Initialize contract after setup it as proxy implementation\\r\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\r\\n  /// @dev Use it only once after first logic setup\\r\\n  /// @param __controller Controller address\\r\\n  function initializeControllable(address __controller) public initializer {\\r\\n    _setController(__controller);\\r\\n    _setCreated(block.timestamp);\\r\\n    _setCreatedBlock(block.number);\\r\\n    emit ContractInitialized(__controller, block.timestamp, block.number);\\r\\n  }\\r\\n\\r\\n  /// @dev Return true if given address is controller\\r\\n  function isController(address _value) external override view returns (bool) {\\r\\n    return _isController(_value);\\r\\n  }\\r\\n\\r\\n  function _isController(address _value) internal view returns (bool) {\\r\\n    return _value == _controller();\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if given address is setup as governance in Controller\\r\\n  function isGovernance(address _value) external override view returns (bool) {\\r\\n    return _isGovernance(_value);\\r\\n  }\\r\\n\\r\\n  function _isGovernance(address _value) internal view returns (bool) {\\r\\n    return IController(_controller()).governance() == _value;\\r\\n  }\\r\\n\\r\\n  // ************* SETTERS/GETTERS *******************\\r\\n\\r\\n  /// @notice Return controller address saved in the contract slot\\r\\n  function controller() external view override returns (address) {\\r\\n    return _controller();\\r\\n  }\\r\\n\\r\\n  function _controller() internal view returns (address result) {\\r\\n    bytes32 slot = _CONTROLLER_SLOT;\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Set a controller address to contract slot\\r\\n  function _setController(address _newController) private {\\r\\n    require(_newController != address(0));\\r\\n    bytes32 slot = _CONTROLLER_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _newController)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return creation timestamp\\r\\n  /// @return ts Creation timestamp\\r\\n  function created() external view override returns (uint256 ts) {\\r\\n    bytes32 slot = _CREATED_SLOT;\\r\\n    assembly {\\r\\n      ts := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Filled only once when contract initialized\\r\\n  /// @param _value block.timestamp\\r\\n  function _setCreated(uint256 _value) private {\\r\\n    bytes32 slot = _CREATED_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return creation block number\\r\\n  /// @return ts Creation block number\\r\\n  function createdBlock() external view returns (uint256 ts) {\\r\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\r\\n    assembly {\\r\\n      ts := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Filled only once when contract initialized\\r\\n  /// @param _value block.number\\r\\n  function _setCreatedBlock(uint256 _value) private {\\r\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deprecated. This function has issues similar to the ones found in\\r\\n   * {IERC20-approve}, and its usage is discouraged.\\r\\n   *\\r\\n   * Whenever possible, use {safeIncreaseAllowance} and\\r\\n   * {safeDecreaseAllowance} instead.\\r\\n   */\\r\\n  function safeApprove(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // safeApprove should only be called when setting an initial allowance,\\r\\n    // or when resetting it to zero. To increase and decrease it, use\\r\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n    require(\\r\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n    );\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n  unchecked {\\r\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n    uint256 newAllowance = oldAllowance - value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/IDelegation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IDelegation {\\r\\n  function clearDelegate(bytes32 _id) external;\\r\\n\\r\\n  function setDelegate(bytes32 _id, address _delegate) external;\\r\\n\\r\\n  function delegation(address _address, bytes32 _id) external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/balancer/IFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../openzeppelin/IERC20.sol\\\";\\r\\nimport \\\"../curve/IVotingEscrow.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Fee Distributor\\r\\n * @notice Distributes any tokens transferred to the contract (e.g. Protocol fees and any BAL emissions) among veBAL\\r\\n * holders proportionally based on a snapshot of the week at which the tokens are sent to the FeeDistributor contract.\\r\\n * @dev Supports distributing arbitrarily many different tokens. In order to start distributing a new token to veBAL\\r\\n * holders simply transfer the tokens to the `FeeDistributor` contract and then call `checkpointToken`.\\r\\n */\\r\\ninterface IFeeDistributor {\\r\\n  event TokenCheckpointed(IERC20 token, uint256 amount, uint256 lastCheckpointTimestamp);\\r\\n  event TokensClaimed(address user, IERC20 token, uint256 amount, uint256 userTokenTimeCursor);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the VotingEscrow (veBAL) token contract\\r\\n     */\\r\\n  function getVotingEscrow() external view returns (IVotingEscrow);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the global time cursor representing the most earliest uncheckpointed week.\\r\\n     */\\r\\n  function getTimeCursor() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the user-level time cursor representing the most earliest uncheckpointed week.\\r\\n     * @param user - The address of the user to query.\\r\\n     */\\r\\n  function getUserTimeCursor(address user) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.\\r\\n     * @param token - The ERC20 token address to query.\\r\\n     */\\r\\n  function getTokenTimeCursor(IERC20 token) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the user-level time cursor storing the timestamp of the latest token distribution claimed.\\r\\n     * @param user - The address of the user to query.\\r\\n     * @param token - The ERC20 token address to query.\\r\\n     */\\r\\n  function getUserTokenTimeCursor(address user, IERC20 token) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the user's cached balance of veBAL as of the provided timestamp.\\r\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\r\\n     * This function requires `user` to have been checkpointed past `timestamp` so that their balance is cached.\\r\\n     * @param user - The address of the user of which to read the cached balance of.\\r\\n     * @param timestamp - The timestamp at which to read the `user`'s cached balance at.\\r\\n     */\\r\\n  function getUserBalanceAtTimestamp(address user, uint256 timestamp) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the cached total supply of veBAL as of the provided timestamp.\\r\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\r\\n     * This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.\\r\\n     * @param timestamp - The timestamp at which to read the cached total supply at.\\r\\n     */\\r\\n  function getTotalSupplyAtTimestamp(uint256 timestamp) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the FeeDistributor's cached balance of `token`.\\r\\n     */\\r\\n  function getTokenLastBalance(IERC20 token) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the amount of `token` which the FeeDistributor received in the week beginning at `timestamp`.\\r\\n     * @param token - The ERC20 token address to query.\\r\\n     * @param timestamp - The timestamp corresponding to the beginning of the week of interest.\\r\\n     */\\r\\n  function getTokensDistributedInWeek(IERC20 token, uint256 timestamp) external view returns (uint256);\\r\\n\\r\\n  // Depositing\\r\\n\\r\\n  /**\\r\\n   * @notice Deposits tokens to be distributed in the current week.\\r\\n     * @dev Sending tokens directly to the FeeDistributor instead of using `depositTokens` may result in tokens being\\r\\n     * retroactively distributed to past weeks, or for the distribution to carry over to future weeks.\\r\\n     *\\r\\n     * If for some reason `depositTokens` cannot be called, in order to ensure that all tokens are correctly distributed\\r\\n     * manually call `checkpointToken` before and after the token transfer.\\r\\n     * @param token - The ERC20 token address to distribute.\\r\\n     * @param amount - The amount of tokens to deposit.\\r\\n     */\\r\\n  function depositToken(IERC20 token, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Deposits tokens to be distributed in the current week.\\r\\n     * @dev A version of `depositToken` which supports depositing multiple `tokens` at once.\\r\\n     * See `depositToken` for more details.\\r\\n     * @param tokens - An array of ERC20 token addresses to distribute.\\r\\n     * @param amounts - An array of token amounts to deposit.\\r\\n     */\\r\\n  function depositTokens(IERC20[] calldata tokens, uint256[] calldata amounts) external;\\r\\n\\r\\n  // Checkpointing\\r\\n\\r\\n  /**\\r\\n   * @notice Caches the total supply of veBAL at the beginning of each week.\\r\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\r\\n     */\\r\\n  function checkpoint() external;\\r\\n\\r\\n  /**\\r\\n   * @notice Caches the user's balance of veBAL at the beginning of each week.\\r\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\r\\n     * @param user - The address of the user to be checkpointed.\\r\\n     */\\r\\n  function checkpointUser(address user) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Assigns any newly-received tokens held by the FeeDistributor to weekly distributions.\\r\\n     * @dev Any `token` balance held by the FeeDistributor above that which is returned by `getTokenLastBalance`\\r\\n     * will be distributed evenly across the time period since `token` was last checkpointed.\\r\\n     *\\r\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\r\\n     * @param token - The ERC20 token address to be checkpointed.\\r\\n     */\\r\\n  function checkpointToken(IERC20 token) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Assigns any newly-received tokens held by the FeeDistributor to weekly distributions.\\r\\n     * @dev A version of `checkpointToken` which supports checkpointing multiple tokens.\\r\\n     * See `checkpointToken` for more details.\\r\\n     * @param tokens - An array of ERC20 token addresses to be checkpointed.\\r\\n     */\\r\\n  function checkpointTokens(IERC20[] calldata tokens) external;\\r\\n\\r\\n  // Claiming\\r\\n\\r\\n  /**\\r\\n   * @notice Claims all pending distributions of the provided token for a user.\\r\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\r\\n     * is up to date before calculating the amount of tokens to be claimed.\\r\\n     * @param user - The user on behalf of which to claim.\\r\\n     * @param token - The ERC20 token address to be claimed.\\r\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\r\\n     */\\r\\n  function claimToken(address user, IERC20 token) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Claims a number of tokens on behalf of a user.\\r\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\r\\n     * See `claimToken` for more details.\\r\\n     * @param user - The user on behalf of which to claim.\\r\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\r\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\r\\n     */\\r\\n  function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/strategies/balancer/IBalLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../../openzeppelin/IERC20.sol\\\";\\r\\n\\r\\ninterface IBalLocker {\\r\\n\\r\\n  function VE_BAL() external view returns (address);\\r\\n\\r\\n  function VE_BAL_UNDERLYING() external view returns (address);\\r\\n\\r\\n  function BALANCER_MINTER() external view returns (address);\\r\\n\\r\\n  function BAL() external view returns (address);\\r\\n\\r\\n  function gaugeController() external view returns (address);\\r\\n\\r\\n  function feeDistributor() external view returns (address);\\r\\n\\r\\n  function operator() external view returns (address);\\r\\n\\r\\n  function voter() external view returns (address);\\r\\n\\r\\n  function delegateVotes(bytes32 _id, address _delegateContract, address _delegate) external;\\r\\n\\r\\n  function clearDelegatedVotes(bytes32 _id, address _delegateContract) external;\\r\\n\\r\\n  function depositVe(uint256 amount) external;\\r\\n\\r\\n  function claimVeRewards(IERC20[] memory tokens, address recipient) external;\\r\\n\\r\\n  function investedUnderlyingBalance() external view returns (uint);\\r\\n\\r\\n  function depositToGauge(address gauge, uint amount) external;\\r\\n\\r\\n  function withdrawFromGauge(address gauge, uint amount) external;\\r\\n\\r\\n  function claimRewardsFromGauge(address gauge, address receiver) external;\\r\\n\\r\\n  function claimRewardsFromMinter(address gauge, address receiver) external returns (uint claimed);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/curve/IGauge.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IGauge {\\r\\n\\r\\n  struct Reward {\\r\\n    address token;\\r\\n    address distributor;\\r\\n    uint256 period_finish;\\r\\n    uint256 rate;\\r\\n    uint256 last_update;\\r\\n    uint256 integral;\\r\\n  }\\r\\n\\r\\n  /// @notice Deposit `_value` LP tokens\\r\\n  /// @dev Depositting also claims pending reward tokens\\r\\n  /// @param _value Number of tokens to deposit\\r\\n  function deposit(uint _value) external;\\r\\n\\r\\n  function deposit(uint _value, address receiver, bool claim) external;\\r\\n\\r\\n  /// @notice Get the number of claimable reward tokens for a user\\r\\n  /// @dev This call does not consider pending claimable amount in `reward_contract`.\\r\\n  ///      Off-chain callers should instead use `claimable_rewards_write` as a\\r\\n  ///      view method.\\r\\n  /// @param _addr Account to get reward amount for\\r\\n  /// @param _token Token to get reward amount for\\r\\n  /// @return uint256 Claimable reward token amount\\r\\n  function claimable_reward(address _addr, address _token) external view returns (uint256);\\r\\n\\r\\n  /// @notice Get the number of already-claimed reward tokens for a user\\r\\n  /// @param _addr Account to get reward amount for\\r\\n  /// @param _token Token to get reward amount for\\r\\n  /// @return uint256 Total amount of `_token` already claimed by `_addr`\\r\\n  function claimed_reward(address _addr, address _token) external view returns (uint256);\\r\\n\\r\\n  /// @notice Get the number of claimable reward tokens for a user\\r\\n  /// @dev This function should be manually changed to \\\"view\\\" in the ABI\\r\\n  ///     Calling it via a transaction will claim available reward tokens\\r\\n  /// @param _addr Account to get reward amount for\\r\\n  /// @param _token Token to get reward amount for\\r\\n  /// @return uint256 Claimable reward token amount\\r\\n  function claimable_reward_write(address _addr, address _token) external returns (uint256);\\r\\n\\r\\n  /// @notice Withdraw `_value` LP tokens\\r\\n  /// @dev Withdrawing also claims pending reward tokens\\r\\n  /// @param _value Number of tokens to withdraw\\r\\n  function withdraw(uint _value, bool) external;\\r\\n\\r\\n  function claim_rewards(address _addr) external;\\r\\n\\r\\n  function claim_rewards(address _addr, address receiver) external;\\r\\n\\r\\n  function balanceOf(address) external view returns (uint);\\r\\n\\r\\n  function lp_token() external view returns (address);\\r\\n\\r\\n  function deposit_reward_token(address reward_token, uint256 amount) external;\\r\\n\\r\\n  function add_reward(address reward_token, address distributor) external;\\r\\n\\r\\n  function reward_tokens(uint id) external view returns (address);\\r\\n\\r\\n  function reward_data(address token) external view returns (Reward memory);\\r\\n\\r\\n  function reward_count() external view returns (uint);\\r\\n\\r\\n  function initialize(address lp) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/curve/IGaugeController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IGaugeController {\\r\\n\\r\\n  function vote_for_many_gauge_weights(address[] memory _gauges, uint[] memory _userWeights) external;\\r\\n\\r\\n  function vote_for_gauge_weights(address gauge, uint weight) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/balancer/IBalancerMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IBalancerMinter {\\r\\n  event Minted(address indexed recipient, address gauge, uint256 minted);\\r\\n  event MinterApprovalSet(\\r\\n    address indexed user,\\r\\n    address indexed minter,\\r\\n    bool approval\\r\\n  );\\r\\n\\r\\n  function allowed_to_mint_for(address minter, address user)\\r\\n  external\\r\\n  view\\r\\n  returns (bool);\\r\\n\\r\\n  function getBalancerToken() external view returns (address);\\r\\n\\r\\n  function getBalancerTokenAdmin() external view returns (address);\\r\\n\\r\\n  function getDomainSeparator() external view returns (bytes32);\\r\\n\\r\\n  function getGaugeController() external view returns (address);\\r\\n\\r\\n  function getMinterApproval(address minter, address user)\\r\\n  external\\r\\n  view\\r\\n  returns (bool);\\r\\n\\r\\n  function getNextNonce(address user) external view returns (uint256);\\r\\n\\r\\n  function mint(address gauge) external returns (uint256);\\r\\n\\r\\n  function mintFor(address gauge, address user) external returns (uint256);\\r\\n\\r\\n  function mintMany(address[] memory gauges) external returns (uint256);\\r\\n\\r\\n  function mintManyFor(address[] memory gauges, address user)\\r\\n  external\\r\\n  returns (uint256);\\r\\n\\r\\n  function mint_for(address gauge, address user) external;\\r\\n\\r\\n  function mint_many(address[8] memory gauges) external;\\r\\n\\r\\n  function minted(address user, address gauge)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256);\\r\\n\\r\\n  function setMinterApproval(address minter, bool approval) external;\\r\\n\\r\\n  function setMinterApprovalWithSignature(\\r\\n    address minter,\\r\\n    bool approval,\\r\\n    address user,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  function toggle_approve_mint(address minter) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private _initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private _initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !_initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = true;\\r\\n      _initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = false;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IControllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IControllable {\\r\\n\\r\\n  function isController(address _contract) external view returns (bool);\\r\\n\\r\\n  function isGovernance(address _contract) external view returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IControllableExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/// @dev This interface contains additional functions for Controllable class\\r\\n///      Don't extend the exist Controllable for the reason of huge coherence\\r\\ninterface IControllableExtended {\\r\\n\\r\\n  function created() external view returns (uint256 ts);\\r\\n\\r\\n  function controller() external view returns (address adr);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IController {\\r\\n\\r\\n  function addVaultsAndStrategies(address[] memory _vaults, address[] memory _strategies) external;\\r\\n\\r\\n  function addStrategy(address _strategy) external;\\r\\n\\r\\n  function governance() external view returns (address);\\r\\n\\r\\n  function dao() external view returns (address);\\r\\n\\r\\n  function bookkeeper() external view returns (address);\\r\\n\\r\\n  function feeRewardForwarder() external view returns (address);\\r\\n\\r\\n  function mintHelper() external view returns (address);\\r\\n\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  function fundToken() external view returns (address);\\r\\n\\r\\n  function psVault() external view returns (address);\\r\\n\\r\\n  function fund() external view returns (address);\\r\\n\\r\\n  function distributor() external view returns (address);\\r\\n\\r\\n  function announcer() external view returns (address);\\r\\n\\r\\n  function vaultController() external view returns (address);\\r\\n\\r\\n  function whiteList(address _target) external view returns (bool);\\r\\n\\r\\n  function vaults(address _target) external view returns (bool);\\r\\n\\r\\n  function strategies(address _target) external view returns (bool);\\r\\n\\r\\n  function psNumerator() external view returns (uint256);\\r\\n\\r\\n  function psDenominator() external view returns (uint256);\\r\\n\\r\\n  function fundNumerator() external view returns (uint256);\\r\\n\\r\\n  function fundDenominator() external view returns (uint256);\\r\\n\\r\\n  function isAllowedUser(address _adr) external view returns (bool);\\r\\n\\r\\n  function isDao(address _adr) external view returns (bool);\\r\\n\\r\\n  function isHardWorker(address _adr) external view returns (bool);\\r\\n\\r\\n  function isRewardDistributor(address _adr) external view returns (bool);\\r\\n\\r\\n  function isPoorRewardConsumer(address _adr) external view returns (bool);\\r\\n\\r\\n  function isValidVault(address _vault) external view returns (bool);\\r\\n\\r\\n  function isValidStrategy(address _strategy) external view returns (bool);\\r\\n\\r\\n  function rebalance(address _strategy) external;\\r\\n\\r\\n  // ************ DAO ACTIONS *************\\r\\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator) external;\\r\\n\\r\\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator) external;\\r\\n\\r\\n  function changeWhiteListStatus(address[] calldata _targets, bool status) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize, which returns 0 for contracts in\\r\\n    // construction, since the code is only stored at the end of the\\r\\n    // constructor execution.\\r\\n\\r\\n    uint256 size;\\r\\n    assembly {\\r\\n      size := extcodesize(account)\\r\\n    }\\r\\n    return size > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/curve/IVotingEscrow.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IVotingEscrow {\\r\\n\\r\\n  struct Point {\\r\\n    int128 bias;\\r\\n    int128 slope; // - dweight / dt\\r\\n    uint256 ts;\\r\\n    uint256 blk; // block\\r\\n  }\\r\\n\\r\\n  function balanceOf(address addr) external view returns (uint);\\r\\n\\r\\n  function balanceOfAt(address addr, uint block_) external view returns (uint);\\r\\n\\r\\n  function totalSupply() external view returns (uint);\\r\\n\\r\\n  function totalSupplyAt(uint block_) external view returns (uint);\\r\\n\\r\\n  function locked(address user) external view returns (uint amount, uint end);\\r\\n\\r\\n  function create_lock(uint value, uint unlock_time) external;\\r\\n\\r\\n  function increase_amount(uint value) external;\\r\\n\\r\\n  function increase_unlock_time(uint unlock_time) external;\\r\\n\\r\\n  function withdraw() external;\\r\\n\\r\\n  function commit_smart_wallet_checker(address addr) external;\\r\\n\\r\\n  function apply_smart_wallet_checker() external;\\r\\n\\r\\n  function user_point_history(address user, uint256 timestamp) external view returns (Point memory);\\r\\n\\r\\n  function user_point_epoch(address user) external view returns (uint256);\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeController_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeDistributor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ChangeFeeDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ChangeGaugeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ChangeOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ChangeVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"LinkGaugeToDistributor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BAL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BALANCER_MINTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VE_BAL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VE_BAL_UNDERLYING\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDepositor\",\"type\":\"address\"}],\"name\":\"changeDepositorToGaugeLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimRewardsFromGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimRewardsFromMinter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimVeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_delegateContract\",\"type\":\"address\"}],\"name\":\"clearDelegatedVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_delegateContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"delegateVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositVe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugesToDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__controller\",\"type\":\"address\"}],\"name\":\"initializeControllable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"depositors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"gauges\",\"type\":\"address[]\"}],\"name\":\"linkDepositorsToGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setGaugeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userWeights\",\"type\":\"uint256[]\"}],\"name\":\"voteForManyGaugeWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BalLocker", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "0000000000000000000000006b2e0facd2f2a8f407ac591067ac06b5d29247e4000000000000000000000000308a756b4f9aa3148cad7ccf8e72c18c758b2ef2000000000000000000000000c128468b7ce63ea702c1f104d55a2566b13d3abd00000000000000000000000026743984e3357efc59f2fd6c1afdc310335a61c9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}