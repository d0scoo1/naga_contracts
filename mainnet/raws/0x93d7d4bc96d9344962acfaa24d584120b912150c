{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: wns/wns_registrar.sol\r\n\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsRegistryInterface {\r\n    function owner() external view returns (address);\r\n    function getWnsAddress(string memory _label) external view returns (address);\r\n    function setRecord(bytes32 _hash, uint256 _tokenId, string memory _name) external;\r\n    function getRecord(bytes32 _hash) external view returns (uint256);\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsErc721Interface {\r\n    function mintErc721(address to) external;\r\n    function getNextTokenId() external view returns (uint256);\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsResolverInterface {\r\n    function setPrimaryName(address _addresss, uint256 _tokenId) external;\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsOldContractInterface {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function nameByTokenID(uint256 tokenId) external view returns (string memory);\r\n    function getPrimaryName(address _address) external view returns (string memory);\r\n\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsRegistrarInterface {\r\n    function computeNamehash(string memory _name) external view returns (bytes32);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ncontract wnsMigration {\r\n\r\n    address private WnsRegistry;\r\n    address public OldContract;\r\n    WnsRegistryInterface wnsRegistry;\r\n   \r\n\r\n    constructor(address registry_, address oldContract_) {\r\n        OldContract = oldContract_;\r\n        WnsRegistry = registry_;\r\n        wnsRegistry = WnsRegistryInterface(WnsRegistry);\r\n    }\r\n\r\n    function setRegistry(address _registry) public {\r\n        require(msg.sender == wnsRegistry.owner(), \"Not authorized.\");\r\n        WnsRegistry = _registry;\r\n        wnsRegistry = WnsRegistryInterface(WnsRegistry);\r\n    }\r\n\r\n    function migrateTokens() public {\r\n        WnsErc721Interface wnsErc721 = WnsErc721Interface(wnsRegistry.getWnsAddress(\"_wnsErc721\"));\r\n        WnsResolverInterface wnsResolver = WnsResolverInterface(wnsRegistry.getWnsAddress(\"_wnsResolver\"));\r\n        WnsRegistrarInterface wnsRegistrar = WnsRegistrarInterface(wnsRegistry.getWnsAddress(\"_wnsRegistrar\"));\r\n        WnsOldContractInterface wnsOldContract = WnsOldContractInterface(OldContract);\r\n        require(msg.sender == wnsRegistry.owner(), \"Not authorized.\");\r\n        uint256 totalSupply = wnsOldContract.totalSupply();\r\n\r\n        for(uint256 i=0; i<totalSupply; i++) {\r\n            address tokenOwner = wnsOldContract.ownerOf(i);\r\n            string memory fullname = wnsOldContract.nameByTokenID(i);\r\n            string memory name = parseName(fullname);\r\n            bytes32 _hash = wnsRegistrar.computeNamehash(name);\r\n            require(wnsRegistry.getRecord(_hash) == 0, \"Name already exists.\");\r\n            wnsErc721.mintErc721(tokenOwner);\r\n            wnsRegistry.setRecord(_hash, wnsErc721.getNextTokenId(), fullname);\r\n\r\n            try wnsOldContract.getPrimaryName(tokenOwner) {\r\n                string memory _primary = wnsOldContract.getPrimaryName(tokenOwner);\r\n                if(keccak256(bytes(_primary)) == keccak256(bytes(fullname))) {\r\n                    wnsResolver.setPrimaryName(tokenOwner, wnsErc721.getNextTokenId() - 1);\r\n                }\r\n            } catch {}\r\n        }\r\n    }\r\n\r\n    function parseName(string memory _fullName) public pure returns (string memory) {\r\n        bytes memory _bytes = bytes(_fullName);\r\n        uint256 index;\r\n        for(uint256 i=0; i<_bytes.length; i++) {\r\n            if(_bytes[i] == bytes(\".\")[0]) {\r\n                index = i;\r\n            }\r\n        }\r\n        return getSlice(1,index,_bytes);\r\n    }\r\n\r\n    function getSlice(uint256 begin, uint256 end, bytes memory text) public pure returns (string memory) {\r\n        bytes memory a = new bytes(end-begin+1);\r\n        for(uint i=0;i<=end-begin;i++){\r\n            a[i] = text[i+begin-1];\r\n        }\r\n        return string(a);    \r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OldContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"begin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"text\",\"type\":\"bytes\"}],\"name\":\"getSlice\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_fullName\",\"type\":\"string\"}],\"name\":\"parseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "wnsMigration", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000082fe896e4969a3270c0bec103cf1ebdbda6e6bfc00000000000000000000000026b4c9265f5b5a367bb85c9ef048908a72c4261b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://70f978ff83c7bf7dba89b4634bc53bb72ae3865b2e2f7923e410c3c377bb86b4"}]}