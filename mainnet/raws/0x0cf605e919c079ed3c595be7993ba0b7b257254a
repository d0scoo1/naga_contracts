{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\ncontract FamilienSpardose {\r\n    \r\n    // Created by N. Fuchs\r\n    \r\n    // Name der Familienspardose\r\n    string public spardosenName;\r\n    \r\n    //weist einer Addresse ein Guthaben zu\r\n    mapping (address => uint) public guthaben;\r\n    \r\n    // zeigt im smart contract an, wieviel Ether alle Sparer insgesamt halten\r\n    // \".balance\" ist eine Objektattribut des Datentyps address, das f\u00fcr jede wallet und jeden smart contract das entsprechende \r\n    //  Ether-Guthaben darstellt.\r\n    uint public gesamtGuthaben = address(this).balance;\r\n    \r\n    // Konstruktorfunktion: Wird einmalig beim deployment des smart contracts ausgef\u00fchrt\r\n    // Wenn Transaktionen, die Funktionen auszuf\u00fchren beabsichtigen, Ether mitgesendet wird (TXvalue > 0), so muss die\r\n    //  ausgef\u00fchrte Transaktion mit \"payable\" gekennzeichnet sein. Sicherheitsfeature im Interesse der Nutzer\r\n    constructor(string _name, address _sparer) payable {\r\n        \r\n        \r\n        // Weist der Variablen spardosenName den String _name zu, welcher vom Ersteller\r\n        // des smart contracts als Parameter in der Transaktion \u00fcbergeben wird:\r\n        spardosenName = _name;\r\n        \r\n        \r\n        // Erstellt einen unsignierten integer, der mit der Menge Ether definiert wird, die der \r\n        // Transaktion mitgeliefert wird:\r\n        uint startGuthaben = msg.value;\r\n        \r\n        // Wenn der ersteller des smart contracts in der transaktion einen Beg\u00fcnstigten angegeben hat, soll ihm \r\n        // der zuvor als Startguthaben definierte Wert als Guthaben gutgeschrieben werden.\r\n        // Das mitgesendete Ether wird dabei dem smart contract gutgeschrieben, er war der Empf\u00e4nger der Transaktion.\r\n        if (_sparer != 0x0) guthaben[_sparer] = startGuthaben;\r\n        else guthaben[msg.sender] = startGuthaben;\r\n    }\r\n    \r\n    \r\n    // Schreibt dem Absender der Transaktion (TXfrom) ihren Wert (TXvalue) als Guthaben zu\r\n    function einzahlen() public payable{\r\n        guthaben[msg.sender] = msg.value;\r\n    }\r\n    \r\n    // Erm\u00f6glicht jemandem, so viel Ether aus dem smart contract abzubuchen, wie ihm an Guthaben zur Verf\u00fcgung steht\r\n    function abbuchen(uint _betrag) public {\r\n        \r\n        // Zun\u00e4chst pr\u00fcfen, ob dieser jemand \u00fcber ausreichend Guthaben verf\u00fcgt.\r\n        // Wird diese Bedingung nicht erf\u00fcllt, wird die Ausf\u00fchrung der Funktion abgebrochen.\r\n        require(guthaben[msg.sender] >= _betrag);\r\n        \r\n        // Subtrahieren des abzuhebenden Guthabens \r\n        guthaben [msg.sender] = guthaben [msg.sender] - _betrag;\r\n        \r\n        // \u00dcberweisung des Ethers\r\n        // \".transfer\" ist eine Objektmethode des Datentyps address, die an die gegebene Addresse \r\n        // die gew\u00fcnschte Menge Ether zu transferieren versucht. Schl\u00e4gt dies fehl, wird die\r\n        // Ausf\u00fchrung der Funktion abgebrochen und bisherige \u00c4nderungen r\u00fcckg\u00e4ngig gemacht.\r\n        msg.sender.transfer(_betrag);\r\n    }\r\n    \r\n    // Getter-Funktion; Gibt das Guthaben einer Addresse zur\u00fcck.\r\n    // Dient der Veranschaulichung von Funktionen, die den state nicht ver\u00e4ndern.\r\n    // Nicht explizit notwendig, da jede als public Variable, so auch das mapping guthaben,\r\n    // vom compiler eine automatische, gleichnamige Getter-Funktion erhalten, wenn sie als public\r\n    // deklariert sind.\r\n    function guthabenAnzeigen(address _sparer) view returns (uint) {\r\n        return guthaben[_sparer];\r\n    }\r\n    \r\n    // Eine weitere Veranschaulichung eines Funktionstyps, der den state nicht \u00e4ndert. \r\n    // Weil mit pure gekennzeichnete Funktionen auf den state sogar garnicht nicht zugreifen k\u00f6nnen,\r\n    // werden entsprechende opcodes nicht ben\u00f6tigt und der smart contract kostet weniger Guthabens\r\n    // beim deployment ben\u00f6tigt. \r\n    function addieren(uint _menge1, uint _menge2) pure returns (uint) {\r\n        return _menge1 + _menge2;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"guthaben\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betrag\",\"type\":\"uint256\"}],\"name\":\"abbuchen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_menge1\",\"type\":\"uint256\"},{\"name\":\"_menge2\",\"type\":\"uint256\"}],\"name\":\"addieren\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sparer\",\"type\":\"address\"}],\"name\":\"guthabenAnzeigen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"einzahlen\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gesamtGuthaben\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spardosenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_sparer\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]", "ContractName": "FamilienSpardose", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000002e51fe4836db5f23c85be173c5f7417507d82982000000000000000000000000000000000000000000000000000000000000001046616d696c69656e73706172646f736500000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f5a40cd1f8bb1e34efec64a38d3c1d6eb7b297c332e029b2a9f4a910e42b7170"}]}