{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n//  ___   _____    ___    _      ___   _  _\r\n// / __| |_   _|  / _ \\  | |    | __| | \\| |\r\n// \\__ \\   | |   | (_) | | |__  | _|  | .` |\r\n// |___/   |_|    \\___/  |____| |___| |_|\\_|\r\n//\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n        functionCallWithValue(\r\n            target,\r\n            data,\r\n            value,\r\n            \"Address: low-level call with value failed\"\r\n        );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data)\r\n    internal\r\n    view\r\n    returns (bytes memory)\r\n    {\r\n        return\r\n        functionStaticCall(\r\n            target,\r\n            data,\r\n            \"Address: low-level static call failed\"\r\n        );\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n    {\r\n        return\r\n        functionDelegateCall(\r\n            target,\r\n            data,\r\n            \"Address: low-level delegate call failed\"\r\n        );\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId)\r\n    external\r\n    view\r\n    returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ninterface ITheStolenGenerator {\r\n    struct FactionImage{\r\n        bool fillFaction;\r\n        bool fillOwner;\r\n        bool fillHighscore;\r\n        uint16 member;\r\n        string factionName;\r\n        address owner;\r\n        uint256 highscore;\r\n        uint256 factionSteals;\r\n        uint256 steals;\r\n        uint256 current;\r\n    }\r\n\r\n    function factionTokenURI(FactionImage memory tokenData)\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n    function flagTokenURI(string memory factionName, uint current)\r\n    external\r\n    view\r\n    returns (string memory);\r\n}\r\n\r\ncontract TheStolen is\r\nOwnable,\r\nERC165,\r\nIERC721,\r\nIERC721Metadata,\r\nReentrancyGuard\r\n{\r\n    using Address for address;\r\n\r\n    //Image Generator\r\n    ITheStolenGenerator stolenImage;\r\n\r\n    //FactionToken Ownership\r\n    struct FactionToken {\r\n        address owner;\r\n        uint16 factionId;\r\n        bytes1 isRogue;\r\n        bytes1 isBurned;\r\n    }\r\n\r\n    //Flag Ownership\r\n    struct Flag {\r\n        address owner;\r\n        uint16 factionId;\r\n        bytes1 vulnerable;\r\n        bytes1 withoutFaction;\r\n    }\r\n\r\n    //Address ID Data\r\n    struct AddressID {\r\n        uint16 factionId;\r\n        uint16 factionTokenId;\r\n        uint16 factionLastTokenId;\r\n        uint8 factionBalance;\r\n        bytes1 hasMinted;\r\n    }\r\n\r\n    //Address Data\r\n    struct AddressData {\r\n        bytes1 hasRogue;\r\n        bytes1 hasFlag;\r\n        bytes1 withoutFaction;\r\n        uint16 rogueId;\r\n        uint256 stolen;\r\n        uint256 switchedFaction;\r\n    }\r\n\r\n    //Faction ID Data\r\n    struct FactionID {\r\n        uint16 factionId;\r\n        uint16 memberCount;\r\n        string name;\r\n    }\r\n\r\n    //Faction Data\r\n    struct FactionData {\r\n        uint256 stolen;\r\n        uint256 currentHoldtime;\r\n        uint256 highscore;\r\n    }\r\n\r\n    //Faction Name ID\r\n    struct FactionNameId {\r\n        uint16 factionId;\r\n        address contractAddress;\r\n    }\r\n\r\n    uint256 private _mintStarttime = 1;\r\n    uint256 private _mintTime = 1;\r\n\r\n    bytes1 private _locked = 0x00;\r\n    bytes1 private _open = 0x00;\r\n\r\n    uint16 private _currentIndex = 1;\r\n    uint16 private _burnedCount = 0;\r\n    uint16 private _currentFactionIndex = 1;\r\n\r\n    uint256 private _flagLastTransferTime = 1;\r\n\r\n    uint16 private _currentFactionHolding;\r\n\r\n    uint16 private _currentLeader;\r\n    uint256 private _currentLongestHoldtime;\r\n\r\n    uint16 internal immutable _flagStealTime;\r\n    uint16 internal immutable _flagFastStealTime;\r\n\r\n    uint16 internal immutable collectionSize;\r\n    uint8 internal immutable maxBatchSize;\r\n\r\n    uint16 internal constant _freeMintCount = 1000;\r\n\r\n    uint256 internal immutable mintPrice;\r\n    uint256 internal flagPrice;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    //THE FLAG\r\n    Flag private _flag;\r\n\r\n    // Mapping from token ID to ownership\r\n    mapping(uint16 => FactionToken) private _factionOwnerships;\r\n\r\n    // Mapping owner address to address ID and data\r\n    mapping(address => AddressID) private _addressIDs;\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from factionId to faction ID and data\r\n    mapping(uint16 => FactionID) private _factionIDs;\r\n    mapping(uint16 => FactionData) private _factionData;\r\n    // Mapping from factionName to faction name ID\r\n    mapping(string => FactionNameId) private _factionNameId;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint16 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    event GotStolen(address from, address to);\r\n    event GotFlag(address from, address to);\r\n    event MintedFlag(address to);\r\n    event NewLeader(uint16 prevLeader, uint16 newLeader);\r\n    event NewFactionHolding(uint16 newHolding);\r\n    event Merge(address owner, uint256 oldTokenId);\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 maxBatchSize_,\r\n        uint256 collectionSize_\r\n    ) {\r\n        require(collectionSize_ > 0, \"collection must have a nonzero supply\");\r\n        require(maxBatchSize_ > 0, \"max batch size must be nonzero\");\r\n\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        maxBatchSize = uint8(maxBatchSize_ + 1);\r\n        collectionSize = uint16(collectionSize_ + 1);\r\n\r\n        mintPrice = 0.03 ether;\r\n        flagPrice = 0.01 ether;\r\n\r\n        _mintTime = 604800;\r\n\r\n        _flagStealTime = 21600;\r\n        _flagFastStealTime = 600;\r\n\r\n        string[10] memory rfn = [\r\n        \"AZUKI\",\r\n        \"DOODLES\",\r\n        \"PUNKS\",\r\n        \"COOLMANSUNIVERSE\",\r\n        \"COOLCATS\",\r\n        \"MFERS\",\r\n        \"FLUF\",\r\n        \"WORLDOFWOMEN\",\r\n        \"DYSTOAPEZ\",\r\n        \"CRYPTOMORIES\"\r\n        ];\r\n\r\n        address[10] memory rfa = [\r\n        0xED5AF388653567Af2F388E6224dC7C4b3241C544,\r\n        0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e,\r\n        0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB,\r\n        0xa5C0Bd78D1667c13BFB403E2a3336871396713c5,\r\n        0x1A92f7381B9F03921564a437210bB9396471050C,\r\n        0x79FCDEF22feeD20eDDacbB2587640e45491b757f,\r\n        0xCcc441ac31f02cD96C153DB6fd5Fe0a2F4e6A68d,\r\n        0xe785E82358879F061BC3dcAC6f0444462D4b5330,\r\n        0x648E8428e0104Ec7D08667866a3568a72Fe3898F,\r\n        0x1a2F71468F656E97c2F86541E57189F59951efe7\r\n        ];\r\n\r\n        FactionID memory faction = FactionID(_currentFactionIndex - 1, 0, \"\");\r\n        uint16 maxIndex = uint16(_currentFactionIndex+rfn.length);\r\n        for(uint i = 0; i < rfn.length; i++){\r\n            faction.name = rfn[i];\r\n            faction.factionId++;\r\n            _factionNameId[rfn[i]] = FactionNameId(faction.factionId, rfa[i]);\r\n            _factionIDs[faction.factionId] = faction;\r\n        }\r\n        _currentFactionIndex = maxIndex;\r\n    }\r\n\r\n    //Set the Contract for image generation if mint not started and not locked\r\n    function setImageContract(address imageContract) private {\r\n        require(_open != 0x01 && _locked != 0x01, \"The Stolen: contract open or locked\");\r\n        stolenImage = ITheStolenGenerator(imageContract);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////\r\n    // MODIFIER\r\n\r\n    modifier isOpen() {\r\n        require(_open == 0x01, \"The Stolen: mint not open.\");\r\n        _;\r\n    }\r\n\r\n    modifier unlocked(uint8 quantity) {\r\n        require(\r\n            _locked != 0x01 &&\r\n            _currentIndex + quantity < collectionSize + 1 &&\r\n            block.timestamp < _mintStarttime + _mintTime,\r\n            \"The Stolen: faction mint locked\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier locked() {\r\n        require(\r\n            (_mintStarttime > 1 && block.timestamp > _mintStarttime + _mintTime) ||\r\n            _locked == 0x01 ||\r\n            _currentIndex == collectionSize - 1 ,\r\n            \"The Stolen: flag mint locked\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // MODIFIER\r\n    ///////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////\r\n    // PUBLIC VIEW\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC165, IERC165)\r\n    returns (bool)\r\n    {\r\n        bytes4 _ERC165_ = 0x01ffc9a7;\r\n        bytes4 _ERC721_ = 0x80ac58cd;\r\n        bytes4 _ERC721Metadata_ = 0x5b5e139f;\r\n        return\r\n        interfaceId == _ERC165_ ||\r\n        interfaceId == _ERC721_ ||\r\n        interfaceId == _ERC721Metadata_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return (_currentIndex - _burnedCount);\r\n    }\r\n\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(owner != address(0), \"The Stolen: balance query for the zero address\");\r\n        return uint256(_addressIDs[owner].factionBalance);\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        require(_existed(uint16(tokenId)), \"The Stolen: nonexistent token\");\r\n        if (tokenId == 0) {\r\n            if (flagReleased()) {\r\n                return _flag.owner;\r\n            }\r\n        }\r\n        return _ownershipOf(uint16(tokenId)).owner;\r\n    }\r\n\r\n    function exists(uint16 tokenId) public view returns (bool) {\r\n        return _existed(tokenId) && !_burned(tokenId);\r\n    }\r\n\r\n    function burned(uint16 tokenId) public view returns (bool) {\r\n        return _burned(tokenId);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////\r\n\r\n    function freeMintLeft() public view returns (uint16) {\r\n        require(_freeMintCount - (_currentIndex-1) > 0, \"The Stolen: 1000 free mints reached.\");\r\n        return _freeMintCount - (_currentIndex-1);\r\n    }\r\n\r\n    function factionMintCost() public view returns (uint256) {\r\n        return mintPrice;\r\n    }\r\n\r\n    function flagReleased() public view returns (bool) {\r\n        return (_locked == 0x01 ||\r\n        _currentIndex == collectionSize ||\r\n        (_mintStarttime > 1 && block.timestamp > _mintStarttime + _mintTime));\r\n    }\r\n\r\n    function flagMintPrice() public view returns (uint256) {\r\n        return (flagPrice * 11)/10;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////\r\n\r\n    function getAddressData(address a)\r\n    public\r\n    view\r\n    returns (AddressID memory, AddressData memory)\r\n    {\r\n        return (_addressIDs[a], _addressData[a]);\r\n    }\r\n\r\n    function getFactionData(uint16 factionId)\r\n    public\r\n    view\r\n    returns (FactionID memory id, FactionData memory data, FactionNameId memory nameId)\r\n    {\r\n        require(factionId < _currentFactionIndex, \"The Stolen: faction doesnt exist\");\r\n        id = _factionIDs[factionId];\r\n        data = _factionData[factionId];\r\n        nameId =  _factionNameId[id.name];\r\n    }\r\n\r\n    function getTokenData(uint16 tokenId)\r\n    public\r\n    view\r\n    returns (FactionToken memory)\r\n    {\r\n        require(_existed(tokenId), \"The Stolen: token doesnt exist\");\r\n        return _factionOwnerships[tokenId];\r\n    }\r\n\r\n    function getHolderFactionId() public view returns (uint16) {\r\n        require(\r\n            _flag.owner != address(0) && _flag.factionId > 0,\r\n            \"The Stolen: no faction owns the flag right now.\"\r\n        );\r\n        return _flag.factionId;\r\n    }\r\n\r\n    function getLeaderHoldtime() public view returns (uint256) {\r\n        require(_flagLastTransferTime != 1, \"The Stolen: no scores yet\");\r\n        Flag memory flag = _flag;\r\n\r\n        uint256 currentHolderHoldtime = _factionData[flag.factionId]\r\n        .currentHoldtime + (block.timestamp - _flagLastTransferTime);\r\n\r\n        if(flag.factionId == 0){\r\n            currentHolderHoldtime = 0;\r\n        }\r\n\r\n        uint256 currentLongestHoldtime = _currentLongestHoldtime;\r\n\r\n        if (\r\n            flag.factionId != _currentLeader &&\r\n            currentLongestHoldtime > currentHolderHoldtime\r\n        ) {\r\n            return currentLongestHoldtime;\r\n        } else {\r\n            require(flag.factionId > 0, \"The Stolen: Flag factionless.\");\r\n            return currentHolderHoldtime;\r\n        }\r\n    }\r\n\r\n    function getLeaderName() public view returns (string memory) {\r\n        require(_flagLastTransferTime != 1, \"The Stolen: no scores yet\");\r\n        Flag memory flag = _flag;\r\n        uint16 currentLeader = _currentLeader;\r\n        uint256 currentHolderHoldtime = _factionData[flag.factionId]\r\n        .currentHoldtime + (block.timestamp - _flagLastTransferTime);\r\n\r\n        if(flag.factionId == 0){\r\n            currentHolderHoldtime = 0;\r\n        }\r\n\r\n        if (\r\n            flag.factionId != currentLeader &&\r\n            _currentLongestHoldtime > currentHolderHoldtime\r\n        ) {\r\n            return _factionIDs[currentLeader].name;\r\n        } else {\r\n            require(flag.factionId > 0, \"The Stolen: Flag factionless.\");\r\n            return _factionIDs[flag.factionId].name;\r\n        }\r\n    }\r\n\r\n    function getCurrentHoldtime() public view returns (uint256) {\r\n        uint16 holderId = _flag.factionId;\r\n        if (_flagLastTransferTime == 1 || _flag.withoutFaction == 0x01) {\r\n            return 0;\r\n        }\r\n        return\r\n        _factionData[holderId].currentHoldtime +\r\n        (block.timestamp - _flagLastTransferTime);\r\n    }\r\n\r\n    function validateFactionName(string memory message)\r\n    public\r\n    pure\r\n    returns (bool)\r\n    {\r\n        bytes memory messageBytes = bytes(message);\r\n\r\n        // Max length 16, A-Z only\r\n        require(\r\n            messageBytes.length > 2 && messageBytes.length < 17,\r\n            \"The Stolen: faction name length unfit\"\r\n        );\r\n        require(\r\n            messageBytes[0] != 0x20 &&\r\n            messageBytes[messageBytes.length - 1] != 0x20,\r\n            \"The Stolen: Invalid characters\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < messageBytes.length; i++) {\r\n            bytes1 char = messageBytes[i];\r\n            if (!(char >= 0x41 && char <= 0x5A) || char == 0x20) {\r\n                revert(\"The Stolen: Invalid character\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function flagVulnerable() public view returns (bool) {\r\n        uint256 lastTransfer = _flagLastTransferTime;\r\n        return\r\n        (_flag.vulnerable == 0x01 &&\r\n        lastTransfer + _flagFastStealTime > block.timestamp) ||\r\n        (lastTransfer > 1 &&\r\n        lastTransfer + _flagStealTime < block.timestamp);\r\n    }\r\n\r\n    // PUBLIC VIEW\r\n    ///////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////\r\n    // INTERNAL VIEW\r\n\r\n    function _ownershipOf(uint16 tokenId, uint16 lowestToCheck)\r\n    internal\r\n    view\r\n    returns (FactionToken memory)\r\n    {\r\n        FactionToken memory ft = _factionOwnerships[tokenId];\r\n        lowestToCheck--;\r\n\r\n        for (uint16 curr = tokenId; curr > lowestToCheck; curr--) {\r\n            ft = _factionOwnerships[curr];\r\n            if (ft.isBurned != 0x01 && ft.owner != address(0)) {\r\n                return ft;\r\n            }\r\n        }\r\n\r\n        revert(\"The Stolen: unable to determine the owner of token\");\r\n    }\r\n\r\n    function _ownershipOf(uint16 tokenId)\r\n    internal\r\n    view\r\n    returns (FactionToken memory)\r\n    {\r\n        FactionToken memory ft = _factionOwnerships[tokenId];\r\n        if(ft.isBurned == 0x01){\r\n            return ft;\r\n        }\r\n\r\n        uint16 lowestToCheck;\r\n        if (tokenId >= maxBatchSize) {\r\n            lowestToCheck = tokenId - maxBatchSize + 1;\r\n        }\r\n\r\n        for (uint16 curr = tokenId; curr > lowestToCheck; curr--) {\r\n            ft = _factionOwnerships[curr];\r\n            if (curr > 0 && ft.isBurned != 0x01 && ft.owner != address(0)) {\r\n                return ft;\r\n            }\r\n        }\r\n\r\n        revert(\"The Stolen: unable to determine the owner of token\");\r\n    }\r\n\r\n    function _existed(uint16 tokenId) internal view returns (bool) {\r\n        if (tokenId == 0) {\r\n            return _flag.owner != address(0);\r\n        } else {\r\n            return tokenId < _currentIndex;\r\n        }\r\n    }\r\n\r\n    function _burned(uint16 tokenId) internal view returns (bool) {\r\n        if (tokenId == 0) {\r\n            return _flag.owner == address(0);\r\n        }\r\n        return _factionOwnerships[tokenId].isBurned == 0x01 ? true : false;\r\n    }\r\n\r\n    // INTERNAL VIEW\r\n    ///////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////\r\n    // APPROVAL\r\n\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"The Stolen: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"The Stolen: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(owner, to, uint16(tokenId));\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address to,\r\n        uint16 tokenId\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId)\r\n    public\r\n    view\r\n    override\r\n    returns (address)\r\n    {\r\n        uint16 tId = uint16(tokenId);\r\n        require(_existed(tId), \"The Stolen: approved query for nonexistent token\");\r\n        return _tokenApprovals[tId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved)\r\n    public\r\n    override\r\n    {\r\n        require(operator != _msgSender(), \"The Stolen: approve to caller\");\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint16 tokenId)\r\n    internal\r\n    view\r\n    virtual\r\n    returns (address owner, bool isApprovedOrOwner)\r\n    {\r\n        owner = ownerOf(tokenId);\r\n\r\n        require(owner != address(0), \"The Stolen: nonexistent token\");\r\n\r\n        isApprovedOrOwner = (spender == owner ||\r\n        _tokenApprovals[tokenId] == spender ||\r\n        isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    // APPROVAL\r\n    ///////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////\r\n    // TRANSFER\r\n\r\n    //Either get Flag from previous owner\r\n    //Or Transfer Faction Token\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint16 tokenId\r\n    ) private {\r\n        require(to != address(0), \"The Stolen: transfer to the zero address\");\r\n        require(from != to, \"The Stolen: transfer to the zero address\");\r\n\r\n        // Clear approvals from the previous owner\r\n\r\n        if (tokenId == 0) {\r\n            Flag memory flag = _flag;\r\n\r\n            bool isApprovedOrOwner = (_msgSender() == flag.owner ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isApprovedForAll(flag.owner, _msgSender()));\r\n\r\n            require(\r\n                isApprovedOrOwner,\r\n                \"The Stolen: transfer caller is not owner nor approved\"\r\n            );\r\n\r\n            _approve(flag.owner, address(0), tokenId);\r\n\r\n            uint8 chanceForStealing = uint8(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked((block.difficulty + block.timestamp))\r\n                    )\r\n                ) % 100\r\n            );\r\n            if (chanceForStealing < 20) {\r\n                _flag.vulnerable = 0x01;\r\n            }\r\n            _getFlag(to, 0x00);\r\n        } else {\r\n            FactionToken memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n            bool isApprovedOrOwner = (_msgSender() == prevOwnership.owner ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isApprovedForAll(prevOwnership.owner, _msgSender()));\r\n\r\n            require(\r\n                isApprovedOrOwner,\r\n                \"The Stolen: transfer caller is not owner nor approved\"\r\n            );\r\n\r\n            _transferFaction(from, to, tokenId, prevOwnership);\r\n        }\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        uint16 tId = uint16(tokenId);\r\n        (, bool isApprovedOrOwner) = _isApprovedOrOwner(_msgSender(), tId);\r\n        require(\r\n            isApprovedOrOwner,\r\n            \"The Stolen: transfer caller is not owner nor approved\"\r\n        );\r\n        _transfer(from, to, tId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public override {\r\n        transferFrom(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"The Stolen: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    ///////////////////////////////////////////////////\r\n\r\n    //Remove Faction Token from previous Owner\r\n    //Add to new Owners wallet, merge accordingly\r\n    function _transferFaction(\r\n        address prevOwner,\r\n        address newOwner,\r\n        uint16 tokenId,\r\n        FactionToken memory ft\r\n    ) private {\r\n        _removeFrom(prevOwner, tokenId, ft);\r\n\r\n        emit Transfer(prevOwner, newOwner, tokenId);\r\n\r\n        //Read Owner Data\r\n        AddressData memory no = _addressData[newOwner];\r\n        AddressID memory noID = _addressIDs[newOwner];\r\n\r\n        //save Time\r\n        if (no.hasFlag == 0x01) {\r\n            _saveOwnerTime();\r\n        }\r\n\r\n        //Merge with Existing Rogue Faction Token\r\n        if (no.hasRogue == 0x01) {\r\n            _burn(\r\n                newOwner,\r\n                no.rogueId\r\n            );\r\n            no.hasRogue = 0x00;\r\n        }\r\n\r\n        ft.owner = newOwner;\r\n\r\n        //if Wallet owns other Faction Token, merge with old Faction token\r\n        if (noID.factionBalance > 0) {\r\n            _burn(\r\n                newOwner,\r\n                noID.factionLastTokenId\r\n            );\r\n            emit Merge(newOwner, noID.factionLastTokenId);\r\n        }\r\n\r\n        //set new Rogue Faction Token or Faction Token\r\n        if (noID.factionBalance > 1) {\r\n            noID = _checkNewLast(noID, ft, noID.factionLastTokenId);\r\n\r\n            noID.factionBalance--;\r\n            no.hasRogue = 0x01;\r\n            no.rogueId = tokenId;\r\n            ft.isRogue = 0x01;\r\n\r\n            _addressIDs[newOwner] = noID;\r\n        } else {\r\n            ft.isRogue = 0x00;\r\n            noID.factionBalance = 1;\r\n            noID.factionId = ft.factionId;\r\n            _factionIDs[ft.factionId].memberCount++;\r\n\r\n            noID.factionLastTokenId = tokenId;\r\n            noID.factionTokenId = tokenId;\r\n\r\n            _addressIDs[newOwner] = noID;\r\n            if (no.hasFlag == 0x01) {\r\n                (no) = _changeFlagOwner(no, newOwner, 0x00);\r\n            }\r\n        }\r\n\r\n        //Write Owner Data and Faction Token Ownership\r\n        _addressData[newOwner] = no;\r\n\r\n        _factionOwnerships[tokenId] = ft;\r\n    }\r\n\r\n    //Remove from previous owner\r\n    //If wallet owns rogue or no further Faction Token, set wallet state accordingly\r\n    function _removeFrom(\r\n        address prevOwner,\r\n        uint16 tokenId,\r\n        FactionToken memory ft\r\n    ) private {\r\n        //Read previous Owner Data\r\n        AddressData memory po = _addressData[prevOwner];\r\n        AddressID memory poID = _addressIDs[prevOwner];\r\n\r\n        _approve(prevOwner, address(0), tokenId);\r\n\r\n        //remove from wallet\r\n        if (po.hasRogue == 0x01 && po.rogueId == tokenId) {\r\n            po.hasRogue = 0x00;\r\n        } else {\r\n            poID.factionBalance--;\r\n        }\r\n\r\n        //save Time\r\n        if (po.hasFlag == 0x01) {\r\n            _saveOwnerTime();\r\n        }\r\n\r\n        //Make Flag Factionless if no further Faction Token exist\r\n        //or set new IDs\r\n        if (poID.factionBalance == 0) {\r\n            _factionIDs[poID.factionId].memberCount--;\r\n            (poID, po) = _checkRogue(poID, po);\r\n            if (po.hasFlag == 0x01) {\r\n                (po) = _changeFlagOwner(po, prevOwner, 0x00);\r\n            }\r\n        } else {\r\n            if (tokenId == poID.factionLastTokenId) {\r\n                poID = _checkNewLast(poID, ft, tokenId);\r\n            } else {\r\n                uint16 nextId = tokenId + 1;\r\n                FactionToken memory ft2 = _factionOwnerships[nextId];\r\n                if (_existed(nextId)) {\r\n                    if (ft2.isBurned != 0x01 && ft2.owner == address(0)) {\r\n                        _factionOwnerships[nextId] = ft;\r\n                    }\r\n                }\r\n            }\r\n            if (tokenId == poID.factionTokenId) {\r\n                poID = _checkNewFirst(poID, ft, tokenId);\r\n            }\r\n        }\r\n\r\n        //Write previous Owner Data\r\n        _addressIDs[prevOwner] = poID;\r\n        _addressData[prevOwner] = po;\r\n    }\r\n\r\n    //Check For Rogue Faction token in Wallet\r\n    function _checkRogue(AddressID memory ownerID, AddressData memory ownerData)\r\n    private\r\n    returns (AddressID memory oID, AddressData memory o)\r\n    {\r\n        //Initialize Return Variables\r\n        o = ownerData;\r\n        oID = ownerID;\r\n\r\n        //If has a Rogue Faction Token, make it new Faction Token\r\n        //else set Factionless\r\n        if (o.hasRogue == 0x01) {\r\n            FactionToken memory r = _ownershipOf(o.rogueId);\r\n            oID.factionId = r.factionId;\r\n            _factionIDs[r.factionId].memberCount++;\r\n            r.isRogue = 0x00;\r\n            _factionOwnerships[o.rogueId] = r;\r\n            oID.factionTokenId = o.rogueId;\r\n            oID.factionLastTokenId = o.rogueId;\r\n            o.rogueId = 0;\r\n        } else {\r\n            o.withoutFaction = 0x01;\r\n            oID.factionLastTokenId = 0;\r\n            oID.factionTokenId = 0;\r\n            oID.factionId = 0;\r\n        }\r\n    }\r\n\r\n    function _checkNewLast(\r\n        AddressID memory ownerID,\r\n        FactionToken memory ft,\r\n        uint16 tokenId\r\n    ) private returns (AddressID memory oID) {\r\n        oID = ownerID;\r\n        uint16 prevTokenId = tokenId - 1;\r\n        if (prevTokenId != 0) {\r\n            if (prevTokenId == oID.factionTokenId) {\r\n                oID.factionLastTokenId = prevTokenId;\r\n                return oID;\r\n            }\r\n\r\n            FactionToken memory ft2 = _ownershipOf(\r\n                prevTokenId,\r\n                oID.factionTokenId\r\n            );\r\n            if (ft2.isBurned != 0x01 && ft2.owner == address(0)) {\r\n                _factionOwnerships[prevTokenId] = ft;\r\n                oID.factionLastTokenId = prevTokenId;\r\n                return oID;\r\n            } else {\r\n                for (\r\n                    uint16 curr = prevTokenId;\r\n                    curr >= oID.factionTokenId;\r\n                    curr--\r\n                ) {\r\n                    ft2 = _ownershipOf(curr, oID.factionTokenId);\r\n                    if (\r\n                        ft2.isBurned != 0x01 &&\r\n                        (ft2.owner == address(0) || ft2.owner == ft.owner)\r\n                    ) {\r\n                        _factionOwnerships[curr] = ft;\r\n                        oID.factionLastTokenId = curr;\r\n                        return oID;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        oID.factionLastTokenId = 0;\r\n        oID.factionTokenId = 0;\r\n        return oID;\r\n    }\r\n\r\n    function _checkNewFirst(\r\n        AddressID memory ownerID,\r\n        FactionToken memory ft,\r\n        uint16 tokenId\r\n    ) private returns (AddressID memory oID) {\r\n        oID = ownerID;\r\n        uint16 nextTokenId = tokenId + 1;\r\n\r\n        if (nextTokenId == oID.factionLastTokenId) {\r\n            oID.factionTokenId = nextTokenId;\r\n            return oID;\r\n        }\r\n\r\n        FactionToken memory ft2 = _ownershipOf(nextTokenId, oID.factionTokenId);\r\n        if (ft2.isBurned != 0x01 && ft2.owner == address(0)) {\r\n            _factionOwnerships[nextTokenId] = ft;\r\n            oID.factionTokenId = nextTokenId;\r\n            return oID;\r\n        } else {\r\n            for (\r\n                uint16 curr = nextTokenId;\r\n                curr <= oID.factionLastTokenId;\r\n                curr++\r\n            ) {\r\n                ft2 = _ownershipOf(curr, oID.factionTokenId);\r\n                if (\r\n                    ft2.isBurned != 0x01 &&\r\n                    (ft2.owner == address(0) || ft2.owner == ft.owner)\r\n                ) {\r\n                    _factionOwnerships[curr] = ft;\r\n                    oID.factionTokenId = curr;\r\n                    return oID;\r\n                }\r\n            }\r\n        }\r\n        oID.factionLastTokenId = 0;\r\n        oID.factionTokenId = 0;\r\n        return oID;\r\n    }\r\n\r\n    // TRANSFER\r\n    ///////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////\r\n    // MINT FACTION\r\n\r\n\r\n    //Return newly created or existing Faction (reserved restricted access)\r\n    function _addToFaction(string memory factionName) private returns (uint16) {\r\n        validateFactionName(factionName);\r\n\r\n        FactionNameId memory factionNameID = _factionNameId[factionName];\r\n        FactionID memory faction;\r\n\r\n\r\n        if (factionNameID.factionId != 0) {\r\n            _factionIDs[factionNameID.factionId].memberCount++;\r\n            faction = _factionIDs[factionNameID.factionId];\r\n            if (factionNameID.contractAddress != address(0)) {\r\n                IERC721 c = IERC721(factionNameID.contractAddress);\r\n                require(\r\n                    c.balanceOf(msg.sender) > 0,\r\n                    \"The Stolen: must own reserved faction nft\"\r\n                );\r\n            }\r\n        } else {\r\n            faction = FactionID(_currentFactionIndex, 0, factionName);\r\n            _factionNameId[factionName].factionId = _currentFactionIndex;\r\n            _currentFactionIndex++;\r\n            faction.memberCount++;\r\n            _factionIDs[faction.factionId] = faction;\r\n\r\n        }\r\n\r\n        return faction.factionId;\r\n    }\r\n\r\n    //Mint Quantity Faction Token with Faction Name\r\n    function factionMint(uint8 quantity, string memory factionName)\r\n    external\r\n    payable\r\n    isOpen\r\n    unlocked(quantity)\r\n    {\r\n        require(\r\n            msg.sender != address(0),\r\n            \"The Stolen: Mint to the zero address not supported\"\r\n        );\r\n        require(msg.sender == tx.origin, \"The Stolen: No Bot minting!\");\r\n\r\n        if (_currentIndex-1<_freeMintCount) {\r\n            require(\r\n                msg.value == mintPrice * (quantity - 1),\r\n                \"The Stolen: invalid mint price\"\r\n            );\r\n        } else {\r\n            require(msg.value == mintPrice * quantity, \"The Stolen: invalid mint price\");\r\n        }\r\n\r\n        uint16 factionId = _addToFaction(factionName);\r\n\r\n        uint16 startTokenId = _currentIndex;\r\n        uint16 endTokenId = _currentIndex + quantity;\r\n\r\n        require(quantity < maxBatchSize, \"The Stolen: quantity too high\");\r\n        require(\r\n            _addressIDs[msg.sender].hasMinted != 0x01,\r\n            \"The Stolen: address already used its chance\"\r\n        );\r\n\r\n        if(_addressIDs[msg.sender].factionBalance > 0){\r\n            uint16 lastId = _addressIDs[msg.sender].factionLastTokenId;\r\n            _burn(msg.sender,lastId);\r\n            emit Merge(msg.sender, lastId);\r\n        }\r\n\r\n\r\n        _addressIDs[msg.sender] = AddressID(\r\n            factionId,\r\n            startTokenId,\r\n            endTokenId - 1,\r\n            quantity,\r\n            0x01\r\n        );\r\n\r\n        _factionOwnerships[startTokenId] = FactionToken(\r\n            msg.sender,\r\n            factionId,\r\n            0x00,\r\n            0x00\r\n        );\r\n\r\n        for (uint16 i = startTokenId; i < endTokenId; i++) {\r\n            emit Transfer(address(0), msg.sender, i);\r\n        }\r\n\r\n        _currentIndex = endTokenId;\r\n    }\r\n\r\n    // MINT FACTION\r\n    // MINT FLAG\r\n\r\n    //Mint or Get the Flag\r\n    function huntFlag() external payable locked {\r\n        require(\r\n            msg.sender != address(0),\r\n            \"The Stolen: Mint to the zero address not supported\"\r\n        );\r\n        require(msg.sender == tx.origin, \"The Stolen: No Bot minting!\");\r\n\r\n        address currentFlagOwner = _flag.owner;\r\n\r\n        require(msg.sender != currentFlagOwner, \"The Stolen: No Self minting!\");\r\n\r\n        //If Flag is not stealable\r\n        if (!flagVulnerable()) {\r\n            uint256 currentMintPrice = (flagPrice * 11)/10;\r\n\r\n            require(msg.value == currentMintPrice, \"The Stolen: invalid get price\");\r\n            flagPrice = currentMintPrice;\r\n            //change price\r\n\r\n            //If not minting Flag\r\n            if (currentFlagOwner != address(0)) {\r\n                _getFlag(msg.sender, 0x00);\r\n            } else {\r\n                _flagLastTransferTime = block.timestamp;\r\n                _addressData[msg.sender] = _changeFlagOwner(\r\n                    _addressData[msg.sender],\r\n                    msg.sender,\r\n                    0x00\r\n                );\r\n\r\n                emit MintedFlag(msg.sender);\r\n            }\r\n        } else {\r\n            _getFlag(msg.sender, 0x01);\r\n        }\r\n    }\r\n\r\n    // MINT FLAG\r\n    ///////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////\r\n    // FLAG TRANSFER\r\n\r\n    //save last Owner Score, set new Owner with stolen variable\r\n    function _getFlag(address newOwner, bytes1 stolen) private {\r\n        _saveOwnerTime();\r\n        _flagLastTransferTime = block.timestamp;\r\n        _changeFlagOwner(newOwner, _flag.owner, stolen);\r\n    }\r\n\r\n    //save new Score, and if applicable, as Highscore and Leader score.\r\n    //sets current Leader accordingly\r\n    function _saveOwnerTime() private {\r\n        if (_flag.withoutFaction == 0x00 && _flagLastTransferTime != 1) {\r\n            uint16 fof = _flag.factionId;\r\n            uint256 currentHoldtime = _factionData[fof].currentHoldtime +\r\n            (block.timestamp - _flagLastTransferTime);\r\n\r\n            _factionData[fof].currentHoldtime = currentHoldtime;\r\n\r\n            if (_factionData[fof].highscore < currentHoldtime) {\r\n                _factionData[fof].highscore = currentHoldtime;\r\n                if (currentHoldtime > _currentLongestHoldtime) {\r\n                    _currentLongestHoldtime = currentHoldtime;\r\n                    emit NewLeader(_currentLeader, fof);\r\n                    _currentLeader = fof;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _changeFlagOwner(\r\n        AddressData memory newOwnerData,\r\n        address newOwner,\r\n        bytes1 stolen\r\n    ) private returns (AddressData memory no) {\r\n        //Read owner Data\r\n        no = newOwnerData;\r\n        //Write owner Data\r\n        (_addressData[newOwner], _addressData[_flag.owner]) = _changeFlagOwner(\r\n            no,\r\n            newOwner,\r\n            _addressData[_flag.owner],\r\n            _flag.owner,\r\n            stolen\r\n        );\r\n    }\r\n\r\n    function _changeFlagOwner(\r\n        address newOwner,\r\n        address prevOwner,\r\n        bytes1 stolen\r\n    ) private {\r\n        //Read owner Data\r\n        AddressData memory no = _addressData[newOwner];\r\n        AddressData memory po = _addressData[prevOwner];\r\n        //Write owner Data\r\n        (_addressData[newOwner], _addressData[prevOwner]) = _changeFlagOwner(\r\n            no,\r\n            newOwner,\r\n            po,\r\n            prevOwner,\r\n            stolen\r\n        );\r\n    }\r\n\r\n    function _changeFlagOwner(\r\n        AddressData memory noData,\r\n        address newOwner,\r\n        AddressData memory poData,\r\n        address prevOwner,\r\n        bytes1 stolen\r\n    ) private returns (AddressData memory no, AddressData memory po) {\r\n        //Initialize return Variables\r\n        no = noData;\r\n        po = poData;\r\n\r\n        //Read Flag\r\n        Flag memory f = _flag;\r\n\r\n        uint16 noIDFactionId = _addressIDs[newOwner].factionId;\r\n        uint16 poIDFactionId = _addressIDs[prevOwner].factionId;\r\n\r\n        //remove flag from previous owner if existent\r\n        if (prevOwner != newOwner) {\r\n            if (prevOwner != address(0)) {\r\n                po = _addressData[f.owner];\r\n\r\n                po.hasFlag = 0x00;\r\n            }\r\n\r\n            emit Transfer(_flag.owner, newOwner, 0);\r\n        }\r\n\r\n        //change Flag and Owner Data\r\n        f.factionId = noIDFactionId;\r\n        f.owner = newOwner;\r\n        no.hasFlag = 0x01;\r\n        f.vulnerable == 0x00;\r\n\r\n        //if stolen, increase count, emit event\r\n        if (stolen == 0x01) {\r\n            no.stolen++;\r\n            _factionData[poIDFactionId].stolen++;\r\n            emit GotStolen(prevOwner, newOwner);\r\n        } else {\r\n            emit GotFlag(prevOwner, newOwner);\r\n        }\r\n\r\n        //if new faction reset timer\r\n        if (noIDFactionId != poIDFactionId) {\r\n            _factionData[poIDFactionId].currentHoldtime = 0;\r\n            _factionData[noIDFactionId].currentHoldtime = 0;\r\n            emit NewFactionHolding(noIDFactionId);\r\n        }\r\n\r\n        f.withoutFaction = no.withoutFaction;\r\n\r\n        //set current faction holding\r\n        _currentFactionHolding = noIDFactionId;\r\n\r\n        //Write Flag\r\n        _flag = f;\r\n    }\r\n\r\n    // FLAG TRANSFER\r\n    ///////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////\r\n    // BURN\r\n\r\n    //Burn Faction Token except Flag\r\n    function burn(uint16 tokenId) public {\r\n        require(tokenId > 0, \"The Stolen: Shouldn't burn flag\");\r\n\r\n        FactionToken memory ft = _ownershipOf(tokenId);\r\n        require(\r\n            _existed(tokenId) && ft.isBurned != 0x01,\r\n            \"The Stolen: nonexistent or burned token\"\r\n        );\r\n\r\n        (address owner, bool isApprovedOrOwner) = _isApprovedOrOwner(\r\n            _msgSender(),\r\n            tokenId\r\n        );\r\n        require(isApprovedOrOwner, \"The Stolen: caller is not owner nor approved\");\r\n\r\n        _burn(owner, tokenId, ft);\r\n    }\r\n\r\n    //Remove Faction from owner and burn it\r\n    function _burn(\r\n        address owner,\r\n        uint16 tokenId,\r\n        FactionToken memory ft\r\n    ) internal {\r\n        _removeFrom(owner, tokenId, ft);\r\n        emit Transfer(owner, address(0), tokenId);\r\n        _burnedCount++;\r\n        ft.owner = address(0);\r\n        ft.isBurned = 0x01;\r\n\r\n        _factionOwnerships[tokenId] = ft;\r\n    }\r\n\r\n    //Remove Faction from owner and burn it\r\n    function _burn(\r\n        address owner,\r\n        uint16 tokenId\r\n    ) internal {\r\n        FactionToken memory ft = _factionOwnerships[tokenId];\r\n        _removeFrom(owner, tokenId, ft);\r\n        emit Transfer(owner, address(0), tokenId);\r\n        _burnedCount++;\r\n        ft.owner = address(0);\r\n        ft.isBurned = 0x01;\r\n\r\n        _factionOwnerships[tokenId] = ft;\r\n    }\r\n\r\n    // BURN\r\n    ///////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////\r\n    // TOKENURI\r\n\r\n    function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n    {\r\n        if (tokenId == 0) {\r\n            uint16 factionId = _flag.factionId;\r\n            string memory factionName = _flag.withoutFaction != 0x01\r\n            ? _factionIDs[factionId].name\r\n            : \"\";\r\n            return stolenImage.flagTokenURI(factionName, getCurrentHoldtime());\r\n        } else {\r\n            uint16 tId = uint16(tokenId);\r\n            require(_existed(tId) && !_burned(tId), \"The Stolen: nonexistent token\");\r\n\r\n            uint16 factionId = _ownershipOf(tId).factionId;\r\n\r\n            AddressData memory data = _addressData[_ownershipOf(tId).owner];\r\n\r\n            FactionData memory fdata = _factionData[factionId];\r\n\r\n            ITheStolenGenerator.FactionImage memory factionImageData;\r\n            factionImageData.fillFaction = factionId ==\r\n            _currentFactionHolding &&\r\n            _flag.withoutFaction != 0x01;\r\n            factionImageData.fillOwner = _ownershipOf(tId).owner ==\r\n            _flag.owner &&\r\n            _flag.withoutFaction != 0x01;\r\n            factionImageData.owner = _ownershipOf(tId).owner;\r\n            factionImageData.fillHighscore = _currentLeader == factionId;\r\n            factionImageData.factionName = _factionIDs[factionId].name;\r\n            factionImageData.highscore = fdata.highscore;\r\n            factionImageData.member = _factionIDs[factionId].memberCount;\r\n            factionImageData.factionSteals = fdata.stolen;\r\n            factionImageData.steals = data.stolen;\r\n            factionImageData.current = factionId == _currentFactionHolding &&\r\n            _flag.withoutFaction != 0x01\r\n            ? getCurrentHoldtime()\r\n            : 0;\r\n\r\n            return stolenImage.factionTokenURI(factionImageData);\r\n        }\r\n    }\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    // TOKENURI\r\n    ///////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////\r\n    // OWNER FUNCTIONS\r\n\r\n    function collectFees() external onlyOwner nonReentrant {\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"The Stolen: Transfer failed.\");\r\n    }\r\n\r\n\r\n    function lockFactionMint() external onlyOwner {\r\n        _locked = 0x01;\r\n    }\r\n\r\n    function startFactionMint(address imageContract) external onlyOwner {\r\n        setImageContract(imageContract);\r\n        _mintStarttime = block.timestamp;\r\n        _open = 0x01;\r\n    }\r\n\r\n    // OWNER FUNCTIONS\r\n    ///////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n            IERC721Receiver(to).onERC721Received(\r\n                _msgSender(),\r\n                from,\r\n                tokenId,\r\n                _data\r\n            )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\r\n                    \"The Stolen: transfer to non ERC721Receiver implementer\"\r\n                    );\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxBatchSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"GotFlag\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"GotStolen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTokenId\",\"type\":\"uint256\"}],\"name\":\"Merge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintedFlag\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newHolding\",\"type\":\"uint16\"}],\"name\":\"NewFactionHolding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"prevLeader\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newLeader\",\"type\":\"uint16\"}],\"name\":\"NewLeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quantity\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"factionName\",\"type\":\"string\"}],\"name\":\"factionMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factionMintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flagMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flagReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flagVulnerable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeMintLeft\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getAddressData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"factionId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"factionTokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"factionLastTokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"factionBalance\",\"type\":\"uint8\"},{\"internalType\":\"bytes1\",\"name\":\"hasMinted\",\"type\":\"bytes1\"}],\"internalType\":\"struct TheStolen.AddressID\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"hasRogue\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"hasFlag\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"withoutFaction\",\"type\":\"bytes1\"},{\"internalType\":\"uint16\",\"name\":\"rogueId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stolen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"switchedFaction\",\"type\":\"uint256\"}],\"internalType\":\"struct TheStolen.AddressData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentHoldtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"factionId\",\"type\":\"uint16\"}],\"name\":\"getFactionData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"factionId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"memberCount\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct TheStolen.FactionID\",\"name\":\"id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stolen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentHoldtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highscore\",\"type\":\"uint256\"}],\"internalType\":\"struct TheStolen.FactionData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"factionId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct TheStolen.FactionNameId\",\"name\":\"nameId\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderFactionId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeaderHoldtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeaderName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"factionId\",\"type\":\"uint16\"},{\"internalType\":\"bytes1\",\"name\":\"isRogue\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"isBurned\",\"type\":\"bytes1\"}],\"internalType\":\"struct TheStolen.FactionToken\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"huntFlag\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFactionMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"imageContract\",\"type\":\"address\"}],\"name\":\"startFactionMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"validateFactionName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "TheStolen", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000a5468652053746f6c656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c46616374696f6e20506173730000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d71c1a24fc97d871223e893bc4c89598ec7adaa057e41e8a7dfaf26358c6453f"}]}