{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: No License (None)\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC223TokenCloned {\r\n    // initialize cloned token just for ERC223TokenCloned\r\n    function initialize(address newOwner, string calldata name, string calldata symbol, uint8 decimals) external;\r\n    function mint(address user, uint256 amount) external;\r\n    function burnFrom(address account, uint256 amount) external returns(bool);\r\n    function burn(uint256 amount) external returns(bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ncontract ContractCaller {\r\n    using TransferHelper for address;\r\n    address constant MAX_NATIVE_COINS = address(31); // addresses from address(1) to MAX_NATIVE_COINS are considered as native coins \r\n\r\n    event RescuedTokens(address token, address to, uint256 balance);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == address(0x6A56D0f7498C9f2AEb9Bb6892Ade5b2E0A50379F), \"Only owner\"); // owner multisig\r\n        _;\r\n    }\r\n\r\n    modifier onlyBridge() {\r\n        require(msg.sender == address(0x9a1fc8C0369D49f3040bF49c1490E7006657ea56), \"Only bridge\"); // Bridge contract address\r\n        _;\r\n    }\r\n\r\n    function tokenReceived(address _from, uint _value, bytes calldata _data) external {\r\n        require(_from == address(0x9a1fc8C0369D49f3040bF49c1490E7006657ea56), \"Only from bridge\"); // Bridge contract address\r\n    }\r\n    \r\n    function rescueTokens(address token, address to) external onlyOwner {\r\n        uint256 balance;\r\n        if (token == address(0)) {\r\n            balance = address(this).balance;\r\n            to.safeTransferETH(balance);\r\n        } else {\r\n            balance = IERC223TokenCloned(token).balanceOf(address(this));\r\n            token.safeTransfer(to, balance);\r\n        }\r\n        emit RescuedTokens(token, to, balance);\r\n    }\r\n\r\n    function callContract(address user, address token, uint256 value, address toContract, bytes memory data) external payable onlyBridge {\r\n        if (token <= MAX_NATIVE_COINS) {\r\n            value = msg.value;\r\n            uint balanceBefore = address(this).balance - value; // balance before\r\n            (bool success,) = toContract.call{value: value}(data);\r\n            if (success) value = address(this).balance - balanceBefore; // check, if we have some rest of token\r\n            if (value != 0) user.safeTransferETH(value);  // send coin to user\r\n        } else {\r\n            token.safeApprove(toContract, value);\r\n            (bool success,) = toContract.call{value: 0}(data);\r\n            if (success) value = IERC223TokenCloned(token).allowance(address(this), toContract); // unused amount (the rest) = allowance\r\n            if (value != 0) {   // if not all value used reset approvement\r\n                token.safeApprove(toContract, 0);\r\n                token.safeTransfer(user, value);   // send to user rest of tokens\r\n            }                \r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"RescuedTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ContractCaller", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a1c6829ec6c52e4212af1bc5d9b442f94136f1b330995a27472bff8b976c1a7"}]}