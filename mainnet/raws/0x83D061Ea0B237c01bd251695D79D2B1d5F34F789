{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155).interfaceId\\n            || interfaceId == type(IERC1155MetadataURI).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/MemberLounge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n//-----------------------------------------------------------------------------\\n// geneticchain.io - NextGen Generative NFT Platform\\n//-----------------------------------------------------------------------------\\n /*\\\\_____________________________________________________________   .\u00bfyy\u00bf.   __\\n MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM```````/MMM\\\\\\\\\\\\\\\\\\\\  \\\\\\\\$$$$$$S/  .\\n MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM``   `/  yyyy    ` _____J$$$^^^^/%#//\\n MMMMMMMMMMMMMMMMMMMYYYMMM````      `\\\\/  .\u00bfy\u00fc  /  $\u00f9p\u00fc\u00fc\u00fc%%% | ``|//|` __\\n MMMMMYYYYMMMMMMM/`     `| ___.\u00bfy\u00fcy\u00bf.  .d$$$$  /  $$$$SSSSM |   | ||  MMNNNNNNM\\n M/``      ``\\\\/`  .\u00bf\u00f9%%/.  |.d$$$$$$$b.$$$*\u00b0^  /  o$$$  __  |   | ||  MMMMMMMMM\\n M   .\u00bfyy\u00bf.     .dX$$$$$$7.|$$$$\\\"^\\\"$$$$$$o`  /MM  o$$$  MM  |   | ||  MMYYYYYYM\\n   \\\\\\\\$$$$$$S/  .S$$o\\\"^\\\"4$$$$$$$` _ `SSSSS\\\\        ____  MM  |___|_||  MM  ____\\n  J$$$^^^^/%#//oSSS`    YSSSSSS  /  pyyy\u00fc\u00fc\u00fc%%%XXX\u00d9$$$$  MM  pyyyyyyy, `` ,$$$o\\n .$$$` ___     pyyyyyyyyyyyy//+  /  $$$$$$SSSSSSS\u00d9M$$$. `` .S&&T$T$$$byyd$$$$\\\\\\n \\\\$$7  ``     //o$$SSXMMSSSS  |  /  $$/&&X  _  ___ %$$$byyd$$$X\\\\$`/S$$$$$$$S\\\\\\n o$$l   .\\\\\\\\YS$$X>$X  _  ___|  |  /  $$/%$$b.,.d$$$\\\\`7$$$$$$$$7`.$   `\\\"***\\\"`  __\\n o$$l  __  7$$$X>$$b.,.d$$$\\\\  |  /  $$.`7$$$$$$$$%`  `*+SX+*|_\\\\\\\\$  /.     ..\\\\MM\\n o$$L  MM  !$$$$\\\\$$$$$$$$$%|__|  /  $$// `*+XX*\\\\'`  `____           ` `/MMMMMMM\\n /$$X, `` ,S$$$$\\\\ `*+XX*\\\\'`____  /  %SXX .      .,   NERV   ___.\u00bfy\u00fcy\u00bf.   /MMMMM\\n  7$$$byyd$$$>$X\\\\  .,,_    $$$$  `    ___ .y%%\u00fc\u00bf.  _______  $.d$$$$$$$S.  `MMMM\\n  `/S$$$$$$$\\\\\\\\$J`.\\\\\\\\$$$ :  $\\\\`.\u00bfy\u00fcy\u00bf. `\\\\\\\\  $$$$$$S.//XXSSo  $$$$$\\\"^\\\"$$$$.  /MMM\\n y   `\\\"**\\\"`\\\"Xo$7J$$$$$\\\\    $.d$$$$$$$b.    ^``/$$$$.`$$$$o  $$$$\\\\ _ 'SSSo  /MMM\\n M/.__   .,\\\\Y$$$\\\\\\\\$$O` _/  $d$$$*\u00b0\\\\ pyyy\u00fc\u00fc\u00fc%%%W $$$o.$$$$/  S$$$. `  S$To   MMM\\n MMMM`  \\\\$P*$$X+ b$$l  MM  $$$$` _  $$$$$$SSSSM $$$X.$T&&X  o$$$. `  S$To   MMM\\n MMMX`  $<.\\\\X\\\\` -X$$l  MM  $$$$  /  $$/&&X      X$$$/$/X$$dyS$$>. `  S$X%/  `MM\\n MMMM/   `\\\"`  . -$$$l  MM  yyyy  /  $$/%$$b.__.d$$$$/$.'7$$$$$$$. `  %SXXX.  MM\\n MMMMM//   ./M  .<$$S, `` ,S$$>  /  $$.`7$$$$$$$$$$$/S//_'*+%%XX\\\\ `._       /MM\\n MMMMMMMMMMMMM\\\\  /$$$$byyd$$$$\\\\  /  $$// `*+XX+*XXXX      ,.      .\\\\MMMMMMMMMMM\\n GENETIC/MMMMM\\\\.  /$$$$$$$$$$\\\\|  /  %SXX  ,_  .      .\\\\MMMMMMMMMMMMMMMMMMMMMMMM\\n CHAIN/MMMMMMMM/__  `*+YY+*`_\\\\|  /_______//MMMMMMMMMMMMMMMMMMMMMMMMMMM/-/-/-\\\\*/\\n//-----------------------------------------------------------------------------\\n// Genetic Chain: Member Lounge\\n//-----------------------------------------------------------------------------\\n// Author: papaver (@tronicdreams)\\n//-----------------------------------------------------------------------------\\n\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\n//------------------------------------------------------------------------------\\n// GeneticChainMetadata\\n//------------------------------------------------------------------------------\\n\\n/**\\n * @title GeneticChain - MemberLounge\\n */\\ncontract MemberLounge is ERC1155, IERC721Receiver,\\n    Ownable\\n{\\n\\n    //-------------------------------------------------------------------------\\n    // structs\\n    //-------------------------------------------------------------------------\\n\\n    struct Token {\\n        uint16 passList;\\n        uint56 maxSupply;\\n        uint56 totalSupply;\\n        int64 minStakeTime;\\n        int64 createdTS;\\n    }\\n\\n    struct Pass {\\n        uint8 passId;\\n        uint16 tokenId;\\n        int64 stakedTS;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // events\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * Emited when a new token is created.\\n     */\\n    event TokenCreated(uint256 tokenId, uint16 passList, uint56 maxSupply,\\n        int64 minStakeTime, int64 createdTS);\\n\\n    /**\\n     * Emited when a new pass is staked.\\n     */\\n    event Staked(address indexed owner, address pass, uint256 tokenId, int64 stakedTS);\\n\\n    /**\\n     * Emited when a new pass is staked.\\n     */\\n    event Unstaked(address indexed owner, address pass, uint256 tokenId);\\n\\n    /**\\n     * Emited when a reward is claimed.\\n     */\\n    event RewardsClaimed(address indexed owner, uint256 tokenId, uint256 amount);\\n\\n    //-------------------------------------------------------------------------\\n    // constants\\n    //-------------------------------------------------------------------------\\n\\n    address constant kDeadAddy = 0x000000000000000000000000000000000000dEaD;\\n\\n    // token name/symbol\\n    string constant private _name   = \\\"Genetic Chain Member Lounge\\\";\\n    string constant private _symbol = \\\"GCML\\\";\\n\\n    // contract info\\n    string public _contractUri;\\n\\n    //-------------------------------------------------------------------------\\n    // fields\\n    //-------------------------------------------------------------------------\\n\\n    // track tokens\\n    Token[] private _tokens;\\n\\n    // handle token uri overrides\\n    mapping (uint256 => string) private _ipfsHash;\\n\\n    // roles\\n    mapping (address => bool) private _minterAddress;\\n    mapping (address => bool) private _burnerAddress;\\n\\n    // staking\\n    IERC721[] private _passes;\\n    mapping (address => uint8) private _passIdx;\\n    mapping (address => Pass[]) private _stakedPasses;\\n\\n    // claim\\n    mapping (uint256 => bool) private _claims;\\n\\n    //-------------------------------------------------------------------------\\n    // ctor\\n    //-------------------------------------------------------------------------\\n\\n    constructor(\\n        string memory baseUri,\\n        string memory contractUri,\\n        address[] memory passes)\\n        ERC1155(baseUri)\\n    {\\n        // start token index at 1\\n        _tokens.push();\\n\\n        // start pass index at 1 else we can't use 0 index to indicate\\n        //  an invalid pass inside _passIdx\\n        _passes.push();\\n\\n        // save contract uri\\n        _contractUri = contractUri;\\n\\n        // register passes\\n        for (uint256 i = 0; i < passes.length; ++i) {\\n            _registerPassContract(passes[i]);\\n        }\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // modifiers\\n    //-------------------------------------------------------------------------\\n\\n    modifier validTokenId(uint256 tokenId) {\\n        require(_created(tokenId), \\\"invalid token\\\");\\n        _;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n\\t/**\\n     * Verify caller is authorized minter.\\n     */\\n    modifier isMinter() {\\n        require(_minterAddress[_msgSender()] || owner() == _msgSender(), \\\"caller not minter\\\");\\n        _;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n\\t/**\\n     * Verify caller is authorized burner.\\n     */\\n    modifier isBurner() {\\n        require(_burnerAddress[_msgSender()], \\\"caller not burner\\\");\\n        _;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // internal\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Returns whether the specified token was created.\\n     */\\n    function _created(uint256 id)\\n        internal view\\n        returns (bool)\\n    {\\n        return id < _tokens.length && _tokens[id].createdTS > 0;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Returns whether the specified token has supply.\\n     */\\n    function _exists(uint256 id)\\n        internal view\\n        returns (bool)\\n    {\\n        return id < _tokens.length && _tokens[id].totalSupply > 0;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    function _registerPassContract(address pass)\\n        internal\\n    {\\n        require(IERC165(pass).supportsInterface(type(IERC721).interfaceId), \\\"not IERC721 compliant\\\");\\n        _passIdx[pass] = uint8(_passes.length);\\n        _passes.push(IERC721(pass));\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    function _mkClaimId(address claimee, uint256 tokenId)\\n        internal pure\\n        returns(uint256)\\n    {\\n        return uint256(uint160(claimee)) << 96 | tokenId;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    function _inPassList(uint8 passId, uint16 passList)\\n        internal pure\\n        returns(bool)\\n    {\\n        return passList & uint16(1 << (passId - 1)) != 0;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    function _calculateRewards(address claimee, uint256 tokenId)\\n        internal view\\n        returns(uint256 rewards)\\n    {\\n        // token to calculate rewards for\\n        Token storage token = _tokens[tokenId];\\n\\n        // claim rewards for passes staked long enough\\n        uint256 stakedCount = _stakedPasses[claimee].length;\\n        for (uint256 i = 0; i < stakedCount; ++i) {\\n            Pass storage stakedPass = _stakedPasses[claimee][i];\\n            int64 timeElapsed = token.createdTS - stakedPass.stakedTS;\\n            if (timeElapsed >= token.minStakeTime\\n                && _inPassList(stakedPass.passId, token.passList))\\n            {\\n                rewards += 1;\\n            }\\n        }\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // ERC165\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public view virtual override(ERC1155)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC721Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // ERC1155\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev See {ERC1155-_mint}.\\n     */\\n    function _mint(\\n            address account, uint256 id, uint256 amount, bytes memory data)\\n        internal virtual override validTokenId(id)\\n    {\\n        super._mint(account, id, amount, data);\\n        _tokens[id].totalSupply += uint56(amount);\\n        require(_tokens[id].totalSupply <= _tokens[id].maxSupply,\\n            'amount exceed maxsupply');\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev See {ERC1155-_mintBatch}.\\n     */\\n    function _mintBatch(\\n            address to, uint256[] memory ids, uint256[] memory amounts,\\n            bytes memory data)\\n        internal virtual override\\n    {\\n        super._mintBatch(to, ids, amounts, data);\\n\\n        unchecked {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                require(_created(id), 'invalid token');\\n                _tokens[id].totalSupply += uint56(amounts[i]);\\n                require(_tokens[id].totalSupply <= _tokens[id].maxSupply,\\n                    'amount exceed maxsupply');\\n            }\\n        }\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev See {ERC1155-_burn}.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount)\\n        internal virtual override validTokenId(id)\\n    {\\n        super._burn(account, id, amount);\\n\\n        unchecked {\\n            _tokens[id].totalSupply -= uint56(amount);\\n        }\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev See {ERC1155-_burnBatch}.\\n     */\\n    function _burnBatch(\\n            address account, uint256[] memory ids, uint256[] memory amounts)\\n        internal virtual override\\n    {\\n        super._burnBatch(account, ids, amounts);\\n\\n        unchecked {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                _tokens[id].totalSupply -= uint56(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     *  Each token should have it's own override.\\n     */\\n    function uri(uint256 id)\\n        public view override validTokenId(id)\\n        returns (string memory)\\n    {\\n        // append hash or use base\\n        return bytes(_ipfsHash[id]).length == 0\\n            ? super.uri(id)\\n            : string(abi.encodePacked(super.uri(id), \\\"/\\\", _ipfsHash[id]));\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // admin\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * Authorize minter address.\\n     */\\n    function registerMinterAddress(address minter)\\n        public onlyOwner\\n    {\\n        require(!_minterAddress[minter], \\\"address already registered\\\");\\n        _minterAddress[minter] = true;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * Remove minter address.\\n     */\\n    function revokeMinterAddress(address minter)\\n        public onlyOwner\\n    {\\n        require(_minterAddress[minter], \\\"address not registered\\\");\\n        delete _minterAddress[minter];\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * Authorize burner address.\\n     */\\n    function registerBurnerAddress(address burner)\\n        public onlyOwner\\n    {\\n        require(!_burnerAddress[burner], \\\"address already registered\\\");\\n        _burnerAddress[burner] = true;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * Remove burner address.\\n     */\\n    function revokeBurnerAddress(address burner)\\n        public onlyOwner\\n    {\\n        require(_burnerAddress[burner], \\\"address not registered\\\");\\n        delete _burnerAddress[burner];\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Update default tokenUri used for all tokens.\\n     *\\n     * Should use the `\\\\{id\\\\}` replace mechanism to load the token id.\\n     */\\n    function setURI(string memory tokenUri)\\n        public onlyOwner\\n    {\\n        _setURI(tokenUri);\\n        emit URI(tokenUri, 0);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Override token's ipfs hash.\\n     */\\n    function setTokenIpfsHash(uint256 id, string memory ipfsHash)\\n        public onlyOwner validTokenId(id)\\n    {\\n        _ipfsHash[id] = ipfsHash;\\n        emit URI(uri(id), id);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Override token's pass list.\\n     */\\n    function setTokenPassList(uint256 id, uint16 passList)\\n        public onlyOwner validTokenId(id)\\n    {\\n        _tokens[id].passList = passList;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Override token's max supply.\\n     */\\n    function setTokenMaxSupply(uint256 id, uint56 maxSupply)\\n        public onlyOwner validTokenId(id)\\n    {\\n        require(maxSupply >= _tokens[id].totalSupply, 'max must exceed total');\\n        _tokens[id].maxSupply = maxSupply;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Override token's minimum stake time.\\n     */\\n    function setTokenMinStakeTime(uint256 id, int64 minStakeTime)\\n        public onlyOwner validTokenId(id)\\n    {\\n        _tokens[id].minStakeTime = minStakeTime;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Override token's minimum stake time.\\n     */\\n    function editToken(uint256 id, uint16 passList, uint56 maxSupply,\\n            int64 minStakeTime, string memory ipfsHash)\\n        public onlyOwner validTokenId(id)\\n    {\\n        require(maxSupply >= _tokens[id].totalSupply, 'max must exceed total');\\n        _tokens[id].passList     = passList;\\n        _tokens[id].maxSupply    = maxSupply;\\n        _tokens[id].minStakeTime = minStakeTime;\\n\\n        _ipfsHash[id] = ipfsHash;\\n        emit URI(uri(id), id);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Create a new token.\\n     * @param passList uint16 Passes eligible for reward.\\n     * @param amount uint256 Mint amount tokens to caller.\\n     * @param minStakeTime int64 Minimum time pass stake required to qualify\\n     * @param maxSupply uint56 Max mintable supply for this token.\\n     * @param ipfsHash string Override ipfsHash for newly created token.\\n     */\\n    function create(uint16 passList, uint256 amount, uint56 maxSupply,\\n            int64 minStakeTime, string memory ipfsHash)\\n        public onlyOwner\\n    {\\n        require(amount > 0, 'invalid amount');\\n        require(bytes(ipfsHash).length > 0, 'invalid ipfshash');\\n\\n        // grab token id\\n        uint256 tokenId = _tokens.length;\\n\\n        // add token\\n        int64 createdAt    = int64(int256(block.timestamp));\\n        Token memory token = Token(passList, maxSupply, 0, minStakeTime, createdAt);\\n        _tokens.push(token);\\n\\n        // override token's ipfsHash\\n        _ipfsHash[tokenId] = ipfsHash;\\n        emit URI(uri(tokenId), tokenId);\\n\\n        // mint a single token\\n        _mint(msg.sender, tokenId, amount, \\\"\\\");\\n\\n        // created event\\n        emit TokenCreated(tokenId, passList, maxSupply, minStakeTime, createdAt);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    function mint(address to, uint256 id, uint256 amount)\\n        public isMinter\\n    {\\n        require(amount > 0, 'invalid amount');\\n        _mint(to, id, amount, \\\"\\\");\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    function mintBatch(address to,\\n            uint256[] calldata ids, uint256[] calldata amounts)\\n        external isMinter\\n    {\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    function burn(address to, uint256 id, uint256 amount)\\n        public isBurner\\n    {\\n        require(amount > 0, 'invalid amount');\\n        _burn(to, id, amount);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    function burnBatch(address to,\\n            uint256[] calldata ids, uint256[] calldata amounts)\\n        external isBurner\\n    {\\n        _burnBatch(to, ids, amounts);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // accessors\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Conform to {IERC721Metadata-name}.\\n     */\\n    function name()\\n        public pure\\n        returns (string memory)\\n    {\\n        return _name;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Conform to {IERC721Metadata-symbol}.\\n     */\\n    function symbol()\\n        public pure\\n        returns (string memory)\\n    {\\n        return _symbol;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id)\\n        public view\\n        returns (uint256)\\n    {\\n        return id < _tokens.length\\n            ? _tokens[id].totalSupply\\n            : 0;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // IERC721Receiver\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(\\n            address, address, uint256, bytes calldata)\\n        public pure override\\n        returns (bytes4)\\n    {\\n        return this.onERC721Received.selector ^ 0x23b872dd;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // interface\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Return token info.\\n     */\\n    function getToken(uint256 id)\\n        public view validTokenId(id)\\n        returns (Token memory, string memory)\\n    {\\n        return (_tokens[id], _ipfsHash[id]);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Return list of all tokens.\\n     */\\n    function allTokens()\\n        public view\\n        returns (Token[] memory)\\n    {\\n        // return empty so all token indecies line up\\n        return _tokens;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Return list of pass contracts.\\n     */\\n    function allPassContracts()\\n        public view\\n        returns (address[] memory)\\n    {\\n        // keep the first empty entry so index lines up with id\\n        uint256 count = _passes.length;\\n        address[] memory passes = new address[](count);\\n        for (uint256 i = 0; i < count; ++i) {\\n            passes[i] = address(_passes[i]);\\n        }\\n        return passes;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Return list of passes staked by staker.\\n     */\\n    function getStakedPasses(address staker)\\n        public view\\n        returns (Pass[] memory stakedPasses)\\n    {\\n        stakedPasses = _stakedPasses[staker];\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Query pass for owners balance.\\n     */\\n    function balanceOfPass(address pass, address owner)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(_passIdx[pass] != 0, 'invalid pass address');\\n\\n        // grab pass\\n        uint8 passId    = _passIdx[pass];\\n        IERC721 pass721 = _passes[passId];\\n\\n        // return pass balance\\n        return pass721.balanceOf(owner);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Stake single pass.\\n     */\\n    function stakePass(address pass, uint256 tokenId)\\n        public\\n    {\\n        require(_passIdx[pass] != 0, 'invalid pass address');\\n\\n        address sender = _msgSender();\\n\\n        // grab pass\\n        uint8 passId    = _passIdx[pass];\\n        IERC721 pass721 = _passes[passId];\\n\\n        // verify ownership\\n        require(pass721.ownerOf(tokenId) == sender, 'not pass owner');\\n\\n        // transfer here\\n        pass721.transferFrom(sender, address(this), tokenId);\\n\\n        // save staked info\\n        int64 stakedTS = int64(int256(block.timestamp));\\n        Pass memory stakedPass = Pass(\\n            passId,\\n            uint16(tokenId),\\n            stakedTS);\\n        _stakedPasses[sender].push(stakedPass);\\n\\n        // track skate event\\n        emit Staked(sender, pass, tokenId, stakedTS);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Unstake single pass.\\n     */\\n    function unstakePass(address pass, uint256 tokenId)\\n        public\\n    {\\n        require(_passIdx[pass] != 0, 'invalid pass address');\\n\\n        address sender = _msgSender();\\n\\n        // grab pass\\n        uint8 passId    = _passIdx[pass];\\n        IERC721 pass721 = _passes[passId];\\n\\n        // find pass\\n        uint256 stakedCount = _stakedPasses[sender].length;\\n        for (uint256 i = 0; i < stakedCount; ++i) {\\n            Pass storage stakedPass = _stakedPasses[sender][i];\\n            if (stakedPass.passId == passId && stakedPass.tokenId == tokenId) {\\n\\n                // transfer pass back to owner\\n                pass721.transferFrom(address(this), sender, tokenId);\\n\\n                // keep array compact\\n                uint256 lastIndex = stakedCount - 1;\\n                if (i != lastIndex) {\\n                    _stakedPasses[sender][i] = _stakedPasses[sender][lastIndex];\\n                }\\n\\n                // cleanup\\n                _stakedPasses[sender].pop();\\n\\n                // track unskate event\\n                emit Unstaked(sender, pass, tokenId);\\n\\n                // no need to continue\\n                return;\\n            }\\n        }\\n\\n        // invalid pass\\n        require(false, 'pass not found');\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Unstake all passes staked in contract.\\n     */\\n    function unstakeAllPasses()\\n        public\\n    {\\n        address sender = _msgSender();\\n        require(_stakedPasses[sender].length > 0, 'no passes staked');\\n\\n        // unstake all passes\\n        uint256 stakedCount = _stakedPasses[sender].length;\\n        for (uint256 i = 0; i < stakedCount; ++i) {\\n            Pass storage stakedPass = _stakedPasses[sender][i];\\n            IERC721 pass721         = _passes[stakedPass.passId];\\n\\n            // transfer pass back to owner\\n            pass721.transferFrom(address(this), sender, stakedPass.tokenId);\\n\\n            // track unskate event\\n            emit Unstaked(sender, address(pass721), stakedPass.tokenId);\\n\\n            // cleanup\\n            delete _stakedPasses[sender][i];\\n        }\\n\\n        // cleanup\\n        delete _stakedPasses[sender];\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * Calculate rewards available for user for given tokenId.\\n     */\\n    function calculateRewards(uint256 tokenId, address user)\\n        public view validTokenId(tokenId)\\n        returns(uint256)\\n    {\\n        uint256 claimId = _mkClaimId(user, tokenId);\\n        return _claims[claimId]\\n            ? 0\\n            : _calculateRewards(user, tokenId);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    function calculateRewardsBatch(uint256[] memory tokenIds, address user)\\n        public view\\n        returns(uint256[] memory)\\n    {\\n        uint256 count = tokenIds.length;\\n        uint256[] memory rewards = new uint256[](count);\\n        for (uint256 i = 0; i < count; ++i) {\\n            rewards[i] = calculateRewards(tokenIds[i], user);\\n        }\\n        return rewards;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Claim single token for all passes.\\n     */\\n    function claim(uint256 tokenId)\\n        public validTokenId(tokenId)\\n    {\\n        address sender = _msgSender();\\n        require(_stakedPasses[sender].length > 0, 'no passes staked');\\n\\n        // check claim\\n        uint256 claimId = _mkClaimId(sender, tokenId);\\n        require(!_claims[claimId], 'rewards claimed');\\n\\n        // process all passes\\n        uint256 rewards = _calculateRewards(sender, tokenId);\\n        require(rewards > 0, 'no rewards');\\n\\n        // mark as claimed\\n        _claims[claimId] = true;\\n\\n        // mint token for claimee\\n        _mint(sender, tokenId, rewards, \\\"\\\");\\n\\n        // record event\\n        emit RewardsClaimed(sender, tokenId, rewards);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Claim multiple tokens at once.\\n     */\\n    function claimBatch(uint256[] calldata tokenIds)\\n        public\\n    {\\n        require(tokenIds.length > 0, 'no token ids');\\n        uint256 tokenCount = tokenIds.length;\\n        for (uint256 i = 0; i < tokenCount; ++i) {\\n            claim(tokenIds[i]);\\n        }\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    function setContractURI(string memory contractUri)\\n        external onlyOwner\\n    {\\n        _contractUri = contractUri;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n\\n    function contractURI()\\n        public view\\n        returns (string memory)\\n    {\\n        return _contractUri;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractUri\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"passes\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"stakedTS\",\"type\":\"int64\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"passList\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint56\",\"name\":\"maxSupply\",\"type\":\"uint56\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"minStakeTime\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"createdTS\",\"type\":\"int64\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_contractUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPassContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"passList\",\"type\":\"uint16\"},{\"internalType\":\"uint56\",\"name\":\"maxSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint56\",\"name\":\"totalSupply\",\"type\":\"uint56\"},{\"internalType\":\"int64\",\"name\":\"minStakeTime\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"createdTS\",\"type\":\"int64\"}],\"internalType\":\"struct MemberLounge.Token[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfPass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateRewardsBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"passList\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint56\",\"name\":\"maxSupply\",\"type\":\"uint56\"},{\"internalType\":\"int64\",\"name\":\"minStakeTime\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"passList\",\"type\":\"uint16\"},{\"internalType\":\"uint56\",\"name\":\"maxSupply\",\"type\":\"uint56\"},{\"internalType\":\"int64\",\"name\":\"minStakeTime\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"editToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakedPasses\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"passId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"int64\",\"name\":\"stakedTS\",\"type\":\"int64\"}],\"internalType\":\"struct MemberLounge.Pass[]\",\"name\":\"stakedPasses\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"passList\",\"type\":\"uint16\"},{\"internalType\":\"uint56\",\"name\":\"maxSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint56\",\"name\":\"totalSupply\",\"type\":\"uint56\"},{\"internalType\":\"int64\",\"name\":\"minStakeTime\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"createdTS\",\"type\":\"int64\"}],\"internalType\":\"struct MemberLounge.Token\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"registerBurnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"registerMinterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"revokeBurnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"revokeMinterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractUri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"setTokenIpfsHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint56\",\"name\":\"maxSupply\",\"type\":\"uint56\"}],\"name\":\"setTokenMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"int64\",\"name\":\"minStakeTime\",\"type\":\"int64\"}],\"name\":\"setTokenMinStakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"passList\",\"type\":\"uint16\"}],\"name\":\"setTokenPassList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pass\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakePass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAllPasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pass\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakePass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MemberLounge", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000002168747470733a2f2f697066732e67656e65746963636861696e2e696f2f6970667300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005068747470733a2f2f697066732e67656e65746963636861696e2e696f2f697066732f516d526544645155797a54784b6350564b4c6f3961315a715742705048475878473535736169706b5258426f4553000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000e6c5bc36214d9a09b208f397fe47bd421a5e02d9000000000000000000000000321b125cf85b0e9fbcf6554a71adb10d8138388a000000000000000000000000f91180a67a2c607523b5e32f98732d8cddd6538a000000000000000000000000a9833d5d3ff75a32709a8da2e66a7df9d2c83aa00000000000000000000000001bc2f28fb7e3be8b5905541a90e4312a9976ace1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}