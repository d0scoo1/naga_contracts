{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.19;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract CompanyTest is Ownable {\r\n    address public owner;\r\n\r\n    uint public largestStake;\r\n\r\n    function purchaseStake() public payable {\r\n        // if you own a largest stake in a company, you own a company\r\n        if (msg.value > largestStake) {\r\n            owner = msg.sender;\r\n            largestStake = msg.value;\r\n        }\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        // only owner can withdraw funds\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"purchaseStake\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largestStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CompanyTest", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f9ef853d13284f002acdb3c6ca0e678c2d64a0e0513971f82bb7cba8958c0e65"}]}