{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-02-27\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n\tbytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n\t */\r\n\tfunction toString(uint256 value) internal pure returns (string memory) {\r\n\t\t// Inspired by OraclizeAPI's implementation - MIT licence\r\n\t\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 digits;\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\tbytes memory buffer = new bytes(digits);\r\n\t\twhile (value != 0) {\r\n\t\t\tdigits -= 1;\r\n\t\t\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\t\t\tvalue /= 10;\r\n\t\t}\r\n\t\treturn string(buffer);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n\t */\r\n\tfunction toHexString(uint256 value) internal pure returns (string memory) {\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0x00\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 length = 0;\r\n\t\twhile (temp != 0) {\r\n\t\t\tlength++;\r\n\t\t\ttemp >>= 8;\r\n\t\t}\r\n\t\treturn toHexString(value, length);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n\t */\r\n\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n\t\tbytes memory buffer = new bytes(2 * length + 2);\r\n\t\tbuffer[0] = \"0\";\r\n\t\tbuffer[1] = \"x\";\r\n\t\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\r\n\t\t\tbuffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n\t\t\tvalue >>= 4;\r\n\t\t}\r\n\t\trequire(value == 0, \"Strings: hex length insufficient\");\r\n\t\treturn string(buffer);\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n\t/**\r\n\t * @dev Returns true if this contract implements the interface defined by\r\n\t * `interfaceId`. See the corresponding\r\n\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n\t * to learn more about how these ids are created.\r\n\t *\r\n\t * This function call must use less than 30 000 gas.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n\t// Booleans are more expensive than uint256 or any type that takes up a full\r\n\t// word because each write operation emits an extra SLOAD to first read the\r\n\t// slot's contents, replace the bits taken up by the boolean, and then write\r\n\t// back. This is the compiler's defense against contract upgrades and\r\n\t// pointer aliasing, and it cannot be disabled.\r\n\r\n\t// The values being non-zero value makes deployment a bit more expensive,\r\n\t// but in exchange the refund on every call to nonReentrant will be lower in\r\n\t// amount. Since refunds are capped to a percentage of the total\r\n\t// transaction's gas, it is best to keep them low in cases like this one, to\r\n\t// increase the likelihood of the full refund coming into effect.\r\n\tuint256 private constant _NOT_ENTERED = 1;\r\n\tuint256 private constant _ENTERED = 2;\r\n\r\n\tuint256 private _status;\r\n\r\n\tconstructor() {\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Prevents a contract from calling itself, directly or indirectly.\r\n\t * Calling a `nonReentrant` function from another `nonReentrant`\r\n\t * function is not supported. It is possible to prevent this from happening\r\n\t * by making the `nonReentrant` function external, and making it call a\r\n\t * `private` function that does the actual work.\r\n\t */\r\n\tmodifier nonReentrant() {\r\n\t\t// On the first call to nonReentrant, _notEntered will be true\r\n\t\trequire(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n\t\t// Any calls to nonReentrant after this point will fail\r\n\t\t_status = _ENTERED;\r\n\r\n\t\t_;\r\n\r\n\t\t// By storing the original value once again, a refund is triggered (see\r\n\t\t// https://eips.ethereum.org/EIPS/eip-2200)\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n\tenum RecoverError {\r\n\t\tNoError,\r\n\t\tInvalidSignature,\r\n\t\tInvalidSignatureLength,\r\n\t\tInvalidSignatureS,\r\n\t\tInvalidSignatureV\r\n\t}\r\n\r\n\tfunction _throwError(RecoverError error) private pure {\r\n\t\tif (error == RecoverError.NoError) {\r\n\t\t\treturn; // no error: do nothing\r\n\t\t} else if (error == RecoverError.InvalidSignature) {\r\n\t\t\trevert(\"ECDSA: invalid signature\");\r\n\t\t} else if (error == RecoverError.InvalidSignatureLength) {\r\n\t\t\trevert(\"ECDSA: invalid signature length\");\r\n\t\t} else if (error == RecoverError.InvalidSignatureS) {\r\n\t\t\trevert(\"ECDSA: invalid signature 's' value\");\r\n\t\t} else if (error == RecoverError.InvalidSignatureV) {\r\n\t\t\trevert(\"ECDSA: invalid signature 'v' value\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address that signed a hashed message (`hash`) with\r\n\t * `signature` or error string. This address can then be used for verification purposes.\r\n\t *\r\n\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n\t * this function rejects them by requiring the `s` value to be in the lower\r\n\t * half order, and the `v` value to be either 27 or 28.\r\n\t *\r\n\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n\t * verification to be secure: it is possible to craft signatures that\r\n\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n\t * this is by receiving a hash of the original message (which may otherwise\r\n\t * be too long), and then calling {toEthSignedMessageHash} on it.\r\n\t *\r\n\t * Documentation for signature generation:\r\n\t * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n\t * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n\t\t// Check the signature length\r\n\t\t// - case 65: r,s,v signature (standard)\r\n\t\t// - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n\t\tif (signature.length == 65) {\r\n\t\t\tbytes32 r;\r\n\t\t\tbytes32 s;\r\n\t\t\tuint8 v;\r\n\t\t\t// ecrecover takes the signature parameters, and the only way to get them\r\n\t\t\t// currently is to use assembly.\r\n\t\t\tassembly {\r\n\t\t\t\tr := mload(add(signature, 0x20))\r\n\t\t\t\ts := mload(add(signature, 0x40))\r\n\t\t\t\tv := byte(0, mload(add(signature, 0x60)))\r\n\t\t\t}\r\n\t\t\treturn tryRecover(hash, v, r, s);\r\n\t\t} else if (signature.length == 64) {\r\n\t\t\tbytes32 r;\r\n\t\t\tbytes32 vs;\r\n\t\t\t// ecrecover takes the signature parameters, and the only way to get them\r\n\t\t\t// currently is to use assembly.\r\n\t\t\tassembly {\r\n\t\t\t\tr := mload(add(signature, 0x20))\r\n\t\t\t\tvs := mload(add(signature, 0x40))\r\n\t\t\t}\r\n\t\t\treturn tryRecover(hash, r, vs);\r\n\t\t} else {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignatureLength);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address that signed a hashed message (`hash`) with\r\n\t * `signature`. This address can then be used for verification purposes.\r\n\t *\r\n\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n\t * this function rejects them by requiring the `s` value to be in the lower\r\n\t * half order, and the `v` value to be either 27 or 28.\r\n\t *\r\n\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n\t * verification to be secure: it is possible to craft signatures that\r\n\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n\t * this is by receiving a hash of the original message (which may otherwise\r\n\t * be too long), and then calling {toEthSignedMessageHash} on it.\r\n\t */\r\n\tfunction recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n\t\t(address recovered, RecoverError error) = tryRecover(hash, signature);\r\n\t\t_throwError(error);\r\n\t\treturn recovered;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n\t *\r\n\t * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction tryRecover(\r\n\t\tbytes32 hash,\r\n\t\tbytes32 r,\r\n\t\tbytes32 vs\r\n\t) internal pure returns (address, RecoverError) {\r\n\t\tbytes32 s;\r\n\t\tuint8 v;\r\n\t\tassembly {\r\n\t\t\ts := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n\t\t\tv := add(shr(255, vs), 27)\r\n\t\t}\r\n\t\treturn tryRecover(hash, v, r, s);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n\t *\r\n\t * _Available since v4.2._\r\n\t */\r\n\tfunction recover(\r\n\t\tbytes32 hash,\r\n\t\tbytes32 r,\r\n\t\tbytes32 vs\r\n\t) internal pure returns (address) {\r\n\t\t(address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n\t\t_throwError(error);\r\n\t\treturn recovered;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n\t * `r` and `s` signature fields separately.\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction tryRecover(\r\n\t\tbytes32 hash,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) internal pure returns (address, RecoverError) {\r\n\t\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n\t\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n\t\t// the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n\t\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n\t\t//\r\n\t\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n\t\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n\t\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n\t\t// these malleable signatures as well.\r\n\t\tif (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignatureS);\r\n\t\t}\r\n\t\tif (v != 27 && v != 28) {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignatureV);\r\n\t\t}\r\n\r\n\t\t// If the signature is valid (and not malleable), return the signer address\r\n\t\taddress signer = ecrecover(hash, v, r, s);\r\n\t\tif (signer == address(0)) {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignature);\r\n\t\t}\r\n\r\n\t\treturn (signer, RecoverError.NoError);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n\t * `r` and `s` signature fields separately.\r\n\t */\r\n\tfunction recover(\r\n\t\tbytes32 hash,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) internal pure returns (address) {\r\n\t\t(address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n\t\t_throwError(error);\r\n\t\treturn recovered;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n\t * produces hash corresponding to the one signed with the\r\n\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n\t * JSON-RPC method as part of EIP-191.\r\n\t *\r\n\t * See {recover}.\r\n\t */\r\n\tfunction toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n\t\t// 32 is the length in bytes of hash,\r\n\t\t// enforced by the type signature above\r\n\t\treturn keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n\t * produces hash corresponding to the one signed with the\r\n\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n\t * JSON-RPC method as part of EIP-191.\r\n\t *\r\n\t * See {recover}.\r\n\t */\r\n\tfunction toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns an Ethereum Signed Typed Data, created from a\r\n\t * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n\t * to the one signed with the\r\n\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n\t * JSON-RPC method as part of EIP-712.\r\n\t *\r\n\t * See {recover}.\r\n\t */\r\n\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n\t/**\r\n\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n\t/**\r\n\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n\t/**\r\n\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n\t */\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\t/**\r\n\t * @dev Returns the number of tokens in ``owner``'s account.\r\n\t */\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n\t/**\r\n\t * @dev Returns the owner of the `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Transfers `tokenId` token from `from` to `to`.\r\n\t *\r\n\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must be owned by `from`.\r\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n\t * The approval is cleared when the token is transferred.\r\n\t *\r\n\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The caller must own the token or be an approved operator.\r\n\t * - `tokenId` must exist.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\r\n\t/**\r\n\t * @dev Returns the account approved for `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n\t/**\r\n\t * @dev Approve or remove `operator` as an operator for the caller.\r\n\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The `operator` cannot be the caller.\r\n\t *\r\n\t * Emits an {ApprovalForAll} event.\r\n\t */\r\n\tfunction setApprovalForAll(address operator, bool _approved) external;\r\n\r\n\t/**\r\n\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n\t *\r\n\t * See {setApprovalForAll}\r\n\t */\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes calldata data\r\n\t) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Internal function without access restriction.\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\ncontract WastedWorld is Ownable, ReentrancyGuard {\r\n\tuint256 public constant SECONDS_IN_DAY = 24 * 60 * 60;\r\n\tuint256 public constant ACCELERATED_YIELD_DAYS = 2;\r\n\tuint256 public constant ACCELERATED_YIELD_MULTIPLIER = 2;\r\n\tuint256 public acceleratedYield;\r\n\r\n\taddress public signerAddress;\r\n\taddress[] public authorisedLog;\r\n\r\n\tbool public stakingLaunched;\r\n\tbool public depositPaused;\r\n\r\n\tstruct Staker {\r\n\t  uint256 currentYield;\r\n\t  uint256 accumulatedAmount;\r\n\t  uint256 lastCheckpoint;\r\n\t}\r\n\r\n\tmapping(address => bool) isWWNftContract;\r\n\tmapping(address => mapping(address => uint256[])) stakedTokensForAddress;\r\n\tmapping(address => uint256) public _baseRates;\r\n\tmapping(address => Staker) private _stakers;\r\n\tmapping(address => mapping(uint256 => address)) private _ownerOfToken;\r\n\tmapping(address => mapping(uint256 => uint256)) private _tokensMultiplier;\r\n\tmapping(address => bool) private _authorised;\r\n\r\n\tevent Deposit(address indexed staker,address contractAddress,uint256 tokensAmount);\r\n\tevent Withdraw(address indexed staker,address contractAddress,uint256 tokensAmount);\r\n\tevent AutoDeposit(address indexed contractAddress,uint256 tokenId,address indexed owner);\r\n\tevent WithdrawStuckERC721(address indexed receiver, address indexed tokenAddress, uint256 indexed tokenId);\r\n\r\n\tconstructor(\r\n\t  address _pre,\r\n\t  address _signer\r\n\t) {\r\n\t\t_baseRates[_pre] = 4200 ether;\r\n\t\tisWWNftContract[_pre] = true;\r\n\r\n\t\tsignerAddress = _signer;\r\n\t}\r\n\r\n\tmodifier authorised() {\r\n\t  require(_authorised[_msgSender()], \"The token contract is not authorised\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction deposit(\r\n\t  address contractAddress,\r\n\t  uint256[] memory tokenIds,\r\n\t  uint256[] memory tokenTraits,\r\n\t  bytes calldata signature\r\n\t) public nonReentrant {\r\n\t  require(!depositPaused, \"Deposit paused\");\r\n\t  require(stakingLaunched, \"Staking is not launched yet\");\r\n\t  require(\r\n\t\tcontractAddress != address(0) &&\r\n\t\tisWWNftContract[contractAddress],\r\n\t\t\"Unknown contract\"\r\n\t  );\r\n\r\n\t  if (tokenTraits.length > 0) {\r\n\t\trequire(_validateSignature(\r\n\t\t  signature,\r\n\t\t  contractAddress,\r\n\t\t  tokenIds,\r\n\t\t  tokenTraits\r\n\t\t), \"Invalid data provided\");\r\n\t\t_setTokensValues(contractAddress, tokenIds, tokenTraits);\r\n\t  }\r\n\r\n\t  Staker storage user = _stakers[_msgSender()];\r\n\t  uint256 newYield = user.currentYield;\r\n\r\n\t  for (uint256 i; i < tokenIds.length; i++) {\r\n\t\trequire(IERC721(contractAddress).ownerOf(tokenIds[i]) == _msgSender(), \"Not the owner\");\r\n\t\tIERC721(contractAddress).safeTransferFrom(_msgSender(), address(this), tokenIds[i]);\r\n\r\n\t\t_ownerOfToken[contractAddress][tokenIds[i]] = _msgSender();\r\n\r\n\t\tnewYield += getTokenYield(contractAddress, tokenIds[i]);\r\n\t\tstakedTokensForAddress[_msgSender()][contractAddress].push(tokenIds[i]);\r\n\t  }\r\n\r\n\t  accumulate(_msgSender());\r\n\t  user.currentYield = newYield;\r\n\r\n\t  emit Deposit(_msgSender(), contractAddress, tokenIds.length);\r\n\t}\r\n\r\n\tfunction withdraw(\r\n\t  address contractAddress,\r\n\t  uint256[] memory tokenIds\r\n\t) public nonReentrant {\r\n\t  require(\r\n\t\tcontractAddress != address(0) &&\r\n\t\tisWWNftContract[contractAddress],\r\n\t\t\"Unknown contract\"\r\n\t  );\r\n\t  Staker storage user = _stakers[_msgSender()];\r\n\t  uint256 newYield = user.currentYield;\r\n\r\n\t  for (uint256 i; i < tokenIds.length; i++) {\r\n\t\trequire(IERC721(contractAddress).ownerOf(tokenIds[i]) == address(this), \"Not the owner\");\r\n\r\n\t\t_ownerOfToken[contractAddress][tokenIds[i]] = address(0);\r\n\r\n\t\tif (user.currentYield != 0) {\r\n\t\t  uint256 tokenYield = getTokenYield(contractAddress, tokenIds[i]);\r\n\t\t  newYield -= tokenYield;\r\n\t\t}\r\n\r\n\t\tstakedTokensForAddress[_msgSender()][contractAddress] = _moveTokenInTheList(stakedTokensForAddress[_msgSender()][contractAddress], tokenIds[i]);\r\n\t\tstakedTokensForAddress[_msgSender()][contractAddress].pop();\r\n\r\n\t\tIERC721(contractAddress).safeTransferFrom(address(this), _msgSender(), tokenIds[i]);\r\n\t  }\r\n\r\n\t  accumulate(_msgSender());\r\n\t  user.currentYield = newYield;\r\n\r\n\t  emit Withdraw(_msgSender(), contractAddress, tokenIds.length);\r\n\t}\r\n\r\n\tfunction registerDeposit(address owner, address contractAddress, uint256 tokenId) public authorised {\r\n\t  require(\r\n\t\tcontractAddress != address(0) &&\r\n\t\tisWWNftContract[contractAddress],\r\n\t\t\"Unknown contract\"\r\n\t  );\r\n\t  require(IERC721(contractAddress).ownerOf(tokenId) == address(this), \"!Owner\");\r\n\t  require(ownerOf(contractAddress, tokenId) == address(0), \"Already deposited\");\r\n\r\n\t  _ownerOfToken[contractAddress][tokenId] = owner;\r\n\r\n\t  Staker storage user = _stakers[owner];\r\n\t  uint256 newYield = user.currentYield;\r\n\r\n\t  newYield += getTokenYield(contractAddress, tokenId);\r\n\t  stakedTokensForAddress[owner][contractAddress].push(tokenId);\r\n\r\n\t  accumulate(owner);\r\n\t  user.currentYield = newYield;\r\n\r\n\t  emit AutoDeposit(contractAddress, tokenId, _msgSender());\r\n\t}\r\n\r\n\tfunction getAccumulatedAmount(address staker) external view returns (uint256) {\r\n\t  return _stakers[staker].accumulatedAmount + getCurrentReward(staker);\r\n\t}\r\n\r\n\tfunction getTokenYield(address contractAddress, uint256 tokenId) public view returns (uint256) {\r\n\t  uint256 tokenYield = _tokensMultiplier[contractAddress][tokenId];\r\n\t  if (tokenYield == 0) { tokenYield = _baseRates[contractAddress]; }\r\n\r\n\t  return tokenYield;\r\n\t}\r\n\r\n\tfunction getStakerYield(address staker) public view returns (uint256) {\r\n\t  return _stakers[staker].currentYield;\r\n\t}\r\n\r\n\tfunction getStakerTokens(address staker, address contractAddress) public view returns (uint256[] memory) {\r\n\t  return (stakedTokensForAddress[staker][contractAddress]);\r\n\t}\r\n\r\n\tfunction isMultiplierSet(address contractAddress, uint256 tokenId) public view returns (bool) {\r\n\t  return _tokensMultiplier[contractAddress][tokenId] > 0;\r\n\t}\r\n\r\n\tfunction _moveTokenInTheList(uint256[] memory list, uint256 tokenId) internal pure returns (uint256[] memory) {\r\n\t  uint256 tokenIndex = 0;\r\n\t  uint256 lastTokenIndex = list.length - 1;\r\n\t  uint256 length = list.length;\r\n\r\n\t  for(uint256 i = 0; i < length; i++) {\r\n\t\tif (list[i] == tokenId) {\r\n\t\t  tokenIndex = i + 1;\r\n\t\t  break;\r\n\t\t}\r\n\t  }\r\n\t  require(tokenIndex != 0, \"msg.sender is not the owner\");\r\n\r\n\t  tokenIndex -= 1;\r\n\r\n\t  if (tokenIndex != lastTokenIndex) {\r\n\t\tlist[tokenIndex] = list[lastTokenIndex];\r\n\t\tlist[lastTokenIndex] = tokenId;\r\n\t  }\r\n\r\n\t  return list;\r\n\t}\r\n\r\n\tfunction _validateSignature(\r\n\t  bytes calldata signature,\r\n\t  address contractAddress,\r\n\t  uint256[] memory tokenIds,\r\n\t  uint256[] memory tokenTraits\r\n\t  ) internal view returns (bool) {\r\n\t  bytes32 dataHash = keccak256(abi.encodePacked(contractAddress, tokenIds, tokenTraits));\r\n\t  bytes32 message = ECDSA.toEthSignedMessageHash(dataHash);\r\n\r\n\t  address receivedAddress = ECDSA.recover(message, signature);\r\n\t  return (receivedAddress != address(0) && receivedAddress == signerAddress);\r\n\t}\r\n\r\n\tfunction _setTokensValues(\r\n\t  address contractAddress,\r\n\t  uint256[] memory tokenIds,\r\n\t  uint256[] memory tokenTraits\r\n\t) internal {\r\n\t  require(tokenIds.length == tokenTraits.length, \"Wrong arrays provided\");\r\n\t  for (uint256 i; i < tokenIds.length; i++) {\r\n\t\tif (tokenTraits[i] != 0 && tokenTraits[i] <= 8000 ether) {\r\n\t\t  _tokensMultiplier[contractAddress][tokenIds[i]] = tokenTraits[i];\r\n\t\t}\r\n\t  }\r\n\t}\r\n\r\n\tfunction getCurrentReward(address staker) public view returns (uint256) {\r\n\t  Staker memory user = _stakers[staker];\r\n\t  if (user.lastCheckpoint == 0) { return 0; }\r\n\t  if (user.lastCheckpoint < acceleratedYield && block.timestamp < acceleratedYield) {\r\n\t\treturn (block.timestamp - user.lastCheckpoint) * user.currentYield / SECONDS_IN_DAY * ACCELERATED_YIELD_MULTIPLIER;\r\n\t  }\r\n\t  if (user.lastCheckpoint < acceleratedYield && block.timestamp > acceleratedYield) {\r\n\t\tuint256 currentReward;\r\n\t\tcurrentReward += (acceleratedYield - user.lastCheckpoint) * user.currentYield / SECONDS_IN_DAY * ACCELERATED_YIELD_MULTIPLIER;\r\n\t\tcurrentReward += (block.timestamp - acceleratedYield) * user.currentYield / SECONDS_IN_DAY;\r\n\t\treturn currentReward;\r\n\t  }\r\n\t  return (block.timestamp - user.lastCheckpoint) * user.currentYield / SECONDS_IN_DAY;\r\n\t}\r\n\r\n\tfunction accumulate(address staker) internal {\r\n\t  _stakers[staker].accumulatedAmount += getCurrentReward(staker);\r\n\t  _stakers[staker].lastCheckpoint = block.timestamp;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns token owner address (returns address(0) if token is not inside the gateway)\r\n\t*/\r\n\tfunction ownerOf(address contractAddress, uint256 tokenId) public view returns (address) {\r\n\t  return _ownerOfToken[contractAddress][tokenId];\r\n\t}\r\n\r\n\tfunction addNFTContract(address _contract, uint256 _baseReward) public onlyOwner {\r\n\t  _baseRates[_contract] = _baseReward;\r\n\t  isWWNftContract[_contract] = true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Admin function to authorise the contract address\r\n\t*/\r\n\tfunction authorise(address toAuth) public onlyOwner {\r\n\t  _authorised[toAuth] = true;\r\n\t  authorisedLog.push(toAuth);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function allows admin add unauthorised address.\r\n\t*/\r\n\tfunction unauthorise(address addressToUnAuth) public onlyOwner {\r\n\t  _authorised[addressToUnAuth] = false;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function allows admin withdraw ERC721 in case of emergency.\r\n\t*/\r\n\tfunction emergencyWithdraw(address tokenAddress, uint256[] memory tokenIds) public onlyOwner {\r\n\t  require(tokenIds.length <= 50, \"50 is max per tx\");\r\n\t  pauseDeposit(true);\r\n\t  for (uint256 i; i < tokenIds.length; i++) {\r\n\t\taddress receiver = _ownerOfToken[tokenAddress][tokenIds[i]];\r\n\t\tif (receiver != address(0) && IERC721(tokenAddress).ownerOf(tokenIds[i]) == address(this)) {\r\n\t\t  IERC721(tokenAddress).transferFrom(address(this), receiver, tokenIds[i]);\r\n\t\t  emit WithdrawStuckERC721(receiver, tokenAddress, tokenIds[i]);\r\n\t\t}\r\n\t  }\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function allows to pause deposits if needed. Withdraw remains active.\r\n\t*/\r\n\tfunction pauseDeposit(bool _pause) public onlyOwner {\r\n\t  depositPaused = _pause;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function allows to pause deposits if needed. Withdraw remains active.\r\n\t*/\r\n\tfunction updateSignerAddress(address _signer) public onlyOwner {\r\n\t  signerAddress = _signer;\r\n\t}\r\n\r\n\tfunction launchStaking() public onlyOwner {\r\n\t  require(!stakingLaunched, \"Staking has been launched already\");\r\n\t  stakingLaunched = true;\r\n\t  acceleratedYield = block.timestamp + (SECONDS_IN_DAY * ACCELERATED_YIELD_DAYS);\r\n\t}\r\n\r\n\tfunction updateBaseYield(address _contract, uint256 _yield) public onlyOwner {\r\n\t  _baseRates[_contract] = _yield;\r\n\t}\r\n\r\n\tfunction onERC721Received(address, address, uint256, bytes calldata) external pure returns(bytes4){\r\n\t  return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pre\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AutoDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC721\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCELERATED_YIELD_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ACCELERATED_YIELD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_baseRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceleratedYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseReward\",\"type\":\"uint256\"}],\"name\":\"addNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAuth\",\"type\":\"address\"}],\"name\":\"authorise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorisedLog\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenTraits\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getAccumulatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getCurrentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getStakerTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakerYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isMultiplierSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"registerDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToUnAuth\",\"type\":\"address\"}],\"name\":\"unauthorise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"}],\"name\":\"updateBaseYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"updateSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WastedWorld", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000757f0e9e8a4f84650ae94caab516a00fd7fb29610000000000000000000000006831e66fa0c5b029c6a8501cda601fe944e21652", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e4b7936020d0a6411cbc668375dd1efcd2a18da27e0af14cfd44211d465e5606"}]}