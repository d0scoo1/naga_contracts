{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/metastreet/AnteMetaStreetVaultSolvencyTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../AnteTest.sol\\\";\\n\\ninterface IVaultAbridged {\\n    enum TrancheId {\\n        Senior,\\n        Junior\\n    }\\n\\n    function trancheState(TrancheId trancheId)\\n        external\\n        view\\n        returns (\\n            uint256 realizedValue,\\n            uint256 estimatedValue,\\n            uint256 pendingRedemptions,\\n            uint256 redemptionQueue,\\n            uint256 processedRedemptionQueue,\\n            uint256 depositSharePrice,\\n            uint256 redemptionSharePrice_\\n        );\\n}\\n\\n// @title MetaStreet Vault Junior Tranche Solvency Test\\n// @notice Ante Test to check if a MetaStreet Vault's junior tranche is solvent\\ncontract AnteMetaStreetVaultSolvencyTest is AnteTest(\\\"Ensure that a MetaStreet Vault's Junior Tranche is solvent\\\") {\\n    IVaultAbridged private vault;\\n\\n    constructor(address _vault) {\\n        protocolName = \\\"MetaStreet\\\";\\n        testedContracts.push(_vault);\\n\\n        vault = IVaultAbridged(_vault);\\n    }\\n\\n    // @notice Check if a Vault's junior tranche is solvent\\n    // @return true if Vault's junior tranche is solvent, otherwise false\\n    function checkTestPasses() external view override returns (bool) {\\n        (uint256 realizedValue, , uint256 pendingRedemptions, , , , ) = vault.trancheState(\\n            IVaultAbridged.TrancheId.Junior\\n        );\\n\\n        return realizedValue >= pendingRedemptions;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AnteTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u2517\u2501\u251b\u2503\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u2501\u2513\u250f\u2513\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\\n// \u2503\u250f\u2501\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2523\u252b\u2503\u250f\u2513\u2513\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2513\u2513\u2503\u250f\u2501\u251b\u2503\u250f\u2513\u2503\\n// \u2503\u2503 \u2503\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u252b\u2501\u250f\u2513\u2501\u2503\u2503\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u251b\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u2503\u2503\u2501\u252b\\n// \u2517\u251b \u2517\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u251b\u2501\u2517\u251b\u2501\u2501\u2501\u2517\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./interfaces/IAnteTest.sol\\\";\\n\\n/// @title Ante V0.5 Ante Test smart contract\\n/// @notice Abstract inheritable contract that supplies syntactic sugar for writing Ante Tests\\n/// @dev Usage: contract YourAnteTest is AnteTest(\\\"String descriptor of test\\\") { ... }\\nabstract contract AnteTest is IAnteTest {\\n    /// @inheritdoc IAnteTest\\n    address public override testAuthor;\\n    /// @inheritdoc IAnteTest\\n    string public override testName;\\n    /// @inheritdoc IAnteTest\\n    string public override protocolName;\\n    /// @inheritdoc IAnteTest\\n    address[] public override testedContracts;\\n\\n    /// @dev testedContracts and protocolName are optional parameters which should\\n    /// be set in the constructor of your AnteTest\\n    /// @param _testName The name of the Ante Test\\n    constructor(string memory _testName) {\\n        testAuthor = msg.sender;\\n        testName = _testName;\\n    }\\n\\n    /// @notice Returns the testedContracts array of addresses\\n    /// @return The list of tested contracts as an array of addresses\\n    function getTestedContracts() external view returns (address[] memory) {\\n        return testedContracts;\\n    }\\n\\n    /// @inheritdoc IAnteTest\\n    function checkTestPasses() external virtual override returns (bool) {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAnteTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u2517\u2501\u251b\u2503\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u2501\u2513\u250f\u2513\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\\n// \u2503\u250f\u2501\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2523\u252b\u2503\u250f\u2513\u2513\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2513\u2513\u2503\u250f\u2501\u251b\u2503\u250f\u2513\u2503\\n// \u2503\u2503 \u2503\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u252b\u2501\u250f\u2513\u2501\u2503\u2503\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u251b\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u2503\u2503\u2501\u252b\\n// \u2517\u251b \u2517\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u251b\u2501\u2517\u251b\u2501\u2501\u2501\u2517\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\npragma solidity >=0.7.0;\\n\\n/// @title The interface for the Ante V0.5 Ante Test\\n/// @notice The Ante V0.5 Ante Test wraps test logic for verifying fundamental invariants of a protocol\\ninterface IAnteTest {\\n    /// @notice Returns the author of the Ante Test\\n    /// @dev This overrides the auto-generated getter for testAuthor as a public var\\n    /// @return The address of the test author\\n    function testAuthor() external view returns (address);\\n\\n    /// @notice Returns the name of the protocol the Ante Test is testing\\n    /// @dev This overrides the auto-generated getter for protocolName as a public var\\n    /// @return The name of the protocol in string format\\n    function protocolName() external view returns (string memory);\\n\\n    /// @notice Returns a single address in the testedContracts array\\n    /// @dev This overrides the auto-generated getter for testedContracts [] as a public var\\n    /// @param i The array index of the address to return\\n    /// @return The address of the i-th element in the list of tested contracts\\n    function testedContracts(uint256 i) external view returns (address);\\n\\n    /// @notice Returns the name of the Ante Test\\n    /// @dev This overrides the auto-generated getter for testName as a public var\\n    /// @return The name of the Ante Test in string format\\n    function testName() external view returns (string memory);\\n\\n    /// @notice Function containing test logic to inspect the protocol invariant\\n    /// @dev This should usually return True\\n    /// @return A single bool indicating if the Ante Test passes/fails\\n    function checkTestPasses() external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"checkTestPasses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTestedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAuthor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AnteMetaStreetVaultSolvencyTest", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002542549517ee2dd58e550db22a104a05035e5016", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}