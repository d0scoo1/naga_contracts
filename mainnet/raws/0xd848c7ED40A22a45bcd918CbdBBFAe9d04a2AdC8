{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/eth/SwitchViewEth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"./SwitchRootEth.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract SwitchViewEth is SwitchRootEth {\\n    using UniversalERC20 for IERC20;\\n    using UniswapExchangeLib for IUniswapExchange;\\n    function(CalculateArgs memory args) view returns(uint256[] memory)[PATHS_COUNT] pathFunctions = [\\n        calculate,\\n        calculateETH\\n    ];\\n\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts\\n    )\\n    public\\n    override\\n    view\\n    returns(\\n        uint256 returnAmount,\\n        uint256[] memory distribution\\n    )\\n    {\\n        (returnAmount, distribution) = _getExpectedReturn(\\n            ReturnArgs({\\n            fromToken: fromToken,\\n            destToken: destToken,\\n            amount: amount,\\n            parts: parts\\n            })\\n        );\\n    }\\n\\n    function _getExpectedReturn(\\n        ReturnArgs memory returnArgs\\n    )\\n    internal\\n    view\\n    returns(\\n        uint256 returnAmount,\\n        uint256[] memory mergedDistribution\\n    )\\n    {\\n        uint256[] memory distribution = new uint256[](DEXES_COUNT*PATHS_COUNT*PATHS_SPLIT);\\n        mergedDistribution = new uint256[](DEXES_COUNT*PATHS_COUNT);\\n\\n        if (returnArgs.fromToken == returnArgs.destToken) {\\n            return (returnArgs.amount, distribution);\\n        }\\n\\n        int256[][] memory matrix = new int256[][](DEXES_COUNT*PATHS_COUNT*PATHS_SPLIT);\\n        bool atLeastOnePositive = false;\\n        for (uint l = 0; l < DEXES_COUNT; l++) {\\n            uint256[] memory rets;\\n            for (uint m = 0; m < PATHS_COUNT; m++) {\\n                for (uint k = 0; k < PATHS_SPLIT; k++) {\\n                    uint256 i = l*PATHS_COUNT*PATHS_SPLIT+m*PATHS_SPLIT+k;\\n                    rets = pathFunctions[m](CalculateArgs({\\n                        fromToken:returnArgs.fromToken,\\n                        destToken:returnArgs.destToken,\\n                        factory:IUniswapFactory(factories[l]),\\n                        amount:returnArgs.amount,\\n                        parts:returnArgs.parts\\n                    }));\\n\\n                    // Prepend zero\\n                    matrix[i] = new int256[](returnArgs.parts + 1);\\n                    for (uint j = 0; j < rets.length; j++) {\\n                        matrix[i][j + 1] = int256(rets[j]);\\n                        atLeastOnePositive = atLeastOnePositive || (matrix[i][j + 1] > 0);\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (!atLeastOnePositive) {\\n            for (uint i = 0; i < DEXES_COUNT*PATHS_COUNT*PATHS_SPLIT;) {\\n                for (uint j = 1; j < returnArgs.parts + 1; j++) {\\n                    if (matrix[i][j] == 0) {\\n                        matrix[i][j] = VERY_NEGATIVE_VALUE;\\n                    }\\n                }\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n\\n        (, distribution) = _findBestDistribution(returnArgs.parts, matrix);\\n\\n        returnAmount = _getReturnByDistribution(Args({\\n            fromToken: returnArgs.fromToken,\\n            destToken: returnArgs.destToken,\\n            amount: returnArgs.amount,\\n            parts: returnArgs.parts,\\n            distribution: distribution,\\n            matrix: matrix,\\n            pathFunctions: pathFunctions,\\n            dexes: factories\\n        })\\n        );\\n        for (uint i = 0; i < DEXES_COUNT*PATHS_COUNT*PATHS_SPLIT;) {\\n            mergedDistribution[i/PATHS_SPLIT] += distribution[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return (returnAmount, mergedDistribution);\\n    }\\n\\n    struct Args {\\n        IERC20 fromToken;\\n        IERC20 destToken;\\n        uint256 amount;\\n        uint256 parts;\\n        uint256[] distribution;\\n        int256[][] matrix;\\n        function(CalculateArgs memory) view returns(uint256[] memory)[PATHS_COUNT] pathFunctions;\\n        IUniswapFactory[DEXES_COUNT] dexes;\\n    }\\n\\n    function _getReturnByDistribution(\\n        Args memory args\\n    ) internal view returns(uint256 returnAmount) {\\n        bool[DEXES_COUNT*PATHS_COUNT*PATHS_SPLIT] memory exact = [\\n        true,  // \\\"Uniswap\\\"\\n        true,  // \\\"Uniswap (WETH)\\\"\\n        true,  // \\\"Uniswap\\\"\\n        true,  // \\\"Uniswap (WETH)\\\"\\n        true, // Sushiswap\\n        true, // Sushiswap (WETH)\\n        true, // Sushiswap\\n        true, // Sushiswap (WETH)\\n        true, // Shibaswap\\n        true, // Shibaswap (WETH)\\n        true, // Shibaswap\\n        true // Shibaswap (WETH)\\n        ];\\n\\n        for (uint i = 0; i < DEXES_COUNT*PATHS_COUNT*PATHS_SPLIT;) {\\n            if (args.distribution[i] > 0) {\\n                if (args.distribution[i] == args.parts || exact[i]) {\\n                    int256 value = args.matrix[i][args.distribution[i]];\\n                    returnAmount += uint256(\\n                            (value == VERY_NEGATIVE_VALUE ? int256(0) : value)\\n                        );\\n                }\\n                else {\\n                    uint256[] memory rets = args.pathFunctions[(i/PATHS_SPLIT)%PATHS_COUNT](CalculateArgs({\\n                    fromToken: args.fromToken,\\n                    destToken: args.destToken,\\n                    factory: args.dexes[i/(PATHS_COUNT*PATHS_SPLIT)],\\n                    amount: args.amount * args.distribution[i] / args.parts,\\n                    parts: 1\\n                    }));\\n                    returnAmount += rets[0];\\n                }\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    // View Helpers\\n\\n    struct Balances {\\n        uint256 src;\\n        uint256 dst;\\n    }\\n\\n\\n\\n    function _linearInterpolation100(\\n        uint256 value,\\n        uint256 parts\\n    ) internal pure returns(uint256[100] memory rets) {\\n        for (uint i = 0; i < parts; i++) {\\n            rets[i] = value * (i + 1) / parts;\\n        }\\n    }\\n\\n\\n    function _calculateUniswapFormula(uint256 fromBalance, uint256 toBalance, uint256 amount) internal pure returns(uint256) {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        return amount * toBalance * 997 / (\\n            fromBalance * 1000 + amount *997\\n        );\\n    }\\n\\n\\n\\n    function calculate(\\n        CalculateArgs memory args\\n    ) public view returns(uint256[] memory rets) {\\n        return _calculate(\\n            args.fromToken,\\n            args.destToken,\\n            args.factory,\\n            _linearInterpolation(args.amount, args.parts)\\n        );\\n    }\\n\\n    function calculateETH(\\n        CalculateArgs memory args\\n    ) internal view returns(uint256[] memory rets) {\\n        if (args.fromToken.isETH() || args.fromToken == weth || args.destToken.isETH() || args.destToken == weth) {\\n            return new uint256[](args.parts);\\n        }\\n\\n        return _calculateOverMidToken(\\n            args.fromToken,\\n            weth,\\n            args.destToken,\\n            args.factory,\\n            args.amount,\\n            args.parts\\n        );\\n    }\\n\\n\\n    function _calculate(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        IUniswapFactory factory,\\n        uint256[] memory amounts\\n    ) internal view returns(uint256[] memory rets) {\\n        rets = new uint256[](amounts.length);\\n\\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\\n        IERC20 destTokenReal = destToken.isETH() ? weth : destToken;\\n        IUniswapExchange exchange = factory.getPair(fromTokenReal, destTokenReal);\\n        if (address(exchange) != address(0)) {\\n            uint256 fromTokenBalance = fromTokenReal.universalBalanceOf(address(exchange));\\n            uint256 destTokenBalance = destTokenReal.universalBalanceOf(address(exchange));\\n            for (uint i = 0; i < amounts.length; i++) {\\n                rets[i] = _calculateUniswapFormula(fromTokenBalance, destTokenBalance, amounts[i]);\\n            }\\n            return rets;\\n        }\\n    }\\n\\n    function _calculateOverMidToken(\\n        IERC20 fromToken,\\n        IERC20 midToken,\\n        IERC20 destToken,\\n        IUniswapFactory factory,\\n        uint256 amount,\\n        uint256 parts\\n    ) internal view returns(uint256[] memory rets) {\\n        rets = _linearInterpolation(amount, parts);\\n\\n        rets = _calculate(fromToken, midToken, factory, rets);\\n        rets = _calculate(midToken, destToken, factory, rets);\\n        return rets;\\n    }\\n\\n    function _calculateNoReturn(\\n        IERC20 /*fromToken*/,\\n        IERC20 /*destToken*/,\\n        uint256 /*amount*/,\\n        uint256 parts\\n    ) internal view returns(uint256[] memory rets) {\\n        this;\\n        return new uint256[](parts);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eth/SwitchRootEth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"../ISwitchView.sol\\\";\\nimport \\\"../IWETH.sol\\\";\\nimport \\\"../lib/DisableFlags.sol\\\";\\nimport \\\"../lib/UniversalERC20.sol\\\";\\nimport \\\"../interfaces/IUniswapFactory.sol\\\";\\nimport \\\"../lib/UniswapExchangeLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract SwitchRootEth is ISwitchView {\\n    using DisableFlags for uint256;\\n    using UniversalERC20 for IERC20;\\n    using UniversalERC20 for IWETH;\\n    using UniswapExchangeLib for IUniswapExchange;\\n\\n    uint256 constant internal DEXES_COUNT = 3;\\n    uint256 constant internal PATHS_COUNT = 2;\\n    uint256 constant internal PATHS_SPLIT = 2;\\n    address constant internal ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    address constant internal ZERO_ADDRESS = address(0);\\n\\n    IWETH constant internal weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    IUniswapFactory[DEXES_COUNT] public factories = [\\n        IUniswapFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f), // uniswap,\\n        IUniswapFactory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac), // sushiswap,\\n        IUniswapFactory(0x115934131916C8b277DD010Ee02de363c09d037c) // shibaswap\\n    ];\\n\\n    int256 internal constant VERY_NEGATIVE_VALUE = -1e72;\\n\\n    function _findBestDistribution(\\n        uint256 s,                // parts\\n        int256[][] memory amounts // exchangesReturns\\n    )\\n    internal\\n    pure\\n    returns(\\n        int256 returnAmount,\\n        uint256[] memory distribution\\n    )\\n    {\\n        uint256 n = amounts.length;\\n\\n        int256[][] memory answer = new int256[][](n); // int[n][s+1]\\n        uint256[][] memory parent = new uint256[][](n); // int[n][s+1]\\n\\n        for (uint i = 0; i < n; i++) {\\n            answer[i] = new int256[](s + 1);\\n            parent[i] = new uint256[](s + 1);\\n        }\\n\\n        for (uint j = 0; j <= s; j++) {\\n            answer[0][j] = amounts[0][j];\\n            for (uint i = 1; i < n; i++) {\\n                answer[i][j] = -1e72;\\n            }\\n            parent[0][j] = 0;\\n        }\\n\\n        for (uint i = 1; i < n; i++) {\\n            for (uint j = 0; j <= s; j++) {\\n                answer[i][j] = answer[i - 1][j];\\n                parent[i][j] = j;\\n\\n                for (uint k = 1; k <= j; k++) {\\n                    if (answer[i - 1][j - k] + amounts[i][k] > answer[i][j]) {\\n                        answer[i][j] = answer[i - 1][j - k] + amounts[i][k];\\n                        parent[i][j] = j - k;\\n                    }\\n                }\\n            }\\n        }\\n\\n        distribution = new uint256[](DEXES_COUNT*PATHS_COUNT*PATHS_SPLIT);\\n\\n        uint256 partsLeft = s;\\n        unchecked {\\n            for (uint curExchange = n - 1; partsLeft > 0; curExchange--) {\\n                distribution[curExchange] = partsLeft - parent[curExchange][partsLeft];\\n                partsLeft = parent[curExchange][partsLeft];\\n            }\\n        }\\n\\n        returnAmount = (answer[n - 1][s] == VERY_NEGATIVE_VALUE) ? int256(0) : answer[n - 1][s];\\n    }\\n\\n\\n    function _linearInterpolation(\\n        uint256 value,\\n        uint256 parts\\n    ) internal pure returns(uint256[] memory rets) {\\n        rets = new uint256[](parts);\\n        for (uint i = 0; i < parts; i++) {\\n            rets[i] = value * (i + 1) / parts;\\n        }\\n    }\\n\\n    function _tokensEqual(IERC20 tokenA, IERC20 tokenB) internal pure returns(bool) {\\n        return ((tokenA.isETH() && tokenB.isETH()) || tokenA == tokenB);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/ISwitchView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"./interfaces/IUniswapFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract ISwitchView {\\n\\n    struct ReturnArgs {\\n        IERC20 fromToken;\\n        IERC20 destToken;\\n        uint256 amount;\\n        uint256 parts;\\n    }\\n\\n    struct CalculateArgs {\\n        IERC20 fromToken;\\n        IERC20 destToken;\\n        IUniswapFactory factory;\\n        uint256 amount;\\n        uint256 parts;\\n    }\\n\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts\\n    )\\n    public\\n    virtual\\n    view\\n    returns(\\n        uint256 returnAmount,\\n        uint256[] memory distribution\\n    );\\n}\\n\\n\"\r\n    },\r\n    \"contracts/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract IWETH is IERC20 {\\n    function deposit() external virtual payable;\\n\\n    function withdraw(uint256 amount) virtual external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/lib/DisableFlags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nlibrary DisableFlags {\\n    function check(uint256 flags, uint256 flag) internal pure returns(bool) {\\n        return (flags & flag) != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/UniversalERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary UniversalERC20 {\\n\\n    using SafeERC20 for IERC20;\\n\\n    address private constant ZERO_ADDRESS = address(0x0000000000000000000000000000000000000000);\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            payable(to).transfer(amount);\\n            return true;\\n        } else {\\n            token.transfer(to, amount);\\n            return true;\\n        }\\n    }\\n\\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            require(from == msg.sender && msg.value >= amount, \\\"Wrong useage of ETH.universalTransferFrom()\\\");\\n            if (to != address(this)) {\\n                payable(to).transfer(amount);\\n            }\\n            if (msg.value > amount) {\\n                payable(msg.sender).transfer(msg.value - amount);\\n            }\\n        } else {\\n            token.safeTransferFrom(from, to, amount);\\n        }\\n    }\\n\\n    function universalTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            if (msg.value > amount) {\\n                // Return remainder if exist\\n                payable(msg.sender).transfer(msg.value - amount);\\n            }\\n        } else {\\n            token.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\\n        if (!isETH(token)) {\\n            if (amount > 0 && token.allowance(address(this), to) > 0) {\\n                token.safeApprove(to, 0);\\n            }\\n            token.safeApprove(to, amount);\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == ZERO_ADDRESS || address(token) == ETH_ADDRESS);\\n    }\\n\\n    // function notExist(IERC20 token) internal pure returns(bool) {\\n    //     return (address(token) == address(-1));\\n    // }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IUniswapExchange.sol\\\";\\n\\ninterface IUniswapFactory {\\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapExchange pair);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/UniswapExchangeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"../interfaces/IUniswapExchange.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport \\\"./UniversalERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary UniswapExchangeLib {\\n    using Math for uint256;\\n    using UniversalERC20 for IERC20;\\n\\n    function getReturn(\\n        IUniswapExchange exchange,\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint amountIn\\n    ) internal view returns (uint256 result, bool needSync, bool needSkim) {\\n        uint256 reserveIn = fromToken.universalBalanceOf(address(exchange));\\n        uint256 reserveOut = destToken.universalBalanceOf(address(exchange));\\n        (uint112 reserve0, uint112 reserve1,) = exchange.getReserves();\\n        if (fromToken > destToken) {\\n            (reserve0, reserve1) = (reserve1, reserve0);\\n        }\\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\\n\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * Math.min(reserveOut, reserve1);\\n        uint256 denominator = Math.min(reserveIn, reserve0) * 1000 + amountInWithFee;\\n        result = (denominator == 0) ? 0 : numerator / denominator;\\n    }\\n}\\n\\n\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\ninterface IUniswapExchange {\\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwitchView.CalculateArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rets\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"contract IUniswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SwitchViewEth", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}