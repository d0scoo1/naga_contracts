{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/AddressManagerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title AddressManagerV2\\n/// @notice Only the owner of this contract can edit the addresses held.\\n/// @dev This contract is used for addresses with reserve asset balances needed to be read by Chainlink nodes for the\\n/// proof of reserve system.\\ncontract AddressManagerV2 is Ownable {\\n    event AddNetwork(string indexed network, uint256 indexed networksLength);\\n    event RemoveNetwork(string indexed network, uint256 indexed networksLength);\\n\\n    event AddWalletAddress(\\n        string indexed network,\\n        string indexed addr,\\n        uint256 indexed addrsLength\\n    );\\n    event RemoveWalletAddress(\\n        string indexed network,\\n        string indexed addr,\\n        uint256 indexed addrsLength\\n    );\\n\\n    string[] public networks;\\n    mapping(bytes32 => uint256) networksIndexMap;\\n\\n    mapping(bytes32 => string[]) networkAddressesStringListMap;\\n    mapping(bytes32 => mapping(bytes32 => uint256)) networkAddressesIndexMap;\\n\\n    /// @dev Adds an address to the list for the blockchain holding reserve collateral\\n    /// @param network The network the address holds reserves in\\n    /// @param addr Address that will be added to the list for the network\\n    function addWalletAddress(string memory network, string memory addr)\\n        external\\n        onlyOwner\\n    {\\n        bytes memory addrBytes = bytes(addr);\\n        bytes memory networkBytes = bytes(network);\\n\\n        require(addrBytes.length > 0, \\\"address can not be an empty string\\\");\\n        require(\\n            networkBytes.length > 0,\\n            \\\"network name can not be an empty string\\\"\\n        );\\n\\n        bytes32 addrHash = keccak256(addrBytes);\\n        bytes32 networkHash = keccak256(networkBytes);\\n\\n        if (\\n            networksIndexMap[networkHash] == 0 &&\\n            (networks.length == 0 ||\\n                (networks.length > 0 &&\\n                    keccak256(bytes(networks[0])) != networkHash))\\n        ) {\\n            networks.push(network);\\n            networksIndexMap[networkHash] = networks.length - 1;\\n\\n            emit AddNetwork(network, networks.length);\\n        }\\n\\n        string[] storage addrs = networkAddressesStringListMap[networkHash];\\n\\n        require(\\n            networkAddressesIndexMap[networkHash][addrHash] == 0 &&\\n                (addrs.length == 0 ||\\n                    (addrs.length > 0 &&\\n                        keccak256(bytes(addrs[0])) != addrHash)),\\n            \\\"can not add a duplicate address\\\"\\n        );\\n\\n        addrs.push(addr);\\n        networkAddressesIndexMap[networkHash][addrHash] = addrs.length - 1;\\n\\n        emit AddWalletAddress(network, addr, addrs.length);\\n    }\\n\\n    /// @dev Removes an address from the list of those holding collateral in reserve\\n    /// @param network The network the address holds reserves in\\n    /// @param addr The address in the list for this network\\n    function removeWalletAddress(string memory network, string memory addr)\\n        external\\n        onlyOwner\\n    {\\n        uint256 index;\\n\\n        bytes32 addrHash = keccak256(bytes(addr));\\n        bytes32 networkHash = keccak256(bytes(network));\\n\\n        index = networkAddressesIndexMap[networkHash][addrHash];\\n        string[] storage addrs = networkAddressesStringListMap[networkHash];\\n\\n        require(\\n            addrs.length > 0 &&\\n                (keccak256(bytes(addrs[0])) == addrHash || index != 0),\\n            \\\"not a stored address for this network\\\"\\n        );\\n\\n        addrs[index] = addrs[addrs.length - 1];\\n        networkAddressesIndexMap[networkHash][\\n            keccak256(bytes(addrs[index]))\\n        ] = index;\\n\\n        addrs.pop();\\n        delete networkAddressesIndexMap[networkHash][addrHash];\\n\\n        if (addrs.length == 0) {\\n            index = networksIndexMap[networkHash];\\n\\n            networks[index] = networks[networks.length - 1];\\n            networksIndexMap[keccak256(bytes(networks[index]))] = index;\\n\\n            networks.pop();\\n\\n            emit RemoveNetwork(network, networks.length);\\n        }\\n\\n        emit RemoveWalletAddress(network, addr, addrs.length);\\n    }\\n\\n    /// @dev Return strings representing all blockchains with addresses holding assets for reserve\\n    function allNetworks() external view returns (string[] memory) {\\n        return networks;\\n    }\\n\\n    /// @dev Return the number of blockchains used for reserves\\n    function networksLength() external view returns (uint256) {\\n        return networks.length;\\n    }\\n\\n    /// @dev Retrieve all the addresses holding reserve for a blockchain\\n    /// @param network The string representing a blockchain\\n    function walletAddresses(string calldata network)\\n        external\\n        view\\n        returns (string[] memory)\\n    {\\n        return networkAddressesStringListMap[keccak256(bytes(network))];\\n    }\\n\\n    /// @dev Retrieve the number of addresses stored for a blockchain\\n    /// @param network The string representing a blockchain\\n    function walletAddressesLength(string calldata network)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return networkAddressesStringListMap[keccak256(bytes(network))].length;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"network\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"networksLength\",\"type\":\"uint256\"}],\"name\":\"AddNetwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"network\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"addrsLength\",\"type\":\"uint256\"}],\"name\":\"AddWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"network\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"networksLength\",\"type\":\"uint256\"}],\"name\":\"RemoveNetwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"network\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"addrsLength\",\"type\":\"uint256\"}],\"name\":\"RemoveWalletAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"}],\"name\":\"addWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allNetworks\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"networks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networksLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"}],\"name\":\"removeWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"network\",\"type\":\"string\"}],\"name\":\"walletAddresses\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"network\",\"type\":\"string\"}],\"name\":\"walletAddressesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AddressManagerV2", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}