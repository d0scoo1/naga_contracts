{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ZelenskiyNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./ERC721X.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract ZelenskyNFT is ERC721X, Ownable {\\n\\n    enum RevealStatus{\\n        MINT,\\n        REVEAL,\\n        REVEALED\\n    }\\n\\n    struct PayableAddress {\\n        address payable addr;\\n        uint256 share;\\n    }\\n\\n    event Paid(address indexed _from, uint256 _value, uint8 _whitelist);\\n    event Charity(address indexed _to, uint256 _value, bytes data);\\n    event Withdrawal(address indexed _to, uint256 _value, bytes data);\\n    event UriChange(string newURI);\\n    event WhitelistStatusChange(bool status);\\n    event MintStopped(bool status);\\n    event NewRoot(bytes32 root);\\n    event Payout(uint256 amount);\\n    event Refund(address indexed _to, uint256 amount, bytes data);\\n    event MintTimeSet(uint _start, uint _end);\\n    event LockTimerStarted(uint _start, uint _end);\\n\\n    constructor() ERC721X(\\\"ZelenskiyNFT\\\", \\\"ZFT\\\") {\\n        _mint(0x949c48b29b3F5e75ff30bd8dA4bA6de23Aa34f91, 1);\\n    }\\n\\n    uint256 public constant priceDefault = 0.2 ether;\\n    uint256 public constant priceWhitelist = 0.15 ether;\\n\\n    uint256 public constant amountWhitelist = 1;\\n    uint256 public constant amountDefault = 3;\\n\\n    uint256 public constant maxTotalSupply = 10000;\\n    uint256 public constant communityMintSupply = 500;\\n    uint256 private communitySold = 0;\\n\\n    string private theBaseURI = \\\"https://zelenskiynft.mypinata.cloud/ipfs/QmcEpX155NaMA1cfpmpFX55E4o9etDdXFZEoVdyp9ew97E\\\";\\n\\n    uint256 private charitySum = 0;\\n    uint256 private teamSum = 0;\\n    uint256 private saleSum = 0;\\n\\n    mapping(address => uint256) private mints;\\n    mapping(address => bool) private whitelistClaimed;\\n\\n    bytes32 private root;\\n    bytes32 private communityRoot;\\n    bool private communityRootIsSet = false;\\n    bool private rootIsSet = false;\\n\\n    RevealStatus revealStatus = RevealStatus.REVEAL;\\n\\n    uint public constant whitelistStartTime = 1654009200;\\n    uint public constant whitelistEndTime = 1654088400;\\n    uint public constant publicMintStartTime = 1654099200;\\n    uint public constant whitelist2StartTime = 1654189200;\\n\\n    address public constant communityWallet = 0x949c48b29b3F5e75ff30bd8dA4bA6de23Aa34f91;\\n    address public constant multisigOwnerWallet = 0x15E6733Be8401d33b4Cf542411d400c823DF6187;\\n\\n    bool private mintStopped = false;\\n\\n    uint private functionLockTime = 0;\\n\\n    modifier ownerIsMultisig() {\\n        require(owner() == multisigOwnerWallet, \\\"Owner is not multisignature wallet\\\");\\n        _;\\n    }\\n\\n    modifier whitelist2Started(){\\n        require(block.timestamp >= whitelist2StartTime, \\\"Whitelist2 not started yet\\\");\\n        _;\\n    }\\n\\n    modifier whitelistActive() {\\n        require(whitelistStartTime != 0 && whitelistEndTime != 0, \\\"Mint start time is not set\\\");\\n        require(block.timestamp >= whitelistStartTime && block.timestamp <= whitelistEndTime, \\\"Mint not started yet\\\");\\n        _;\\n    }\\n\\n    modifier whitelistEnded() {\\n        require(whitelistStartTime != 0 && whitelistEndTime != 0, \\\"Mint start time is not set\\\");\\n        require(block.timestamp >= whitelistEndTime, \\\"Public mint not started yet\\\");\\n        _;\\n    }\\n\\n    modifier publicMintStarted() {\\n        require(block.timestamp >= publicMintStartTime, \\\"Public mint not started yet\\\");\\n        _;\\n    }\\n\\n    //, uint256 _startTime, bytes32[] memory _proof\\n\\n    function buy(uint256 amount, bytes32[] calldata _proof) public payable whitelistActive {\\n        require(msg.sender == tx.origin, \\\"payment not allowed from contract\\\");\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n        require(MerkleProof.verify(_proof, root, leaf), \\\"Address not in whitelist\\\");\\n        require(whitelistClaimed[msg.sender] == false, \\\"Whitelist already claimed\\\");\\n        \\n        require(amount <= amountWhitelist, \\\"too much for whitelist\\\");\\n        require(mints[msg.sender] + amount <= amountWhitelist, \\\"too much for whitelist\\\");\\n        \\n        require(nextId + amount <= maxTotalSupply, \\\"Maximum supply reached\\\");\\n        uint256 price;\\n        price = priceWhitelist;\\n\\n        require(msg.value >= price * amount, \\\"Not enough eth\\\");\\n\\n        if(msg.value > price * amount){\\n            uint256 refundAmount = msg.value - price * amount;\\n            (bool sent, bytes memory data) = msg.sender.call{value: refundAmount}(\\\"refund\\\");\\n            require(sent, \\\"Refund failed\\\");\\n            emit Refund(msg.sender, refundAmount, data);\\n        }\\n        \\n        mints[msg.sender] += amount;\\n\\n        saleSum += price * amount;\\n\\n        whitelistClaimed[msg.sender] = true;\\n\\n        _mint(msg.sender, amount);\\n    }\\n\\n    function buyDefault(uint256 amount) public payable whitelistEnded {\\n        require(mintStopped == false, \\\"Mint is stopped\\\");\\n        //require(whitelistActive == false, \\\"Regular mint not started yet\\\");\\n        require(msg.sender == tx.origin, \\\"payment not allowed from this contract\\\");\\n        require(mints[msg.sender] + amount <= amountDefault, \\\"too much mints for this wallet\\\");\\n\\n        require(nextId + amount <= maxTotalSupply - communityMintSupply, \\\"Maximum supply reached\\\");\\n        uint256 price;\\n        price = priceDefault;\\n\\n        require(msg.value >= price * amount, \\\"Not enough eth\\\");\\n\\n        if(msg.value > price * amount){\\n            uint256 refundAmount = msg.value - price * amount;\\n            (bool sent, bytes memory data) = msg.sender.call{value: refundAmount}(\\\"refund\\\");\\n            require(sent, \\\"Refund failed\\\");\\n            emit Refund(msg.sender, refundAmount, data);\\n        }\\n\\n        mints[msg.sender] += amount;\\n\\n        saleSum += price * amount;\\n\\n        _mint(msg.sender, amount);\\n    }\\n\\n    function sendRemainder() public onlyOwner whitelistEnded ownerIsMultisig {\\n        require(mintStopped, \\\"Public mint stil active\\\");\\n        uint256 remainder = maxTotalSupply - communityMintSupply - nextId + 1;\\n        require(remainder > 0);\\n        _mint(communityWallet, remainder);\\n    }\\n\\n    function communityBuy(uint256 amount, bytes32[] calldata _proof) public payable whitelist2Started {\\n        require(mintStopped, \\\"Public mint still active\\\");\\n        require(msg.sender == tx.origin, \\\"payment not allowed from this contract\\\");\\n        require(amount <= amountWhitelist, \\\"Too much for whitelist\\\");\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n        require(MerkleProof.verify(_proof, communityRoot, leaf), \\\"Address not in whitelist\\\");\\n        require(whitelistClaimed[msg.sender] == false, \\\"Whitelist already claimed\\\");\\n\\n        require(nextId + amount <= maxTotalSupply, \\\"Maximum supply reached\\\");\\n        require(communitySold + amount <= communityMintSupply, \\\"Maximum community supply reached\\\");\\n        mints[msg.sender] += amount;\\n\\n        communitySold += amount;\\n\\n        _mint(msg.sender, amount);\\n    }\\n\\n    function setBaseURI(string memory newBaseURI) public onlyOwner ownerIsMultisig {\\n        if(functionLockTime == 0){\\n            functionLockTime = block.timestamp;\\n            emit LockTimerStarted(functionLockTime, functionLockTime + 48 hours);\\n            return;\\n        }else{\\n            require(block.timestamp >= functionLockTime + 48 hours, \\\"48 hours not passed yet\\\");\\n            functionLockTime = 0;\\n        }\\n        require(revealStatus != RevealStatus.REVEALED, \\\"URI modifications after reveal are prohibited\\\");\\n        theBaseURI = newBaseURI;\\n        emit UriChange(newBaseURI);\\n        if(revealStatus == RevealStatus.MINT){\\n            revealStatus = RevealStatus.REVEAL;\\n        }else{\\n            revealStatus = RevealStatus.REVEALED;\\n        }\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return theBaseURI;\\n    }\\n\\n    function sendEther(address payable addr, uint256 amount, bool isCharity) private {\\n        (bool sent, bytes memory data) = addr.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send ether\\\");\\n        if(isCharity){\\n            emit Charity(addr, amount, data);\\n            charitySum += amount;\\n        }else{\\n            emit Withdrawal(addr, amount, data);\\n            teamSum += amount;\\n        }\\n    }\\n\\n    // Call 1 time after mint is stopped\\n    function pay() public onlyOwner whitelistEnded ownerIsMultisig {\\n        if(functionLockTime == 0){\\n            functionLockTime = block.timestamp;\\n            emit LockTimerStarted(functionLockTime, functionLockTime + 48 hours);\\n            return;\\n        }else{\\n            require(block.timestamp >= functionLockTime + 48 hours, \\\"48 hours not passed yet\\\");\\n            functionLockTime = 0;\\n        }\\n        uint256 balance = address(this).balance;\\n        emit Payout(balance);\\n        address payable charityUA = payable(0x3A0106911013eca7A0675d8F1ba7F404eD973cAb);\\n        address payable charityEU = payable(0x78042877DF422a9769E0fE1748FEf35d4A4718a0);\\n        address payable liquidity = payable(0x7A6B855D613C136098de4FEd8725DF7A7c2f7F5c);\\n        address payable marketing = payable(0x777C680b055cF6E97506B42DDeF4063061d7a5b4);\\n        address payable development = payable(0xaE987CfFaf8149EFff92546ca399D41b4Da6c57B);\\n        address payable team = payable(0xBedc8cDC12047465690cbc358C69b2ea671217ac);\\n\\n        sendEther(charityUA, balance/2, true);\\n        sendEther(charityEU, balance/10, true);\\n        sendEther(liquidity, balance*5/100, false);\\n        sendEther(marketing, balance/5, false);\\n        sendEther(development, balance/10, false);\\n        sendEther(team, balance*5/100, false);\\n    }\\n\\n    function getEthOnContract() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function checkAddressInWhiteList(bytes32[] calldata _proof) view public returns (bool) {\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n        return MerkleProof.verify(_proof, root, leaf);\\n    }\\n\\n    function getWhitelistStatus() view public returns (bool) {\\n        return block.timestamp >= whitelistStartTime && block.timestamp <= whitelistEndTime;\\n    }\\n\\n    function getCharitySum() view public returns (uint256) {\\n        return charitySum;\\n    }\\n\\n    function getTeamSum() view public returns (uint256) {\\n        return teamSum;\\n    }\\n\\n    function setRoot(bytes32 _newRoot) public onlyOwner ownerIsMultisig {\\n        require(rootIsSet == false, \\\"Root already set\\\");\\n        rootIsSet = true;\\n        root = _newRoot;\\n        emit NewRoot(_newRoot);\\n    }\\n\\n    function storeEth() public payable {\\n        require(msg.sender == communityWallet, \\\"Wrong address\\\");\\n    }\\n\\n    function stopMint() public onlyOwner ownerIsMultisig {\\n        if(functionLockTime == 0){\\n            functionLockTime = block.timestamp;\\n            emit LockTimerStarted(functionLockTime, functionLockTime + 1 hours);\\n            return;\\n        }else{\\n            require(block.timestamp >= functionLockTime + 1 hours, \\\"Hour not passed yet\\\");\\n            mintStopped = true;\\n            functionLockTime = 0;\\n            emit MintStopped(true);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/contracts/ERC721X.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension and the Enumerable extension\\r\\n *\\r\\n * @dev Only allows token IDs are minted serially starting from token ID 1\\r\\n *\\r\\n * @dev Does not support burning tokens or in any way changing the ownership of a token\\r\\n *      to address(0)\\r\\n */\\r\\ncontract ERC721X is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\r\\n  using Address for address;\\r\\n  using Strings for uint256;\\r\\n\\r\\n  // Token name\\r\\n  string private _name;\\r\\n\\r\\n  // Token symbol\\r\\n  string private _symbol;\\r\\n\\r\\n  // Mapping from token ID to owner address\\r\\n  mapping(uint256 => address) private _owners;\\r\\n\\r\\n  // Mapping from token ID to approved address\\r\\n  mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n  // Mapping from owner to operator approvals\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns next token ID to be mint\\r\\n   */\\r\\n  uint256 public nextId = 1;\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection. It\\r\\n   *      also sets a `maxTotalSupply` variable to cap the tokens to ever be created\\r\\n   */\\r\\n  constructor(string memory name_, string memory symbol_) {\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n    return\\r\\n      interfaceId == type(IERC721).interfaceId ||\\r\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n    require(owner != address(0), \\\"ERC721X: balance query for the zero address\\\");\\r\\n\\r\\n    uint256 count = 0;\\r\\n\\r\\n    for(uint256 i = 1; _exists(i); i++) {\\r\\n      if(_owners[i] == owner) {\\r\\n        count++;\\r\\n        if(_owners[i + 1] == address(0) && _exists(i + 1)) count++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return count;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-ownerOf}.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n    require(_exists(tokenId), \\\"ERC721X: owner query for nonexistent token\\\");\\r\\n\\r\\n    return _owners[tokenId] != address(0) ? _owners[tokenId] : _owners[tokenId - 1];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-name}.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-symbol}.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-tokenURI}.\\r\\n   */\\r\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n    string memory baseURI = _baseURI();\\r\\n    return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\")) : \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n   * by default, can be overriden in child contracts.\\r\\n   */\\r\\n  function _baseURI() internal view virtual returns (string memory) {\\r\\n    return \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-approve}.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) public virtual override {\\r\\n    address owner = ownerOf(tokenId);\\r\\n    require(to != owner, \\\"ERC721X: approval to current owner\\\");\\r\\n\\r\\n    require(\\r\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n      \\\"ERC721X: approve caller is not owner nor approved for all\\\"\\r\\n    );\\r\\n\\r\\n    _approve(to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-getApproved}.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n    require(_exists(tokenId), \\\"ERC721X: approved query for nonexistent token\\\");\\r\\n\\r\\n    return _tokenApprovals[tokenId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-setApprovalForAll}.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n    _setApprovalForAll(_msgSender(), operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-isApprovedForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n    return _operatorApprovals[owner][operator];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-transferFrom}.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public virtual override {\\r\\n    //solhint-disable-next-line max-line-length\\r\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721X: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n    _transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public virtual override {\\r\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) public virtual override {\\r\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721X: transfer caller is not owner nor approved\\\");\\r\\n    _safeTransfer(from, to, tokenId, _data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n   *\\r\\n   * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n   *\\r\\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _safeTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) internal virtual {\\r\\n    _transfer(from, to, tokenId);\\r\\n    require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721X: transfer to non ERC721Receiver implementer\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `tokenId` exists.\\r\\n   *\\r\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Tokens start existing when they are minted (`_mint`).\\r\\n   */\\r\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n    return tokenId != 0 && tokenId < nextId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n    require(_exists(tokenId), \\\"ERC721X: operator query for nonexistent token\\\");\\r\\n    address owner = ownerOf(tokenId);\\r\\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Safely mints the token with next consecutive ID and transfers it to `to`. Setting\\r\\n   *      `amount` to `true` will mint another nft.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must not exist.\\r\\n   * - `maxTotalSupply` maximum total supply has not been reached\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _safeMint(address to, uint256 amount) internal virtual {\\r\\n    _safeMint(to, amount, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n   */\\r\\n  function _safeMint(\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    bytes memory _data\\r\\n  ) internal virtual {\\r\\n    _mint(to, amount);\\r\\n\\r\\n    uint256 n = amount;\\r\\n\\r\\n    for(uint256 i = 0; i < n; i++) {\\r\\n      require(\\r\\n        _checkOnERC721Received(address(0), to, nextId - i - 1, _data),\\r\\n        \\\"ERC721X: transfer to non ERC721Receiver implementer\\\"\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints the token with next consecutive ID and transfers it to `to`. Setting\\r\\n   *      `amount` to `true` will mint another nft.\\r\\n   *\\r\\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `maxTotalSupply` maximum total supply has not been reached\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _mint(address to, uint256 amount) internal virtual {\\r\\n    // The below calculations do not depend on user input and\\r\\n    // are very hard to overflow (nextId must be >= 2^256-2 for\\r\\n    // that to happen) so using `unchecked` as a means of saving\\r\\n    // gas is safe here\\r\\n    unchecked {\\r\\n      require(to != address(0), \\\"ERC721X: mint to the zero address\\\");\\r\\n\\r\\n      uint256 n = amount;\\r\\n\\r\\n      _owners[nextId] = to;\\r\\n\\r\\n      for(uint256 i = 0; i < n; i++) {\\r\\n        _beforeTokenTransfer(address(0), to, nextId + i);\\r\\n        emit Transfer(address(0), to, nextId + i);\\r\\n      }\\r\\n\\r\\n      nextId += n;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` from `from` to `to`.\\r\\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) internal virtual {\\r\\n    // The below calculations are very hard to overflow (nextId must\\r\\n    // be = 2^256-1 for that to happen) so using `unchecked` as\\r\\n    // a means of saving gas is safe here\\r\\n    unchecked {\\r\\n      require(\\r\\n        ownerOf(tokenId) == from,\\r\\n        \\\"ERC721X: transfer of token that is not own\\\"\\r\\n      );\\r\\n      require(to != address(0), \\\"ERC721X: transfer to the zero address\\\");\\r\\n\\r\\n      _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n      // Clear approvals from the previous owner\\r\\n      _approve(address(0), tokenId);\\r\\n\\r\\n      if(_owners[tokenId] == address(0)) {\\r\\n        _owners[tokenId] = to;\\r\\n      } else {\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        if(_owners[tokenId + 1] == address(0)) {\\r\\n          _owners[tokenId + 1] = from;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve `to` to operate on `tokenId`\\r\\n   *\\r\\n   * Emits a {Approval} event.\\r\\n   */\\r\\n  function _approve(address to, uint256 tokenId) internal virtual {\\r\\n    _tokenApprovals[tokenId] = to;\\r\\n    emit Approval(ownerOf(tokenId), to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n   *\\r\\n   * Emits a {ApprovalForAll} event.\\r\\n   */\\r\\n  function _setApprovalForAll(\\r\\n    address owner,\\r\\n    address operator,\\r\\n    bool approved\\r\\n  ) internal virtual {\\r\\n    require(owner != operator, \\\"ERC721X: approve to caller\\\");\\r\\n    _operatorApprovals[owner][operator] = approved;\\r\\n    emit ApprovalForAll(owner, operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n   * The call is not executed if the target address is not a contract.\\r\\n   *\\r\\n   * @param from address representing the previous owner of the given token ID\\r\\n   * @param to target address that will receive the tokens\\r\\n   * @param tokenId uint256 ID of the token to be transferred\\r\\n   * @param _data bytes optional data to send along with the call\\r\\n   * @return bool whether the call correctly returned the expected magic value\\r\\n   */\\r\\n  function _checkOnERC721Received(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) private returns (bool) {\\r\\n    if (to.isContract()) {\\r\\n      try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n        return retval == IERC721Receiver.onERC721Received.selector;\\r\\n      } catch (bytes memory reason) {\\r\\n        if (reason.length == 0) {\\r\\n          revert(\\\"ERC721X: transfer to non ERC721Receiver implementer\\\");\\r\\n        } else {\\r\\n          assembly {\\r\\n            revert(add(32, reason), mload(reason))\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before any token transfer. This includes minting\\r\\n   * and burning.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n   * transferred to `to`.\\r\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   *\\r\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n   */\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev See {IEnumerableERC721-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256) {\\r\\n    return nextId - 1;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IEnumerableERC721-tokenByIndex}.\\r\\n   */\\r\\n  function tokenByIndex(uint256 index) external view returns (uint256) {\\r\\n    require(_exists(index + 1), \\\"ERC721X: global index out of bounds\\\");\\r\\n\\r\\n    return index + 1;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IEnumerableERC721-tokenOfOwnerByIndex}.\\r\\n   */\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256) {\\r\\n    require(owner != address(0), \\\"ERC721X: balance query for the zero address\\\");\\r\\n\\r\\n    uint256 count = 0;\\r\\n    uint256 i = 1;\\r\\n\\r\\n    for(; _exists(i) && count < index + 1; i++) {\\r\\n      if(_owners[i] == owner) {\\r\\n        count++;\\r\\n        if(_owners[i + 1] == address(0) && count < index + 1 && _exists(i + 1)) {\\r\\n          count++;\\r\\n          i++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if(count == index + 1) return i - 1;\\r\\n    else revert(\\\"ERC721X: owner index out of bounds\\\");\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Charity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"LockTimerStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"MintStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"MintTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"NewRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_whitelist\",\"type\":\"uint8\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"UriChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amountDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyDefault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"checkAddressInWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"communityBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityMintSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCharitySum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthOnContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTeamSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisigOwnerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendRemainder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist2StartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZelenskyNFT", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}