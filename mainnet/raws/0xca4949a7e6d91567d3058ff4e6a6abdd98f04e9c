{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity >=0.6.2;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract AkihikoRewards {\r\n    address public owner;\r\n\r\n    IERC20 public rewardToken;\r\n    IERC20 public stakedToken;\r\n    constructor(IERC20 _rewardToken, IERC20 _stakedToken) {\r\n        rewardToken = _rewardToken;\r\n        stakedToken = _stakedToken;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    struct Deposit {\r\n        uint256 _amount;\r\n        uint256 _block;\r\n    }\r\n    mapping(address => Deposit) public balances;\r\n    mapping(address => uint256) public userRewardsPaid;\r\n\r\n    uint256 public rewardPerToken;\r\n    uint256 public rewardPeriod;\r\n\r\n    function setRewardParameters(\r\n        uint256 _rewardAmount, \r\n        uint256 _rewardPeriod\r\n    ) external onlyOwner {\r\n        rewardPerToken = _rewardAmount;\r\n        rewardPeriod = _rewardPeriod;\r\n    }\r\n\r\n    function stake(uint256 _amount) public {\r\n        require(_amount > 0, \"Cannot stake 0\");\r\n        stakedToken.transferFrom(msg.sender, address(this), _amount);\r\n        if (balances[msg.sender]._amount > 0) {\r\n            withdrawRewards();\r\n            uint256 newBal = balances[msg.sender]._amount+_amount;\r\n            balances[msg.sender] = Deposit(newBal, block.number);\r\n        } else {\r\n            balances[msg.sender] = Deposit(_amount, block.number);\r\n        }\r\n    }\r\n\r\n    function unstake(uint256 _amount) public {\r\n        require(_amount > 0, \"Amount can't be 0\");\r\n        require(balances[msg.sender]._amount >= _amount, \"Amount bigger than balance\");\r\n        balances[msg.sender] = Deposit(0,0);\r\n        stakedToken.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function unclaimed() public view returns(uint256) {\r\n        uint256 amount = balances[msg.sender]._amount*(rewardPerToken)*((block.number-balances[msg.sender]._block)/rewardPeriod);\r\n        return amount;\r\n    }\r\n\r\n    function withdrawRewards() public {\r\n        uint256 amount = balances[msg.sender]._amount*(rewardPerToken)*((block.number-balances[msg.sender]._block)/rewardPeriod);\r\n        balances[msg.sender] = Deposit(balances[msg.sender]._amount, block.number);\r\n        if (rewardToken.balanceOf(address(this)) > amount) {\r\n            rewardToken.transfer(msg.sender, amount);\r\n            userRewardsPaid[msg.sender] += amount;\r\n        } else {\r\n            uint256 totalBal = rewardToken.balanceOf(address(this));\r\n            rewardToken.transfer(msg.sender, totalBal);\r\n            userRewardsPaid[msg.sender] += amount;\r\n        }\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function withdrawAll() public onlyOwner {\r\n        uint256 amount = rewardToken.balanceOf(address(this));\r\n        rewardToken.transfer(owner, amount);\r\n    }\r\n\r\n    function withdrawAnyEth() public onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPeriod\",\"type\":\"uint256\"}],\"name\":\"setRewardParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardsPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAnyEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AkihikoRewards", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bfc869fd4d1dd0c07aeece6992c149e9f77b104a00000000000000000000000062cc7d1790e5a9470be22ae9f14065cbfe44bf10", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4d23743d082d34669d0a0d43091ecf17a1238bbfa050848b562bd7d5ef074023"}]}