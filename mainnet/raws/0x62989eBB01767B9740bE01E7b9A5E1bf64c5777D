{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ApeGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\n\\r\\ncontract ApeGenerator is Ownable {\\r\\n    string private constant svgEyeToEnd =\\r\\n        '</tspan>&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#xd;</tspan><tspan x=\\\"31.75%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2593;&#x2593;&#x2588;&#x2588;&#x2593;&#x2593;&#x2591;&#x2591;&#x2588;&#x2588;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#xd;</tspan><tspan x=\\\"35.75%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#xd;</tspan><tspan x=\\\"12%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;        &#x2588;&#x2588;&#x2593;&#x2593;&#x2588;&#x2588;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#x2588;&#x2588;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#xd;</tspan><tspan x=\\\"8%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;        &#x2588;&#x2588;&#x2591;&#x2591;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#xd;</tspan><tspan x=\\\"4%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;      &#x2588;&#x2588;&#x2588;&#x2588;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;      &#xd;</tspan><tspan x=\\\"4%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;    &#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;        &#xd;</tspan><tspan x=\\\"4%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;        &#xd;</tspan><tspan x=\\\"8%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;    &#xd;</tspan><tspan x=\\\"12%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;    &#xd;</tspan><tspan x=\\\"32%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2593;&#x2593;&#x2588;&#x2588;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#xd;</tspan><tspan x=\\\"28%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#xd;</tspan><tspan x=\\\"28%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;</tspan></text></svg>';\\r\\n\\r\\n    string[14] apeEyes = [\\r\\n        \\\"&#x20;\\\",\\r\\n        \\\"&#x2588;\\\",\\r\\n        \\\"&#x2665;\\\",\\r\\n        \\\"&#xac;\\\",\\r\\n        \\\"&#x2d8;\\\",\\r\\n        \\\"&#x5e;\\\",\\r\\n        \\\"&#x58;\\\",\\r\\n        \\\"&#x20BF;\\\",\\r\\n        \\\"&#x39E;\\\",\\r\\n        \\\"&#x30;\\\",\\r\\n        \\\"&#xD2;\\\",\\r\\n        \\\"&#xB4;\\\",\\r\\n        \\\"&#x60;\\\",\\r\\n        \\\"&#x24;\\\"\\r\\n    ];\\r\\n\\r\\n    struct st_apeCoreElements {\\r\\n        uint8 tokenId;\\r\\n        uint8 eyeIndexLeft;\\r\\n        uint8 eyeIndexRight;\\r\\n        uint8 eyeColorIndexLeft;\\r\\n        uint8 eyeColorIndexRight;\\r\\n    }\\r\\n\\r\\n    struct st_apeDefiningElements {\\r\\n        uint8 specialApeIndex;\\r\\n        uint8 eyeIndexLeft;\\r\\n        uint8 eyeIndexRight;\\r\\n        uint8 eyeColorIndexLeft;\\r\\n        uint8 eyeColorIndexRight;\\r\\n        uint8 tokenId;\\r\\n        uint8 apeNameIndex;\\r\\n        uint8 bananascore;\\r\\n    }\\r\\n\\r\\n    struct mintCombination {\\r\\n        uint8 eyeIndexLeft;\\r\\n        uint8 eyeIndexRight;\\r\\n    }\\r\\n\\r\\n    struct st_SpecialApe {\\r\\n        st_apeCoreElements apeCoreElements;\\r\\n        string name;\\r\\n        string apeColor;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => st_apeDefiningElements) id_to_apeDefiningElements;\\r\\n\\r\\n    st_SpecialApe[] ast_specialApeDetails;\\r\\n\\r\\n    uint8 private maxTokenSupply;\\r\\n    bool mintWasReduced;\\r\\n\\r\\n    mintCombination[] arrayOfAvailableMintCombinations;\\r\\n\\r\\n    event mintEndedSupplyReduced(uint8 newTotalSupply);\\r\\n\\r\\n    constructor() {\\r\\n        defineMintCombinations();\\r\\n        addSpecialApes();\\r\\n    }\\r\\n\\r\\n    function nrOfSpecialApes() public view returns (uint256) {\\r\\n        return ast_specialApeDetails.length;\\r\\n    }\\r\\n\\r\\n    function getSpecialApeIndex(uint8 tokenId) public view returns (uint8) {\\r\\n        for (\\r\\n            uint8 currentActiveSpecialApeIndex = 0;\\r\\n            currentActiveSpecialApeIndex < ast_specialApeDetails.length;\\r\\n            currentActiveSpecialApeIndex++\\r\\n        ) {\\r\\n            if (\\r\\n                ast_specialApeDetails[currentActiveSpecialApeIndex]\\r\\n                    .apeCoreElements\\r\\n                    .tokenId == tokenId\\r\\n            ) {\\r\\n                return (currentActiveSpecialApeIndex);\\r\\n            }\\r\\n        }\\r\\n        return (maxTokenSupply + 1);\\r\\n    }\\r\\n\\r\\n    function defineMintCombinations() private {\\r\\n        for (uint8 j = 0; j < apeEyes.length; j++) {\\r\\n            for (uint8 i = 0; i < apeEyes.length; i++) {\\r\\n                arrayOfAvailableMintCombinations.push(mintCombination(j, i));\\r\\n                maxTokenSupply += 1;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function nrOfAvailableMintCombinations() public view returns (uint8) {\\r\\n        return uint8(arrayOfAvailableMintCombinations.length);\\r\\n    }\\r\\n\\r\\n    function endMintReduceTotalSupply(uint8 _TokensAlreadyMinted)\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns (uint8)\\r\\n    {\\r\\n        require(!mintWasReduced);\\r\\n        //reducing the total supply leads to 0 nfts left->fires require statement\\r\\n        maxTokenSupply = _TokensAlreadyMinted + 3; //+3 = leave 3 apes for the top3 donators, they need to be delivered\\r\\n        //need to set the last 3 special apes to the next 3 tokenIds because they are reserved for the top3Donators\\r\\n        uint256 nrOfExistingSpecialApes = ast_specialApeDetails.length;\\r\\n        for (uint8 i = 1; i <= 3; i++) {\\r\\n            ast_specialApeDetails[nrOfExistingSpecialApes - i]\\r\\n                .apeCoreElements\\r\\n                .tokenId = maxTokenSupply - i;\\r\\n        }\\r\\n        emit mintEndedSupplyReduced(maxTokenSupply);\\r\\n        mintWasReduced = true;\\r\\n        return (maxTokenSupply);\\r\\n    }\\r\\n\\r\\n    function removeMintCombinationUnordered(uint256 _indexToRemove)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _indexToRemove <= arrayOfAvailableMintCombinations.length ||\\r\\n                arrayOfAvailableMintCombinations.length > 0,\\r\\n            \\\"index out of range\\\"\\r\\n        );\\r\\n        if (_indexToRemove == arrayOfAvailableMintCombinations.length - 1) {\\r\\n            arrayOfAvailableMintCombinations.pop();\\r\\n        } else {\\r\\n            arrayOfAvailableMintCombinations[\\r\\n                _indexToRemove\\r\\n            ] = arrayOfAvailableMintCombinations[\\r\\n                arrayOfAvailableMintCombinations.length - 1\\r\\n            ];\\r\\n            arrayOfAvailableMintCombinations.pop();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addSpecialApes() private {\\r\\n        ast_specialApeDetails.push(\\r\\n            st_SpecialApe(\\r\\n                st_apeCoreElements(0, 9, 9, 0, 0),\\r\\n                \\\"Zero the first ever minted 0 eyed ape #0\\\",\\r\\n                \\\"#6fd1c4\\\" //downy colored\\r\\n            )\\r\\n        );\\r\\n\\r\\n        //ice ape #00bdc7\\r\\n        ast_specialApeDetails.push(\\r\\n            st_SpecialApe(\\r\\n                st_apeCoreElements(40, 5, 5, 0, 0),\\r\\n                \\\"Icy the glowing happy eyed frozen ape #40\\\",\\r\\n                \\\"#00bdc7\\\" //ice blue\\r\\n            )\\r\\n        );\\r\\n\\r\\n        ast_specialApeDetails.push(\\r\\n            st_SpecialApe(\\r\\n                st_apeCoreElements(80, 2, 2, 0, 0),\\r\\n                \\\"Harry the banana power love eyed ape #80\\\",\\r\\n                \\\"#c7ba00\\\" //banana yellow\\r\\n            )\\r\\n        );\\r\\n\\r\\n        ast_specialApeDetails.push(\\r\\n            st_SpecialApe(\\r\\n                st_apeCoreElements(120, 0, 0, 1, 1),\\r\\n                \\\"Piu the golden empty eyed ape #120\\\",\\r\\n                \\\"#ffd900\\\" //golden\\r\\n            )\\r\\n        );\\r\\n\\r\\n        ast_specialApeDetails.push(\\r\\n            st_SpecialApe(\\r\\n                st_apeCoreElements(160, 12, 11, 0, 0),\\r\\n                \\\"ApeNorris the angry eyed rarest toughest mf ape #160\\\",\\r\\n                \\\"#ff230a\\\" //red\\r\\n            )\\r\\n        );\\r\\n\\r\\n        ast_specialApeDetails.push(\\r\\n            st_SpecialApe(\\r\\n                st_apeCoreElements(201, 9, 9, 2, 2),\\r\\n                \\\"Carl the dead invisible ape #201\\\",\\r\\n                \\\"#000000\\\" //black->invisible\\r\\n            )\\r\\n        );\\r\\n        //last 3 special apes, mintable only from top3 donators\\r\\n        ast_specialApeDetails.push(\\r\\n            st_SpecialApe(\\r\\n                st_apeCoreElements(202, 7, 7, 1, 1),\\r\\n                \\\"Satoshi the btc eyed ape #202\\\",\\r\\n                \\\"#ff33cc\\\" //pink\\r\\n            )\\r\\n        );\\r\\n\\r\\n        ast_specialApeDetails.push(\\r\\n            st_SpecialApe(\\r\\n                st_apeCoreElements(203, 8, 8, 2, 2),\\r\\n                \\\"Vitalik the eth eyed ape #203\\\",\\r\\n                \\\"#ffd900\\\" //gold\\r\\n            )\\r\\n        );\\r\\n\\r\\n        ast_specialApeDetails.push(\\r\\n            st_SpecialApe(\\r\\n                st_apeCoreElements(204, 13, 13, 0, 0),\\r\\n                \\\"Dollari the inflationary dollar eyed ape #204\\\",\\r\\n                \\\"#ff0000\\\" //red\\r\\n            )\\r\\n        );\\r\\n\\r\\n        //Add special apes to max token supply\\r\\n        maxTokenSupply += uint8(ast_specialApeDetails.length);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return maxTokenSupply;\\r\\n    }\\r\\n\\r\\n    function genNameAndSymmetry(uint8 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        require(\\r\\n            id_to_apeDefiningElements[_tokenId].apeNameIndex < 13 && /*gas optimized, not apeName.length used */\\r\\n                id_to_apeDefiningElements[_tokenId].eyeIndexLeft < 14, /*gas optimized, not apeEyes.length used */\\r\\n            \\\"invalid index\\\"\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            id_to_apeDefiningElements[_tokenId].specialApeIndex <=\\r\\n            maxTokenSupply\\r\\n        ) {\\r\\n            return (\\r\\n                abi.encodePacked(\\r\\n                    ast_specialApeDetails[\\r\\n                        id_to_apeDefiningElements[_tokenId].specialApeIndex\\r\\n                    ].name,\\r\\n                    '\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Facesymmetry\\\",\\\"value\\\":\\\"',\\r\\n                    \\\"100\\\"\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        string[13] memory apeNames = [\\r\\n            \\\"Arti\\\",\\r\\n            \\\"Abu\\\",\\r\\n            \\\"Aldo\\\",\\r\\n            \\\"Bingo\\\",\\r\\n            \\\"Krabs\\\",\\r\\n            \\\"DC\\\",\\r\\n            \\\"Groot\\\",\\r\\n            \\\"Phaedrus\\\",\\r\\n            \\\"D-Sasta\\\",\\r\\n            \\\"Doxed\\\",\\r\\n            \\\"Kinay\\\",\\r\\n            \\\"Kodiak\\\",\\r\\n            \\\"Cophi\\\"\\r\\n        ];\\r\\n\\r\\n        string[14] memory apeEyeDescription = [\\r\\n            \\\"dead\\\",\\r\\n            \\\"blind\\\",\\r\\n            \\\"heart\\\",\\r\\n            \\\"peek\\\",\\r\\n            \\\"wink\\\",\\r\\n            \\\"grin\\\",\\r\\n            \\\"cross\\\",\\r\\n            \\\"btc\\\",\\r\\n            \\\"eth\\\",\\r\\n            \\\"zero\\\",\\r\\n            \\\"brow\\\",\\r\\n            \\\"small\\\",\\r\\n            \\\"small\\\",\\r\\n            \\\"dollar\\\"\\r\\n        ];\\r\\n\\r\\n        string memory eyePrefix;\\r\\n        string memory faceSymmetry;\\r\\n        if (\\r\\n            id_to_apeDefiningElements[_tokenId].eyeIndexLeft ==\\r\\n            id_to_apeDefiningElements[_tokenId].eyeIndexRight\\r\\n        ) {\\r\\n            eyePrefix = string(\\r\\n                abi.encodePacked(\\r\\n                    \\\" the full \\\",\\r\\n                    apeEyeDescription[\\r\\n                        id_to_apeDefiningElements[_tokenId].eyeIndexLeft\\r\\n                    ],\\r\\n                    \\\" eyed ascii ape\\\"\\r\\n                )\\r\\n            );\\r\\n            faceSymmetry = \\\"100\\\";\\r\\n        } else {\\r\\n            eyePrefix = string(\\r\\n                abi.encodePacked(\\r\\n                    \\\" the half \\\",\\r\\n                    apeEyeDescription[\\r\\n                        id_to_apeDefiningElements[_tokenId].eyeIndexLeft\\r\\n                    ],\\r\\n                    \\\" half \\\",\\r\\n                    apeEyeDescription[\\r\\n                        id_to_apeDefiningElements[_tokenId].eyeIndexRight\\r\\n                    ],\\r\\n                    \\\" eyed ascii ape\\\"\\r\\n                )\\r\\n            );\\r\\n            faceSymmetry = \\\"50\\\";\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            abi.encodePacked(\\r\\n                apeNames[id_to_apeDefiningElements[_tokenId].apeNameIndex],\\r\\n                eyePrefix,\\r\\n                \\\" #\\\",\\r\\n                Strings.toString(_tokenId),\\r\\n                '\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Facesymmetry\\\",\\\"value\\\":\\\"',\\r\\n                faceSymmetry\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function generateSpecialApeSvg(\\r\\n        uint8 _specialApeIndex,\\r\\n        string memory textFillToEye\\r\\n    ) private view returns (string memory) {\\r\\n        string[3] memory eyeColor = ['ff1414\\\">', 'ffd700\\\">', 'ff33cc\\\">']; //red, gold, pink\\r\\n\\r\\n        return (\\r\\n            Base64.encode(\\r\\n                abi.encodePacked(\\r\\n                    '<svg width=\\\"500\\\" height=\\\"500\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect height=\\\"500\\\" width=\\\"500\\\" fill=\\\"black\\\"/><text y=\\\"10%\\\" fill=\\\"',\\r\\n                    ast_specialApeDetails[_specialApeIndex].apeColor,\\r\\n                    textFillToEye,\\r\\n                    eyeColor[\\r\\n                        ast_specialApeDetails[_specialApeIndex]\\r\\n                            .apeCoreElements\\r\\n                            .eyeColorIndexLeft\\r\\n                    ],\\r\\n                    apeEyes[\\r\\n                        ast_specialApeDetails[_specialApeIndex]\\r\\n                            .apeCoreElements\\r\\n                            .eyeIndexLeft\\r\\n                    ],\\r\\n                    '</tspan>&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;<tspan fill=\\\"#',\\r\\n                    eyeColor[\\r\\n                        ast_specialApeDetails[_specialApeIndex]\\r\\n                            .apeCoreElements\\r\\n                            .eyeColorIndexRight\\r\\n                    ],\\r\\n                    apeEyes[\\r\\n                        ast_specialApeDetails[_specialApeIndex]\\r\\n                            .apeCoreElements\\r\\n                            .eyeIndexRight\\r\\n                    ],\\r\\n                    svgEyeToEnd\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function generateApeSvg(uint8 _tokenId, string memory textFillToEye)\\r\\n        private\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string[3] memory eyeColor = ['ff1414\\\">', 'ffd700\\\">', 'ff33cc\\\">']; //red, gold, pink\\r\\n\\r\\n        return (\\r\\n            Base64.encode(\\r\\n                abi.encodePacked(\\r\\n                    '<svg width=\\\"500\\\" height=\\\"500\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect height=\\\"500\\\" width=\\\"500\\\" fill=\\\"black\\\"/><text y=\\\"10%\\\" fill=\\\"', //start to textFill\\r\\n                    \\\"#ffffff\\\",\\r\\n                    textFillToEye,\\r\\n                    eyeColor[\\r\\n                        id_to_apeDefiningElements[_tokenId].eyeColorIndexLeft\\r\\n                    ],\\r\\n                    apeEyes[id_to_apeDefiningElements[_tokenId].eyeIndexLeft],\\r\\n                    '</tspan>&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;<tspan fill=\\\"#',\\r\\n                    eyeColor[\\r\\n                        id_to_apeDefiningElements[_tokenId].eyeColorIndexRight\\r\\n                    ],\\r\\n                    apeEyes[id_to_apeDefiningElements[_tokenId].eyeIndexRight],\\r\\n                    svgEyeToEnd\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function registerApe(\\r\\n        uint8 _specialApeIndex,\\r\\n        uint8 _randomNumber,\\r\\n        uint8 eyeColorIndexLeft,\\r\\n        uint8 eyeColorIndexRight,\\r\\n        uint8 tokenId,\\r\\n        uint8 _apeNameIndex,\\r\\n        uint8 bananascore\\r\\n    ) public onlyOwner returns (bool) {\\r\\n        require(tokenId >= 0 && tokenId < maxTokenSupply, \\\"invalid tokenId\\\");\\r\\n        if (_specialApeIndex <= maxTokenSupply) {\\r\\n            //special ape\\r\\n            id_to_apeDefiningElements[tokenId] = st_apeDefiningElements(\\r\\n                _specialApeIndex,\\r\\n                0,\\r\\n                0,\\r\\n                0,\\r\\n                0,\\r\\n                tokenId,\\r\\n                0,\\r\\n                bananascore\\r\\n            );\\r\\n        } else {\\r\\n            id_to_apeDefiningElements[tokenId] = st_apeDefiningElements(\\r\\n                _specialApeIndex,\\r\\n                arrayOfAvailableMintCombinations[_randomNumber].eyeIndexLeft,\\r\\n                arrayOfAvailableMintCombinations[_randomNumber].eyeIndexRight,\\r\\n                eyeColorIndexLeft,\\r\\n                eyeColorIndexRight,\\r\\n                tokenId,\\r\\n                _apeNameIndex,\\r\\n                bananascore\\r\\n            );\\r\\n        }\\r\\n        return (true);\\r\\n    }\\r\\n\\r\\n    function getTokenURI(uint8 tokenId) public view returns (string memory) {\\r\\n        require(\\r\\n            id_to_apeDefiningElements[tokenId].bananascore != 0,\\r\\n            \\\"invalid tokenId\\\"\\r\\n        ); //ape not registered/minted or tokenId invalid\\r\\n        string\\r\\n            memory textFillToEye = '\\\" text-anchor=\\\"start\\\" font-size=\\\"18\\\" xml:space=\\\"preserve\\\" font-family=\\\"monospace\\\"><tspan x=\\\"43.75%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#xd;</tspan><tspan x=\\\"39.75%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2588;&#x2588;&#x2588;&#x2588;&#xd;</tspan><tspan x=\\\"35.75%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2591;&#x2591;&#x2591;&#x2591;&#x2593;&#x2593;&#x2593;&#x2593;&#x2591;&#x2591;&#x2588;&#x2588;&#xd;</tspan><tspan x=\\\"31.75%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2588;&#x2588;&#xd;</tspan><tspan x=\\\"31.75%\\\" dy=\\\"1.2em\\\">&#x2588;&#x2588;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2593;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;&#x2591;<tspan fill=\\\"#';\\r\\n\\r\\n        string memory generatedApeSvg;\\r\\n        if (\\r\\n            id_to_apeDefiningElements[tokenId].specialApeIndex <= maxTokenSupply\\r\\n        ) {\\r\\n            generatedApeSvg = generateSpecialApeSvg(\\r\\n                id_to_apeDefiningElements[tokenId].specialApeIndex,\\r\\n                textFillToEye\\r\\n            );\\r\\n        } else {\\r\\n            generatedApeSvg = generateApeSvg(tokenId, textFillToEye);\\r\\n        }\\r\\n        return (\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(\\r\\n                        abi.encodePacked(\\r\\n                            '{\\\"description\\\":\\\"Fully onchain generated AsciiApe\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,',\\r\\n                            generatedApeSvg,\\r\\n                            apeAttributes(tokenId)\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function apeAttributes(uint8 _tokenId) public view returns (bytes memory) {\\r\\n        bytes memory nameAndSymmetry;\\r\\n        string memory apeColor;\\r\\n        if (\\r\\n            id_to_apeDefiningElements[_tokenId].specialApeIndex <=\\r\\n            maxTokenSupply\\r\\n        ) {\\r\\n            //special ape\\r\\n            apeColor = ast_specialApeDetails[\\r\\n                id_to_apeDefiningElements[_tokenId].specialApeIndex\\r\\n            ].apeColor;\\r\\n        } else {\\r\\n            apeColor = \\\"#ffffff\\\";\\r\\n        }\\r\\n        nameAndSymmetry = genNameAndSymmetry(_tokenId);\\r\\n\\r\\n        string[3] memory eyeColor = [\\\"#ff1414\\\", \\\"#ffd700\\\", \\\"#ff33cc\\\"]; //red, gold, pink\\r\\n        return (\\r\\n            abi.encodePacked(\\r\\n                '\\\",\\\"name\\\":\\\"',\\r\\n                nameAndSymmetry,\\r\\n                '\\\"},{\\\"trait_type\\\":\\\"EyeLeft\\\",\\\"value\\\":\\\"',\\r\\n                apeEyes[id_to_apeDefiningElements[_tokenId].eyeIndexLeft],\\r\\n                '\\\"},{\\\"trait_type\\\":\\\"EyeRight\\\",\\\"value\\\":\\\"',\\r\\n                apeEyes[id_to_apeDefiningElements[_tokenId].eyeIndexRight],\\r\\n                '\\\"},{\\\"trait_type\\\":\\\"EyeColorLeft\\\",\\\"value\\\":\\\"',\\r\\n                eyeColor[id_to_apeDefiningElements[_tokenId].eyeColorIndexLeft],\\r\\n                '\\\"},{\\\"trait_type\\\":\\\"EyeColorRight\\\",\\\"value\\\":\\\"',\\r\\n                eyeColor[\\r\\n                    id_to_apeDefiningElements[_tokenId].eyeColorIndexRight\\r\\n                ],\\r\\n                '\\\"},{\\\"trait_type\\\":\\\"ApeColor\\\",\\\"value\\\":\\\"',\\r\\n                apeColor,\\r\\n                '\\\"},{\\\"trait_type\\\":\\\"BananaScore\\\",\\\"value\\\":\\\"',\\r\\n                Strings.toString(\\r\\n                    id_to_apeDefiningElements[_tokenId].bananascore\\r\\n                ),\\r\\n                '\\\"}]}'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides functions for encoding/decoding base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\r\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\r\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\r\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return '';\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE_ENCODE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n                // read 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\r\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\r\\n        bytes memory data = bytes(_data);\\r\\n\\r\\n        if (data.length == 0) return new bytes(0);\\r\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\r\\n\\r\\n        // load the table into memory\\r\\n        bytes memory table = TABLE_DECODE;\\r\\n\\r\\n        // every 4 characters represent 3 bytes\\r\\n        uint256 decodedLen = (data.length / 4) * 3;\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        bytes memory result = new bytes(decodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // padding with '='\\r\\n            let lastBytes := mload(add(data, mload(data)))\\r\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\r\\n                decodedLen := sub(decodedLen, 1)\\r\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\r\\n                    decodedLen := sub(decodedLen, 1)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // set the actual output length\\r\\n            mstore(result, decodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 4 characters at a time\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n               // read 4 characters\\r\\n               dataPtr := add(dataPtr, 4)\\r\\n               let input := mload(dataPtr)\\r\\n\\r\\n               // write 3 bytes\\r\\n               let output := add(\\r\\n                   add(\\r\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\r\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\r\\n                   add(\\r\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\r\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\r\\n                    )\\r\\n                )\\r\\n                mstore(resultPtr, shl(232, output))\\r\\n                resultPtr := add(resultPtr, 3)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newTotalSupply\",\"type\":\"uint8\"}],\"name\":\"mintEndedSupplyReduced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"}],\"name\":\"apeAttributes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_TokensAlreadyMinted\",\"type\":\"uint8\"}],\"name\":\"endMintReduceTotalSupply\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"}],\"name\":\"genNameAndSymmetry\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"getSpecialApeIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"getTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nrOfAvailableMintCombinations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nrOfSpecialApes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_specialApeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_randomNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyeColorIndexLeft\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyeColorIndexRight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_apeNameIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bananascore\",\"type\":\"uint8\"}],\"name\":\"registerApe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_indexToRemove\",\"type\":\"uint256\"}],\"name\":\"removeMintCombinationUnordered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ApeGenerator", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}