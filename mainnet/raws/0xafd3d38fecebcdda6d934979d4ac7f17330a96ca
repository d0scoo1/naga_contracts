{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts\\interfaces\\MathUtil.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUtil {\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IBooster.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IBooster {\r\n   function addPool(address _implementation, address _stakingAddress, address _stakingToken) external;\r\n   function deactivatePool(uint256 _pid) external;\r\n   function voteGaugeWeight(address _controller, address _gauge, uint256 _weight) external;\r\n   function setDelegate(address _delegateContract, address _delegate, bytes32 _space) external;\r\n   function owner() external returns(address);\r\n   function rewardManager() external returns(address);\r\n}\r\n\r\n// File: contracts\\interfaces\\IVoterProxy.sol\r\npragma solidity 0.8.10;\r\n\r\ninterface IVoterProxy{\r\n    function operator() external view returns(address);\r\n}\r\n\r\n// File: contracts\\interfaces\\IPoolRegistry.sol\r\npragma solidity 0.8.10;\r\n\r\ninterface IPoolRegistry {\r\n    function poolLength() external view returns(uint256);\r\n    function poolInfo(uint256 _pid) external view returns(address, address, address, uint8);\r\n    function vaultMap(uint256 _pid, address _user) external view returns(address vault);\r\n    function addUserVault(uint256 _pid, address _user) external returns(address vault, address stakeAddress, address stakeToken, address rewards);\r\n    function deactivatePool(uint256 _pid) external;\r\n    function addPool(address _implementation, address _stakingAddress, address _stakingToken) external;\r\n    function setRewardActiveOnCreation(bool _active) external;\r\n    function setRewardImplementation(address _imp) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IRewards.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IRewards{\r\n    struct EarnedData {\r\n        address token;\r\n        uint256 amount;\r\n    }\r\n    \r\n    function initialize(uint256 _pid, bool _startActive) external;\r\n    function addReward(address _rewardsToken, address _distributor) external;\r\n    function approveRewardDistributor(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _approved\r\n    ) external;\r\n    function deposit(address _owner, uint256 _amount) external;\r\n    function withdraw(address _owner, uint256 _amount) external;\r\n    function getReward(address _forward) external;\r\n    function notifyRewardAmount(address _rewardsToken, uint256 _reward) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function claimableRewards(address _account) external view returns(EarnedData[] memory userRewards);\r\n    function rewardTokens(uint256 _rid) external view returns (address);\r\n    function rewardTokenLength() external view returns(uint256);\r\n    function active() external view returns(bool);\r\n}\r\n\r\n// File: contracts\\interfaces\\IRewardHook.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IRewardHook{\r\n    enum HookType{\r\n        Deposit,\r\n        Withdraw,\r\n        RewardClaim\r\n    }\r\n    \r\n    function onRewardClaim(HookType _type, uint256 _pid) external;\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\MultiRewards.sol\r\n\r\npragma solidity 0.8.10;\r\ncontract MultiRewards is IRewards{\r\n    using SafeERC20 for IERC20;\r\n\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    struct Reward {\r\n        uint256 periodFinish;\r\n        uint256 rewardRate;\r\n        uint256 lastUpdateTime;\r\n        uint256 rewardPerTokenStored;\r\n    }\r\n\r\n    address public constant vefxsProxy = address(0x59CFCD384746ec3035299D90782Be065e466800B);\r\n\r\n    //allow an address to be call at certain events so that\r\n    //reward emissions etc can be automated\r\n    address public rewardHook;\r\n\r\n    //rewards\r\n    address[] public rewardTokens;\r\n    mapping(address => Reward) public rewardData;\r\n\r\n    // Duration that rewards are streamed over\r\n    uint256 public constant rewardsDuration = 86400 * 7;\r\n\r\n    // reward token -> distributor -> is approved to add rewards\r\n    mapping(address => mapping(address => bool)) public rewardDistributors;\r\n\r\n    // user -> reward token -> amount\r\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\r\n    mapping(address => mapping(address => uint256)) public rewards;\r\n\r\n  \r\n    //mappings for balance data\r\n    mapping(address => uint256) public balances;\r\n    uint256 public totalSupply;\r\n \r\n    address public immutable poolRegistry;\r\n    uint256 public poolId;\r\n    bool public active;\r\n    bool public init;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(address _poolRegistry) {\r\n        poolRegistry = _poolRegistry;\r\n    }\r\n\r\n    function initialize(uint256 _pid, bool _startActive) external{\r\n        require(!init,\"already init\");\r\n\r\n        //set variables\r\n        poolId = _pid;\r\n        if(_startActive){\r\n            active = true;\r\n        }\r\n        init = true;\r\n    }\r\n\r\n    /* ========== ADMIN CONFIGURATION ========== */\r\n\r\n    //turn on rewards contract\r\n    function setActive() external onlyOwner{\r\n        active = true;\r\n        emit Activate();\r\n    }\r\n\r\n    // Add a new reward token to be distributed to stakers\r\n    function addReward(\r\n        address _rewardsToken,\r\n        address _distributor\r\n    ) public onlyOwner {\r\n        require(active, \"!active\");\r\n        require(rewardData[_rewardsToken].lastUpdateTime == 0);\r\n\r\n        rewardTokens.push(_rewardsToken);\r\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\r\n        rewardData[_rewardsToken].periodFinish = block.timestamp;\r\n        rewardDistributors[_rewardsToken][_distributor] = true;\r\n        emit RewardAdded(_rewardsToken, _distributor);\r\n    }\r\n\r\n    // Modify approval for an address to call notifyRewardAmount\r\n    function approveRewardDistributor(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _approved\r\n    ) external onlyOwner {\r\n        require(rewardData[_rewardsToken].lastUpdateTime > 0);\r\n        rewardDistributors[_rewardsToken][_distributor] = _approved;\r\n        emit RewardDistributorApproved(_rewardsToken, _distributor);\r\n    }\r\n\r\n    function setRewardHook( address _hook ) external onlyOwner{\r\n        rewardHook = _hook;\r\n        emit HookSet(_hook);\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function deposit(address _owner, uint256 _amount) external updateReward(msg.sender){\r\n        //only allow registered vaults to call\r\n        require(IPoolRegistry(poolRegistry).vaultMap(poolId,_owner) == msg.sender, \"!auth\");\r\n\r\n        balances[msg.sender] += _amount;\r\n        totalSupply += _amount;\r\n        emit Deposited(msg.sender, _amount);\r\n\r\n        if(rewardHook != address(0)){\r\n            try IRewardHook(rewardHook).onRewardClaim(IRewardHook.HookType.Deposit, poolId){\r\n            }catch{}\r\n        }\r\n    }\r\n\r\n    function withdraw(address _owner, uint256 _amount) external updateReward(msg.sender){\r\n        //only allow registered vaults to call\r\n        require(IPoolRegistry(poolRegistry).vaultMap(poolId,_owner) == msg.sender, \"!auth\");\r\n\r\n        balances[msg.sender] -= _amount;\r\n        totalSupply -= _amount;\r\n        emit Withdrawn(msg.sender, _amount);\r\n\r\n        if(rewardHook != address(0)){\r\n            try IRewardHook(rewardHook).onRewardClaim(IRewardHook.HookType.Withdraw, poolId){\r\n            }catch{}\r\n        }\r\n    }\r\n\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function _rewardPerToken(address _rewardsToken) internal view returns(uint256) {\r\n        if (totalSupply == 0) {\r\n            return rewardData[_rewardsToken].rewardPerTokenStored;\r\n        }\r\n        return\r\n        rewardData[_rewardsToken].rewardPerTokenStored \r\n        + (\r\n            (_lastTimeRewardApplicable(rewardData[_rewardsToken].periodFinish) - rewardData[_rewardsToken].lastUpdateTime)     \r\n            * rewardData[_rewardsToken].rewardRate\r\n            * 1e18\r\n            / totalSupply\r\n        );\r\n    }\r\n\r\n    function _earned(\r\n        address _user,\r\n        address _rewardsToken,\r\n        uint256 _balance\r\n    ) internal view returns(uint256) {\r\n        return (_balance * (_rewardPerToken(_rewardsToken) - userRewardPerTokenPaid[_user][_rewardsToken] ) / 1e18) + rewards[_user][_rewardsToken];\r\n    }\r\n\r\n    function _lastTimeRewardApplicable(uint256 _finishTime) internal view returns(uint256){\r\n        return MathUtil.min(block.timestamp, _finishTime);\r\n    }\r\n\r\n    function lastTimeRewardApplicable(address _rewardsToken) public view returns(uint256) {\r\n        return _lastTimeRewardApplicable(rewardData[_rewardsToken].periodFinish);\r\n    }\r\n\r\n    function rewardPerToken(address _rewardsToken) external view returns(uint256) {\r\n        return _rewardPerToken(_rewardsToken);\r\n    }\r\n\r\n    function getRewardForDuration(address _rewardsToken) external view returns(uint256) {\r\n        return rewardData[_rewardsToken].rewardRate * rewardsDuration;\r\n    }\r\n\r\n    // Address and claimable amount of all reward tokens for the given account\r\n    function claimableRewards(address _account) external view returns(EarnedData[] memory userRewards) {\r\n        userRewards = new EarnedData[](rewardTokens.length);\r\n        for (uint256 i = 0; i < userRewards.length; i++) {\r\n            address token = rewardTokens[i];\r\n            userRewards[i].token = token;\r\n            userRewards[i].amount = _earned(_account, token,  balances[_account]);\r\n        }\r\n        return userRewards;\r\n    }\r\n\r\n    function balanceOf(address _user) view external returns(uint256 amount) {\r\n        return balances[_user];\r\n    }\r\n\r\n    // Claim all pending rewards\r\n    function getReward(address _forward) public updateReward(msg.sender) {\r\n        for (uint i; i < rewardTokens.length; i++) {\r\n            address _rewardsToken = rewardTokens[i];\r\n            uint256 reward = rewards[msg.sender][_rewardsToken];\r\n            if (reward > 0) {\r\n                rewards[msg.sender][_rewardsToken] = 0;\r\n                IERC20(_rewardsToken).safeTransfer(_forward, reward);\r\n                emit RewardPaid(msg.sender, _rewardsToken, reward);\r\n            }\r\n        }\r\n        if(rewardHook != address(0)){\r\n            try IRewardHook(rewardHook).onRewardClaim(IRewardHook.HookType.RewardClaim, poolId){\r\n            }catch{}\r\n        }\r\n    }\r\n\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function rewardTokenLength() external view returns(uint256){\r\n        return rewardTokens.length;\r\n    }\r\n\r\n    function _notifyReward(address _rewardsToken, uint256 _reward) internal {\r\n        Reward storage rdata = rewardData[_rewardsToken];\r\n\r\n        if (block.timestamp >= rdata.periodFinish) {\r\n            rdata.rewardRate = _reward / rewardsDuration;\r\n        } else {\r\n            uint256 remaining = rdata.periodFinish - block.timestamp;\r\n            uint256 leftover = remaining * rdata.rewardRate;\r\n            rdata.rewardRate = (_reward + leftover) / rewardsDuration;\r\n        }\r\n\r\n        rdata.lastUpdateTime = block.timestamp;\r\n        rdata.periodFinish = block.timestamp + rewardsDuration;\r\n    }\r\n\r\n    function notifyRewardAmount(address _rewardsToken, uint256 _reward) external updateReward(address(0)) {\r\n        require(rewardDistributors[_rewardsToken][msg.sender]);\r\n        require(_reward > 0, \"No reward\");\r\n\r\n        _notifyReward(_rewardsToken, _reward);\r\n\r\n        // handle the transfer of reward tokens via `transferFrom` to reduce the number\r\n        // of transactions required and ensure correctness of the _reward amount\r\n        IERC20(_rewardsToken).safeTransferFrom(msg.sender, address(this), _reward);\r\n        \r\n        emit RewardAdded(_rewardsToken, _reward);\r\n    }\r\n\r\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\r\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n        require(rewardData[_tokenAddress].lastUpdateTime == 0, \"Cannot withdraw reward token\");\r\n        IERC20(_tokenAddress).safeTransfer(IBooster(IVoterProxy(vefxsProxy).operator()).rewardManager(), _tokenAmount);\r\n        emit Recovered(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyOwner() {\r\n        require(IBooster(IVoterProxy(vefxsProxy).operator()).rewardManager() == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    modifier updateReward(address _account) {\r\n        uint256 userBal = balances[_account];\r\n        for (uint i = 0; i < rewardTokens.length; i++) {\r\n            address token = rewardTokens[i];\r\n            rewardData[token].rewardPerTokenStored = _rewardPerToken(token);\r\n            rewardData[token].lastUpdateTime = _lastTimeRewardApplicable(rewardData[token].periodFinish);\r\n            if (_account != address(0)) {\r\n                rewards[_account][token] = _earned(_account, token, userBal );\r\n                userRewardPerTokenPaid[_account][token] = rewardData[token].rewardPerTokenStored;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    event RewardAdded(address indexed _token, uint256 _reward);\r\n    event Deposited(address indexed _user, uint256 _amount);\r\n    event Withdrawn(address indexed _user, uint256 _amount);\r\n    event RewardPaid(address indexed _user, address indexed _rewardsToken, uint256 _reward);\r\n    event Recovered(address _token, uint256 _amount);\r\n    event HookSet(address _hook);\r\n    event Activate();\r\n    event RewardAdded(address indexed _reward, address indexed _distributor);\r\n    event RewardDistributorApproved(address indexed _reward, address indexed _distributor);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Activate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"HookSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"RewardDistributorApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewards.EarnedData[]\",\"name\":\"userRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forward\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_startActive\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDistributors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"setRewardHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vefxsProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiRewards", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000041a5881c17185383e19df6fa4ec158a6f4851a69", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://49f33b8d0969267ce5966db3f134a7ecd2f325d39a7d92854280de34351d06c2"}]}