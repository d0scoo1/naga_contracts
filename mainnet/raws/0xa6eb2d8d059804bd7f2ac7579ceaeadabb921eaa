{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.12;\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFeeDB {\r\n    event UpdateFeeAndRecipient(uint256 newFee, address newRecipient);\r\n    event UpdatePaysFeeWhenSending(bool newType);\r\n\r\n    function protocolFee() external view returns (uint256);\r\n\r\n    function protocolFeeRecipient() external view returns (address);\r\n\r\n    function paysFeeWhenSending() external view returns (bool);\r\n\r\n    function userDiscountRate(address user) external view returns (uint256);\r\n\r\n    function userFee(address user, uint256 amount, address nft) external view returns (uint256);\r\n}\r\n\r\ninterface IAPMReservoir {\r\n    function token() external returns (address);\r\n\r\n    event AddSigner(address signer);\r\n    event RemoveSigner(address signer);\r\n    event UpdateFeeDB(IFeeDB newFeeDB);\r\n    event UpdateQuorum(uint256 newQuorum);\r\n    event SendToken(\r\n        address indexed sender,\r\n        uint256 indexed toChainId,\r\n        address indexed receiver,\r\n        uint256 amount,\r\n        uint256 sendingId,\r\n        bool isFeeCollected\r\n    );\r\n    event ReceiveToken(\r\n        address indexed sender,\r\n        uint256 indexed fromChainId,\r\n        address indexed receiver,\r\n        uint256 amount,\r\n        uint256 sendingId\r\n    );\r\n\r\n    function signers(uint256 id) external view returns (address);\r\n\r\n    function signerIndex(address signer) external view returns (uint256);\r\n\r\n    function quorum() external view returns (uint256);\r\n\r\n    function feeDB() external view returns (IFeeDB);\r\n\r\n    function signersLength() external view returns (uint256);\r\n\r\n    function isSigner(address signer) external view returns (bool);\r\n\r\n    function sendingData(\r\n        address sender,\r\n        uint256 toChainId,\r\n        address receiver,\r\n        uint256 sendingId\r\n    ) external view returns (uint256 sendedAmount, uint256 sendingBlock);\r\n\r\n    function isTokenReceived(\r\n        address sender,\r\n        uint256 fromChainId,\r\n        address receiver,\r\n        uint256 sendingId\r\n    ) external view returns (bool);\r\n\r\n    function sendingCounts(\r\n        address sender,\r\n        uint256 toChainId,\r\n        address receiver\r\n    ) external view returns (uint256);\r\n\r\n    function sendToken(\r\n        uint256 toChainId,\r\n        address receiver,\r\n        uint256 amount,\r\n        address nft\r\n    ) external returns (uint256 sendingId);\r\n\r\n    function receiveToken(\r\n        address sender,\r\n        uint256 fromChainId,\r\n        address receiver,\r\n        uint256 amount,\r\n        uint256 sendingId,\r\n        bool isFeePayed,\r\n        address nft,\r\n        uint8[] calldata vs,\r\n        bytes32[] calldata rs,\r\n        bytes32[] calldata ss\r\n    ) external;\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Signature {\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address signer) {\r\n        require(\r\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\r\n            \"invalid signature 's' value\"\r\n        );\r\n        require(v == 27 || v == 28, \"invalid signature 'v' value\");\r\n\r\n        signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"invalid signature\");\r\n    }\r\n}\r\n\r\ncontract APMReservoir is Ownable, IAPMReservoir {\r\n    using SafeMath for uint256;\r\n\r\n    address[] public signers;\r\n    mapping(address => uint256) public signerIndex;\r\n    uint256 public signingNonce;\r\n    uint256 public quorum;\r\n\r\n    IFeeDB public feeDB;\r\n    address public token;\r\n\r\n    constructor(\r\n        address _token,\r\n        uint256 _quorum,\r\n        address[] memory _signers\r\n    ) {\r\n        require(_token != address(0));\r\n        token = _token;\r\n\r\n        require(_quorum > 0);\r\n        quorum = _quorum;\r\n        emit UpdateQuorum(_quorum);\r\n\r\n        require(_signers.length >= _quorum);\r\n        signers = _signers;\r\n\r\n        for (uint256 i = 0; i < _signers.length; i++) {\r\n            address signer = _signers[i];\r\n            require(signer != address(0));\r\n            require(signerIndex[signer] == 0);\r\n\r\n            if (i > 0) require(signer != _signers[0]);\r\n\r\n            signerIndex[signer] = i;\r\n            emit AddSigner(signer);\r\n        }\r\n    }\r\n\r\n    function signersLength() public view returns (uint256) {\r\n        return signers.length;\r\n    }\r\n\r\n    function isSigner(address signer) public view returns (bool) {\r\n        return (signerIndex[signer] > 0) || (signers[0] == signer);\r\n    }\r\n\r\n    function _checkSigners(\r\n        bytes32 message,\r\n        uint8[] memory vs,\r\n        bytes32[] memory rs,\r\n        bytes32[] memory ss\r\n    ) private view {\r\n        uint256 length = vs.length;\r\n        require(length == rs.length && length == ss.length);\r\n        require(length >= quorum);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(isSigner(Signature.recover(message, vs[i], rs[i], ss[i])));\r\n        }\r\n    }\r\n\r\n    function addSigner(\r\n        address signer,\r\n        uint8[] memory vs,\r\n        bytes32[] memory rs,\r\n        bytes32[] memory ss\r\n    ) public {\r\n        require(signer != address(0));\r\n        require(!isSigner(signer));\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(\"addSigner\", block.chainid, signingNonce++));\r\n        bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        _checkSigners(message, vs, rs, ss);\r\n\r\n        signerIndex[signer] = signersLength();\r\n        signers.push(signer);\r\n        emit AddSigner(signer);\r\n    }\r\n\r\n    function removeSigner(\r\n        address signer,\r\n        uint8[] memory vs,\r\n        bytes32[] memory rs,\r\n        bytes32[] memory ss\r\n    ) public {\r\n        require(signer != address(0));\r\n        require(isSigner(signer));\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(\"removeSigner\", block.chainid, signingNonce++));\r\n        bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        _checkSigners(message, vs, rs, ss);\r\n\r\n        uint256 lastIndex = signersLength().sub(1);\r\n        require(lastIndex >= quorum);\r\n\r\n        uint256 targetIndex = signerIndex[signer];\r\n        if (targetIndex != lastIndex) {\r\n            address lastSigner = signers[lastIndex];\r\n            signers[targetIndex] = lastSigner;\r\n            signerIndex[lastSigner] = targetIndex;\r\n        }\r\n\r\n        signers.pop();\r\n        delete signerIndex[signer];\r\n\r\n        emit RemoveSigner(signer);\r\n    }\r\n\r\n    function updateQuorum(\r\n        uint256 newQuorum,\r\n        uint8[] memory vs,\r\n        bytes32[] memory rs,\r\n        bytes32[] memory ss\r\n    ) public {\r\n        require(newQuorum > 0);\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(\"updateQuorum\", block.chainid, signingNonce++));\r\n        bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        _checkSigners(message, vs, rs, ss);\r\n\r\n        quorum = newQuorum;\r\n        emit UpdateQuorum(newQuorum);\r\n    }\r\n\r\n    function updateFeeDB(IFeeDB newDB) public onlyOwner {\r\n        feeDB = newDB;\r\n        emit UpdateFeeDB(newDB);\r\n    }\r\n\r\n    struct SendingData {\r\n        uint256 sendedAmount;\r\n        uint256 sendingBlock;\r\n    }\r\n    mapping(address => mapping(uint256 => mapping(address => SendingData[]))) public sendingData;\r\n    mapping(address => mapping(uint256 => mapping(address => mapping(uint256 => bool)))) public isTokenReceived;\r\n\r\n    function sendingCounts(\r\n        address sender,\r\n        uint256 toChainId,\r\n        address receiver\r\n    ) public view returns (uint256) {\r\n        return sendingData[sender][toChainId][receiver].length;\r\n    }\r\n\r\n    function sendToken(\r\n        uint256 toChainId,\r\n        address receiver,\r\n        uint256 amount,\r\n        address nft\r\n    ) public returns (uint256 sendingId) {\r\n        sendingId = sendingCounts(msg.sender, toChainId, receiver);\r\n        sendingData[msg.sender][toChainId][receiver].push(SendingData({sendedAmount: amount, sendingBlock: block.number}));\r\n\r\n        bool paysFee = feeDB.paysFeeWhenSending();\r\n        _takeAmount(msg.sender, amount, paysFee, nft);\r\n        emit SendToken(msg.sender, toChainId, receiver, amount, sendingId, paysFee);\r\n    }\r\n\r\n    function receiveToken(\r\n        address sender,\r\n        uint256 fromChainId,\r\n        address receiver,\r\n        uint256 amount,\r\n        uint256 sendingId,\r\n        bool isFeePayed,\r\n        address nft,\r\n        uint8[] memory vs,\r\n        bytes32[] memory rs,\r\n        bytes32[] memory ss\r\n    ) public {\r\n        require(!isTokenReceived[sender][fromChainId][receiver][sendingId]);\r\n\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(fromChainId, sender, block.chainid, receiver, amount, sendingId, isFeePayed, nft)\r\n        );\r\n        bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        _checkSigners(message, vs, rs, ss);\r\n\r\n        isTokenReceived[sender][fromChainId][receiver][sendingId] = true;\r\n        _giveAmount(receiver, amount, isFeePayed, nft);\r\n\r\n        emit ReceiveToken(sender, fromChainId, receiver, amount, sendingId);\r\n    }\r\n\r\n    function _takeAmount(\r\n        address user,\r\n        uint256 amount,\r\n        bool paysFee,\r\n        address nft\r\n    ) private {\r\n        uint256 fee;\r\n        if (paysFee) {\r\n            address feeRecipient;\r\n            (fee, feeRecipient) = _getFeeData(user, amount, nft);\r\n            if (fee != 0 && feeRecipient != address(0)) IERC20(token).transferFrom(user, feeRecipient, fee);\r\n        }\r\n        IERC20(token).transferFrom(user, address(this), amount);\r\n    }\r\n\r\n    function _giveAmount(\r\n        address user,\r\n        uint256 amount,\r\n        bool isFeePayed,\r\n        address nft\r\n    ) private {\r\n        uint256 fee;\r\n        if (!isFeePayed) {\r\n            address feeRecipient;\r\n            (fee, feeRecipient) = _getFeeData(user, amount, nft);\r\n            if (fee != 0 && feeRecipient != address(0)) IERC20(token).transfer(feeRecipient, fee);\r\n        }\r\n        IERC20(token).transfer(user, amount.sub(fee));\r\n    }\r\n\r\n    function _getFeeData(\r\n        address user,\r\n        uint256 amount,\r\n        address nft\r\n    ) private view returns (uint256 fee, address feeRecipient) {\r\n        fee = feeDB.userFee(user, amount, nft);\r\n        feeRecipient = feeDB.protocolFeeRecipient();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"AddSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"}],\"name\":\"ReceiveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"RemoveSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFeeCollected\",\"type\":\"bool\"}],\"name\":\"SendToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFeeDB\",\"name\":\"newFeeDB\",\"type\":\"address\"}],\"name\":\"UpdateFeeDB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"}],\"name\":\"UpdateQuorum\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDB\",\"outputs\":[{\"internalType\":\"contract IFeeDB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isTokenReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeePayed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"receiveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"sendToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendingCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sendingData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sendedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signingNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeDB\",\"name\":\"newDB\",\"type\":\"address\"}],\"name\":\"updateFeeDB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"updateQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "APMReservoir", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c8c424b91d8ce0137bab4b832b7f7d154156ba6c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005307b5e725feb3d6a55605dac1986e3571fb765d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0315e833a8433b1f55a09b200eb93597292134f59ff2e22a0e286af76f0ec7b5"}]}