{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _ownermint;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _ownermint = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function ownermint() external view returns (address) {\r\n        return _ownermint;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerMint() {\r\n        require(\r\n            _ownermint == _msgSender(),\r\n            \"Ownable: caller is not the ownermint\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function renounceOwnershipMint() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_ownermint, _owner);\r\n        _ownermint = _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function transferOwnershipMint(address newOwner)\r\n        external\r\n        virtual\r\n        onlyOwnerMint\r\n    {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_ownermint, newOwner);\r\n        _ownermint = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n    function dividendOf(address _owner) external view returns (uint256);\r\n\r\n    function distributeDividends() external payable;\r\n\r\n    function withdrawDividend() external;\r\n\r\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n    function withdrawableDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function withdrawnDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function accumulativeDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n/** DividendPayingToken simplified explanation:\r\n *\r\n * When the holder reaching minimumTokenBalanceForDividends, non-transferable Divident Paying tokens will be minted.\r\n * Owner calls the distribution function manually, holders dividends per share are stored in magnifiedDividendPerShare.\r\n *\r\n * Distribution example:\r\n * dv - magnified div per share\r\n * dv/s = 0 + v1/t1 + v2/t2 + v3/t3 + v4/t4 ---> future distro\r\n *\r\n * At the time of minting Divident Paying tokens, contract calculates dv for all previous distributions and writes this amount into the variable called \"magnifiedDividendCorrections\".\r\n * magnifiedDividendCorrections will be used to subtract all amounts of dv before holder minted his Divident Paying tokens.\r\n */\r\n\r\ncontract DividendPayingToken is\r\n    ERC20,\r\n    DividendPayingTokenInterface,\r\n    DividendPayingTokenOptionalInterface\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    uint256 internal constant ONE = 10**18;\r\n    uint256 internal constant MAGNITUDE = 2**128;\r\n    uint256 internal magnifiedDividendPerShare;\r\n\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    constructor(string memory _name, string memory _symbol)\r\n        ERC20(_name, _symbol)\r\n    {}\r\n\r\n    receive() external payable {\r\n        distributeDividends();\r\n    }\r\n\r\n    /**\r\n     * @dev function requires sending ethereum\r\n     * @dev Magnified divident per share will be 0 on the time of deployement\r\n     */\r\n\r\n    function distributeDividends() public payable override {\r\n        require(totalSupply() > 0);\r\n        if (msg.value > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (msg.value).mul(MAGNITUDE) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, msg.value);\r\n            totalDividendsDistributed = totalDividendsDistributed.add(\r\n                msg.value\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() external virtual override {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(\r\n                _withdrawableDividend\r\n            );\r\n            (bool success, ) = user.call{\r\n                value: _withdrawableDividend,\r\n                gas: 3000\r\n            }(\"\");\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\r\n                    _withdrawableDividend\r\n                );\r\n            } else {\r\n                return 0;\r\n            }\r\n            return _withdrawableDividend;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function dividendOf(address _owner)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return\r\n            magnifiedDividendPerShare\r\n                .mul(balanceOf(_owner))\r\n                .toInt256Safe()\r\n                .add(magnifiedDividendCorrections[_owner])\r\n                .toUint256Safe() / MAGNITUDE;\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n        if (newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } else if (newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract PlatformToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    VCDividendTracker public dividendTracker;\r\n\r\n    address public uniswapV2Pair;\r\n    uint256 internal constant ONE = 10**18;\r\n    address internal constant ZERO_ADDRESS =\r\n        0x0000000000000000000000000000000000000000;\r\n    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // store automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n    mapping(address => bool) public automatedMarketMakerRouters;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public isBlacklisted;\r\n    mapping(address => bool) public vestedAddress;\r\n    mapping(address => uint256) public initialVest;\r\n    mapping(address => uint256) private _lastTX;\r\n    mapping(address => uint256) private _lastTransfer;\r\n    mapping(address => uint256) private _lastDailyTransferedAmount;\r\n\r\n    uint256 public nativeRewardsFee;\r\n    uint256 public projectFee;\r\n    uint256 public liquidityFee;\r\n    uint256 private maxTXAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public totalFees;\r\n    uint256 public firstLiveBlock;\r\n    uint256 public firstLiveBlockNumber;\r\n    uint256 public maxHoldings;\r\n    uint256 public vestedSellLimit;\r\n    uint256 public totalSellFees;\r\n    uint256 public maximumDailyAmountToSell;\r\n\r\n    bool public swapEnabled;\r\n    bool public sendDividendsEnabled;\r\n    bool public paused;\r\n    bool public maxTXEnabled;\r\n    bool public maxHoldingsEnabled;\r\n    bool public antiSnipeBot;\r\n    bool public cooldown;\r\n    bool public buySellOnly;\r\n    bool public takeFees;\r\n    bool public dailyCoolDown;\r\n    bool public enableMaxDailySell;\r\n    bool private swapping;\r\n\r\n    address payable _aWallet;\r\n    address payable _bWallet;\r\n    address payable _cWallet;\r\n\r\n    event UpdateDividendTracker(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event SwapETHForTokens(uint256 amountIn, address[] path);\r\n    event SendDividends(uint256 amount);\r\n    event MaxDailyAmountToSellChanged(uint256 oldAmount, uint256 newAmount);\r\n    event MaxHoldingsChanged(\r\n        uint256 oldHoldings,\r\n        uint256 newHoldings,\r\n        bool maxHoldingsEnabled\r\n    );\r\n    event VestedSellLimitChanged(uint256 oldLimit, uint256 newLimit);\r\n    event FeesChanged(\r\n        uint256 nativeRewardsFee,\r\n        uint256 liquidityFee,\r\n        uint256 projectFee,\r\n        uint256 totalFees\r\n    );\r\n    event MaxTXAmountChanged(uint256 oldMaxTXAmount, uint256 maxTXAmount);\r\n    event SwapTokensAtAmountChanged(\r\n        uint256 oldSwapTokensAtAmount,\r\n        uint256 swapTokensAtAmount\r\n    );\r\n\r\n    constructor() ERC20(\"Viral Crypto\", \"VC\") {\r\n        dividendTracker = new VCDividendTracker();\r\n        updateUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        // exclude from receiving dividends\r\n        dividendTracker.excludeFromDividends(address(dividendTracker), false);\r\n        dividendTracker.excludeFromDividends(address(this), false);\r\n        dividendTracker.excludeFromDividends(owner(), false);\r\n        dividendTracker.excludeFromDividends(\r\n            0x000000000000000000000000000000000000dEaD,\r\n            false\r\n        );\r\n        dividendTracker.excludeFromDividends(ZERO_ADDRESS, false);\r\n        dividendTracker.excludeFromDividends(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,\r\n            false\r\n        );\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(_aWallet, true);\r\n        excludeFromFees(address(this), true);\r\n\r\n        _mint(owner(), 27020401250 * (ONE));\r\n\r\n        nativeRewardsFee = 5;\r\n        projectFee = 5;\r\n        liquidityFee = 2;\r\n        maxTXAmount = 75000000 * (ONE);\r\n        maxHoldings = 150000000 * (ONE);\r\n        maximumDailyAmountToSell = 5 * maxTXAmount;\r\n        swapTokensAtAmount = 2000000 * (ONE);\r\n        totalFees = nativeRewardsFee.add(projectFee).add(liquidityFee);\r\n        totalSellFees = totalFees;\r\n        swapEnabled = true;\r\n        sendDividendsEnabled = true;\r\n        maxHoldingsEnabled = true;\r\n        maxTXEnabled = true;\r\n        antiSnipeBot = true;\r\n        cooldown = true;\r\n        paused = true;\r\n        buySellOnly = true;\r\n        takeFees = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function mint(address _to, uint256 _amount) external onlyOwnerMint {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function setWETH(address _WETH) external onlyOwner {\r\n        WETH = _WETH;\r\n    }\r\n\r\n    function updateDividendTracker(address newAddress) external onlyOwner {\r\n        require(\r\n            newAddress != address(dividendTracker),\r\n            \"The dividend tracker already has that address\"\r\n        );\r\n        VCDividendTracker newDividendTracker = VCDividendTracker(\r\n            payable(newAddress)\r\n        );\r\n        require(\r\n            newDividendTracker.checkOwnership(address(this)),\r\n            \"The new dividend tracker must be owned by token contract\"\r\n        );\r\n        newDividendTracker.excludeFromDividends(\r\n            address(newDividendTracker),\r\n            false\r\n        );\r\n        newDividendTracker.excludeFromDividends(address(this), false);\r\n        newDividendTracker.excludeFromDividends(owner(), false);\r\n        newDividendTracker.excludeFromDividends(\r\n            address(uniswapV2Router),\r\n            false\r\n        );\r\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\r\n        dividendTracker = newDividendTracker;\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        require(\r\n            newAddress != address(uniswapV2Router),\r\n            \"The router already has that address\"\r\n        );\r\n        require(\r\n            newAddress != address(0),\r\n            \"New router should not be address zero\"\r\n        );\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        automatedMarketMakerRouters[address(uniswapV2Router)] = false;\r\n        automatedMarketMakerPairs[uniswapV2Pair] = false;\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .getPair(address(this), WETH);\r\n        if (_uniswapV2Pair == ZERO_ADDRESS) {\r\n            _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n                .createPair(address(this), WETH);\r\n        }\r\n        automatedMarketMakerRouters[newAddress] = true;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\r\n    }\r\n\r\n    /**\r\n     * @dev sets inital vest amount and bool for a vested address and transfers tokens to address so they collect dividends\r\n     */\r\n    function airdrop(address[] calldata addresses, uint256[] calldata amounts)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            addresses.length == amounts.length,\r\n            \"Array sizes must be equal\"\r\n        );\r\n        uint256 i = 0;\r\n        while (i < addresses.length) {\r\n            uint256 _amount = amounts[i].mul(ONE);\r\n            _transfer(msg.sender, addresses[i], _amount);\r\n            i += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev sets inital vest amount and bool for a vested address and transfers tokens to address so they collect dividends\r\n     */\r\n    function distributeVest(address[] calldata vestedAddresses, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 i = 0;\r\n        uint256 _amount = amount.mul(ONE);\r\n        while (i < vestedAddresses.length) {\r\n            address vestAddress = vestedAddresses[i];\r\n            _transfer(msg.sender, vestAddress, _amount);\r\n            initialVest[vestAddress] = initialVest[vestAddress].add(_amount);\r\n            vestedAddress[vestAddress] = true;\r\n\r\n            i += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Creating pair with uni factory, pairs on other DEXes should be created manually\r\n     */\r\n    function createPair() external onlyOwner {\r\n        // Create a uniswap pair for this new token\r\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), WETH);\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(\r\n            _isExcludedFromFees[account] != excluded,\r\n            \"Account already 'excluded'\"\r\n        );\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function setTakeFees(bool _takeFees) external onlyOwner {\r\n        require(takeFees != _takeFees, \"Updating to current value, takeFees\");\r\n        takeFees = _takeFees;\r\n    }\r\n\r\n    function setMaxDailyAmountToSell(uint256 _maxDailySell) external onlyOwner {\r\n        emit MaxDailyAmountToSellChanged(\r\n            maximumDailyAmountToSell,\r\n            _maxDailySell\r\n        );\r\n        maximumDailyAmountToSell = _maxDailySell;\r\n    }\r\n\r\n    function enableMaxDailyAmountToSell(bool _enableMaxDailySell)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            enableMaxDailySell != _enableMaxDailySell,\r\n            \"Updating to current value, enableMaxDailySell\"\r\n        );\r\n        enableMaxDailySell = _enableMaxDailySell;\r\n    }\r\n\r\n    function setDailyCoolDown(bool _dailyCoolDown) external onlyOwner {\r\n        require(\r\n            dailyCoolDown != _dailyCoolDown,\r\n            \"Updating to current value, dailyCoolDown\"\r\n        );\r\n        dailyCoolDown = _dailyCoolDown;\r\n    }\r\n\r\n    function setAutomatedMarketMakerRouter(address router, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            router != address(uniswapV2Router),\r\n            \"Router cannot be removed from automatedMarketMakerRouters\"\r\n        );\r\n        require(\r\n            automatedMarketMakerRouters[router] != value,\r\n            \"Automated market maker router is already set to that value\"\r\n        );\r\n        automatedMarketMakerRouters[router] = value;\r\n        dividendTracker.excludeFromDividends(router, false);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"Pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            automatedMarketMakerPairs[pair] != value,\r\n            \"Automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[pair] = value;\r\n        if (value) {\r\n            dividendTracker.excludeFromDividends(pair, false);\r\n        }\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function blacklistAddress(address account, bool value) external onlyOwner {\r\n        if (value) {\r\n            require(!isBlacklisted[account], \"Already blacklisted\");\r\n            dividendTracker.excludeFromDividends(account, true);\r\n        }\r\n        isBlacklisted[account] = value;\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        dividendTracker.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function updateMinimumToken(uint256 minimumToken) external onlyOwner {\r\n        dividendTracker.updateMinimumToken(minimumToken);\r\n    }\r\n\r\n    function getMinHoldForDividends() external view returns (uint256) {\r\n        return dividendTracker.minimumTokenBalanceForDividends();\r\n    }\r\n\r\n    function getClaimWait() external view returns (uint256) {\r\n        return dividendTracker.claimWait();\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function isExcludedFromFees(address account) external view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawableDividendOf(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function dividendTokenBalanceOf(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function excludeFromDividends(address account, bool reduceHolderCount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            !(dividendTracker.excludedFromDividends(account)),\r\n            \"Already excluded from dividends\"\r\n        );\r\n        dividendTracker.excludeFromDividends(account, reduceHolderCount);\r\n    }\r\n\r\n    function getAccountDividendsInfo(address _account)\r\n        external\r\n        view\r\n        returns (\r\n            address account,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable\r\n        )\r\n    {\r\n        return dividendTracker.getAccount(_account);\r\n    }\r\n\r\n    function claim() external {\r\n        dividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    function setAWallet(address newWallet) external onlyOwner {\r\n        require(newWallet != address(0), \"A wallet should not be address zero\");\r\n        _aWallet = payable(newWallet);\r\n    }\r\n\r\n    function setBWallet(address newWallet) external onlyOwner {\r\n        require(newWallet != address(0), \"B wallet should not be address zero\");\r\n\r\n        _bWallet = payable(newWallet);\r\n    }\r\n\r\n    function setCWallet(address newWallet) external onlyOwner {\r\n        require(newWallet != address(0), \"C wallet should not be address zero\");\r\n\r\n        _cWallet = payable(newWallet);\r\n    }\r\n\r\n    function setMaxHoldings(uint256 _amount, bool _enabled) external onlyOwner {\r\n        uint256 _oldMaxHoldings = maxHoldings;\r\n\r\n        maxHoldings = _amount.mul(ONE);\r\n        maxHoldingsEnabled = _enabled;\r\n\r\n        emit MaxHoldingsChanged(\r\n            _oldMaxHoldings,\r\n            maxHoldings,\r\n            maxHoldingsEnabled\r\n        );\r\n    }\r\n\r\n    function setVestedSellLimit(uint256 _amount) external onlyOwner {\r\n        uint256 oldVestedSellLimit = vestedSellLimit;\r\n        vestedSellLimit = _amount.mul(ONE);\r\n        emit VestedSellLimitChanged(oldVestedSellLimit, vestedSellLimit);\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _nativeRewardFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _projectFee\r\n    ) external onlyOwner {\r\n        nativeRewardsFee = _nativeRewardFee;\r\n        liquidityFee = _liquidityFee;\r\n        projectFee = _projectFee;\r\n        totalFees = nativeRewardsFee.add(liquidityFee).add(projectFee);\r\n\r\n        emit FeesChanged(nativeRewardsFee, liquidityFee, projectFee, totalFees);\r\n    }\r\n\r\n    function setSwapEnabled(bool value) external onlyOwner {\r\n        swapEnabled = value;\r\n    }\r\n\r\n    function setBuySellOnly(bool value) external onlyOwner {\r\n        buySellOnly = value;\r\n    }\r\n\r\n    function disableAntiSnipeBot() external onlyOwner {\r\n        antiSnipeBot = false;\r\n    }\r\n\r\n    function setFirstLiveBlock() external onlyOwner {\r\n        firstLiveBlock = block.timestamp;\r\n        firstLiveBlockNumber = block.number;\r\n        paused = false;\r\n    }\r\n\r\n    function setSendDividendsEnabled(bool value) external onlyOwner {\r\n        sendDividendsEnabled = value;\r\n    }\r\n\r\n    function setPaused(bool value) external onlyOwner {\r\n        paused = value;\r\n    }\r\n\r\n    function setMaxTXEnabled(bool value) external onlyOwner {\r\n        maxTXEnabled = value;\r\n    }\r\n\r\n    function setMaxTXAmount(uint256 _amount) external onlyOwner {\r\n        uint256 oldMaxTXAmount = maxTXAmount;\r\n        maxTXAmount = _amount.mul(ONE);\r\n        emit MaxTXAmountChanged(oldMaxTXAmount, maxTXAmount);\r\n    }\r\n\r\n    function setSwapAtAmount(uint256 _amount) external onlyOwner {\r\n        uint256 oldSwapTokensAtAmount = swapTokensAtAmount;\r\n        swapTokensAtAmount = _amount.mul(ONE);\r\n        emit SwapTokensAtAmountChanged(\r\n            oldSwapTokensAtAmount,\r\n            swapTokensAtAmount\r\n        );\r\n    }\r\n\r\n    function checkVestSchedule(address _user, uint256 vestedTime)\r\n        private\r\n        view\r\n        returns (uint256 _unlockedAmount)\r\n    {\r\n        if (vestedAddress[_user]) {\r\n            uint256 initalVest = initialVest[_user];\r\n            if (vestedTime < 24 hours) {\r\n                _unlockedAmount = 0;\r\n            } else if (vestedTime < 4 weeks) {\r\n                _unlockedAmount = initalVest.mul(2).div(10);\r\n            } else if (vestedTime < 8 weeks) {\r\n                _unlockedAmount = initalVest.mul(25).div(100);\r\n            } else if (vestedTime < 12 weeks) {\r\n                _unlockedAmount = initalVest.mul(30).div(100);\r\n            } else if (vestedTime < 16 weeks) {\r\n                _unlockedAmount = initalVest.mul(35).div(100);\r\n            } else if (vestedTime < 20 weeks) {\r\n                _unlockedAmount = initalVest.mul(24).div(100);\r\n            } else if (vestedTime < 24 weeks) {\r\n                _unlockedAmount = initalVest.mul(45).div(100);\r\n            } else if (vestedTime < 28 weeks) {\r\n                _unlockedAmount = initalVest.div(2);\r\n            } else if (vestedTime < 32 weeks) {\r\n                _unlockedAmount = initalVest.mul(56).div(100);\r\n            } else if (vestedTime < 36 weeks) {\r\n                _unlockedAmount = initalVest.mul(62).div(100);\r\n            } else if (vestedTime < 40 weeks) {\r\n                _unlockedAmount = initalVest.mul(68).div(100);\r\n            } else if (vestedTime < 44 weeks) {\r\n                _unlockedAmount = initalVest.mul(76).div(100);\r\n            } else if (vestedTime < 48 weeks) {\r\n                _unlockedAmount = initalVest.mul(84).div(100);\r\n            } else if (vestedTime < 52 weeks) {\r\n                _unlockedAmount = initalVest.mul(92).div(100);\r\n            } else if (vestedTime > 52 weeks) {\r\n                _unlockedAmount = initalVest;\r\n            }\r\n        }\r\n    }\r\n\r\n    function dailySellableAmountLeft(address from)\r\n        external\r\n        view\r\n        returns (uint256 _transferable)\r\n    {\r\n        require(!isBlacklisted[from], \"Blacklisted address\");\r\n        if (dailyCoolDown && (_lastTransfer[from] + 86400 > block.timestamp)) {\r\n            return 0;\r\n        }\r\n\r\n        _transferable = balanceOf(from);\r\n\r\n        uint256 vestedTime = block.timestamp.sub(firstLiveBlock);\r\n\r\n        if (!(vestedTime > 52 weeks || !vestedAddress[from])) {\r\n            uint256 unlocked = checkVestSchedule(from, vestedTime);\r\n\r\n            unlocked = unlocked > vestedSellLimit ? vestedSellLimit : unlocked;\r\n\r\n            if (balanceOf(from) > initialVest[from].sub(unlocked)) {\r\n                _transferable = balanceOf(from).sub(\r\n                    initialVest[from].sub(unlocked)\r\n                );\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        if (\r\n            enableMaxDailySell && _lastTransfer[from] + 86400 > block.timestamp\r\n        ) {\r\n            uint256 dailyLeftToTransfer = maximumDailyAmountToSell >=\r\n                _lastDailyTransferedAmount[from]\r\n                ? maximumDailyAmountToSell.sub(_lastDailyTransferedAmount[from])\r\n                : 0;\r\n            _transferable = _transferable <= dailyLeftToTransfer\r\n                ? _transferable\r\n                : dailyLeftToTransfer;\r\n        } else if (enableMaxDailySell) {\r\n            _transferable = _transferable <= maximumDailyAmountToSell\r\n                ? _transferable\r\n                : maximumDailyAmountToSell;\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(\r\n            !isBlacklisted[from] &&\r\n                !isBlacklisted[to] &&\r\n                !isBlacklisted[tx.origin],\r\n            \"Blacklisted address\"\r\n        );\r\n        if (from != owner()) {\r\n            require(!paused, \"trading paused\");\r\n        }\r\n\r\n        if (from != owner() && to != owner()) {\r\n            checkTransactionParameters(from, to, amount);\r\n        }\r\n\r\n        if (isBlacklisted[tx.origin]) {\r\n            return;\r\n        }\r\n\r\n        uint256 balance = balanceOf(from);\r\n        uint256 vestedTime = block.timestamp.sub(firstLiveBlock);\r\n\r\n        if (vestedTime > 52 weeks) {\r\n            if (vestedAddress[from]) {\r\n                vestedAddress[from] = false;\r\n            }\r\n        } else {\r\n            uint256 unlockedVest = checkVestSchedule(from, vestedTime);\r\n            if (\r\n                automatedMarketMakerPairs[to] || automatedMarketMakerRouters[to]\r\n            ) {\r\n                unlockedVest = unlockedVest > vestedSellLimit\r\n                    ? vestedSellLimit\r\n                    : unlockedVest;\r\n            }\r\n\r\n            require(\r\n                balance.sub(amount) >= initialVest[from].sub(unlockedVest),\r\n                \"Can't bypass vest and can't bypass vestedSellLimit\"\r\n            );\r\n        }\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >=\r\n            swapTokensAtAmount;\r\n        if (\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            overMinimumTokenBalance\r\n        ) {\r\n            swapping = true;\r\n            swapAndDistribute(contractTokenBalance);\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to] || !takeFees) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (takeFee) {\r\n            uint256 fees = amount.mul(totalFees).div(100);\r\n            if (\r\n                from != owner() &&\r\n                from != address(this) &&\r\n                !(automatedMarketMakerPairs[from] ||\r\n                    automatedMarketMakerPairs[to] ||\r\n                    automatedMarketMakerRouters[from] ||\r\n                    automatedMarketMakerRouters[to])\r\n            ) {\r\n                fees = amount.mul(totalSellFees).div(100);\r\n            }\r\n            amount = amount.sub(fees);\r\n            super._transfer(from, address(this), fees);\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n        //check if bots were blacklisted on first block before setting dividends\r\n        try\r\n            dividendTracker.setBalance(payable(from), balanceOf(from))\r\n        {} catch {}\r\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n    }\r\n\r\n    function swapAndDistribute(uint256 tokens) private {\r\n        uint256 _liqTokens = tokens.mul(liquidityFee).div(totalFees);\r\n        uint256 tokensToSave = _liqTokens.div(2);\r\n        uint256 tokensToSwap = tokens.sub(tokensToSave);\r\n        uint256 preBalance = address(this).balance;\r\n        swapTokensForEth(tokensToSwap);\r\n        uint256 postBalance = address(this).balance.sub(preBalance);\r\n        uint256 ethForLiq = (\r\n            postBalance.mul(liquidityFee).div(totalFees).div(2)\r\n        );\r\n        uint256 ethForProject = (\r\n            postBalance.mul(projectFee).div(totalFees).div(3)\r\n        );\r\n        _aWallet.transfer(ethForProject);\r\n        _bWallet.transfer(ethForProject);\r\n        _cWallet.transfer(ethForProject);\r\n        addLiquidity(tokensToSave, ethForLiq);\r\n        uint256 finalBalance = address(this).balance;\r\n        if (sendDividendsEnabled) {\r\n            sendDividends(finalBalance);\r\n        }\r\n    }\r\n\r\n    function checkTransactionParameters(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        if (dailyCoolDown && automatedMarketMakerPairs[to]) {\r\n            require(\r\n                _lastTransfer[_msgSender()] + 86400 <= block.timestamp,\r\n                \"One sell per day is allowed\"\r\n            );\r\n        }\r\n\r\n        if (automatedMarketMakerPairs[to]) {\r\n            if (_lastTransfer[_msgSender()] + 86400 >= block.timestamp) {\r\n                _lastDailyTransferedAmount[_msgSender()] += amount;\r\n            } else {\r\n                _lastDailyTransferedAmount[_msgSender()] = amount;\r\n            }\r\n\r\n            _lastTransfer[_msgSender()] = block.timestamp;\r\n        }\r\n\r\n        if (enableMaxDailySell) {\r\n            require(\r\n                _lastDailyTransferedAmount[_msgSender()] <=\r\n                    maximumDailyAmountToSell,\r\n                \"Max daily sell amount was reached\"\r\n            );\r\n        }\r\n\r\n        if (maxTXEnabled) {\r\n            if (from != address(this)) {\r\n                require(amount <= maxTXAmount, \"exceeds max tx amount\");\r\n            }\r\n        }\r\n\r\n        if (cooldown) {\r\n            if (\r\n                from != address(this) &&\r\n                to != address(this) &&\r\n                !automatedMarketMakerRouters[to] &&\r\n                !automatedMarketMakerPairs[to]\r\n            ) {\r\n                require(\r\n                    block.timestamp >= (_lastTX[_msgSender()] + 30 seconds),\r\n                    \"Cooldown in effect\"\r\n                );\r\n                _lastTX[_msgSender()] = block.timestamp;\r\n            }\r\n        }\r\n\r\n        if (antiSnipeBot) {\r\n            if (\r\n                automatedMarketMakerPairs[from] &&\r\n                !automatedMarketMakerRouters[to] &&\r\n                to != address(this) &&\r\n                from != address(this)\r\n            ) {\r\n                require(tx.origin == to);\r\n            }\r\n            if (block.number <= firstLiveBlockNumber + 4) {\r\n                isBlacklisted[tx.origin] = true;\r\n                if (tx.origin != from && tx.origin != to) {\r\n                    dividendTracker.excludeFromDividends(tx.origin, true);\r\n                }\r\n                if (\r\n                    !automatedMarketMakerPairs[from] &&\r\n                    !automatedMarketMakerRouters[from] &&\r\n                    from != address(this)\r\n                ) {\r\n                    isBlacklisted[from] = true;\r\n                    dividendTracker.excludeFromDividends(from, true);\r\n                }\r\n\r\n                if (\r\n                    !automatedMarketMakerPairs[to] &&\r\n                    !automatedMarketMakerRouters[to] &&\r\n                    to != address(this)\r\n                ) {\r\n                    isBlacklisted[to] = true;\r\n                    dividendTracker.excludeFromDividends(to, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (maxHoldingsEnabled) {\r\n            if (\r\n                automatedMarketMakerPairs[from] &&\r\n                to != address(uniswapV2Router) &&\r\n                to != address(this)\r\n            ) {\r\n                uint256 balance = balanceOf(to);\r\n                require(balance.add(amount) <= maxHoldings);\r\n            }\r\n        }\r\n\r\n        if (buySellOnly) {\r\n            if (from != address(this) && to != address(this)) {\r\n                require(\r\n                    automatedMarketMakerPairs[from] ||\r\n                        automatedMarketMakerPairs[to] ||\r\n                        automatedMarketMakerRouters[from] ||\r\n                        automatedMarketMakerRouters[to],\r\n                    \"No transfers\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendDividends(uint256 dividends) private {\r\n        (bool success, ) = address(dividendTracker).call{value: dividends}(\"\");\r\n        if (success) {\r\n            emit SendDividends(dividends);\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n\r\ncontract VCDividendTracker is Context, DividendPayingToken {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    mapping(address => bool) isDividendHolder;\r\n    mapping(address => bool) public excludedFromDividends;\r\n    mapping(address => uint256) public lastClaimTimes;\r\n\r\n    mapping(address => bool) private isOwner;\r\n\r\n    uint256 public claimWait;\r\n    uint256 internal numDividendTokenHolders;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n    modifier onlyOwners() {\r\n        require(isOwner[_msgSender()], \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event minimumTokenBalanceUpdated(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue\r\n    );\r\n\r\n    event Claim(\r\n        address indexed account,\r\n        uint256 amount,\r\n        bool indexed automatic\r\n    );\r\n\r\n    event OwnershipSet(address indexed account, bool indexed vaule);\r\n\r\n    constructor()\r\n        DividendPayingToken(\"VC_Dividend_Tracker\", \"VC_Dividend_Tracker\")\r\n    {\r\n        isOwner[_msgSender()] = true;\r\n        isOwner[tx.origin] = true;\r\n        emit OwnershipSet(_msgSender(), true);\r\n        emit OwnershipSet(tx.origin, true);\r\n        claimWait = 3600; //1 hr\r\n        minimumTokenBalanceForDividends = 15000000 * (ONE); // 0.0555%\r\n    }\r\n\r\n    function setOwnership(address _owner, bool _value) external onlyOwners {\r\n        require(\r\n            isOwner[_owner] != _value,\r\n            \"Ownership: role is already set to this value\"\r\n        );\r\n        isOwner[_owner] = _value;\r\n        emit OwnershipSet(_owner, _value);\r\n    }\r\n\r\n    function checkOwnership(address _owner) external view returns (bool) {\r\n        return isOwner[_owner];\r\n    }\r\n\r\n    function _approve(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) internal pure override {\r\n        require(\r\n            false,\r\n            \"Viral_Dividend_Tracker: Token is not transferable, no need to approve\"\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) internal pure override {\r\n        require(false, \"Viral_Dividend_Tracker: No transfers allowed\");\r\n    }\r\n\r\n    function withdrawDividend() external pure override {\r\n        require(\r\n            false,\r\n            \"Viral_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main VIRAL contract.\"\r\n        );\r\n    }\r\n\r\n    function excludeFromDividends(address account, bool reduceHolderCount)\r\n        external\r\n        onlyOwners\r\n    {\r\n        require(!excludedFromDividends[account], \"Account already excluded\");\r\n        excludedFromDividends[account] = true;\r\n        _setBalance(account, 0);\r\n        if (reduceHolderCount) {\r\n            if (isDividendHolder[account]) {\r\n                isDividendHolder[account] = false;\r\n                numDividendTokenHolders = numDividendTokenHolders.sub(1);\r\n            }\r\n        }\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwners {\r\n        require(\r\n            newClaimWait >= 3600 && newClaimWait <= 86400,\r\n            \"Viral_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\"\r\n        );\r\n        require(\r\n            newClaimWait != claimWait,\r\n            \"Viral_Dividend_Tracker: Cannot update claimWait to same value\"\r\n        );\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function updateMinimumToken(uint256 newMinimumToken) external onlyOwners {\r\n        require(\r\n            newMinimumToken >= 1,\r\n            \"Viral_Dividend_Tracker: newMinimumToken more 1 token\"\r\n        );\r\n\r\n        emit minimumTokenBalanceUpdated(\r\n            newMinimumToken,\r\n            minimumTokenBalanceForDividends\r\n        );\r\n        minimumTokenBalanceForDividends = newMinimumToken.mul(ONE);\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns (uint256) {\r\n        return numDividendTokenHolders;\r\n    }\r\n\r\n    function getAccount(address _account)\r\n        external\r\n        view\r\n        returns (\r\n            address account,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable\r\n        )\r\n    {\r\n        account = _account;\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n        lastClaimTime = lastClaimTimes[account];\r\n        nextClaimTime = lastClaimTime > 0\r\n            ? lastClaimTime.add(claimWait)\r\n            : block.timestamp;\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp\r\n            ? nextClaimTime.sub(block.timestamp)\r\n            : 0;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance)\r\n        external\r\n        onlyOwners\r\n    {\r\n        if (excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n        if (newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n            if (!isDividendHolder[account]) {\r\n                isDividendHolder[account] = true;\r\n                numDividendTokenHolders = numDividendTokenHolders.add(1);\r\n            }\r\n        } else {\r\n            _setBalance(account, 0);\r\n            if (isDividendHolder[account]) {\r\n                isDividendHolder[account] = false;\r\n                numDividendTokenHolders = numDividendTokenHolders.sub(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic)\r\n        external\r\n        onlyOwners\r\n        returns (bool)\r\n    {\r\n        require(\r\n            claimWait + lastClaimTimes[account] < block.timestamp,\r\n            \"Viral_Dividend_Tracker: please wait for another claim\"\r\n        );\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n        if (amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"ClaimWaitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"DividendWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"DividendsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"vaule\",\"type\":\"bool\"}],\"name\":\"OwnershipSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"minimumTokenBalanceUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"checkOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeDividends\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reduceHolderCount\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsUntilAutoClaimAvailable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokenBalanceForDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"}],\"name\":\"processAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newClaimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumToken\",\"type\":\"uint256\"}],\"name\":\"updateMinimumToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VCDividendTracker", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "2", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cc6ae6e3160f34a884cb460546af28fe4bde6b5e2c8f5a9472fcdbc93abcb5d3"}]}