{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Keylionnaire.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: KEYS\\npragma solidity ^0.8.12;\\n\\ncontract Keylionnaire\\n{\\n    uint256 constant public count = 4444;\\n    address immutable public owner = msg.sender;\\n\\n    uint256 public randomlyChosenNumber;\\n\\n    event WinningNumberSeed(uint256 seed);\\n\\n    function chooseWinners() public {\\n        require (randomlyChosenNumber == 0, \\\"Seed has already been chosen!\\\");\\n        require (msg.sender == owner, \\\"Owner only\\\");\\n\\n        uint256 number = uint256(keccak256(abi.encodePacked(\\n            block.timestamp, \\n            blockhash(block.number - 1), \\n            block.coinbase, \\n            block.gaslimit, \\n            block.difficulty)));\\n\\n        randomlyChosenNumber = number;\\n\\n        emit WinningNumberSeed(randomlyChosenNumber);\\n    }\\n\\n    /* \\n        After chooseWinners() saves a randomly chosen number,\\n        it becomes a seed (chosen in a provably fair manner)\\n\\n        Each \\\"winner\\\" is determined by combining that randomly\\n        chosen number by an \\\"index\\\", and hashing it.\\n\\n        The largest winner will be index  = 0\\n        The next 11 winners will be index = 1, 2, 3, 4, ..., 12\\n\\n        If any team members \\\"win\\\", they're disqualified, so we\\n        simply ignore them and draw an additional number.\\n        \\n        For example: If team member wins on index = 8, then\\n        largest winner = 0, others = 1 2 3 4 5 6 7 9 10 11 12 13\\n\\n        For example: If a team member wins the largest prize, then\\n        largest winner = 1, others = 2 3 4 5 6 7 8 9 10 11 12 13\\n\\n        For example: If a team member wins 9 10 and 11, then\\n        largest winner = 0, others = 1 2 3 4 5 6 7 8 12 13 14 15\\n\\n        If a duplicate number is chosen, it's also disqualified\\n        and we treat the same way (a person can only win once)\\n\\n        This returns a number between 0 and 4443\\n        There are 4444 potential winning mansion ids, and we sort them in\\n        ascending order\\n        The lowest potential winner number corresponds to 0\\n        The highest number corresponds to 4443\\n    */\\n    function winner(uint256 index) public view returns (uint16) {\\n        require(randomlyChosenNumber != 0, \\\"Call chooseWinners first\\\");\\n\\n        uint256 number = uint256(keccak256(abi.encodePacked(randomlyChosenNumber, index)));\\n\\n        return (uint16)(number % count);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"WinningNumberSeed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chooseWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomlyChosenNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Keylionnaire", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}