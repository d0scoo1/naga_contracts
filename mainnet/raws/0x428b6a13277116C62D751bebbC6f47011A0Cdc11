{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OddworxStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IOddworx} from './IOddworx.sol';\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nerror NotAdmin();\\nerror InvalidInput();\\nerror NotOwnerOfToken();\\n\\nstruct nftDataStruct { // Stored in 32 bytes / 256 bits\\n    address ownerAddress; // 20 bytes \\n    bool staked; // 1 byte\\n    uint64 timestamp; // 8 bytes\\n    bool legacyStaking; // 1 byte\\n}\\n\\n/// @title Oddworx Staking\\n/// @author Mytchall\\n/// @notice Special Staking contract for ODDX\\ncontract OddworxStaking is Pausable {\\n\\n    mapping(address => bool) public admin;\\n    mapping(IERC721 => bool) public nftInterfaces;\\n    mapping(IERC721 => mapping(uint256 => nftDataStruct)) public nftData;\\n    IOddworx public oddworxContract;\\n    bool public nftHoldRewardsActive = true;\\n    uint256 public STAKING_REWARD = 20 * 10 ** 18;\\n    uint256 public HOLDING_REWARD = 10 * 10 ** 18;\\n    address public oddworxContractAddress;\\n\\n    constructor(address oddworxAddress) {\\n        oddworxContractAddress = oddworxAddress;\\n        oddworxContract = IOddworx(oddworxAddress);\\n        admin[msg.sender] = true;\\n    }\\n\\n    /// @notice emitted when an item is purchased\\n    /// @param user address of the user that purchased an item\\n    /// @param itemSKU the SKU of the item purchased\\n    /// @param price the amount paid for the item\\n    event ItemPurchased(address indexed user, uint256 itemSKU, uint256 price);\\n\\n    /// @notice emitted when a user stakes a token\\n    /// @param user address of the user that staked the NFT\\n    /// @param nftContract which NFT set was used\\n    /// @param nftId the id of the NFT staked\\n    event StakedNft(address indexed user, address indexed nftContract, uint256 indexed nftId);\\n\\n    /// @notice emitted when a user unstakes a token\\n    /// @param user address of the user that unstaked the NFT\\n    /// @param nftContract which NFT set was used\\n    /// @param nftId the id of the NFT unstaked\\n    /// @param to address where NFT was unstaked to\\n    event UnstakedNft(address indexed user, address indexed nftContract, uint256 indexed nftId, address to);\\n\\n    /// @notice emitted when a user claim NFT rewards\\n    /// @param user address of the user that claimed ODDX\\n    /// @param nftContract which NFT set was used\\n    /// @param nftId the id of the NFT that generated the rewards\\n    /// @param amount the amount of ODDX claimed\\n    event UserClaimedRewards(address indexed user, address indexed nftContract, uint256 indexed nftId, uint256 amount);\\n\\n    modifier onlyAdmin() {\\n        if (admin[msg.sender] != true) revert NotAdmin();\\n        _;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             General Functions\\n    //////////////////////////////////////////////////////////////*/\\n    function pause() external onlyAdmin { _pause(); }\\n    function unpause() external onlyAdmin { _unpause(); }\\n\\n    function toggleAdmin(address address_) external onlyAdmin {\\n        admin[address_] = !admin[address_];\\n    }\\n\\n    function mint(address to, uint256 amount) internal {\\n        oddworxContract.mint(to, amount);\\n    }\\n\\n    function burn(address from, uint256 amount) internal {\\n        oddworxContract.burn(from, amount);\\n    }\\n\\n    function setOddworxAddress(address address_) external onlyAdmin {\\n        oddworxContractAddress = address_;\\n        oddworxContract = IOddworx(address_);\\n    }\\n\\n    function toggleNftInterface(IERC721 address_) external onlyAdmin {\\n        nftInterfaces[address_] = !nftInterfaces[address_];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             Shop features\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice Buy item in shop by burning Oddx, if NFT ids are supplied, it will claim rewards on them first.\\n    /// @param itemSKU A unique ID used to identify shop products.\\n    /// @param amount Amount of Oddx to pay.\\n    /// @param nftContract which NFT contract to use\\n    /// @param nftIds Which NFT ids to use\\n    function buyItem(uint itemSKU, uint amount, IERC721 nftContract, uint[] calldata nftIds, address user) public whenNotPaused {\\n        address realUser = (admin[msg.sender]==true) ? user : msg.sender;\\n        if (nftIds.length>0) claimRewards(nftContract, nftIds, realUser);\\n        oddworxContract.burn(realUser, amount);\\n        emit ItemPurchased(realUser, itemSKU, amount);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Staking\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Get an array of data for a NFT\\n    /// @param nftContract which NFT contract to use\\n    /// @param id Which NFT to use\\n    function getNftData(address nftContract, uint256 id) external view returns (address, bool, uint64, bool) {\\n        nftDataStruct memory nft = nftData[IERC721(nftContract)][id];\\n        return (nft.ownerAddress, nft.staked, nft.timestamp, nft.legacyStaking);\\n    }\\n\\n    /// @notice Updates either Staked or Holding reward amount\\n    /// @param newAmount new amount to use, supply number in wei.\\n    /// @param changeStaking true to change Staking, false to change Hold rewards\\n    function changeRewardAmount(uint256 newAmount, bool changeStaking) external onlyAdmin {\\n        (changeStaking == true) ? STAKING_REWARD = newAmount : HOLDING_REWARD = newAmount;\\n    }\\n\\n\\n    /// @notice Manually update staking info (contract launch date - 3 weeks)\\n    /// @param nftContract which NFT contract to use\\n    /// @param nftIds NFT's to update\\n    /// @param newTimestamp new timestamp\\n    function setUserNftData(IERC721 nftContract, uint256[] calldata nftIds, address newOwner, bool isStaked, uint256 newTimestamp, bool usingLegacyStaking) external onlyAdmin {\\n        for (uint256 i; i<nftIds.length; i++) {\\n            nftData[nftContract][nftIds[i]] = nftDataStruct(newOwner, isStaked, uint64(newTimestamp), usingLegacyStaking);\\n        }\\n    }\\n\\n\\n    /// @notice Stake NFT and claim any Hold rewards owing if not legacyStaked, otherwise claim Staked rewards and update\\n    /// @param nftContract NFT contract to use\\n    /// @param nftIds List of NFTs to stake\\n    function stakeNfts(IERC721 nftContract, uint256[] calldata nftIds) external whenNotPaused {\\n        if (!nftInterfaces[nftContract]) revert InvalidInput();\\n        uint256 totalRewards = 0;\\n        nftDataStruct memory nft;\\n\\n        for (uint256 i; i<nftIds.length; i++) {\\n            uint256 nftId = nftIds[i];\\n            nft = nftData[nftContract][nftId];\\n\\n            if (nft.legacyStaking == false) {\\n                totalRewards += _executeRewards(nftContract, nftId, HOLDING_REWARD, HOLDING_REWARD * 3);\\n            } else {\\n                totalRewards += _executeRewards(nftContract, nftId, STAKING_REWARD, 0);\\n                confirmLegacyStaking(nftContract, nftId);\\n            }\\n\\n            nftData[nftContract][nftId] = nftDataStruct(msg.sender, true, uint64(block.timestamp), false);\\n            _transferNft(nftContract, msg.sender, address(this), nftId);\\n            emit StakedNft(msg.sender, address(nftContract), nftId);\\n        }\\n        if (totalRewards > 0) mint(msg.sender, totalRewards);\\n    }\\n\\n\\n    /// @notice Unstake NFT and claim Stake rewards owing, resetting Hold reward time\\n    /// @param nftContract NFT contract to use\\n    /// @param nftIds List of NFTs to stake\\n    function unstakeNfts(IERC721 nftContract, uint256[] calldata nftIds) external whenNotPaused {\\n        nftDataStruct memory nft;\\n        uint256 totalRewards;\\n\\n        for (uint256 i; i<nftIds.length; i++) {\\n            uint256 nftId = nftIds[i];\\n            nft = nftData[nftContract][nftId];\\n            if (nft.staked == false) revert InvalidInput();\\n            if (nft.ownerAddress != msg.sender) revert NotOwnerOfToken();\\n\\n            totalRewards += _executeRewards(nftContract, nftId, STAKING_REWARD, 0);\\n            nftData[nftContract][nftId] = nftDataStruct(msg.sender, false, uint64(block.timestamp), false);\\n            _transferNft(nftContract, address(this), nft.ownerAddress, nftId);\\n            emit UnstakedNft(msg.sender, address(nftContract), nftId, msg.sender);\\n        }\\n        if (totalRewards > 0) mint(msg.sender, totalRewards);\\n    }    \\n\\n\\n    /// @notice Returns amount of rewards to mint \\n    /// @dev Emits event assuming mint will happen\\n    /// @param nftContract NFT contract to use\\n    /// @param nftId NFT to calculate rewards for\\n    /// @param rewardAmount Weekly reward amount\\n    /// @param initialReward Default reward amount\\n    function _executeRewards(IERC721 nftContract, uint256 nftId, uint256 rewardAmount, uint256 initialReward) internal returns (uint256) {\\n        uint256 rewards = _rewardsForTimestamp(\\n            nftData[nftContract][nftId].timestamp,\\n            rewardAmount,\\n            initialReward\\n        );\\n        emit UserClaimedRewards(msg.sender, address(nftContract), nftId, rewards);\\n        return rewards;\\n    }\\n\\n\\n    /// @notice Emergency Unstake NFT\\n    /// @param nftContract NFT contract to use\\n    /// @param nftIds List of NFTs to stake\\n    /// @param to Where to send NFT\\n    function unstakeNftEmergency(IERC721 nftContract, uint256[] calldata nftIds, address user, address to) external onlyAdmin {\\n        for (uint256 i; i<nftIds.length; i++) {\\n            address realUser = (admin[msg.sender]==true) ? user : msg.sender;\\n            nftData[nftContract][nftIds[i]] = nftDataStruct(to, false, uint64(block.timestamp), false);\\n            _transferNft(nftContract, address(this), to, nftIds[i]);\\n            emit UnstakedNft(realUser, address(nftContract), nftIds[i], to);\\n        }\\n    }\\n\\n\\n    /// @notice Claim either Hold or Claim rewards for each Nft\\n    /// @param nftContract Which NFT set is being used\\n    /// @param nftIds NFT id's to claim for\\n    function claimRewards(IERC721 nftContract, uint256[] calldata nftIds, address user) public whenNotPaused {\\n        if (!nftInterfaces[nftContract] || msg.sender == address(0)) revert InvalidInput();\\n        uint256 totalRewards;\\n        nftDataStruct memory nft;\\n\\n        address realUser = (admin[msg.sender]==true) ? user : msg.sender;\\n    \\n        for (uint256 i; i<nftIds.length; i++) {\\n            uint256 nftId = nftIds[i];\\n            nft = nftData[nftContract][nftId];\\n\\n            if (nft.staked == false) {\\n                if (nftContract.ownerOf(nftId) != realUser) revert NotOwnerOfToken();\\n                totalRewards += _executeRewards(nftContract, nftId, HOLDING_REWARD, HOLDING_REWARD * 3);\\n            } else {\\n                if (nft.ownerAddress != realUser) revert NotOwnerOfToken();\\n                totalRewards += _executeRewards(nftContract, nftId, STAKING_REWARD, 0);\\n                if (nft.legacyStaking == true) confirmLegacyStaking(nftContract, nftId);\\n            }\\n            \\n            nftData[nftContract][nftId].timestamp = uint64(block.timestamp);\\n        }\\n        if (totalRewards > 0) mint(realUser, totalRewards);\\n    }\\n\\n\\n    /// @notice Calculate Hold or Staked rewards based on timestamp\\n    /// @param timestamp Timestamp to use\\n    /// @param rewardValue How much to reward per week\\n    /// @param initialReward Initial reward if first time claiming\\n    function _rewardsForTimestamp(uint256 timestamp, uint256 rewardValue, uint256 initialReward) internal view returns (uint256) {\\n        return (timestamp > 0)\\n            ? rewardValue * ((block.timestamp - timestamp) / 1 weeks)\\n            : initialReward;\\n    }\\n\\n\\n    /// @notice Actually transfer NFT\\n    /// @dev Internal only, checks are done before this\\n    /// @param nftContract NFT contract to use\\n    /// @param from Where to transfer NFT from\\n    /// @param to Where to send NFT\\n    function _transferNft(IERC721 nftContract, address from, address to, uint256 nftId) internal {\\n        nftContract.transferFrom(from, to, nftId);\\n    }\\n\\n\\n    /// @notice Checks if NFT uses legacyStaking and if it's still valid, otherwise update struct to show not staked\\n    /// @param nftContract Which NFT contract to use\\n    /// @param nftId Which NFT to check\\n    function confirmLegacyStaking(IERC721 nftContract, uint256 nftId) internal {\\n        if (nftContract.ownerOf(nftId) != oddworxContractAddress ) {\\n            nftData[nftContract][nftId].legacyStaking = false;\\n            nftData[nftContract][nftId].staked = false; \\n        }\\n    }\\n\\n}\\n\\n\"\r\n    },\r\n    \"contracts/IOddworx.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface IOddworx {\\n    function burn(address _from, uint256 amount) external;\\n    function mint(address to, uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oddworxAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOfToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemSKU\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"StakedNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"UnstakedNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserClaimedRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOLDING_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemSKU\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"changeStaking\",\"type\":\"bool\"}],\"name\":\"changeRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNftData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"legacyStaking\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftHoldRewardsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftInterfaces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oddworxContract\",\"outputs\":[{\"internalType\":\"contract IOddworx\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oddworxContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setOddworxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usingLegacyStaking\",\"type\":\"bool\"}],\"name\":\"setUserNftData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"toggleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"toggleNftInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"unstakeNftEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OddworxStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004095547f958593b5431c0306e81df4293991d5b3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}