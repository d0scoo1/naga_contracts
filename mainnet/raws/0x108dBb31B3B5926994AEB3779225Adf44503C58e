{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/idle/BorrowRecipient.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IdleBorrowableStrategy.sol\\\";\\nimport \\\"../../base/interface/IStrategy.sol\\\";\\nimport \\\"../../base/interface/IVault.sol\\\";\\nimport \\\"../../base/interface/IUniswapV3Viewer.sol\\\";\\nimport \\\"../../base/interface/IUniswapV3Vault.sol\\\";\\nimport \\\"../../base/inheritance/Controllable.sol\\\";\\n\\ncontract BorrowRecipient is Controllable {\\n\\n  using SafeERC20 for IERC20;\\n\\n  address public strategy;\\n  address public investmentVault;\\n  address public uniswapViewer;\\n  address public underlying;\\n\\n  constructor(address _storage, address _strategy, address _investmentVault, address _uniswapViewer)\\n  public Controllable(_storage) {\\n    strategy = _strategy;\\n    investmentVault = _investmentVault;\\n    uniswapViewer = _uniswapViewer;\\n    underlying = IVault(IStrategy(strategy).vault()).underlying();\\n  }\\n\\n  function approveBack(uint256 _amount) external onlyGovernance {\\n    IERC20(underlying).safeApprove(strategy, 0);\\n    IERC20(underlying).safeApprove(strategy, _amount);\\n  }\\n\\n  function pullLoan(uint256 _amount) external {\\n    require(msg.sender == strategy, \\\"Only strategy\\\");\\n    IERC20(underlying).safeTransferFrom(strategy, address(this), _amount);\\n  }\\n\\n  function deposit(\\n    uint256 _amount0,\\n    uint256 _amount1,\\n    bool _zapFunds,\\n    bool _sweep,\\n    uint256 _sqrtRatioX96,\\n    uint256 _tolerance\\n  ) external onlyGovernance returns (uint256, uint256) {\\n    IERC20 token0 = IERC20(IUniswapV3Vault(investmentVault).token0());\\n    IERC20 token1 = IERC20(IUniswapV3Vault(investmentVault).token1());\\n    token0.safeApprove(investmentVault, 0);\\n    token0.safeApprove(investmentVault, _amount0);\\n    token1.safeApprove(investmentVault, 0);\\n    token1.safeApprove(investmentVault, _amount1);\\n    return IUniswapV3Vault(investmentVault).deposit(_amount0, _amount1, _zapFunds, _sweep, _sqrtRatioX96, _tolerance);\\n  }\\n\\n  function withdraw(uint256 _numberOfShares,\\n    bool _token0,\\n    bool _token1,\\n    uint256 _sqrtRatioX96,\\n    uint256 _tolerance) external onlyGovernance returns (uint256, uint256) {\\n    return IUniswapV3Vault(investmentVault).withdraw(_numberOfShares, _token0, _token1, _sqrtRatioX96, _tolerance);\\n  }\\n\\n  function drain(address token, uint256 _amount) external onlyGovernance {\\n    if (underlying == token) {\\n      require(IdleBorrowableStrategy(strategy).borrowed() == 0, \\\"Settle loan before taking profit\\\");\\n    }\\n    IERC20(token).safeTransfer(msg.sender, _amount);\\n  }\\n\\n  function getPositionId() public view returns (uint256) {\\n    return IUniswapV3Vault(investmentVault).getStorage().posId();\\n  }\\n\\n  function getSqrtPriceX96ForPosition() public view returns(uint160) {\\n    return IUniswapV3Viewer(uniswapViewer).getSqrtPriceX96ForPosition(getPositionId());\\n  }\\n\\n  function getLiquidityAmounts() public view returns (uint256 userAmount0, uint256 userAmount1) {\\n    uint256 balance = IERC20(investmentVault).balanceOf(address(this));\\n    return IUniswapV3Viewer(uniswapViewer).getAmountsForUserShare(investmentVault, balance);\\n  }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/idle/IdleBorrowableStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IdleFinanceStrategy.sol\\\";\\nimport \\\"./interface/IBorrowRecipient.sol\\\";\\n\\ncontract IdleBorrowableStrategy is IdleFinanceStrategy {\\n\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public borrowed;\\n  address public borrowRecipient;\\n\\n  constructor(\\n    address _storage,\\n    address _underlying,\\n    address _idleUnderlying,\\n    address _vault,\\n    address _stkaave\\n  )\\n  IdleFinanceStrategy(\\n    _storage,\\n    _underlying,\\n    _idleUnderlying,\\n    _vault,\\n    _stkaave\\n  )\\n  public {\\n  }\\n\\n  function borrow(bool _exitFirst, bool _reinvest, uint256 _amount) external onlyGovernance {\\n    require(borrowRecipient != address(0), \\\"Borrow recipient is not configured\\\");\\n    if (_exitFirst) {\\n      withdrawAll();\\n    }\\n    IERC20(underlying).safeApprove(borrowRecipient, 0);\\n    IERC20(underlying).safeApprove(borrowRecipient, _amount);\\n    IBorrowRecipient(borrowRecipient).pullLoan(_amount);\\n    borrowed = borrowed.add(_amount);\\n    if (_reinvest) {\\n      investAllUnderlying();\\n    }\\n  }\\n\\n  function repayFrom(address _from, bool _reinvest, uint256 _amount) public onlyGovernance {\\n    IERC20(underlying).safeTransferFrom(_from, address(this), _amount);\\n    borrowed = borrowed.sub(_amount);\\n    if (_reinvest) {\\n      investAllUnderlying();\\n    }\\n  }\\n\\n  function repay(bool _reinvest, uint256 _amount) external onlyGovernance {\\n    repayFrom(borrowRecipient, _reinvest, _amount);\\n  }\\n\\n  function investedUnderlyingBalance() public view returns (uint256) {\\n    return super.investedUnderlyingBalance().add(borrowed);\\n  }\\n\\n  function withdrawToVault(uint256 amountUnderlying) public restricted {\\n    // the following investment balance excludes the loan\\n    uint256 idleInvestment = super.investedUnderlyingBalance();\\n    require (amountUnderlying <= idleInvestment, \\\"Loan needs repaying\\\");\\n    // use the super implementation if there is enough in idle\\n    super.withdrawToVault(amountUnderlying);\\n  }\\n\\n  function setBorrowRecipient(address _borrowRecipient) external onlyGovernance {\\n    require(_borrowRecipient != address(0), \\\"Use removeBorrowRecipient instead\\\");\\n    borrowRecipient = _borrowRecipient;\\n  }\\n\\n  function removeBorrowRecipient() external onlyGovernance {\\n    require(borrowed == 0, \\\"Repay the loan first\\\");\\n    borrowRecipient = address(0);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IStrategy {\\n    \\n    function unsalvagableTokens(address tokens) external view returns (bool);\\n    \\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function vault() external view returns (address);\\n\\n    function withdrawAllToVault() external;\\n    function withdrawToVault(uint256 amount) external;\\n\\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\\n\\n    // should only be called by controller\\n    function salvage(address recipient, address token, uint256 amount) external;\\n\\n    function doHardWork() external;\\n    function depositArbCheck() external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IVault {\\n\\n    function initializeVault(\\n      address _storage,\\n      address _underlying,\\n      uint256 _toInvestNumerator,\\n      uint256 _toInvestDenominator\\n    ) external ;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function underlyingBalanceInVault() external view returns (uint256);\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n    // function store() external view returns (address);\\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function strategy() external view returns (address);\\n\\n    function setStrategy(address _strategy) external;\\n    function announceStrategyUpdate(address _strategy) external;\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\\n\\n    function deposit(uint256 amountWei) external;\\n    function depositFor(uint256 amountWei, address holder) external;\\n\\n    function withdrawAll() external;\\n    function withdraw(uint256 numberOfShares) external;\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\\n\\n    // hard work should be callable only by the controller (by the hard worker) or by governance\\n    function doHardWork() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IUniswapV3Viewer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.5.16;\\n\\ninterface IUniswapV3Viewer {\\n\\n  function getSqrtPriceX96(address _token0, address _token1, uint24 _fee) external view returns(uint160);\\n\\n  function getSqrtPriceX96ForPosition(uint256 posId) external view returns(uint160);\\n\\n  function getAmountsForPosition(uint256 posId) external view returns (uint256 amount0, uint256 amount1);\\n\\n  function getAmountsForUserShare(address vaultAddr, uint256 userShare) external view returns (uint256 userAmount0, uint256 userAmount1);\\n\\n  function enumerateNftRelevantTo(uint256 posId, address nftOwner) external view returns (uint256[] memory);\\n\\n  function quoteV2Migration(address _token0, address _token1, uint256 _lpAmount) external view returns(uint256, uint256);\\n\\n}\"\r\n    },\r\n    \"contracts/base/interface/IUniswapV3Vault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.5.16;\\n\\ninterface IUniswapV3Vault {\\n\\n  function deposit(\\n    uint256 _amount0,\\n    uint256 _amount1,\\n    bool _zapFunds,\\n    bool _sweep,\\n    uint256 _sqrtRatioX96,\\n    uint256 _tolerance\\n  ) external returns (uint256, uint256);\\n\\n  function deposit(\\n    uint256 _amount0,\\n    uint256 _amount1,\\n    bool _zapFunds,\\n    uint256 _sqrtRatioX96,\\n    uint256 _tolerance,\\n    uint256 _zapAmount0OutMin,\\n    uint256 _zapAmount1OutMin,\\n    uint160 _zapSqrtPriceLimitX96\\n  ) external returns (uint256, uint256);\\n\\n  function withdraw(\\n    uint256 _numberOfShares,\\n    bool _token0,\\n    bool _token1,\\n    uint256 _sqrtRatioX96,\\n    uint256 _tolerance\\n  ) external returns (uint256, uint256);\\n\\n  function token0() external view returns (address);\\n  function token1() external view returns (address);\\n  function getStorage() external view returns (IUniswapV3VaultStorage);\\n}\\n\\ninterface IUniswapV3VaultStorage {\\n  function posId() external view returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/base/inheritance/Controllable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./Governable.sol\\\";\\n\\ncontract Controllable is Governable {\\n\\n  constructor(address _storage) Governable(_storage) public {\\n  }\\n\\n  modifier onlyController() {\\n    require(store.isController(msg.sender), \\\"Not a controller\\\");\\n    _;\\n  }\\n\\n  modifier onlyControllerOrGovernance(){\\n    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\\n      \\\"The caller must be controller or governance\\\");\\n    _;\\n  }\\n\\n  function controller() public view returns (address) {\\n    return store.controller();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/idle/IdleFinanceStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../base/inheritance/RewardTokenProfitNotifier.sol\\\";\\nimport \\\"../../base/interface/IStrategy.sol\\\";\\nimport \\\"../../base/interface/IVault.sol\\\";\\nimport \\\"../../base/interface/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./interface/IdleToken.sol\\\";\\nimport \\\"./interface/IIdleTokenHelper.sol\\\";\\nimport \\\"./interface/IStakedAave.sol\\\";\\n\\ncontract IdleFinanceStrategy is IStrategy, RewardTokenProfitNotifier {\\n\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  event ProfitsNotCollected(address);\\n  event Liquidating(address, uint256);\\n\\n  address public referral;\\n  IERC20 public underlying;\\n  address public idleUnderlying;\\n  uint256 public virtualPrice;\\n  IIdleTokenHelper public idleTokenHelper;\\n\\n  address public vault;\\n  address public stkaave;\\n\\n  address[] public rewardTokens;\\n  mapping(address => address[]) public reward2WETH;\\n  address[] public WETH2underlying;\\n  mapping(address => bool) public sell;\\n  mapping(address => bool) public useUni;\\n\\n  address public constant uniswapRouterV2 = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n  address public constant sushiswapRouterV2 = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\\n  address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n  bool public claimAllowed;\\n  bool public protected;\\n\\n  bool public allowedRewardClaimable = false;\\n  address public multiSig = address(0xF49440C1F012d041802b25A73e5B0B9166a75c02);\\n\\n  // These tokens cannot be claimed by the controller\\n  mapping (address => bool) public unsalvagableTokens;\\n\\n  modifier restricted() {\\n    require(msg.sender == vault || msg.sender == address(controller()) || msg.sender == address(governance()),\\n      \\\"The sender has to be the controller or vault or governance\\\");\\n    _;\\n  }\\n\\n  modifier onlyMultiSigOrGovernance() {\\n    require(msg.sender == multiSig || msg.sender == governance(), \\\"The sender has to be multiSig or governance\\\");\\n    _;\\n  }\\n\\n  modifier updateVirtualPrice() {\\n    if (protected) {\\n      // virtualPrice = 1.0\\n      // -- Deposit 1M into harvest with redeem price 1.01\\n      // Real redeem price is 1.01\\n      // Reduce redeem price to 1.00 via flash loan\\n      // Buy into IDLE for 1.00 with $1B\\n      // Increase the redeem price to $1.01 by reverting the flash loan\\n      // Withdraw from IDLE for 1.01 => $10M profit\\n      // IDLE's real redeem price went down to 1.00, 1% loss to IDLE taken from the other depositors\\n      // -- The deposit in Harvest has virtualPrice = 1.01, so withdraw that\\n      // redeem = 1.01\\n      // 1.0\\n      require(virtualPrice <= idleTokenHelper.getRedeemPrice(idleUnderlying), \\\"virtual price is higher than needed\\\");\\n    }\\n    _;\\n    virtualPrice = idleTokenHelper.getRedeemPrice(idleUnderlying);\\n  }\\n\\n  constructor(\\n    address _storage,\\n    address _underlying,\\n    address _idleUnderlying,\\n    address _vault,\\n    address _stkaave\\n  ) RewardTokenProfitNotifier(_storage, weth) public {\\n    stkaave = _stkaave;\\n    underlying = IERC20(_underlying);\\n    idleUnderlying = _idleUnderlying;\\n    vault = _vault;\\n    protected = true;\\n\\n    // set these tokens to be not salvagable\\n    unsalvagableTokens[_underlying] = true;\\n    unsalvagableTokens[_idleUnderlying] = true;\\n    for (uint256 i = 0; i < rewardTokens.length; i++) {\\n      address token = rewardTokens[i];\\n      unsalvagableTokens[token] = true;\\n    }\\n    referral = address(0xf00dD244228F51547f0563e60bCa65a30FBF5f7f);\\n    claimAllowed = true;\\n\\n    idleTokenHelper = IIdleTokenHelper(0x04Ce60ed10F6D2CfF3AA015fc7b950D13c113be5);\\n    virtualPrice = idleTokenHelper.getRedeemPrice(idleUnderlying);\\n  }\\n\\n  function depositArbCheck() public view returns(bool) {\\n    return true;\\n  }\\n\\n  function setReferral(address _newRef) public onlyGovernance {\\n    referral = _newRef;\\n  }\\n\\n  /**\\n  * The strategy invests by supplying the underlying token into IDLE.\\n  */\\n  function investAllUnderlying() public restricted updateVirtualPrice {\\n    uint256 balance = underlying.balanceOf(address(this));\\n    underlying.safeApprove(address(idleUnderlying), 0);\\n    underlying.safeApprove(address(idleUnderlying), balance);\\n    IIdleTokenV3_1(idleUnderlying).mintIdleToken(balance, true, referral);\\n  }\\n\\n  /**\\n  * Exits IDLE and transfers everything to the vault.\\n  */\\n  function withdrawAllToVault() external restricted updateVirtualPrice {\\n    withdrawAll();\\n    IERC20(address(underlying)).safeTransfer(vault, underlying.balanceOf(address(this)));\\n  }\\n\\n  /**\\n  * Withdraws all from IDLE\\n  */\\n  function withdrawAll() internal {\\n    uint256 balance = IERC20(idleUnderlying).balanceOf(address(this));\\n\\n    // this automatically claims the crops\\n    IIdleTokenV3_1(idleUnderlying).redeemIdleToken(balance);\\n\\n    liquidateRewards();\\n  }\\n\\n  function withdrawToVault(uint256 amountUnderlying) public restricted {\\n    // this method is called when the vault is missing funds\\n    // we will calculate the proportion of idle LP tokens that matches\\n    // the underlying amount requested\\n    uint256 balanceBefore = underlying.balanceOf(address(this));\\n    uint256 totalIdleLpTokens = IERC20(idleUnderlying).balanceOf(address(this));\\n    uint256 totalUnderlyingBalance = totalIdleLpTokens.mul(virtualPrice).div(1e18);\\n    uint256 ratio = amountUnderlying.mul(1e18).div(totalUnderlyingBalance);\\n    uint256 toRedeem = totalIdleLpTokens.mul(ratio).div(1e18);\\n    IIdleTokenV3_1(idleUnderlying).redeemIdleToken(toRedeem);\\n    uint256 balanceAfter = underlying.balanceOf(address(this));\\n    underlying.safeTransfer(vault, balanceAfter.sub(balanceBefore));\\n  }\\n\\n  /**\\n  * Withdraws all assets, liquidates COMP, and invests again in the required ratio.\\n  */\\n  function doHardWork() public restricted updateVirtualPrice {\\n    if (claimAllowed) {\\n      claim();\\n    }\\n    liquidateRewards();\\n\\n    // this updates the virtual price\\n    investAllUnderlying();\\n\\n    // state of supply/loan will be updated by the modifier\\n  }\\n\\n  /**\\n  * Salvages a token.\\n  */\\n  function salvage(address recipient, address token, uint256 amount) public onlyGovernance {\\n    // To make sure that governance cannot come in and take away the coins\\n    require(!unsalvagableTokens[token], \\\"token is defined as not salvagable\\\");\\n    IERC20(token).safeTransfer(recipient, amount);\\n  }\\n\\n  function claim() internal {\\n    IIdleTokenV3_1(idleUnderlying).redeemIdleToken(0);\\n\\n    uint256 claimableAave = IStakedAave(stkaave).stakerRewardsToClaim(address(this));\\n    if (claimableAave > 0) {\\n      IStakedAave(stkaave).claimRewards(address(this), claimableAave);\\n    }\\n  }\\n\\n  function liquidateRewards() internal {\\n    uint256 startingWethBalance = IERC20(weth).balanceOf(address(this));\\n    for (uint256 i=0;i<rewardTokens.length;i++) {\\n      address token = rewardTokens[i];\\n      if (!sell[token]) {\\n        // Profits can be disabled for possible simplified and rapid exit\\n        emit ProfitsNotCollected(token);\\n        continue;\\n      }\\n\\n      uint256 balance = IERC20(token).balanceOf(address(this));\\n      if (balance > 0) {\\n        emit Liquidating(token, balance);\\n        address routerV2;\\n        if(useUni[token]) {\\n          routerV2 = uniswapRouterV2;\\n        } else {\\n          routerV2 = sushiswapRouterV2;\\n        }\\n        IERC20(token).safeApprove(routerV2, 0);\\n        IERC20(token).safeApprove(routerV2, balance);\\n        // we can accept 1 as the minimum because this will be called only by a trusted worker\\n        IUniswapV2Router02(routerV2).swapExactTokensForTokens(\\n          balance, 1, reward2WETH[token], address(this), block.timestamp\\n        );\\n      }\\n    }\\n\\n    uint256 wethBalance = IERC20(weth).balanceOf(address(this));\\n    if (address(underlying) == weth) {\\n      wethBalance = wethBalance.sub(startingWethBalance);\\n    }\\n    notifyProfitInRewardToken(wethBalance);\\n\\n    uint256 remainingWethBalance = IERC20(weth).balanceOf(address(this));\\n\\n    if (remainingWethBalance > 0 && address(underlying) != weth) {\\n      emit Liquidating(weth, remainingWethBalance);\\n      address routerV2;\\n      if(useUni[address(underlying)]) {\\n        routerV2 = uniswapRouterV2;\\n      } else {\\n        routerV2 = sushiswapRouterV2;\\n      }\\n      IERC20(weth).safeApprove(routerV2, 0);\\n      IERC20(weth).safeApprove(routerV2, remainingWethBalance);\\n      // we can accept 1 as the minimum because this will be called only by a trusted worker\\n      IUniswapV2Router02(routerV2).swapExactTokensForTokens(\\n        remainingWethBalance, 1, WETH2underlying, address(this), block.timestamp\\n      );\\n    }\\n  }\\n\\n  /**\\n  * Returns the current balance. Ignores COMP that was not liquidated and invested.\\n  */\\n  function investedUnderlyingBalance() public view returns (uint256) {\\n    // NOTE: The use of virtual price is okay for appreciating assets inside IDLE,\\n    // but would be wrong and exploitable if funds were lost by IDLE, indicated by\\n    // the virtualPrice being greater than the token price.\\n    if (protected) {\\n      require(virtualPrice <= idleTokenHelper.getRedeemPrice(idleUnderlying), \\\"virtual price is higher than needed\\\");\\n    }\\n    // deposit 10x of the vault's TVL => 1.00, $10B, $1B => $11B\\n    // wait for doHardWork, increase the virtual price by 1% $11B + $110M\\n    // withdraw the 10x from the vault => $11B + $100M\\n    uint256 invested = IERC20(idleUnderlying).balanceOf(address(this)).mul(virtualPrice).div(1e18);\\n    return invested.add(IERC20(underlying).balanceOf(address(this)));\\n  }\\n\\n  function setLiquidation(address _token, bool _sell) public onlyGovernance {\\n     sell[_token] = _sell;\\n  }\\n\\n  function setClaimAllowed(bool _claimAllowed) public onlyGovernance {\\n    claimAllowed = _claimAllowed;\\n  }\\n\\n  function setProtected(bool _protected) public onlyGovernance {\\n    protected = _protected;\\n  }\\n\\n  function setMultiSig(address _address) public onlyGovernance {\\n    multiSig = _address;\\n  }\\n\\n  function setRewardClaimable(bool flag) public onlyGovernance {\\n    allowedRewardClaimable = flag;\\n  }\\n\\n  // reward claiming by multiSig. Only the stkAave rewards are claimable!\\n  function claimReward() public onlyMultiSigOrGovernance {\\n    require(allowedRewardClaimable, \\\"reward claimable is not allowed\\\");\\n    claim();\\n    uint256 stkAaveBalance = IERC20(stkaave).balanceOf(address(this));\\n    if (stkAaveBalance > 0){\\n      IERC20(stkaave).safeTransfer(msg.sender, stkAaveBalance);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/idle/interface/IBorrowRecipient.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IBorrowRecipient {\\n\\n  function approveBack(uint256 _amount) external;\\n\\n  function pullLoan(uint256 _amount) external;\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/RewardTokenProfitNotifier.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IController.sol\\\";\\nimport \\\"../interface/IFeeRewardForwarderV6.sol\\\";\\nimport \\\"./Controllable.sol\\\";\\n\\ncontract RewardTokenProfitNotifier is Controllable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public profitSharingNumerator;\\n  uint256 public profitSharingDenominator;\\n  address public rewardToken;\\n\\n  constructor(\\n    address _storage,\\n    address _rewardToken\\n  ) public Controllable(_storage){\\n    rewardToken = _rewardToken;\\n    // persist in the state for immutability of the fee\\n    profitSharingNumerator = 30; //IController(controller()).profitSharingNumerator();\\n    profitSharingDenominator = 100; //IController(controller()).profitSharingDenominator();\\n    require(profitSharingNumerator < profitSharingDenominator, \\\"invalid profit share\\\");\\n  }\\n\\n  event ProfitLogInReward(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\\n  event ProfitAndBuybackLog(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\\n\\n  function notifyProfitInRewardToken(uint256 _rewardBalance) internal {\\n    if( _rewardBalance > 0 ){\\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator).div(profitSharingDenominator);\\n      emit ProfitLogInReward(_rewardBalance, feeAmount, block.timestamp);\\n      IERC20(rewardToken).safeApprove(controller(), 0);\\n      IERC20(rewardToken).safeApprove(controller(), feeAmount);\\n\\n      IController(controller()).notifyFee(\\n        rewardToken,\\n        feeAmount\\n      );\\n    } else {\\n      emit ProfitLogInReward(0, 0, block.timestamp);\\n    }\\n  }\\n\\n  function notifyProfitAndBuybackInRewardToken(uint256 _rewardBalance, address pool, uint256 _buybackRatio) internal {\\n    if( _rewardBalance > 0 ){\\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator).div(profitSharingDenominator);\\n      address forwarder = IController(controller()).feeRewardForwarder();\\n      emit ProfitAndBuybackLog(_rewardBalance, feeAmount, block.timestamp);\\n      IERC20(rewardToken).safeApprove(forwarder, 0);\\n      IERC20(rewardToken).safeApprove(forwarder, _rewardBalance);\\n\\n      IFeeRewardForwarderV6(forwarder).notifyFeeAndBuybackAmounts(\\n        rewardToken,\\n        feeAmount,\\n        pool,\\n        _rewardBalance.sub(feeAmount).mul(_buybackRatio).div(10000)\\n      );\\n    } else {\\n      emit ProfitAndBuybackLog(0, 0, block.timestamp);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/idle/interface/IdleToken.sol\": {\r\n      \"content\": \"/**\\n * @title: Idle Token interface\\n * @author: Idle Labs Inc., idle.finance\\n */\\npragma solidity 0.5.16;\\n\\ninterface IIdleTokenV3_1 {\\n    // view\\n    /**\\n     * IdleToken price calculation, in underlying\\n     *\\n     * @return : price in underlying token\\n     */\\n    function tokenPrice() external view returns (uint256 price);\\n\\n    /**\\n     * @return : underlying token address\\n     */\\n    function token() external view returns (address);\\n    /**\\n     * Get APR of every ILendingProtocol\\n     *\\n     * @return addresses: array of token addresses\\n     * @return aprs: array of aprs (ordered in respect to the `addresses` array)\\n     */\\n    function getAPRs() external view returns (address[] memory addresses, uint256[] memory aprs);\\n\\n    // external\\n    // We should save the amount one has deposited to calc interests\\n\\n    /**\\n     * Used to mint IdleTokens, given an underlying amount (eg. DAI).\\n     * This method triggers a rebalance of the pools if needed\\n     * NOTE: User should 'approve' _amount of tokens before calling mintIdleToken\\n     * NOTE 2: this method can be paused\\n     *\\n     * @param _amount : amount of underlying token to be lended\\n     * @param _skipRebalance : flag for skipping rebalance for lower gas price\\n     * @param _referral : referral address\\n     * @return mintedTokens : amount of IdleTokens minted\\n     */\\n    function mintIdleToken(uint256 _amount, bool _skipRebalance, address _referral) external returns (uint256 mintedTokens);\\n\\n    /**\\n     * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\\n     * This method triggers a rebalance of the pools if needed\\n     * NOTE: If the contract is paused or iToken price has decreased one can still redeem but no rebalance happens.\\n     * NOTE 2: If iToken price has decresed one should not redeem (but can do it) otherwise he would capitalize the loss.\\n     *         Ideally one should wait until the black swan event is terminated\\n     *\\n     * @param _amount : amount of IdleTokens to be burned\\n     * @return redeemedTokens : amount of underlying tokens redeemed\\n     */\\n    function redeemIdleToken(uint256 _amount) external returns (uint256 redeemedTokens);\\n    /**\\n     * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\\n     * and send interest-bearing tokens (eg. cDAI/iDAI) directly to the user.\\n     * Underlying (eg. DAI) is not redeemed here.\\n     *\\n     * @param _amount : amount of IdleTokens to be burned\\n     */\\n    function redeemInterestBearingTokens(uint256 _amount) external;\\n\\n    /**\\n     * @return : whether has rebalanced or not\\n     */\\n    function rebalance() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/idle/interface/IIdleTokenHelper.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract IIdleTokenHelper {\\n  function getMintingPrice(address idleYieldToken) view external returns (uint256 mintingPrice);\\n  function getRedeemPrice(address idleYieldToken) view external returns (uint256 redeemPrice);\\n  function getRedeemPrice(address idleYieldToken, address user) view external returns (uint256 redeemPrice);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/idle/interface/IStakedAave.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IStakedAave {\\nfunction stake(address to, uint256 amount) external;\\n\\nfunction redeem(address to, uint256 amount) external;\\n\\nfunction cooldown() external;\\n\\nfunction claimRewards(address to, uint256 amount) external;\\nfunction COOLDOWN_SECONDS() external view returns(uint256);\\nfunction UNSTAKE_WINDOW() external view returns(uint256);\\nfunction stakersCooldowns(address input) external view returns(uint256);\\nfunction stakerRewardsToClaim(address input) external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IController {\\n\\n    event SharePriceChangeLog(\\n      address indexed vault,\\n      address indexed strategy,\\n      uint256 oldSharePrice,\\n      uint256 newSharePrice,\\n      uint256 timestamp\\n    );\\n\\n    // [Grey list]\\n    // An EOA can safely interact with the system no matter what.\\n    // If you're using Metamask, you're using an EOA.\\n    // Only smart contracts may be affected by this grey list.\\n    //\\n    // This contract will not be able to ban any EOA from the system\\n    // even if an EOA is being added to the greyList, he/she will still be able\\n    // to interact with the whole system as if nothing happened.\\n    // Only smart contracts will be affected by being added to the greyList.\\n    // This grey list is only used in Vault.sol, see the code there for reference\\n    function greyList(address _target) external view returns(bool);\\n\\n    function addVaultAndStrategy(address _vault, address _strategy) external;\\n    function doHardWork(address _vault) external;\\n\\n    function salvage(address _token, uint256 amount) external;\\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\\n\\n    function notifyFee(address _underlying, uint256 fee) external;\\n    function profitSharingNumerator() external view returns (uint256);\\n    function profitSharingDenominator() external view returns (uint256);\\n\\n    function feeRewardForwarder() external view returns(address);\\n    function setFeeRewardForwarder(address _value) external;\\n\\n    function addHardWorker(address _worker) external;\\n    function addToWhitelist(address _target) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IFeeRewardForwarderV6.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IFeeRewardForwarderV6 {\\n    function poolNotifyFixedTarget(address _token, uint256 _amount) external;\\n\\n    function notifyFeeAndBuybackAmounts(uint256 _feeAmount, address _pool, uint256 _buybackAmount) external;\\n    function notifyFeeAndBuybackAmounts(address _token, uint256 _feeAmount, address _pool, uint256 _buybackAmount) external;\\n    function profitSharingPool() external view returns (address);\\n    function configureLiquidation(address[] calldata _path, bytes32[] calldata _dexes) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Governable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./Storage.sol\\\";\\n\\ncontract Governable {\\n\\n  Storage public store;\\n\\n  constructor(address _store) public {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setStorage(address _store) public onlyGovernance {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  function governance() public view returns (address) {\\n    return store.governance();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Storage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract Storage {\\n\\n  address public governance;\\n  address public controller;\\n\\n  constructor() public {\\n    governance = msg.sender;\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setGovernance(address _governance) public onlyGovernance {\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\n    governance = _governance;\\n  }\\n\\n  function setController(address _controller) public onlyGovernance {\\n    require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\n    controller = _controller;\\n  }\\n\\n  function isGovernance(address account) public view returns (bool) {\\n    return account == governance;\\n  }\\n\\n  function isController(address account) public view returns (bool) {\\n    return account == controller;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/uniswap/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investmentVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapViewer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_zapFunds\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_sweep\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sqrtRatioX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tolerance\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLiquidityAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userAmount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAmount1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSqrtPriceX96ForPosition\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pullLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapViewer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfShares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_token0\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_token1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sqrtRatioX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tolerance\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BorrowRecipient", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c95cbe4ca30055c787cb784be99d6a8494d0d197000000000000000000000000bfa26f1354c991386125c5d9827880a6ddf67dde0000000000000000000000001851a8fa2ca4d8fb8b5c56eac1813fd890998efc0000000000000000000000006e87abd51ccb2290ee1ff65c3749c9420a0cd36e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}