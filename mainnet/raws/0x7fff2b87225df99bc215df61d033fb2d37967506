{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"BridgeCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.7;\\n\\ncontract BridgeCore {\\n    address public owner;\\n    address private pendingOwner;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    bytes32 public DOMAIN_SEPARATOR;\\n    WSDInterface public wsd;\\n    mapping(address => bool) public blackList;\\n    mapping(address => uint) public nonces;\\n    event OwnerChanged(address owner, address newOwner);\\n    event WSDAddressChanged(address wsd, address newWsd);\\n    event AddedToBlackList(address account);\\n    event RemovedFromBlackList(address account);\\n    event Withdrawn(address indexed account, uint256 amount);\\n\\n    modifier ownerOnly() {\\n        require(msg.sender == owner, \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    constructor(address wsd_, uint32 salt) {\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(\\\"BridgeCore\\\")),\\n                keccak256(bytes('1')),\\n                salt,\\n                address(this)\\n            )\\n        );\\n\\n        owner = msg.sender;\\n        wsd = WSDInterface(wsd_);\\n        emit OwnerChanged(address(0), owner);\\n        emit WSDAddressChanged(address(0), wsd_);\\n    }\\n\\n    function changeOwner(address newOwner_) external ownerOnly {\\n        owner = newOwner_;\\n\\n        emit OwnerChanged(owner, pendingOwner);\\n    }\\n\\n    function changeWSD(address newWSD_) external ownerOnly {\\n        emit WSDAddressChanged(address(wsd), newWSD_);\\n        wsd = WSDInterface(newWSD_);\\n    }\\n\\n    function addToBlackList(address account) external ownerOnly {\\n        blackList[account] = true;\\n        emit AddedToBlackList(account);\\n    }\\n\\n    function removeFromBlackList(address account) external ownerOnly {\\n        delete blackList[account];\\n        emit RemovedFromBlackList(account);\\n    }\\n\\n    function withdraw(\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external{\\n        require(blackList[msg.sender] == false, \\\"Withdraw: user is blocked\\\");\\n        require(deadline >= block.timestamp, 'Withdraw expired.');\\n\\n        bytes32 digest = keccak256(abi.encodePacked(\\n            '\\\\x19\\\\x01',\\n            DOMAIN_SEPARATOR,\\n            keccak256(abi.encode(PERMIT_TYPE_HASH, owner, msg.sender, value, nonces[msg.sender]++, deadline))\\n        ));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0));\\n        require(recoveredAddress == owner, 'Not valid owner');\\n\\n        wsd.transfer(msg.sender, value);\\n\\n        emit Withdrawn(msg.sender, value);\\n    }\\n\\n    // Helpful math functions\\n    function safe96(uint256 n, string memory errorMessage)\\n        private\\n        pure\\n        returns (uint96)\\n    {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) private pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n}\\n\\n// WSD Token interface\\ninterface WSDInterface {\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 rawAmount\\n    ) external returns (bool);\\n\\n    function transfer(address dst, uint256 rawAmount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wsd_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"salt\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedToBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wsd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWsd\",\"type\":\"address\"}],\"name\":\"WSDAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWSD_\",\"type\":\"address\"}],\"name\":\"changeWSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wsd\",\"outputs\":[{\"internalType\":\"contract WSDInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BridgeCore", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000423d7c27d1dde7eb4aae02dae6b651c7225e6f90000000000000000000000000000000000000000000000000000000000002206", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}