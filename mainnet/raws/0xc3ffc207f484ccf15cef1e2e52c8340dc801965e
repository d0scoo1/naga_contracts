{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^ 0.4 .16;\r\n/* \u521b\u5efa\u4e00\u4e2a\u7236\u7c7b\uff0c\u8d26\u6237\u7ba1\u7406\u5458 */\r\ncontract owned {\r\n\r\n\taddress public owner;\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/* \u4fee\u6539\u6807\u5fd7 */\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/* \u4fee\u6539\u7ba1\u7406\u5458\u8d26\u6237\uff0c onlyOwner\u4ee3\u8868\u53ea\u80fd\u662f\u7528\u6237\u7ba1\u7406\u5458\u6765\u4fee\u6539 */\r\n\tfunction transferOwnership(address newOwner) onlyOwner public {\r\n\t\towner = newOwner;\r\n\t}\r\n}\r\n\r\n/* receiveApproval\u670d\u52a1\u5408\u7ea6\u6307\u793a\u4ee3\u5e01\u5408\u7ea6\u5c06\u4ee3\u5e01\u4ece\u53d1\u9001\u8005\u7684\u8d26\u6237\u8f6c\u79fb\u5230\u670d\u52a1\u5408\u7ea6\u7684\u8d26\u6237\uff08\u901a\u8fc7\u8c03\u7528\u670d\u52a1\u5408\u7ea6\u7684 */\r\ncontract tokenRecipient {\r\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\r\n}\r\n\r\ncontract TokenERC20 {\r\n\t// \u516c\u5171\u53d8\u91cf\r\n\tstring public name; //\u4ee3\u5e01\u540d\u5b57\r\n\tstring public symbol; //\u4ee3\u5e01\u7b26\u53f7\r\n\tuint8 public decimals = 18; //\u4ee3\u5e01\u5c0f\u6570\u70b9\u4f4d\u6570\uff0c 18\u662f\u9ed8\u8ba4\uff0c \u5c3d\u91cf\u4e0d\u8981\u66f4\u6539\r\n\r\n\tuint256 public totalSupply; //\u4ee3\u5e01\u603b\u91cf\r\n\r\n\t// \u8bb0\u5f55\u5404\u4e2a\u8d26\u6237\u7684\u4ee3\u5e01\u6570\u76ee\r\n\tmapping(address => uint256) public balanceOf;\r\n\r\n\t// A\u8d26\u6237\u5b58\u5728B\u8d26\u6237\u8d44\u91d1\r\n\tmapping(address => mapping(address => uint256)) public allowance;\r\n\r\n\t// \u8f6c\u8d26\u901a\u77e5\u4e8b\u4ef6\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// \u9500\u6bc1\u91d1\u989d\u901a\u77e5\u4e8b\u4ef6\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\t/* \u6784\u9020\u51fd\u6570 */\r\n\tconstructor(\r\n\t\tuint256 initialSupply,\r\n\t\tstring tokenName,\r\n\t\tstring tokenSymbol\r\n\t) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals); // \u6839\u636edecimals\u8ba1\u7b97\u4ee3\u5e01\u7684\u6570\u91cf\r\n\t\tbalanceOf[msg.sender] = totalSupply; // \u7ed9\u751f\u6210\u8005\u6240\u6709\u7684\u4ee3\u5e01\u6570\u91cf\r\n\t\tname = tokenName; // \u8bbe\u7f6e\u4ee3\u5e01\u7684\u540d\u5b57\r\n\t\tsymbol = tokenSymbol; // \u8bbe\u7f6e\u4ee3\u5e01\u7684\u7b26\u53f7\r\n\t}\r\n\r\n\t/* \u79c1\u6709\u7684\u4ea4\u6613\u51fd\u6570 */\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\t// \u9632\u6b62\u8f6c\u79fb\u52300x0\uff0c \u7528burn\u4ee3\u66ff\u8fd9\u4e2a\u529f\u80fd\r\n\t\trequire(_to != 0x0);\r\n\t\t// \u68c0\u6d4b\u53d1\u9001\u8005\u662f\u5426\u6709\u8db3\u591f\u7684\u8d44\u91d1\r\n\t\t//require(canOf[_from] >= _value);\r\n\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\r\n\t\t// \u68c0\u67e5\u662f\u5426\u6ea2\u51fa\uff08\u6570\u636e\u7c7b\u578b\u7684\u6ea2\u51fa\uff09\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\t\t// \u5c06\u6b64\u4fdd\u5b58\u4e3a\u5c06\u6765\u7684\u65ad\u8a00\uff0c \u51fd\u6570\u6700\u540e\u4f1a\u6709\u4e00\u4e2a\u68c0\u9a8c\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n\t\t// \u51cf\u5c11\u53d1\u9001\u8005\u8d44\u4ea7\r\n\t\tbalanceOf[_from] -= _value;\r\n\r\n\t\t// \u589e\u52a0\u63a5\u6536\u8005\u7684\u8d44\u4ea7\r\n\t\tbalanceOf[_to] += _value;\r\n\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\t// \u65ad\u8a00\u68c0\u6d4b\uff0c \u4e0d\u5e94\u8be5\u4e3a\u9519\r\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n\t}\r\n\r\n\t/* \u4f20\u9012tokens */\r\n\tfunction transfer(address _to, uint256 _value) public {\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t}\r\n\r\n\t/* \u4ece\u5176\u4ed6\u8d26\u6237\u8f6c\u79fb\u8d44\u4ea7 */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n\t\trequire(_value <= allowance[_from][msg.sender]); // Check allowance\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*  \u6388\u6743\u7b2c\u4e09\u65b9\u4ece\u53d1\u9001\u8005\u8d26\u6237\u8f6c\u79fb\u4ee3\u5e01\uff0c\u7136\u540e\u901a\u8fc7transferFrom()\u51fd\u6570\u6765\u6267\u884c\u7b2c\u4e09\u65b9\u7684\u8f6c\u79fb\u64cd\u4f5c */\r\n\tfunction approve(address _spender, uint256 _value) public\r\n\treturns(bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n\t\u4e3a\u5176\u4ed6\u5730\u5740\u8bbe\u7f6e\u6d25\u8d34\uff0c \u5e76\u901a\u77e5\r\n\t\u53d1\u9001\u8005\u901a\u77e5\u4ee3\u5e01\u5408\u7ea6, \u4ee3\u5e01\u5408\u7ea6\u901a\u77e5\u670d\u52a1\u5408\u7ea6receiveApproval, \u670d\u52a1\u5408\u7ea6\u6307\u793a\u4ee3\u5e01\u5408\u7ea6\u5c06\u4ee3\u5e01\u4ece\u53d1\u9001\u8005\u7684\u8d26\u6237\u8f6c\u79fb\u5230\u670d\u52a1\u5408\u7ea6\u7684\u8d26\u6237\uff08\u901a\u8fc7\u8c03\u7528\u670d\u52a1\u5408\u7ea6\u7684transferFrom)\r\n\t*/\r\n\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n\tpublic\r\n\treturns(bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif(approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \u9500\u6bc1\u4ee3\u5e01\r\n\t */\r\n\tfunction burn(uint256 _value) public returns(bool success) {\r\n\t\trequire(balanceOf[msg.sender] >= _value); // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value; // Subtract from the sender\r\n\t\ttotalSupply -= _value; // Updates totalSupply\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * \u4ece\u5176\u4ed6\u8d26\u6237\u9500\u6bc1\u4ee3\u5e01\r\n\t */\r\n\tfunction burnFrom(address _from, uint256 _value) public returns(bool success) {\r\n\t\trequire(balanceOf[_from] >= _value); // Check if the targeted balance is enough\r\n\t\trequire(_value <= allowance[_from][msg.sender]); // Check allowance\r\n\t\tbalanceOf[_from] -= _value; // Subtract from the targeted balance\r\n\t\tallowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\r\n\t\ttotalSupply -= _value; // Update totalSupply\r\n\t\temit Burn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract BTYCT is owned, TokenERC20 {\r\n\r\n\tuint256 public totalSupply; //\u4ee3\u5e01\u603b\u91cf\r\n\tuint256 public decimals = 18; //\u4ee3\u5e01\u5c0f\u6570\u70b9\u4f4d\u6570\r\n\tuint256 public sellPrice = 510; //\u51fa\u552e\u4ef7\u683c 1\u679a\u4ee3\u5e01\u6362\u591a\u5c11\u4ee5\u592a /1000\r\n\tuint256 public buyPrice =  526; //\u8d2d\u4e70\u4ef7\u683c \u591a\u5c11\u4ee5\u592a\u53ef\u8d2d\u4e701\u679a\u4ee3\u5e01 /1000\r\n\tuint256 public sysPrice = 766 * 10 ** uint256(decimals); //\u6316\u77ff\u7684\u8861\u91cf\u503c\r\n\tuint256 public sysPer = 225; //\u6316\u77ff\u7684\u589e\u91cf\u767e\u5206\u6bd4 /100\r\n\t\r\n\t//uint256 public onceOuttime = 86400; //\u589e\u91cf\u7684\u65f6\u95f4 \u6b63\u5f0f \r\n\t//uint256 public onceAddTime = 864000; //\u6316\u77ff\u7684\u65f6\u95f4 \u6b63\u5f0f\r\n\t//uint256 public onceoutTimePer = 8640000; //\u589e\u91cf\u7684\u767e\u5206\u6bd4 \u6b63\u5f0f\r\n\t\r\n\tuint256 public onceOuttime = 600; //\u589e\u91cf\u7684\u65f6\u95f4 \u6d4b\u8bd5  \r\n\tuint256 public onceAddTime = 1800; //\u6316\u77ff\u7684\u65f6\u95f4 \u6d4b\u8bd5\r\n\tuint256 public onceoutTimePer = 60000; //\u589e\u91cf\u7684\u767e\u5206\u6bd4 \u6d4b\u8bd5\r\n\r\n\t/* \u51bb\u7ed3\u8d26\u6237 */\r\n\tmapping(address => bool) public frozenAccount;\r\n\t// \u8bb0\u5f55\u5404\u4e2a\u8d26\u6237\u7684\u51bb\u7ed3\u6570\u76ee\r\n\tmapping(address => uint256) public freezeOf;\r\n\t// \u8bb0\u5f55\u5404\u4e2a\u8d26\u6237\u7684\u53ef\u7528\u6570\u76ee\r\n\tmapping(address => uint256) public canOf;\r\n\t// \u8bb0\u5f55\u5404\u4e2a\u8d26\u6237\u7684\u91ca\u653e\u65f6\u95f4\r\n\tmapping(address => uint) public cronoutOf;\r\n\t// \u8bb0\u5f55\u5404\u4e2a\u8d26\u6237\u7684\u589e\u91cf\u65f6\u95f4\r\n\tmapping(address => uint) public cronaddOf;\r\n\r\n\t/* \u901a\u77e5 */\r\n\tevent FrozenFunds(address target, bool frozen);\r\n\t//event Logs (string);\r\n\t/* \u6784\u9020\u51fd\u6570 */\r\n\r\n\tfunction BTYCT(\r\n\t\tuint256 initialSupply,\r\n\t\tstring tokenName,\r\n\t\tstring tokenSymbol\r\n\t) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n\t/* \u8f6c\u8d26\uff0c \u6bd4\u7236\u7c7b\u52a0\u5165\u4e86\u8d26\u6237\u51bb\u7ed3 */\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\trequire(_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(canOf[_from] >= _value);\r\n\t\trequire(balanceOf[_from] >= _value); // Check if the sender has enough\r\n\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n\t\trequire(!frozenAccount[_from]); // Check if sender is frozen\r\n\t\trequire(!frozenAccount[_to]); // Check if recipient is frozen\r\n\r\n\t\t//\u6316\u77ff \r\n\t\tif(cronaddOf[_from] < 1) {\r\n\t\t\tcronaddOf[_from] = now + onceAddTime;\r\n\t\t}\r\n\t\tif(cronaddOf[_to] < 1) {\r\n\t\t\tcronaddOf[_to] = now + onceAddTime;\r\n\t\t}\r\n\t\t//\u91ca\u653e \r\n\t\tif(cronoutOf[_to] < 1) {\r\n\t\t\tcronoutOf[_to] = now + onceOuttime;\r\n\t\t}\r\n\t\tif(cronoutOf[_to] < 1) {\r\n\t\t\tcronoutOf[_to] = now + onceOuttime;\r\n\t\t}\r\n\t\t//if(freezeOf[_from] > 0) {\r\n\t\tuint lefttime = now - cronoutOf[_from];\r\n\t\tif(lefttime > onceOuttime) {\r\n\t\t\tuint leftper = lefttime / onceoutTimePer;\r\n\t\t\tif(leftper > 1) {\r\n\t\t\t\tleftper = 1;\r\n\t\t\t}\r\n\t\t\tcanOf[_from] = balanceOf[_from] * leftper;\r\n\t\t\tfreezeOf[_from] = balanceOf[_from] - canOf[_from];\r\n\t\t\tcronoutOf[_from] = now + onceOuttime;\r\n\t\t}\r\n\r\n\t\t\r\n\t\tuint lefttimes = now - cronoutOf[_to];\r\n\t\tif(lefttimes >= onceOuttime) {\r\n\t\t\tuint leftpers = lefttime / onceoutTimePer;\r\n\t\t\tif(leftpers > 1) {\r\n\t\t\t\tleftpers = 1;\r\n\t\t\t}\r\n\t\t\tcanOf[_to] = balanceOf[_to] * leftpers;\r\n\t\t\tfreezeOf[_to] = balanceOf[_to] - canOf[_to];\r\n\t\t\tcronoutOf[_to] = now + onceOuttime;\r\n\t\t}\r\n\t\r\n        require(canOf[_from] >= _value);\r\n\t\tbalanceOf[_from] -= _value; // Subtract from the sender\r\n\t\tbalanceOf[_to] += _value;\r\n\t\t//\u51cf\u5c11\u53ef\u7528\r\n\t\tcanOf[_from] -= _value;\r\n\t\t//\u589e\u52a0\u51bb\u7ed3 \r\n\t\tfreezeOf[_to] += _value;\r\n\r\n\t\temit Transfer(_from, _to, _value);\r\n\t}\r\n\r\n\t//\u83b7\u53d6\u53ef\u7528\u6570\u76ee\r\n\tfunction getcan(address target) public returns (uint256 _value) {\r\n\t    if(cronoutOf[target] < 1) {\r\n\t        _value = 0;\r\n\t    }else{\r\n\t        uint lefttime = now - cronoutOf[target];\r\n\t        uint leftnum = lefttime/onceoutTimePer;\r\n\t        if(leftnum > 1){\r\n\t            leftnum = 1;\r\n\t        }\r\n\t        _value = balanceOf[target]*leftnum;\r\n\t    }\r\n\t}\r\n\t\r\n\t/// \u5411\u6307\u5b9a\u8d26\u6237\u62e8\u53d1\u8d44\u91d1\r\n\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n\t\trequire(!frozenAccount[target]);\r\n\t\trequire(balanceOf[target] >= freezeOf[target]);\r\n\t\tif(cronoutOf[target] < 1) {\r\n\t\t    cronoutOf[target] = now + onceOuttime;\r\n\t\t}\r\n\t\tif(cronaddOf[target] < 1) {\r\n\t\t    cronaddOf[target] = now + onceAddTime;\r\n\t\t}\r\n\t\t\r\n\t\t//unit aount = unit(mintedAmount);\r\n\t\tuint256 amounts = mintedAmount * 99 / 100;\r\n\t\tfreezeOf[target] = freezeOf[target] + amounts;\r\n\t\tbalanceOf[target] += mintedAmount;\r\n\t\t//require(balanceOf[target] >= freezeOf[target]);\r\n\t\tcanOf[target] = balanceOf[target] - freezeOf[target];\r\n\t\trequire(canOf[target] >= 0);\r\n\t\t\r\n\t\tbalanceOf[this] -= mintedAmount;\r\n\t\temit Transfer(0, this, mintedAmount);\r\n\t\temit Transfer(this, target, mintedAmount);\r\n\r\n\t}\r\n\t//\u7528\u6237\u6bcf\u969410\u5929\u6316\u77ff\u4e00\u6b21\r\n\tfunction mint() public {\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\trequire(cronaddOf[msg.sender] > 0 && now > cronaddOf[msg.sender] && balanceOf[msg.sender] >= sysPrice);\r\n\t\tuint256 mintAmount = balanceOf[msg.sender] * sysPer / 10000;\r\n\t\tbalanceOf[msg.sender] += mintAmount;\r\n\t\tbalanceOf[this] -= mintAmount;\r\n\t\t\r\n\t\tfreezeOf[msg.sender] = freezeOf[msg.sender] + mintAmount;\r\n\t\trequire(balanceOf[msg.sender] >= freezeOf[msg.sender]);\r\n\t\tcronaddOf[msg.sender] = now + onceAddTime;\r\n\t\t\r\n\t\temit Transfer(0, this, mintAmount);\r\n\t\temit Transfer(this, msg.sender, mintAmount);\r\n\r\n\t}\r\n\r\n\t/// \u51bb\u7ed3 or \u89e3\u51bb\u8d26\u6237\r\n\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\r\n\t\tfrozenAccount[target] = freeze;\r\n\t\temit FrozenFunds(target, freeze);\r\n\t}\r\n\t// \u8bbe\u7f6e\u9500\u552e\u8d2d\u4e70\u4ef7\u683c\r\n\tfunction setPrices( uint256 newBuyPrice, uint256 newSellPrice, uint256 systyPrice, uint256 sysPermit) onlyOwner public {\r\n\t\tbuyPrice = newBuyPrice;\r\n\t\tsellPrice = newSellPrice;\r\n\t\tsysPrice = systyPrice * 10 ** uint256(decimals);\r\n\t\tsysPer = sysPermit;\r\n\t}\r\n\tfunction getprice() constant public returns (uint256 bprice,uint256 spice,uint256 sprice,uint256 sper) {\r\n          bprice = buyPrice * 10 ** uint256(decimals);\r\n          spice = sellPrice * 10 ** uint256(decimals);\r\n          sprice = sysPrice;\r\n          sper = sysPer * 10 ** uint256(decimals);\r\n   }\r\n\t// \u8d2d\u4e70\r\n\tfunction buy(uint256 amountbuy) payable public returns(uint256 amount) {\r\n\t    require(!frozenAccount[msg.sender]);\r\n\t\trequire(buyPrice > 0 && amountbuy > buyPrice); // Avoid dividing 0, sending small amounts and spam\r\n\t\tamount = amountbuy / (buyPrice/1000); // Calculate the amount of Dentacoins\r\n\t\trequire(balanceOf[this] >= amount); // checks if it has enough to sell\r\n\t\tbalanceOf[msg.sender] += amount; // adds the amount to buyer's balance\r\n\t\tbalanceOf[this] -= amount; // subtracts amount from seller's balance\r\n\t\temit Transfer(this, msg.sender, amount); // execute an event reflecting the change\r\n\t\treturn amount; // ends function and returns\r\n\t}\r\n\t\r\n\r\n\t// \u51fa\u552e\r\n\tfunction sell(uint256 amount) public returns(uint revenue) {\r\n\t    require(!frozenAccount[msg.sender]);\r\n\t\trequire(sellPrice > 0); // Avoid selling and spam\r\n\t\trequire(balanceOf[msg.sender] >= amount); // checks if the sender has enough to sell\r\n\t\tif(cronoutOf[msg.sender] < 1) {\r\n\t\t\tcronoutOf[msg.sender] = now + onceOuttime;\r\n\t\t}\r\n\t\t\r\n\t\tuint lefttime = now - cronoutOf[msg.sender];\r\n\t\tif(lefttime > onceOuttime) {\r\n\t\t\tuint leftper = lefttime / onceoutTimePer;\r\n\t\t\tif(leftper > 1) {\r\n\t\t\t\tleftper = 1;\r\n\t\t\t}\r\n\t\t\tcanOf[msg.sender] = balanceOf[msg.sender] * leftper;\r\n\t\t\tfreezeOf[msg.sender] = balanceOf[msg.sender] - canOf[msg.sender];\r\n\t\t\tcronoutOf[msg.sender] = now + onceOuttime;\r\n\t\t}\r\n\t\trequire(canOf[msg.sender] >= amount);\r\n\t\tcanOf[msg.sender] -= amount;\r\n\t\tbalanceOf[this] += amount; // adds the amount to owner's balance\r\n\t\tbalanceOf[msg.sender] -= amount; // subtracts the amount from seller's balance\r\n\t\trevenue = amount * sellPrice/1000;\r\n\t\trequire(msg.sender.send(revenue)); // sends ether to the seller: it's important to do this last to prevent recursion attacks\r\n\t\temit Transfer(msg.sender, this, amount); // executes an event reflecting on the change\r\n\t\treturn revenue;\r\n\r\n\t}\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sysPer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getprice\",\"outputs\":[{\"name\":\"bprice\",\"type\":\"uint256\"},{\"name\":\"spice\",\"type\":\"uint256\"},{\"name\":\"sprice\",\"type\":\"uint256\"},{\"name\":\"sper\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onceAddTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onceoutTimePer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sysPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getcan\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cronaddOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cronoutOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"systyPrice\",\"type\":\"uint256\"},{\"name\":\"sysPermit\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountbuy\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onceOuttime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "BTYCT", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000005265c00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005425459435400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054254594354000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a07cda0f8c1a64af9434193f022a115309b829df880e9c8a1a343e91478a80dd"}]}