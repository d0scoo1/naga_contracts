{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface IOracle {\r\n    function getPriceUsdcRecommended(address tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getNormalizedValueUsdc(address tokensAddress, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IYearnAddressesProvider {\r\n    function addressById(string memory) external view returns (address);\r\n}\r\n\r\ncontract Ownable {\r\n    address public ownerAddress;\r\n\r\n    constructor() {\r\n        ownerAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function setOwnerAddress(address _ownerAddress) public onlyOwner {\r\n        ownerAddress = _ownerAddress;\r\n    }\r\n}\r\n\r\ncontract PricesHelper is Ownable {\r\n    address public yearnAddressesProviderAddress;\r\n\r\n    struct TokenPrice {\r\n        address tokenId;\r\n        uint256 priceUsdc;\r\n    }\r\n\r\n    struct TokenAmount {\r\n        address tokenId;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor(address _yearnAddressesProviderAddress) {\r\n        require(\r\n            _yearnAddressesProviderAddress != address(0),\r\n            \"Missing yearn addresses provider address\"\r\n        );\r\n        yearnAddressesProviderAddress = _yearnAddressesProviderAddress;\r\n    }\r\n\r\n    function tokensPrices(address[] memory tokensAddresses)\r\n        external\r\n        view\r\n        returns (TokenPrice[] memory)\r\n    {\r\n        TokenPrice[] memory _tokensPrices = new TokenPrice[](\r\n            tokensAddresses.length\r\n        );\r\n        for (\r\n            uint256 tokenIdx = 0;\r\n            tokenIdx < tokensAddresses.length;\r\n            tokenIdx++\r\n        ) {\r\n            address tokenAddress = tokensAddresses[tokenIdx];\r\n            _tokensPrices[tokenIdx] = TokenPrice({\r\n                tokenId: tokenAddress,\r\n                priceUsdc: IOracle(getOracleAddress()).getPriceUsdcRecommended(\r\n                    tokenAddress\r\n                )\r\n            });\r\n        }\r\n        return _tokensPrices;\r\n    }\r\n\r\n    function tokensPricesNormalizedUsdc(TokenAmount[] memory tokens)\r\n        external\r\n        view\r\n        returns (TokenPrice[] memory)\r\n    {\r\n        TokenPrice[] memory _tokenPricesNormalized = new TokenPrice[](\r\n            tokens.length\r\n        );\r\n        for (uint256 tokenIdx = 0; tokenIdx < tokens.length; tokenIdx++) {\r\n            address tokenAddress = tokens[tokenIdx].tokenId;\r\n            uint256 amount = tokens[tokenIdx].amount;\r\n            _tokenPricesNormalized[tokenIdx] = TokenPrice({\r\n                tokenId: tokenAddress,\r\n                priceUsdc: IOracle(getOracleAddress()).getNormalizedValueUsdc(\r\n                    tokenAddress,\r\n                    amount\r\n                )\r\n            });\r\n        }\r\n        return _tokenPricesNormalized;\r\n    }\r\n\r\n    function getOracleAddress() internal view returns (address) {\r\n        return\r\n            IYearnAddressesProvider(yearnAddressesProviderAddress).addressById(\r\n                \"ORACLE\"\r\n            );\r\n    }\r\n\r\n    function updateYearnAddressesProviderAddress(\r\n        address _yearnAddressesProviderAddress\r\n    ) external onlyOwner {\r\n        yearnAddressesProviderAddress = _yearnAddressesProviderAddress;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yearnAddressesProviderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"setOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct PricesHelper.TokenPrice[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PricesHelper.TokenAmount[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"tokensPricesNormalizedUsdc\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct PricesHelper.TokenPrice[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yearnAddressesProviderAddress\",\"type\":\"address\"}],\"name\":\"updateYearnAddressesProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearnAddressesProviderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PricesHelper", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e11dc9f2ab122dc5978eaca41483da0d7d7e6128", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5f013eb82235812bdd6a29e73b35de57114fe640d5165c1ec0d0ec3ab0c52a0"}]}