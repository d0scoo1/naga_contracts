{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n\\tfunction _msgSender() internal view virtual returns (address) {\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes calldata) {\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n\\tmapping(address =\\u003e uint256) private _balances;\\n\\n\\tmapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n\\n\\tuint256 private _totalSupply;\\n\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\t/**\\n\\t * @dev Sets the values for {name} and {symbol}.\\n\\t *\\n\\t * The default value of {decimals} is 18. To select a different value for\\n\\t * {decimals} you should overload it.\\n\\t *\\n\\t * All two of these values are immutable: they can only be set once during\\n\\t * construction.\\n\\t */\\n\\tconstructor(string memory name_, string memory symbol_) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the name of the token.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the symbol of the token, usually a shorter version of the\\n\\t * name.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the number of decimals used to get its user representation.\\n\\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n\\t *\\n\\t * Tokens usually opt for a value of 18, imitating the relationship between\\n\\t * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n\\t * overridden;\\n\\t *\\n\\t * NOTE: This information is only used for _display_ purposes: it in\\n\\t * no way affects any of the arithmetic of the contract, including\\n\\t * {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t */\\n\\tfunction decimals() public view virtual override returns (uint8) {\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address account) public view virtual override returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transfer}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - the caller must have a balance of at least `amount`.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-allowance}.\\n\\t */\\n\\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-approve}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transferFrom}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance. This is not\\n\\t * required by the EIP. See the note at the beginning of {ERC20}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `sender` and `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n\\t * `amount`.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) public virtual override returns (bool) {\\n\\t\\t_transfer(sender, recipient, amount);\\n\\n\\t\\tuint256 currentAllowance = _allowances[sender][_msgSender()];\\n\\t\\trequire(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_approve(sender, _msgSender(), currentAllowance - amount);\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically increases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t * - `spender` must have allowance for the caller of at least\\n\\t * `subtractedValue`.\\n\\t */\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n\\t\\tuint256 currentAllowance = _allowances[_msgSender()][spender];\\n\\t\\trequire(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n\\t *\\n\\t * This internal function is equivalent to {transfer}, and can be used to\\n\\t * e.g. implement automatic token fees, slashing mechanisms, etc.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `sender` cannot be the zero address.\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(sender, recipient, amount);\\n\\n\\t\\tuint256 senderBalance = _balances[sender];\\n\\t\\trequire(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[sender] = senderBalance - amount;\\n\\t\\t}\\n\\t\\t_balances[recipient] += amount;\\n\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\n\\t\\t_afterTokenTransfer(sender, recipient, amount);\\n\\t}\\n\\n\\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n\\t * the total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `from` set to the zero address.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `account` cannot be the zero address.\\n\\t */\\n\\tfunction _mint(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), account, amount);\\n\\n\\t\\t_totalSupply += amount;\\n\\t\\t_balances[account] += amount;\\n\\t\\temit Transfer(address(0), account, amount);\\n\\n\\t\\t_afterTokenTransfer(address(0), account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `amount` tokens from `account`, reducing the\\n\\t * total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `to` set to the zero address.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `account` cannot be the zero address.\\n\\t * - `account` must have at least `amount` tokens.\\n\\t */\\n\\tfunction _burn(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(account, address(0), amount);\\n\\n\\t\\tuint256 accountBalance = _balances[account];\\n\\t\\trequire(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[account] = accountBalance - amount;\\n\\t\\t}\\n\\t\\t_totalSupply -= amount;\\n\\n\\t\\temit Transfer(account, address(0), amount);\\n\\n\\t\\t_afterTokenTransfer(account, address(0), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n\\t *\\n\\t * This internal function is equivalent to `approve`, and can be used to\\n\\t * e.g. set automatic allowances for certain subsystems, etc.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `owner` cannot be the zero address.\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction _approve(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any transfer of tokens. This includes\\n\\t * minting and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n\\t * will be transferred to `to`.\\n\\t * - when `from` is zero, `amount` tokens will be minted for `to`.\\n\\t * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal virtual {}\\n\\n\\t/**\\n\\t * @dev Hook that is called after any transfer of tokens. This includes\\n\\t * minting and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n\\t * has been transferred to `to`.\\n\\t * - when `from` is zero, `amount` tokens have been minted for `to`.\\n\\t * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _afterTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal virtual {}\\n}\\n\"},\"Forest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./IWoolf.sol\\\";\\nimport \\\"./MutantPeach.sol\\\";\\n\\ncontract Forest is Ownable, IERC721Receiver, Pausable {\\n\\t// maximum alpha score for a Wolf\\n\\tuint8 public constant MAX_ALPHA = 8;\\n\\n\\t// struct to store a stake\\u0027s token, owner, and earning values\\n\\tstruct Stake {\\n\\t\\tuint16 tokenId;\\n\\t\\tuint80 value;\\n\\t\\taddress owner;\\n\\t}\\n\\n\\tevent TokenStaked(address owner, uint256 tokenId, uint256 value);\\n\\tevent ApeClaimed(uint256 tokenId, uint256 earned, bool unstaked);\\n\\tevent WolfClaimed(uint256 tokenId, uint256 earned, bool unstaked);\\n\\n\\t// reference to the IWoolf NFT contract\\n\\tIWoolf woolf;\\n\\t// reference to the $MutantPeach contract for minting $MutantPeach earnings\\n\\tMutantPeach mutantPeach;\\n\\n\\t// maps tokenId to stake\\n\\tmapping(uint256 =\\u003e Stake) public forest;\\n\\t// maps alpha to all Wolf stakes with that alpha\\n\\tmapping(uint256 =\\u003e Stake[]) public pack;\\n\\t// tracks location of each Wolf in Pack\\n\\tmapping(uint256 =\\u003e uint256) public packIndices;\\n\\n\\t// total alpha scores staked\\n\\tuint256 public totalAlphaStaked = 0;\\n\\t// any rewards distributed when no wolves are staked\\n\\tuint256 public unaccountedRewards = 0;\\n\\t// amount of $MutantPeach due for each alpha point staked\\n\\tuint256 public woolPerAlpha = 0;\\n\\n\\t// ape earn 5000 $MutantPeach per day\\n\\tuint256 public constant DAILY_MP_RATE = 5000 ether;\\n\\t// ape must have 2 days worth of $MutantPeach to unstake or else it\\u0027s too cold\\n\\tuint256 public constant MINIMUM_TO_EXIT = 4 days;\\n\\t// wolves take a 20% tax on all $MutantPeach claimed\\n\\tuint256 public constant MP_CLAIM_TAX_PERCENTAGE = 20;\\n\\t// there will only ever be (roughly) 2.4 billion $MutantPeach earned through staking\\n\\tuint256 public constant MAXIMUM_GLOBAL_MP = 2400000000 ether;\\n\\n\\t// amount of $MutantPeach earned so far\\n\\tuint256 public totalWoolEarned;\\n\\t// number of Ape staked in the Forest\\n\\tuint256 public totalApeStaked;\\n\\t// the last time $MutantPeach was claimed\\n\\tuint256 public lastClaimTimestamp;\\n\\n\\t// emergency rescue to allow unstaking without any checks but without $MutantPeach\\n\\tbool public rescueEnabled = false;\\n\\n\\t/**\\n\\t * @param _woolf reference to the IWoolf NFT contract\\n\\t * @param _peach reference to the $MutantPeach token\\n\\t */\\n\\tconstructor(address _woolf, address _peach) {\\n\\t\\twoolf = IWoolf(_woolf);\\n\\t\\tmutantPeach = MutantPeach(_peach);\\n\\t}\\n\\n\\t/** STAKING */\\n\\n\\t/**\\n\\t * adds Ape and Wolves to the Forest and Pack\\n\\t * @param account the address of the staker\\n\\t * @param tokenIds the IDs of the Ape and Wolves to stake\\n\\t */\\n\\tfunction addManyToForestAndPack(address account, uint16[] calldata tokenIds) external {\\n\\t\\trequire(account == _msgSender() || _msgSender() == address(woolf), \\\"DONT GIVE YOUR TOKENS AWAY\\\");\\n\\t\\tfor (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n\\t\\t\\tif (_msgSender() != address(woolf)) {\\n\\t\\t\\t\\t// dont do this step if its a mint + stake\\n\\t\\t\\t\\trequire(woolf.ownerOf(tokenIds[i]) == _msgSender(), \\\"AINT YO TOKEN\\\");\\n\\t\\t\\t\\twoolf.transferFrom(_msgSender(), address(this), tokenIds[i]);\\n\\t\\t\\t} else if (tokenIds[i] == 0) {\\n\\t\\t\\t\\tcontinue; // there may be gaps in the array for stolen tokens\\n\\t\\t\\t}\\n\\t\\t\\tif (isApe(tokenIds[i])) _addApeToForest(account, tokenIds[i]);\\n\\t\\t\\telse _addWolfToPack(account, tokenIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * adds a single Ape to the Forest\\n\\t * @param account the address of the staker\\n\\t * @param tokenId the ID of the Ape to add to the Forest\\n\\t */\\n\\tfunction _addApeToForest(address account, uint256 tokenId) internal whenNotPaused _updateEarnings {\\n\\t\\tforest[tokenId] = Stake({ owner: account, tokenId: uint16(tokenId), value: uint80(block.timestamp) });\\n\\t\\ttotalApeStaked += 1;\\n\\t\\temit TokenStaked(account, tokenId, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * adds a single Wolf to the Pack\\n\\t * @param account the address of the staker\\n\\t * @param tokenId the ID of the Wolf to add to the Pack\\n\\t */\\n\\tfunction _addWolfToPack(address account, uint256 tokenId) internal {\\n\\t\\tuint256 alpha = _alphaForWolf(tokenId);\\n\\t\\ttotalAlphaStaked += alpha; // Portion of earnings ranges from 8 to 5\\n\\t\\tpackIndices[tokenId] = pack[alpha].length; // Store the location of the wolf in the Pack\\n\\t\\tpack[alpha].push(Stake({ owner: account, tokenId: uint16(tokenId), value: uint80(woolPerAlpha) })); // Add the wolf to the Pack\\n\\t\\temit TokenStaked(account, tokenId, woolPerAlpha);\\n\\t}\\n\\n\\t/** CLAIMING / UNSTAKING */\\n\\n\\t/**\\n\\t * realize $MutantPeach earnings and optionally unstake tokens from the Forest / Pack\\n\\t * to unstake a Ape it will require it has 2 days worth of $MutantPeach unclaimed\\n\\t * @param tokenIds the IDs of the tokens to claim earnings from\\n\\t * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\n\\t */\\n\\tfunction claimManyFromForestAndPack(uint16[] calldata tokenIds, bool unstake) external whenNotPaused _updateEarnings {\\n\\t\\tuint256 owed = 0;\\n\\t\\tfor (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n\\t\\t\\tif (isApe(tokenIds[i])) owed += _claimApeFromForest(tokenIds[i], unstake);\\n\\t\\t\\telse owed += _claimWolfFromPack(tokenIds[i], unstake);\\n\\t\\t}\\n\\t\\tif (owed == 0) return;\\n\\t\\tmutantPeach.mint(_msgSender(), owed);\\n\\t}\\n\\n\\t/**\\n\\t * realize $MutantPeach earnings for a single Ape and optionally unstake it\\n\\t * if not unstaking, pay a 20% tax to the staked Wolves\\n\\t * if unstaking, there is a 50% chance all $MutantPeach is stolen\\n\\t * @param tokenId the ID of the Ape to claim earnings from\\n\\t * @param unstake whether or not to unstake the Ape\\n\\t * @return owed - the amount of $MutantPeach earned\\n\\t */\\n\\tfunction _claimApeFromForest(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\n\\t\\tStake memory stake = forest[tokenId];\\n\\t\\trequire(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n\\t\\trequire(!(unstake \\u0026\\u0026 block.timestamp - stake.value \\u003c MINIMUM_TO_EXIT), \\\"GONNA BE COLD WITHOUT TWO DAY\\u0027S MutantPeach\\\");\\n\\t\\tif (totalWoolEarned \\u003c MAXIMUM_GLOBAL_MP) {\\n\\t\\t\\towed = ((block.timestamp - stake.value) * DAILY_MP_RATE) / 1 days;\\n\\t\\t} else if (stake.value \\u003e lastClaimTimestamp) {\\n\\t\\t\\towed = 0; // $MutantPeach production stopped already\\n\\t\\t} else {\\n\\t\\t\\towed = ((lastClaimTimestamp - stake.value) * DAILY_MP_RATE) / 1 days; // stop earning additional $MutantPeach if it\\u0027s all been earned\\n\\t\\t}\\n\\t\\tif (unstake) {\\n\\t\\t\\tif (random(tokenId) \\u0026 1 == 1) {\\n\\t\\t\\t\\t// 50% chance of all $MutantPeach stolen\\n\\t\\t\\t\\t_payWolfTax(owed);\\n\\t\\t\\t\\towed = 0;\\n\\t\\t\\t}\\n\\t\\t\\twoolf.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // send back Ape\\n\\t\\t\\tdelete forest[tokenId];\\n\\t\\t\\ttotalApeStaked -= 1;\\n\\t\\t} else {\\n\\t\\t\\t_payWolfTax((owed * MP_CLAIM_TAX_PERCENTAGE) / 100); // percentage tax to staked wolves\\n\\t\\t\\towed = (owed * (100 - MP_CLAIM_TAX_PERCENTAGE)) / 100; // remainder goes to Ape owner\\n\\t\\t\\tforest[tokenId] = Stake({ owner: _msgSender(), tokenId: uint16(tokenId), value: uint80(block.timestamp) }); // reset stake\\n\\t\\t}\\n\\t\\temit ApeClaimed(tokenId, owed, unstake);\\n\\t}\\n\\n\\t/**\\n\\t * realize $MutantPeach earnings for a single Wolf and optionally unstake it\\n\\t * Wolves earn $MutantPeach proportional to their Alpha rank\\n\\t * @param tokenId the ID of the Wolf to claim earnings from\\n\\t * @param unstake whether or not to unstake the Wolf\\n\\t * @return owed - the amount of $MutantPeach earned\\n\\t */\\n\\tfunction _claimWolfFromPack(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\n\\t\\trequire(woolf.ownerOf(tokenId) == address(this), \\\"AINT A PART OF THE PACK\\\");\\n\\t\\tuint256 alpha = _alphaForWolf(tokenId);\\n\\t\\tStake memory stake = pack[alpha][packIndices[tokenId]];\\n\\t\\trequire(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n\\t\\towed = (alpha) * (woolPerAlpha - stake.value); // Calculate portion of tokens based on Alpha\\n\\t\\tif (unstake) {\\n\\t\\t\\ttotalAlphaStaked -= alpha; // Remove Alpha from total staked\\n\\t\\t\\twoolf.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // Send back Wolf\\n\\t\\t\\tStake memory lastStake = pack[alpha][pack[alpha].length - 1];\\n\\t\\t\\tpack[alpha][packIndices[tokenId]] = lastStake; // Shuffle last Wolf to current position\\n\\t\\t\\tpackIndices[lastStake.tokenId] = packIndices[tokenId];\\n\\t\\t\\tpack[alpha].pop(); // Remove duplicate\\n\\t\\t\\tdelete packIndices[tokenId]; // Delete old mapping\\n\\t\\t} else {\\n\\t\\t\\tpack[alpha][packIndices[tokenId]] = Stake({ owner: _msgSender(), tokenId: uint16(tokenId), value: uint80(woolPerAlpha) }); // reset stake\\n\\t\\t}\\n\\t\\temit WolfClaimed(tokenId, owed, unstake);\\n\\t}\\n\\n\\t/**\\n\\t * emergency unstake tokens\\n\\t * @param tokenIds the IDs of the tokens to claim earnings from\\n\\t */\\n\\tfunction rescue(uint256[] calldata tokenIds) external {\\n\\t\\trequire(rescueEnabled, \\\"RESCUE DISABLED\\\");\\n\\t\\tuint256 tokenId;\\n\\t\\tStake memory stake;\\n\\t\\tStake memory lastStake;\\n\\t\\tuint256 alpha;\\n\\t\\tfor (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n\\t\\t\\ttokenId = tokenIds[i];\\n\\t\\t\\tif (isApe(tokenId)) {\\n\\t\\t\\t\\tstake = forest[tokenId];\\n\\t\\t\\t\\trequire(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n\\t\\t\\t\\twoolf.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // send back Ape\\n\\t\\t\\t\\tdelete forest[tokenId];\\n\\t\\t\\t\\ttotalApeStaked -= 1;\\n\\t\\t\\t\\temit ApeClaimed(tokenId, 0, true);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\talpha = _alphaForWolf(tokenId);\\n\\t\\t\\t\\tstake = pack[alpha][packIndices[tokenId]];\\n\\t\\t\\t\\trequire(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n\\t\\t\\t\\ttotalAlphaStaked -= alpha; // Remove Alpha from total staked\\n\\t\\t\\t\\twoolf.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // Send back Wolf\\n\\t\\t\\t\\tlastStake = pack[alpha][pack[alpha].length - 1];\\n\\t\\t\\t\\tpack[alpha][packIndices[tokenId]] = lastStake; // Shuffle last Wolf to current position\\n\\t\\t\\t\\tpackIndices[lastStake.tokenId] = packIndices[tokenId];\\n\\t\\t\\t\\tpack[alpha].pop(); // Remove duplicate\\n\\t\\t\\t\\tdelete packIndices[tokenId]; // Delete old mapping\\n\\t\\t\\t\\temit WolfClaimed(tokenId, 0, true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/** ACCOUNTING */\\n\\n\\t/**\\n\\t * add $MutantPeach to claimable pot for the Pack\\n\\t * @param amount $MutantPeach to add to the pot\\n\\t */\\n\\tfunction _payWolfTax(uint256 amount) internal {\\n\\t\\tif (totalAlphaStaked == 0) {\\n\\t\\t\\t// if there\\u0027s no staked wolves\\n\\t\\t\\tunaccountedRewards += amount; // keep track of $MutantPeach due to wolves\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t// makes sure to include any unaccounted $MutantPeach\\n\\t\\twoolPerAlpha += (amount + unaccountedRewards) / totalAlphaStaked;\\n\\t\\tunaccountedRewards = 0;\\n\\t}\\n\\n\\t/**\\n\\t * tracks $MutantPeach earnings to ensure it stops once 2.4 billion is eclipsed\\n\\t */\\n\\tmodifier _updateEarnings() {\\n\\t\\tif (totalWoolEarned \\u003c MAXIMUM_GLOBAL_MP) {\\n\\t\\t\\ttotalWoolEarned += ((block.timestamp - lastClaimTimestamp) * totalApeStaked * DAILY_MP_RATE) / 1 days;\\n\\t\\t\\tlastClaimTimestamp = block.timestamp;\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/** ADMIN */\\n\\n\\t/**\\n\\t * allows owner to enable \\\"rescue mode\\\"\\n\\t * simplifies accounting, prioritizes tokens out in emergency\\n\\t */\\n\\tfunction setRescueEnabled(bool _enabled) external onlyOwner {\\n\\t\\trescueEnabled = _enabled;\\n\\t}\\n\\n\\t/**\\n\\t * enables owner to pause / unpause minting\\n\\t */\\n\\tfunction setPaused(bool _paused) external onlyOwner {\\n\\t\\tif (_paused) _pause();\\n\\t\\telse _unpause();\\n\\t}\\n\\n\\tfunction getPackByAlphaAndID(uint256 alpha, uint256 tokenId) public view returns (Stake memory) {\\n\\t\\treturn pack[alpha][packIndices[tokenId]];\\n\\t}\\n\\n\\tfunction getForestStakeByID(uint256 id) public view returns (Stake memory) {\\n\\t\\treturn forest[id];\\n\\t}\\n\\n\\t/** READ ONLY */\\n\\n\\t/**\\n\\t * checks if a token is a Ape\\n\\t * @param tokenId the ID of the token to check\\n\\t * @return ape - whether or not a token is a Ape\\n\\t */\\n\\tfunction isApe(uint256 tokenId) public view returns (bool ape) {\\n\\t\\t// (ape, , , , , , ) = woolf.getTokenTraits(tokenId);\\n\\t\\tIWoolf.ApeWolf memory obj = woolf.getTokenTraits(tokenId);\\n\\t\\treturn obj.isApe;\\n\\t}\\n\\n\\t/**\\n\\t * gets the alpha score for a Wolf\\n\\t * @param tokenId the ID of the Wolf to get the alpha score for\\n\\t * @return the alpha score of the Wolf (5-8)\\n\\t */\\n\\tfunction _alphaForWolf(uint256 tokenId) internal view returns (uint8) {\\n\\t\\tIWoolf.ApeWolf memory obj = woolf.getTokenTraits(tokenId);\\n\\t\\treturn MAX_ALPHA - obj.alphaIndex; // alpha index is 0-3\\n\\t}\\n\\n\\t/**\\n\\t * chooses a random Wolf thief when a newly minted token is stolen\\n\\t * @param seed a random value to choose a Wolf from\\n\\t * @return the owner of the randomly selected Wolf thief\\n\\t */\\n\\tfunction randomWolfOwner(uint256 seed) external view returns (address) {\\n\\t\\tif (totalAlphaStaked == 0) return address(0x0);\\n\\t\\tuint256 bucket = (seed \\u0026 0xFFFFFFFF) % totalAlphaStaked; // choose a value from 0 to total alpha staked\\n\\t\\tuint256 cumulative;\\n\\t\\tseed \\u003e\\u003e= 32;\\n\\t\\t// loop through each bucket of Wolves with the same alpha score\\n\\t\\tfor (uint256 i = MAX_ALPHA - 3; i \\u003c= MAX_ALPHA; i++) {\\n\\t\\t\\tcumulative += pack[i].length * i;\\n\\t\\t\\t// if the value is not inside of that bucket, keep going\\n\\t\\t\\tif (bucket \\u003e= cumulative) continue;\\n\\t\\t\\t// get the address of a random Wolf with that alpha score\\n\\t\\t\\treturn pack[i][seed % pack[i].length].owner;\\n\\t\\t}\\n\\t\\treturn address(0x0);\\n\\t}\\n\\n\\t/**\\n\\t * generates a pseudorandom number\\n\\t * @param seed a value ensure different outcomes for different sources in the same block\\n\\t * @return a pseudorandom value\\n\\t */\\n\\tfunction random(uint256 seed) internal view returns (uint256) {\\n\\t\\treturn uint256(keccak256(abi.encodePacked(tx.origin, blockhash(block.number - 1), block.timestamp, seed)));\\n\\t}\\n\\n\\tfunction setWolfAddress(address _address) external onlyOwner {\\n\\t\\twoolf = IWoolf(_address);\\n\\t}\\n\\n\\tfunction setWoolAddress(address _address) external onlyOwner {\\n\\t\\tmutantPeach = MutantPeach(_address);\\n\\t}\\n\\n\\tfunction onERC721Received(\\n\\t\\taddress,\\n\\t\\taddress from,\\n\\t\\tuint256,\\n\\t\\tbytes calldata\\n\\t) external pure override returns (bytes4) {\\n\\t\\trequire(from == address(0x0), \\\"Cannot send tokens to Forest directly\\\");\\n\\t\\treturn IERC721Receiver.onERC721Received.selector;\\n\\t}\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n\\t/**\\n\\t * @dev Returns the amount of tokens in existence.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the amount of tokens owned by `account`.\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Returns the remaining number of tokens that `spender` will be\\n\\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n\\t * zero by default.\\n\\t *\\n\\t * This value changes when {approve} or {transferFrom} are called.\\n\\t */\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t * that someone may use both the old and the new allowance by unfortunate\\n\\t * transaction ordering. One possible solution to mitigate this race\\n\\t * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n\\t * desired value afterwards:\\n\\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n\\t * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n\\t * allowance.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n\\t * another (`to`).\\n\\t *\\n\\t * Note that `value` may be zero.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n\\t * a call to {approve}. `value` is the new allowance.\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n\\t/**\\n\\t * @dev Returns the name of the token.\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the symbol of the token.\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the decimals places of the token.\\n\\t */\\n\\tfunction decimals() external view returns (uint8);\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n\\t/**\\n\\t * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n\\t * by `operator` from `from`, this function is called.\\n\\t *\\n\\t * It must return its Solidity selector to confirm the token transfer.\\n\\t * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n\\t *\\n\\t * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n\\t */\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external returns (bytes4);\\n}\\n\"},\"IWoolf.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWoolf {\\n\\t// struct to store each token\\u0027s traits\\n\\tstruct ApeWolf {\\n\\t\\tbool isApe;\\n\\t\\tuint8 skin;\\n\\t\\tuint8 eyes;\\n\\t\\tuint8 mouth;\\n\\t\\tuint8 clothing;\\n\\t\\tuint8 headwear;\\n\\t\\tuint8 alphaIndex;\\n\\t}\\n\\n\\tfunction getPaidTokens() external view returns (uint256);\\n\\n\\tfunction getTokenTraits(uint256 tokenId) external view returns (ApeWolf memory);\\n\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external;\\n}\\n\"},\"MutantPeach.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract MutantPeach is ERC20, Ownable {\\n\\t// a mapping from an address to whether or not it can mint / burn\\n\\tmapping(address =\\u003e bool) controllers;\\n\\n\\tconstructor() ERC20(\\\"MutantPeach\\\", \\\"MutantPeach\\\") {}\\n\\n\\t/**\\n\\t * mints $MutantPeach to a recipient\\n\\t * @param to the recipient of the $MutantPeach\\n\\t * @param amount the amount of $MutantPeach to mint\\n\\t */\\n\\tfunction mint(address to, uint256 amount) external {\\n\\t\\trequire(controllers[msg.sender], \\\"Only controllers can mint\\\");\\n\\t\\t_mint(to, amount);\\n\\t}\\n\\n\\t/**\\n\\t * burns $MutantPeach from a holder\\n\\t * @param from the holder of the $MutantPeach\\n\\t * @param amount the amount of $MutantPeach to burn\\n\\t */\\n\\tfunction burn(address from, uint256 amount) external {\\n\\t\\trequire(controllers[msg.sender], \\\"Only controllers can burn\\\");\\n\\t\\t_burn(from, amount);\\n\\t}\\n\\n\\t/**\\n\\t * enables an address to mint / burn\\n\\t * @param controller the address to enable\\n\\t */\\n\\tfunction addController(address controller) external onlyOwner {\\n\\t\\tcontrollers[controller] = true;\\n\\t}\\n\\n\\t/**\\n\\t * disables an address from minting / burning\\n\\t * @param controller the address to disbale\\n\\t */\\n\\tfunction removeController(address controller) external onlyOwner {\\n\\t\\tcontrollers[controller] = false;\\n\\t}\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tconstructor() {\\n\\t\\t_setOwner(_msgSender());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_setOwner(address(0));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\t_setOwner(newOwner);\\n\\t}\\n\\n\\tfunction _setOwner(address newOwner) private {\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered by `account`.\\n\\t */\\n\\tevent Paused(address account);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted by `account`.\\n\\t */\\n\\tevent Unpaused(address account);\\n\\n\\tbool private _paused;\\n\\n\\t/**\\n\\t * @dev Initializes the contract in unpaused state.\\n\\t */\\n\\tconstructor() {\\n\\t\\t_paused = false;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns true if the contract is paused, and false otherwise.\\n\\t */\\n\\tfunction paused() public view virtual returns (bool) {\\n\\t\\treturn _paused;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Modifier to make a function callable only when the contract is not paused.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The contract must not be paused.\\n\\t */\\n\\tmodifier whenNotPaused() {\\n\\t\\trequire(!paused(), \\\"Pausable: paused\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Modifier to make a function callable only when the contract is paused.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The contract must be paused.\\n\\t */\\n\\tmodifier whenPaused() {\\n\\t\\trequire(paused(), \\\"Pausable: not paused\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Triggers stopped state.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The contract must not be paused.\\n\\t */\\n\\tfunction _pause() internal virtual whenNotPaused {\\n\\t\\t_paused = true;\\n\\t\\temit Paused(_msgSender());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns to normal state.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The contract must be paused.\\n\\t */\\n\\tfunction _unpause() internal virtual whenPaused {\\n\\t\\t_paused = false;\\n\\t\\temit Unpaused(_msgSender());\\n\\t}\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_woolf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_peach\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"name\":\"ApeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"name\":\"WolfClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAILY_MP_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_MP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ALPHA\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_TO_EXIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MP_CLAIM_TAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"addManyToForestAndPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"}],\"name\":\"claimManyFromForestAndPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forest\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint80\",\"name\":\"value\",\"type\":\"uint80\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getForestStakeByID\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint80\",\"name\":\"value\",\"type\":\"uint80\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Forest.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPackByAlphaAndID\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint80\",\"name\":\"value\",\"type\":\"uint80\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Forest.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isApe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ape\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pack\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint80\",\"name\":\"value\",\"type\":\"uint80\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomWolfOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setRescueEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWolfAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAlphaStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalApeStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWoolEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unaccountedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"woolPerAlpha\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Forest", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000367acd269d5f5fa845d4f7fba17beed5e5815de80000000000000000000000006fd2ba29a23e61759035b4b28b245c7dbd6e00b9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ae9c025daf5f2817805b29a13aa031d390d54d47ce922a9aff889cbdbbcf08df"}]}