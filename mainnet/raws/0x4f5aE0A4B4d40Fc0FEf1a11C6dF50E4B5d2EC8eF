{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocols/base/CurveRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ninterface ICurveAddressProvider {\\n  function get_registry() external view returns (address);\\n\\n  function get_address(uint256 _id) external view returns (address);\\n}\\n\\ninterface ICurveRegistry {\\n  function get_pool_from_lp_token(address lpToken)\\n    external\\n    view\\n    returns (address);\\n\\n  function get_lp_token(address swapAddress) external view returns (address);\\n\\n  function get_n_coins(address _pool) external view returns (uint256[2] memory);\\n\\n  function get_coins(address _pool) external view returns (address[8] memory);\\n\\n  function get_underlying_coins(address _pool)\\n    external\\n    view\\n    returns (address[8] memory);\\n}\\n\\ninterface ICurveFactoryRegistry {\\n  function get_n_coins(address _pool) external view returns (uint256);\\n\\n  function get_coins(address _pool) external view returns (address[4] memory);\\n\\n  function get_underlying_coins(address _pool)\\n    external\\n    view\\n    returns (address[8] memory);\\n\\n  function is_meta(address _pool) external view returns (bool);\\n}\\n\\ninterface ICurveCryptoRegistry {\\n  function get_pool_from_lp_token(address lpToken)\\n    external\\n    view\\n    returns (address);\\n\\n  function get_lp_token(address swapAddress) external view returns (address);\\n\\n  function get_n_coins(address _pool) external view returns (uint256);\\n\\n  function get_coins(address _pool) external view returns (address[8] memory);\\n}\\n\\n// solhint-enable func-name-mixedcase\\n\\ncontract CurveRegistry is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  ICurveAddressProvider private constant CURVE_ADDRESS_PROVIDER =\\n    ICurveAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383);\\n\\n  ICurveRegistry public CurveMainRegistry;\\n  ICurveCryptoRegistry public CryptoRegistry;\\n  ICurveFactoryRegistry public FactoryRegistry;\\n\\n  address private constant WBTC_ADDRESS =\\n    0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n  address private constant SBTC_CRV_TOKEN =\\n    0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3;\\n  address internal constant ETH_ADDRESS =\\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  // Mapping from {poolAddress} to {status}\\n  mapping(address => bool) public shouldUseUnderlying;\\n  // Mapping from {poolAddress} to {depositAddress}\\n  mapping(address => address) private depositAddresses;\\n\\n  constructor() {\\n    CurveMainRegistry = ICurveRegistry(CURVE_ADDRESS_PROVIDER.get_registry());\\n\\n    FactoryRegistry = ICurveFactoryRegistry(\\n      CURVE_ADDRESS_PROVIDER.get_address(3)\\n    );\\n\\n    CryptoRegistry = ICurveCryptoRegistry(\\n      CURVE_ADDRESS_PROVIDER.get_address(5)\\n    );\\n\\n    // @notice Initial assigments for deposit addresses\\n    depositAddresses[\\n      0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51\\n    ] = 0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3;\\n    depositAddresses[\\n      0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56\\n    ] = 0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06;\\n    depositAddresses[\\n      0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C\\n    ] = 0xac795D2c97e60DF6a99ff1c814727302fD747a80;\\n    depositAddresses[\\n      0x06364f10B501e868329afBc005b3492902d6C763\\n    ] = 0xA50cCc70b6a011CffDdf45057E39679379187287;\\n    depositAddresses[\\n      0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27\\n    ] = 0xb6c057591E073249F2D9D88Ba59a46CFC9B59EdB;\\n    depositAddresses[\\n      0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\\n    ] = 0xFCBa3E75865d2d561BE8D220616520c171F12851;\\n\\n    // @notice Which pools should use underlting tokens to add liquidity\\n    // {address} should/n't user underlting {status}\\n    shouldUseUnderlying[0xDeBF20617708857ebe4F679508E7b7863a8A8EeE] = true;\\n    shouldUseUnderlying[0xEB16Ae0052ed37f479f7fe63849198Df1765a733] = true;\\n  }\\n\\n  function isCurvePool(address swapAddress) public view returns (bool) {\\n    if (CurveMainRegistry.get_lp_token(swapAddress) != address(0)) {\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  function isFactoryPool(address swapAddress) public view returns (bool) {\\n    if (FactoryRegistry.get_coins(swapAddress)[0] != address(0)) {\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  function isCryptoPool(address swapAddress) public view returns (bool) {\\n    if (CryptoRegistry.get_coins(swapAddress)[0] != address(0)) {\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n    @notice This function is used to check if the curve pool is a metapool\\n    @notice all factory pools are metapools\\n    @param swapAddress Curve swap address for the pool\\n    @return isMeta true if the pool is a metapool, false otherwise\\n    */\\n  function isMetaPool(address swapAddress) public view returns (bool isMeta) {\\n    if (isCurvePool(swapAddress)) {\\n      uint256[2] memory poolTokenCounts = CurveMainRegistry.get_n_coins(\\n        swapAddress\\n      );\\n      if (poolTokenCounts[0] == poolTokenCounts[1]) return false;\\n      else return true;\\n    }\\n    if (isFactoryPool(swapAddress)) {\\n      if (FactoryRegistry.is_meta(swapAddress)) {\\n        return true;\\n      }\\n    }\\n    return isMeta;\\n  }\\n\\n  /* \\n    @notice This function is used to get the curve pool deposit address\\n    @notice The deposit address is used for pools with wrapped (c, y) tokens\\n    @param swapAddress Curve swap address for the pool\\n    @return depositAddress curve pool deposit address or the swap address not mapped\\n    */\\n  function getDepositAddress(address swapAddress)\\n    external\\n    view\\n    returns (address depositAddress)\\n  {\\n    depositAddress = depositAddresses[swapAddress];\\n    if (depositAddress == address(0)) return swapAddress;\\n  }\\n\\n  /*\\n    @notice This function is used to get the curve pool swap address\\n    @notice The token and swap address is the same for metapool factory pools\\n    @param swapAddress Curve swap address for the pool\\n    @return swapAddress curve pool swap address or address(0) if pool doesnt exist\\n    */\\n  function getSwapAddress(address tokenAddress)\\n    external\\n    view\\n    returns (address swapAddress)\\n  {\\n    swapAddress = CurveMainRegistry.get_pool_from_lp_token(tokenAddress);\\n    if (swapAddress != address(0)) {\\n      return swapAddress;\\n    } else if (isFactoryPool(tokenAddress)) {\\n      return tokenAddress;\\n    } else if (\\n      CryptoRegistry.get_pool_from_lp_token(tokenAddress) != address(0)\\n    ) {\\n      return CryptoRegistry.get_pool_from_lp_token(tokenAddress);\\n    }\\n    return address(0);\\n  }\\n\\n  /*\\n    @notice This function is used to check the curve pool token address\\n    @notice The token and swap address is the same for metapool factory pools\\n    @param swapAddress Curve swap address for the pool\\n    @return tokenAddress curve pool token address or address(0) if pool doesnt exist\\n    */\\n  function getTokenAddress(address swapAddress)\\n    external\\n    view\\n    returns (address tokenAddress)\\n  {\\n    tokenAddress = CurveMainRegistry.get_lp_token(swapAddress);\\n    if (tokenAddress != address(0)) {\\n      return tokenAddress;\\n    }\\n    if (isFactoryPool(swapAddress)) {\\n      return swapAddress;\\n    }\\n    if (isCryptoPool(swapAddress)) {\\n      return CryptoRegistry.get_lp_token(swapAddress);\\n    }\\n    return address(0);\\n  }\\n\\n  /**\\n    @notice Checks the number of non-underlying tokens in a pool\\n    @param swapAddress Curve swap address for the pool\\n    @return count The number of underlying tokens in the pool\\n    */\\n  function getNumTokens(address swapAddress)\\n    public\\n    view\\n    returns (uint256 count)\\n  {\\n    if (isCurvePool(swapAddress)) {\\n      return CurveMainRegistry.get_n_coins(swapAddress)[0];\\n    } else if (isCryptoPool(swapAddress)) {\\n      return CryptoRegistry.get_n_coins(swapAddress);\\n    } else if (isFactoryPool(swapAddress)) {\\n      return FactoryRegistry.get_n_coins(swapAddress);\\n    }\\n  }\\n\\n  /**\\n    @notice This function returns an array of underlying pool token addresses\\n    @param swapAddress Curve swap address for the pool\\n    @return poolTokens returns 4 element array containing the addresses of the pool tokens (0 address if pool contains < 4 tokens)\\n    */\\n  function getPoolTokens(address swapAddress)\\n    public\\n    view\\n    returns (address[8] memory poolTokens)\\n  {\\n    if (isMetaPool(swapAddress)) {\\n      if (isFactoryPool(swapAddress)) {\\n        address[4] memory poolTokenCounts = FactoryRegistry.get_coins(\\n          swapAddress\\n        );\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n          poolTokens[i] = poolTokenCounts[i];\\n          if (poolTokens[i] == address(0)) break;\\n        }\\n      } else if (isCryptoPool(swapAddress)) {\\n        poolTokens = CryptoRegistry.get_coins(swapAddress);\\n      } else {\\n        poolTokens = CurveMainRegistry.get_coins(swapAddress);\\n      }\\n    } else {\\n      if (isBtcPool(swapAddress)) {\\n        poolTokens = CurveMainRegistry.get_coins(swapAddress);\\n      } else if (isCurvePool(swapAddress)) {\\n        if (isEthPool(swapAddress)) {\\n          poolTokens = CurveMainRegistry.get_coins(swapAddress);\\n        } else {\\n          poolTokens = CurveMainRegistry.get_underlying_coins(swapAddress);\\n        }\\n      } else if (isCryptoPool(swapAddress)) {\\n        poolTokens = CryptoRegistry.get_coins(swapAddress);\\n      } else {\\n        address[4] memory poolTokenCounts = FactoryRegistry.get_coins(\\n          swapAddress\\n        );\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n          poolTokens[i] = poolTokenCounts[i];\\n          if (poolTokens[i] == address(0)) break;\\n        }\\n      }\\n    }\\n    return poolTokens;\\n  }\\n\\n  /**\\n    @notice This function checks if the curve pool contains WBTC\\n    @param swapAddress Curve swap address for the pool\\n    @return true if the pool contains WBTC, false otherwise\\n    */\\n  function isBtcPool(address swapAddress) public view returns (bool) {\\n    address[8] memory poolTokens = CurveMainRegistry.get_coins(swapAddress);\\n    for (uint256 i = 0; i < 4; i++) {\\n      if (poolTokens[i] == WBTC_ADDRESS || poolTokens[i] == SBTC_CRV_TOKEN)\\n        return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n    @notice This function checks if the curve pool contains ETH\\n    @param swapAddress Curve swap address for the pool\\n    @return true if the pool contains ETH, false otherwise\\n    */\\n  function isEthPool(address swapAddress) public view returns (bool) {\\n    address[8] memory poolTokens = CurveMainRegistry.get_coins(swapAddress);\\n    for (uint256 i = 0; i < 4; i++) {\\n      if (poolTokens[i] == ETH_ADDRESS) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n    @notice This function is used to check if the pool contains the token\\n    @param swapAddress Curve swap address for the pool\\n    @param tokenContractAddress contract address of the token\\n    @return isUnderlying true if the pool contains the token, false otherwise\\n    @return underlyingIndex index of the token in the pool, 0 if pool does not contain the token\\n    */\\n  function isUnderlyingToken(address swapAddress, address tokenContractAddress)\\n    external\\n    view\\n    returns (bool isUnderlying, uint256 underlyingIndex)\\n  {\\n    address[8] memory poolTokens = getPoolTokens(swapAddress);\\n    for (uint256 i = 0; i < 8; i++) {\\n      if (poolTokens[i] == tokenContractAddress) return (true, i);\\n    }\\n  }\\n\\n  /**\\n    @notice Updates to the latest curve main registry from the address provider\\n    */\\n  function updateCurveRegistry() external onlyOwner {\\n    address newAddress = CURVE_ADDRESS_PROVIDER.get_registry();\\n    require(address(CurveMainRegistry) != newAddress, \\\"Already up-to-date\\\");\\n\\n    CurveMainRegistry = ICurveRegistry(newAddress);\\n  }\\n\\n  /**\\n    @notice Updates to the latest curve v1 factory registry from the address provider\\n    */\\n  function updateFactoryRegistry() external onlyOwner {\\n    address newAddress = CURVE_ADDRESS_PROVIDER.get_address(3);\\n    require(address(FactoryRegistry) != newAddress, \\\"Already up-to-date\\\");\\n\\n    FactoryRegistry = ICurveFactoryRegistry(newAddress);\\n  }\\n\\n  /**\\n    @notice Updates to the latest curve crypto registry from the address provider\\n    */\\n  function updateCryptoRegistry() external onlyOwner {\\n    address newAddress = CURVE_ADDRESS_PROVIDER.get_address(5);\\n    require(address(CryptoRegistry) != newAddress, \\\"Already up-to-date\\\");\\n\\n    CryptoRegistry = ICurveCryptoRegistry(newAddress);\\n  }\\n\\n  /**\\n    @notice Add new pools which use the _use_underlying bool\\n    @param swapAddresses Curve swap addresses for the pool\\n    @param addUnderlying True if underlying tokens are always added\\n    */\\n  function updateShouldUseUnderlying(\\n    address[] calldata swapAddresses,\\n    bool[] calldata addUnderlying\\n  ) external onlyOwner {\\n    require(swapAddresses.length == addUnderlying.length, \\\"Mismatched arrays\\\");\\n    for (uint256 i = 0; i < swapAddresses.length; i++) {\\n      shouldUseUnderlying[swapAddresses[i]] = addUnderlying[i];\\n    }\\n  }\\n\\n  /**\\n    @notice Add new pools which use uamounts for add_liquidity\\n    @param swapAddresses Curve swap addresses to map from\\n    @param _depositAddresses Curve deposit addresses to map to\\n    */\\n  function updateDepositAddresses(\\n    address[] calldata swapAddresses,\\n    address[] calldata _depositAddresses\\n  ) external onlyOwner {\\n    require(\\n      swapAddresses.length == _depositAddresses.length,\\n      \\\"Mismatched arrays\\\"\\n    );\\n    for (uint256 i = 0; i < swapAddresses.length; i++) {\\n      depositAddresses[swapAddresses[i]] = _depositAddresses[i];\\n    }\\n  }\\n\\n  /**\\n    @notice Withdraws tokens that had been sent to registry address\\n    @param tokens ERC20 Token addressess (ZeroAddress if ETH)\\n    */\\n  function withdrawTokens(address[] calldata tokens) external onlyOwner {\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      uint256 qty;\\n\\n      if (tokens[i] == ETH_ADDRESS) {\\n        qty = address(this).balance;\\n        Address.sendValue(payable(owner()), qty);\\n      } else {\\n        qty = IERC20(tokens[i]).balanceOf(address(this));\\n        IERC20(tokens[i]).safeTransfer(owner(), qty);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CryptoRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveCryptoRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CurveMainRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FactoryRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getDepositAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getNumTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address[8]\",\"name\":\"poolTokens\",\"type\":\"address[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getSwapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isBtcPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isCryptoPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isCurvePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isEthPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isFactoryPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isMetaPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMeta\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"isUnderlyingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"underlyingIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldUseUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCryptoRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCurveRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_depositAddresses\",\"type\":\"address[]\"}],\"name\":\"updateDepositAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFactoryRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"addUnderlying\",\"type\":\"bool[]\"}],\"name\":\"updateShouldUseUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CurveRegistry", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}