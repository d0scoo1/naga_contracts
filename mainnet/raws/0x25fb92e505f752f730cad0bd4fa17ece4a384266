{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wrappers/XDaiMessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/xDai/messengers/IArbitraryMessageBridge.sol\\\";\\nimport \\\"./MessengerWrapper.sol\\\";\\n\\n/**\\n * @dev A MessengerWrapper for xDai - https://www.xdaichain.com/ (also see https://docs.tokenbridge.net/)\\n * @notice Deployed on layer-1\\n */\\n\\ncontract XDaiMessengerWrapper is MessengerWrapper {\\n\\n    IArbitraryMessageBridge public l1MessengerAddress;\\n    /// @notice The xDai AMB uses bytes32 for chainId instead of uint256\\n    bytes32 public l2ChainId;\\n    address public ambBridge;\\n    address public immutable l2BridgeAddress;\\n    uint256 public immutable defaultGasLimit;\\n\\n    constructor(\\n        address _l1BridgeAddress,\\n        address _l2BridgeAddress,\\n        IArbitraryMessageBridge _l1MessengerAddress,\\n        uint256 _defaultGasLimit,\\n        uint256 _l2ChainId,\\n        address _ambBridge\\n    )\\n        public\\n        MessengerWrapper(_l1BridgeAddress)\\n    {\\n        l2BridgeAddress = _l2BridgeAddress;\\n        l1MessengerAddress = _l1MessengerAddress;\\n        defaultGasLimit = _defaultGasLimit;\\n        l2ChainId = bytes32(_l2ChainId);\\n        ambBridge = _ambBridge;\\n    }\\n\\n    /**\\n     * @dev Sends a message to the l2BridgeAddress from layer-1\\n     * @param _calldata The data that l2BridgeAddress will be called with\\n     */\\n    function sendCrossDomainMessage(bytes memory _calldata) public override onlyL1Bridge {\\n        l1MessengerAddress.requireToPassMessage(\\n            l2BridgeAddress,\\n            _calldata,\\n            defaultGasLimit\\n        );\\n    }\\n\\n    /// @notice message data is not needed for message verification with the xDai AMB\\n    function verifySender(address l1BridgeCaller, bytes memory) public override {\\n        require(l1MessengerAddress.messageSender() == l2BridgeAddress, \\\"L2_XDAI_BRG: Invalid cross-domain sender\\\");\\n        require(l1BridgeCaller == ambBridge, \\\"L2_XDAI_BRG: Caller is not the expected sender\\\");\\n\\n        // With the xDai AMB, it is best practice to also check the source chainId\\n        // https://docs.tokenbridge.net/amb-bridge/how-to-develop-xchain-apps-by-amb#receive-a-method-call-from-the-amb-bridge\\n        require(l1MessengerAddress.messageSourceChainId() == l2ChainId, \\\"L2_XDAI_BRG: Invalid source Chain ID\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/xDai/messengers/IArbitraryMessageBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IArbitraryMessageBridge {\\n    function messageSender() external view returns (address);\\n    function maxGasPerTx() external view returns (uint256);\\n    function transactionHash() external view returns (bytes32);\\n    function messageId() external view returns (bytes32);\\n    function messageSourceChainId() external view returns (bytes32);\\n    function messageCallStatus(bytes32 _messageId) external view returns (bool);\\n    function failedMessageDataHash(bytes32 _messageId) external view returns (bytes32);\\n    function failedMessageReceiver(bytes32 _messageId) external view returns (address);\\n    function failedMessageSender(bytes32 _messageId) external view returns (address);\\n    function requireToPassMessage(address _contract, bytes memory _data, uint256 _gas) external returns (bytes32);\\n}\"\r\n    },\r\n    \"contracts/wrappers/MessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IMessengerWrapper.sol\\\";\\n\\nabstract contract MessengerWrapper is IMessengerWrapper {\\n    address public immutable l1BridgeAddress;\\n\\n    constructor(address _l1BridgeAddress) internal {\\n        l1BridgeAddress = _l1BridgeAddress;\\n    }\\n\\n    modifier onlyL1Bridge {\\n        require(msg.sender == l1BridgeAddress, \\\"MW: Sender must be the L1 Bridge\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMessengerWrapper {\\n    function sendCrossDomainMessage(bytes memory _calldata) external;\\n    function verifySender(address l1BridgeCaller, bytes memory _data) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"contract IArbitraryMessageBridge\",\"name\":\"_l1MessengerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ambBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ambBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1MessengerAddress\",\"outputs\":[{\"internalType\":\"contract IArbitraryMessageBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1BridgeCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "XDaiMessengerWrapper", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "50000", "ConstructorArguments": "000000000000000000000000b8901acb165ed027e32754e0ffe830802919727f000000000000000000000000d8926c12c0b2e5cd40cfda49ecaff40252af491b0000000000000000000000004c36d2919e407f0cc2ee3c993ccf8ac26d9ce64e00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000640000000000000000000000004c36d2919e407f0cc2ee3c993ccf8ac26d9ce64e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}