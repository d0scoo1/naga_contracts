{"status": "1", "message": "OK", "result": [{"SourceCode": "// Verified using https://dapp.tools\n\n// hevm: flattened sources of /nix/store/fs14a1fn2n0n355szi63iq33n5yzygnk-geb/dapp/geb/src/SurplusAuctionHouse.sol\n\npragma solidity =0.6.7;\n\n////// /nix/store/fs14a1fn2n0n355szi63iq33n5yzygnk-geb/dapp/geb/src/SurplusAuctionHouse.sol\n/// SurplusAuctionHouse.sol\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.7; */\n\nabstract contract SAFEEngineLike_11 {\n    function transferInternalCoins(address,address,uint256) virtual external;\n    function coinBalance(address) virtual external view returns (uint256);\n    function approveSAFEModification(address) virtual external;\n    function denySAFEModification(address) virtual external;\n}\nabstract contract TokenLike_2 {\n    function approve(address, uint256) virtual public returns (bool);\n    function balanceOf(address) virtual public view returns (uint256);\n    function move(address,address,uint256) virtual external;\n    function burn(address,uint256) virtual external;\n}\n\n/*\n   This thing lets you auction some system coins in return for protocol tokens that are then burnt\n*/\n\ncontract BurningSurplusAuctionHouse {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"BurningSurplusAuctionHouse/account-not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    struct Bid {\n        // Bid size (how many protocol tokens are offered per system coins sold)\n        uint256 bidAmount;                                                            // [wad]\n        // How many system coins are sold in an auction\n        uint256 amountToSell;                                                         // [rad]\n        // Who the high bidder is\n        address highBidder;\n        // When the latest bid expires and the auction can be settled\n        uint48  bidExpiry;                                                            // [unix epoch time]\n        // Hard deadline for the auction after which no more bids can be placed\n        uint48  auctionDeadline;                                                      // [unix epoch time]\n    }\n\n    // Bid data for each separate auction\n    mapping (uint256 => Bid) public bids;\n\n    // SAFE database\n    SAFEEngineLike_11 public safeEngine;\n    // Protocol token address\n    TokenLike_2      public protocolToken;\n\n    uint256  constant ONE = 1.00E18;                                                  // [wad]\n    // Minimum bid increase compared to the last bid in order to take the new one in consideration\n    uint256  public   bidIncrease = 1.05E18;                                          // [wad]\n    // How long the auction lasts after a new bid is submitted\n    uint48   public   bidDuration = 3 hours;                                          // [seconds]\n    // Total length of the auction\n    uint48   public   totalAuctionLength = 2 days;                                    // [seconds]\n    // Number of auctions started up until now\n    uint256  public   auctionsStarted = 0;\n    // Whether the contract is settled or not\n    uint256  public   contractEnabled;\n\n    bytes32 public constant AUCTION_HOUSE_TYPE   = bytes32(\"SURPLUS\");\n    bytes32 public constant SURPLUS_AUCTION_TYPE = bytes32(\"BURNING\");\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event ModifyParameters(bytes32 parameter, uint256 data);\n    event RestartAuction(uint256 id, uint256 auctionDeadline);\n    event IncreaseBidSize(uint256 id, address highBidder, uint256 amountToBuy, uint256 bid, uint256 bidExpiry);\n    event StartAuction(\n        uint256 indexed id,\n        uint256 auctionsStarted,\n        uint256 amountToSell,\n        uint256 initialBid,\n        uint256 auctionDeadline\n    );\n    event SettleAuction(uint256 indexed id);\n    event DisableContract();\n    event TerminateAuctionPrematurely(uint256 indexed id, address sender, address highBidder, uint256 bidAmount);\n\n    // --- Init ---\n    constructor(address safeEngine_, address protocolToken_) public {\n        require(safeEngine_ != address(0), \"BurningSurplusAuctionHouse/safe-engine-address-invalid\");\n        authorizedAccounts[msg.sender] = 1;\n        safeEngine = SAFEEngineLike_11(safeEngine_);\n        protocolToken = TokenLike_2(protocolToken_);\n        contractEnabled = 1;\n        emit AddAuthorization(msg.sender);\n    }\n\n    // --- Math ---\n    function addUint48(uint48 x, uint48 y) internal pure returns (uint48 z) {\n        require((z = x + y) >= x, \"BurningSurplusAuctionHouse/add-uint48-overflow\");\n    }\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"BurningSurplusAuctionHouse/mul-overflow\");\n    }\n\n    // --- Admin ---\n    /**\n     * @notice Modify auction parameters\n     * @param parameter The name of the parameter modified\n     * @param data New value for the parameter\n     */\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n        if (parameter == \"bidIncrease\") bidIncrease = data;\n        else if (parameter == \"bidDuration\") bidDuration = uint48(data);\n        else if (parameter == \"totalAuctionLength\") totalAuctionLength = uint48(data);\n        else revert(\"BurningSurplusAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n\n    // --- Auction ---\n    /**\n     * @notice Start a new surplus auction\n     * @param amountToSell Total amount of system coins to sell (rad)\n     * @param initialBid Initial protocol token bid (wad)\n     */\n    function startAuction(uint256 amountToSell, uint256 initialBid) external isAuthorized returns (uint256 id) {\n        require(contractEnabled == 1, \"BurningSurplusAuctionHouse/contract-not-enabled\");\n        require(auctionsStarted < uint256(-1), \"BurningSurplusAuctionHouse/overflow\");\n        id = ++auctionsStarted;\n\n        bids[id].bidAmount = initialBid;\n        bids[id].amountToSell = amountToSell;\n        bids[id].highBidder = msg.sender;\n        bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);\n\n        safeEngine.transferInternalCoins(msg.sender, address(this), amountToSell);\n\n        emit StartAuction(id, auctionsStarted, amountToSell, initialBid, bids[id].auctionDeadline);\n    }\n    /**\n     * @notice Restart an auction if no bids were submitted for it\n     * @param id ID of the auction to restart\n     */\n    function restartAuction(uint256 id) external {\n        require(bids[id].auctionDeadline < now, \"BurningSurplusAuctionHouse/not-finished\");\n        require(bids[id].bidExpiry == 0, \"BurningSurplusAuctionHouse/bid-already-placed\");\n        bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);\n        emit RestartAuction(id, bids[id].auctionDeadline);\n    }\n    /**\n     * @notice Submit a higher protocol token bid for the same amount of system coins\n     * @param id ID of the auction you want to submit the bid for\n     * @param amountToBuy Amount of system coins to buy (rad)\n     * @param bid New bid submitted (wad)\n     */\n    function increaseBidSize(uint256 id, uint256 amountToBuy, uint256 bid) external {\n        require(contractEnabled == 1, \"BurningSurplusAuctionHouse/contract-not-enabled\");\n        require(bids[id].highBidder != address(0), \"BurningSurplusAuctionHouse/high-bidder-not-set\");\n        require(bids[id].bidExpiry > now || bids[id].bidExpiry == 0, \"BurningSurplusAuctionHouse/bid-already-expired\");\n        require(bids[id].auctionDeadline > now, \"BurningSurplusAuctionHouse/auction-already-expired\");\n\n        require(amountToBuy == bids[id].amountToSell, \"BurningSurplusAuctionHouse/amounts-not-matching\");\n        require(bid > bids[id].bidAmount, \"BurningSurplusAuctionHouse/bid-not-higher\");\n        require(multiply(bid, ONE) >= multiply(bidIncrease, bids[id].bidAmount), \"BurningSurplusAuctionHouse/insufficient-increase\");\n\n        if (msg.sender != bids[id].highBidder) {\n            protocolToken.move(msg.sender, bids[id].highBidder, bids[id].bidAmount);\n            bids[id].highBidder = msg.sender;\n        }\n        protocolToken.move(msg.sender, address(this), bid - bids[id].bidAmount);\n\n        bids[id].bidAmount = bid;\n        bids[id].bidExpiry = addUint48(uint48(now), bidDuration);\n\n        emit IncreaseBidSize(id, msg.sender, amountToBuy, bid, bids[id].bidExpiry);\n    }\n    /**\n     * @notice Settle/finish an auction\n     * @param id ID of the auction to settle\n     */\n    function settleAuction(uint256 id) external {\n        require(contractEnabled == 1, \"BurningSurplusAuctionHouse/contract-not-enabled\");\n        require(bids[id].bidExpiry != 0 && (bids[id].bidExpiry < now || bids[id].auctionDeadline < now), \"BurningSurplusAuctionHouse/not-finished\");\n        safeEngine.transferInternalCoins(address(this), bids[id].highBidder, bids[id].amountToSell);\n        protocolToken.burn(address(this), bids[id].bidAmount);\n        delete bids[id];\n        emit SettleAuction(id);\n    }\n    /**\n    * @notice Disable the auction house (usually called by AccountingEngine)\n    **/\n    function disableContract() external isAuthorized {\n        contractEnabled = 0;\n        safeEngine.transferInternalCoins(address(this), msg.sender, safeEngine.coinBalance(address(this)));\n        emit DisableContract();\n    }\n    /**\n     * @notice Terminate an auction prematurely.\n     * @param id ID of the auction to settle/terminate\n     */\n    function terminateAuctionPrematurely(uint256 id) external {\n        require(contractEnabled == 0, \"BurningSurplusAuctionHouse/contract-still-enabled\");\n        require(bids[id].highBidder != address(0), \"BurningSurplusAuctionHouse/high-bidder-not-set\");\n        protocolToken.move(address(this), bids[id].highBidder, bids[id].bidAmount);\n        emit TerminateAuctionPrematurely(id, msg.sender, bids[id].highBidder, bids[id].bidAmount);\n        delete bids[id];\n    }\n}\n\n// This thing lets you auction surplus for protocol tokens that are then sent to another address\n\ncontract RecyclingSurplusAuctionHouse {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"RecyclingSurplusAuctionHouse/account-not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    struct Bid {\n        // Bid size (how many protocol tokens are offered per system coins sold)\n        uint256 bidAmount;                                                            // [wad]\n        // How many system coins are sold in an auction\n        uint256 amountToSell;                                                         // [rad]\n        // Who the high bidder is\n        address highBidder;\n        // When the latest bid expires and the auction can be settled\n        uint48  bidExpiry;                                                            // [unix epoch time]\n        // Hard deadline for the auction after which no more bids can be placed\n        uint48  auctionDeadline;                                                      // [unix epoch time]\n    }\n\n    // Bid data for each separate auction\n    mapping (uint256 => Bid) public bids;\n\n    // SAFE database\n    SAFEEngineLike_11 public safeEngine;\n    // Protocol token address\n    TokenLike_2      public protocolToken;\n    // Receiver of protocol tokens\n    address        public protocolTokenBidReceiver;\n\n    uint256  constant ONE = 1.00E18;                                                  // [wad]\n    // Minimum bid increase compared to the last bid in order to take the new one in consideration\n    uint256  public   bidIncrease = 1.05E18;                                          // [wad]\n    // How long the auction lasts after a new bid is submitted\n    uint48   public   bidDuration = 3 hours;                                          // [seconds]\n    // Total length of the auction\n    uint48   public   totalAuctionLength = 2 days;                                    // [seconds]\n    // Number of auctions started up until now\n    uint256  public   auctionsStarted = 0;\n    // Whether the contract is settled or not\n    uint256  public   contractEnabled;\n\n    bytes32 public constant AUCTION_HOUSE_TYPE = bytes32(\"SURPLUS\");\n    bytes32 public constant SURPLUS_AUCTION_TYPE = bytes32(\"RECYCLING\");\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event ModifyParameters(bytes32 parameter, uint256 data);\n    event ModifyParameters(bytes32 parameter, address addr);\n    event RestartAuction(uint256 id, uint256 auctionDeadline);\n    event IncreaseBidSize(uint256 id, address highBidder, uint256 amountToBuy, uint256 bid, uint256 bidExpiry);\n    event StartAuction(\n        uint256 indexed id,\n        uint256 auctionsStarted,\n        uint256 amountToSell,\n        uint256 initialBid,\n        uint256 auctionDeadline\n    );\n    event SettleAuction(uint256 indexed id);\n    event DisableContract();\n    event TerminateAuctionPrematurely(uint256 indexed id, address sender, address highBidder, uint256 bidAmount);\n\n    // --- Init ---\n    constructor(address safeEngine_, address protocolToken_) public {\n        require(safeEngine_ != address(0), \"RecyclingSurplusAuctionHouse/safe-engine-address-invalid\");\n        authorizedAccounts[msg.sender] = 1;\n        safeEngine = SAFEEngineLike_11(safeEngine_);\n        protocolToken = TokenLike_2(protocolToken_);\n        contractEnabled = 1;\n        emit AddAuthorization(msg.sender);\n    }\n\n    // --- Math ---\n    function addUint48(uint48 x, uint48 y) internal pure returns (uint48 z) {\n        require((z = x + y) >= x, \"RecyclingSurplusAuctionHouse/add-uint48-overflow\");\n    }\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"RecyclingSurplusAuctionHouse/mul-overflow\");\n    }\n\n    // --- Admin ---\n    /**\n     * @notice Modify uint256 parameters\n     * @param parameter The name of the parameter modified\n     * @param data New value for the parameter\n     */\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n        if (parameter == \"bidIncrease\") bidIncrease = data;\n        else if (parameter == \"bidDuration\") bidDuration = uint48(data);\n        else if (parameter == \"totalAuctionLength\") totalAuctionLength = uint48(data);\n        else revert(\"RecyclingSurplusAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n    /**\n     * @notice Modify address parameters\n     * @param parameter The name of the parameter modified\n     * @param addr New address value\n     */\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n        require(addr != address(0), \"RecyclingSurplusAuctionHouse/invalid-address\");\n        if (parameter == \"protocolTokenBidReceiver\") protocolTokenBidReceiver = addr;\n        else revert(\"RecyclingSurplusAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, addr);\n    }\n\n    // --- Auction ---\n    /**\n     * @notice Start a new surplus auction\n     * @param amountToSell Total amount of system coins to sell (rad)\n     * @param initialBid Initial protocol token bid (wad)\n     */\n    function startAuction(uint256 amountToSell, uint256 initialBid) external isAuthorized returns (uint256 id) {\n        require(contractEnabled == 1, \"RecyclingSurplusAuctionHouse/contract-not-enabled\");\n        require(auctionsStarted < uint256(-1), \"RecyclingSurplusAuctionHouse/overflow\");\n        require(protocolTokenBidReceiver != address(0), \"RecyclingSurplusAuctionHouse/null-prot-token-receiver\");\n        id = ++auctionsStarted;\n\n        bids[id].bidAmount = initialBid;\n        bids[id].amountToSell = amountToSell;\n        bids[id].highBidder = msg.sender;\n        bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);\n\n        safeEngine.transferInternalCoins(msg.sender, address(this), amountToSell);\n\n        emit StartAuction(id, auctionsStarted, amountToSell, initialBid, bids[id].auctionDeadline);\n    }\n    /**\n     * @notice Restart an auction if no bids were submitted for it\n     * @param id ID of the auction to restart\n     */\n    function restartAuction(uint256 id) external {\n        require(bids[id].auctionDeadline < now, \"RecyclingSurplusAuctionHouse/not-finished\");\n        require(bids[id].bidExpiry == 0, \"RecyclingSurplusAuctionHouse/bid-already-placed\");\n        bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);\n        emit RestartAuction(id, bids[id].auctionDeadline);\n    }\n    /**\n     * @notice Submit a higher protocol token bid for the same amount of system coins\n     * @param id ID of the auction you want to submit the bid for\n     * @param amountToBuy Amount of system coins to buy (rad)\n     * @param bid New bid submitted (wad)\n     */\n    function increaseBidSize(uint256 id, uint256 amountToBuy, uint256 bid) external {\n        require(contractEnabled == 1, \"RecyclingSurplusAuctionHouse/contract-not-enabled\");\n        require(bids[id].highBidder != address(0), \"RecyclingSurplusAuctionHouse/high-bidder-not-set\");\n        require(bids[id].bidExpiry > now || bids[id].bidExpiry == 0, \"RecyclingSurplusAuctionHouse/bid-already-expired\");\n        require(bids[id].auctionDeadline > now, \"RecyclingSurplusAuctionHouse/auction-already-expired\");\n\n        require(amountToBuy == bids[id].amountToSell, \"RecyclingSurplusAuctionHouse/amounts-not-matching\");\n        require(bid > bids[id].bidAmount, \"RecyclingSurplusAuctionHouse/bid-not-higher\");\n        require(multiply(bid, ONE) >= multiply(bidIncrease, bids[id].bidAmount), \"RecyclingSurplusAuctionHouse/insufficient-increase\");\n\n        if (msg.sender != bids[id].highBidder) {\n            protocolToken.move(msg.sender, bids[id].highBidder, bids[id].bidAmount);\n            bids[id].highBidder = msg.sender;\n        }\n        protocolToken.move(msg.sender, address(this), bid - bids[id].bidAmount);\n\n        bids[id].bidAmount = bid;\n        bids[id].bidExpiry = addUint48(uint48(now), bidDuration);\n\n        emit IncreaseBidSize(id, msg.sender, amountToBuy, bid, bids[id].bidExpiry);\n    }\n    /**\n     * @notice Settle/finish an auction\n     * @param id ID of the auction to settle\n     */\n    function settleAuction(uint256 id) external {\n        require(contractEnabled == 1, \"RecyclingSurplusAuctionHouse/contract-not-enabled\");\n        require(bids[id].bidExpiry != 0 && (bids[id].bidExpiry < now || bids[id].auctionDeadline < now), \"RecyclingSurplusAuctionHouse/not-finished\");\n        safeEngine.transferInternalCoins(address(this), bids[id].highBidder, bids[id].amountToSell);\n        protocolToken.move(address(this), protocolTokenBidReceiver, bids[id].bidAmount);\n        delete bids[id];\n        emit SettleAuction(id);\n    }\n    /**\n    * @notice Disable the auction house (usually called by AccountingEngine)\n    **/\n    function disableContract() external isAuthorized {\n        contractEnabled = 0;\n        safeEngine.transferInternalCoins(address(this), msg.sender, safeEngine.coinBalance(address(this)));\n        emit DisableContract();\n    }\n    /**\n     * @notice Terminate an auction prematurely.\n     * @param id ID of the auction to settle/terminate\n     */\n    function terminateAuctionPrematurely(uint256 id) external {\n        require(contractEnabled == 0, \"RecyclingSurplusAuctionHouse/contract-still-enabled\");\n        require(bids[id].highBidder != address(0), \"RecyclingSurplusAuctionHouse/high-bidder-not-set\");\n        protocolToken.move(address(this), bids[id].highBidder, bids[id].bidAmount);\n        emit TerminateAuctionPrematurely(id, msg.sender, bids[id].highBidder, bids[id].bidAmount);\n        delete bids[id];\n    }\n}\n\ncontract PostSettlementSurplusAuctionHouse {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"PostSettlementSurplusAuctionHouse/account-not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    struct Bid {\n        // Bid size (how many protocol tokens are offered per system coins sold)\n        uint256 bidAmount;                                                        // [rad]\n        // How many system coins are sold in an auction\n        uint256 amountToSell;                                                     // [wad]\n        // Who the high bidder is\n        address highBidder;\n        // When the latest bid expires and the auction can be settled\n        uint48  bidExpiry;                                                        // [unix epoch time]\n        // Hard deadline for the auction after which no more bids can be placed\n        uint48  auctionDeadline;                                                  // [unix epoch time]\n    }\n\n    // Bid data for each separate auction\n    mapping (uint256 => Bid) public bids;\n\n    // SAFE database\n    SAFEEngineLike_11        public safeEngine;\n    // Protocol token address\n    TokenLike_2            public protocolToken;\n\n    uint256  constant ONE = 1.00E18;                                              // [wad]\n    // Minimum bid increase compared to the last bid in order to take the new one in consideration\n    uint256  public   bidIncrease = 1.05E18;                                      // [wad]\n    // How long the auction lasts after a new bid is submitted\n    uint48   public   bidDuration = 3 hours;                                      // [seconds]\n    // Total length of the auction\n    uint48   public   totalAuctionLength = 2 days;                                // [seconds]\n    // Number of auctions started up until now\n    uint256  public   auctionsStarted = 0;\n\n    bytes32 public constant AUCTION_HOUSE_TYPE = bytes32(\"SURPLUS\");\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event ModifyParameters(bytes32 parameter, uint256 data);\n    event RestartAuction(uint256 indexed id, uint256 auctionDeadline);\n    event IncreaseBidSize(uint256 indexed id, address highBidder, uint256 amountToBuy, uint256 bid, uint256 bidExpiry);\n    event StartAuction(\n        uint256 indexed id,\n        uint256 auctionsStarted,\n        uint256 amountToSell,\n        uint256 initialBid,\n        uint256 auctionDeadline\n    );\n    event SettleAuction(uint256 indexed id);\n\n    // --- Init ---\n    constructor(address safeEngine_, address protocolToken_) public {\n        require(safeEngine_ != address(0), \"PostSettlementSurplusAuctionHouse/safe-engine-address-invalid\");\n        authorizedAccounts[msg.sender] = 1;\n        safeEngine = SAFEEngineLike_11(safeEngine_);\n        protocolToken = TokenLike_2(protocolToken_);\n        emit AddAuthorization(msg.sender);\n    }\n\n    // --- Math ---\n    function addUint48(uint48 x, uint48 y) internal pure returns (uint48 z) {\n        require((z = x + y) >= x);\n    }\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    // --- Admin ---\n    /**\n     * @notice Modify uint256 parameters\n     * @param parameter The name of the parameter modified\n     * @param data New value for the parameter\n     */\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n        if (parameter == \"bidIncrease\") bidIncrease = data;\n        else if (parameter == \"bidDuration\") bidDuration = uint48(data);\n        else if (parameter == \"totalAuctionLength\") totalAuctionLength = uint48(data);\n        else revert(\"PostSettlementSurplusAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n\n    // --- Auction ---\n    /**\n     * @notice Start a new surplus auction\n     * @param amountToSell Total amount of system coins to sell (wad)\n     * @param initialBid Initial protocol token bid (rad)\n     */\n    function startAuction(uint256 amountToSell, uint256 initialBid) external isAuthorized returns (uint256 id) {\n        require(auctionsStarted < uint256(-1), \"PostSettlementSurplusAuctionHouse/overflow\");\n        id = ++auctionsStarted;\n\n        bids[id].bidAmount = initialBid;\n        bids[id].amountToSell = amountToSell;\n        bids[id].highBidder = msg.sender;\n        bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);\n\n        safeEngine.transferInternalCoins(msg.sender, address(this), amountToSell);\n\n        emit StartAuction(id, auctionsStarted, amountToSell, initialBid, bids[id].auctionDeadline);\n    }\n    /**\n     * @notice Restart an auction if no bids were submitted for it\n     * @param id ID of the auction to restart\n     */\n    function restartAuction(uint256 id) external {\n        require(bids[id].auctionDeadline < now, \"PostSettlementSurplusAuctionHouse/not-finished\");\n        require(bids[id].bidExpiry == 0, \"PostSettlementSurplusAuctionHouse/bid-already-placed\");\n        bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);\n        emit RestartAuction(id, bids[id].auctionDeadline);\n    }\n    /**\n     * @notice Submit a higher protocol token bid for the same amount of system coins\n     * @param id ID of the auction you want to submit the bid for\n     * @param amountToBuy Amount of system coins to buy (wad)\n     * @param bid New bid submitted (rad)\n     */\n    function increaseBidSize(uint256 id, uint256 amountToBuy, uint256 bid) external {\n        require(bids[id].highBidder != address(0), \"PostSettlementSurplusAuctionHouse/high-bidder-not-set\");\n        require(bids[id].bidExpiry > now || bids[id].bidExpiry == 0, \"PostSettlementSurplusAuctionHouse/bid-already-expired\");\n        require(bids[id].auctionDeadline > now, \"PostSettlementSurplusAuctionHouse/auction-already-expired\");\n\n        require(amountToBuy == bids[id].amountToSell, \"PostSettlementSurplusAuctionHouse/amounts-not-matching\");\n        require(bid > bids[id].bidAmount, \"PostSettlementSurplusAuctionHouse/bid-not-higher\");\n        require(multiply(bid, ONE) >= multiply(bidIncrease, bids[id].bidAmount), \"PostSettlementSurplusAuctionHouse/insufficient-increase\");\n\n        if (msg.sender != bids[id].highBidder) {\n            protocolToken.move(msg.sender, bids[id].highBidder, bids[id].bidAmount);\n            bids[id].highBidder = msg.sender;\n        }\n        protocolToken.move(msg.sender, address(this), bid - bids[id].bidAmount);\n\n        bids[id].bidAmount = bid;\n        bids[id].bidExpiry = addUint48(uint48(now), bidDuration);\n\n        emit IncreaseBidSize(id, msg.sender, amountToBuy, bid, bids[id].bidExpiry);\n    }\n    /**\n     * @notice Settle/finish an auction\n     * @param id ID of the auction to settle\n     */\n    function settleAuction(uint256 id) external {\n        require(bids[id].bidExpiry != 0 && (bids[id].bidExpiry < now || bids[id].auctionDeadline < now), \"PostSettlementSurplusAuctionHouse/not-finished\");\n        safeEngine.transferInternalCoins(address(this), bids[id].highBidder, bids[id].amountToSell);\n        protocolToken.burn(address(this), bids[id].bidAmount);\n        delete bids[id];\n        emit SettleAuction(id);\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"highBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidExpiry\",\"type\":\"uint256\"}],\"name\":\"IncreaseBidSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"}],\"name\":\"RestartAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SettleAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionsStarted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"}],\"name\":\"StartAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"highBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"TerminateAuctionPrematurely\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_HOUSE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SURPLUS_AUCTION_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionsStarted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidDuration\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highBidder\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"bidExpiry\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"auctionDeadline\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"increaseBidSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolToken\",\"outputs\":[{\"internalType\":\"contract TokenLike_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"restartAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike_11\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialBid\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"terminateAuctionPrematurely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuctionLength\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BurningSurplusAuctionHouse", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001e6afa340851d60e75be38494813c09b3356a009000000000000000000000000a5b947687163fe88c3e6af5b17ae69896f4abccf", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}