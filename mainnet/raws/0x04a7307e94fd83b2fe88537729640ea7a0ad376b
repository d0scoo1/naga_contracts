{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OperatorResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/IOperatorResolver.sol\\\";\\nimport \\\"./abstracts/MixinOperatorResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Operator Resolver implementation\\n/// @notice Resolve the operators address\\ncontract OperatorResolver is IOperatorResolver, Ownable {\\n    /// @dev Operators map of the name and address\\n    mapping(bytes32 => Operator) public operators;\\n\\n    /// @inheritdoc IOperatorResolver\\n    function getOperator(bytes32 name) external view override returns (Operator memory) {\\n        return operators[name];\\n    }\\n\\n    /// @inheritdoc IOperatorResolver\\n    function requireAndGetOperator(bytes32 name, string calldata reason)\\n        external\\n        view\\n        override\\n        returns (Operator memory)\\n    {\\n        Operator memory _foundOperator = operators[name];\\n        require(_foundOperator.implementation != address(0), reason);\\n        return _foundOperator;\\n    }\\n\\n    /// @inheritdoc IOperatorResolver\\n    function areOperatorsImported(bytes32[] calldata names, Operator[] calldata destinations)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        uint256 namesLength = names.length;\\n        require(namesLength == destinations.length, \\\"OR: INPUTS_LENGTH_MUST_MATCH\\\");\\n        for (uint256 i = 0; i < namesLength; i++) {\\n            if (\\n                operators[names[i]].implementation != destinations[i].implementation ||\\n                operators[names[i]].selector != destinations[i].selector\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @inheritdoc IOperatorResolver\\n    function importOperators(\\n        bytes32[] calldata names,\\n        Operator[] calldata operatorsToImport,\\n        MixinOperatorResolver[] calldata destinations\\n    ) external override onlyOwner {\\n        require(names.length == operatorsToImport.length, \\\"OR: INPUTS_LENGTH_MUST_MATCH\\\");\\n        bytes32 name;\\n        Operator calldata destination;\\n        for (uint256 i = 0; i < names.length; i++) {\\n            name = names[i];\\n            destination = operatorsToImport[i];\\n            operators[name] = destination;\\n            emit OperatorImported(name, destination);\\n        }\\n\\n        // rebuild caches atomically\\n        // see. https://github.com/code-423n4/2021-11-nested-findings/issues/217\\n        rebuildCaches(destinations);\\n    }\\n\\n    /// @notice rebuild the caches of mixin smart contracts\\n    /// @param destinations The list of mixinOperatorResolver to rebuild\\n    function rebuildCaches(MixinOperatorResolver[] calldata destinations) public onlyOwner {\\n        for (uint256 i = 0; i < destinations.length; i++) {\\n            destinations[i].rebuildCache();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOperatorResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.11;\\n\\nimport \\\"../abstracts/MixinOperatorResolver.sol\\\";\\n\\n/// @title Operator address resolver interface\\ninterface IOperatorResolver {\\n    /// @dev Represents an operator definition\\n    /// @param implementation Contract address\\n    /// @param selector Function selector\\n    struct Operator {\\n        address implementation;\\n        bytes4 selector;\\n    }\\n\\n    /// @notice Emitted when an operator is imported\\n    /// @param name The operator name\\n    /// @param destination The operator definition\\n    event OperatorImported(bytes32 name, Operator destination);\\n\\n    /// @notice Get an operator (address/selector) for a given name\\n    /// @param name The operator name\\n    /// @return The operator struct (address/selector)\\n    function getOperator(bytes32 name) external view returns (Operator memory);\\n\\n    /// @notice Get an operator (address/selector) for a given name but require the operator to exist.\\n    /// @param name The operator name\\n    /// @param reason Require message\\n    /// @return The operator struct (address/selector)\\n    function requireAndGetOperator(bytes32 name, string calldata reason) external view returns (Operator memory);\\n\\n    /// @notice Check if some operators are imported with the right name (and vice versa)\\n    /// @dev The check is performed on the index, make sure that the two arrays match\\n    /// @param names The operator names\\n    /// @param destinations The operator addresses\\n    /// @return True if all the addresses/names are correctly imported, false otherwise\\n    function areOperatorsImported(bytes32[] calldata names, Operator[] calldata destinations)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Import/replace operators\\n    /// @dev names and destinations arrays must coincide\\n    /// @param names Hashes of the operators names to register\\n    /// @param operatorsToImport Operators to import\\n    /// @param destinations Destinations to rebuild cache atomically\\n    function importOperators(\\n        bytes32[] calldata names,\\n        Operator[] calldata operatorsToImport,\\n        MixinOperatorResolver[] calldata destinations\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/abstracts/MixinOperatorResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.11;\\n\\nimport \\\"../OperatorResolver.sol\\\";\\nimport \\\"../interfaces/IOperatorResolver.sol\\\";\\nimport \\\"../interfaces/INestedFactory.sol\\\";\\n\\n/// @title Mixin operator resolver\\n/// @notice Store in cache operators name and address/selector\\nabstract contract MixinOperatorResolver {\\n    /// @notice Emitted when cache is updated\\n    /// @param name The operator name\\n    /// @param destination The operator address\\n    event CacheUpdated(bytes32 name, IOperatorResolver.Operator destination);\\n\\n    /// @dev The OperatorResolver used to build the cache\\n    OperatorResolver public immutable resolver;\\n\\n    /// @dev Cache operators map of the name and Operator struct (address/selector)\\n    mapping(bytes32 => IOperatorResolver.Operator) internal operatorCache;\\n\\n    constructor(address _resolver) {\\n        require(_resolver != address(0), \\\"MOR: INVALID_ADDRESS\\\");\\n        resolver = OperatorResolver(_resolver);\\n    }\\n\\n    /// @dev This function is public not external in order for it to be overridden and\\n    ///      invoked via super in subclasses\\n    function resolverOperatorsRequired() public view virtual returns (bytes32[] memory) {}\\n\\n    /// @notice Rebuild the operatorCache\\n    function rebuildCache() public {\\n        bytes32[] memory requiredOperators = resolverOperatorsRequired();\\n        bytes32 name;\\n        IOperatorResolver.Operator memory destination;\\n        // The resolver must call this function whenever it updates its state\\n        for (uint256 i = 0; i < requiredOperators.length; i++) {\\n            name = requiredOperators[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            destination = resolver.getOperator(name);\\n            if (destination.implementation != address(0)) {\\n                operatorCache[name] = destination;\\n            } else {\\n                delete operatorCache[name];\\n            }\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    /// @notice Check the state of operatorCache\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory requiredOperators = resolverOperatorsRequired();\\n        bytes32 name;\\n        IOperatorResolver.Operator memory cacheTmp;\\n        IOperatorResolver.Operator memory actualValue;\\n        for (uint256 i = 0; i < requiredOperators.length; i++) {\\n            name = requiredOperators[i];\\n            cacheTmp = operatorCache[name];\\n            actualValue = resolver.getOperator(name);\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                actualValue.implementation != cacheTmp.implementation ||\\n                actualValue.selector != cacheTmp.selector ||\\n                cacheTmp.implementation == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev Get operator address in cache and require (if exists)\\n    /// @param name The operator name\\n    /// @return The operator address\\n    function requireAndGetAddress(bytes32 name) internal view returns (IOperatorResolver.Operator memory) {\\n        IOperatorResolver.Operator memory _foundAddress = operatorCache[name];\\n        require(_foundAddress.implementation != address(0), string(abi.encodePacked(\\\"MOR: MISSING_OPERATOR: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    /// @dev Build the calldata (with safe datas) and call the Operator\\n    /// @param _order The order to execute\\n    /// @param _inputToken The input token address\\n    /// @param _outputToken The output token address\\n    /// @return success If the operator call is successful\\n    /// @return amounts The amounts from the execution (used and received)\\n    ///         - amounts[0] : The amount of output token\\n    ///         - amounts[1] : The amount of input token USED by the operator (can be different than expected)\\n    function callOperator(\\n        INestedFactory.Order calldata _order,\\n        address _inputToken,\\n        address _outputToken\\n    ) internal returns (bool success, uint256[] memory amounts) {\\n        IOperatorResolver.Operator memory _operator = requireAndGetAddress(_order.operator);\\n        // Parameters are concatenated and padded to 32 bytes.\\n        // We are concatenating the selector + given params\\n        bytes memory data;\\n        (success, data) = _operator.implementation.delegatecall(bytes.concat(_operator.selector, _order.callData));\\n\\n        if (success) {\\n            address[] memory tokens;\\n            (amounts, tokens) = abi.decode(data, (uint256[], address[]));\\n            require(tokens[0] == _outputToken, \\\"MOR: INVALID_OUTPUT_TOKEN\\\");\\n            require(tokens[1] == _inputToken, \\\"MOR: INVALID_INPUT_TOKEN\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INestedFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../NestedReserve.sol\\\";\\nimport \\\"../FeeSplitter.sol\\\";\\n\\n/// @title NestedFactory interface\\ninterface INestedFactory {\\n    /* ------------------------------ EVENTS ------------------------------ */\\n\\n    /// @dev Emitted when the feeSplitter is updated\\n    /// @param feeSplitter The new feeSplitter address\\n    event FeeSplitterUpdated(address feeSplitter);\\n\\n    /// @dev Emitted when the entryFees is updated\\n    /// @param entryFees The new entryFees amount\\n    event EntryFeesUpdated(uint256 entryFees);\\n\\n    /// @dev Emitted when the exitFees is updated\\n    /// @param exitFees The new exitFees amount\\n    event ExitFeesUpdated(uint256 exitFees);\\n\\n    /// @dev Emitted when the reserve is updated\\n    /// @param reserve The new reserve address\\n    event ReserveUpdated(address reserve);\\n\\n    /// @dev Emitted when a NFT (portfolio) is created\\n    /// @param nftId The NFT token Id\\n    /// @param originalNftId If replicated, the original NFT token Id\\n    event NftCreated(uint256 indexed nftId, uint256 originalNftId);\\n\\n    /// @dev Emitted when a NFT (portfolio) is updated\\n    /// @param nftId The NFT token Id\\n    event NftUpdated(uint256 indexed nftId);\\n\\n    /// @dev Emitted when a new operator is added\\n    /// @param newOperator The new operator bytes name\\n    event OperatorAdded(bytes32 newOperator);\\n\\n    /// @dev Emitted when an operator is removed\\n    /// @param oldOperator The old operator bytes name\\n    event OperatorRemoved(bytes32 oldOperator);\\n\\n    /// @dev Emitted when tokens are unlocked (sent to the owner)\\n    /// @param token The unlocked token address\\n    /// @param amount The unlocked amount\\n    event TokensUnlocked(address token, uint256 amount);\\n\\n    /* ------------------------------ STRUCTS ------------------------------ */\\n\\n    /// @dev Represent an order made to the factory when creating/editing an NFT\\n    /// @param operator The bytes32 name of the Operator\\n    /// @param token The expected token address in output/input\\n    /// @param callData The operator parameters (delegatecall)\\n    struct Order {\\n        bytes32 operator;\\n        address token;\\n        bytes callData;\\n    }\\n\\n    /// @dev Represent multiple input orders for a given token to perform multiple trades.\\n    /// @param inputToken The input token\\n    /// @param amount The amount to transfer (input amount)\\n    /// @param orders The orders to perform using the input token.\\n    /// @param _fromReserve Specify the input token source (true if reserve, false if wallet)\\n    ///        Note: fromReserve can be read as \\\"from portfolio\\\"\\n    struct BatchedInputOrders {\\n        IERC20 inputToken;\\n        uint256 amount;\\n        Order[] orders;\\n        bool fromReserve;\\n    }\\n\\n    /// @dev Represent multiple output orders to receive a given token\\n    /// @param outputToken The output token\\n    /// @param amounts The amount of sell tokens to use\\n    /// @param orders Orders calldata\\n    /// @param toReserve Specify the output token destination (true if reserve, false if wallet)\\n    ///        Note: toReserve can be read as \\\"to portfolio\\\"\\n    struct BatchedOutputOrders {\\n        IERC20 outputToken;\\n        uint256[] amounts;\\n        Order[] orders;\\n        bool toReserve;\\n    }\\n\\n    /* ------------------------------ OWNER FUNCTIONS ------------------------------ */\\n\\n    /// @notice Add an operator (name) for building cache\\n    /// @param operator The operator name to add\\n    function addOperator(bytes32 operator) external;\\n\\n    /// @notice Remove an operator (name) for building cache\\n    /// @param operator The operator name to remove\\n    function removeOperator(bytes32 operator) external;\\n\\n    /// @notice Sets the address receiving the fees\\n    /// @param _feeSplitter The address of the receiver\\n    function setFeeSplitter(FeeSplitter _feeSplitter) external;\\n\\n    /// @notice Sets the entry fees amount\\n    ///         Where 1 = 0.01% and 10000 = 100%\\n    /// @param _entryFees Entry fees amount\\n    function setEntryFees(uint256 _entryFees) external;\\n\\n    /// @notice Sets the exit fees amount\\n    ///         Where 1 = 0.01% and 10000 = 100%\\n    /// @param _exitFees Exit fees amount\\n    function setExitFees(uint256 _exitFees) external;\\n\\n    /// @notice The Factory is not storing funds, but some users can make\\n    /// bad manipulations and send tokens to the contract.\\n    /// In response to that, the owner can retrieve the factory balance of a given token\\n    /// to later return users funds.\\n    /// @param _token The token to retrieve.\\n    function unlockTokens(IERC20 _token) external;\\n\\n    /* ------------------------------ USERS FUNCTIONS ------------------------------ */\\n\\n    /// @notice Create a portfolio and store the underlying assets from the positions\\n    /// @param _originalTokenId The id of the NFT replicated, 0 if not replicating\\n    /// @param _batchedOrders The order to execute\\n    function create(uint256 _originalTokenId, BatchedInputOrders[] calldata _batchedOrders) external payable;\\n\\n    /// @notice Process multiple input orders\\n    /// @param _nftId The id of the NFT to update\\n    /// @param _batchedOrders The order to execute\\n    function processInputOrders(uint256 _nftId, BatchedInputOrders[] calldata _batchedOrders) external payable;\\n\\n    /// @notice Process multiple output orders\\n    /// @param _nftId The id of the NFT to update\\n    /// @param _batchedOrders The order to execute\\n    function processOutputOrders(uint256 _nftId, BatchedOutputOrders[] calldata _batchedOrders) external;\\n\\n    /// @notice Process multiple input orders and then multiple output orders\\n    /// @param _nftId The id of the NFT to update\\n    /// @param _batchedInputOrders The input orders to execute (first)\\n    /// @param _batchedOutputOrders The output orders to execute (after)\\n    function processInputAndOutputOrders(\\n        uint256 _nftId,\\n        BatchedInputOrders[] calldata _batchedInputOrders,\\n        BatchedOutputOrders[] calldata _batchedOutputOrders\\n    ) external payable;\\n\\n    /// @notice Burn NFT and exchange all tokens for a specific ERC20 then send it back to the user\\n    /// @dev Will unwrap WETH output to ETH\\n    /// @param _nftId The id of the NFT to destroy\\n    /// @param _buyToken The output token\\n    /// @param _orders Orders calldata\\n    function destroy(\\n        uint256 _nftId,\\n        IERC20 _buyToken,\\n        Order[] calldata _orders\\n    ) external;\\n\\n    /// @notice Withdraw a token from the reserve and transfer it to the owner without exchanging it\\n    /// @param _nftId NFT token ID\\n    /// @param _tokenIndex Index in array of tokens for this NFT and holding.\\n    function withdraw(uint256 _nftId, uint256 _tokenIndex) external;\\n\\n    /// @notice Update the lock timestamp of an NFT record.\\n    /// Note: Can only increase the lock timestamp.\\n    /// @param _nftId The NFT id to get the record\\n    /// @param _timestamp The new timestamp.\\n    function updateLockTimestamp(uint256 _nftId, uint256 _timestamp) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/NestedReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./abstracts/OwnableFactoryHandler.sol\\\";\\n\\n/// @title Stores underlying assets of NestedNFTs.\\n/// @notice The factory itself can only trigger a transfer after verification that the user\\n///         holds funds present in this contract. Only the factory can withdraw/transfer assets.\\ncontract NestedReserve is OwnableFactoryHandler {\\n    /// @notice Release funds to a recipient\\n    /// @param _recipient The receiver\\n    /// @param _token The token to transfer\\n    /// @param _amount The amount to transfer\\n    function transfer(\\n        address _recipient,\\n        IERC20 _token,\\n        uint256 _amount\\n    ) external onlyFactory {\\n        require(_recipient != address(0), \\\"NRS: INVALID_ADDRESS\\\");\\n        SafeERC20.safeTransfer(_token, _recipient, _amount);\\n    }\\n\\n    /// @notice Release funds to the factory\\n    /// @param _token The ERC20 to transfer\\n    /// @param _amount The amount to transfer\\n    function withdraw(IERC20 _token, uint256 _amount) external onlyFactory {\\n        SafeERC20.safeTransfer(_token, msg.sender, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FeeSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/external/IWETH.sol\\\";\\n\\n/// @title Manage the fees between shareholders\\n/// @notice Receives fees collected by the NestedFactory, and splits the income among\\n/// shareholders (the NFT owners, Nested treasury and a NST buybacker contract).\\ncontract FeeSplitter is Ownable, ReentrancyGuard {\\n    /* ------------------------------ EVENTS ------------------------------ */\\n\\n    /// @dev Emitted when a payment is released\\n    /// @param to The address receiving the payment\\n    /// @param token The token transfered\\n    /// @param amount The amount paid\\n    event PaymentReleased(address to, address token, uint256 amount);\\n\\n    /// @dev Emitted when a payment is received\\n    /// @param from The address sending the tokens\\n    /// @param token The token received\\n    /// @param amount The amount received\\n    event PaymentReceived(address from, address token, uint256 amount);\\n\\n    /// @dev Emitted when the royalties weight is updated\\n    /// @param weight The new weight\\n    event RoyaltiesWeightUpdated(uint256 weight);\\n\\n    /// @dev Emitted when a new shareholder is added\\n    /// @param account The new shareholder account\\n    /// @param weight The shareholder weight\\n    event ShareholdersAdded(address account, uint256 weight);\\n\\n    /// @dev Emitted when a shareholder weight is updated\\n    /// @param account The shareholder address\\n    /// @param weight The new weight\\n    event ShareholderUpdated(address account, uint256 weight);\\n\\n    /// @dev Emitted when royalties are claim released\\n    /// @param to The address claiming the royalties\\n    /// @param token The token received\\n    /// @param value The amount received\\n    event RoyaltiesReceived(address to, address token, uint256 value);\\n\\n    /* ------------------------------ STRUCTS ------------------------------ */\\n\\n    /// @dev Represent a shareholder\\n    /// @param account Shareholders address that can receive income\\n    /// @param weight Determines share allocation\\n    struct Shareholder {\\n        address account;\\n        uint96 weight;\\n    }\\n\\n    /// @dev Registers shares and amount release for a specific token or ETH\\n    struct TokenRecords {\\n        uint256 totalShares;\\n        uint256 totalReleased;\\n        mapping(address => uint256) shares;\\n        mapping(address => uint256) released;\\n    }\\n\\n    /* ----------------------------- VARIABLES ----------------------------- */\\n\\n    /// @dev Map of tokens with the tokenRecords\\n    mapping(address => TokenRecords) private tokenRecords;\\n\\n    /// @dev All the shareholders (array)\\n    Shareholder[] private shareholders;\\n\\n    /// @dev Royalties part weights when applicable\\n    uint256 public royaltiesWeight;\\n\\n    uint256 public totalWeights;\\n\\n    address public immutable weth;\\n\\n    /* ---------------------------- CONSTRUCTOR ---------------------------- */\\n\\n    constructor(\\n        address[] memory _accounts,\\n        uint96[] memory _weights,\\n        uint256 _royaltiesWeight,\\n        address _weth\\n    ) {\\n        require(_weth != address(0), \\\"FS: INVALID_ADDRESS\\\");\\n        // Initial shareholders addresses and weights\\n        setShareholders(_accounts, _weights);\\n        setRoyaltiesWeight(_royaltiesWeight);\\n        weth = _weth;\\n    }\\n\\n    /// @dev Receive ether after a WETH withdraw call\\n    receive() external payable {\\n        require(msg.sender == weth, \\\"FS: ETH_SENDER_NOT_WETH\\\");\\n    }\\n\\n    /* -------------------------- OWNER FUNCTIONS -------------------------- */\\n\\n    /// @notice Sets the weight assigned to the royalties part for the fee\\n    /// @param _weight The new royalties weight\\n    function setRoyaltiesWeight(uint256 _weight) public onlyOwner {\\n        require(_weight != 0, \\\"FS: WEIGHT_ZERO\\\");\\n        totalWeights = totalWeights + _weight - royaltiesWeight;\\n        royaltiesWeight = _weight;\\n        emit RoyaltiesWeightUpdated(_weight);\\n    }\\n\\n    /// @notice Sets a new list of shareholders\\n    /// @param _accounts Shareholders accounts list\\n    /// @param _weights Weight for each shareholder. Determines part of the payment allocated to them\\n    function setShareholders(address[] memory _accounts, uint96[] memory _weights) public onlyOwner {\\n        delete shareholders;\\n        uint256 accountsLength = _accounts.length;\\n        require(accountsLength != 0, \\\"FS: EMPTY_ARRAY\\\");\\n        require(accountsLength == _weights.length, \\\"FS: INPUTS_LENGTH_MUST_MATCH\\\");\\n        totalWeights = royaltiesWeight;\\n\\n        for (uint256 i = 0; i < accountsLength; i++) {\\n            _addShareholder(_accounts[i], _weights[i]);\\n        }\\n    }\\n\\n    /// @notice Updates weight for a shareholder\\n    /// @param _accountIndex Account to change the weight of\\n    /// @param _weight The new weight\\n    function updateShareholder(uint256 _accountIndex, uint96 _weight) external onlyOwner {\\n        require(_weight != 0, \\\"FS: INVALID_WEIGHT\\\");\\n        require(_accountIndex < shareholders.length, \\\"FS: INVALID_ACCOUNT_INDEX\\\");\\n        Shareholder storage _shareholder = shareholders[_accountIndex];\\n        totalWeights = totalWeights + _weight - _shareholder.weight;\\n        require(totalWeights != 0, \\\"FS: TOTAL_WEIGHTS_ZERO\\\");\\n        _shareholder.weight = _weight;\\n        emit ShareholderUpdated(_shareholder.account, _weight);\\n    }\\n\\n    /* -------------------------- USERS FUNCTIONS -------------------------- */\\n\\n    /// @notice Release multiple tokens and handle ETH unwrapping\\n    /// @param _tokens ERC20 tokens to release\\n    function releaseTokens(IERC20[] calldata _tokens) external nonReentrant {\\n        uint256 amount;\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            amount = _releaseToken(_msgSender(), _tokens[i]);\\n            if (address(_tokens[i]) == weth) {\\n                IWETH(weth).withdraw(amount);\\n                (bool success, ) = _msgSender().call{ value: amount }(\\\"\\\");\\n                require(success, \\\"FS: ETH_TRANFER_ERROR\\\");\\n            } else {\\n                SafeERC20.safeTransfer(_tokens[i], _msgSender(), amount);\\n            }\\n            emit PaymentReleased(_msgSender(), address(_tokens[i]), amount);\\n        }\\n    }\\n\\n    /// @notice Release multiple tokens without ETH unwrapping\\n    /// @param _tokens ERC20 tokens to release\\n    function releaseTokensNoETH(IERC20[] calldata _tokens) external nonReentrant {\\n        uint256 amount;\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            amount = _releaseToken(_msgSender(), _tokens[i]);\\n            SafeERC20.safeTransfer(_tokens[i], _msgSender(), amount);\\n            emit PaymentReleased(_msgSender(), address(_tokens[i]), amount);\\n        }\\n    }\\n\\n    /// @notice Sends a fee to this contract for splitting, as an ERC20 token. No royalties are expected.\\n    /// @param _token Currency for the fee as an ERC20 token\\n    /// @param _amount Amount of token as fee to be claimed by this contract\\n    function sendFees(IERC20 _token, uint256 _amount) external nonReentrant {\\n        uint256 weights;\\n        unchecked {\\n            weights = totalWeights - royaltiesWeight;\\n        }\\n\\n        uint256 balanceBeforeTransfer = _token.balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(_token, _msgSender(), address(this), _amount);\\n\\n        _sendFees(_token, _token.balanceOf(address(this)) - balanceBeforeTransfer, weights);\\n    }\\n\\n    /// @notice Sends a fee to this contract for splitting, as an ERC20 token\\n    /// @param _royaltiesTarget The account that can claim royalties\\n    /// @param _token Currency for the fee as an ERC20 token\\n    /// @param _amount Amount of token as fee to be claimed by this contract\\n    function sendFeesWithRoyalties(\\n        address _royaltiesTarget,\\n        IERC20 _token,\\n        uint256 _amount\\n    ) external nonReentrant {\\n        require(_royaltiesTarget != address(0), \\\"FS: INVALID_ROYALTIES_TARGET\\\");\\n\\n        uint256 balanceBeforeTransfer = _token.balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(_token, _msgSender(), address(this), _amount);\\n        uint256 amountReceived = _token.balanceOf(address(this)) - balanceBeforeTransfer;\\n\\n        uint256 _totalWeights = totalWeights;\\n        uint256 royaltiesAmount = (amountReceived * royaltiesWeight) / _totalWeights;\\n\\n        _sendFees(_token, amountReceived, _totalWeights);\\n        _addShares(_royaltiesTarget, royaltiesAmount, address(_token));\\n\\n        emit RoyaltiesReceived(_royaltiesTarget, address(_token), royaltiesAmount);\\n    }\\n\\n    /* ------------------------------- VIEWS ------------------------------- */\\n\\n    /// @notice Returns the amount due to an account. Call releaseToken to withdraw the amount.\\n    /// @param _account Account address to check the amount due for\\n    /// @param _token ERC20 payment token address\\n    /// @return The total amount due for the requested currency\\n    function getAmountDue(address _account, IERC20 _token) public view returns (uint256) {\\n        TokenRecords storage _tokenRecords = tokenRecords[address(_token)];\\n        uint256 _totalShares = _tokenRecords.totalShares;\\n        if (_totalShares == 0) return 0;\\n\\n        uint256 totalReceived = _tokenRecords.totalReleased + _token.balanceOf(address(this));\\n        return (totalReceived * _tokenRecords.shares[_account]) / _totalShares - _tokenRecords.released[_account];\\n    }\\n\\n    /// @notice Getter for the total shares held by shareholders.\\n    /// @param _token Payment token address\\n    /// @return The total shares count\\n    function totalShares(address _token) external view returns (uint256) {\\n        return tokenRecords[_token].totalShares;\\n    }\\n\\n    /// @notice Getter for the total amount of token already released.\\n    /// @param _token Payment token address\\n    /// @return The total amount release to shareholders\\n    function totalReleased(address _token) external view returns (uint256) {\\n        return tokenRecords[_token].totalReleased;\\n    }\\n\\n    /// @notice Getter for the amount of shares held by an account.\\n    /// @param _account Account the shares belong to\\n    /// @param _token Payment token address\\n    /// @return The shares owned by the account\\n    function shares(address _account, address _token) external view returns (uint256) {\\n        return tokenRecords[_token].shares[_account];\\n    }\\n\\n    /// @notice Getter for the amount of Ether already released to a shareholders.\\n    /// @param _account The target account for this request\\n    /// @param _token Payment token address\\n    /// @return The amount already released to this account\\n    function released(address _account, address _token) external view returns (uint256) {\\n        return tokenRecords[_token].released[_account];\\n    }\\n\\n    /// @notice Finds a shareholder and return its index\\n    /// @param _account Account to find\\n    /// @return The shareholder index in the storage array\\n    function findShareholder(address _account) external view returns (uint256) {\\n        for (uint256 i = 0; i < shareholders.length; i++) {\\n            if (shareholders[i].account == _account) return i;\\n        }\\n        revert(\\\"FS: SHAREHOLDER_NOT_FOUND\\\");\\n    }\\n\\n    /* ------------------------- PRIVATE FUNCTIONS ------------------------- */\\n\\n    /// @notice Transfers a fee to this contract\\n    /// @dev This method calculates the amount received, to support deflationary tokens\\n    /// @param _token Currency for the fee\\n    /// @param _amount Amount of token sent\\n    /// @param _totalWeights Total weights to determine the share count to allocate\\n    function _sendFees(\\n        IERC20 _token,\\n        uint256 _amount,\\n        uint256 _totalWeights\\n    ) private {\\n        Shareholder[] memory shareholdersCache = shareholders;\\n        for (uint256 i = 0; i < shareholdersCache.length; i++) {\\n            _addShares(\\n                shareholdersCache[i].account,\\n                (_amount * shareholdersCache[i].weight) / _totalWeights,\\n                address(_token)\\n            );\\n        }\\n        emit PaymentReceived(_msgSender(), address(_token), _amount);\\n    }\\n\\n    /// @dev Increase the shares of a shareholder\\n    /// @param _account The shareholder address\\n    /// @param _shares The shares of the holder\\n    /// @param _token The updated token\\n    function _addShares(\\n        address _account,\\n        uint256 _shares,\\n        address _token\\n    ) private {\\n        TokenRecords storage _tokenRecords = tokenRecords[_token];\\n        _tokenRecords.shares[_account] += _shares;\\n        _tokenRecords.totalShares += _shares;\\n    }\\n\\n    function _releaseToken(address _account, IERC20 _token) private returns (uint256) {\\n        uint256 amountToRelease = getAmountDue(_account, _token);\\n        require(amountToRelease != 0, \\\"FS: NO_PAYMENT_DUE\\\");\\n\\n        TokenRecords storage _tokenRecords = tokenRecords[address(_token)];\\n        _tokenRecords.released[_account] += amountToRelease;\\n        _tokenRecords.totalReleased += amountToRelease;\\n\\n        return amountToRelease;\\n    }\\n\\n    function _addShareholder(address _account, uint96 _weight) private {\\n        require(_weight != 0, \\\"FS: ZERO_WEIGHT\\\");\\n        require(_account != address(0), \\\"FS: INVALID_ADDRESS\\\");\\n        for (uint256 i = 0; i < shareholders.length; i++) {\\n            require(shareholders[i].account != _account, \\\"FS: ALREADY_SHAREHOLDER\\\");\\n        }\\n\\n        shareholders.push(Shareholder(_account, _weight));\\n        totalWeights += _weight;\\n        emit ShareholdersAdded(_account, _weight);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstracts/OwnableFactoryHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Asbtract \\\"Ownable\\\" contract managing a whitelist of factories\\nabstract contract OwnableFactoryHandler is Ownable {\\n    /// @dev Emitted when a new factory is added\\n    /// @param newFactory Address of the new factory\\n    event FactoryAdded(address newFactory);\\n\\n    /// @dev Emitted when a factory is removed\\n    /// @param oldFactory Address of the removed factory\\n    event FactoryRemoved(address oldFactory);\\n\\n    /// @dev Supported factories to interact with\\n    mapping(address => bool) public supportedFactories;\\n\\n    /// @dev Reverts the transaction if the caller is a supported factory\\n    modifier onlyFactory() {\\n        require(supportedFactories[msg.sender], \\\"OFH: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n    /// @notice Add a supported factory\\n    /// @param _factory The address of the new factory\\n    function addFactory(address _factory) external onlyOwner {\\n        require(_factory != address(0), \\\"OFH: INVALID_ADDRESS\\\");\\n        supportedFactories[_factory] = true;\\n        emit FactoryAdded(_factory);\\n    }\\n\\n    /// @notice Remove a supported factory\\n    /// @param _factory The address of the factory to remove\\n    function removeFactory(address _factory) external onlyOwner {\\n        require(supportedFactories[_factory], \\\"OFH: NOT_SUPPORTED\\\");\\n        supportedFactories[_factory] = false;\\n        emit FactoryRemoved(_factory);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"indexed\":false,\"internalType\":\"struct IOperatorResolver.Operator\",\"name\":\"destination\",\"type\":\"tuple\"}],\"name\":\"OperatorImported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"names\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"internalType\":\"struct IOperatorResolver.Operator[]\",\"name\":\"destinations\",\"type\":\"tuple[]\"}],\"name\":\"areOperatorsImported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"internalType\":\"struct IOperatorResolver.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"names\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"internalType\":\"struct IOperatorResolver.Operator[]\",\"name\":\"operatorsToImport\",\"type\":\"tuple[]\"},{\"internalType\":\"contract MixinOperatorResolver[]\",\"name\":\"destinations\",\"type\":\"address[]\"}],\"name\":\"importOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MixinOperatorResolver[]\",\"name\":\"destinations\",\"type\":\"address[]\"}],\"name\":\"rebuildCaches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requireAndGetOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"internalType\":\"struct IOperatorResolver.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OperatorResolver", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "5000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}