{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AccountManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./dependencies/openzeppelin/Ownable.sol\\\";\\nimport \\\"./interface/IAuthCenter.sol\\\";\\nimport \\\"./interface/IAccount.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract AccountManager is Ownable {\\n    // totally account count\\n    uint256 accountCount;\\n\\n    // id -> Account\\n    mapping(string => address) accountBook;\\n\\n    // Account -> id\\n    mapping(address => string) idBook;\\n\\n    // account template\\n    address public accountTemplate;\\n\\n    IAuthCenter public authCenter;\\n\\n    bool flag;\\n\\n    event CreateAccount(string id, address account);\\n    event UpdateAccountTemplate(address preTemp, address accountTemplate);\\n    event SetAuthCenter(address preAuthCenter, address authCenter);\\n\\n    modifier onlyAccess() {\\n        authCenter.ensureAccountManagerAccess(_msgSender());\\n        _;\\n    }\\n\\n    function init(address _template, IAuthCenter _authCenter) external {\\n        require(!flag, \\\"BYDEFI: already initialized!\\\");\\n        super.initialize();\\n        accountTemplate = _template;\\n        authCenter = _authCenter;\\n        flag = true;\\n    }\\n\\n    function updateAccountTemplate(address _newTemplate) external onlyOwner {\\n        require(_newTemplate != address(0), \\\"BYDEFI: _newTemplate should not be 0\\\");\\n        address preTemp = accountTemplate;\\n        accountTemplate = _newTemplate;\\n\\n        emit UpdateAccountTemplate(preTemp, accountTemplate);\\n    }\\n\\n    function setAuthCenter(address _authCenter) external onlyOwner {\\n        address pre = address(authCenter);\\n        authCenter = IAuthCenter(_authCenter);\\n        emit SetAuthCenter(pre, _authCenter);\\n    }\\n\\n    function createAccount(string memory id) external onlyAccess returns (address _account) {\\n        require(bytes(id).length != 0, \\\"BYDEFI: Invalid id!\\\");\\n        require(accountBook[id] == address(0), \\\"BYDEFI: account exist\\\");\\n\\n        _account = _cloneAccountProxy(accountTemplate);\\n        require(_account != address(0), \\\"BYDEFI: cloneAccountProxy failed!\\\");\\n        IAccount(_account).init(address(authCenter));\\n\\n        accountBook[id] = _account;\\n        unchecked {\\n            accountCount++;\\n        }\\n        idBook[_account] = id;\\n\\n        emit CreateAccount(id, _account);\\n    }\\n\\n    function getAccount(string memory id) external view returns (address _account) {\\n        _account = accountBook[id];\\n    }\\n\\n    function isAccount(address _address) external view returns (bool res, string memory id) {\\n        id = idBook[_address];\\n        if (bytes(id).length != 0) {\\n            res = true;\\n        }\\n    }\\n\\n    function getAccountCount() external view returns (uint256) {\\n        return accountCount;\\n    }\\n\\n    function _cloneAccountProxy(address _template) internal returns (address accountAddress) {\\n        bytes20 targetBytes = bytes20(_template);\\n\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            accountAddress := create(0, clone, 0x37)\\n        }\\n    }\\n\\n    function useless() public pure returns (uint256 a, string memory s) {\\n        a = 100;\\n        s = \\\"hello world!\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize() internal {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // console.log(\\\"owner():\\\", owner());\\n        // console.log(\\\"msgSender:\\\", _msgSender());\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    // function renounceOwnership() public virtual onlyOwner {\\n    //     _transferOwnership(address(0));\\n    // }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IAuthCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAuthCenter {\\n    function ensureAccountAccess(address _caller) external view;\\n    function ensureFundsProviderPullAccess(address _caller) external view;\\n    function ensureFundsProviderRebalanceAccess(address _caller) external view;\\n    function ensureOperatorAccess(address _caller) external view;\\n    function ensureOperatorPullAccess(address _caller) external view;\\n    function ensureAccountManagerAccess(address _caller) external view;\\n    \\n}\\n\"\r\n    },\r\n    \"contracts/interface/IAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAccount {\\n    function init(address _authCenter) external;\\n    \\n    function getBalance(address[] memory _tokens) external view returns (uint256, uint256[] memory);\\n\\n    function pull(\\n        address token,\\n        uint256 amt,\\n        address to\\n    ) external returns (uint256 _amt);\\n\\n    function push(address token, uint256 amt)\\n        external\\n        payable\\n        returns (uint256 _amt);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CreateAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preAuthCenter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authCenter\",\"type\":\"address\"}],\"name\":\"SetAuthCenter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preTemp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountTemplate\",\"type\":\"address\"}],\"name\":\"UpdateAccountTemplate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authCenter\",\"outputs\":[{\"internalType\":\"contract IAuthCenter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"},{\"internalType\":\"contract IAuthCenter\",\"name\":\"_authCenter\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"res\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authCenter\",\"type\":\"address\"}],\"name\":\"setAuthCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTemplate\",\"type\":\"address\"}],\"name\":\"updateAccountTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useless\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "AccountManager", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}