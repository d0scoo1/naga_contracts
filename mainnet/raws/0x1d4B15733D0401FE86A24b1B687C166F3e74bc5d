{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u28f6\u28f6\u28f6\u28e6\u2840\u2800\u2800\u2800\u28f6\u28f6\u2844\u2800\u2800\u28f6\u28f6\u2846\u2800\u2800\u28f6\u28f6\u2800\u2800\u2800\u2800\u28b0\u28f6\u28f6\u28f6\u28f6\u2880\u2800\u2800\u28e4\u28f6\u28f6\u28e6\u2840\u2800\u2800\u2800\u28f4\u28f6\u28f6\u28e6\u2800\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u28bb\u28ff\u2800\u2800\u2800\u28ff\u28ff\u28ff\u2800\u28b8\u28ff\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u28ff\u28ff\u2800\u2800\u28fe\u28ff\u2801\u2808\u28ff\u2847\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u28f8\u28ff\u2800\u2800\u2800\u28ff\u28ff\u28ff\u2840\u28ff\u285f\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2818\u28ff\u28f7\u2800\u2800\u2800\r\n// \u28ff\u28ff\u283f\u283f\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u285f\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28f7\u28ff\u2800\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u287f\u283f\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28e6\u2800\u2800\u2800\u2800\u2808\u28ff\u28ff\u2844\u2800\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2808\u28ff\u28f7\u2800\u2800\u2800\u28ff\u28ff\u28b8\u28ff\u28ff\u2808\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u2880\u28c0\u2800\u2819\u28ff\u28e7\u2800\u2800\u28c0\u28c0\u2800\u283b\u28ff\u2846\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28e4\u28fe\u28ff\u2807\u2800\u2800\u28ff\u28ff\u2800\u28ff\u28ff\u2800\u2800\u2800\u28ff\u28ff\u2800\u28ff\u2847\u2808\u28ff\u2847\u2800\u2800\u28ff\u28ff\u28e4\u28e4\u2844\u2800\u28b8\u28ff\u28e7\u28e4\u28e4\u2844\u2800\u28b8\u28ff\u28c6\u2800\u28ff\u28ff\u2800\u2800\u28ff\u28ff\u2840\u2880\u28ff\u28ff\r\n// \u281b\u281b\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u283f\u283f\u281b\u2800\u2800\u2800\u281b\u281b\u2800\u2818\u281b\u2803\u2800\u2800\u281b\u281b\u2800\u281b\u2800\u2808\u281b\u2803\u2800\u2800\u281b\u281b\u281b\u281b\u2803\u2800\u2818\u281b\u281b\u281b\u281b\u2803\u2800\u2800\u2819\u283f\u283f\u281f\u2801\u2800\u2800\u2800\u281b\u283f\u283f\u281b\u2800\r\n// https://formless.xyz/opportunities\r\n//\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @title Contract code verification.\r\n/// @author brandon@formless.xyz\r\n/// @notice Code verification library for determining the keccak256\r\n/// hash of the runtime bytecode for deployed contracts.\r\nlibrary CodeVerification {\r\n    enum BuildType {\r\n        WALLET, /* 0 */\r\n        SPLIT, /* 1 */\r\n        PFA_UNIT, /* 2 */\r\n        PFA_COLLECTION /* 3 */\r\n    }\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    /// @notice Returns the keccak256 hash of the runtime bytecode\r\n    /// stored at the supplied `address_`.\r\n    function readCodeHash(address address_) public view returns (bytes32) {\r\n        bytes32 codeHash;\r\n        assembly {\r\n            codeHash := extcodehash(address_)\r\n        }\r\n        return codeHash;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"readCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CodeVerification", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://465a09b02836def979e8cc35527ec9e9a5d5f1ecac45d48f1980679694e7b85a"}]}