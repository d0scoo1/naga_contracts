{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/compound/Morpho.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./MorphoGovernance.sol\\\";\\n\\n/// @title Morpho.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Main Morpho contract handling user interactions and pool interactions.\\ncontract Morpho is MorphoGovernance {\\n    using SafeTransferLib for ERC20;\\n    using DelegateCall for address;\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when a user claims rewards.\\n    /// @param _user The address of the claimer.\\n    /// @param _amountClaimed The amount of reward token claimed.\\n    event RewardsClaimed(address indexed _user, uint256 _amountClaimed);\\n\\n    /// @notice Emitted when a user claims rewards and trades them for MORPHO tokens.\\n    /// @param _user The address of the claimer.\\n    /// @param _amountSent The amount of reward token sent to the vault.\\n    event RewardsClaimedAndTraded(address indexed _user, uint256 _amountSent);\\n\\n    /// EXTERNAL ///\\n\\n    /// @notice Supplies underlying tokens in a specific market.\\n    /// @dev `msg.sender` must have approved Morpho's contract to spend the underlying `_amount`.\\n    /// @param _poolTokenAddress The address of the market the user wants to interact with.\\n    /// @param _onBehalf The address of the account whose positions will be updated.\\n    /// @param _amount The amount of token (in underlying) to supply.\\n    function supply(\\n        address _poolTokenAddress,\\n        address _onBehalf,\\n        uint256 _amount\\n    ) external nonReentrant isMarketCreatedAndNotPausedNorPartiallyPaused(_poolTokenAddress) {\\n        address(positionsManager).functionDelegateCall(\\n            abi.encodeWithSelector(\\n                positionsManager.supplyLogic.selector,\\n                _poolTokenAddress,\\n                msg.sender,\\n                _onBehalf,\\n                _amount,\\n                defaultMaxGasForMatching.supply\\n            )\\n        );\\n    }\\n\\n    /// @notice Supplies underlying tokens in a specific market.\\n    /// @dev `msg.sender` must have approved Morpho's contract to spend the underlying `_amount`.\\n    /// @param _poolTokenAddress The address of the market the user wants to interact with.\\n    /// @param _onBehalf The address of the account whose positions will be updated.\\n    /// @param _amount The amount of token (in underlying) to supply.\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    function supply(\\n        address _poolTokenAddress,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external nonReentrant isMarketCreatedAndNotPausedNorPartiallyPaused(_poolTokenAddress) {\\n        address(positionsManager).functionDelegateCall(\\n            abi.encodeWithSelector(\\n                positionsManager.supplyLogic.selector,\\n                _poolTokenAddress,\\n                msg.sender,\\n                _onBehalf,\\n                _amount,\\n                _maxGasForMatching\\n            )\\n        );\\n    }\\n\\n    /// @notice Borrows underlying tokens in a specific market.\\n    /// @param _poolTokenAddress The address of the market the user wants to interact with.\\n    /// @param _amount The amount of token (in underlying).\\n    function borrow(address _poolTokenAddress, uint256 _amount)\\n        external\\n        nonReentrant\\n        isMarketCreatedAndNotPausedNorPartiallyPaused(_poolTokenAddress)\\n    {\\n        address(positionsManager).functionDelegateCall(\\n            abi.encodeWithSelector(\\n                positionsManager.borrowLogic.selector,\\n                _poolTokenAddress,\\n                _amount,\\n                defaultMaxGasForMatching.borrow\\n            )\\n        );\\n    }\\n\\n    /// @notice Borrows underlying tokens in a specific market.\\n    /// @param _poolTokenAddress The address of the market the user wants to interact with.\\n    /// @param _amount The amount of token (in underlying).\\n    /// @param _maxGasForMatching The maximum amount of gas to consume within a matching engine loop.\\n    function borrow(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external nonReentrant isMarketCreatedAndNotPausedNorPartiallyPaused(_poolTokenAddress) {\\n        address(positionsManager).functionDelegateCall(\\n            abi.encodeWithSelector(\\n                positionsManager.borrowLogic.selector,\\n                _poolTokenAddress,\\n                _amount,\\n                _maxGasForMatching\\n            )\\n        );\\n    }\\n\\n    /// @notice Withdraws underlying tokens in a specific market.\\n    /// @param _poolTokenAddress The address of the market the user wants to interact with.\\n    /// @param _amount The amount of tokens (in underlying) to withdraw from supply.\\n    function withdraw(address _poolTokenAddress, uint256 _amount)\\n        external\\n        nonReentrant\\n        isMarketCreatedAndNotPaused(_poolTokenAddress)\\n    {\\n        address(positionsManager).functionDelegateCall(\\n            abi.encodeWithSelector(\\n                positionsManager.withdrawLogic.selector,\\n                _poolTokenAddress,\\n                _amount,\\n                msg.sender,\\n                msg.sender,\\n                defaultMaxGasForMatching.withdraw\\n            )\\n        );\\n    }\\n\\n    /// @notice Repays debt of the user.\\n    /// @dev `msg.sender` must have approved Morpho's contract to spend the underlying `_amount`.\\n    /// @param _poolTokenAddress The address of the market the user wants to interact with.\\n    /// @param _onBehalf The address of the account whose positions will be updated.\\n    /// @param _amount The amount of token (in underlying) to repay from borrow.\\n    function repay(\\n        address _poolTokenAddress,\\n        address _onBehalf,\\n        uint256 _amount\\n    ) external nonReentrant isMarketCreatedAndNotPaused(_poolTokenAddress) {\\n        address(positionsManager).functionDelegateCall(\\n            abi.encodeWithSelector(\\n                positionsManager.repayLogic.selector,\\n                _poolTokenAddress,\\n                msg.sender,\\n                _onBehalf,\\n                _amount,\\n                defaultMaxGasForMatching.repay\\n            )\\n        );\\n    }\\n\\n    /// @notice Liquidates a position.\\n    /// @param _poolTokenBorrowedAddress The address of the pool token the liquidator wants to repay.\\n    /// @param _poolTokenCollateralAddress The address of the collateral pool token the liquidator wants to seize.\\n    /// @param _borrower The address of the borrower to liquidate.\\n    /// @param _amount The amount of token (in underlying) to repay.\\n    function liquidate(\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address _borrower,\\n        uint256 _amount\\n    )\\n        external\\n        nonReentrant\\n        isMarketCreatedAndNotPaused(_poolTokenBorrowedAddress)\\n        isMarketCreatedAndNotPaused(_poolTokenCollateralAddress)\\n    {\\n        address(positionsManager).functionDelegateCall(\\n            abi.encodeWithSelector(\\n                positionsManager.liquidateLogic.selector,\\n                _poolTokenBorrowedAddress,\\n                _poolTokenCollateralAddress,\\n                _borrower,\\n                _amount\\n            )\\n        );\\n    }\\n\\n    /// @notice Claims rewards for the given assets.\\n    /// @param _cTokenAddresses The cToken addresses to claim rewards from.\\n    /// @param _tradeForMorphoToken Whether or not to trade COMP tokens for MORPHO tokens.\\n    function claimRewards(address[] calldata _cTokenAddresses, bool _tradeForMorphoToken)\\n        external\\n        nonReentrant\\n    {\\n        uint256 amountOfRewards = rewardsManager.claimRewards(_cTokenAddresses, msg.sender);\\n\\n        if (amountOfRewards == 0) revert AmountIsZero();\\n\\n        ERC20 comp = ERC20(comptroller.getCompAddress());\\n        // If there is not enough COMP tokens on the contract, claim them. Else, continue.\\n        if (comp.balanceOf(address(this)) < amountOfRewards)\\n            comptroller.claimComp(address(this), _cTokenAddresses);\\n\\n        if (_tradeForMorphoToken) {\\n            comp.safeApprove(address(incentivesVault), amountOfRewards);\\n            incentivesVault.tradeCompForMorphoTokens(msg.sender, amountOfRewards);\\n            emit RewardsClaimedAndTraded(msg.sender, amountOfRewards);\\n        } else {\\n            comp.safeTransfer(msg.sender, amountOfRewards);\\n            emit RewardsClaimed(msg.sender, amountOfRewards);\\n        }\\n    }\\n\\n    /// @notice Allows to receive ETH.\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/compound/MorphoGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./MorphoUtils.sol\\\";\\n\\n/// @title MorphoGovernance.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Governance functions for Morpho.\\nabstract contract MorphoGovernance is MorphoUtils {\\n    using SafeTransferLib for ERC20;\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when a new `defaultMaxGasForMatching` is set.\\n    /// @param _defaultMaxGasForMatching The new `defaultMaxGasForMatching`.\\n    event DefaultMaxGasForMatchingSet(Types.MaxGasForMatching _defaultMaxGasForMatching);\\n\\n    /// @notice Emitted when a new value for `maxSortedUsers` is set.\\n    /// @param _newValue The new value of `maxSortedUsers`.\\n    event MaxSortedUsersSet(uint256 _newValue);\\n\\n    /// @notice Emitted the address of the `treasuryVault` is set.\\n    /// @param _newTreasuryVaultAddress The new address of the `treasuryVault`.\\n    event TreasuryVaultSet(address indexed _newTreasuryVaultAddress);\\n\\n    /// @notice Emitted the address of the `incentivesVault` is set.\\n    /// @param _newIncentivesVaultAddress The new address of the `incentivesVault`.\\n    event IncentivesVaultSet(address indexed _newIncentivesVaultAddress);\\n\\n    /// @notice Emitted when the `positionsManager` is set.\\n    /// @param _positionsManager The new address of the `positionsManager`.\\n    event PositionsManagerSet(address indexed _positionsManager);\\n\\n    /// @notice Emitted when the `rewardsManager` is set.\\n    /// @param _newRewardsManagerAddress The new address of the `rewardsManager`.\\n    event RewardsManagerSet(address indexed _newRewardsManagerAddress);\\n\\n    /// @notice Emitted when the `interestRatesManager` is set.\\n    /// @param _interestRatesManager The new address of the `interestRatesManager`.\\n    event InterestRatesSet(address indexed _interestRatesManager);\\n\\n    /// @dev Emitted when a new `dustThreshold` is set.\\n    /// @param _dustThreshold The new `dustThreshold`.\\n    event DustThresholdSet(uint256 _dustThreshold);\\n\\n    /// @notice Emitted when the `reserveFactor` is set.\\n    /// @param _poolTokenAddress The address of the concerned market.\\n    /// @param _newValue The new value of the `reserveFactor`.\\n    event ReserveFactorSet(address indexed _poolTokenAddress, uint16 _newValue);\\n\\n    /// @notice Emitted when the `p2pIndexCursor` is set.\\n    /// @param _poolTokenAddress The address of the concerned market.\\n    /// @param _newValue The new value of the `p2pIndexCursor`.\\n    event P2PIndexCursorSet(address indexed _poolTokenAddress, uint16 _newValue);\\n\\n    /// @notice Emitted when a reserve fee is claimed.\\n    /// @param _poolTokenAddress The address of the concerned market.\\n    /// @param _amountClaimed The amount of reward token claimed.\\n    event ReserveFeeClaimed(address indexed _poolTokenAddress, uint256 _amountClaimed);\\n\\n    /// @notice Emitted when the value of `p2pDisabled` is set.\\n    /// @param _poolTokenAddress The address of the concerned market.\\n    /// @param _p2pDisabled The new value of `_p2pDisabled` adopted.\\n    event P2PStatusSet(address indexed _poolTokenAddress, bool _p2pDisabled);\\n\\n    /// @notice Emitted when a market is paused or unpaused.\\n    /// @param _poolTokenAddress The address of the concerned market.\\n    /// @param _newStatus The new pause status of the market.\\n    event PauseStatusSet(address indexed _poolTokenAddress, bool _newStatus);\\n\\n    /// @notice Emitted when a market is partially paused or unpaused.\\n    /// @param _poolTokenAddress The address of the concerned market.\\n    /// @param _newStatus The new partial pause status of the market.\\n    event PartialPauseStatusSet(address indexed _poolTokenAddress, bool _newStatus);\\n\\n    /// @notice Emitted when a new market is created.\\n    /// @param _poolTokenAddress The address of the market that has been created.\\n    /// @param _reserveFactor The reserve factor set for this market.\\n    /// @param _poolTokenAddress The P2P index cursor set for this market.\\n    event MarketCreated(\\n        address indexed _poolTokenAddress,\\n        uint16 _reserveFactor,\\n        uint16 _p2pIndexCursor\\n    );\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when the creation of a market failed on Compound.\\n    error MarketCreationFailedOnCompound();\\n\\n    /// @notice Thrown when the input is above the max basis points value (100%).\\n    error ExceedsMaxBasisPoints();\\n\\n    /// @notice Thrown when the market is already created.\\n    error MarketAlreadyCreated();\\n\\n    /// @notice Thrown when the amount is equal to 0.\\n    error AmountIsZero();\\n\\n    /// @notice Thrown when the address is the zero address.\\n    error ZeroAddress();\\n\\n    /// UPGRADE ///\\n\\n    /// @notice Initializes the Morpho contract.\\n    /// @param _positionsManager The `positionsManager`.\\n    /// @param _interestRatesManager The `interestRatesManager`.\\n    /// @param _comptroller The `comptroller`.\\n    /// @param _defaultMaxGasForMatching The `defaultMaxGasForMatching`.\\n    /// @param _dustThreshold The `dustThreshold`.\\n    /// @param _maxSortedUsers The `_maxSortedUsers`.\\n    /// @param _cEth The cETH address.\\n    /// @param _wEth The wETH address.\\n    function initialize(\\n        IPositionsManager _positionsManager,\\n        IInterestRatesManager _interestRatesManager,\\n        IComptroller _comptroller,\\n        Types.MaxGasForMatching memory _defaultMaxGasForMatching,\\n        uint256 _dustThreshold,\\n        uint256 _maxSortedUsers,\\n        address _cEth,\\n        address _wEth\\n    ) external initializer {\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n\\n        interestRatesManager = _interestRatesManager;\\n        positionsManager = _positionsManager;\\n        comptroller = _comptroller;\\n\\n        defaultMaxGasForMatching = _defaultMaxGasForMatching;\\n        dustThreshold = _dustThreshold;\\n        maxSortedUsers = _maxSortedUsers;\\n\\n        cEth = _cEth;\\n        wEth = _wEth;\\n    }\\n\\n    /// GOVERNANCE ///\\n\\n    /// @notice Sets `maxSortedUsers`.\\n    /// @param _newMaxSortedUsers The new `maxSortedUsers` value.\\n    function setMaxSortedUsers(uint256 _newMaxSortedUsers) external onlyOwner {\\n        maxSortedUsers = _newMaxSortedUsers;\\n        emit MaxSortedUsersSet(_newMaxSortedUsers);\\n    }\\n\\n    /// @notice Sets `defaultMaxGasForMatching`.\\n    /// @param _defaultMaxGasForMatching The new `defaultMaxGasForMatching`.\\n    function setDefaultMaxGasForMatching(Types.MaxGasForMatching memory _defaultMaxGasForMatching)\\n        external\\n        onlyOwner\\n    {\\n        defaultMaxGasForMatching = _defaultMaxGasForMatching;\\n        emit DefaultMaxGasForMatchingSet(_defaultMaxGasForMatching);\\n    }\\n\\n    /// @notice Sets the `positionsManager`.\\n    /// @param _positionsManager The new `positionsManager`.\\n    function setPositionsManager(IPositionsManager _positionsManager) external onlyOwner {\\n        positionsManager = _positionsManager;\\n        emit PositionsManagerSet(address(_positionsManager));\\n    }\\n\\n    /// @notice Sets the `rewardsManager`.\\n    /// @param _rewardsManager The new `rewardsManager`.\\n    function setRewardsManager(IRewardsManager _rewardsManager) external onlyOwner {\\n        rewardsManager = _rewardsManager;\\n        emit RewardsManagerSet(address(_rewardsManager));\\n    }\\n\\n    /// @notice Sets the `interestRatesManager`.\\n    /// @param _interestRatesManager The new `interestRatesManager` contract.\\n    function setInterestRates(IInterestRatesManager _interestRatesManager) external onlyOwner {\\n        interestRatesManager = _interestRatesManager;\\n        emit InterestRatesSet(address(_interestRatesManager));\\n    }\\n\\n    /// @notice Sets the `treasuryVault`.\\n    /// @param _treasuryVault The address of the new `treasuryVault`.\\n    function setTreasuryVault(address _treasuryVault) external onlyOwner {\\n        treasuryVault = _treasuryVault;\\n        emit TreasuryVaultSet(_treasuryVault);\\n    }\\n\\n    /// @notice Sets the `incentivesVault`.\\n    /// @param _incentivesVault The new `incentivesVault`.\\n    function setIncentivesVault(IIncentivesVault _incentivesVault) external onlyOwner {\\n        incentivesVault = _incentivesVault;\\n        emit IncentivesVaultSet(address(_incentivesVault));\\n    }\\n\\n    /// @dev Sets `dustThreshold`.\\n    /// @param _dustThreshold The new `dustThreshold`.\\n    function setDustThreshold(uint256 _dustThreshold) external onlyOwner {\\n        dustThreshold = _dustThreshold;\\n        emit DustThresholdSet(_dustThreshold);\\n    }\\n\\n    /// @notice Sets the `reserveFactor`.\\n    /// @param _poolTokenAddress The market on which to set the `_newReserveFactor`.\\n    /// @param _newReserveFactor The proportion of the interest earned by users sent to the DAO, in basis point.\\n    function setReserveFactor(address _poolTokenAddress, uint16 _newReserveFactor)\\n        external\\n        onlyOwner\\n        isMarketCreated(_poolTokenAddress)\\n    {\\n        if (_newReserveFactor > MAX_BASIS_POINTS) revert ExceedsMaxBasisPoints();\\n        _updateP2PIndexes(_poolTokenAddress);\\n\\n        marketParameters[_poolTokenAddress].reserveFactor = _newReserveFactor;\\n        emit ReserveFactorSet(_poolTokenAddress, _newReserveFactor);\\n    }\\n\\n    /// @notice Sets a new peer-to-peer cursor.\\n    /// @param _poolTokenAddress The address of the market to update.\\n    /// @param _p2pIndexCursor The new peer-to-peer cursor.\\n    function setP2PIndexCursor(address _poolTokenAddress, uint16 _p2pIndexCursor)\\n        external\\n        onlyOwner\\n        isMarketCreated(_poolTokenAddress)\\n    {\\n        if (_p2pIndexCursor > MAX_BASIS_POINTS) revert ExceedsMaxBasisPoints();\\n        _updateP2PIndexes(_poolTokenAddress);\\n\\n        marketParameters[_poolTokenAddress].p2pIndexCursor = _p2pIndexCursor;\\n        emit P2PIndexCursorSet(_poolTokenAddress, _p2pIndexCursor);\\n    }\\n\\n    /// @notice Sets the pause status on a specific market in case of emergency.\\n    /// @param _poolTokenAddress The address of the market to pause/unpause.\\n    /// @param _newStatus The new status to set.\\n    function setPauseStatus(address _poolTokenAddress, bool _newStatus)\\n        external\\n        onlyOwner\\n        isMarketCreated(_poolTokenAddress)\\n    {\\n        marketStatus[_poolTokenAddress].isPaused = _newStatus;\\n        emit PauseStatusSet(_poolTokenAddress, _newStatus);\\n    }\\n\\n    /// @notice Sets the partial pause status on a specific market in case of emergency.\\n    /// @param _poolTokenAddress The address of the market to partially pause/unpause.\\n    /// @param _newStatus The new status to set.\\n    function setPartialPauseStatus(address _poolTokenAddress, bool _newStatus)\\n        external\\n        onlyOwner\\n        isMarketCreated(_poolTokenAddress)\\n    {\\n        marketStatus[_poolTokenAddress].isPartiallyPaused = _newStatus;\\n        emit PartialPauseStatusSet(_poolTokenAddress, _newStatus);\\n    }\\n\\n    /// @notice Sets the peer-to-peer disable status.\\n    /// @param _poolTokenAddress The address of the market to able/disable P2P.\\n    /// @param _newStatus The new status to set.\\n    function setP2PDisable(address _poolTokenAddress, bool _newStatus)\\n        external\\n        onlyOwner\\n        isMarketCreated(_poolTokenAddress)\\n    {\\n        p2pDisabled[_poolTokenAddress] = _newStatus;\\n        emit P2PStatusSet(_poolTokenAddress, _newStatus);\\n    }\\n\\n    /// @notice Transfers the protocol reserve fee to the DAO.\\n    /// @dev No more than 90% of the accumulated fees are claimable at once.\\n    /// @param _poolTokenAddress The address of the market on which to claim the reserve fee.\\n    /// @param _amount The amount of underlying to claim.\\n    function claimToTreasury(address _poolTokenAddress, uint256 _amount)\\n        external\\n        onlyOwner\\n        isMarketCreatedAndNotPaused(_poolTokenAddress)\\n    {\\n        if (treasuryVault == address(0)) revert ZeroAddress();\\n\\n        ERC20 underlyingToken = _getUnderlying(_poolTokenAddress);\\n        uint256 underlyingBalance = underlyingToken.balanceOf(address(this));\\n\\n        if (underlyingBalance == 0) revert AmountIsZero();\\n\\n        uint256 amountToClaim = Math.min(\\n            _amount,\\n            (underlyingBalance * MAX_CLAIMABLE_RESERVE) / MAX_BASIS_POINTS\\n        );\\n\\n        underlyingToken.safeTransfer(treasuryVault, amountToClaim);\\n        emit ReserveFeeClaimed(_poolTokenAddress, amountToClaim);\\n    }\\n\\n    /// @notice Creates a new market to borrow/supply in.\\n    /// @param _poolTokenAddress The pool token address of the given market.\\n    /// @param _marketParams The market's parameters to set.\\n    function createMarket(address _poolTokenAddress, Types.MarketParameters calldata _marketParams)\\n        external\\n        onlyOwner\\n    {\\n        if (\\n            _marketParams.p2pIndexCursor > MAX_BASIS_POINTS ||\\n            _marketParams.reserveFactor > MAX_BASIS_POINTS\\n        ) revert ExceedsMaxBasisPoints();\\n\\n        if (marketStatus[_poolTokenAddress].isCreated) revert MarketAlreadyCreated();\\n        marketStatus[_poolTokenAddress].isCreated = true;\\n\\n        address[] memory marketToEnter = new address[](1);\\n        marketToEnter[0] = _poolTokenAddress;\\n        uint256[] memory results = comptroller.enterMarkets(marketToEnter);\\n        if (results[0] != 0) revert MarketCreationFailedOnCompound();\\n\\n        ICToken poolToken = ICToken(_poolTokenAddress);\\n\\n        // Same initial index as Compound.\\n        uint256 initialIndex;\\n        if (_poolTokenAddress == cEth) initialIndex = 2e26;\\n        else initialIndex = 2 * 10**(16 + ERC20(poolToken.underlying()).decimals() - 8);\\n        p2pSupplyIndex[_poolTokenAddress] = initialIndex;\\n        p2pBorrowIndex[_poolTokenAddress] = initialIndex;\\n\\n        Types.LastPoolIndexes storage poolIndexes = lastPoolIndexes[_poolTokenAddress];\\n\\n        poolIndexes.lastUpdateBlockNumber = uint32(block.number);\\n        poolIndexes.lastSupplyPoolIndex = uint112(poolToken.exchangeRateCurrent());\\n        poolIndexes.lastBorrowPoolIndex = uint112(poolToken.borrowIndex());\\n\\n        marketParameters[_poolTokenAddress] = _marketParams;\\n\\n        marketsCreated.push(_poolTokenAddress);\\n        emit MarketCreated(\\n            _poolTokenAddress,\\n            _marketParams.reserveFactor,\\n            _marketParams.p2pIndexCursor\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/MorphoUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./libraries/CompoundMath.sol\\\";\\nimport \\\"../common/libraries/DelegateCall.sol\\\";\\n\\nimport \\\"./MorphoStorage.sol\\\";\\n\\n/// @title MorphoUtils.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Modifiers, getters and other util functions for Morpho.\\nabstract contract MorphoUtils is MorphoStorage {\\n    using DoubleLinkedList for DoubleLinkedList.List;\\n    using CompoundMath for uint256;\\n    using DelegateCall for address;\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when the Compound's oracle failed.\\n    error CompoundOracleFailed();\\n\\n    /// @notice Thrown when the market is not created yet.\\n    error MarketNotCreated();\\n\\n    /// @notice Thrown when the market is paused.\\n    error MarketPaused();\\n\\n    /// MODIFIERS ///\\n\\n    /// @notice Prevents to update a market not created yet.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    modifier isMarketCreated(address _poolTokenAddress) {\\n        if (!marketStatus[_poolTokenAddress].isCreated) revert MarketNotCreated();\\n        _;\\n    }\\n\\n    /// @notice Prevents a user to trigger a function when market is not created or paused.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    modifier isMarketCreatedAndNotPaused(address _poolTokenAddress) {\\n        Types.MarketStatus memory marketStatus_ = marketStatus[_poolTokenAddress];\\n        if (!marketStatus_.isCreated) revert MarketNotCreated();\\n        if (marketStatus_.isPaused) revert MarketPaused();\\n        _;\\n    }\\n\\n    /// @notice Prevents a user to trigger a function when market is not created or paused or partial paused.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    modifier isMarketCreatedAndNotPausedNorPartiallyPaused(address _poolTokenAddress) {\\n        Types.MarketStatus memory marketStatus_ = marketStatus[_poolTokenAddress];\\n        if (!marketStatus_.isCreated) revert MarketNotCreated();\\n        if (marketStatus_.isPaused || marketStatus_.isPartiallyPaused) revert MarketPaused();\\n        _;\\n    }\\n\\n    /// EXTERNAL ///\\n\\n    /// @notice Returns all markets entered by a given user.\\n    /// @param _user The address of the user.\\n    /// @return enteredMarkets_ The list of markets entered by this user.\\n    function getEnteredMarkets(address _user)\\n        external\\n        view\\n        returns (address[] memory enteredMarkets_)\\n    {\\n        return enteredMarkets[_user];\\n    }\\n\\n    /// @notice Returns all created markets.\\n    /// @return marketsCreated_ The list of market addresses.\\n    function getAllMarkets() external view returns (address[] memory marketsCreated_) {\\n        return marketsCreated;\\n    }\\n\\n    /// @notice Gets the head of the data structure on a specific market (for UI).\\n    /// @param _poolTokenAddress The address of the market from which to get the head.\\n    /// @param _positionType The type of user from which to get the head.\\n    /// @return head The head in the data structure.\\n    function getHead(address _poolTokenAddress, Types.PositionType _positionType)\\n        external\\n        view\\n        returns (address head)\\n    {\\n        if (_positionType == Types.PositionType.SUPPLIERS_IN_P2P)\\n            head = suppliersInP2P[_poolTokenAddress].getHead();\\n        else if (_positionType == Types.PositionType.SUPPLIERS_ON_POOL)\\n            head = suppliersOnPool[_poolTokenAddress].getHead();\\n        else if (_positionType == Types.PositionType.BORROWERS_IN_P2P)\\n            head = borrowersInP2P[_poolTokenAddress].getHead();\\n        else if (_positionType == Types.PositionType.BORROWERS_ON_POOL)\\n            head = borrowersOnPool[_poolTokenAddress].getHead();\\n    }\\n\\n    /// @notice Gets the next user after `_user` in the data structure on a specific market (for UI).\\n    /// @param _poolTokenAddress The address of the market from which to get the user.\\n    /// @param _positionType The type of user from which to get the next user.\\n    /// @param _user The address of the user from which to get the next user.\\n    /// @return next The next user in the data structure.\\n    function getNext(\\n        address _poolTokenAddress,\\n        Types.PositionType _positionType,\\n        address _user\\n    ) external view returns (address next) {\\n        if (_positionType == Types.PositionType.SUPPLIERS_IN_P2P)\\n            next = suppliersInP2P[_poolTokenAddress].getNext(_user);\\n        else if (_positionType == Types.PositionType.SUPPLIERS_ON_POOL)\\n            next = suppliersOnPool[_poolTokenAddress].getNext(_user);\\n        else if (_positionType == Types.PositionType.BORROWERS_IN_P2P)\\n            next = borrowersInP2P[_poolTokenAddress].getNext(_user);\\n        else if (_positionType == Types.PositionType.BORROWERS_ON_POOL)\\n            next = borrowersOnPool[_poolTokenAddress].getNext(_user);\\n    }\\n\\n    /// @notice Updates the peer-to-peer indexes.\\n    /// @dev Note: This function updates the exchange rate on Compound. As a consequence only a call to exchangeRatesStored() is necessary to get the most up to date exchange rate.\\n    /// @param _poolTokenAddress The address of the market to update.\\n    function updateP2PIndexes(address _poolTokenAddress)\\n        external\\n        isMarketCreated(_poolTokenAddress)\\n    {\\n        _updateP2PIndexes(_poolTokenAddress);\\n    }\\n\\n    /// INTERNAL ///\\n\\n    /// @dev Updates the peer-to-peer indexes.\\n    /// @dev Note: This function updates the exchange rate on Compound. As a consequence only a call to exchangeRatesStored() is necessary to get the most up to date exchange rate.\\n    /// @param _poolTokenAddress The address of the market to update.\\n    function _updateP2PIndexes(address _poolTokenAddress) internal {\\n        address(interestRatesManager).functionDelegateCall(\\n            abi.encodeWithSelector(\\n                interestRatesManager.updateP2PIndexes.selector,\\n                _poolTokenAddress\\n            )\\n        );\\n    }\\n\\n    /// @dev Checks whether the user has enough collateral to maintain such a borrow position.\\n    /// @param _user The user to check.\\n    /// @param _poolTokenAddress The market to hypothetically withdraw/borrow in.\\n    /// @param _withdrawnAmount The amount of tokens to hypothetically withdraw (in underlying).\\n    /// @param _borrowedAmount The amount of tokens to hypothetically borrow (in underlying).\\n    function _isLiquidatable(\\n        address _user,\\n        address _poolTokenAddress,\\n        uint256 _withdrawnAmount,\\n        uint256 _borrowedAmount\\n    ) internal view returns (bool) {\\n        ICompoundOracle oracle = ICompoundOracle(comptroller.oracle());\\n        uint256 numberOfEnteredMarkets = enteredMarkets[_user].length;\\n\\n        Types.AssetLiquidityData memory assetData;\\n        uint256 maxDebtValue;\\n        uint256 debtValue;\\n        uint256 i;\\n\\n        while (i < numberOfEnteredMarkets) {\\n            address poolTokenEntered = enteredMarkets[_user][i];\\n\\n            assetData = _getUserLiquidityDataForAsset(_user, poolTokenEntered, oracle);\\n            maxDebtValue += assetData.maxDebtValue;\\n            debtValue += assetData.debtValue;\\n\\n            if (_poolTokenAddress == poolTokenEntered) {\\n                if (_borrowedAmount > 0)\\n                    debtValue += _borrowedAmount.mul(assetData.underlyingPrice);\\n\\n                if (_withdrawnAmount > 0)\\n                    maxDebtValue -= _withdrawnAmount.mul(assetData.underlyingPrice).mul(\\n                        assetData.collateralFactor\\n                    );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return debtValue > maxDebtValue;\\n    }\\n\\n    /// @notice Returns the data related to `_poolTokenAddress` for the `_user`.\\n    /// @dev Note: Must be called after calling `_updateP2PIndexes()` to have the most up-to-date indexes.\\n    /// @param _user The user to determine data for.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _oracle The oracle used.\\n    /// @return assetData The data related to this asset.\\n    function _getUserLiquidityDataForAsset(\\n        address _user,\\n        address _poolTokenAddress,\\n        ICompoundOracle _oracle\\n    ) internal view returns (Types.AssetLiquidityData memory assetData) {\\n        assetData.underlyingPrice = _oracle.getUnderlyingPrice(_poolTokenAddress);\\n        if (assetData.underlyingPrice == 0) revert CompoundOracleFailed();\\n        (, assetData.collateralFactor, ) = comptroller.markets(_poolTokenAddress);\\n\\n        assetData.collateralValue = _getUserSupplyBalanceInOf(_poolTokenAddress, _user).mul(\\n            assetData.underlyingPrice\\n        );\\n        assetData.debtValue = _getUserBorrowBalanceInOf(_poolTokenAddress, _user).mul(\\n            assetData.underlyingPrice\\n        );\\n        assetData.maxDebtValue = assetData.collateralValue.mul(assetData.collateralFactor);\\n    }\\n\\n    /// @dev Returns the supply balance of `_user` in the `_poolTokenAddress` market.\\n    /// @dev Note: Compute the result with the index stored and not the most up to date one.\\n    /// @param _user The address of the user.\\n    /// @param _poolTokenAddress The market where to get the supply amount.\\n    /// @return The supply balance of the user (in underlying).\\n    function _getUserSupplyBalanceInOf(address _poolTokenAddress, address _user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            supplyBalanceInOf[_poolTokenAddress][_user].inP2P.mul(\\n                p2pSupplyIndex[_poolTokenAddress]\\n            ) +\\n            supplyBalanceInOf[_poolTokenAddress][_user].onPool.mul(\\n                ICToken(_poolTokenAddress).exchangeRateStored()\\n            );\\n    }\\n\\n    /// @dev Returns the borrow balance of `_user` in the `_poolTokenAddress` market.\\n    /// @param _user The address of the user.\\n    /// @param _poolTokenAddress The market where to get the borrow amount.\\n    /// @return The borrow balance of the user (in underlying).\\n    function _getUserBorrowBalanceInOf(address _poolTokenAddress, address _user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            borrowBalanceInOf[_poolTokenAddress][_user].inP2P.mul(\\n                p2pBorrowIndex[_poolTokenAddress]\\n            ) +\\n            borrowBalanceInOf[_poolTokenAddress][_user].onPool.mul(\\n                ICToken(_poolTokenAddress).borrowIndex()\\n            );\\n    }\\n\\n    /// @dev Returns the underlying ERC20 token related to the pool token.\\n    /// @param _poolTokenAddress The address of the pool token.\\n    /// @return The underlying ERC20 token.\\n    function _getUnderlying(address _poolTokenAddress) internal view returns (ERC20) {\\n        if (_poolTokenAddress == cEth)\\n            // cETH has no underlying() function.\\n            return ERC20(wEth);\\n        else return ERC20(ICToken(_poolTokenAddress).underlying());\\n    }\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/CompoundMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title CompoundMath.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Library emulating in solidity 8+ the behavior of Compound's mulScalarTruncate and divScalarByExpTruncate functions.\\nlibrary CompoundMath {\\n    /// ERRORS ///\\n\\n    /// @notice Reverts when the number exceeds 224 bits.\\n    error NumberExceeds224Bits();\\n\\n    /// @notice Reverts when the number exceeds 32 bits.\\n    error NumberExceeds32Bits();\\n\\n    /// INTERNAL ///\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y) / 1e18;\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((1e18 * x * 1e18) / y) / 1e18;\\n    }\\n\\n    function safe224(uint256 n) internal pure returns (uint224) {\\n        if (n >= 2**224) revert NumberExceeds224Bits();\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        if (n >= 2**32) revert NumberExceeds32Bits();\\n        return uint32(n);\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256) {\\n        return a < b ? a < c ? a : c : b < c ? b : c;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a - b : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/libraries/DelegateCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title Delegate Call Library.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Library to perform delegate calls inspired by the OZ Address library: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol.\\nlibrary DelegateCall {\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when a low delegate call has failed without error message.\\n    error LowLevelDelegateCallFailed();\\n\\n    /// INTERNAL ///\\n\\n    /// @dev Performs a low-level delegate call to the `_target` contract.\\n    /// @dev Note: Unlike the OZ's library this function does not check if the `_target` is a contract. It is the responsibility of the caller to ensure that the `_target` is a contract.\\n    /// @param _target The address of the target contract.\\n    /// @param _data The data to pass to the function called on the target contract.\\n    /// @return The return data from the function called on the target contract.\\n    function functionDelegateCall(address _target, bytes memory _data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory returndata) = _target.delegatecall(_data);\\n        if (success) return returndata;\\n        else {\\n            // Look for revert reason and bubble it up if present.\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly.\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else revert LowLevelDelegateCallFailed();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/MorphoStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IPositionsManager.sol\\\";\\nimport \\\"./interfaces/IIncentivesVault.sol\\\";\\nimport \\\"./interfaces/IRewardsManager.sol\\\";\\nimport \\\"./interfaces/IInterestRatesManager.sol\\\";\\n\\nimport \\\"../common/libraries/DoubleLinkedList.sol\\\";\\nimport \\\"./libraries/Types.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/// @title MorphoStorage.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice All storage variables used in Morpho contracts.\\nabstract contract MorphoStorage is OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    /// GLOBAL STORAGE ///\\n\\n    uint8 public constant CTOKEN_DECIMALS = 8; // The number of decimals for cToken.\\n    uint16 public constant MAX_BASIS_POINTS = 10_000; // 100% in basis points.\\n    uint16 public constant MAX_CLAIMABLE_RESERVE = 9_000; // The max proportion of reserve fee claimable by the DAO at once (90% in basis points).\\n    uint256 public constant WAD = 1e18;\\n\\n    uint256 public maxSortedUsers; // The max number of users to sort in the data structure.\\n    uint256 public dustThreshold; // The minimum amount to keep in the data structure.\\n    Types.MaxGasForMatching public defaultMaxGasForMatching; // The default max gas to consume within loops in matching engine functions.\\n\\n    /// POSITIONS STORAGE ///\\n\\n    mapping(address => DoubleLinkedList.List) internal suppliersInP2P; // For a given market, the suppliers in peer-to-peer.\\n    mapping(address => DoubleLinkedList.List) internal suppliersOnPool; // For a given market, the suppliers on Compound.\\n    mapping(address => DoubleLinkedList.List) internal borrowersInP2P; // For a given market, the borrowers in peer-to-peer.\\n    mapping(address => DoubleLinkedList.List) internal borrowersOnPool; // For a given market, the borrowers on Compound.\\n    mapping(address => mapping(address => Types.SupplyBalance)) public supplyBalanceInOf; // For a given market, the supply balance of a user. cToken -> user -> balances.\\n    mapping(address => mapping(address => Types.BorrowBalance)) public borrowBalanceInOf; // For a given market, the borrow balance of a user. cToken -> user -> balances.\\n    mapping(address => mapping(address => bool)) public userMembership; // Whether the user is in the market or not. cToken -> user -> bool.\\n    mapping(address => address[]) public enteredMarkets; // The markets entered by a user. user -> cTokens.\\n\\n    /// MARKETS STORAGE ///\\n\\n    address[] public marketsCreated; // Keeps track of the created markets.\\n    mapping(address => bool) public p2pDisabled; // Whether the peer-to-peer market is open or not.\\n    mapping(address => uint256) public p2pSupplyIndex; // Current index from supply peer-to-peer unit to underlying (in wad).\\n    mapping(address => uint256) public p2pBorrowIndex; // Current index from borrow peer-to-peer unit to underlying (in wad).\\n    mapping(address => Types.LastPoolIndexes) public lastPoolIndexes; // Last pool index stored.\\n    mapping(address => Types.MarketParameters) public marketParameters; // Market parameters.\\n    mapping(address => Types.MarketStatus) public marketStatus; // Market status.\\n    mapping(address => Types.Delta) public deltas; // Delta parameters for each market.\\n\\n    /// CONTRACTS AND ADDRESSES ///\\n\\n    IPositionsManager public positionsManager;\\n    IIncentivesVault public incentivesVault;\\n    IRewardsManager public rewardsManager;\\n    IInterestRatesManager public interestRatesManager;\\n    IComptroller public comptroller;\\n    address public treasuryVault;\\n    address public cEth;\\n    address public wEth;\\n\\n    /// APPENDIX STORAGE ///\\n\\n    mapping(address => uint256) public lastBorrowBlock; // Block number of the last borrow of the user.\\n\\n    /// CONSTRUCTOR ///\\n\\n    /// @notice Constructs the contract.\\n    /// @dev The contract is automatically marked as initialized when deployed so that nobody can highjack the implementation contract.\\n    constructor() initializer {}\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/compound/ICompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface ICEth {\\n    function accrueInterest() external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external returns (uint256);\\n\\n    function borrowBalanceStored(address) external returns (uint256);\\n\\n    function mint() external payable;\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n\\n    function redeem(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external returns (uint256);\\n\\n    function balanceOfUnderlying(address account) external returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow() external payable;\\n\\n    function borrowBalanceCurrent(address) external returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n}\\n\\ninterface IComptroller {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n    function closeFactorMantissa() external view returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function getAccountLiquidity(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getHypotheticalAccountLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function checkMembership(address, address) external view returns (bool);\\n\\n    function claimComp(address holder) external;\\n\\n    function claimComp(address holder, address[] memory cTokens) external;\\n\\n    function compSpeeds(address) external view returns (uint256);\\n\\n    function compSupplySpeeds(address) external view returns (uint256);\\n\\n    function compBorrowSpeeds(address) external view returns (uint256);\\n\\n    function compSupplyState(address) external view returns (CompMarketState memory);\\n\\n    function compBorrowState(address) external view returns (CompMarketState memory);\\n\\n    function getCompAddress() external view returns (address);\\n\\n    function _setPriceOracle(address newOracle) external returns (uint256);\\n}\\n\\ninterface IInterestRateModel {\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\\ninterface ICToken {\\n    function isCToken() external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow(uint256) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        address cTokenCollateral\\n    ) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function mint(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function accrualBlockNumber() external view returns (uint256);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function interestRateModel() external view returns (IInterestRateModel);\\n\\n    function reserveFactorMantissa() external view returns (uint256);\\n\\n    function initialExchangeRateMantissa() external view returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n    function _acceptAdmin() external returns (uint256);\\n\\n    function _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setInterestRateModel(IInterestRateModel newInterestRateModel)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface ICEther is ICToken {\\n    function mint() external payable;\\n\\n    function repayBorrow() external payable;\\n}\\n\\ninterface ICompoundOracle {\\n    function getUnderlyingPrice(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IPositionsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IPositionsManager {\\n    function supplyLogic(\\n        address _poolTokenAddress,\\n        address _supplier,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function borrowLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function withdrawLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        address _supplier,\\n        address _receiver,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function repayLogic(\\n        address _poolTokenAddress,\\n        address _repayer,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function liquidateLogic(\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address _borrower,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IIncentivesVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IIncentivesVault {\\n    function setOracle(IOracle _newOracle) external;\\n\\n    function setMorphoDao(address _newMorphoDao) external;\\n\\n    function setBonus(uint256 _newBonus) external;\\n\\n    function setPauseStatus(bool _newStatus) external;\\n\\n    function transferMorphoTokensToDao(uint256 _amount) external;\\n\\n    function tradeCompForMorphoTokens(address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IRewardsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./compound/ICompound.sol\\\";\\n\\ninterface IRewardsManager {\\n    function claimRewards(address[] calldata, address) external returns (uint256);\\n\\n    function accrueUserUnclaimedRewards(address[] calldata _cTokenAddresses, address)\\n        external\\n        returns (uint256);\\n\\n    function userUnclaimedCompRewards(address) external view returns (uint256);\\n\\n    function getUserUnclaimedRewards(address[] calldata _cTokenAddresses, address _user)\\n        external\\n        returns (uint256 unclaimedRewards);\\n\\n    function compSupplierIndex(address, address) external view returns (uint256);\\n\\n    function compBorrowerIndex(address, address) external view returns (uint256);\\n\\n    function getLocalCompSupplyState(address)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function getLocalCompBorrowState(address)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function getUpdatedSupplyIndex(address) external view returns (uint256);\\n\\n    function getUpdatedBorrowIndex(address) external view returns (uint256);\\n\\n    function accrueUserSupplyUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function accrueUserBorrowUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IInterestRatesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IInterestRatesManager {\\n    function updateP2PIndexes(address _marketAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/libraries/DoubleLinkedList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title Double Linked List.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Modified double linked list with capped sorting insertion.\\nlibrary DoubleLinkedList {\\n    /// STRUCTS ///\\n\\n    struct Account {\\n        address prev;\\n        address next;\\n        uint256 value;\\n    }\\n\\n    struct List {\\n        mapping(address => Account) accounts;\\n        address head;\\n        address tail;\\n    }\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when the account is already inserted in the double linked list.\\n    error AccountAlreadyInserted();\\n\\n    /// @notice Thrown when the account to remove does not exist.\\n    error AccountDoesNotExist();\\n\\n    /// @notice Thrown when the address is zero at insertion.\\n    error AddressIsZero();\\n\\n    /// @notice Thrown when the value is zero at insertion.\\n    error ValueIsZero();\\n\\n    /// INTERNAL ///\\n\\n    /// @notice Returns the `account` linked to `_id`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @return The value of the account.\\n    function getValueOf(List storage _list, address _id) internal view returns (uint256) {\\n        return _list.accounts[_id].value;\\n    }\\n\\n    /// @notice Returns the address at the head of the `_list`.\\n    /// @param _list The list to get the head.\\n    /// @return The address of the head.\\n    function getHead(List storage _list) internal view returns (address) {\\n        return _list.head;\\n    }\\n\\n    /// @notice Returns the address at the tail of the `_list`.\\n    /// @param _list The list to get the tail.\\n    /// @return The address of the tail.\\n    function getTail(List storage _list) internal view returns (address) {\\n        return _list.tail;\\n    }\\n\\n    /// @notice Returns the next id address from the current `_id`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @return The address of the next account.\\n    function getNext(List storage _list, address _id) internal view returns (address) {\\n        return _list.accounts[_id].next;\\n    }\\n\\n    /// @notice Returns the previous id address from the current `_id`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @return The address of the previous account.\\n    function getPrev(List storage _list, address _id) internal view returns (address) {\\n        return _list.accounts[_id].prev;\\n    }\\n\\n    /// @notice Removes an account of the `_list`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    function remove(List storage _list, address _id) internal {\\n        if (_list.accounts[_id].value == 0) revert AccountDoesNotExist();\\n        Account memory account = _list.accounts[_id];\\n\\n        if (account.prev != address(0)) _list.accounts[account.prev].next = account.next;\\n        else _list.head = account.next;\\n        if (account.next != address(0)) _list.accounts[account.next].prev = account.prev;\\n        else _list.tail = account.prev;\\n\\n        delete _list.accounts[_id];\\n    }\\n\\n    /// @notice Inserts an account in the `_list` at the right slot based on its `_value`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @param _value The value of the account.\\n    /// @param _maxIterations The max number of iterations.\\n    function insertSorted(\\n        List storage _list,\\n        address _id,\\n        uint256 _value,\\n        uint256 _maxIterations\\n    ) internal {\\n        if (_value == 0) revert ValueIsZero();\\n        if (_id == address(0)) revert AddressIsZero();\\n        if (_list.accounts[_id].value != 0) revert AccountAlreadyInserted();\\n\\n        uint256 numberOfIterations;\\n        address next = _list.head; // If not added at the end of the list `_id` will be inserted before `next`.\\n\\n        while (\\n            numberOfIterations < _maxIterations &&\\n            next != _list.tail &&\\n            _list.accounts[next].value >= _value\\n        ) {\\n            next = _list.accounts[next].next;\\n            unchecked {\\n                ++numberOfIterations;\\n            }\\n        }\\n\\n        // Account is not the new tail.\\n        if (next != address(0) && _list.accounts[next].value < _value) {\\n            // Account is the new head.\\n            if (next == _list.head) {\\n                _list.accounts[_id] = Account(address(0), next, _value);\\n                _list.head = _id;\\n                _list.accounts[next].prev = _id;\\n            }\\n            // Account is not the new head.\\n            else {\\n                _list.accounts[_id] = Account(_list.accounts[next].prev, next, _value);\\n                _list.accounts[_list.accounts[next].prev].next = _id;\\n                _list.accounts[next].prev = _id;\\n            }\\n        }\\n        // Account is the new tail.\\n        else {\\n            // Account is the new head.\\n            if (_list.head == address(0)) {\\n                _list.accounts[_id] = Account(address(0), address(0), _value);\\n                _list.head = _id;\\n                _list.tail = _id;\\n            }\\n            // Account is not the new head.\\n            else {\\n                _list.accounts[_id] = Account(_list.tail, address(0), _value);\\n                _list.accounts[_list.tail].next = _id;\\n                _list.tail = _id;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title Types.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Common types and structs used in Moprho contracts.\\nlibrary Types {\\n    /// ENUMS ///\\n\\n    enum PositionType {\\n        SUPPLIERS_IN_P2P,\\n        SUPPLIERS_ON_POOL,\\n        BORROWERS_IN_P2P,\\n        BORROWERS_ON_POOL\\n    }\\n\\n    /// STRUCTS ///\\n\\n    struct SupplyBalance {\\n        uint256 inP2P; // In supplier's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests earned by suppliers in peer-to-peer. Multiply by the peer-to-peer supply index to get the underlying amount.\\n        uint256 onPool; // In cToken. Multiply by the pool supply index to get the underlying amount.\\n    }\\n\\n    struct BorrowBalance {\\n        uint256 inP2P; // In borrower's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests paid by borrowers in peer-to-peer. Multiply by the peer-to-peer borrow index to get the underlying amount.\\n        uint256 onPool; // In cdUnit, a unit that grows in value, to keep track of the debt increase when borrowers are on Compound. Multiply by the pool borrow index to get the underlying amount.\\n    }\\n\\n    // Max gas to consume during the matching process for supply, borrow, withdraw and repay functions.\\n    struct MaxGasForMatching {\\n        uint64 supply;\\n        uint64 borrow;\\n        uint64 withdraw;\\n        uint64 repay;\\n    }\\n\\n    struct Delta {\\n        uint256 p2pSupplyDelta; // Difference between the stored peer-to-peer supply amount and the real peer-to-peer supply amount (in cToken).\\n        uint256 p2pBorrowDelta; // Difference between the stored peer-to-peer borrow amount and the real peer-to-peer borrow amount (in cdUnit).\\n        uint256 p2pSupplyAmount; // Sum of all stored peer-to-peer supply (in peer-to-peer unit).\\n        uint256 p2pBorrowAmount; // Sum of all stored peer-to-peer borrow (in peer-to-peer unit).\\n    }\\n\\n    struct AssetLiquidityData {\\n        uint256 collateralValue; // The collateral value of the asset.\\n        uint256 maxDebtValue; // The maximum possible debt value of the asset.\\n        uint256 debtValue; // The debt value of the asset.\\n        uint256 underlyingPrice; // The price of the token.\\n        uint256 collateralFactor; // The liquidation threshold applied on this token.\\n    }\\n\\n    struct LiquidityData {\\n        uint256 collateralValue; // The collateral value.\\n        uint256 maxDebtValue; // The maximum debt value possible.\\n        uint256 debtValue; // The debt value.\\n    }\\n\\n    // Variables are packed together to save gas (will not exceed their limit during Morpho's lifetime).\\n    struct LastPoolIndexes {\\n        uint32 lastUpdateBlockNumber; // The last time the peer-to-peer indexes were updated.\\n        uint112 lastSupplyPoolIndex; // Last pool supply index.\\n        uint112 lastBorrowPoolIndex; // Last pool borrow index.\\n    }\\n\\n    struct MarketParameters {\\n        uint16 reserveFactor; // Proportion of the interest earned by users sent to the DAO for each market, in basis point (100% = 10 000). The value is set at market creation.\\n        uint16 p2pIndexCursor; // Position of the peer-to-peer rate in the pool's spread. Determine the weights of the weighted arithmetic average in the indexes computations ((1 - p2pIndexCursor) * r^S + p2pIndexCursor * r^B) (in basis point).\\n    }\\n\\n    struct MarketStatus {\\n        bool isCreated; // Whether or not this market is created.\\n        bool isPaused; // Whether the market is paused or not (all entry points on Morpho are frozen; supply, borrow, withdraw, repay and liquidate).\\n        bool isPartiallyPaused; // Whether the market is partially paused or not (only supply and borrow are frozen).\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IOracle {\\n    function consult(uint256 _amountIn) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CompoundOracleFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxBasisPoints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LowLevelDelegateCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketCreationFailedOnCompound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketNotCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"supply\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"borrow\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdraw\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"repay\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Types.MaxGasForMatching\",\"name\":\"_defaultMaxGasForMatching\",\"type\":\"tuple\"}],\"name\":\"DefaultMaxGasForMatchingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dustThreshold\",\"type\":\"uint256\"}],\"name\":\"DustThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newIncentivesVaultAddress\",\"type\":\"address\"}],\"name\":\"IncentivesVaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_interestRatesManager\",\"type\":\"address\"}],\"name\":\"InterestRatesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_reserveFactor\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_p2pIndexCursor\",\"type\":\"uint16\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"MaxSortedUsersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_newValue\",\"type\":\"uint16\"}],\"name\":\"P2PIndexCursorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_p2pDisabled\",\"type\":\"bool\"}],\"name\":\"P2PStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"PartialPauseStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"PauseStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_positionsManager\",\"type\":\"address\"}],\"name\":\"PositionsManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_newValue\",\"type\":\"uint16\"}],\"name\":\"ReserveFactorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountClaimed\",\"type\":\"uint256\"}],\"name\":\"ReserveFeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountClaimed\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountSent\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimedAndTraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newRewardsManagerAddress\",\"type\":\"address\"}],\"name\":\"RewardsManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newTreasuryVaultAddress\",\"type\":\"address\"}],\"name\":\"TreasuryVaultSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CTOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CLAIMABLE_RESERVE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasForMatching\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowBalanceInOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_tradeForMorphoToken\",\"type\":\"bool\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"reserveFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"p2pIndexCursor\",\"type\":\"uint16\"}],\"internalType\":\"struct Types.MarketParameters\",\"name\":\"_marketParams\",\"type\":\"tuple\"}],\"name\":\"createMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMaxGasForMatching\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"supply\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"borrow\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdraw\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"repay\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deltas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"p2pSupplyDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pSupplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dustThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"enteredMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"marketsCreated_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEnteredMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"enteredMarkets_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum Types.PositionType\",\"name\":\"_positionType\",\"type\":\"uint8\"}],\"name\":\"getHead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"head\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum Types.PositionType\",\"name\":\"_positionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesVault\",\"outputs\":[{\"internalType\":\"contract IIncentivesVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPositionsManager\",\"name\":\"_positionsManager\",\"type\":\"address\"},{\"internalType\":\"contract IInterestRatesManager\",\"name\":\"_interestRatesManager\",\"type\":\"address\"},{\"internalType\":\"contract IComptroller\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"supply\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"borrow\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdraw\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"repay\",\"type\":\"uint64\"}],\"internalType\":\"struct Types.MaxGasForMatching\",\"name\":\"_defaultMaxGasForMatching\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_dustThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSortedUsers\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_cEth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wEth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRatesManager\",\"outputs\":[{\"internalType\":\"contract IInterestRatesManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBorrowBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPoolIndexes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"lastUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"lastSupplyPoolIndex\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"lastBorrowPoolIndex\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenBorrowedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenCollateralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketParameters\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"reserveFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"p2pIndexCursor\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCreated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsCreated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSortedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"p2pBorrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"p2pDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"p2pSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionsManager\",\"outputs\":[{\"internalType\":\"contract IPositionsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsManager\",\"outputs\":[{\"internalType\":\"contract IRewardsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"supply\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"borrow\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdraw\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"repay\",\"type\":\"uint64\"}],\"internalType\":\"struct Types.MaxGasForMatching\",\"name\":\"_defaultMaxGasForMatching\",\"type\":\"tuple\"}],\"name\":\"setDefaultMaxGasForMatching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dustThreshold\",\"type\":\"uint256\"}],\"name\":\"setDustThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIncentivesVault\",\"name\":\"_incentivesVault\",\"type\":\"address\"}],\"name\":\"setIncentivesVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInterestRatesManager\",\"name\":\"_interestRatesManager\",\"type\":\"address\"}],\"name\":\"setInterestRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxSortedUsers\",\"type\":\"uint256\"}],\"name\":\"setMaxSortedUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setP2PDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_p2pIndexCursor\",\"type\":\"uint16\"}],\"name\":\"setP2PIndexCursor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setPartialPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPositionsManager\",\"name\":\"_positionsManager\",\"type\":\"address\"}],\"name\":\"setPositionsManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_newReserveFactor\",\"type\":\"uint16\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsManager\",\"name\":\"_rewardsManager\",\"type\":\"address\"}],\"name\":\"setRewardsManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryVault\",\"type\":\"address\"}],\"name\":\"setTreasuryVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasForMatching\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyBalanceInOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"updateP2PIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Morpho", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}