{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.21;\r\n\r\ncontract owned {\r\n\r\n    address public owner;\r\n\r\n    function owned() public {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyOwner {\r\n\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n\r\n        owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\n\r\n\r\ncontract TokenERC20 {\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public decimals = 18;  // decimals \u53ef\u4ee5\u6709\u7684\u5c0f\u6570\u70b9\u4e2a\u6570\uff0c\u6700\u5c0f\u7684\u4ee3\u5e01\u5355\u4f4d\u300218 \u662f\u5efa\u8bae\u7684\u9ed8\u8ba4\u503c\r\n\r\n    uint256 public totalSupply;\r\n\r\n\r\n\r\n    // \u7528mapping\u4fdd\u5b58\u6bcf\u4e2a\u5730\u5740\u5bf9\u5e94\u7684\u4f59\u989d\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    \r\n\r\n    // \u5b58\u50a8\u5bf9\u8d26\u53f7\u7684\u63a7\u5236\r\n\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\r\n\r\n    // \u4e8b\u4ef6\uff0c\u7528\u6765\u901a\u77e5\u5ba2\u6237\u7aef\u4ea4\u6613\u53d1\u751f\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n    // \u4e8b\u4ef6\uff0c\u7528\u6765\u901a\u77e5\u5ba2\u6237\u7aef\u4ee3\u5e01\u88ab\u6d88\u8d39\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\t\r\n\r\n\t\r\n\r\n    /**\r\n\r\n     * \u521d\u59cb\u5316\u6784\u9020\r\n\r\n     */\r\n\r\n    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // \u4f9b\u5e94\u7684\u4efd\u989d\uff0c\u4efd\u989d\u8ddf\u6700\u5c0f\u7684\u4ee3\u5e01\u5355\u4f4d\u6709\u5173\uff0c\u4efd\u989d = \u5e01\u6570 * 10 ** decimals\u3002\r\n\r\n        balanceOf[msg.sender] = totalSupply;                // \u521b\u5efa\u8005\u62e5\u6709\u6240\u6709\u7684\u4ee3\u5e01\r\n\r\n        name = tokenName;                                   // \u4ee3\u5e01\u540d\u79f0\r\n\r\n        symbol = tokenSymbol;                               // \u4ee3\u5e01\u7b26\u53f7\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * \u4ee3\u5e01\u4ea4\u6613\u8f6c\u79fb\u7684\u5185\u90e8\u5b9e\u73b0\r\n\r\n     */\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\r\n        // \u786e\u4fdd\u76ee\u6807\u5730\u5740\u4e0d\u4e3a0x0\uff0c\u56e0\u4e3a0x0\u5730\u5740\u4ee3\u8868\u9500\u6bc1\r\n\r\n        require(_to != 0x0);\r\n\r\n        // \u68c0\u67e5\u53d1\u9001\u8005\u4f59\u989d\r\n\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        // \u786e\u4fdd\u8f6c\u79fb\u4e3a\u6b63\u6570\u4e2a\r\n\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n\r\n\r\n        // \u4ee5\u4e0b\u7528\u6765\u68c0\u67e5\u4ea4\u6613\uff0c\r\n\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n        // Subtract from the sender\r\n\r\n        balanceOf[_from] -= _value;\r\n\r\n        // Add the same to the recipient\r\n\r\n        balanceOf[_to] += _value;\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n\r\n\r\n        // \u7528assert\u6765\u68c0\u67e5\u4ee3\u7801\u903b\u8f91\u3002\r\n\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     *  \u4ee3\u5e01\u4ea4\u6613\u8f6c\u79fb\r\n\r\n     * \u4ece\u521b\u5efa\u4ea4\u6613\u8005\u8d26\u53f7\u53d1\u9001`_value`\u4e2a\u4ee3\u5e01\u5230 `_to`\u8d26\u53f7\r\n\r\n     *\r\n\r\n     * @param _to \u63a5\u6536\u8005\u5730\u5740\r\n\r\n     * @param _value \u8f6c\u79fb\u6570\u989d\r\n\r\n     */\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n\r\n        _transfer(msg.sender, _to, _value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * \u8d26\u53f7\u4e4b\u95f4\u4ee3\u5e01\u4ea4\u6613\u8f6c\u79fb\r\n\r\n     * @param _from \u53d1\u9001\u8005\u5730\u5740\r\n\r\n     * @param _to \u63a5\u6536\u8005\u5730\u5740\r\n\r\n     * @param _value \u8f6c\u79fb\u6570\u989d\r\n\r\n     */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * \u8bbe\u7f6e\u67d0\u4e2a\u5730\u5740\uff08\u5408\u7ea6\uff09\u53ef\u4ee5\u4ea4\u6613\u8005\u540d\u4e49\u82b1\u8d39\u7684\u4ee3\u5e01\u6570\u3002\r\n\r\n     *\r\n\r\n     * \u5141\u8bb8\u53d1\u9001\u8005`_spender` \u82b1\u8d39\u4e0d\u591a\u4e8e `_value` \u4e2a\u4ee3\u5e01\r\n\r\n     *\r\n\r\n     * @param _spender The address authorized to spend\r\n\r\n     * @param _value the max amount they can spend\r\n\r\n     */\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n\r\n        returns (bool success) {\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * \u8bbe\u7f6e\u5141\u8bb8\u4e00\u4e2a\u5730\u5740\uff08\u5408\u7ea6\uff09\u4ee5\u4ea4\u6613\u8005\u540d\u4e49\u53ef\u6700\u591a\u82b1\u8d39\u7684\u4ee3\u5e01\u6570\u3002\r\n\r\n     *\r\n\r\n     * @param _spender \u88ab\u6388\u6743\u7684\u5730\u5740\uff08\u5408\u7ea6\uff09\r\n\r\n     * @param _value \u6700\u5927\u53ef\u82b1\u8d39\u4ee3\u5e01\u6570\r\n\r\n     * @param _extraData \u53d1\u9001\u7ed9\u5408\u7ea6\u7684\u9644\u52a0\u6570\u636e\r\n\r\n     */\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n\r\n        public\r\n\r\n        returns (bool success) {\r\n\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value)) {\r\n\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * \u9500\u6bc1\u521b\u5efa\u8005\u8d26\u6237\u4e2d\u6307\u5b9a\u4e2a\u4ee3\u5e01\r\n\r\n     */\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n\r\n        Burn(msg.sender, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * \u9500\u6bc1\u7528\u6237\u8d26\u6237\u4e2d\u6307\u5b9a\u4e2a\u4ee3\u5e01\r\n\r\n     *\r\n\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n\r\n     *\r\n\r\n     * @param _from the address of the sender\r\n\r\n     * @param _value the amount of money to burn\r\n\r\n     */\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n\r\n        totalSupply -= _value;                              // Update totalSupply\r\n\r\n        Burn(_from, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract EncryptedToken is owned, TokenERC20 {\r\n\r\n  uint256 INITIAL_SUPPLY = 500000000;\r\n    \r\n  uint256 public sellPrice = 1000000000000000000;\r\n    \r\n  uint256 public buyPrice = 5000000000000000;\r\n    \r\n  mapping (address => bool) public frozenAccount;\r\n\r\n\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n\t\r\n\r\n\tfunction EncryptedToken() TokenERC20(INITIAL_SUPPLY, 'YXFTT', 'YXFTT') payable public {\r\n\r\n    \t\t\r\n\r\n    \t\t\r\n\r\n    }\r\n\r\n    \r\n\r\n\t/* Internal transfer, only can be called by this contract */\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\r\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n\r\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n\r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n\r\n    /// @param target Address to receive the tokens\r\n\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n\r\n        balanceOf[target] += mintedAmount;\r\n\r\n        totalSupply += mintedAmount;\r\n\r\n        Transfer(0, this, mintedAmount);\r\n\r\n        Transfer(this, target, mintedAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n\r\n    /// @param target Address to be frozen\r\n\r\n    /// @param freeze either to freeze it or not\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n\r\n        frozenAccount[target] = freeze;\r\n\r\n        FrozenFunds(target, freeze);\r\n\r\n    }\r\n\r\n\r\n\r\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n\r\n    /// @param newSellPrice Price the users can sell to the contract\r\n\r\n    /// @param newBuyPrice Price users can buy from the contract\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n\r\n        sellPrice = newSellPrice;\r\n\r\n        buyPrice = newBuyPrice;\r\n\r\n    }\r\n\r\n\r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n\r\n    function buy() payable public {\r\n\r\n        uint amount = msg.value / buyPrice;               // calculates the amount\r\n\r\n        _transfer(this, msg.sender, amount);              // makes the transfers\r\n\r\n    }\r\n\r\n\r\n\r\n    /// @notice Sell `amount` tokens to contract\r\n\r\n    /// @param amount amount of tokens to be sold\r\n\r\n    function sell(uint256 amount) public {\r\n\r\n        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\r\n\r\n        _transfer(msg.sender, this, amount);              // makes the transfers\r\n\r\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n\r\n    }\r\n    \r\n    //\u81ea\u52a8\u5151\u6362\r\n    function () payable public {\r\n        uint amount = msg.value / buyPrice;               // calculates the amount\r\n        _transfer(owner, msg.sender, amount);              // makes the transfers\r\n    }\r\n        \r\n    //\u63d0\u73b0\r\n    function withdraw (address _to,uint _amount) onlyOwner public {\r\n        require(this.balance >= _amount);\r\n        msg.sender.transfer(_amount);\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "EncryptedToken", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://91a846277f42bde9d09d7ad8b0c4748425475026c7a98ee43412aae5db0563a1"}]}