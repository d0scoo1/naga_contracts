{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CheapSwapFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ICheapSwapFactory.sol\\\";\\nimport \\\"./lib/ISwapRouter.sol\\\";\\nimport \\\"./lib/IWETH.sol\\\";\\nimport \\\"./CheapSwapTokenOutAddress.sol\\\";\\nimport \\\"./CheapSwapTargetAddress.sol\\\";\\n\\ncontract CheapSwapFactory is ICheapSwapFactory, Ownable {\\n    ISwapRouter public Router = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    IWETH9 public WETH = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    mapping(address => bytes) public pathMap;\\n    mapping(address => uint256) public oneETHAmountOutMinMap;\\n    mapping(address => mapping(address => address)) public tokenOutAddressMap;\\n    mapping(address => mapping(address => address)) public targetAddressMap;\\n\\n    uint256 public fee = 0.001 ether;\\n\\n    constructor() {\\n        WETH.approve(address(Router), type(uint256).max);\\n    }\\n\\n    /* ================ TRANSACTION FUNCTIONS ================ */\\n\\n    function createTokenOutAddress(address tokenOut) external {\\n        CheapSwapTokenOutAddress cheapSwapTokenOutAddress = new CheapSwapTokenOutAddress(msg.sender, tokenOut);\\n        tokenOutAddressMap[msg.sender][tokenOut] = address(cheapSwapTokenOutAddress);\\n    }\\n\\n    function createTargetAddress(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external {\\n        CheapSwapTargetAddress cheapSwapTargetAddress = new CheapSwapTargetAddress(msg.sender, target, value, data);\\n        targetAddressMap[msg.sender][target] = address(cheapSwapTargetAddress);\\n    }\\n\\n    function amountInETH_amountOutMin(address tokenOut, address recipient) external payable {\\n        require(msg.value > fee, \\\"CheapSwapFactory: value too low\\\");\\n        require(pathMap[tokenOut].length != 0, \\\"CheapSwapFactory: empty path\\\");\\n        uint256 amountIn = msg.value - fee;\\n        WETH.deposit{value: amountIn}();\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: pathMap[tokenOut],\\n            recipient: recipient,\\n            deadline: block.timestamp,\\n            amountIn: amountIn,\\n            amountOutMinimum: (amountIn * oneETHAmountOutMinMap[tokenOut]) / 10**18\\n        });\\n        Router.exactInput(params);\\n    }\\n\\n    /* ================ ADMIN FUNCTIONS ================ */\\n\\n    function getFee(address to) external onlyOwner {\\n        payable(to).transfer(address(this).balance);\\n    }\\n\\n    function setFee(uint256 _fee) external onlyOwner {\\n        fee = _fee;\\n    }\\n\\n    function setPath(address tokenOut, bytes calldata path) external onlyOwner {\\n        pathMap[tokenOut] = path;\\n    }\\n\\n    function setOneETHAmountOutMin(address tokenOut, uint256 oneETHAmountOutMin) external onlyOwner {\\n        oneETHAmountOutMinMap[tokenOut] = oneETHAmountOutMin;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICheapSwapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface ICheapSwapFactory {\\n    /* ================ TRANSACTION FUNCTIONS ================ */\\n\\n    function createTokenOutAddress(address tokenOut) external;\\n\\n    function createTargetAddress(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function amountInETH_amountOutMin(address tokenOut, address recipient) external payable;\\n\\n    /* ================ ADMIN FUNCTIONS ================ */\\n\\n    function getFee(address to) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function setPath(address tokenOut, bytes calldata path) external;\\n\\n    function setOneETHAmountOutMin(address tokenOut, uint256 oneETHAmountOutMin) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ISwapRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.12;\\n\\ninterface ISwapRouter {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/IWETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.12;\\n\\ninterface IWETH9 {\\n    function deposit() external payable;\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/CheapSwapTokenOutAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.12;\\n\\nimport \\\"./interfaces/ICheapSwapFactory.sol\\\";\\n\\ncontract CheapSwapTokenOutAddress {\\n    address public recipient;\\n    address public tokenOut;\\n    ICheapSwapFactory public cheapSwapFactory;\\n\\n    constructor(address _recipient, address _tokenOut) {\\n        recipient = _recipient;\\n        tokenOut = _tokenOut;\\n        cheapSwapFactory = ICheapSwapFactory(msg.sender);\\n    }\\n\\n    /* ================ TRANSACTION FUNCTIONS ================ */\\n\\n    receive() external payable {\\n        cheapSwapFactory.amountInETH_amountOutMin{value: msg.value}(tokenOut, recipient);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CheapSwapTargetAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.12;\\n\\nimport \\\"./interfaces/ICheapSwapFactory.sol\\\";\\n\\ncontract CheapSwapTargetAddress {\\n    address public owner;\\n    address public target;\\n    uint256 public value;\\n    bytes public data;\\n\\n    constructor(\\n        address _owner,\\n        address _target,\\n        uint256 _value,\\n        bytes memory _data\\n    ) {\\n        owner = _owner;\\n        target = _target;\\n        value = _value;\\n        data = _data;\\n    }\\n\\n    /* ================ TRANSACTION FUNCTIONS ================ */\\n\\n    receive() external payable {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"CheapSwapTargetAddress: call error\\\");\\n    }\\n\\n    /* ================ ADMIN FUNCTIONS ================ */\\n\\n    function call(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external payable {\\n        require(msg.sender == owner, \\\"CheapSwapTargetAddress: not owner\\\");\\n        (bool success, ) = _target.call{value: _value}(_data);\\n        require(success, \\\"CheapSwapTargetAddress: call error\\\");\\n    }\\n\\n    function setData(uint256 _value, bytes calldata _data) external {\\n        require(msg.sender == owner, \\\"CheapSwapTargetAddress: not owner\\\");\\n        value = _value;\\n        data = _data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Router\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"amountInETH_amountOutMin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createTargetAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"createTokenOutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oneETHAmountOutMinMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pathMap\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oneETHAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"setOneETHAmountOutMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"setPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"targetAddressMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenOutAddressMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CheapSwapFactory", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}