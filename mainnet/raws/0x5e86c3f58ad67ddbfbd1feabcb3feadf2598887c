{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.6.8;\r\nlibrary EnumerableUintSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        uint256[] _collection;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n    function _add(Set storage set, bytes32 value, uint256 savedValue) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._collection.push(savedValue);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n            bytes32 lastValue = set._values[lastIndex];\r\n            set._values[toDeleteIndex] = lastValue;\r\n            set._values.pop();\r\n\r\n            uint256 lastvalueAddress = set._collection[lastIndex];\r\n            set._collection[toDeleteIndex] = lastvalueAddress;\r\n            set._collection.pop();\r\n\r\n            set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\r\n            delete set._indexes[value];\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n    function _collection(Set storage set) private view returns (uint256[] memory) {\r\n        return set._collection;    \r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (uint256) {\r\n        require(set._collection.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._collection[index];\r\n    }\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)), value);\r\n    }\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n    function collection(UintSet storage set) internal view returns (uint256[] memory) {\r\n        return _collection(set._inner);\r\n    }\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return _at(set._inner, index);\r\n    }\r\n}\r\npragma solidity ^0.6.8;\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        address[] _collection;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n    function _add(Set storage set, bytes32 value, address addressValue) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._collection.push(addressValue);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n            bytes32 lastValue = set._values[lastIndex];\r\n            set._values[toDeleteIndex] = lastValue;\r\n            set._values.pop();\r\n\r\n            address lastvalueAddress = set._collection[lastIndex];\r\n            set._collection[toDeleteIndex] = lastvalueAddress;\r\n            set._collection.pop();\r\n\r\n            set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\r\n            delete set._indexes[value];\r\n//            for(uint256 i = 0; i < set._collection.length; i++) {\r\n//                if (set._collection[i] == addressValue) {\r\n//                    _removeIndexArray(i, set._collection);\r\n//                    break;\r\n//                }\r\n//            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n    function _collection(Set storage set) private view returns (address[] memory) {\r\n        return set._collection;    \r\n    }\r\n//    function _removeIndexArray(uint256 index, address[] storage array) internal virtual {\r\n//        for(uint256 i = index; i < array.length-1; i++) {\r\n//            array[i] = array[i+1];\r\n//        }\r\n//        array.pop();\r\n//    }\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)), value);\r\n    }\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n    function collection(AddressSet storage set) internal view returns (address[] memory) {\r\n        return _collection(set._inner);\r\n    }\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n}\r\npragma solidity ^0.6.8;\r\nlibrary SafeMath {\r\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title BEP721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from BEP721 asset contracts.\r\n */\r\ninterface IBEP721Receiver {\r\n    /**\r\n     * @dev Whenever an {IBEP721} `tokenId` token is transferred to this contract via {IBEP721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IBEP721.onBEP721Received.selector`.\r\n     */\r\n    function onBEP721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\npragma solidity ^0.6.8;\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\npragma solidity ^0.6.8;\r\n\r\n/**\r\n * @dev Interface of the BEP165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({BEP165Checker}).\r\n *\r\n * For an implementation, see {BEP165}.\r\n */\r\ninterface IBEP165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n/**\r\n * @dev Required interface of an BEP721 compliant contract.\r\n */\r\ninterface IBEP721 is IBEP165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the BEP721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IBEP721Receiver-onBEP721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IBEP721Receiver-onBEP721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IBEP1155Receiver is IBEP165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single BEP1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onBEP1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onBEP1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onBEP1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple BEP1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onBEP1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onBEP1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onBEP1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n/**\r\n * @dev Required interface of an BEP1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IBEP1155 is IBEP165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IBEP1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:BEP1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IBEP1155Receiver-onBEP1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:BEP1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IBEP1155Receiver-onBEP1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.8;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeBEP20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeBEP20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeBEP20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface STARSEASNFT {\r\n\tfunction mint(string memory tokenUri, uint256 royalties) external returns(uint256);\r\n\tfunction getNFTData(uint _tokenId) external view returns (address,uint256);\r\n}\r\n\r\n\r\ncontract STARSEASAuction is IBEP721Receiver,IBEP1155Receiver,Ownable {\r\n\t using SafeBEP20 for IBEP20;\r\n\t \r\n\tuint256 private _weiDecimal = 18;\r\n\tuint256 private _divRate = 10000;\r\n\t\r\n\tbool private withMint = false;\r\n\t\r\n\taddress private _WBNB;\r\n\t\r\n    uint256 public platform_fee = 150; //1.5%\r\n    address public feeReceiver;\r\n\t\r\n    using SafeMath for uint256;\r\n\t\r\n    using EnumerableUintSet for EnumerableUintSet.UintSet;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    struct Auction {\r\n        address tokenAddress;\r\n        address seller;\r\n        address latestBidder;\r\n        uint256 latestBidTime;\r\n        uint256 deadline;\r\n        uint256 price;\r\n        uint256 amountReceive;\r\n        uint256 bidCount;\r\n        uint256 latestBidPrice;\r\n    }\r\n\t\r\n\tstruct SendTransaction {\r\n        uint256 balanceBeforeSend;\r\n        uint256 balanceAfterSend;\r\n        uint256 amountReceive;\r\n        uint256 sellerAmount;\r\n        uint256 platformFeeAmount;\r\n        uint256 royaltiesFeeAmount;\r\n        uint256 royaltiesFee;\r\n        address royaltiesFeeAddress;\r\n    }\r\n\r\n    mapping(uint256 => Auction) private _contractsPlusTokenIdsAuction;\r\n    mapping(address => EnumerableUintSet.UintSet) private _contractsTokenIdsList;\r\n    mapping(address => uint256) private _consumersDealFirstDate;\r\n    mapping(uint256 => address) private _auctionIDtoSellerAddress;\r\n\tmapping(address => bool) public registeredToken;\r\n\t\r\n\tevent TokenStatus(address tokenAddress, bool tokenStatus);\r\n\tevent ListingSell(address seller, address tokenAddress, address contractNFT, uint tokenId, uint256 price, uint256 datetime);\r\n\tevent SaleBuy(address buyer, address tokenAddress, address seller, address contractNFT, uint tokenId, uint256 price, uint256 datetime);\r\n\tevent SaleBuy(address buyer,address seller, address contractNFT, uint tokenId, uint256 price, uint256 datetime);\r\n\tevent ListingAuction(address seller, address tokenAddress, address contractNFT, uint256 tokenId,uint256 price,uint256 deadline, bool isBEP1155, uint256 datetime);\r\n\tevent BidAuction(address buyer,address tokenAddress, address contractNFT, uint256 tokenId,uint256 price,uint256 deadline, bool isBEP1155,address seller, bool isDeal, uint256 datetime);\r\n\tevent ListingAuctionCanceled(address seller, address tokenAddress, address contractNFT, uint256 tokenId,uint256 price,uint256 deadline, bool isBEP1155, uint256 datetime);\r\n\tevent ListingAuctionFinished(address seller, address tokenAddress, address contractNFT, uint256 tokenId, uint256 datetime);\r\n\t\r\n\treceive() external payable {}\r\n\t\r\n\tconstructor (\r\n        address wbnb\r\n\t\t,address _feeReceiver\r\n\t\t,uint256 _platform_fee\r\n    ) public {\r\n        require(_platform_fee <= 500, \"Max 5%\");\r\n\t\t_WBNB = wbnb;\r\n\t\tplatform_fee = _platform_fee;\r\n\t\tfeeReceiver = _feeReceiver;\r\n\t\t\r\n\t\tregisteredToken[_WBNB] = true;\r\n    }\r\n\t\r\n\tfunction setRegisterdTokenStatus(address _tokenAddress, bool _tokenStatus) external onlyOwner{\r\n\t\tregisteredToken[_tokenAddress] = _tokenStatus;\r\n\t\t\r\n\t\temit TokenStatus(\r\n\t\t\t_tokenAddress\r\n\t\t\t, _tokenStatus\r\n\t\t);\r\n\t}\r\n\t\r\n    function getNFTsAuctionList( address _contractNFT) public view returns (uint256[] memory) {\r\n        return _contractsTokenIdsList[_contractNFT].collection();\r\n    }\r\n\t\r\n    function sellerAddressFor( uint256 _auctionID) public view returns (address) {\r\n        return _auctionIDtoSellerAddress[_auctionID];\r\n    }\r\n\t\r\n    function getAuction(\r\n        address _contractNFT,\r\n        uint256 _tokenId\r\n    ) public view returns\r\n    (\r\n        address tokenAddress,\r\n        address seller,\r\n        address latestBidder,\r\n        uint256 latestBidTime,\r\n        uint256 deadline,\r\n        uint price,\r\n        uint latestBidPrice\r\n    ) {\r\n        uint256 index = uint256(_contractNFT).add(_tokenId);\r\n        return \r\n        (\r\n            _contractsPlusTokenIdsAuction[index].tokenAddress,\r\n            _contractsPlusTokenIdsAuction[index].seller,\r\n            _contractsPlusTokenIdsAuction[index].latestBidder,\r\n            _contractsPlusTokenIdsAuction[index].latestBidTime,\r\n            _contractsPlusTokenIdsAuction[index].deadline,\r\n            _contractsPlusTokenIdsAuction[index].price,\r\n            _contractsPlusTokenIdsAuction[index].latestBidPrice\r\n        );\r\n    }\r\n\r\n    function sellWithMint(\r\n\t\tstring memory tokenUri\r\n\t\t, address _tokenAddress\r\n\t\t, address _contractNFT\r\n\t\t, uint256 _royalties\r\n\t\t, uint256 _price\r\n\t\t, bool _isBEP1155\r\n\t) public {\r\n\t\trequire(registeredToken[_tokenAddress], \"Token are not Active or not registered\");\r\n\t\t\r\n\t\tSTARSEASNFT _STARSEASNFT = STARSEASNFT(_contractNFT);\r\n\t\tuint256 _tokenId = _STARSEASNFT.mint(tokenUri,_royalties);\r\n\t\t\r\n\t\twithMint = true;\r\n\t\tsell(_tokenAddress, _contractNFT, _tokenId, _price,_isBEP1155);\r\n\t\twithMint = false;\r\n\t}\r\n\t\r\n    function sell(\r\n\t\taddress _tokenAddress\r\n\t\t, address _contractNFT\r\n\t\t, uint256 _tokenId\r\n\t\t, uint256 _price\r\n\t\t, bool _isBEP1155\r\n\t) public {\r\n        require(!_contractsTokenIdsList[_contractNFT].contains(uint256(msg.sender).add(_tokenId)), \"Auction is already created\");\r\n        require(registeredToken[_tokenAddress], \"Token are not Active or not registered\");\r\n\t\t\r\n\t\tif(!withMint){\r\n\t\t\tif (_isBEP1155) {\r\n\t\t\t\tIBEP1155(_contractNFT).safeTransferFrom( msg.sender, address(this), _tokenId,1, \"0x0\");\r\n\t\t\t} else {\r\n\t\t\t\tIBEP721(_contractNFT).transferFrom( msg.sender, address(this), _tokenId);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n        Auction memory _auction = Auction({\r\n            tokenAddress: _tokenAddress,\r\n            seller: msg.sender,\r\n            latestBidder: address(0),\r\n            latestBidTime: 0,\r\n            deadline: 0,\r\n            price:_price,\r\n            amountReceive:0,\r\n\t\t\tbidCount:0,\r\n\t\t\tlatestBidPrice:0\r\n        });\r\n\t\t\r\n        _contractsPlusTokenIdsAuction[uint256(_contractNFT).add(_tokenId)] = _auction;\r\n        _auctionIDtoSellerAddress[uint256(msg.sender).add(_tokenId)] = msg.sender;\r\n        _contractsTokenIdsList[_contractNFT].add(uint256(msg.sender).add(_tokenId));\r\n\t\t\r\n\t\temit ListingSell(\r\n\t\t\tmsg.sender\r\n\t\t\t, _tokenAddress\r\n\t\t\t, _contractNFT\r\n\t\t\t, _tokenId\r\n\t\t\t, _price\r\n\t\t\t, block.timestamp\r\n\t\t);\r\n    }\r\n\t\t\r\n    function buy (\r\n        bool _isBEP1155\r\n\t\t, address _contractNFT\r\n\t\t, uint256 _tokenId\r\n    ) external payable  {\r\n        Auction storage auction = _contractsPlusTokenIdsAuction[uint256(_contractNFT).add(_tokenId)];\r\n        require(auction.seller != address(0), \"Wrong seller address\");\r\n        require(auction.deadline == 0, \"Item is on auction\");\r\n        SendTransaction memory safeSend;\r\n        \r\n\t\trequire(_contractsTokenIdsList[_contractNFT].contains(uint256(auction.seller).add(_tokenId)), \"Auction is not created\"); // BEP1155 can have more than 1 auction with same ID and , need mix tokenId with seller address\r\n        \r\n\t\tif (_isBEP1155) {\r\n            IBEP1155(_contractNFT).safeTransferFrom( address(this), msg.sender, _tokenId, 1, \"0x0\");\r\n        } else {\r\n            IBEP721(_contractNFT).safeTransferFrom( address(this), msg.sender, _tokenId);\r\n        }\r\n        \r\n\t\tSTARSEASNFT _STARSEASNFT = STARSEASNFT(_contractNFT);\r\n\t\t\r\n\t\t(safeSend.royaltiesFeeAddress, safeSend.royaltiesFee) = _STARSEASNFT.getNFTData(_tokenId);\r\n\t\t\r\n\t\tif(auction.tokenAddress == _WBNB) {\r\n\t\t\trequire(msg.value >= auction.price, \"Price rate changed\");\r\n\t\t\tif(msg.value > auction.price){\r\n\t\t\t\tpayable(msg.sender).transfer(msg.value.sub(auction.price));\r\n\t\t\t}\r\n\t\t\tsafeSend.amountReceive = auction.price;\r\n\t\t} else {\r\n\t\t\tsafeSend.balanceBeforeSend = IBEP20(auction.tokenAddress).balanceOf(address(this));\r\n\t\t\tIBEP20(auction.tokenAddress).transferFrom(msg.sender, address(this), _getTokenAmount(auction.tokenAddress,auction.price));\r\n\t\t\tsafeSend.balanceAfterSend = IBEP20(auction.tokenAddress).balanceOf(address(this));\r\n\t\t\tsafeSend.amountReceive = safeSend.balanceAfterSend - safeSend.balanceBeforeSend;\r\n\t\t\tsafeSend.amountReceive = _getReverseTokenAmount(auction.tokenAddress, safeSend.amountReceive);\r\n\t\t}\r\n\t\r\n\t\tsafeSend.sellerAmount = safeSend.amountReceive;\r\n\t\tsafeSend.platformFeeAmount = 0;\r\n\t\tsafeSend.royaltiesFeeAmount = 0;\r\n\t\t\r\n\t\tif(platform_fee > 0){\r\n\t\t\tsafeSend.platformFeeAmount = safeSend.amountReceive * platform_fee / _divRate;\r\n\t\t\tsafeSend.sellerAmount -= safeSend.platformFeeAmount;\r\n\t\t}\r\n\t\t\r\n\t\tif(safeSend.royaltiesFee > 0){\r\n\t\t\tsafeSend.royaltiesFeeAmount = safeSend.amountReceive  * safeSend.royaltiesFee / _divRate;\r\n\t\t\tsafeSend.sellerAmount -= safeSend.royaltiesFeeAmount;\r\n\t\t}\r\n\t\t\r\n\t\tif(auction.tokenAddress == _WBNB) {\r\n\t\t\tpayable(feeReceiver).transfer(safeSend.platformFeeAmount);\r\n\t\t\tpayable(safeSend.royaltiesFeeAddress).transfer(safeSend.royaltiesFeeAmount);\r\n\t\t\tpayable(auction.seller).transfer(safeSend.sellerAmount);\r\n\t\t} else {\r\n\t\t\tIBEP20(auction.tokenAddress).transfer(feeReceiver, _getTokenAmount(auction.tokenAddress, safeSend.platformFeeAmount));\r\n\t\t\tIBEP20(auction.tokenAddress).transfer(safeSend.royaltiesFeeAddress, _getTokenAmount(auction.tokenAddress, safeSend.royaltiesFeeAmount));\r\n\t\t\tIBEP20(auction.tokenAddress).transfer(auction.seller, _getTokenAmount(auction.tokenAddress, safeSend.sellerAmount));\r\n\t\t}\r\n\t\t\r\n\t\temit SaleBuy(msg.sender,auction.tokenAddress,auction.seller, _contractNFT, _tokenId, auction.price, block.timestamp);\r\n\t\t\r\n        _contractsTokenIdsList[_contractNFT].remove(uint256(auction.seller).add(_tokenId));\r\n        delete _auctionIDtoSellerAddress[uint256(auction.seller).add(_tokenId)];\r\n        delete _contractsPlusTokenIdsAuction[ uint256(_contractNFT).add(_tokenId)];\r\n\t}\r\n    \t\r\n\tfunction createAuctionWithMint(\r\n\t\tstring memory tokenUri\r\n\t\t, address _tokenAddress\r\n\t\t, address _contractNFT\r\n\t\t, uint256 _royalties\r\n\t\t, uint256 _price\r\n\t\t, uint256 _deadline\r\n\t\t, bool _isBEP1155\r\n\t) public {\r\n\t\trequire(registeredToken[_tokenAddress], \"Token are not Active or not registered\");\r\n\t\t\r\n\t\tSTARSEASNFT _STARSEASNFT = STARSEASNFT(_contractNFT);\r\n\t\tuint256 _tokenId = _STARSEASNFT.mint(tokenUri,_royalties);\r\n\t\t\r\n\t\twithMint = true;\r\n\t\tcreateAuction(_tokenAddress, _contractNFT, _tokenId, _price, _deadline, _isBEP1155);\r\n\t\twithMint = false;\r\n\t}\r\n\t\r\n    function createAuction(\r\n\t\taddress _tokenAddress\r\n\t\t, address _contractNFT\r\n\t\t, uint256 _tokenId\r\n\t\t, uint256 _price\r\n\t\t, uint256 _deadline\r\n\t\t, bool _isBEP1155 \r\n\t) public {\r\n        require(!_contractsTokenIdsList[_contractNFT].contains(uint256(msg.sender).add(_tokenId)), \"Auction is already created\");\r\n\t\trequire(registeredToken[_tokenAddress], \"Token are not Active or not registered\");\r\n\t\t\r\n\t\tif(!withMint){\r\n\t\t\tif (_isBEP1155) {\r\n\t\t\t\tIBEP1155(_contractNFT).safeTransferFrom( msg.sender, address(this), _tokenId,1, \"0x0\");\r\n\t\t\t} else {\r\n\t\t\t\tIBEP721(_contractNFT).transferFrom( msg.sender, address(this), _tokenId);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n        Auction memory _auction = Auction({\r\n            tokenAddress: _tokenAddress,\r\n            seller: msg.sender,\r\n            latestBidder: address(0),\r\n            latestBidTime: 0,\r\n            deadline: _deadline,\r\n            price:_price,\r\n            amountReceive:0,\r\n\t\t\tbidCount:0,\r\n\t\t\tlatestBidPrice:_price\r\n        });\r\n        _contractsPlusTokenIdsAuction[uint256(_contractNFT).add(_tokenId)] = _auction;\r\n        _auctionIDtoSellerAddress[uint256(msg.sender).add(_tokenId)] = msg.sender;\r\n        _contractsTokenIdsList[_contractNFT].add(uint256(msg.sender).add(_tokenId));\r\n        emit ListingAuction( msg.sender,  _tokenAddress, _contractNFT, _tokenId, _price, _deadline, _isBEP1155, block.timestamp);\r\n    }\r\n\t\r\n    function _bidWin (\r\n        bool _isBEP1155,\r\n        address _contractNFT,\r\n        uint256 _tokenId\r\n    ) private  {\r\n\t\tAuction storage auction = _contractsPlusTokenIdsAuction[uint256(_contractNFT).add(_tokenId)];\r\n        SendTransaction memory safeSend;\r\n\t\t\r\n\t\tSTARSEASNFT _STARSEASNFT = STARSEASNFT(_contractNFT);\r\n\t\t\r\n\t\t(safeSend.royaltiesFeeAddress, safeSend.royaltiesFee) = _STARSEASNFT.getNFTData(_tokenId);\r\n\t\t\r\n\t\tsafeSend.sellerAmount = auction.amountReceive;\r\n\t\tsafeSend.platformFeeAmount = 0;\r\n\t\tsafeSend.royaltiesFeeAmount = 0;\r\n\t\t\r\n\t\tif(platform_fee > 0){\r\n\t\t\tsafeSend.platformFeeAmount = safeSend.amountReceive * platform_fee / _divRate;\r\n\t\t\tsafeSend.sellerAmount -= safeSend.platformFeeAmount;\r\n\t\t}\r\n\t\t\r\n\t\tif(safeSend.royaltiesFee > 0){\r\n\t\t\tsafeSend.royaltiesFeeAmount = safeSend.amountReceive  * safeSend.royaltiesFee / _divRate;\r\n\t\t\tsafeSend.sellerAmount -= safeSend.royaltiesFeeAmount;\r\n\t\t}\r\n\t\t\r\n\t\tif(auction.tokenAddress == _WBNB) {\r\n\t\t\tpayable(feeReceiver).transfer(safeSend.platformFeeAmount);\r\n\t\t\tpayable(safeSend.royaltiesFeeAddress).transfer(safeSend.royaltiesFeeAmount);\r\n\t\t\tpayable(auction.seller).transfer(safeSend.sellerAmount);\r\n\t\t} else {\r\n\t\t\tIBEP20(auction.tokenAddress).transfer(feeReceiver, _getTokenAmount(auction.tokenAddress, safeSend.platformFeeAmount));\r\n\t\t\tIBEP20(auction.tokenAddress).transfer(safeSend.royaltiesFeeAddress, _getTokenAmount(auction.tokenAddress, safeSend.royaltiesFeeAmount));\r\n\t\t\tIBEP20(auction.tokenAddress).transfer(auction.seller, _getTokenAmount(auction.tokenAddress, safeSend.sellerAmount));\r\n\t\t}\r\n\t\t\r\n\t\tif (_isBEP1155) {\r\n            IBEP1155(_contractNFT).safeTransferFrom( address(this), auction.latestBidder, _tokenId, 1, \"0x0\");\r\n        } else {\r\n            IBEP721(_contractNFT).safeTransferFrom( address(this), auction.latestBidder, _tokenId);\r\n        }\r\n\t\t\r\n\t\temit SaleBuy(auction.latestBidder,auction.tokenAddress,auction.seller, _contractNFT, _tokenId, auction.latestBidPrice, block.timestamp);\r\n\t\temit ListingAuctionFinished(auction.seller,auction.tokenAddress, _contractNFT,_tokenId, block.timestamp);\r\n        \r\n        _contractsTokenIdsList[_contractNFT].remove(uint256(auction.seller).add(_tokenId));\r\n        delete _auctionIDtoSellerAddress[uint256(auction.seller).add(_tokenId)];\r\n\t\tdelete _contractsPlusTokenIdsAuction[ uint256(_contractNFT).add(_tokenId)];\r\n\t}\r\n\r\n    function bid(\r\n\t\taddress _contractNFT\r\n\t\t,uint256 _tokenId\r\n\t\t,uint256 _price\r\n\t\t,bool _isBEP1155 \r\n\t) external payable returns (bool, uint256, address) {\r\n        Auction storage auction = _contractsPlusTokenIdsAuction[uint256(_contractNFT).add(_tokenId)];\r\n        \r\n\t\trequire(auction.seller != address(0), \"Wrong seller address\");\r\n        require(block.timestamp <= auction.deadline, \"Auction is ended\");\r\n        require(_contractsTokenIdsList[_contractNFT].contains(uint256(auction.seller).add(_tokenId)), \"Auction is not created\"); // BEP1155 can have more than 1 auction with same ID and , need mix tokenId with seller address\r\n        \r\n\t\tuint256 balanceBeforeSendPrice = 0;\r\n\t\tuint256 balanceAfterSendPrice = 0;\r\n\t\tuint256 amountReceive = 0;\r\n\t\t\r\n\t\tif(auction.tokenAddress == _WBNB) {\r\n\t\t\trequire(_price >= auction.latestBidPrice, \"Price must be more than previous bid\");\r\n\t\t\tif(msg.value > _price){\r\n\t\t\t\tpayable(msg.sender).transfer(msg.value.sub(_price));\r\n\t\t\t}\r\n\t\t\tamountReceive = _price;\r\n\t\t} else {\r\n\t\t\tbalanceBeforeSendPrice = IBEP20(auction.tokenAddress).balanceOf(address(this));\r\n\t\t\tIBEP20(auction.tokenAddress).transferFrom(msg.sender, address(this), _getTokenAmount(auction.tokenAddress,auction.price));\r\n\t\t\tbalanceAfterSendPrice = IBEP20(auction.tokenAddress).balanceOf(address(this));\r\n\t\t\tamountReceive = balanceAfterSendPrice - balanceBeforeSendPrice;\r\n\t\t\tamountReceive = _getReverseTokenAmount(auction.tokenAddress, amountReceive);\r\n\t\t}\r\n\t\t\t\t\r\n\t\tif(auction.bidCount > 0){\r\n\t\t\tif(auction.tokenAddress == _WBNB) {\r\n\t\t\t\tpayable(auction.latestBidder).transfer(auction.amountReceive);\r\n\t\t\t} else {\r\n\t\t\t\tIBEP20(auction.tokenAddress).transfer(auction.latestBidder, auction.amountReceive);\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tauction.latestBidPrice = _price;\r\n\t\tauction.latestBidder = msg.sender;\r\n\t\tauction.latestBidTime = block.timestamp;\r\n\t\tauction.bidCount += 1;\r\n\t\tauction.amountReceive = amountReceive;\r\n\t\t\r\n\t\temit BidAuction(msg.sender, auction.tokenAddress, _contractNFT,_tokenId,_price,auction.deadline,_isBEP1155,auction.seller, false, block.timestamp);\r\n\t\tif (auction.latestBidder != address(0)) {\r\n\t\t\treturn (false,auction.price,auction.latestBidder);\r\n\t\t}        \r\n    }\r\n    \r\n    function _cancelAuction( address _contractNFT, uint256 _tokenId, address _sender, bool _isBEP1155, bool _isAdmin ) private {\r\n        uint256 index = uint256(_contractNFT).add(_tokenId);\r\n        Auction storage auction = _contractsPlusTokenIdsAuction[index];\r\n        if (!_isAdmin) require(auction.seller == _sender, \"Only seller can cancel\");\r\n        \r\n\t\tif(auction.bidCount > 0){\r\n\t\t\tif(auction.tokenAddress == _WBNB) {\r\n\t\t\t\tpayable(auction.latestBidder).transfer(auction.amountReceive);\r\n\t\t\t} else {\r\n\t\t\t\tIBEP20(auction.tokenAddress).transfer(auction.latestBidder, auction.amountReceive);\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\t\r\n\t\tif (_isBEP1155) {\r\n            IBEP1155(_contractNFT).safeTransferFrom(address(this),auction.seller, _tokenId,1,\"0x0\");\r\n        } else {\r\n            IBEP721(_contractNFT).safeTransferFrom(address(this),auction.seller, _tokenId);\r\n        }\r\n\t\t\r\n        address auctionSeller = address(auction.seller);\r\n        emit ListingAuctionCanceled(auction.seller, auction.tokenAddress, _contractNFT,_tokenId,auction.price,auction.deadline,_isBEP1155, block.timestamp);\r\n        delete _contractsPlusTokenIdsAuction[index];\r\n        delete _auctionIDtoSellerAddress[uint256(auctionSeller).add(_tokenId)];\r\n        _contractsTokenIdsList[_contractNFT].remove(uint256(auctionSeller).add(_tokenId));\r\n    }\r\n\r\n    function adminCancelAuction( address _contractNFT, uint256 _tokenId, bool _isBEP1155) external onlyOwner {\r\n        _cancelAuction( _contractNFT, _tokenId, msg.sender, _isBEP1155, true );\r\n    }\r\n\t\r\n    function cancelAuction( address _contractNFT, uint256 _tokenId, bool _isBEP1155) public {\r\n        require(_contractsTokenIdsList[_contractNFT].contains(uint256(msg.sender).add(_tokenId)), \"Auction is not created\");\r\n        _cancelAuction( _contractNFT, _tokenId, msg.sender, _isBEP1155, false );\r\n    }\r\n\t\r\n    function finishAuction( address _contractNFT, uint256 _tokenId, bool _isBEP1155 ) public {\r\n        Auction storage auction = _contractsPlusTokenIdsAuction[uint256(_contractNFT).add(_tokenId)];\r\n\r\n\t\trequire(msg.sender == auction.seller || msg.sender == auction.latestBidder, \"Auction is not seller or winner\");\r\n\r\n\t\tif(msg.sender == auction.latestBidder){\r\n\t\t\trequire(block.timestamp > auction.deadline && msg.sender == auction.latestBidder, \"Auction still running\");\r\n\t\t}\r\n\t\t\r\n\t\trequire(auction.bidCount > 0, \"No Bid, use cancel auction\");\r\n\t\t\r\n\t\t_bidWin(\r\n\t\t\t_isBEP1155,\r\n\t\t\t_contractNFT,\r\n\t\t\t_tokenId\r\n\t\t);\r\n    }\r\n\t\r\n    function onBEP721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onBEP721Received.selector;\r\n    }\r\n\r\n    function onBEP1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata \r\n    )\r\n    external\r\n    override\r\n    returns(bytes4)\r\n    {\r\n        return this.onBEP1155Received.selector;\r\n    }\r\n\r\n    function onBEP1155BatchReceived(\r\n        address ,\r\n        address ,\r\n        uint256[] calldata,\r\n        uint256[] calldata ,\r\n        bytes calldata \r\n    )\r\n    external\r\n    override\r\n    returns(bytes4)\r\n    {\r\n        return this.onBEP1155BatchReceived.selector;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return this.supportsInterface(interfaceId);\r\n    }\r\n\t\r\n\tfunction setPlatformFee(uint256 _platform_fee, address _feeReceiver) external onlyOwner{\r\n\t\trequire(_platform_fee <= 500, \"Max 5%\");\r\n\t\tplatform_fee = _platform_fee;\r\n\t\tfeeReceiver = _feeReceiver;\r\n\t}\r\n\t\r\n\tfunction _getTokenAmount(address _tokenAddress, uint256 _amount) internal view returns (uint256 quotient) {\r\n\t\tIBEP20 tokenAddress = IBEP20(_tokenAddress);\r\n\t\tuint256 tokenDecimal = tokenAddress.decimals();\r\n\t\tuint256 decimalDiff;\r\n\t\tuint256 decimalDiffConverter;\r\n\t\tuint256 amount;\r\n\t\t\t\r\n\t\tif(_weiDecimal != tokenDecimal){\r\n\t\t\tif(_weiDecimal > tokenDecimal){\r\n\t\t\t\tdecimalDiff = _weiDecimal - tokenDecimal;\r\n\t\t\t\tdecimalDiffConverter = 10**decimalDiff;\r\n\t\t\t\tamount = _amount.div(decimalDiffConverter);\r\n\t\t\t} else {\r\n\t\t\t\tdecimalDiff = tokenDecimal - _weiDecimal;\r\n\t\t\t\tdecimalDiffConverter = 10**decimalDiff;\r\n\t\t\t\tamount = _amount.mul(decimalDiffConverter);\r\n\t\t\t}\t\t\r\n\t\t} else {\r\n\t\t\tamount = _amount;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 _quotient = amount;\r\n\t\t\r\n\t\treturn (_quotient);\r\n    }\r\n\t\r\n\tfunction _getReverseTokenAmount(address _tokenAddress, uint256 _amount) internal view returns (uint256 quotient) {\r\n\t\tIBEP20 tokenAddress = IBEP20(_tokenAddress);\r\n\t\tuint256 tokenDecimal = tokenAddress.decimals();\r\n\t\tuint256 decimalDiff;\r\n\t\tuint256 decimalDiffConverter;\r\n\t\tuint256 amount;\r\n\t\t\t\r\n\t\tif(_weiDecimal != tokenDecimal){\r\n\t\t\tif(_weiDecimal > tokenDecimal){\r\n\t\t\t\tdecimalDiff = _weiDecimal - tokenDecimal;\r\n\t\t\t\tdecimalDiffConverter = 10**decimalDiff;\r\n\t\t\t\tamount = _amount.mul(decimalDiffConverter);\r\n\t\t\t} else {\r\n\t\t\t\tdecimalDiff = tokenDecimal - _weiDecimal;\r\n\t\t\t\tdecimalDiffConverter = 10**decimalDiff;\r\n\t\t\t\tamount = _amount.div(decimalDiffConverter);\r\n\t\t\t}\t\t\r\n\t\t} else {\r\n\t\t\tamount = _amount;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 _quotient = amount;\r\n\t\t\r\n\t\treturn (_quotient);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wbnb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platform_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractNFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBEP1155\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDeal\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"BidAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractNFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBEP1155\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"ListingAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractNFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBEP1155\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"ListingAuctionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractNFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"ListingAuctionFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractNFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"ListingSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractNFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"SaleBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractNFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"SaleBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tokenStatus\",\"type\":\"bool\"}],\"name\":\"TokenStatus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBEP1155\",\"type\":\"bool\"}],\"name\":\"adminCancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBEP1155\",\"type\":\"bool\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isBEP1155\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_contractNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBEP1155\",\"type\":\"bool\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBEP1155\",\"type\":\"bool\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBEP1155\",\"type\":\"bool\"}],\"name\":\"createAuctionWithMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBEP1155\",\"type\":\"bool\"}],\"name\":\"finishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"latestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"latestBidTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestBidPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractNFT\",\"type\":\"address\"}],\"name\":\"getNFTsAuctionList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onBEP1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onBEP1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onBEP721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBEP1155\",\"type\":\"bool\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBEP1155\",\"type\":\"bool\"}],\"name\":\"sellWithMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionID\",\"type\":\"uint256\"}],\"name\":\"sellerAddressFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platform_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_tokenStatus\",\"type\":\"bool\"}],\"name\":\"setRegisterdTokenStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "STARSEASAuction", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000bfb03e0b6761697ba04f1588dd1594717c85cef3000000000000000000000000000000000000000000000000000000000000012c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ce6b39639bc8e3f538adb27c070a50e5d478834cf01da11eb31b68d676fc6a83"}]}