{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EnglishAuctionPropyV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.7;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n    \\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    \\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n    \\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    \\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return c;\\n    }\\n    \\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n    \\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ninterface IEthAddressWhitelist {\\n    function isWhitelisted(address _address) external view returns(bool);\\n}\\n\\ninterface IERC721 {\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n}\\n\\ncontract EnglishAuctionPropyV2 {\\n    using SafeMath for uint256;\\n    using SafeMath for uint8;\\n    // System settings\\n    uint256 public weiIncreasePerBid;\\n    uint256 public stakingRewardPercentageBasisPoints;\\n    uint256 public tokenId;\\n    address public tokenAddress;\\n    bool public ended = false;\\n    address public controller;\\n    address public deployer;\\n    address public tokenHolder;\\n    \\n    // Current winning bid\\n    uint256 public lastBid;\\n    address public winning;\\n    \\n    uint256 public length;\\n    uint256 public minimumStartTime;\\n    uint256 public startTime;\\n    uint256 public endTime;\\n\\n    address public stakingSwapContract;\\n\\n    mapping(address => uint256) public ethCredits;\\n    \\n    event Bid(address who, uint256 amount);\\n    event Won(address who, uint256 amount);\\n\\n    IEthAddressWhitelist ethAddressWhitelistContract;\\n    IERC721 nftContract;\\n    \\n    constructor(\\n        uint256 _tokenId,\\n        address _tokenAddress,\\n        uint256 _reservePriceWei,\\n        uint256 _minimumStartTime,\\n        uint256 _stakingRewardPercentageBasisPoints,\\n        uint256 _weiIncreasePerBid,\\n        address _stakingSwapContract,\\n        address _ethWhitelistAddress,\\n        address _tokenHolder,\\n        address _propyController\\n    ) public {\\n        tokenAddress = address(_tokenAddress);\\n        tokenId = _tokenId;\\n        lastBid = _reservePriceWei;\\n        weiIncreasePerBid = _weiIncreasePerBid;\\n        stakingSwapContract = _stakingSwapContract;\\n        controller = _propyController;\\n        minimumStartTime = _minimumStartTime;\\n        deployer = msg.sender;\\n        stakingRewardPercentageBasisPoints = _stakingRewardPercentageBasisPoints;\\n        ethAddressWhitelistContract = IEthAddressWhitelist(_ethWhitelistAddress);\\n        nftContract = IERC721(_tokenAddress);\\n        tokenHolder = _tokenHolder;\\n    }\\n    \\n    function bid() public payable {\\n        // Checks\\n        require(ethAddressWhitelistContract.isWhitelisted(msg.sender), \\\"Bidder not verified, please visit propy.com/kyc\\\");\\n        require(ethCredits[msg.sender] == 0, \\\"withdraw ethCredits before bidding again\\\");\\n        require(msg.sender == tx.origin, \\\"no contracts\\\");\\n        require(block.timestamp >= minimumStartTime, \\\"Bidding has not opened\\\");\\n        \\n        // Give back the last bidders money\\n        if (winning != address(0)) {\\n            // Checks\\n            require(block.timestamp >= startTime, \\\"Auction not started\\\");\\n            require(block.timestamp < endTime, \\\"Auction ended\\\");\\n            if ((endTime - now) < 15 minutes) {\\n                endTime = now + 15 minutes;\\n            }\\n            address lastBidderMemory = winning;\\n            uint256 lastBidMemory = lastBid;\\n            require(msg.value >= lastBidMemory.add(weiIncreasePerBid), \\\"Bid too small\\\"); // % increase\\n\\n            // Effects\\n            lastBid = msg.value;\\n            winning = msg.sender;\\n\\n            // Interactions\\n            (bool returnPreviousBidSuccess, ) = lastBidderMemory.call{value: lastBidMemory}(\\\"\\\");\\n            if(!returnPreviousBidSuccess) {\\n              ethCredits[lastBidderMemory] = lastBidMemory;\\n            }\\n        } else {\\n            require(msg.value >= lastBid, \\\"Bid too small\\\"); // no increase required for reserve price to be met\\n            // First bid, reserve met, start auction\\n            startTime = block.timestamp;\\n            length = 7 hours;\\n            endTime = startTime + length;\\n            lastBid = msg.value;\\n            winning = msg.sender;\\n        }\\n\\n        emit Bid(msg.sender, msg.value);\\n    }\\n    \\n    function end() public {\\n        require(msg.sender == controller, \\\"can only be ended by controller\\\");\\n        require(!ended, \\\"end already called\\\");\\n        require(winning != address(0), \\\"no bids\\\");\\n        require(!live(), \\\"Auction live\\\");\\n\\n        // transfer erc721 to winner\\n        nftContract.safeTransferFrom(tokenHolder, winning, tokenId); // Will transfer ERC721 from current owner to new owner\\n\\n        uint256 seenFee = lastBid.mul(stakingRewardPercentageBasisPoints).div(10000);\\n\\n        (bool stakingRewardSuccess, ) = stakingSwapContract.call{value: seenFee}(\\\"\\\");\\n        require(stakingRewardSuccess, \\\"Seen Staking transfer failed.\\\");\\n\\n        (bool successPropy, ) = tokenHolder.call{value: address(this).balance}(\\\"\\\");\\n        require(successPropy, \\\"Propy payout transfer failed.\\\");\\n\\n        ended = true;\\n        emit Won(winning, lastBid);\\n    }\\n\\n    function emergencyEject() public {\\n        require(msg.sender == controller, \\\"can only be called by controller\\\");\\n\\n        (bool successPropy, ) = tokenHolder.call{value: address(this).balance}(\\\"\\\");\\n        require(successPropy, \\\"Propy payout transfer failed.\\\");\\n    }\\n\\n    function isBidderWhitelisted(address _bidder) public view returns(bool) {\\n      return ethAddressWhitelistContract.isWhitelisted(_bidder);\\n    }\\n\\n    function withdrawEthCredits() external {\\n      uint256 currentCredits = ethCredits[msg.sender];\\n      require(currentCredits > 0, \\\"no outstanding credits\\\");\\n      ethCredits[msg.sender] = 0;\\n      (bool returnEthCredits, ) = msg.sender.call{value: currentCredits}(\\\"\\\");\\n      require(returnEthCredits, \\\"failed to withdraw credits\\\");\\n    }\\n    \\n    function live() public view returns(bool) {\\n        return block.timestamp < endTime;\\n    }\\n\\n    function setStartPrice(uint256 _reservePriceWei) external {\\n      require(msg.sender == deployer, \\\"can only be set by deployer\\\");\\n      require(winning == address(0), \\\"can only be set before bidding has started\\\");\\n      lastBid = _reservePriceWei;\\n    }\\n\\n    function setControllerAddress(address _controller) external {\\n      require(msg.sender == deployer, \\\"can only be set by deployer\\\");\\n      controller = _controller;\\n    }\\n\\n    function setTokenHolderAddress(address _tokenHolder) external {\\n      require(msg.sender == deployer, \\\"can only be set by deployer\\\");\\n      tokenHolder = _tokenHolder;\\n    }\\n    \\n    function onERC721Received(address, address, uint256, bytes memory) external pure returns (bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reservePriceWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingRewardPercentageBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weiIncreasePerBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingSwapContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethWhitelistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_propyController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Won\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyEject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"isBidderWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePriceWei\",\"type\":\"uint256\"}],\"name\":\"setStartPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"setTokenHolderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardPercentageBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingSwapContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiIncreasePerBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winning\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEthCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EnglishAuctionPropyV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000020000000000000000000000002dbc375b35c5a2b6e36a386c8006168b686b70d300000000000000000000000000000000000000000000000b1cf24ddd0b1400000000000000000000000000000000000000000000000000000000000062052870000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000001c436a02ea4c17522e656f730537d68f71fab92c000000000000000000000000be2779646c64e0f7111f4dd32f3a6940b4717629000000000000000000000000749e5be4fba6608fd2a13ac32dc277b5bdda3a99000000000000000000000000da537517a477ce50103baeb06fe18ea9249c1c49", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}