{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: interfaces/IBottoStaking.sol\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface IBottoStaking {\r\n    function botto() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function totalStaked() external view returns (uint256);\r\n    function userStakes(address user) external view returns (uint256);\r\n}\r\n\r\n// File: interfaces/IERC20.sol\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n/// @title ERC20 Interface\r\n/// @dev https://eips.ethereum.org/EIPS/eip-20\r\n/// @author Andreas Bigger <andreas@nascent.xyz>\r\ninterface IERC20 {\r\n    /// @dev The circulating supply of tokens\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @dev The number of tokens owned by the account\r\n    /// @param account The address to get the balance for\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /// @dev Transfers the specified amount of tokens to the recipient from the sender\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /// @dev The amount of tokens the spender is permitted to transfer from the owner\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /// @dev Permits a spender to transfer an amount of tokens\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /// @dev Transfers tokens from the sender using the caller's allowance\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /// @dev Emitted when tokens are transfered\r\n    /// @param from The address that is sending the tokens\r\n    /// @param to The token recipient\r\n    /// @param value The number of tokens\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// @dev Emitted when an owner permits a spender\r\n    /// @param owner The token owner\r\n    /// @param spender The permitted spender\r\n    /// @param value The number of tokens\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @rari-capital/solmate/src/tokens/ERC721.sol\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\r\nabstract contract ERC721 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                          METADATA STORAGE/LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    function tokenURI(uint256 id) public view virtual returns (string memory);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERC721 STORAGE                        \r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(uint256 => address) public ownerOf;\r\n\r\n    mapping(uint256 => address) public getApproved;\r\n\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC721 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 id) public virtual {\r\n        address owner = ownerOf[id];\r\n\r\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\r\n\r\n        getApproved[id] = spender;\r\n\r\n        emit Approval(owner, spender, id);\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual {\r\n        require(from == ownerOf[id], \"WRONG_FROM\");\r\n\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(\r\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\r\n            \"NOT_AUTHORIZED\"\r\n        );\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        unchecked {\r\n            balanceOf[from]--;\r\n\r\n            balanceOf[to]++;\r\n        }\r\n\r\n        ownerOf[id] = to;\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(from, to, id);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        bytes memory data\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC165 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\r\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\r\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 id) internal virtual {\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(ownerOf[id] == address(0), \"ALREADY_MINTED\");\r\n\r\n        // Counter overflow is incredibly unrealistic.\r\n        unchecked {\r\n            balanceOf[to]++;\r\n        }\r\n\r\n        ownerOf[id] = to;\r\n\r\n        emit Transfer(address(0), to, id);\r\n    }\r\n\r\n    function _burn(uint256 id) internal virtual {\r\n        address owner = ownerOf[id];\r\n\r\n        require(ownerOf[id] != address(0), \"NOT_MINTED\");\r\n\r\n        // Ownership check above ensures no underflow.\r\n        unchecked {\r\n            balanceOf[owner]--;\r\n        }\r\n\r\n        delete ownerOf[id];\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(owner, address(0), id);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL SAFE MINT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _safeMint(address to, uint256 id) internal virtual {\r\n        _mint(to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 id,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n}\r\n\r\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: TuringKey.sol\r\n\r\n\r\npragma solidity ^0.8.11;\r\n\r\n\r\n\r\n\r\n\r\n/// @notice Too few tokens remain\r\nerror InsufficientTokensRemain();\r\n\r\n/// @notice Balance of sender is or would be over token limit per holder\r\n// @param balance Token balance\r\n// @param limit Token limit per holder\r\nerror SenderBalanceOverTokenLimit(uint256 balance, uint8 limit);\r\n\r\n/// @notice Not enough ether sent to mint\r\n/// @param cost The minimum amount of ether required to mint\r\n/// @param sent The amount of ether sent to this contract\r\nerror InsufficientFunds(uint256 cost, uint256 sent);\r\n\r\n/// @notice Supply send to update is lower than the current mints count\r\n/// @param supply Amount sent to update\r\n/// @param tokenCount Current minst amount\r\nerror SupplyLowerThanTokenCount(uint256 supply, uint256 tokenCount);\r\n\r\n/// @notice Supply send to update is lower than the current mints count\r\n/// @param supply Amount sent to update\r\n/// @param absoluteMaximumTokens hardcoded maximum number of tokens\r\nerror SupplyHigherThanAbsoluteMaximumTokens(uint256 supply, uint256 absoluteMaximumTokens);\r\n\r\n/// @notice Account trying to mint the token is not a botto staker\r\n/// @param user account sending the transaction\r\nerror UserIsNotAStaker(address user);\r\n\r\n\r\n/// @title Turing Key\r\n/// @author GoldmanDAO\r\n/// @dev Note that mint price and Token URI are updateable\r\ncontract TuringKey is ERC721, Ownable {\r\n    /// @dev BottoStaking contract\r\n    IBottoStaking private bottoStaking;\r\n\r\n    ///  @dev amount of time when the contract is going to be locked\r\n    uint256 public timelock; \r\n\r\n    /// @dev Base URI\r\n    string private internalTokenURI;\r\n\r\n    /// @dev Number of tokens\r\n    uint256 public tokenCount;\r\n\r\n    /// @notice Limit of tokens per holder\r\n    uint8 public constant HOLDER_TOKEN_LIMIT = 10;\r\n\r\n    /// @notice The maximum number of nfts to mint, not updateable\r\n    uint256 public constant ABSOLUTE_MAXIMUM_TOKENS = 969;\r\n\r\n    /// @notice The actual supply of nfts. Can be updated by the owner\r\n    uint256 public currentSupply = 200;\r\n\r\n    /// @notice Cost to mint a token\r\n    uint256 public publicSalePrice = 0.5 ether;\r\n\r\n    //////////////////////////////////////////////////\r\n    //                  MODIFIER                    //\r\n    //////////////////////////////////////////////////\r\n\r\n    /// @dev Checks mint requirements\r\n    /// -> Mint in time or pre-release authorized sender\r\n    /// -> Enough supply\r\n    /// -> Balance of target address in limits\r\n    /// -> Value sended matches price\r\n    modifier canMint(address to, uint8 amount) {\r\n        if (block.timestamp < timelock) {\r\n            if(bottoStaking.userStakes(msg.sender) == 0 || bottoStaking.userStakes(to) == 0) {\r\n                revert UserIsNotAStaker(msg.sender);\r\n            }\r\n        }\r\n        if (tokenCount + amount >= currentSupply) {\r\n            revert InsufficientTokensRemain();\r\n        }\r\n        if (balanceOf[to] + amount > HOLDER_TOKEN_LIMIT) {\r\n            revert SenderBalanceOverTokenLimit(balanceOf[to] + amount, HOLDER_TOKEN_LIMIT);\r\n        }\r\n        if (publicSalePrice * amount > msg.value) {\r\n            revert InsufficientFunds(publicSalePrice * amount, msg.value);\r\n        }\r\n        _;\r\n    }\r\n\r\n    //////////////////////////////////////////////////\r\n    //                 CONSTRUCTOR                  //\r\n    //////////////////////////////////////////////////\r\n\r\n    /// @dev Sets the ERC721 Metadata and OpenSea Proxy Registry Address\r\n    constructor(string memory _tokenURI, IBottoStaking _bottoStaking) ERC721(\"Turing Key\", \"TKEY\") {\r\n      internalTokenURI = _tokenURI;\r\n      bottoStaking = _bottoStaking;\r\n      timelock = block.timestamp + 2 days;\r\n    }\r\n\r\n    //////////////////////////////////////////////////\r\n    //                  METADATA                    //\r\n    //////////////////////////////////////////////////\r\n\r\n    /// @dev Returns the URI for the given token\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        return internalTokenURI;\r\n    }\r\n\r\n    /////////////////////////////////////////////////\r\n    //                MINTING LOGIC                 //\r\n    //////////////////////////////////////////////////\r\n\r\n    /// @notice Mint one or more tokens\r\n    /// @param to whom the token is being sent to\r\n    /// @param amount the amount of tokens to mint\r\n    function mint(address to, uint8 amount)\r\n        public\r\n        virtual\r\n        payable\r\n        canMint(to, amount) \r\n    {\r\n        for (uint8 i=0; i < amount; i++) {\r\n            tokenCount++;\r\n            _mint(to, tokenCount);\r\n        }\r\n    }\r\n\r\n    /// @notice Safe mint one or mont tokens\r\n    /// @param to whom the token is being sent to\r\n    /// @param amount the amount of tokens to mint\r\n    function safeMint(address to, uint8 amount)\r\n        public\r\n        virtual\r\n        payable\r\n        canMint(to, amount)\r\n    {\r\n        for (uint8 i=0; i < amount; i++) {\r\n            tokenCount++;\r\n            _safeMint(to, tokenCount);\r\n        }\r\n    }\r\n\r\n    /// @notice Safe mint a token\r\n    /// @param to whom the token is being sent to\r\n    /// @param data needed for the contract to be call\r\n    function safeMint(\r\n        address to,\r\n        uint8 amount,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        payable\r\n        canMint(to, amount)\r\n    {\r\n        for (uint8 i=0; i < amount; i++) {\r\n            tokenCount++;\r\n            _safeMint(to, tokenCount, data);\r\n        }\r\n    }\r\n\r\n     //////////////////////////////////////////////////\r\n    //                BURNING LOGIC                 //\r\n    //////////////////////////////////////////////////\r\n\r\n    function burn(uint256 tokenId) public virtual {\r\n        _burn(tokenId);\r\n    }\r\n\r\n    //////////////////////////////////////////////////\r\n    //                 ADMIN LOGIC                  //\r\n    //////////////////////////////////////////////////\r\n\r\n    /// @notice Sets the tokenURI for the membership\r\n    function setInternalTokenURI(string memory _internalTokenURI) external onlyOwner {\r\n        internalTokenURI = _internalTokenURI;\r\n    }\r\n\r\n    /// @dev Allows the owner to update the amount of memberships to be minted\r\n    function updateCurrentSupply(uint256 _supply) public onlyOwner {\r\n        if (_supply > ABSOLUTE_MAXIMUM_TOKENS) {\r\n            revert SupplyHigherThanAbsoluteMaximumTokens(_supply, ABSOLUTE_MAXIMUM_TOKENS);\r\n        } \r\n        if (_supply < tokenCount) {\r\n            revert SupplyLowerThanTokenCount(_supply, tokenCount);\r\n        }\r\n        currentSupply = _supply;\r\n    }\r\n\r\n    /// @dev Allows the owner to change the prize of the membership \r\n    function setPublicSalePrice(uint256 _publicSalePrice) public onlyOwner {\r\n      publicSalePrice = _publicSalePrice;\r\n    }\r\n\r\n    /// @dev Allows the owner to withdraw eth\r\n    function withdraw() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    /// @dev Allows the owner to withdraw any erc20 tokens sent to this contract\r\n    function withdrawTokens(IERC20 token) public onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, balance);\r\n    }\r\n\r\n    //////////////////////////////////////////////////\r\n    //                 ROYALTIES                    //\r\n    //////////////////////////////////////////////////\r\n    // @dev Support for EIP 2981 Interface by overriding erc165 supportsInterface\r\n    // function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\r\n    //     return\r\n    //         interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\r\n    //         interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\r\n    //         interfaceId == 0x5b5e139f || // ERC165 Interface ID for ERC721Metadata\r\n    //         interfaceId == 0x2a55205a;  // ERC165 Interface ID for ERC2981\r\n    // }\r\n\r\n    /// @dev Royalter information\r\n    // function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n    //     external\r\n    //     view\r\n    //     returns (address receiver, uint256 royaltyAmount)\r\n    // {\r\n    //     receiver = address(this);\r\n    //     royaltyAmount = (salePrice * 5) / 100;\r\n    // }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"contract IBottoStaking\",\"name\":\"_bottoStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokensRemain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"SenderBalanceOverTokenLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"absoluteMaximumTokens\",\"type\":\"uint256\"}],\"name\":\"SupplyHigherThanAbsoluteMaximumTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"SupplyLowerThanTokenCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserIsNotAStaker\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ABSOLUTE_MAXIMUM_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOLDER_TOKEN_LIMIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_internalTokenURI\",\"type\":\"string\"}],\"name\":\"setInternalTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicSalePrice\",\"type\":\"uint256\"}],\"name\":\"setPublicSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"updateCurrentSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TuringKey", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000019cd3998f106ecc40ee7668c19c47e18b491e8a6000000000000000000000000000000000000000000000000000000000000004368747470733a2f2f697066732e696f2f697066732f516d51624e7577705939624b4c4c5356716e47567050506135776363576144696566614c42585062424d6a32344c0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://824a17b1d1adea2b7f76dfc48fb548e99f0b4d60a570036db9b09d464d800c04"}]}