{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/SnapshotToke.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"../interfaces/IDelegateFunction.sol\\\";\\nimport \\\"../interfaces/ILiquidityPool.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/structs/DelegateMapView.sol\\\";\\n\\ncontract SnapshotToke is IERC20, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeMath for uint256;\\n\\n    uint256 private constant SUPPLY = 100_000_000e18;\\n    uint8 private constant DECIMALS = 18;\\n    string private constant NAME = \\\"Tokemak Snapshot Vote\\\";\\n    string private constant SYMBOL = \\\"vTOKE\\\";\\n    bytes32 private constant VOTING_FUNCTION = \\\"voting\\\";\\n\\n    IERC20 private immutable sushiLPPool;\\n    IStaking private immutable staking;\\n    IDelegateFunction private immutable delegation;\\n    IERC20 private immutable toke;\\n\\n    IERC20 private immutable sushiLP;\\n\\n    /// @dev to => from[]\\n    mapping(address => EnumerableSet.AddressSet) private delegationsTo;\\n\\n    /// @dev from => true/false\\n    mapping(address => bool) private delegatedAway;\\n\\n    constructor(\\n        address _sushiLPPool,\\n        address _staking,\\n        address _delegation,\\n        address _toke\\n    ) public {\\n        require(_sushiLPPool != address(0), \\\"ZERO_ADDRESS_SUSHILP\\\");\\n        require(_staking != address(0), \\\"ZERO_ADDRESS_STAKING\\\");\\n        require(_delegation != address(0), \\\"ZERO_ADDRESS_DELEGATION\\\");\\n        require(_toke != address(0), \\\"ZERO_ADDRESS_TOKE\\\");\\n\\n        sushiLPPool = IERC20(_sushiLPPool);\\n        staking = IStaking(_staking);\\n        delegation = IDelegateFunction(_delegation);\\n        toke = IERC20(_toke);\\n\\n        sushiLP = IERC20(address(ILiquidityPool(_sushiLPPool).underlyer()));\\n    }\\n\\n    event DelegationSetup(address indexed from, address indexed to, address indexed sender);\\n    event DelegationRemoved(address indexed from, address indexed to, address indexed sender);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view override returns (uint256 bal) {\\n        // See if they've setup a delegation locally\\n        bool delegatedAway = delegatedAway[account];\\n\\n        if (delegatedAway) {\\n            // Ensure the delegate away is still valid\\n            DelegateMapView memory delegationFrom = delegation.getDelegation(\\n                account,\\n                VOTING_FUNCTION\\n            );\\n            delegatedAway = delegationFrom.otherParty != address(0) && !delegationFrom.pending;\\n        }\\n\\n        if (!delegatedAway) {\\n            // Get TOKE directly assigned to this wallet\\n            bal = getBalance(account);\\n\\n            // Get TOKE balance from delegated accounts\\n            EnumerableSet.AddressSet storage delegations = delegationsTo[account];\\n            uint256 length = delegations.length();\\n            for (uint256 i = 0; i < length; i++) {\\n                address delegatedFrom = delegations.at(i);\\n\\n                //Ensure the delegation to account is still valid\\n                DelegateMapView memory queriedDelegation = delegation.getDelegation(\\n                    delegatedFrom,\\n                    VOTING_FUNCTION\\n                );\\n                if (queriedDelegation.otherParty == account && !queriedDelegation.pending) {\\n                    bal = bal.add(getBalance(delegatedFrom));\\n                }\\n            }\\n        }\\n    }\\n\\n    function addDelegations(address[] memory from, address[] memory to) external onlyOwner {\\n        uint256 length = from.length;\\n        require(length > 0, \\\"ZERO_LENGTH\\\");\\n        require(length == to.length, \\\"MISMATCH_LENGTH\\\");\\n        for (uint256 i = 0; i < length; i++) {\\n            _addDelegation(from[i], to[i]);\\n        }\\n    }\\n\\n    function removeDelegations(address[] memory from, address[] memory to) external onlyOwner {\\n        uint256 length = from.length;\\n        require(length > 0, \\\"ZERO_LENGTH\\\");\\n        require(length == to.length, \\\"MISMATCH_LENGTH\\\");\\n        for (uint256 i = 0; i < length; i++) {\\n            _removeDelegation(from[i], to[i]);\\n        }\\n    }\\n\\n    function addDelegation(address from, address to) external onlyOwner {\\n        _addDelegation(from, to);\\n    }\\n\\n    function removeDelegation(address from, address to) external onlyOwner {\\n        _removeDelegation(from, to);\\n    }\\n\\n    function name() public view virtual returns (string memory) {\\n        return NAME;\\n    }\\n\\n    function symbol() public view virtual returns (string memory) {\\n        return SYMBOL;\\n    }\\n\\n    function decimals() public view virtual returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return SUPPLY;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     */\\n    function transfer(address, uint256) external override returns (bool) {\\n        revert(\\\"NO_TRANSFERS_ALLOWED\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     */\\n    function allowance(address, address) external view override returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     */\\n    function approve(address, uint256) external override returns (bool) {\\n        revert(\\\"NO_TRANSFERS_ALLOWED\\\");\\n    }\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     */\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external override returns (bool) {\\n        revert(\\\"NO_TRANSFERS_ALLOWED\\\");\\n    }\\n\\n    /// @notice Returns straight balance of the account. No delegations considered\\n    /// @param account Account to check\\n    /// @return bal Balance across all valid areas\\n    function getBalance(address account) private view returns (uint256 bal) {\\n        // Get TOKE sitting in their wallet\\n        bal = toke.balanceOf(account);\\n\\n        // Get staked TOKE either liquid or vesting\\n        bal = bal.add(staking.balanceOf(account));\\n\\n        // Get TOKE from SUSHI LP\\n        uint256 stakedSushiLP = sushiLPPool.balanceOf(account);\\n        if (stakedSushiLP > 0) {\\n            uint256 sushiLPTotalSupply = sushiLP.totalSupply();\\n            uint256 tokeInSushiPool = toke.balanceOf(address(sushiLP));\\n            bal = bal.add(stakedSushiLP.mul(tokeInSushiPool).div(sushiLPTotalSupply));\\n        }\\n    }\\n\\n    function _addDelegation(address from, address to) private {\\n        DelegateMapView memory queriedDelegation = delegation.getDelegation(from, VOTING_FUNCTION);\\n        require(from != address(0), \\\"INVALID_FROM\\\");\\n        require(to != address(0), \\\"INVALID_TO\\\");\\n        require(queriedDelegation.otherParty == to, \\\"INVALID_DELEGATION\\\");\\n        require(queriedDelegation.pending == false, \\\"DELEGATION_PENDING\\\");\\n        require(delegationsTo[to].add(from), \\\"ALREADY_ADDED\\\");\\n        require(delegatedAway[from] == false, \\\"ALREADY_DELEGATED\\\");\\n\\n        delegatedAway[from] = true;\\n\\n        emit DelegationSetup(from, to, msg.sender);\\n    }\\n\\n    function _removeDelegation(address from, address to) private {\\n        require(from != address(0), \\\"INVALID_FROM\\\");\\n        require(to != address(0), \\\"INVALID_TO\\\");\\n        require(delegationsTo[to].remove(from), \\\"DOES_NOT_EXIST\\\");\\n        require(delegatedAway[from], \\\"NOT_DELEGATED_FROM\\\");\\n\\n        delegatedAway[from] = false;\\n\\n        emit DelegationRemoved(from, to, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDelegateFunction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./structs/DelegateMapView.sol\\\";\\nimport \\\"./structs/Signature.sol\\\";\\n\\n/**\\n *   @title Manages the state of an accounts delegation settings.\\n *   Allows for various methods of validation as well as enabling\\n *   different system functions to be delegated to different accounts\\n */\\ninterface IDelegateFunction {\\n    struct AllowedFunctionSet {\\n        bytes32 id;\\n    }\\n\\n    struct FunctionsListPayload {\\n        bytes32[] sets;\\n        uint256 nonce;\\n    }\\n\\n    struct DelegatePayload {\\n        DelegateMap[] sets;\\n        uint256 nonce;\\n    }\\n\\n    struct DelegateMap {\\n        bytes32 functionId;\\n        address otherParty;\\n        bool mustRelinquish;\\n    }\\n\\n    struct Destination {\\n        address otherParty;\\n        bool mustRelinquish;\\n        bool pending;\\n    }\\n\\n    struct DelegatedTo {\\n        address originalParty;\\n        bytes32 functionId;\\n    }\\n\\n    event AllowedFunctionsSet(AllowedFunctionSet[] functions);\\n    event PendingDelegationAdded(address from, address to, bytes32 functionId, bool mustRelinquish);\\n    event PendingDelegationRemoved(\\n        address from,\\n        address to,\\n        bytes32 functionId,\\n        bool mustRelinquish\\n    );\\n    event DelegationRemoved(address from, address to, bytes32 functionId, bool mustRelinquish);\\n    event DelegationRelinquished(address from, address to, bytes32 functionId, bool mustRelinquish);\\n    event DelegationAccepted(address from, address to, bytes32 functionId, bool mustRelinquish);\\n    event DelegationRejected(address from, address to, bytes32 functionId, bool mustRelinquish);\\n\\n    /// @notice Pause all delegating operations\\n    function pause() external;\\n\\n    /// @notice Unpause all delegating operations\\n    function unpause() external;\\n\\n    /// @notice Get the current nonce a contract wallet should use\\n    /// @param account Account to query\\n    /// @return nonce Nonce that should be used for next call\\n    function contractWalletNonces(address account) external returns (uint256 nonce);\\n\\n    /// @notice Get an accounts current delegations\\n    /// @dev These may be in a pending state\\n    /// @param from Account that is delegating functions away\\n    /// @return maps List of delegations in various states of approval\\n    function getDelegations(address from) external view returns (DelegateMapView[] memory maps);\\n\\n    /// @notice Get an accounts delegation of a specific function\\n    /// @dev These may be in a pending state\\n    /// @param from Account that is the delegation functions away\\n    /// @return map Delegation info\\n    function getDelegation(address from, bytes32 functionId)\\n        external\\n        view\\n        returns (DelegateMapView memory map);\\n\\n    /// @notice Initiate delegation of one or more system functions to different account(s)\\n    /// @param sets Delegation instructions for the contract to initiate\\n    function delegate(DelegateMap[] memory sets) external;\\n\\n    /// @notice Initiate delegation on behalf of a contract that supports ERC1271\\n    /// @param contractAddress Address of the ERC1271 contract used to verify the given signature\\n    /// @param delegatePayload Sets of DelegateMap objects\\n    /// @param signature Signature data\\n    /// @param signatureType Type of signature used (EIP712|EthSign)\\n    function delegateWithEIP1271(\\n        address contractAddress,\\n        DelegatePayload memory delegatePayload,\\n        bytes memory signature,\\n        SignatureType signatureType\\n    ) external;\\n\\n    /// @notice Accept one or more delegations from another account\\n    /// @param incoming Delegation details being accepted\\n    function acceptDelegation(DelegatedTo[] calldata incoming) external;\\n\\n    /// @notice Remove one or more delegation that you have previously setup\\n    function removeDelegation(bytes32[] calldata functionIds) external;\\n\\n    /// @notice Remove one or more delegations that you have previously setup on behalf of a contract supporting EIP1271\\n    /// @param contractAddress Address of the ERC1271 contract used to verify the given signature\\n    /// @param functionsListPayload Sets of FunctionListPayload objects ({sets: bytes32[]})\\n    /// @param signature Signature data\\n    /// @param signatureType Type of signature used (EIP712|EthSign)\\n    function removeDelegationWithEIP1271(\\n        address contractAddress,\\n        FunctionsListPayload calldata functionsListPayload,\\n        bytes memory signature,\\n        SignatureType signatureType\\n    ) external;\\n\\n    /// @notice Reject one or more delegations being sent to you\\n    /// @param rejections Delegations to reject\\n    function rejectDelegation(DelegatedTo[] calldata rejections) external;\\n\\n    /// @notice Remove one or more delegations that you have previously accepted\\n    function relinquishDelegation(DelegatedTo[] calldata relinquish) external;\\n\\n    /// @notice Cancel one or more delegations you have setup but that has not yet been accepted\\n    /// @param functionIds System functions you wish to retain control of\\n    function cancelPendingDelegation(bytes32[] calldata functionIds) external;\\n\\n    /// @notice Cancel one or more delegations you have setup on behalf of a contract that supported EIP1271, but that has not yet been accepted\\n    /// @param contractAddress Address of the ERC1271 contract used to verify the given signature\\n    /// @param functionsListPayload Sets of FunctionListPayload objects ({sets: bytes32[]})\\n    /// @param signature Signature data\\n    /// @param signatureType Type of signature used (EIP712|EthSign)\\n    function cancelPendingDelegationWithEIP1271(\\n        address contractAddress,\\n        FunctionsListPayload calldata functionsListPayload,\\n        bytes memory signature,\\n        SignatureType signatureType\\n    ) external;\\n\\n    /// @notice Add to the list of system functions that are allowed to be delegated\\n    /// @param functions New system function ids\\n    function setAllowedFunctions(AllowedFunctionSet[] calldata functions) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\n\\n/// @title Interface for Pool\\n/// @notice Allows users to deposit ERC-20 tokens to be deployed to market makers.\\n/// @notice Mints 1:1 tAsset on deposit, represeting an IOU for the undelrying token that is freely transferable.\\n/// @notice Holders of tAsset earn rewards based on duration their tokens were deployed and the demand for that asset.\\n/// @notice Holders of tAsset can redeem for underlying asset after issuing requestWithdrawal and waiting for the next cycle.\\ninterface ILiquidityPool {\\n    struct WithdrawalInfo {\\n        uint256 minCycle;\\n        uint256 amount;\\n    }\\n\\n    event WithdrawalRequested(address requestor, uint256 amount);\\n    event DepositsPaused();\\n    event DepositsUnpaused();\\n    event BurnerRegistered(address burner, bool allowed);\\n    event Burned(address indexed account, address indexed burner, uint256 amount);\\n\\n    /// @notice Transfers amount of underlying token from user to this pool and mints fToken to the msg.sender.\\n    /// @notice Depositor must have previously granted transfer approval to the pool via underlying token contract.\\n    /// @notice Liquidity deposited is deployed on the next cycle - unless a withdrawal request is submitted, in which case the liquidity will be withheld.\\n    function deposit(uint256 amount) external;\\n\\n    /// @notice Transfers amount of underlying token from user to this pool and mints fToken to the account.\\n    /// @notice Depositor must have previously granted transfer approval to the pool via underlying token contract.\\n    /// @notice Liquidity deposited is deployed on the next cycle - unless a withdrawal request is submitted, in which case the liquidity will be withheld.\\n    function depositFor(address account, uint256 amount) external;\\n\\n    /// @notice Requests that the manager prepare funds for withdrawal next cycle\\n    /// @notice Invoking this function when sender already has a currently pending request will overwrite that requested amount and reset the cycle timer\\n    /// @param amount Amount of fTokens requested to be redeemed\\n    function requestWithdrawal(uint256 amount) external;\\n\\n    function approveManager(uint256 amount) external;\\n\\n    /// @notice Sender must first invoke requestWithdrawal in a previous cycle\\n    /// @notice This function will burn the fAsset and transfers underlying asset back to sender\\n    /// @notice Will execute a partial withdrawal if either available liquidity or previously requested amount is insufficient\\n    /// @param amount Amount of fTokens to redeem, value can be in excess of available tokens, operation will be reduced to maximum permissible\\n    function withdraw(uint256 amount) external;\\n\\n    /// @return Reference to the underlying ERC-20 contract\\n    function underlyer() external view returns (ERC20Upgradeable);\\n\\n    /// @return Amount of liquidity that should not be deployed for market making (this liquidity will be used for completing requested withdrawals)\\n    function withheldLiquidity() external view returns (uint256);\\n\\n    /// @notice Get withdraw requests for an account\\n    /// @param account User account to check\\n    /// @return minCycle Cycle - block number - that must be active before withdraw is allowed, amount Token amount requested\\n    function requestedWithdrawals(address account) external view returns (uint256, uint256);\\n\\n    /// @notice Pause deposits on the pool. Withdraws still allowed\\n    function pause() external;\\n\\n    /// @notice Unpause deposits on the pool.\\n    function unpause() external;\\n\\n    // @notice Pause deposits only on the pool.\\n    function pauseDeposit() external;\\n\\n    // @notice Unpause deposits only on the pool.\\n    function unpauseDeposit() external;\\n\\n    ///@notice Registers address that is allowed or not allowed to burn \\n    ///@dev Address registered as 'true' will be able to burn tAssets in its possession or that it has an allowance to\\n    ///@param burner Address that will be able / not able to burn tAssets\\n    ///@param allowedBurner Boolean that will register burner address as able to burn or not\\n    function registerBurner(address burner, bool allowedBurner) external;\\n\\n    ///@notice Function allows address to burn tAssets in its posession\\n    ///@dev Address can burn all tAssets in its posession\\n    ///@dev Overages are prevented by interited functionality from _burn()\\n    ///@param amount Amount of tAsset to be burned\\n    ///@param account Address to be burned from\\n    function controlledBurn(uint256 amount, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n *  @title Allows for the staking and vesting of TOKE for\\n *  liquidity directors. Schedules can be added to enable various\\n *  cliff+duration/interval unlock periods for vesting tokens.\\n */\\ninterface IStaking {\\n    struct StakingSchedule {\\n        uint256 cliff; // Duration in seconds before staking starts\\n        uint256 duration; // Seconds it takes for entire amount to stake\\n        uint256 interval; // Seconds it takes for a chunk to stake\\n        bool setup; //Just so we know its there\\n        bool isActive; //Whether we can setup new stakes with the schedule\\n        uint256 hardStart; //Stakings will always start at this timestamp if set\\n        bool isPublic; //Schedule can be written to by any account\\n    }\\n\\n    struct StakingScheduleInfo {\\n        StakingSchedule schedule;\\n        uint256 index;\\n    }\\n\\n    struct StakingDetails {\\n        uint256 initial; //Initial amount of asset when stake was created, total amount to be staked before slashing\\n        uint256 withdrawn; //Amount that was staked and subsequently withdrawn\\n        uint256 slashed; //Amount that has been slashed\\n        uint256 started; //Timestamp at which the stake started\\n        uint256 scheduleIx;\\n    }\\n\\n    struct WithdrawalInfo {\\n        uint256 minCycleIndex;\\n        uint256 amount;\\n    }\\n\\n    struct QueuedTransfer {\\n        address from;\\n        uint256 scheduleIdxFrom;\\n        uint256 scheduleIdxTo;\\n        uint256 amount;\\n        address to;\\n        uint256 minCycle;\\n    }\\n\\n    event ScheduleAdded(\\n        uint256 scheduleIndex,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 interval,\\n        bool setup,\\n        bool isActive,\\n        uint256 hardStart,\\n        address notional\\n    );\\n    event ScheduleRemoved(uint256 scheduleIndex);\\n    event WithdrawalRequested(address account, uint256 scheduleIdx, uint256 amount);\\n    event WithdrawCompleted(address account, uint256 scheduleIdx, uint256 amount);\\n    event Deposited(address account, uint256 amount, uint256 scheduleIx);\\n    event Slashed(address account, uint256 amount, uint256 scheduleIx);\\n    event PermissionedDepositorSet(address depositor, bool allowed);\\n    event UserSchedulesSet(address account, uint256[] userSchedulesIdxs);\\n    event NotionalAddressesSet(uint256[] scheduleIdxs, address[] addresses);\\n    event ScheduleStatusSet(uint256 scheduleId, bool isActive);\\n    event StakeTransferred(\\n        address from,\\n        uint256 scheduleFrom,\\n        uint256 scheduleTo,\\n        uint256 amount,\\n        address to\\n    );\\n    event ZeroSweep(address user, uint256 amount, uint256 scheduleFrom);\\n    event TransferApproverSet(address approverAddress);\\n    event TransferQueued(\\n        address from,\\n        uint256 scheduleFrom,\\n        uint256 scheduleTo,\\n        uint256 amount,\\n        address to,\\n        uint256 minCycle\\n    );\\n    event QueuedTransferRemoved(\\n        address from,\\n        uint256 scheduleFrom,\\n        uint256 scheduleTo,\\n        uint256 amount,\\n        address to,\\n        uint256 minCycle\\n    );\\n    event QueuedTransferRejected(\\n        address from,\\n        uint256 scheduleFrom,\\n        uint256 scheduleTo,\\n        uint256 amount,\\n        address to,\\n        uint256 minCycle,\\n        address rejectedBy\\n    );\\n\\n    /// @notice Get a queued higher level schedule transfers\\n    /// @param fromAddress Account that initiated the transfer\\n    /// @param fromScheduleId Schedule they are transferring out of\\n    /// @return Details about the transfer\\n    function getQueuedTransfer(address fromAddress, uint256 fromScheduleId)\\n        external\\n        view\\n        returns (QueuedTransfer memory);\\n\\n    /// @notice Get the current transfer approver\\n    /// @return Transfer approver address\\n    function transferApprover() external returns (address);\\n\\n    ///@notice Allows for checking of user address in permissionedDepositors mapping\\n    ///@param account Address of account being checked\\n    ///@return Boolean, true if address exists in mapping\\n    function permissionedDepositors(address account) external returns (bool);\\n\\n    ///@notice Allows owner to set a multitude of schedules that an address has access to\\n    ///@param account User address\\n    ///@param userSchedulesIdxs Array of schedule indexes\\n    function setUserSchedules(address account, uint256[] calldata userSchedulesIdxs) external;\\n\\n    ///@notice Allows owner to add schedule\\n    ///@param schedule A StakingSchedule struct that contains all info needed to make a schedule\\n    ///@param notional Notional addrss for schedule, used to send balances to L2 for voting purposes\\n    function addSchedule(StakingSchedule memory schedule, address notional) external;\\n\\n    ///@notice Gets all info on all schedules\\n    ///@return retSchedules An array of StakingScheduleInfo struct\\n    function getSchedules() external view returns (StakingScheduleInfo[] memory retSchedules);\\n\\n    ///@notice Allows owner to set a permissioned depositor\\n    ///@param account User address\\n    ///@param canDeposit Boolean representing whether user can deposit\\n    function setPermissionedDepositor(address account, bool canDeposit) external;\\n\\n    ///@notice Allows a user to get the stakes of an account\\n    ///@param account Address that is being checked for stakes\\n    ///@return stakes StakingDetails array containing info about account's stakes\\n    function getStakes(address account) external view returns (StakingDetails[] memory stakes);\\n\\n    ///@notice Gets total value staked for an address across all schedules\\n    ///@param account Address for which total stake is being calculated\\n    ///@return value uint256 total of account\\n    function balanceOf(address account) external view returns (uint256 value);\\n\\n    ///@notice Returns amount available to withdraw for an account and schedule Index\\n    ///@param account Address that is being checked for withdrawals\\n    ///@param scheduleIndex Index of schedule that is being checked for withdrawals\\n    function availableForWithdrawal(address account, uint256 scheduleIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    ///@notice Returns unvested amount for certain address and schedule index\\n    ///@param account Address being checked for unvested amount\\n    ///@param scheduleIndex Schedule index being checked for unvested amount\\n    ///@return value Uint256 representing unvested amount\\n    function unvested(address account, uint256 scheduleIndex) external view returns (uint256 value);\\n\\n    ///@notice Returns vested amount for address and schedule index\\n    ///@param account Address being checked for vested amount\\n    ///@param scheduleIndex Schedule index being checked for vested amount\\n    ///@return value Uint256 vested\\n    function vested(address account, uint256 scheduleIndex) external view returns (uint256 value);\\n\\n    ///@notice Allows user to deposit token to specific vesting / staking schedule\\n    ///@param amount Uint256 amount to be deposited\\n    ///@param scheduleIndex Uint256 representing schedule to user\\n    function deposit(uint256 amount, uint256 scheduleIndex) external;\\n\\n    /// @notice Allows users to deposit into 0 schedule\\n    /// @param amount Deposit amount\\n    function deposit(uint256 amount) external;\\n\\n    ///@notice Allows account to deposit on behalf of other account\\n    ///@param account Account to be deposited for\\n    ///@param amount Amount to be deposited\\n    ///@param scheduleIndex Index of schedule to be used for deposit\\n    function depositFor(\\n        address account,\\n        uint256 amount,\\n        uint256 scheduleIndex\\n    ) external;\\n\\n    ///@notice User can request withdrawal from staking contract at end of cycle\\n    ///@notice Performs checks to make sure amount <= amount available\\n    ///@param amount Amount to withdraw\\n    ///@param scheduleIdx Schedule index for withdrawal Request\\n    function requestWithdrawal(uint256 amount, uint256 scheduleIdx) external;\\n\\n    ///@notice Allows for withdrawal after successful withdraw request and proper amount of cycles passed\\n    ///@param amount Amount to withdraw\\n    ///@param scheduleIdx Schedule to withdraw from\\n    function withdraw(uint256 amount, uint256 scheduleIdx) external;\\n\\n    /// @notice Allows owner to set schedule to active or not\\n    /// @param scheduleIndex Schedule index to set isActive boolean\\n    /// @param activeBoolean Bool to set schedule active or not\\n    function setScheduleStatus(uint256 scheduleIndex, bool activeBoolean) external;\\n\\n    /// @notice Pause deposits on the pool. Withdraws still allowed\\n    function pause() external;\\n\\n    /// @notice Unpause deposits on the pool.\\n    function unpause() external;\\n\\n    /// @notice Used to slash user funds when needed\\n    /// @notice accounts and amounts arrays must be same length\\n    /// @notice Only one scheduleIndex can be slashed at a time\\n    /// @dev Implementation must be restructed to owner account\\n    /// @param accounts Array of accounts to slash\\n    /// @param amounts Array of amounts that corresponds with accounts\\n    /// @param scheduleIndex scheduleIndex of users that are being slashed\\n    function slash(\\n        address[] calldata accounts,\\n        uint256[] calldata amounts,\\n        uint256 scheduleIndex\\n    ) external;\\n\\n    /// @notice Allows user to transfer stake to another address\\n    /// @param scheduleFrom, schedule stake being transferred from\\n    /// @param scheduleTo, schedule stake being transferred to\\n    /// @param amount, Amount to be transferred to new address and schedule\\n    /// @param to, Address to be transferred to\\n    function queueTransfer(\\n        uint256 scheduleFrom,\\n        uint256 scheduleTo,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    /// @notice Allows user to remove queued transfer\\n    /// @param scheduleIdxFrom scheduleIdx being transferred from\\n    function removeQueuedTransfer(uint256 scheduleIdxFrom) external;\\n\\n    /// @notice Set the address used to denote the token amount for a particular schedule\\n    /// @dev Relates to the Balance Tracker tracking of tokens and balances. Each schedule is tracked separately\\n    function setNotionalAddresses(uint256[] calldata scheduleIdxArr, address[] calldata addresses)\\n        external;\\n\\n    /// @notice For tokens in higher level schedules, move vested amounts to the default schedule\\n    /// @notice Allows for full voting weight to be applied when tokens have vested\\n    /// @param scheduleIdx Schedule to sweep tokens from\\n    /// @param amount Amount to sweep to default schedule\\n    function sweepToScheduleZero(uint256 scheduleIdx, uint256 amount) external;\\n\\n    /// @notice Set the approver for higher schedule transfers\\n    /// @param approver New transfer approver\\n    function setTransferApprover(address approver) external;\\n\\n    /// @notice Withdraw from the default schedule. Must have a request in previously\\n    /// @param amount Amount to withdraw\\n    function withdraw(uint256 amount) external;\\n\\n    /// @notice Allows transfeApprover to reject a submitted transfer\\n    /// @param from address queued transfer is from\\n    /// @param scheduleIdxFrom Schedule index of queued transfer\\n    function rejectQueuedTransfer(address from, uint256 scheduleIdxFrom) external;\\n\\n    /// @notice Approve a queued transfer from a higher level schedule\\n    /// @param from address that queued the transfer\\n    /// @param scheduleIdxFrom Schedule index of queued transfer\\n    /// @param scheduleIdxTo Schedule index of destination\\n    /// @param amount Amount being transferred\\n    /// @param to Destination account\\n    function approveQueuedTransfer(\\n        address from,\\n        uint256 scheduleIdxFrom,\\n        uint256 scheduleIdxTo,\\n        uint256 amount,\\n        address to\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/structs/DelegateMapView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/// @notice Stores votes and rewards delegation mapping in DelegateFunction\\nstruct DelegateMapView {\\n    bytes32 functionId;\\n    address otherParty;\\n    bool mustRelinquish;\\n    bool pending;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/structs/Signature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\n/// @notice Denotes the type of signature being submitted to contracts that support multiple\\nenum SignatureType {\\n    INVALID,\\n    // Specifically signTypedData_v4\\n    EIP712,\\n    // Specifically personal_sign\\n    ETHSIGN\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n *  @title Controls the transition and execution of liquidity deployment cycles.\\n *  Accepts instructions that can move assets from the Pools to the Exchanges\\n *  and back. Can also move assets to the treasury when appropriate.\\n */\\ninterface IManager {\\n    // bytes can take on the form of deploying or recovering liquidity\\n    struct ControllerTransferData {\\n        bytes32 controllerId; // controller to target\\n        bytes data; // data the controller will pass\\n    }\\n\\n    struct PoolTransferData {\\n        address pool; // pool to target\\n        uint256 amount; // amount to transfer\\n    }\\n\\n    struct MaintenanceExecution {\\n        ControllerTransferData[] cycleSteps;\\n    }\\n\\n    struct RolloverExecution {\\n        PoolTransferData[] poolData;\\n        ControllerTransferData[] cycleSteps;\\n        address[] poolsForWithdraw; //Pools to target for manager -> pool transfer\\n        bool complete; //Whether to mark the rollover complete\\n        string rewardsIpfsHash;\\n    }\\n\\n    event ControllerRegistered(bytes32 id, address controller);\\n    event ControllerUnregistered(bytes32 id, address controller);\\n    event PoolRegistered(address pool);\\n    event PoolUnregistered(address pool);\\n    event CycleDurationSet(uint256 duration);\\n    event LiquidityMovedToManager(address pool, uint256 amount);\\n    event DeploymentStepExecuted(bytes32 controller, address adapaterAddress, bytes data);\\n    event LiquidityMovedToPool(address pool, uint256 amount);\\n    event CycleRolloverStarted(uint256 timestamp);\\n    event CycleRolloverComplete(uint256 timestamp);\\n    event NextCycleStartSet(uint256 nextCycleStartTime);\\n    event ManagerSwept(address[] addresses, uint256[] amounts);\\n\\n    /// @notice Registers controller\\n    /// @param id Bytes32 id of controller\\n    /// @param controller Address of controller\\n    function registerController(bytes32 id, address controller) external;\\n\\n    /// @notice Registers pool\\n    /// @param pool Address of pool\\n    function registerPool(address pool) external;\\n\\n    /// @notice Unregisters controller\\n    /// @param id Bytes32 controller id\\n    function unRegisterController(bytes32 id) external;\\n\\n    /// @notice Unregisters pool\\n    /// @param pool Address of pool\\n    function unRegisterPool(address pool) external;\\n\\n    ///@notice Gets addresses of all pools registered\\n    ///@return Memory array of pool addresses\\n    function getPools() external view returns (address[] memory);\\n\\n    ///@notice Gets ids of all controllers registered\\n    ///@return Memory array of Bytes32 controller ids\\n    function getControllers() external view returns (bytes32[] memory);\\n\\n    ///@notice Allows for owner to set cycle duration\\n    ///@param duration Block durtation of cycle\\n    function setCycleDuration(uint256 duration) external;\\n\\n    ///@notice Starts cycle rollover\\n    ///@dev Sets rolloverStarted state boolean to true\\n    function startCycleRollover() external;\\n\\n    ///@notice Allows for controller commands to be executed midcycle\\n    ///@param params Contains data for controllers and params\\n    function executeMaintenance(MaintenanceExecution calldata params) external;\\n\\n    ///@notice Allows for withdrawals and deposits for pools along with liq deployment\\n    ///@param params Contains various data for executing against pools and controllers\\n    function executeRollover(RolloverExecution calldata params) external;\\n\\n    ///@notice Completes cycle rollover, publishes rewards hash to ipfs\\n    ///@param rewardsIpfsHash rewards hash uploaded to ipfs\\n    function completeRollover(string calldata rewardsIpfsHash) external;\\n\\n    ///@notice Gets reward hash by cycle index\\n    ///@param index Cycle index to retrieve rewards hash\\n    ///@return String memory hash\\n    function cycleRewardsHashes(uint256 index) external view returns (string memory);\\n\\n    ///@notice Gets current starting block\\n    ///@return uint256 with block number\\n    function getCurrentCycle() external view returns (uint256);\\n\\n    ///@notice Gets current cycle index\\n    ///@return uint256 current cycle number\\n    function getCurrentCycleIndex() external view returns (uint256);\\n\\n    ///@notice Gets current cycle duration\\n    ///@return uint256 in block of cycle duration\\n    function getCycleDuration() external view returns (uint256);\\n\\n    ///@notice Gets cycle rollover status, true for rolling false for not\\n    ///@return Bool representing whether cycle is rolling over or not\\n    function getRolloverStatus() external view returns (bool);\\n\\n    /// @notice Sets next cycle start time manually\\n    /// @param nextCycleStartTime uint256 that represents start of next cycle\\n    function setNextCycleStartTime(uint256 nextCycleStartTime) external;\\n\\n    /// @notice Sweeps amanager contract for any leftover funds\\n    /// @param addresses array of addresses of pools to sweep funds into\\n    function sweep(address[] calldata addresses) external;\\n\\n    /// @notice Setup a role using internal function _setupRole\\n    /// @param role keccak256 of the role keccak256(\\\"MY_ROLE\\\");\\n    function setupRole(bytes32 role) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sushiLPPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toke\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DelegationRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DelegationSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"addDelegations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"removeDelegations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SnapshotToke", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "0000000000000000000000008858a739ea1dd3d80fe577ef4e0d03e88561faa300000000000000000000000096f98ed74639689c3a11daf38ef86e59f43417d30000000000000000000000003bc59a43d82c1acf3a597652eadd3a02082d36710000000000000000000000002e9d63788249371f1dfc918a52f8d799f4a38c94", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}