{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Vesting.sol\\\";\\nimport \\\"./LiquidityReserve.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRewardToken.sol\\\";\\nimport \\\"../interfaces/IVesting.sol\\\";\\nimport \\\"../interfaces/ITokeManager.sol\\\";\\nimport \\\"../interfaces/ITokePool.sol\\\";\\nimport \\\"../interfaces/ITokeReward.sol\\\";\\nimport \\\"../interfaces/ILiquidityReserve.sol\\\";\\n\\ncontract Staking is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable TOKE_POOL;\\n    address public immutable TOKE_MANAGER;\\n    address public immutable TOKE_REWARD;\\n    address public immutable STAKING_TOKEN;\\n    address public immutable REWARD_TOKEN;\\n    address public immutable TOKE_TOKEN;\\n    address public immutable LIQUIDITY_RESERVE;\\n    address public immutable WARM_UP_CONTRACT;\\n    address public immutable COOL_DOWN_CONTRACT;\\n\\n    // owner overrides\\n    bool public pauseStaking = false; // pauses staking\\n    bool public pauseUnstaking = false; // pauses unstaking\\n\\n    struct Epoch {\\n        uint256 length; // length of epoch\\n        uint256 number; // epoch number (starting 1)\\n        uint256 endBlock; // block that current epoch ends on\\n        uint256 distribute; // amount of rewards to distribute this epoch\\n    }\\n    Epoch public epoch;\\n\\n    mapping(address => Claim) public warmUpInfo;\\n    mapping(address => Claim) public coolDownInfo;\\n\\n    uint256 public timeLeftToRequestWithdrawal; // time (in seconds) before TOKE cycle ends to request withdrawal\\n    uint256 public warmUpPeriod; // amount of epochs to delay warmup vesting\\n    uint256 public coolDownPeriod; // amount of epochs to delay cooldown vesting\\n    uint256 public requestWithdrawalAmount; // amount of staking tokens to request withdrawal once able to send\\n    uint256 public withdrawalAmount; // amount of stakings tokens available for withdrawal\\n    uint256 public lastTokeCycleIndex; // last tokemak cycle index which requested withdrawals\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _tokeToken,\\n        address _tokePool,\\n        address _tokeManager,\\n        address _tokeReward,\\n        address _liquidityReserve,\\n        uint256 _epochLength,\\n        uint256 _firstEpochNumber,\\n        uint256 _firstEpochBlock\\n    ) {\\n        // must have valid inital addresses\\n        require(\\n            _stakingToken != address(0) &&\\n                _rewardToken != address(0) &&\\n                _tokeToken != address(0) &&\\n                _tokePool != address(0) &&\\n                _tokeManager != address(0) &&\\n                _tokeReward != address(0) &&\\n                _liquidityReserve != address(0),\\n            \\\"Invalid address\\\"\\n        );\\n        STAKING_TOKEN = _stakingToken;\\n        REWARD_TOKEN = _rewardToken;\\n        TOKE_TOKEN = _tokeToken;\\n        TOKE_POOL = _tokePool;\\n        TOKE_MANAGER = _tokeManager;\\n        TOKE_REWARD = _tokeReward;\\n        LIQUIDITY_RESERVE = _liquidityReserve;\\n        timeLeftToRequestWithdrawal = 43200;\\n\\n        // create vesting contract to hold newly staked rewardTokens based on warmup period\\n        Vesting warmUp = new Vesting(address(this), REWARD_TOKEN);\\n        WARM_UP_CONTRACT = address(warmUp);\\n\\n        // create vesting contract to hold newly unstaked rewardTokens based on cooldown period\\n        Vesting coolDown = new Vesting(address(this), REWARD_TOKEN);\\n        COOL_DOWN_CONTRACT = address(coolDown);\\n\\n        IERC20(STAKING_TOKEN).approve(TOKE_POOL, type(uint256).max);\\n        IERC20(REWARD_TOKEN).approve(LIQUIDITY_RESERVE, type(uint256).max);\\n\\n        epoch = Epoch({\\n            length: _epochLength,\\n            number: _firstEpochNumber,\\n            endBlock: _firstEpochBlock,\\n            distribute: 0\\n        });\\n    }\\n\\n    /**\\n        @notice claim TOKE rewards from Tokemak\\n        @dev must get amount through toke reward contract using latest cycle from reward hash contract\\n        @param _recipient Recipient struct that contains chainId, cycle, address, and amount \\n        @param _v uint - recovery id\\n        @param _r bytes - output of ECDSA signature\\n        @param _s bytes - output of ECDSA signature\\n     */\\n    function claimFromTokemak(\\n        Recipient calldata _recipient,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        // cannot claim 0\\n        require(_recipient.amount > 0, \\\"Must enter valid amount\\\");\\n\\n        ITokeReward tokeRewardContract = ITokeReward(TOKE_REWARD);\\n        tokeRewardContract.claim(_recipient, _v, _r, _s);\\n    }\\n\\n    /**\\n        @notice transfer TOKE from staking contract to address\\n        @dev used so DAO can get TOKE and manually trade to return FOX to the staking contract\\n        @param _claimAddress address to send TOKE rewards\\n     */\\n    function transferToke(address _claimAddress) external onlyOwner {\\n        // _claimAddress can't be 0x0\\n        require(_claimAddress != address(0), \\\"Invalid address\\\");\\n        uint256 amount = IERC20(TOKE_TOKEN).balanceOf(address(this));\\n        IERC20(TOKE_TOKEN).safeTransfer(_claimAddress, amount);\\n    }\\n\\n    /**\\n        @notice override whether or not staking is paused\\n        @dev used to pause staking in case some attack vector becomes present\\n        @param _shouldPause bool\\n     */\\n    function shouldPauseStaking(bool _shouldPause) public onlyOwner {\\n        pauseStaking = _shouldPause;\\n    }\\n\\n    /**\\n        @notice override whether or not unstaking is paused\\n        @dev used to pause unstaking in case some attack vector becomes present\\n        @param _shouldPause bool\\n     */\\n    function shouldPauseUnstaking(bool _shouldPause) external onlyOwner {\\n        pauseUnstaking = _shouldPause;\\n    }\\n\\n    /**\\n        @notice set epoch length\\n        @dev epoch's determine how long until a rebase can occur\\n        @param length uint\\n     */\\n    function setEpochLength(uint256 length) external onlyOwner {\\n        epoch.length = length;\\n    }\\n\\n    /**\\n     * @notice set warmup period for new stakers\\n     * @param _vestingPeriod uint\\n     */\\n    function setWarmUpPeriod(uint256 _vestingPeriod) external onlyOwner {\\n        warmUpPeriod = _vestingPeriod;\\n    }\\n\\n    /**\\n     * @notice set cooldown period for stakers\\n     * @param _vestingPeriod uint\\n     */\\n    function setCoolDownPeriod(uint256 _vestingPeriod) public onlyOwner {\\n        coolDownPeriod = _vestingPeriod;\\n    }\\n\\n    /**\\n        @notice sets the time before Tokemak cycle ends to requestWithdrawals\\n        @dev requestWithdrawals is called once per cycle.\\n        @dev this allows us to change how much time before the end of the cycle we send the withdraw requests\\n        @param _timestamp uint - time before end of cycle\\n     */\\n    function setTimeLeftToRequestWithdrawal(uint256 _timestamp)\\n        external\\n        onlyOwner\\n    {\\n        timeLeftToRequestWithdrawal = _timestamp;\\n    }\\n\\n    /**\\n        @notice returns true if claim is available\\n        @dev this shows whether or not our epoch's have passed\\n        @param _recipient address - warmup address to check if claim is available\\n        @return bool - true if available to claim\\n     */\\n    function _isClaimAvailable(address _recipient)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        Claim memory info = warmUpInfo[_recipient];\\n        return epoch.number >= info.expiry && info.expiry != 0;\\n    }\\n\\n    /**\\n        @notice returns true if claimWithdraw is available\\n        @dev this shows whether or not our epoch's have passed as well as if the cycle has increased\\n        @param _recipient address - address that's checking for available claimWithdraw\\n        @return bool - true if available to claimWithdraw\\n     */\\n    function _isClaimWithdrawAvailable(address _recipient)\\n        internal\\n        returns (bool)\\n    {\\n        Claim memory info = coolDownInfo[_recipient];\\n        ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\\n        RequestedWithdrawalInfo memory requestedWithdrawals = tokePoolContract\\n            .requestedWithdrawals(address(this));\\n        uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\\n        return\\n            epoch.number >= info.expiry &&\\n            info.expiry != 0 &&\\n            info.amount != 0 &&\\n            ((requestedWithdrawals.minCycle <= currentCycleIndex &&\\n                requestedWithdrawals.amount + withdrawalAmount >=\\n                info.amount) || withdrawalAmount >= info.amount);\\n    }\\n\\n    /**\\n        @notice withdraw stakingTokens from Tokemak\\n        @dev needs a valid requestWithdrawal inside Tokemak with a completed cycle rollover to withdraw\\n     */\\n    function _withdrawFromTokemak() internal {\\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\\n        ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\\n        RequestedWithdrawalInfo memory requestedWithdrawals = tokePoolContract\\n            .requestedWithdrawals(address(this));\\n        uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\\n        if (\\n            requestedWithdrawals.amount > 0 &&\\n            requestedWithdrawals.minCycle <= currentCycleIndex\\n        ) {\\n            tokePoolContract.withdraw(requestedWithdrawals.amount);\\n            requestWithdrawalAmount -= requestedWithdrawals.amount;\\n            withdrawalAmount += requestedWithdrawals.amount;\\n        }\\n    }\\n\\n    /**\\n        @notice creates a withdrawRequest with Tokemak\\n        @dev requestedWithdraws take 1 tokemak cycle to be available for withdraw\\n        @param _amount uint - amount to request withdraw\\n     */\\n    function _requestWithdrawalFromTokemak(uint256 _amount) internal {\\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\\n        tokePoolContract.requestWithdrawal(_amount);\\n    }\\n\\n    /**\\n        @notice deposit stakingToken to tStakingToken Tokemak reactor\\n        @param _amount uint - amount to deposit\\n     */\\n    function _depositToTokemak(uint256 _amount) internal {\\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\\n        tokePoolContract.deposit(_amount);\\n    }\\n\\n    /**\\n        @notice gets balance of stakingToken that's locked into the TOKE stakingToken pool\\n        @return uint - amount of stakingToken in TOKE pool\\n     */\\n    function _getTokemakBalance() internal view returns (uint256) {\\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\\n        return tokePoolContract.balanceOf(address(this));\\n    }\\n\\n    /**\\n        @notice checks TOKE's cycleTime is within duration to batch the transactions\\n        @dev this function returns true if we are within timeLeftToRequestWithdrawal of the end of the TOKE cycle\\n        @dev as well as if the current cycle index is more than the last cycle index\\n        @return bool - returns true if can batch transactions\\n     */\\n    function _canBatchTransactions() internal view returns (bool) {\\n        ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\\n        uint256 duration = tokeManager.getCycleDuration();\\n        uint256 currentCycleStart = tokeManager.getCurrentCycle();\\n        uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\\n        uint256 nextCycleStart = currentCycleStart + duration;\\n\\n        return\\n            block.timestamp + timeLeftToRequestWithdrawal >= nextCycleStart &&\\n            currentCycleIndex > lastTokeCycleIndex &&\\n            requestWithdrawalAmount > 0;\\n    }\\n\\n    /**\\n        @notice owner function to requestWithdraw all FOX from tokemak in case of an attack on tokemak\\n        @dev this bypasses the normal flow of sending a withdrawal request and allows the owner to requestWithdraw entire pool balance\\n     */\\n    function unstakeAllFromTokemak() public onlyOwner {\\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\\n        uint256 tokePoolBalance = ITokePool(tokePoolContract).balanceOf(\\n            address(this)\\n        );\\n        // pause any future staking\\n        shouldPauseStaking(true);\\n        requestWithdrawalAmount = tokePoolBalance;\\n        _requestWithdrawalFromTokemak(tokePoolBalance);\\n    }\\n\\n    /**\\n        @notice sends batched requestedWithdrawals due to TOKE's requestWithdrawal overwriting the amount if you call it more than once per cycle\\n     */\\n    function sendWithdrawalRequests() public {\\n        // check to see if near the end of a TOKE cycle\\n        if (_canBatchTransactions()) {\\n            // if has withdrawal amount to be claimed then claim\\n            _withdrawFromTokemak();\\n\\n            // if more requestWithdrawalAmount exists after _withdrawFromTokemak then request the new amount\\n            ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\\n            if (requestWithdrawalAmount > 0) {\\n                _requestWithdrawalFromTokemak(requestWithdrawalAmount);\\n            }\\n\\n            uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\\n            lastTokeCycleIndex = currentCycleIndex;\\n        }\\n    }\\n\\n    /**\\n        @notice stake staking tokens to receive reward tokens\\n        @param _amount uint\\n        @param _recipient address\\n     */\\n    function stake(uint256 _amount, address _recipient) public {\\n        // if override staking, then don't allow stake\\n        require(!pauseStaking, \\\"Staking is paused\\\");\\n        // amount must be non zero\\n        require(_amount > 0, \\\"Must have valid amount\\\");\\n\\n        uint256 circulatingSupply = IRewardToken(REWARD_TOKEN)\\n            .circulatingSupply();\\n\\n        // Don't rebase unless tokens are already staked or could get locked out of staking\\n        if (circulatingSupply > 0) {\\n            rebase();\\n        }\\n\\n        IERC20(STAKING_TOKEN).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        Claim storage info = warmUpInfo[_recipient];\\n\\n        // if claim is available then auto claim tokens\\n        if (_isClaimAvailable(_recipient)) {\\n            claim(_recipient);\\n        }\\n\\n        _depositToTokemak(_amount);\\n\\n        // skip adding to warmup contract if period is 0\\n        if (warmUpPeriod == 0) {\\n            IERC20(REWARD_TOKEN).safeTransfer(_recipient, _amount);\\n        } else {\\n            // create a claim and send tokens to the warmup contract\\n            warmUpInfo[_recipient] = Claim({\\n                amount: info.amount + _amount,\\n                gons: info.gons +\\n                    IRewardToken(REWARD_TOKEN).gonsForBalance(_amount),\\n                expiry: epoch.number + warmUpPeriod\\n            });\\n\\n            IERC20(REWARD_TOKEN).safeTransfer(WARM_UP_CONTRACT, _amount);\\n        }\\n    }\\n\\n    /**\\n        @notice call stake with msg.sender\\n        @param _amount uint\\n     */\\n    function stake(uint256 _amount) external {\\n        stake(_amount, msg.sender);\\n    }\\n\\n    /**\\n        @notice retrieve reward tokens from warmup\\n        @dev if user has funds in warmup then user is able to claim them (including rewards)\\n        @param _recipient address\\n     */\\n    function claim(address _recipient) public {\\n        Claim memory info = warmUpInfo[_recipient];\\n        if (_isClaimAvailable(_recipient)) {\\n            delete warmUpInfo[_recipient];\\n\\n            IVesting(WARM_UP_CONTRACT).retrieve(\\n                _recipient,\\n                IRewardToken(REWARD_TOKEN).balanceForGons(info.gons)\\n            );\\n        }\\n    }\\n\\n    /**\\n        @notice claims staking tokens after cooldown period\\n        @dev if user has a cooldown claim that's past expiry then withdraw staking tokens from tokemak\\n        @dev and send them to user\\n        @param _recipient address - users unstaking address\\n     */\\n    function claimWithdraw(address _recipient) public {\\n        Claim memory info = coolDownInfo[_recipient];\\n        uint256 totalAmountIncludingRewards = IRewardToken(REWARD_TOKEN)\\n            .balanceForGons(info.gons);\\n        if (_isClaimWithdrawAvailable(_recipient)) {\\n            // if has withdrawalAmount to be claimed, then claim\\n            _withdrawFromTokemak();\\n\\n            delete coolDownInfo[_recipient];\\n\\n            // only give amount from when they requested withdrawal since this amount wasn't used in generating rewards\\n            // this will later be given to users through addRewardsForStakers\\n            IERC20(STAKING_TOKEN).safeTransfer(_recipient, info.amount);\\n\\n            IVesting(COOL_DOWN_CONTRACT).retrieve(\\n                address(this),\\n                totalAmountIncludingRewards\\n            );\\n            withdrawalAmount -= info.amount;\\n        }\\n    }\\n\\n    /**\\n        @notice gets reward tokens either from the warmup contract or user's wallet or both\\n        @dev when transfering reward tokens the user could have their balance still in the warmup contract\\n        @dev this function abstracts the logic to find the correct amount of tokens to use them\\n        @param _amount uint\\n        @param _user address to pull funds from \\n     */\\n    function _retrieveBalanceFromUser(uint256 _amount, address _user) internal {\\n        Claim memory userWarmInfo = warmUpInfo[_user];\\n        uint256 walletBalance = IERC20(REWARD_TOKEN).balanceOf(_user);\\n        uint256 warmUpBalance = IRewardToken(REWARD_TOKEN).balanceForGons(\\n            userWarmInfo.gons\\n        );\\n\\n        // must have enough funds between wallet and warmup\\n        require(\\n            _amount <= walletBalance + warmUpBalance,\\n            \\\"Insufficient Balance\\\"\\n        );\\n\\n        uint256 amountLeft = _amount;\\n        if (warmUpBalance > 0) {\\n            // remove from warmup first.\\n            if (_amount >= warmUpBalance) {\\n                // use the entire warmup balance\\n                unchecked {\\n                    amountLeft -= warmUpBalance;\\n                }\\n\\n                IVesting(WARM_UP_CONTRACT).retrieve(\\n                    address(this),\\n                    warmUpBalance\\n                );\\n                delete warmUpInfo[_user];\\n            } else {\\n                // partially consume warmup balance\\n                amountLeft = 0;\\n                IVesting(WARM_UP_CONTRACT).retrieve(address(this), _amount);\\n                uint256 remainingGonsAmount = userWarmInfo.gons -\\n                    IRewardToken(REWARD_TOKEN).gonsForBalance(_amount);\\n                uint256 remainingAmount = IRewardToken(REWARD_TOKEN)\\n                    .balanceForGons(remainingGonsAmount);\\n\\n                warmUpInfo[_user] = Claim({\\n                    amount: remainingAmount,\\n                    gons: remainingGonsAmount,\\n                    expiry: userWarmInfo.expiry\\n                });\\n            }\\n        }\\n\\n        if (amountLeft != 0) {\\n            // transfer the rest from the users address\\n            IERC20(REWARD_TOKEN).safeTransferFrom(\\n                _user,\\n                address(this),\\n                amountLeft\\n            );\\n        }\\n    }\\n\\n    /**\\n        @notice redeem reward tokens for staking tokens instantly with fee.  Must use entire amount\\n        @dev this is in the staking contract due to users having reward tokens (potentially) in the warmup contract\\n        @dev this function talks to the instantUnstake function in the liquidity reserve contract\\n        @param _trigger bool - should trigger a rebase\\n     */\\n    function instantUnstake(bool _trigger) external {\\n        // prevent unstaking if override due to vulnerabilities\\n        require(!pauseUnstaking, \\\"Unstaking is paused\\\");\\n        if (_trigger) {\\n            rebase();\\n        }\\n\\n        Claim memory userWarmInfo = warmUpInfo[msg.sender];\\n\\n        uint256 walletBalance = IERC20(REWARD_TOKEN).balanceOf(msg.sender);\\n        uint256 warmUpBalance = IRewardToken(REWARD_TOKEN).balanceForGons(\\n            userWarmInfo.gons\\n        );\\n        uint256 totalBalance = warmUpBalance + walletBalance;\\n        uint256 stakingTokenBalance = IERC20(STAKING_TOKEN).balanceOf(\\n            LIQUIDITY_RESERVE\\n        );\\n\\n        // verify that we have enough stakingTokens\\n        require(totalBalance != 0, \\\"Must have reward tokens\\\");\\n        require(\\n            stakingTokenBalance >= totalBalance,\\n            \\\"Not enough funds in reserve\\\"\\n        );\\n\\n        // claim senders warmup balance\\n        if (warmUpBalance > 0) {\\n            IVesting(WARM_UP_CONTRACT).retrieve(address(this), warmUpBalance);\\n            delete warmUpInfo[msg.sender];\\n        }\\n\\n        // claim senders wallet balance\\n        if (walletBalance > 0) {\\n            IERC20(REWARD_TOKEN).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                walletBalance\\n            );\\n        }\\n\\n        // instant unstake from LR contract\\n        ILiquidityReserve(LIQUIDITY_RESERVE).instantUnstake(\\n            totalBalance,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n        @notice redeem reward tokens for staking tokens with a vesting period based on coolDownPeriod\\n        @dev this function will retrieve the _amount of reward tokens from the user and transfer them to the cooldown contract.\\n        @dev once the period has expired the user will be able to withdraw their staking tokens\\n        @param _amount uint - amount of tokens to unstake\\n        @param _trigger bool - should trigger a rebase\\n     */\\n    function unstake(uint256 _amount, bool _trigger) external {\\n        // prevent unstaking if override due to vulnerabilities asdf\\n        require(!pauseUnstaking, \\\"Unstaking is paused\\\");\\n        if (_trigger) {\\n            rebase();\\n        }\\n        _retrieveBalanceFromUser(_amount, msg.sender);\\n\\n        Claim storage userCoolInfo = coolDownInfo[msg.sender];\\n\\n        // try to claim withdraw if user has withdraws to claim function will check if withdraw is valid\\n        claimWithdraw(msg.sender);\\n\\n        coolDownInfo[msg.sender] = Claim({\\n            amount: userCoolInfo.amount + _amount,\\n            gons: userCoolInfo.gons +\\n                IRewardToken(REWARD_TOKEN).gonsForBalance(_amount),\\n            expiry: epoch.number + coolDownPeriod\\n        });\\n\\n        requestWithdrawalAmount += _amount;\\n\\n        sendWithdrawalRequests();\\n\\n        IERC20(REWARD_TOKEN).safeTransfer(COOL_DOWN_CONTRACT, _amount);\\n    }\\n\\n    /**\\n        @notice trigger rebase if epoch has ended\\n     */\\n    function rebase() public {\\n        if (epoch.endBlock <= block.number) {\\n            IRewardToken(REWARD_TOKEN).rebase(epoch.distribute, epoch.number);\\n\\n            epoch.endBlock = epoch.endBlock + epoch.length;\\n            epoch.number++;\\n\\n            uint256 balance = contractBalance();\\n            uint256 staked = IRewardToken(REWARD_TOKEN).circulatingSupply();\\n\\n            if (balance <= staked) {\\n                epoch.distribute = 0;\\n            } else {\\n                epoch.distribute = balance - staked;\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice returns contract staking tokens holdings \\n        @dev gets amount of staking tokens that are a part of this system to calculate rewards\\n        @dev the staking tokens will be included in this contract plus inside tokemak\\n        @return uint - amount of staking tokens\\n     */\\n    function contractBalance() internal view returns (uint256) {\\n        uint256 tokeBalance = _getTokemakBalance();\\n        return IERC20(STAKING_TOKEN).balanceOf(address(this)) + tokeBalance;\\n    }\\n\\n    /**\\n     * @notice adds staking tokens for rebase rewards\\n     * @dev this is the function that gives rewards so the rebase function can distrubute profits to reward token holders\\n     * @param _amount uint - amount of tokens to add to rewards\\n     * @param _trigger bool - should trigger rebase\\n     */\\n    function addRewardsForStakers(uint256 _amount, bool _trigger) external {\\n        IERC20(STAKING_TOKEN).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        // deposit all staking tokens held in contract to Tokemak minus tokens waiting for claimWithdraw\\n        uint256 stakingTokenBalance = IERC20(STAKING_TOKEN).balanceOf(\\n            address(this)\\n        );\\n        uint256 amountToDeposit = stakingTokenBalance - withdrawalAmount;\\n        _depositToTokemak(amountToDeposit);\\n\\n        if (_trigger) {\\n            rebase();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Vesting {\\n    address public immutable STAKING_CONTRACT;\\n    address public immutable REWARD_TOKEN;\\n\\n    constructor(address _stakingContract, address _rewardToken) {\\n        // addresses can't be 0x0\\n        require(\\n            _stakingContract != address(0) && _rewardToken != address(0),\\n            \\\"Invalid address\\\"\\n        );\\n        STAKING_CONTRACT = _stakingContract;\\n        REWARD_TOKEN = _rewardToken;\\n    }\\n\\n    /**\\n        @notice retrieve _amount of rewardToken that's held in vesting contract\\n        @param _amount uint256\\n        @param _staker address\\n     */\\n    function retrieve(address _staker, uint256 _amount) external {\\n        // must be called from staking contract\\n        require(\\n            msg.sender == STAKING_CONTRACT,\\n            \\\"Not called from staking contract\\\"\\n        );\\n        IERC20(REWARD_TOKEN).transfer(_staker, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/LiquidityReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\n\\ncontract LiquidityReserve is ERC20Permit, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event FeeChanged(uint256 fee);\\n\\n    address public stakingToken; // staking token address\\n    address public rewardToken; // reward token address\\n    address public stakingContract; // staking contract address\\n    uint256 public fee; // fee for instant unstaking\\n    address public initializer; // LiquidityReserve initializer\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**15; // lock .001 stakingTokens for initial liquidity\\n    uint256 public constant BASIS_POINTS = 10000; // 100% in basis points\\n\\n    // check if sender is the stakingContract\\n    modifier onlyStakingContract() {\\n        require(msg.sender == stakingContract, \\\"Not staking contract\\\");\\n        _;\\n    }\\n\\n    constructor(address _stakingToken)\\n        ERC20(\\\"Liquidity Reserve FOX\\\", \\\"lrFOX\\\")\\n        ERC20Permit(\\\"Liquidity Reserve FOX\\\")\\n    {\\n        // verify address isn't 0x0\\n        require(_stakingToken != address(0), \\\"Invalid address\\\");\\n        initializer = msg.sender;\\n        stakingToken = _stakingToken;\\n    }\\n\\n    /**\\n        @notice initialize by setting stakingContract & setting initial liquidity\\n        @param _stakingContract address\\n     */\\n    function initialize(address _stakingContract, address _rewardToken)\\n        external\\n    {\\n        // check if initializer is msg.sender that was set in constructor\\n        require(msg.sender == initializer, \\\"Must be called from initializer\\\");\\n        initializer = address(0);\\n\\n        uint256 stakingTokenBalance = IERC20(stakingToken).balanceOf(\\n            msg.sender\\n        );\\n\\n        // verify addresses aren't 0x0\\n        require(\\n            _stakingContract != address(0) && _rewardToken != address(0),\\n            \\\"Invalid address\\\"\\n        );\\n\\n        // require address has minimum liquidity\\n        require(\\n            stakingTokenBalance >= MINIMUM_LIQUIDITY,\\n            \\\"Not enough staking tokens\\\"\\n        );\\n        stakingContract = _stakingContract;\\n        rewardToken = _rewardToken;\\n\\n        // permanently lock the first MINIMUM_LIQUIDITY of lrTokens\\n        IERC20(stakingToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            MINIMUM_LIQUIDITY\\n        );\\n        _mint(address(this), MINIMUM_LIQUIDITY);\\n\\n        IERC20(rewardToken).approve(stakingContract, type(uint256).max);\\n    }\\n\\n    /**\\n        @notice sets Fee (in basis points eg. 100 bps = 1%) for instant unstaking\\n        @param _fee uint - fee in basis points\\n     */\\n    function setFee(uint256 _fee) external onlyOwner {\\n        // check range before setting fee\\n        require(_fee <= BASIS_POINTS, \\\"Out of range\\\");\\n        fee = _fee;\\n\\n        emit FeeChanged(_fee);\\n    }\\n\\n    /**\\n        @notice addLiquidity for the stakingToken and receive lrToken in exchange\\n        @param _amount uint - amount of staking tokens to add\\n     */\\n    function addLiquidity(uint256 _amount) external {\\n        uint256 stakingTokenBalance = IERC20(stakingToken).balanceOf(\\n            address(this)\\n        );\\n        uint256 rewardTokenBalance = IERC20(rewardToken).balanceOf(\\n            address(this)\\n        );\\n        uint256 lrFoxSupply = totalSupply();\\n        uint256 coolDownAmount = IStaking(stakingContract)\\n            .coolDownInfo(address(this))\\n            .amount;\\n        uint256 totalLockedValue = stakingTokenBalance +\\n            rewardTokenBalance +\\n            coolDownAmount;\\n\\n        uint256 amountToMint = (_amount * lrFoxSupply) / totalLockedValue;\\n        IERC20(stakingToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        _mint(msg.sender, amountToMint);\\n    }\\n\\n    /**\\n        @notice calculate current lrToken withdraw value\\n        @param _amount uint - amount of tokens that will be withdrawn\\n        @return uint - converted amount of staking tokens to withdraw from lr tokens\\n     */\\n    function _calculateReserveTokenValue(uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 lrFoxSupply = totalSupply();\\n        uint256 stakingTokenBalance = IERC20(stakingToken).balanceOf(\\n            address(this)\\n        );\\n        uint256 rewardTokenBalance = IERC20(rewardToken).balanceOf(\\n            address(this)\\n        );\\n        uint256 coolDownAmount = IStaking(stakingContract)\\n            .coolDownInfo(address(this))\\n            .amount;\\n        uint256 totalLockedValue = stakingTokenBalance +\\n            rewardTokenBalance +\\n            coolDownAmount;\\n        uint256 convertedAmount = (_amount * totalLockedValue) / lrFoxSupply;\\n\\n        return convertedAmount;\\n    }\\n\\n    /**\\n        @notice removeLiquidity by swapping your lrToken for stakingTokens\\n        @param _amount uint - amount of tokens to remove from liquidity reserve\\n     */\\n    function removeLiquidity(uint256 _amount) external {\\n        // check balance before removing liquidity\\n        require(_amount <= balanceOf(msg.sender), \\\"Not enough lr tokens\\\");\\n        // claim the stakingToken from previous unstakes\\n        IStaking(stakingContract).claimWithdraw(address(this));\\n\\n        uint256 amountToWithdraw = _calculateReserveTokenValue(_amount);\\n\\n        // verify that we have enough stakingTokens\\n        require(\\n            IERC20(stakingToken).balanceOf(address(this)) >= amountToWithdraw,\\n            \\\"Not enough funds\\\"\\n        );\\n\\n        _burn(msg.sender, _amount);\\n        IERC20(stakingToken).safeTransfer(msg.sender, amountToWithdraw);\\n    }\\n\\n    /**\\n        @notice allow instant unstake their stakingToken for a fee paid to the liquidity providers\\n        @param _amount uint - amount of tokens to instantly unstake\\n        @param _recipient address - address to send staking tokens to\\n     */\\n    function instantUnstake(uint256 _amount, address _recipient)\\n        external\\n        onlyStakingContract\\n    {\\n        // claim the stakingToken from previous unstakes\\n        IStaking(stakingContract).claimWithdraw(address(this));\\n\\n        uint256 amountMinusFee = _amount - ((_amount * fee) / BASIS_POINTS);\\n\\n        IERC20(rewardToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        IERC20(stakingToken).safeTransfer(_recipient, amountMinusFee);\\n        unstakeAllRewardTokens();\\n    }\\n\\n    /**\\n        @notice find balance of reward tokens in contract and unstake them from staking contract\\n     */\\n    function unstakeAllRewardTokens() public {\\n        uint256 amount = IERC20(rewardToken).balanceOf(address(this));\\n        if (amount > 0) IStaking(stakingContract).unstake(amount, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\ncontract Ownable is IOwnable {\\n    address internal owner; // current owner\\n    address internal newOwner; // next owner once pulled\\n\\n    event OwnershipPushed(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event OwnershipPulled(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipPushed(address(0), owner);\\n    }\\n\\n    /**\\n        @notice gets owner of contract\\n        @return address - owner of contract\\n     */\\n    function getOwner() public view override returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n        @notice gets next owner of contract\\n        @return address - owner of contract\\n     */\\n    function getNewOwner() public view returns (address) {\\n        return newOwner;\\n    }\\n\\n    /**\\n        @notice modifier to only let owner call function\\n     */\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n        @notice push a new owner to be the next owner of contract\\n        @param _newOwner address - next owner address\\n        @dev owner is not active until pullOwner() is called\\n     */\\n    function pushOwner(address _newOwner) public virtual override onlyOwner {\\n        emit OwnershipPushed(owner, _newOwner);\\n        newOwner = _newOwner;\\n    }\\n\\n    /**\\n        @notice sets the current newOwner to the owner of the contract\\n     */\\n    function pullOwner() public virtual override {\\n        require(msg.sender == newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled(owner, newOwner);\\n        owner = newOwner;\\n        newOwner = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRewardToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IRewardToken {\\n    function rebase(uint256 ohmProfit_, uint256 epoch_)\\n        external\\n        returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IVesting {\\n    function retrieve(address staker_, uint256 amount_) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITokeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface ITokeManager {\\n    function getCycleDuration() external view returns (uint256);\\n\\n    function getCurrentCycle() external view returns (uint256); // named weird, this is start cycle timestamp\\n\\n    function getCurrentCycleIndex() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITokePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\nstruct RequestedWithdrawalInfo {\\n    uint256 minCycle;\\n    uint256 amount;\\n}\\n\\ninterface ITokePool {\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function requestWithdrawal(uint256 amount) external;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function requestedWithdrawals(address owner)\\n        external\\n        returns (RequestedWithdrawalInfo memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITokeReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nstruct Recipient {\\n    uint256 chainId;\\n    uint256 cycle;\\n    address wallet;\\n    uint256 amount;\\n}\\n\\ninterface ITokeReward {\\n    function getClaimableAmount(Recipient calldata recipient)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claim(\\n        Recipient calldata recipient,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function claimedAmounts(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILiquidityReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface ILiquidityReserve {\\n    function instantUnstake(uint256 amount_, address _recipient) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function initialize(address _stakingContract) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nstruct Claim {\\n    uint256 amount;\\n    uint256 gons;\\n    uint256 expiry;\\n}\\n\\ninterface IStaking {\\n    function unstake(uint256 amount_, bool trigger) external;\\n\\n    function claimWithdraw(address _recipient) external;\\n\\n    function coolDownInfo(address) external view returns (Claim memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IOwnable {\\n    function getOwner() external view returns (address);\\n\\n    function getNewOwner() external view returns (address);\\n\\n    function pushOwner(address _newOwner) external;\\n\\n    function pullOwner() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokeReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityReserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOL_DOWN_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_RESERVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKE_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKE_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKE_REWARD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WARM_UP_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_trigger\",\"type\":\"bool\"}],\"name\":\"addRewardsForStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Recipient\",\"name\":\"_recipient\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"claimFromTokemak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claimWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coolDownInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_trigger\",\"type\":\"bool\"}],\"name\":\"instantUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokeCycleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseUnstaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"pushOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendWithdrawalRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"setCoolDownPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setTimeLeftToRequestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"setWarmUpPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldPause\",\"type\":\"bool\"}],\"name\":\"shouldPauseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldPause\",\"type\":\"bool\"}],\"name\":\"shouldPauseUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLeftToRequestWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimAddress\",\"type\":\"address\"}],\"name\":\"transferToke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_trigger\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAllFromTokemak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"warmUpInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmUpPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000c770eefad204b5180df6a14ee197d99d808ee52d000000000000000000000000dc49108ce5c57bc3408c3a5e95f3d864ec386ed30000000000000000000000002e9d63788249371f1dfc918a52f8d799f4a38c94000000000000000000000000808d3e6b23516967ceae4f17a5f9038383ed5311000000000000000000000000a86e412109f77c45a3bc1c5870b880492fb86a1400000000000000000000000079dd22579112d8a5f7347c5ed7e609e60da713c50000000000000000000000008ec637fe2800940c7959f9bad4fe69e41225cd39000000000000000000000000000000000000000000000000000000000000af0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000dd95a5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}