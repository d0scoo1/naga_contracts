{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/SuperHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\t// ERC20 interface\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; \\t\\t// OZ: Ownable\\n\\ncontract SuperHolder is Ownable{\\n\\n    enum DepositCategory{\\n        HOLDER,\\n        SUPER_HOLDER\\n    }\\n    enum DepositType\\n    {\\n        HOLDER_3MONTHS,\\n        HOLDER_6MONTHS,\\n        HOLDER_12MONTHS\\n    }\\n\\n    uint256 public constant HOLDER_QUOTA = 200;\\n    uint256 public constant SUPER_HOLDER_QUOTA = 20;\\n    uint256 public  HOLDER_DEPOSIT_LIMIT = 2500 * 1 ether;\\n    uint256[] public  HOLDER_PERIOD = [7776000,15552000,31104000];\\n    uint256[] public  HOLDER_APY_TIERS = [9,11,15];\\n    uint256[] public  SUPER_HOLDER_APY_TIERS = [12,14,18];\\n    uint256 public constant ONE_YEAR_SECONDS = 756864000;\\n    uint256 public  SUPER_HOLDER_DEPOSIT_LIMIT = 5000 * 1 ether;\\n    uint256 public holders_num;\\n    uint256 public super_holders_num;\\n    uint256 public total_locked_esg;\\n    uint256 public total_interest_claimed;\\n    IERC20 public immutable esgToken;\\n    struct User{\\n        uint256 depositTimestamp;\\n        uint256 claimedAmount;\\n        uint256 isUsed;\\n        DepositCategory category;\\n        DepositType dtype;\\n    }\\n\\n    mapping (address => User) public accounts;\\n\\n    constructor (address _esgAddress){\\n        require(_esgAddress != address(0), \\\"invalid token address\\\");\\n        esgToken = IERC20(_esgAddress);\\n\\n        holders_num = 0;\\n        super_holders_num = 0;\\n        total_locked_esg = 0;\\n        total_interest_claimed = 0;\\n    }\\n\\n    function deposit(DepositCategory _category, DepositType _type) external {\\n        require(_category <= DepositCategory.SUPER_HOLDER, \\\"invalid deposit category\\\");\\n        require(_type <= DepositType.HOLDER_12MONTHS, \\\"invalid deposit type\\\");\\n        if(_category == DepositCategory.HOLDER)\\n        {\\n            require(holders_num+1 <= HOLDER_QUOTA, \\\"holders number exceeds limit\\\");\\n            holders_num = holders_num + 1;\\n        }\\n        else if(_category == DepositCategory.SUPER_HOLDER)\\n        {\\n            require(super_holders_num+1 <= SUPER_HOLDER_QUOTA, \\\"super holders number exceeds limit\\\");\\n            super_holders_num = super_holders_num + 1;\\n        }\\n            \\n        User storage user = accounts[msg.sender];\\n        require(user.isUsed == 0, \\\"user has already deposited.\\\");\\n        uint256 amount = HOLDER_DEPOSIT_LIMIT;\\n        if(_category == DepositCategory.SUPER_HOLDER)\\n            amount = SUPER_HOLDER_DEPOSIT_LIMIT;\\n        total_locked_esg = total_locked_esg + amount;\\n        esgToken.transferFrom(msg.sender, address(this), amount);\\n        accounts[msg.sender] = User(block.timestamp, 0, 1, _category, _type);\\n    }\\n\\n    function claimInterest() external {\\n        User storage user = accounts[msg.sender];\\n        require(user.isUsed == 1, \\\"no deposit\\\");\\n        uint256 amount = getInterestAvailable(msg.sender);\\n        uint256 balance = esgToken.balanceOf(address(this));\\n        if(balance < amount)\\n            amount = balance;\\n        user.claimedAmount = user.claimedAmount + amount;\\n        total_interest_claimed = total_interest_claimed + amount;\\n        esgToken.transfer(msg.sender, amount);\\n    }\\n\\n    function withdrawPrincipal() external {\\n        User memory user = accounts[msg.sender];\\n        require(user.isUsed == 1, \\\"no deposit\\\");\\n        uint256 timeSpan = block.timestamp - user.depositTimestamp;\\n        require(timeSpan > HOLDER_PERIOD[uint256(user.dtype)], \\\"deposit is in locked status\\\");\\n\\n        uint256 amount = HOLDER_DEPOSIT_LIMIT;\\n        if(user.category == DepositCategory.HOLDER)\\n        {\\n            holders_num = holders_num - 1;\\n        }\\n        else if(user.category == DepositCategory.SUPER_HOLDER)\\n        {\\n            amount = SUPER_HOLDER_DEPOSIT_LIMIT;\\n            super_holders_num = super_holders_num - 1;\\n        }\\n            \\n        total_locked_esg = total_locked_esg - amount;\\n\\n        amount = amount + getInterestAvailable(msg.sender);\\n        uint256 balance = esgToken.balanceOf(address(this));\\n        if(balance < amount)\\n            amount = balance;\\n        delete accounts[msg.sender];\\n        esgToken.transfer(msg.sender, amount);\\n    }\\n\\n    function getInterestAvailable(address account) public view returns(uint256){\\n        User memory user = accounts[account];\\n        if(user.isUsed == 0)\\n            return 0;\\n        else\\n        {\\n            uint256 amount = 0;\\n            if(user.category == DepositCategory.HOLDER)\\n            {\\n                if(block.timestamp - user.depositTimestamp >=  HOLDER_PERIOD[uint256(user.dtype)])\\n                    amount = HOLDER_DEPOSIT_LIMIT * HOLDER_APY_TIERS[uint256(user.dtype)] * HOLDER_PERIOD[uint256(user.dtype)] / ONE_YEAR_SECONDS / 100;\\n                else\\n                    amount = HOLDER_DEPOSIT_LIMIT * HOLDER_APY_TIERS[uint256(user.dtype)] * (block.timestamp - user.depositTimestamp)/ ONE_YEAR_SECONDS / 100;\\n            }else if(user.category == DepositCategory.SUPER_HOLDER)\\n            {\\n                if(block.timestamp - user.depositTimestamp >=  HOLDER_PERIOD[uint256(user.dtype)])\\n                    amount = SUPER_HOLDER_DEPOSIT_LIMIT * SUPER_HOLDER_APY_TIERS[uint256(user.dtype)] * HOLDER_PERIOD[uint256(user.dtype)] / ONE_YEAR_SECONDS / 100;\\n                else\\n                    amount = SUPER_HOLDER_DEPOSIT_LIMIT * SUPER_HOLDER_APY_TIERS[uint256(user.dtype)] * (block.timestamp - user.depositTimestamp)/ ONE_YEAR_SECONDS / 100;\\n            }\\n            return amount - user.claimedAmount;\\n        }\\n    }\\n\\n    function _withdrawERC20Token(address tokenAddress) external onlyOwner {\\n        require(tokenAddress != address(0), \\\"invalid address\\\");\\n        uint256 tokenAmount = IERC20(tokenAddress).balanceOf(address(this));\\n        if(tokenAmount > 0)\\n            IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n        else\\n            revert(\\\"insufficient ERC20 tokens\\\");\\n    }\\n\\n    function _setHolderDepositLimit(uint256 depositLimit) external onlyOwner {\\n        HOLDER_DEPOSIT_LIMIT = depositLimit;\\n    }\\n\\n    function _setSuperHolderDepositLimit(uint256 depositLimit) external onlyOwner {\\n        SUPER_HOLDER_DEPOSIT_LIMIT = depositLimit;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_esgAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HOLDER_APY_TIERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOLDER_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HOLDER_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOLDER_QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_YEAR_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SUPER_HOLDER_APY_TIERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_HOLDER_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_HOLDER_QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"}],\"name\":\"_setHolderDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"}],\"name\":\"_setSuperHolderDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"_withdrawERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isUsed\",\"type\":\"uint256\"},{\"internalType\":\"enum SuperHolder.DepositCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"enum SuperHolder.DepositType\",\"name\":\"dtype\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SuperHolder.DepositCategory\",\"name\":\"_category\",\"type\":\"uint8\"},{\"internalType\":\"enum SuperHolder.DepositType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esgToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInterestAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holders_num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"super_holders_num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_interest_claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_locked_esg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SuperHolder", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "00000000000000000000000020cd2e7ec8f5d8b337fe46a4f565ccef1561b9a9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}