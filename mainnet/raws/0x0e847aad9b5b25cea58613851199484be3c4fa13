{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\n//            _____            _____                     _____          \r\n//           /\\    \\          /\\    \\                   /\\    \\         \r\n//          /::\\____\\        /::\\    \\                 /::\\    \\        \r\n//         /:::/    /       /::::\\    \\               /::::\\    \\       \r\n//        /:::/    /       /::::::\\    \\             /::::::\\    \\      \r\n//       /:::/    /       /:::/\\:::\\    \\           /:::/\\:::\\    \\     \r\n//      /:::/    /       /:::/__\\:::\\    \\         /:::/  \\:::\\    \\    \r\n//     /:::/    /       /::::\\   \\:::\\    \\       /:::/    \\:::\\    \\   \r\n//    /:::/    /       /::::::\\   \\:::\\    \\     /:::/    / \\:::\\    \\  \r\n//   /:::/    /       /:::/\\:::\\   \\:::\\    \\   /:::/    /   \\:::\\ ___\\ \r\n//  /:::/____/       /:::/  \\:::\\   \\:::\\____\\ /:::/____/  ___\\:::|    |\r\n//  \\:::\\    \\       \\::/    \\:::\\  /:::/    / \\:::\\    \\ /\\  /:::|____|\r\n//   \\:::\\    \\       \\/____/ \\:::\\/:::/    /   \\:::\\    /::\\ \\::/    / \r\n//    \\:::\\    \\               \\::::::/    /     \\:::\\   \\:::\\ \\/____/  \r\n//     \\:::\\    \\               \\::::/    /       \\:::\\   \\:::\\____\\    \r\n//      \\:::\\    \\              /:::/    /         \\:::\\  /:::/    /    \r\n//       \\:::\\    \\            /:::/    /           \\:::\\/:::/    /     \r\n//        \\:::\\    \\          /:::/    /             \\::::::/    /      \r\n//         \\:::\\____\\        /:::/    /               \\::::/    /       \r\n//          \\::/    /        \\::/    /                 \\::/    /        \r\n//           \\/____/          \\/____/                   \\/____/\r\n\r\n\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns(bytes4);\r\n}\r\n\r\n// Implementation of a custom tokenURI\r\ninterface ITokenURICustom {\r\n    function constructTokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// Ownable From OpenZeppelin Contracts v4.4.1 (Ownable.sol)\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// ERC721 Contract with customisable URI\r\n\r\ncontract ERC721 is Ownable {\r\n\r\n    // Events ERC721\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    // NFT contract metadata\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    // Extra token metadata links for redundancy \r\n    mapping(uint256 => string[]) private _metadataLinks;\r\n\r\n    // Mapping from token ID to URIs custom contract\r\n    mapping(uint256 => address) public customURI;\r\n\r\n    // Mapping from token ID to token URIs locked\r\n    mapping(uint256 => bool) public lockedURI;\r\n\r\n    uint256 _tokenCounter = 0;\r\n    \r\n\r\n    // ERC-2981: NFT Royalty Standard\r\n    address payable private _royaltyRecipient;\r\n    uint256 private _royaltyBps;\r\n\r\n    // Mapping from token ID to non-default royaltyBps\r\n    mapping(uint256 => uint256) private _royaltyBpsTokenId;\r\n\r\n\r\n    // CONSTRUCTOR\r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n\r\n        _royaltyRecipient = payable(msg.sender);\r\n        _royaltyBps = 1000;\r\n\r\n    }\r\n\r\n    // ERC165\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\r\n        return \r\n            interfaceId == 0x01ffc9a7 || // ERC165 = 0x01ffc9a7\r\n            interfaceId == 0x80ac58cd || // ERC721 = 0x80ac58cd\r\n            interfaceId == 0x5b5e139f || // ERC721 Metadata = 0x5b5e139f\r\n            interfaceId == 0x2a55205a;  // ERC2981 = 0x2a55205a;\r\n\r\n        // ERC721 = 0x80ac58cd\r\n        // ERC721 Metadata = 0x5b5e139f\r\n        // ERC721 Enumerable = 0x780e9d63\r\n        // ERC721 Receiver = 0x150b7a02\r\n        // ERC165 = 0x01ffc9a7\r\n        // ERC2981 = 0x2a55205a;\r\n    }\r\n\r\n    // URI & METADATA SECTION\r\n\r\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        if(customURI[tokenId] != address(0)) {\r\n            return ITokenURICustom(customURI[tokenId]).constructTokenURI(tokenId);\r\n        }\r\n        else {\r\n            return _tokenURIs[tokenId];\r\n        }\r\n \r\n    }\r\n\r\n    function metadataLinks(uint256 tokenId) public view returns (string[] memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        return _metadataLinks[tokenId];\r\n    }\r\n\r\n    function setTokenURI(uint256 tokenId, string calldata tokenURI_) public onlyOwner {\r\n        require(!lockedURI[tokenId], \"URI finalised\");\r\n        _tokenURIs[tokenId] = tokenURI_;\r\n\r\n    }\r\n\r\n    function setMetadataLinks(uint256 tokenId, string[] calldata links) public onlyOwner {\r\n        require(!lockedURI[tokenId], \"URI finalised\");\r\n        delete _metadataLinks[tokenId];\r\n        for(uint256 i = 0; i < links.length; i++) {\r\n            _metadataLinks[tokenId].push(links[i]);\r\n        }\r\n    }\r\n\r\n    function setCustomURI(uint256 tokenId, address contractURI) public onlyOwner {\r\n        require(!lockedURI[tokenId], \"URI finalised\");\r\n        customURI[tokenId] = contractURI;\r\n    }\r\n\r\n    function lockURI(uint256 tokenId) public onlyOwner {\r\n        require(!lockedURI[tokenId], \"URI finalised\");\r\n        lockedURI[tokenId] = true;\r\n\r\n    }\r\n\r\n    // ERC721 SECTION\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public {\r\n        _setApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function mint(address to, string calldata tokenURI_) public onlyOwner {\r\n        _tokenCounter++;\r\n        _mint(to, _tokenCounter);\r\n        _tokenURIs[_tokenCounter] = tokenURI_;\r\n    }\r\n\r\n    function mintCustomUri(address to, address contractURI) public onlyOwner {\r\n        _tokenCounter++;\r\n        _mint(to, _tokenCounter);\r\n        customURI[_tokenCounter] = contractURI;\r\n    }\r\n\r\n    function burn(uint256 tokenId) public {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: caller is not owner nor approved\");\r\n        _burn(tokenId);\r\n        delete _tokenURIs[tokenId];\r\n        delete _metadataLinks[tokenId];\r\n        delete customURI[tokenId];\r\n        delete lockedURI[tokenId];\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.code.length > 0) {\r\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    // EIP-2981 ROYALTY STANDARD\r\n    function setRoyaltyBps(uint256 royaltyPercentageBasisPoints) public onlyOwner {\r\n        _royaltyBps = royaltyPercentageBasisPoints;\r\n    }\r\n\r\n    function setRoyaltyBpsForTokenId(uint256 tokenId, uint256 royaltyPercentageBasisPoints) public onlyOwner {\r\n        _royaltyBpsTokenId[tokenId] = royaltyPercentageBasisPoints;\r\n    }\r\n\r\n    function setRoyaltyReceipientAddress(address payable royaltyReceipientAddress) public onlyOwner {\r\n        _royaltyRecipient = royaltyReceipientAddress;\r\n    }\r\n\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount) {\r\n        uint256 bps;\r\n\r\n        if(_royaltyBpsTokenId[tokenId] > 0) {\r\n            bps = _royaltyBpsTokenId[tokenId];\r\n        }\r\n        else {\r\n            bps = _royaltyBps;\r\n        }\r\n\r\n        uint256 royalty = (salePrice * bps) / 10000;\r\n        return (_royaltyRecipient, royalty);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customURI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lockURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"metadataLinks\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractURI\",\"type\":\"address\"}],\"name\":\"mintCustomUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractURI\",\"type\":\"address\"}],\"name\":\"setCustomURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"}],\"name\":\"setMetadataLinks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"royaltyPercentageBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercentageBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyBpsForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"royaltyReceipientAddress\",\"type\":\"address\"}],\"name\":\"setRoyaltyReceipientAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a746f6f6d7563686c61670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c41470000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9caf135da3d4612164e452ba15141dca10b7ccf338e58202a69e9ab6471b1046"}]}