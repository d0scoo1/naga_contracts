{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: AggregatorInterface.sol\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}\r\n\r\n// File: AggregatorV3Interface.sol\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 oundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: AssetRateAdapter.sol\r\n\r\n/// @notice Used as a wrapper for tokens that are interest bearing for an\r\n/// underlying token. Follows the cToken interface, however, can be adapted\r\n/// for other interest bearing tokens.\r\ninterface AssetRateAdapter {\r\n    function token() external view returns (address);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function getExchangeRateStateful() external returns (int256);\r\n\r\n    function getExchangeRateView() external view returns (int256);\r\n\r\n    function getAnnualizedSupplyRate() external view returns (uint256);\r\n} \r\n\r\n// File: IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: ISushiRouter.sol\r\n\r\ninterface ISushiRouter {\r\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns(uint256[] memory amounts);\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n} \r\n\r\n// File: ITradeFactory.sol\r\n\r\n// ySwap trade factory \r\ninterface ITradeFactory {\r\n    function enable(address, address) external;\r\n}\r\n// File: IWETH.sol\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n    function balanceOf(address user) external returns (uint256);\r\n}\r\n// File: Math.sol\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: SignedSafeMath.sol\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n        /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: nTokenERC20.sol\r\n\r\ninterface nTokenERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    function nTokenTotalSupply(address nTokenAddress) external view returns (uint256);\r\n\r\n    function nTokenTransferAllowance(\r\n        uint16 currencyId,\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function nTokenBalanceOf(uint16 currencyId, address account) external view returns (uint256);\r\n\r\n    function nTokenTransferApprove(\r\n        uint16 currencyId,\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function nTokenTransfer(\r\n        uint16 currencyId,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function nTokenTransferFrom(\r\n        uint16 currencyId,\r\n        address spender,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function nTokenTransferApproveAll(address spender, uint256 amount) external returns (bool);\r\n\r\n    function nTokenClaimIncentives() external returns (uint256);\r\n\r\n    function nTokenPresentValueAssetDenominated(uint16 currencyId) external view returns (int256);\r\n\r\n    function nTokenPresentValueUnderlyingDenominated(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (int256);\r\n\r\n    function balanceOf(address owner) external view returns(uint256);\r\n    function transfer(address to, uint256 amount) external returns(bool);\r\n} \r\n\r\n// File: AggregatorV2V3Interface.sol\r\n\r\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\r\n{\r\n}\r\n\r\n// File: SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: BalancerV2.sol\r\n\r\ninterface IBalancerPool is IERC20 {\r\n    enum SwapKind {GIVEN_IN, GIVEN_OUT}\r\n\r\n    struct SwapRequest {\r\n        SwapKind kind;\r\n        IERC20 tokenIn;\r\n        IERC20 tokenOut;\r\n        uint256 amount;\r\n        // Misc data\r\n        bytes32 poolId;\r\n        uint256 lastChangeBlock;\r\n        address from;\r\n        address to;\r\n        bytes userData;\r\n    }\r\n\r\n    function onSwap(\r\n        SwapRequest memory swapRequest,\r\n        uint256 indexIn,\r\n        uint256 indexOut\r\n    ) external view returns (uint256 amount);\r\n\r\n}\r\n\r\ninterface IBalancerVault {\r\n    enum SwapKind {GIVEN_IN, GIVEN_OUT}\r\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\r\n\r\n    struct BatchSwapStep {\r\n        bytes32 poolId;\r\n        uint256 assetInIndex;\r\n        uint256 assetOutIndex;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n    struct SingleSwap {\r\n        bytes32 poolId;\r\n        SwapKind kind;\r\n        IAsset assetIn;\r\n        IAsset assetOut;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    struct FundManagement {\r\n        address sender;\r\n        bool fromInternalBalance;\r\n        address payable recipient;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountCalculated);\r\n\r\n    function batchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds,\r\n        int256[] memory limits,\r\n        uint256 deadline\r\n    ) external payable returns (int256[] memory);\r\n\r\n    function getPoolTokens(bytes32 poolId) external view returns (\r\n        IERC20[] calldata tokens,\r\n        uint256[] calldata balances,\r\n        uint256 lastChangeBlock\r\n    );\r\n\r\n    function getPool(bytes32 poolId) external view returns (\r\n        address, PoolSpecialization\r\n        );\r\n}\r\n\r\ninterface IAsset {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n\r\n// File: BaseStrategy.sol\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtRatio;\r\n    uint256 minDebtPerHarvest;\r\n    uint256 maxDebtPerHarvest;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function name() external view returns (string calldata);\r\n\r\n    function symbol() external view returns (string calldata);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 expiry,\r\n        bytes calldata signature\r\n    ) external returns (bool);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function deposit() external returns (uint256);\r\n\r\n    function deposit(uint256 amount) external returns (uint256);\r\n\r\n    function deposit(uint256 amount, address recipient) external returns (uint256);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function withdraw() external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares) external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function depositLimit() external view returns (uint256);\r\n\r\n    function maxAvailableShares() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would increase this Strategy's borrow limit,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault expect this Strategy to return at the current\r\n     * block, based on its present performance (since its last report). Can be\r\n     * used to determine expectedReturn in your Strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /**\r\n     * This is the main contact point where the Strategy interacts with the\r\n     * Vault. It is critical that this call is handled as intended by the\r\n     * Strategy. Therefore, this function will be called by BaseStrategy to\r\n     * make sure the integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * This function should only be used in the scenario where the Strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits its position as fast as possible, such as a sudden change in\r\n     * market conditions leading to losses, or an imminent failure in an\r\n     * external dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /**\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     */\r\n    function governance() external view returns (address);\r\n\r\n    /**\r\n     * View the management address of the Vault to assert privileged functions\r\n     * can only be called by management. The Strategy serves the Vault, so it\r\n     * is subject to management defined by the Vault.\r\n     */\r\n    function management() external view returns (address);\r\n\r\n    /**\r\n     * View the guardian address of the Vault to assert privileged functions\r\n     * can only be called by guardian. The Strategy serves the Vault, so it\r\n     * is subject to guardian defined by the Vault.\r\n     */\r\n    function guardian() external view returns (address);\r\n}\r\n\r\n/**\r\n * This interface is here for the keeper bot to use.\r\n */\r\ninterface StrategyAPI {\r\n    function name() external view returns (string memory);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function want() external view returns (address);\r\n\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function isActive() external view returns (bool);\r\n\r\n    function delegatedAssets() external view returns (uint256);\r\n\r\n    function estimatedTotalAssets() external view returns (uint256);\r\n\r\n    function tendTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function tend() external;\r\n\r\n    function harvestTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function harvest() external;\r\n\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n}\r\n\r\ninterface HealthCheck {\r\n    function check(\r\n        uint256 profit,\r\n        uint256 loss,\r\n        uint256 debtPayment,\r\n        uint256 debtOutstanding,\r\n        uint256 totalDebt\r\n    ) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title Yearn Base Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to interoperate\r\n *  closely with the Vault contract. This contract should be inherited and the\r\n *  abstract methods implemented to adapt the Strategy to the particular needs\r\n *  it has to create a return.\r\n *\r\n *  Of special interest is the relationship between `harvest()` and\r\n *  `vault.report()'. `harvest()` may be called simply because enough time has\r\n *  elapsed since the last report, and not because any funds need to be moved\r\n *  or positions adjusted. This is critical so that the Vault may maintain an\r\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\r\n *  `harvest()`, and `harvestTrigger()` for further details.\r\n */\r\n\r\nabstract contract BaseStrategy {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    string public metadataURI;\r\n\r\n    // health checks\r\n    bool public doHealthCheck;\r\n    address public healthCheck;\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to track which version of `StrategyAPI` this Strategy\r\n     *  implements.\r\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\r\n     * @return A string which holds the current API version of this contract.\r\n     */\r\n    function apiVersion() public pure returns (string memory) {\r\n        return \"0.4.3\";\r\n    }\r\n\r\n    /**\r\n     * @notice This Strategy's name.\r\n     * @dev\r\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\r\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\r\n     *  `apiVersion()` function above.\r\n     * @return This Strategy's name.\r\n     */\r\n    function name() external view virtual returns (string memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\r\n     *  towards Yearn's TVL calculations.\r\n     * @dev\r\n     *  You can override this field to set it to a non-zero value if some of the assets of this\r\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\r\n     *  Note that this value must be strictly less than or equal to the amount provided by\r\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\r\n     *  Also note that this value is used to determine the total assets under management by this\r\n     *  strategy, for the purposes of computing the management fee in `Vault`\r\n     * @return\r\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\r\n     *  Locked (TVL) calculation across it's ecosystem.\r\n     */\r\n    function delegatedAssets() external view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    VaultAPI public vault;\r\n    address public strategist;\r\n    address public rewards;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n\r\n    event UpdatedStrategist(address newStrategist);\r\n\r\n    event UpdatedKeeper(address newKeeper);\r\n\r\n    event UpdatedRewards(address rewards);\r\n\r\n    event UpdatedMinReportDelay(uint256 delay);\r\n\r\n    event UpdatedMaxReportDelay(uint256 delay);\r\n\r\n    event UpdatedProfitFactor(uint256 profitFactor);\r\n\r\n    event UpdatedDebtThreshold(uint256 debtThreshold);\r\n\r\n    event EmergencyExitEnabled();\r\n\r\n    event UpdatedMetadataURI(string metadataURI);\r\n\r\n    // The minimum number of seconds between harvest calls. See\r\n    // `setMinReportDelay()` for more details.\r\n    uint256 public minReportDelay;\r\n\r\n    // The maximum number of seconds between harvest calls. See\r\n    // `setMaxReportDelay()` for more details.\r\n    uint256 public maxReportDelay;\r\n\r\n    // The minimum multiple that `callCost` must be above the credit/profit to\r\n    // be \"justifiable\". See `setProfitFactor()` for more details.\r\n    uint256 public profitFactor;\r\n\r\n    // Use this to adjust the threshold at which running a debt causes a\r\n    // harvest trigger. See `setDebtThreshold()` for more details.\r\n    uint256 public debtThreshold;\r\n\r\n    // See note on `setEmergencyExit()`.\r\n    bool public emergencyExit;\r\n\r\n    // modifiers\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyEmergencyAuthorized() {\r\n        require(\r\n            msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(),\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeepers() {\r\n        require(\r\n            msg.sender == keeper ||\r\n                msg.sender == strategist ||\r\n                msg.sender == governance() ||\r\n                msg.sender == vault.guardian() ||\r\n                msg.sender == vault.management(),\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyVaultManagers() {\r\n        require(msg.sender == vault.management() || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _vault) public {\r\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Initializes the Strategy, this is called only once, when the\r\n     *  contract is deployed.\r\n     * @dev `_vault` should implement `VaultAPI`.\r\n     * @param _vault The address of the Vault responsible for this Strategy.\r\n     * @param _strategist The address to assign as `strategist`.\r\n     * The strategist is able to change the reward address\r\n     * @param _rewards  The address to use for pulling rewards.\r\n     * @param _keeper The adddress of the _keeper. _keeper\r\n     * can harvest and tend a strategy.\r\n     */\r\n    function _initialize(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) internal {\r\n        require(address(want) == address(0), \"Strategy already initialized\");\r\n\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\r\n        strategist = _strategist;\r\n        rewards = _rewards;\r\n        keeper = _keeper;\r\n\r\n        // initialize variables\r\n        minReportDelay = 0;\r\n        maxReportDelay = 86400;\r\n        profitFactor = 100;\r\n        debtThreshold = 0;\r\n\r\n        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\r\n    }\r\n\r\n    function setHealthCheck(address _healthCheck) external onlyVaultManagers {\r\n        healthCheck = _healthCheck;\r\n    }\r\n\r\n    function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {\r\n        doHealthCheck = _doHealthCheck;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `strategist`.\r\n     *\r\n     *  This may only be called by governance or the existing strategist.\r\n     * @param _strategist The new address to assign as `strategist`.\r\n     */\r\n    function setStrategist(address _strategist) external onlyAuthorized {\r\n        require(_strategist != address(0));\r\n        strategist = _strategist;\r\n        emit UpdatedStrategist(_strategist);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `keeper`.\r\n     *\r\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\r\n     *  other than `governance()` or `strategist`. However, unlike\r\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\r\n     *  and `harvest()`, and no other authorized functions, following the\r\n     *  principle of least privilege.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _keeper The new address to assign as `keeper`.\r\n     */\r\n    function setKeeper(address _keeper) external onlyAuthorized {\r\n        require(_keeper != address(0));\r\n        keeper = _keeper;\r\n        emit UpdatedKeeper(_keeper);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `rewards`. EOA or smart contract which has the permission\r\n     *  to pull rewards from the vault.\r\n     *\r\n     *  This may only be called by the strategist.\r\n     * @param _rewards The address to use for pulling rewards.\r\n     */\r\n    function setRewards(address _rewards) external onlyStrategist {\r\n        require(_rewards != address(0));\r\n        vault.approve(rewards, 0);\r\n        rewards = _rewards;\r\n        vault.approve(rewards, uint256(-1));\r\n        emit UpdatedRewards(_rewards);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the minimum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The minimum number of seconds to wait between harvests.\r\n     */\r\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\r\n        minReportDelay = _delay;\r\n        emit UpdatedMinReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the maximum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The maximum number of seconds to wait between harvests.\r\n     */\r\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\r\n        maxReportDelay = _delay;\r\n        emit UpdatedMaxReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\r\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _profitFactor A ratio to multiply anticipated\r\n     * `harvest()` gas cost against.\r\n     */\r\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\r\n        profitFactor = _profitFactor;\r\n        emit UpdatedProfitFactor(_profitFactor);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Sets how far the Strategy can go into loss without a harvest and report\r\n     *  being required.\r\n     *\r\n     *  By default this is 0, meaning any losses would cause a harvest which\r\n     *  will subsequently report the loss to the Vault for tracking. (See\r\n     *  `harvestTrigger()` for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _debtThreshold How big of a loss this Strategy may carry without\r\n     * being required to report to the Vault.\r\n     */\r\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\r\n        debtThreshold = _debtThreshold;\r\n        emit UpdatedDebtThreshold(_debtThreshold);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\r\n     * of the file describing the strategy.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _metadataURI The URI that describe the strategy.\r\n     */\r\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\r\n        metadataURI = _metadataURI;\r\n        emit UpdatedMetadataURI(_metadataURI);\r\n    }\r\n\r\n    /**\r\n     * Resolve governance address from Vault contract, used to make assertions\r\n     * on protected functions in the Strategy.\r\n     */\r\n    function governance() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)\r\n     *  to `want` (using the native decimal characteristics of `want`).\r\n     * @dev\r\n     *  Care must be taken when working with decimals to assure that the conversion\r\n     *  is compatible. As an example:\r\n     *\r\n     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),\r\n     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\r\n     *\r\n     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`\r\n     * @return The amount in `want` of `_amtInEth` converted to `want`\r\n     **/\r\n    function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate estimate for the total amount of assets\r\n     *  (principle + return) that this Strategy is currently managing,\r\n     *  denominated in terms of `want` tokens.\r\n     *\r\n     *  This total should be \"realizable\" e.g. the total value that could\r\n     *  *actually* be obtained from this Strategy if it were to divest its\r\n     *  entire position based on current on-chain conditions.\r\n     * @dev\r\n     *  Care must be taken in using this function, since it relies on external\r\n     *  systems, which could be manipulated by the attacker to give an inflated\r\n     *  (or reduced) value produced by this function, based on current on-chain\r\n     *  conditions (e.g. this function is possible to influence through\r\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\r\n     *  mechanisms).\r\n     *\r\n     *  It is up to governance to use this function to correctly order this\r\n     *  Strategy relative to its peers in the withdrawal queue to minimize\r\n     *  losses for the Vault based on sudden withdrawals. This value should be\r\n     *  higher than the total debt of the Strategy and higher than its expected\r\n     *  value to be \"safe\".\r\n     * @return The estimated total assets in this Strategy.\r\n     */\r\n    function estimatedTotalAssets() public view virtual returns (uint256);\r\n\r\n    /*\r\n     * @notice\r\n     *  Provide an indication of whether this strategy is currently \"active\"\r\n     *  in that it is managing an active position, or will manage a position in\r\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\r\n     *  events can be tracked externally by indexing agents.\r\n     * @return True if the strategy is actively managing a position.\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\r\n    }\r\n\r\n    /**\r\n     * Perform any Strategy unwinding or other calls necessary to capture the\r\n     * \"free return\" this Strategy has generated since the last time its core\r\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and\r\n     * should be optimized to minimize losses as much as possible.\r\n     *\r\n     * This method returns any realized profits and/or realized losses\r\n     * incurred, and should return the total amounts of profits/losses/debt\r\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\r\n     * `want.balanceOf(this) >= _debtPayment + _profit`).\r\n     *\r\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\r\n     * debt limit, otherwise its value will be how far past the debt limit\r\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\r\n     *\r\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\r\n     *       It is okay for it to be less than `_debtOutstanding`, as that\r\n     *       should only used as a guide for how much is left to pay back.\r\n     *       Payments should be made to minimize loss from slippage, debt,\r\n     *       withdrawal fees, etc.\r\n     *\r\n     * See `vault.debtOutstanding()`.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /**\r\n     * Perform any adjustments to the core position(s) of this Strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\r\n     * was made is available for reinvestment. Also note that this number\r\n     * could be 0, and you should handle that scenario accordingly.\r\n     *\r\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\r\n\r\n    /**\r\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\r\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\r\n     * This function should return the amount of `want` tokens made available by the\r\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\r\n     * difference is due to a realized loss, or if there is some other sitution at play\r\n     * (e.g. locked funds) where the amount made available is less than what is needed.\r\n     *\r\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\r\n\r\n    /**\r\n     * Liquidate everything and returns the amount that got freed.\r\n     * This function is used during emergency exit instead of `prepareReturn()` to\r\n     * liquidate all of the Strategy's positions back to the Vault.\r\n     */\r\n\r\n    function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `tend()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `tend()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `tend()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be\r\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\r\n     *\r\n     *  This call and `harvestTrigger()` should never return `true` at the same\r\n     *  time.\r\n     * @param callCostInWei The keeper's estimated gas cost to call `tend()` (in wei).\r\n     * @return `true` if `tend()` should be called, `false` otherwise.\r\n     */\r\n    function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {\r\n        // We usually don't need tend, but if there are positions that need\r\n        // active maintainence, overriding this function is how you would\r\n        // signal for that.\r\n        // If your implementation uses the cost of the call in want, you can\r\n        // use uint256 callCost = ethToWant(callCostInWei);\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Adjust the Strategy's position. The purpose of tending isn't to\r\n     *  realize gains, but to maximize yield by reinvesting any returns.\r\n     *\r\n     *  See comments on `adjustPosition()`.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     */\r\n    function tend() external onlyKeepers {\r\n        // Don't take profits with this call, but adjust for better gains\r\n        adjustPosition(vault.debtOutstanding());\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `harvest()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `harvest()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `harvest()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be \"at a\r\n     *  loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\r\n     *\r\n     *  This call and `tendTrigger` should never return `true` at the\r\n     *  same time.\r\n     *\r\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\r\n     *  strategist-controlled parameters that will influence whether this call\r\n     *  returns `true` or not. These parameters will be used in conjunction\r\n     *  with the parameters reported to the Vault (see `params`) to determine\r\n     *  if calling `harvest()` is merited.\r\n     *\r\n     *  It is expected that an external system will check `harvestTrigger()`.\r\n     *  This could be a script run off a desktop or cloud bot (e.g.\r\n     *  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),\r\n     *  or via an integration with the Keep3r network (e.g.\r\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\r\n     * @param callCostInWei The keeper's estimated gas cost to call `harvest()` (in wei).\r\n     * @return `true` if `harvest()` should be called, `false` otherwise.\r\n     */\r\n    function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {\r\n        uint256 callCost = ethToWant(callCostInWei);\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if Strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should not trigger if we haven't waited long enough since previous harvest\r\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\r\n\r\n        // Should trigger if hasn't been called in a while\r\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\r\n\r\n        // If some amount is owed, pay it back\r\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\r\n        //       changes to the value from triggering a harvest directly through user\r\n        //       behavior. This should ensure reasonable resistance to manipulation\r\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > debtThreshold) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n        // Trigger if we have a loss to report\r\n        if (total.add(debtThreshold) < params.totalDebt) return true;\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\r\n\r\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\r\n        // is <N% of value moved)\r\n        uint256 credit = vault.creditAvailable();\r\n        return (profitFactor.mul(callCost) < credit.add(profit));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\r\n     *  the Strategy's position.\r\n     *\r\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\r\n     *  the Strategy's position.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     * @dev\r\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\r\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\r\n     *  to take in profits, to borrow newly available funds from the Vault, or\r\n     *  otherwise adjust its position. In other cases `harvest()` must be\r\n     *  called to report to the Vault on the Strategy's position, especially if\r\n     *  any losses have occurred.\r\n     */\r\n    function harvest() external onlyKeepers {\r\n        uint256 profit = 0;\r\n        uint256 loss = 0;\r\n        uint256 debtOutstanding = vault.debtOutstanding();\r\n        uint256 debtPayment = 0;\r\n        if (emergencyExit) {\r\n            // Free up as much capital as possible\r\n            uint256 amountFreed = liquidateAllPositions();\r\n            if (amountFreed < debtOutstanding) {\r\n                loss = debtOutstanding.sub(amountFreed);\r\n            } else if (amountFreed > debtOutstanding) {\r\n                profit = amountFreed.sub(debtOutstanding);\r\n            }\r\n            debtPayment = debtOutstanding.sub(loss);\r\n        } else {\r\n            // Free up returns for Vault to pull\r\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\r\n        }\r\n\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\r\n        // which is the amount it has earned since the last time it reported to\r\n        // the Vault.\r\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\r\n        debtOutstanding = vault.report(profit, loss, debtPayment);\r\n\r\n        // Check if free returns are left, and re-invest them\r\n        adjustPosition(debtOutstanding);\r\n\r\n        // call healthCheck contract\r\n        if (doHealthCheck && healthCheck != address(0)) {\r\n            require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), \"!healthcheck\");\r\n        } else {\r\n            doHealthCheck = true;\r\n        }\r\n\r\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Withdraws `_amountNeeded` to `vault`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @param _amountNeeded How much `want` to withdraw.\r\n     * @return _loss Any realized losses\r\n     */\r\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\r\n        uint256 amountFreed;\r\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\r\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\r\n        want.safeTransfer(msg.sender, amountFreed);\r\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\r\n    }\r\n\r\n    /**\r\n     * Do anything necessary to prepare this Strategy for migration, such as\r\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\r\n     * value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    /**\r\n     * @notice\r\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @dev\r\n     * The new Strategy's Vault must be the same as this Strategy's Vault.\r\n     *  The migration process should be carefully performed to make sure all\r\n     * the assets are migrated to the new address, which should have never\r\n     * interacted with the vault before.\r\n     * @param _newStrategy The Strategy to migrate to.\r\n     */\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault));\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Activates emergency exit. Once activated, the Strategy will exit its\r\n     *  position upon the next harvest, depositing all funds into the Vault as\r\n     *  quickly as is reasonable given on-chain conditions.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @dev\r\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\r\n     */\r\n    function setEmergencyExit() external onlyEmergencyAuthorized {\r\n        emergencyExit = true;\r\n        vault.revokeStrategy();\r\n\r\n        emit EmergencyExitEnabled();\r\n    }\r\n\r\n    /**\r\n     * Override this to add all tokens/tokenized positions this contract\r\n     * manages on a *persistent* basis (e.g. not just for swapping back to\r\n     * want ephemerally).\r\n     *\r\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\r\n     *\r\n     * Example:\r\n     * ```\r\n     *    function protectedTokens() internal override view returns (address[] memory) {\r\n     *      address[] memory protected = new address[](3);\r\n     *      protected[0] = tokenA;\r\n     *      protected[1] = tokenB;\r\n     *      protected[2] = tokenC;\r\n     *      return protected;\r\n     *    }\r\n     * ```\r\n     */\r\n    function protectedTokens() internal view virtual returns (address[] memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  Removes tokens from this Strategy that are not the type of tokens\r\n     *  managed by this Strategy. This may be used in case of accidentally\r\n     *  sending the wrong kind of token to this Strategy.\r\n     *\r\n     *  Tokens will be sent to `governance()`.\r\n     *\r\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\r\n     *  that are protected by this Strategy.\r\n     *\r\n     *  This may only be called by governance.\r\n     * @dev\r\n     *  Implement `protectedTokens()` to specify any additional tokens that\r\n     *  should be protected from sweeping in addition to `want`.\r\n     * @param _token The token to transfer out of this vault.\r\n     */\r\n    function sweep(address _token) external onlyGovernance {\r\n        require(_token != address(want), \"!want\");\r\n        require(_token != address(vault), \"!shares\");\r\n\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\nabstract contract BaseStrategyInitializable is BaseStrategy {\r\n    bool public isOriginal = true;\r\n    event Cloned(address indexed clone);\r\n\r\n    constructor(address _vault) public BaseStrategy(_vault) {}\r\n\r\n    function initialize(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) external virtual {\r\n        _initialize(_vault, _strategist, _rewards, _keeper);\r\n    }\r\n\r\n    function clone(address _vault) external returns (address) {\r\n        require(isOriginal, \"!clone\");\r\n        return this.clone(_vault, msg.sender, msg.sender, msg.sender);\r\n    }\r\n\r\n    function clone(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) external returns (address newStrategy) {\r\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\r\n        bytes20 addressBytes = bytes20(address(this));\r\n\r\n        assembly {\r\n            // EIP-1167 bytecode\r\n            let clone_code := mload(0x40)\r\n            mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone_code, 0x14), addressBytes)\r\n            mstore(add(clone_code, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            newStrategy := create(0, clone_code, 0x37)\r\n        }\r\n\r\n        BaseStrategyInitializable(newStrategy).initialize(_vault, _strategist, _rewards, _keeper);\r\n\r\n        emit Cloned(newStrategy);\r\n    }\r\n}\r\n\r\n// File: Types.sol\r\n\r\n/// @notice Different types of internal tokens\r\n///  - UnderlyingToken: underlying asset for a cToken (except for Ether)\r\n///  - cToken: Compound interest bearing token\r\n///  - cETH: Special handling for cETH tokens\r\n///  - Ether: the one and only\r\n///  - NonMintable: tokens that do not have an underlying (therefore not cTokens)\r\nenum TokenType {UnderlyingToken, cToken, cETH, Ether, NonMintable}\r\n\r\n/// @notice Specifies the different trade action types in the system. Each trade action type is\r\n/// encoded in a tightly packed bytes32 object. Trade action type is the frst big endian byte of the\r\n/// 32 byte trade action object. The schemas for each trade action type are defined below.\r\nenum TradeActionType {\r\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 minImpliedRate, uint120 unused)\r\n    Lend,\r\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 maxImpliedRate, uint128 unused)\r\n    Borrow,\r\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 assetCashAmount, uint32 minImpliedRate, uint32 maxImpliedRate, uint88 unused)\r\n    AddLiquidity,\r\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 tokenAmount, uint32 minImpliedRate, uint33 maxImpliedRate, uint88 unused)\r\n    RemoveLiquidity,\r\n    // (uint8 TradeActionType, uint32 Maturity, int88 fCashResidualAmount, uint128 unused)\r\n    PurchaseNTokenResidual,\r\n    // (uint8 TradeActionType, address CounterpartyAddress, int88 fCashAmountToSettle)\r\n    SettleCashDebt\r\n}\r\n\r\n/// @notice Specifies different deposit actions that can occur during BalanceAction or BalanceActionWithTrades\r\nenum DepositActionType {\r\n    // No deposit action\r\n    None,\r\n    // Deposit asset cash, depositActionAmount is specified in asset cash external precision\r\n    DepositAsset,\r\n    // Deposit underlying tokens that are mintable to asset cash, depositActionAmount is specified in underlying token\r\n    // external precision\r\n    DepositUnderlying,\r\n    // Deposits specified asset cash external precision amount into an nToken and mints the corresponding amount of\r\n    // nTokens into the account\r\n    DepositAssetAndMintNToken,\r\n    // Deposits specified underlying in external precision, mints asset cash, and uses that asset cash to mint nTokens\r\n    DepositUnderlyingAndMintNToken,\r\n    // Redeems an nToken balance to asset cash. depositActionAmount is specified in nToken precision. Considered a deposit action\r\n    // because it deposits asset cash into an account. If there are fCash residuals that cannot be sold off, will revert.\r\n    RedeemNToken,\r\n    // Converts specified amount of asset cash balance already in Notional to nTokens. depositActionAmount is specified in\r\n    // Notional internal 8 decimal precision.\r\n    ConvertCashToNToken\r\n}\r\n\r\n/// @notice Used internally for PortfolioHandler state\r\nenum AssetStorageState {NoChange, Update, Delete, RevertIfStored}\r\n\r\n/****** Calldata objects ******/\r\n\r\n/// @notice Defines a balance action for batchAction\r\nstruct BalanceAction {\r\n    // Deposit action to take (if any)\r\n    DepositActionType actionType;\r\n    uint16 currencyId;\r\n    // Deposit action amount must correspond to the depositActionType, see documentation above.\r\n    uint256 depositActionAmount;\r\n    // Withdraw an amount of asset cash specified in Notional internal 8 decimal precision\r\n    uint256 withdrawAmountInternalPrecision;\r\n    // If set to true, will withdraw entire cash balance. Useful if there may be an unknown amount of asset cash\r\n    // residual left from trading.\r\n    bool withdrawEntireCashBalance;\r\n    // If set to true, will redeem asset cash to the underlying token on withdraw.\r\n    bool redeemToUnderlying;\r\n}\r\n\r\n/// @notice Defines a balance action with a set of trades to do as well\r\nstruct BalanceActionWithTrades {\r\n    DepositActionType actionType;\r\n    uint16 currencyId;\r\n    uint256 depositActionAmount;\r\n    uint256 withdrawAmountInternalPrecision;\r\n    bool withdrawEntireCashBalance;\r\n    bool redeemToUnderlying;\r\n    // Array of tightly packed 32 byte objects that represent trades. See TradeActionType documentation\r\n    bytes32[] trades;\r\n}\r\n\r\n/****** In memory objects ******/\r\n/// @notice Internal object that represents settled cash balances\r\nstruct SettleAmount {\r\n    uint256 currencyId;\r\n    int256 netCashChange;\r\n}\r\n\r\n/// @notice Internal object that represents a token\r\nstruct Token {\r\n    address tokenAddress;\r\n    bool hasTransferFee;\r\n    int256 decimals;\r\n    TokenType tokenType;\r\n    uint256 maxCollateralBalance;\r\n}\r\n\r\n/// @notice Internal object that represents an nToken portfolio\r\nstruct nTokenPortfolio {\r\n    CashGroupParameters cashGroup;\r\n    PortfolioState portfolioState;\r\n    int256 totalSupply;\r\n    int256 cashBalance;\r\n    uint256 lastInitializedTime;\r\n    bytes6 parameters;\r\n    address tokenAddress;\r\n}\r\n\r\n/// @notice Internal object used during liquidation\r\nstruct LiquidationFactors {\r\n    address account;\r\n    // Aggregate free collateral of the account denominated in ETH underlying, 8 decimal precision\r\n    int256 netETHValue;\r\n    // Amount of net local currency asset cash before haircuts and buffers available\r\n    int256 localAssetAvailable;\r\n    // Amount of net collateral currency asset cash before haircuts and buffers available\r\n    int256 collateralAssetAvailable;\r\n    // Haircut value of nToken holdings denominated in asset cash, will be local or collateral nTokens based\r\n    // on liquidation type\r\n    int256 nTokenHaircutAssetValue;\r\n    // nToken parameters for calculating liquidation amount\r\n    bytes6 nTokenParameters;\r\n    // ETH exchange rate from local currency to ETH\r\n    ETHRate localETHRate;\r\n    // ETH exchange rate from collateral currency to ETH\r\n    ETHRate collateralETHRate;\r\n    // Asset rate for the local currency, used in cross currency calculations to calculate local asset cash required\r\n    AssetRateParameters localAssetRate;\r\n    // Used during currency liquidations if the account has liquidity tokens\r\n    CashGroupParameters collateralCashGroup;\r\n    // Used during currency liquidations if it is only a calculation, defaults to false\r\n    bool isCalculation;\r\n}\r\n\r\n/// @notice Internal asset array portfolio state\r\nstruct PortfolioState {\r\n    // Array of currently stored assets\r\n    PortfolioAsset[] storedAssets;\r\n    // Array of new assets to add\r\n    PortfolioAsset[] newAssets;\r\n    uint256 lastNewAssetIndex;\r\n    // Holds the length of stored assets after accounting for deleted assets\r\n    uint256 storedAssetLength;\r\n}\r\n\r\n/// @notice In memory ETH exchange rate used during free collateral calculation.\r\nstruct ETHRate {\r\n    // The decimals (i.e. 10^rateDecimalPlaces) of the exchange rate, defined by the rate oracle\r\n    int256 rateDecimals;\r\n    // The exchange rate from base to ETH (if rate invert is required it is already done)\r\n    int256 rate;\r\n    // Amount of buffer as a multiple with a basis of 100 applied to negative balances.\r\n    int256 buffer;\r\n    // Amount of haircut as a multiple with a basis of 100 applied to positive balances\r\n    int256 haircut;\r\n    // Liquidation discount as a multiple with a basis of 100 applied to the exchange rate\r\n    // as an incentive given to liquidators.\r\n    int256 liquidationDiscount;\r\n}\r\n\r\n/// @notice Internal object used to handle balance state during a transaction\r\nstruct BalanceState {\r\n    uint16 currencyId;\r\n    // Cash balance stored in balance state at the beginning of the transaction\r\n    int256 storedCashBalance;\r\n    // nToken balance stored at the beginning of the transaction\r\n    int256 storedNTokenBalance;\r\n    // The net cash change as a result of asset settlement or trading\r\n    int256 netCashChange;\r\n    // Net asset transfers into or out of the account\r\n    int256 netAssetTransferInternalPrecision;\r\n    // Net token transfers into or out of the account\r\n    int256 netNTokenTransfer;\r\n    // Net token supply change from minting or redeeming\r\n    int256 netNTokenSupplyChange;\r\n    // The last time incentives were claimed for this currency\r\n    uint256 lastClaimTime;\r\n    // The last integral supply amount when tokens were claimed\r\n    uint256 lastClaimIntegralSupply;\r\n}\r\n\r\n/// @dev Asset rate used to convert between underlying cash and asset cash\r\nstruct AssetRateParameters {\r\n    // Address of the asset rate oracle\r\n    AssetRateAdapter rateOracle;\r\n    // The exchange rate from base to quote (if invert is required it is already done)\r\n    int256 rate;\r\n    // The decimals of the underlying, the rate converts to the underlying decimals\r\n    int256 underlyingDecimals;\r\n}\r\n\r\n/// @dev Cash group when loaded into memory\r\nstruct CashGroupParameters {\r\n    uint16 currencyId;\r\n    uint256 maxMarketIndex;\r\n    AssetRateParameters assetRate;\r\n    bytes32 data;\r\n}\r\n\r\n/// @dev A portfolio asset when loaded in memory\r\nstruct PortfolioAsset {\r\n    // Asset currency id\r\n    uint256 currencyId;\r\n    uint256 maturity;\r\n    // Asset type, fCash or liquidity token.\r\n    uint256 assetType;\r\n    // fCash amount or liquidity token amount\r\n    int256 notional;\r\n    // Used for managing portfolio asset state\r\n    uint256 storageSlot;\r\n    // The state of the asset for when it is written to storage\r\n    AssetStorageState storageState;\r\n}\r\n\r\n/// @dev Market object as represented in memory\r\nstruct MarketParameters {\r\n    bytes32 storageSlot;\r\n    uint256 maturity;\r\n    // Total amount of fCash available for purchase in the market.\r\n    int256 totalfCash;\r\n    // Total amount of cash available for purchase in the market.\r\n    int256 totalAssetCash;\r\n    // Total amount of liquidity tokens (representing a claim on liquidity) in the market.\r\n    int256 totalLiquidity;\r\n    // This is the previous annualized interest rate in RATE_PRECISION that the market traded\r\n    // at. This is used to calculate the rate anchor to smooth interest rates over time.\r\n    uint256 lastImpliedRate;\r\n    // Time lagged version of lastImpliedRate, used to value fCash assets at market rates while\r\n    // remaining resistent to flash loan attacks.\r\n    uint256 oracleRate;\r\n    // This is the timestamp of the previous trade\r\n    uint256 previousTradeTime;\r\n}\r\n\r\n/****** Storage objects ******/\r\n\r\n/// @dev Token object in storage:\r\n///  20 bytes for token address\r\n///  1 byte for hasTransferFee\r\n///  1 byte for tokenType\r\n///  1 byte for tokenDecimals\r\n///  9 bytes for maxCollateralBalance (may not always be set)\r\nstruct TokenStorage {\r\n    // Address of the token\r\n    address tokenAddress;\r\n    // Transfer fees will change token deposit behavior\r\n    bool hasTransferFee;\r\n    TokenType tokenType;\r\n    uint8 decimalPlaces;\r\n    // Upper limit on how much of this token the contract can hold at any time\r\n    uint72 maxCollateralBalance;\r\n}\r\n\r\n/// @dev Exchange rate object as it is represented in storage, total storage is 25 bytes.\r\nstruct ETHRateStorage {\r\n    // Address of the rate oracle\r\n    AggregatorV2V3Interface rateOracle;\r\n    // The decimal places of precision that the rate oracle uses\r\n    uint8 rateDecimalPlaces;\r\n    // True of the exchange rate must be inverted\r\n    bool mustInvert;\r\n    // NOTE: both of these governance values are set with BUFFER_DECIMALS precision\r\n    // Amount of buffer to apply to the exchange rate for negative balances.\r\n    uint8 buffer;\r\n    // Amount of haircut to apply to the exchange rate for positive balances\r\n    uint8 haircut;\r\n    // Liquidation discount in percentage point terms, 106 means a 6% discount\r\n    uint8 liquidationDiscount;\r\n}\r\n\r\n/// @dev Asset rate oracle object as it is represented in storage, total storage is 21 bytes.\r\nstruct AssetRateStorage {\r\n    // Address of the rate oracle\r\n    AssetRateAdapter rateOracle;\r\n    // The decimal places of the underlying asset\r\n    uint8 underlyingDecimalPlaces;\r\n}\r\n\r\n/// @dev Governance parameters for a cash group, total storage is 9 bytes + 7 bytes for liquidity token haircuts\r\n/// and 7 bytes for rate scalars, total of 23 bytes. Note that this is stored packed in the storage slot so there\r\n/// are no indexes stored for liquidityTokenHaircuts or rateScalars, maxMarketIndex is used instead to determine the\r\n/// length.\r\nstruct CashGroupSettings {\r\n    // Index of the AMMs on chain that will be made available. Idiosyncratic fCash\r\n    // that is dated less than the longest AMM will be tradable.\r\n    uint8 maxMarketIndex;\r\n    // Time window in 5 minute increments that the rate oracle will be averaged over\r\n    uint8 rateOracleTimeWindow5Min;\r\n    // Total fees per trade, specified in BPS\r\n    uint8 totalFeeBPS;\r\n    // Share of the fees given to the protocol, denominated in percentage\r\n    uint8 reserveFeeShare;\r\n    // Debt buffer specified in 5 BPS increments\r\n    uint8 debtBuffer5BPS;\r\n    // fCash haircut specified in 5 BPS increments\r\n    uint8 fCashHaircut5BPS;\r\n    // If an account has a negative cash balance, it can be settled by incurring debt at the 3 month market. This\r\n    // is the basis points for the penalty rate that will be added the current 3 month oracle rate.\r\n    uint8 settlementPenaltyRate5BPS;\r\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\r\n    uint8 liquidationfCashHaircut5BPS;\r\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\r\n    uint8 liquidationDebtBuffer5BPS;\r\n    // Liquidity token haircut applied to cash claims, specified as a percentage between 0 and 100\r\n    uint8[] liquidityTokenHaircuts;\r\n    // Rate scalar used to determine the slippage of the market\r\n    uint8[] rateScalars;\r\n}\r\n\r\n/// @dev Holds account level context information used to determine settlement and\r\n/// free collateral actions. Total storage is 28 bytes\r\nstruct AccountContext {\r\n    // Used to check when settlement must be triggered on an account\r\n    uint40 nextSettleTime;\r\n    // For lenders that never incur debt, we use this flag to skip the free collateral check.\r\n    bytes1 hasDebt;\r\n    // Length of the account's asset array\r\n    uint8 assetArrayLength;\r\n    // If this account has bitmaps set, this is the corresponding currency id\r\n    uint16 bitmapCurrencyId;\r\n    // 9 total active currencies possible (2 bytes each)\r\n    bytes18 activeCurrencies;\r\n}\r\n\r\n/// @dev Holds nToken context information mapped via the nToken address, total storage is\r\n/// 16 bytes\r\nstruct nTokenContext {\r\n    // Currency id that the nToken represents\r\n    uint16 currencyId;\r\n    // Annual incentive emission rate denominated in WHOLE TOKENS (multiply by \r\n    // INTERNAL_TOKEN_PRECISION to get the actual rate)\r\n    uint32 incentiveAnnualEmissionRate;\r\n    // The last block time at utc0 that the nToken was initialized at, zero if it\r\n    // has never been initialized\r\n    uint32 lastInitializedTime;\r\n    // Length of the asset array, refers to the number of liquidity tokens an nToken\r\n    // currently holds\r\n    uint8 assetArrayLength;\r\n    // Each byte is a specific nToken parameter\r\n    bytes5 nTokenParameters;\r\n}\r\n\r\n/// @dev Holds account balance information, total storage 32 bytes\r\nstruct BalanceStorage {\r\n    // Number of nTokens held by the account\r\n    uint80 nTokenBalance;\r\n    // Last time the account claimed their nTokens\r\n    uint32 lastClaimTime;\r\n    // The total integral supply of the nToken at the last claim time packed into\r\n    // 56 bits. There is some loss of precision here but it is acceptable\r\n    uint56 packedLastClaimIntegralSupply;\r\n    // Cash balance of the account\r\n    int88 cashBalance;\r\n}\r\n\r\n/// @dev Holds information about a settlement rate, total storage 25 bytes\r\nstruct SettlementRateStorage {\r\n    uint40 blockTime;\r\n    uint128 settlementRate;\r\n    uint8 underlyingDecimalPlaces;\r\n}\r\n\r\n/// @dev Holds information about a market, total storage is 42 bytes so this spans\r\n/// two storage words\r\nstruct MarketStorage {\r\n    // Total fCash in the market\r\n    uint80 totalfCash;\r\n    // Total asset cash in the market\r\n    uint80 totalAssetCash;\r\n    // Last annualized interest rate the market traded at\r\n    uint32 lastImpliedRate;\r\n    // Last recorded oracle rate for the market\r\n    uint32 oracleRate;\r\n    // Last time a trade was made\r\n    uint32 previousTradeTime;\r\n    // This is stored in slot + 1\r\n    uint80 totalLiquidity;\r\n}\r\n\r\nstruct ifCashStorage {\r\n    // Notional amount of fCash at the slot, limited to int128 to allow for\r\n    // future expansion\r\n    int128 notional;\r\n}\r\n\r\n/// @dev A single portfolio asset in storage, total storage of 19 bytes\r\nstruct PortfolioAssetStorage {\r\n    // Currency Id for the asset\r\n    uint16 currencyId;\r\n    // Maturity of the asset\r\n    uint40 maturity;\r\n    // Asset type (fCash or Liquidity Token marker)\r\n    uint8 assetType;\r\n    // Notional\r\n    int88 notional;\r\n}\r\n\r\n/// @dev nToken total supply factors for the nToken, includes factors related\r\n/// to claiming incentives, total storage 32 bytes\r\nstruct nTokenTotalSupplyStorage {\r\n    // Total supply of the nToken\r\n    uint96 totalSupply;\r\n    // Integral of the total supply used for calculating the average total supply\r\n    uint128 integralTotalSupply;\r\n    // Last timestamp the supply value changed, used for calculating the integralTotalSupply\r\n    uint32 lastSupplyChangeTime;\r\n}\r\n\r\n/// @dev Used in view methods to return account balances in a developer friendly manner\r\nstruct AccountBalance {\r\n    uint16 currencyId;\r\n    int256 cashBalance;\r\n    int256 nTokenBalance;\r\n    uint256 lastClaimTime;\r\n    uint256 lastClaimIntegralSupply;\r\n}\r\n\r\n// File: NotionalGovernance.sol\r\n\r\ninterface NotionalGovernance {\r\n    event ListCurrency(uint16 newCurrencyId);\r\n    event UpdateETHRate(uint16 currencyId);\r\n    event UpdateAssetRate(uint16 currencyId);\r\n    event UpdateCashGroup(uint16 currencyId);\r\n    event DeployNToken(uint16 currencyId, address nTokenAddress);\r\n    event UpdateDepositParameters(uint16 currencyId);\r\n    event UpdateInitializationParameters(uint16 currencyId);\r\n    event UpdateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate);\r\n    event UpdateTokenCollateralParameters(uint16 currencyId);\r\n    event UpdateGlobalTransferOperator(address operator, bool approved);\r\n    event UpdateAuthorizedCallbackContract(address operator, bool approved);\r\n    event UpdateMaxCollateralBalance(uint16 currencyId, uint72 maxCollateralBalance);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event PauseRouterAndGuardianUpdated(address indexed pauseRouter, address indexed pauseGuardian);\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function setPauseRouterAndGuardian(address pauseRouter_, address pauseGuardian_) external;\r\n\r\n    function listCurrency(\r\n        TokenStorage calldata assetToken,\r\n        TokenStorage calldata underlyingToken,\r\n        AggregatorV2V3Interface rateOracle,\r\n        bool mustInvert,\r\n        uint8 buffer,\r\n        uint8 haircut,\r\n        uint8 liquidationDiscount\r\n    ) external returns (uint16 currencyId);\r\n\r\n    function updateMaxCollateralBalance(\r\n        uint16 currencyId,\r\n        uint72 maxCollateralBalanceInternalPrecision\r\n    ) external;\r\n\r\n    function enableCashGroup(\r\n        uint16 currencyId,\r\n        AssetRateAdapter assetRateOracle,\r\n        CashGroupSettings calldata cashGroup,\r\n        string calldata underlyingName,\r\n        string calldata underlyingSymbol\r\n    ) external;\r\n\r\n    function updateDepositParameters(\r\n        uint16 currencyId,\r\n        uint32[] calldata depositShares,\r\n        uint32[] calldata leverageThresholds\r\n    ) external;\r\n\r\n    function updateInitializationParameters(\r\n        uint16 currencyId,\r\n        uint32[] calldata annualizedAnchorRates,\r\n        uint32[] calldata proportions\r\n    ) external;\r\n\r\n    function updateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate) external;\r\n\r\n    function updateTokenCollateralParameters(\r\n        uint16 currencyId,\r\n        uint8 residualPurchaseIncentive10BPS,\r\n        uint8 pvHaircutPercentage,\r\n        uint8 residualPurchaseTimeBufferHours,\r\n        uint8 cashWithholdingBuffer10BPS,\r\n        uint8 liquidationHaircutPercentage\r\n    ) external;\r\n\r\n    function updateCashGroup(uint16 currencyId, CashGroupSettings calldata cashGroup) external;\r\n\r\n    function updateAssetRate(uint16 currencyId, AssetRateAdapter rateOracle) external;\r\n\r\n    function updateETHRate(\r\n        uint16 currencyId,\r\n        AggregatorV2V3Interface rateOracle,\r\n        bool mustInvert,\r\n        uint8 buffer,\r\n        uint8 haircut,\r\n        uint8 liquidationDiscount\r\n    ) external;\r\n\r\n    function updateGlobalTransferOperator(address operator, bool approved) external;\r\n\r\n    function updateAuthorizedCallbackContract(address operator, bool approved) external;\r\n}\r\n\r\n// File: NotionalViews.sol\r\n\r\ninterface NotionalViews {\r\n    function getMaxCurrencyId() external view returns (uint16);\r\n\r\n    function getCurrencyId(address tokenAddress) external view returns (uint16 currencyId);\r\n\r\n    function getCurrency(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (Token memory assetToken, Token memory underlyingToken);\r\n\r\n    function getRateStorage(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (ETHRateStorage memory ethRate, AssetRateStorage memory assetRate);\r\n\r\n    function getCurrencyAndRates(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (\r\n            Token memory assetToken,\r\n           Token memory underlyingToken,\r\n            ETHRate memory ethRate,\r\n            AssetRateParameters memory assetRate\r\n        );\r\n\r\n    function getCashGroup(uint16 currencyId) external view returns (CashGroupSettings memory);\r\n\r\n    function getCashGroupAndAssetRate(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (CashGroupSettings memory cashGroup, AssetRateParameters memory assetRate);\r\n\r\n    function getInitializationParameters(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (int256[] memory annualizedAnchorRates, int256[] memory proportions);\r\n\r\n    function getDepositParameters(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (int256[] memory depositShares, int256[] memory leverageThresholds);\r\n\r\n    function nTokenAddress(uint16 currencyId) external view returns (address);\r\n\r\n    function getNoteToken() external view returns (address);\r\n\r\n    function getSettlementRate(uint16 currencyId, uint40 maturity)\r\n        external\r\n        view\r\n        returns (AssetRateParameters memory);\r\n\r\n    function getMarket(uint16 currencyId, uint256 maturity, uint256 settlementDate)\r\n        external view returns (MarketParameters memory);\r\n\r\n    function getActiveMarkets(uint16 currencyId) external view returns (MarketParameters[] memory);\r\n\r\n    function getActiveMarketsAtBlockTime(uint16 currencyId, uint32 blockTime)\r\n        external\r\n        view\r\n        returns (MarketParameters[] memory);\r\n\r\n    function getReserveBalance(uint16 currencyId) external view returns (int256 reserveBalance);\r\n\r\n    function getNTokenPortfolio(address tokenAddress)\r\n        external\r\n        view\r\n        returns (PortfolioAsset[] memory liquidityTokens, PortfolioAsset[] memory netfCashAssets);\r\n\r\n    function getNTokenAccount(address tokenAddress)\r\n        external\r\n        view\r\n        returns (\r\n            uint16 currencyId,\r\n            uint256 totalSupply,\r\n            uint256 incentiveAnnualEmissionRate,\r\n            uint256 lastInitializedTime,\r\n            bytes5 nTokenParameters,\r\n            int256 cashBalance,\r\n            uint256 integralTotalSupply,\r\n            uint256 lastSupplyChangeTime\r\n        );\r\n\r\n    function getAccount(address account)\r\n        external\r\n        view\r\n        returns (\r\n            AccountContext memory accountContext,\r\n            AccountBalance[] memory accountBalances,\r\n            PortfolioAsset[] memory portfolio\r\n        );\r\n\r\n    function getAccountContext(address account) external view returns (AccountContext memory);\r\n\r\n    function getAccountBalance(uint16 currencyId, address account)\r\n        external\r\n        view\r\n        returns (\r\n            int256 cashBalance,\r\n            int256 nTokenBalance,\r\n            uint256 lastClaimTime\r\n        );\r\n\r\n    function getAccountPortfolio(address account) external view returns (PortfolioAsset[] memory);\r\n\r\n    function getfCashNotional(\r\n        address account,\r\n        uint16 currencyId,\r\n        uint256 maturity\r\n    ) external view returns (int256);\r\n\r\n    function getAssetsBitmap(address account, uint16 currencyId) external view returns (bytes32);\r\n\r\n    function getFreeCollateral(address account) external view returns (int256, int256[] memory);\r\n\r\n    function calculateNTokensToMint(uint16 currencyId, uint88 amountToDepositExternalPrecision)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getfCashAmountGivenCashAmount(\r\n        uint16 currencyId,\r\n        int88 netCashToAccount,\r\n        uint256 marketIndex,\r\n        uint256 blockTime\r\n    ) external view returns (int256);\r\n\r\n    function getCashAmountGivenfCashAmount(\r\n        uint16 currencyId,\r\n        int88 fCashAmount,\r\n        uint256 marketIndex,\r\n        uint256 blockTime\r\n    ) external view returns (int256, int256);\r\n\r\n    function nTokenGetClaimableIncentives(address account, uint256 blockTime)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n} \r\n\r\n// File: nERC1155Interface.sol\r\n\r\ninterface nERC1155Interface {\r\n    event TransferSingle(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 id,\r\n        uint256 value\r\n    );\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\r\n\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function signedBalanceOf(address account, uint256 id) external view returns (int256);\r\n\r\n    function signedBalanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (int256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external payable;\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external payable;\r\n\r\n    function decodeToAssets(uint256[] calldata ids, uint256[] calldata amounts)\r\n        external\r\n        view\r\n        returns (PortfolioAsset[] memory);\r\n\r\n    function encodeToId(\r\n        uint16 currencyId,\r\n        uint40 maturity,\r\n        uint8 assetType\r\n    ) external pure returns (uint256 id);\r\n}\r\n\r\n// File: NotionalProxy.sol\r\n\r\ninterface NotionalProxy is nTokenERC20, nERC1155Interface, NotionalGovernance, NotionalViews {\r\n    /** User trading events */\r\n    event CashBalanceChange(address indexed account, uint16 indexed currencyId, int256 netCashChange);\r\n    event nTokenSupplyChange(address indexed account, uint16 indexed currencyId, int256 tokenSupplyChange);\r\n    event MarketsInitialized(uint16 currencyId);\r\n    event SweepCashIntoMarkets(uint16 currencyId, int256 cashIntoMarkets);\r\n    event SettledCashDebt(\r\n        address indexed settledAccount,\r\n        uint16 indexed currencyId,\r\n        address indexed settler,\r\n        int256 amountToSettleAsset,\r\n        int256 fCashAmount\r\n    );\r\n    event nTokenResidualPurchase(\r\n        uint16 indexed currencyId,\r\n        uint40 indexed maturity,\r\n        address indexed purchaser,\r\n        int256 fCashAmountToPurchase,\r\n        int256 netAssetCashNToken\r\n    );\r\n    event LendBorrowTrade(\r\n        address indexed account,\r\n        uint16 indexed currencyId,\r\n        uint40 maturity,\r\n        int256 netAssetCash,\r\n        int256 netfCash\r\n    );\r\n    event AddRemoveLiquidity(\r\n        address indexed account,\r\n        uint16 indexed currencyId,\r\n        uint40 maturity,\r\n        int256 netAssetCash,\r\n        int256 netfCash,\r\n        int256 netLiquidityTokens\r\n    );\r\n\r\n    /// @notice Emitted when reserve fees are accrued\r\n    event ReserveFeeAccrued(uint16 indexed currencyId, int256 fee);\r\n    /// @notice Emitted whenever an account context has updated\r\n    event AccountContextUpdate(address indexed account);\r\n    /// @notice Emitted when an account has assets that are settled\r\n    event AccountSettled(address indexed account);\r\n    /// @notice Emitted when an asset rate is settled\r\n    event SetSettlementRate(uint256 indexed currencyId, uint256 indexed maturity, uint128 rate);\r\n\r\n    /* Liquidation Events */\r\n    event LiquidateLocalCurrency(\r\n        address indexed liquidated,\r\n        address indexed liquidator,\r\n        uint16 localCurrencyId,\r\n        int256 netLocalFromLiquidator\r\n    );\r\n\r\n    event LiquidateCollateralCurrency(\r\n        address indexed liquidated,\r\n        address indexed liquidator,\r\n        uint16 localCurrencyId,\r\n        uint16 collateralCurrencyId,\r\n        int256 netLocalFromLiquidator,\r\n        int256 netCollateralTransfer,\r\n        int256 netNTokenTransfer\r\n    );\r\n\r\n    event LiquidatefCashEvent(\r\n        address indexed liquidated,\r\n        address indexed liquidator,\r\n        uint16 localCurrencyId,\r\n        uint16 fCashCurrency,\r\n        int256 netLocalFromLiquidator,\r\n        uint256[] fCashMaturities,\r\n        int256[] fCashNotionalTransfer\r\n    );\r\n\r\n    /** UUPS Upgradeable contract calls */\r\n    function upgradeTo(address newImplementation) external;\r\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;\r\n    function getImplementation() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function pauseRouter() external view returns (address);\r\n    function pauseGuardian() external view returns (address);\r\n\r\n    /** Initialize Markets Action */\r\n    function initializeMarkets(uint16 currencyId, bool isFirstInit) external;\r\n\r\n    function sweepCashIntoMarkets(uint16 currencyId) external;\r\n\r\n    /** Redeem nToken Action */\r\n    function nTokenRedeem(\r\n        address redeemer,\r\n        uint16 currencyId,\r\n        uint96 tokensToRedeem_,\r\n        bool sellTokenAssets,\r\n        bool acceptResidualAssets\r\n    ) external returns (int256, bool);\r\n\r\n    /** Account Action */\r\n    function enableBitmapCurrency(uint16 currencyId) external;\r\n\r\n    function settleAccount(address account) external;\r\n\r\n    function depositUnderlyingToken(\r\n        address account,\r\n        uint16 currencyId,\r\n        uint256 amountExternalPrecision\r\n    ) external payable returns (uint256);\r\n\r\n    function depositAssetToken(\r\n        address account,\r\n        uint16 currencyId,\r\n        uint256 amountExternalPrecision\r\n    ) external returns (uint256);\r\n\r\n    function withdraw(\r\n        uint16 currencyId,\r\n        uint88 amountInternalPrecision,\r\n        bool redeemToUnderlying\r\n    ) external returns (uint256);\r\n\r\n    /** Batch Action */\r\n    function batchBalanceAction(address account, BalanceAction[] calldata actions) external payable;\r\n\r\n    function batchBalanceAndTradeAction(address account, BalanceActionWithTrades[] calldata actions)\r\n        external\r\n        payable;\r\n\r\n    function batchBalanceAndTradeActionWithCallback(\r\n        address account,\r\n        BalanceActionWithTrades[] calldata actions,\r\n        bytes calldata callbackData\r\n    ) external payable;\r\n\r\n    /** Liquidation Action */\r\n    function calculateLocalCurrencyLiquidation(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint96 maxNTokenLiquidation\r\n    ) external returns (int256, int256);\r\n\r\n    function liquidateLocalCurrency(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint96 maxNTokenLiquidation\r\n    ) external returns (int256, int256);\r\n\r\n    function calculateCollateralCurrencyLiquidation(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint16 collateralCurrency,\r\n        uint128 maxCollateralLiquidation,\r\n        uint96 maxNTokenLiquidation\r\n    )\r\n        external\r\n        returns (\r\n            int256,\r\n            int256,\r\n            int256\r\n        );\r\n\r\n    function liquidateCollateralCurrency(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint16 collateralCurrency,\r\n        uint128 maxCollateralLiquidation,\r\n        uint96 maxNTokenLiquidation,\r\n        bool withdrawCollateral,\r\n        bool redeemToUnderlying\r\n    )\r\n        external\r\n        returns (\r\n            int256,\r\n            int256,\r\n            int256\r\n        );\r\n\r\n    function calculatefCashLocalLiquidation(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint256[] calldata fCashMaturities,\r\n        uint256[] calldata maxfCashLiquidateAmounts\r\n    ) external returns (int256[] memory, int256);\r\n\r\n    function liquidatefCashLocal(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint256[] calldata fCashMaturities,\r\n        uint256[] calldata maxfCashLiquidateAmounts\r\n    ) external returns (int256[] memory, int256);\r\n\r\n    function calculatefCashCrossCurrencyLiquidation(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint16 fCashCurrency,\r\n        uint256[] calldata fCashMaturities,\r\n        uint256[] calldata maxfCashLiquidateAmounts\r\n    ) external returns (int256[] memory, int256);\r\n\r\n    function liquidatefCashCrossCurrency(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint16 fCashCurrency,\r\n        uint256[] calldata fCashMaturities,\r\n        uint256[] calldata maxfCashLiquidateAmounts\r\n    ) external returns (int256[] memory, int256);\r\n}\r\n\r\n// File: NotionalLpLib.sol\r\n\r\n// Necessary interfaces to:\r\n// 1) interact with the Notional protocol\r\n\r\nlibrary NotionalLpLib {\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath for int256;\r\n    int256 private constant PRICE_DECIMALS = 1e18;\r\n    uint256 private constant SLIPPAGE_FACTOR = 9_800;\r\n    uint256 private constant MAX_BPS = 10_000;\r\n    IWETH private constant weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    uint256 private constant WETH_DECIMALS = 1e18;\r\n    uint8 private constant TRADE_TYPE_LEND = 0;\r\n    uint16 private constant ETH_CURRENCY_ID = 1;\r\n\r\n    struct NTokenTotalValueFromPortfolioVars {\r\n        address _strategy;\r\n        address _nTokenAddress;\r\n        NotionalProxy _notionalProxy;\r\n        uint16 _currencyID;\r\n    }\r\n    struct RewardsValueVars {\r\n        IERC20 noteToken;\r\n        NotionalProxy notionalProxy;\r\n        IBalancerVault balancerVault;\r\n        bytes32 poolId;\r\n        IBalancerPool balancerPool;\r\n        uint16 currencyID;\r\n        ISushiRouter quoter;\r\n        address want;\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Get the current value of the nToken LP position following the same methodology as in: \r\n     *  https://github.com/notional-finance/sdk-v2/blob/master/src/system/NTokenValue.ts#L165-L171\r\n     * @param NTokenVars, custom struct containing:\r\n     * - _strategy, address of the strategy owning the position\r\n     * - _nTokenAddress, address of the nToken to use\r\n     * - _notionalProxy, address of the Notional Proxy\r\n     * - _currencyID, currency ID of the strategy\r\n     * @return uint256 totalUnderlyingClaim, total number of want tokens\r\n     */\r\n    function getNTokenTotalValueFromPortfolio(\r\n        NTokenTotalValueFromPortfolioVars memory NTokenVars\r\n        ) public view returns(uint256 totalUnderlyingClaim) {\r\n        \r\n        // If the nToken has an idiosyncratic position we are in the 24h lock period and cannot calculate the \r\n        // portfolio value as there is an fcash position without market\r\n        if (checkIdiosyncratic(NTokenVars._notionalProxy, NTokenVars._currencyID, NTokenVars._notionalProxy.nTokenAddress(NTokenVars._currencyID))) {\r\n            return 0;\r\n        }\r\n\r\n        // First step, get how many nTokens the strategy owns\r\n        (, int256 nTokenBalance, ) = NTokenVars._notionalProxy.getAccountBalance(NTokenVars._currencyID, NTokenVars._strategy);\r\n\r\n        if (nTokenBalance > 0) {\r\n            // Get the current portfolio of the nToken that provided liquidity to the different pools:\r\n            // - liquidity tokens provided to each pool\r\n            // - current fcash position in each pool\r\n            (PortfolioAsset[] memory liquidityTokens, PortfolioAsset[] memory netfCashAssets) = NTokenVars._notionalProxy.getNTokenPortfolio(NTokenVars._nTokenAddress);\r\n            // Get the current state of the active markets, notably:\r\n            // - # of liquidity tokens used to provide liquidity to each market\r\n            // - current # of asset tokens available in each market\r\n            // - current # of fcash tokens available in each market\r\n            MarketParameters[] memory _activeMarkets = NTokenVars._notionalProxy.getActiveMarkets(NTokenVars._currencyID);\r\n            \r\n            // Total number of nTokens available, used to calculate the share of the strategy\r\n            int256 totalSupply = int256(NTokenVars._notionalProxy.nTokenTotalSupply(NTokenVars._nTokenAddress));\r\n\r\n            // Iterate over all active markets and sum value of each position \r\n            int256 fCashClaim = 0;\r\n            int256 assetCashClaim = 0;\r\n            (,,,,,int256 totalAssetCashClaim,,) = NTokenVars._notionalProxy.getNTokenAccount(NTokenVars._nTokenAddress);\r\n            totalAssetCashClaim = totalAssetCashClaim.mul(nTokenBalance).div(totalSupply);\r\n\r\n            // Process to get the current value of the position:\r\n            // For each available market:\r\n            // 1. Calculate the share of liquidity brought by the nToken by calculating the ratio between the \r\n            // # of nToken liq. tokens for theta market and the total liquidity tokens that fed that spcedific market\r\n            // 2. Using that liq. share calculate the proportion of cTokens and fcash that the nToken \"owns\"\r\n            // 3. Net the current share of market fcash against the current fcash position of the nToken (could be net lender or borrower)\r\n            // 4. Calculate the strategy's share of both the cToken and fcash by applying the proportion between the held\r\n            // nTokens and the total supply\r\n            // 5. Convert the net fcash to cTokens and add it to the cTokens share from step 2\r\n            // 6. Add the cToken position for each market\r\n            // 7. Convert to underlying\r\n            for(uint256 i = 0; i < liquidityTokens.length; i++) {\r\n                if(liquidityTokens[i].maturity == _activeMarkets[i].maturity) {\r\n                    // 1-2. Calculate the fcash claim on the market using liquidity tokens share\r\n                    fCashClaim = liquidityTokens[i].notional.mul(_activeMarkets[i].totalfCash).div(_activeMarkets[i].totalLiquidity);\r\n                    // 1-2. Calculate the cTokens claim on the market using liquidity tokens share\r\n                    assetCashClaim = liquidityTokens[i].notional.mul(_activeMarkets[i].totalAssetCash).div(_activeMarkets[i].totalLiquidity);\r\n                    // 3. Net the fcash share against the current fcash position of the nToken\r\n                    fCashClaim += netfCashAssets[i].notional;\r\n                    // 4. Calculate the strategy's share of fcash claim\r\n                    fCashClaim = fCashClaim.mul(nTokenBalance).div(totalSupply);\r\n                    // 4. Calculate the strategy's share of cToken claim\r\n                    assetCashClaim = assetCashClaim.mul(nTokenBalance).div(totalSupply);\r\n\r\n                    if (fCashClaim != 0) {\r\n                        uint256 mIndex = getMarketIndexForMaturity(\r\n                            NTokenVars._notionalProxy,\r\n                            NTokenVars._currencyID,\r\n                            liquidityTokens[i].maturity\r\n                            );\r\n                        // 5. Convert the netfcash claim to cTokens\r\n                        (int256 assetInternalNotation,) = NTokenVars._notionalProxy.getCashAmountGivenfCashAmount(\r\n                            NTokenVars._currencyID,\r\n                            int88(-fCashClaim),\r\n                            mIndex,\r\n                            block.timestamp\r\n                        );\r\n                        // 5. Add it to the cToken share of market liquidity\r\n                        assetCashClaim = assetCashClaim.add(assetInternalNotation);\r\n                    }\r\n                    // 6. Add positions for each market\r\n                    totalAssetCashClaim = totalAssetCashClaim.add(assetCashClaim);\r\n                }\r\n            }\r\n\r\n            (\r\n                Token memory assetToken,\r\n                Token memory underlyingToken,\r\n                ,\r\n                AssetRateParameters memory assetRate\r\n            ) = NTokenVars._notionalProxy.getCurrencyAndRates(NTokenVars._currencyID);\r\n            // 7. Convert the cToken position to underlying\r\n            totalUnderlyingClaim = uint256(totalAssetCashClaim.mul(assetRate.rate).div(PRICE_DECIMALS));\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Get the market index for a specific maturity\r\n     * @param _notionalProxy, Notional proxy address\r\n     * @param _currencyID, Currency ID of the strategy\r\n     * @param _maturity, Maturity to look for\r\n     * @return uint256 index of the market we're looking for\r\n     */\r\n    function getMarketIndexForMaturity(\r\n        NotionalProxy _notionalProxy,\r\n        uint16 _currencyID,\r\n        uint256 _maturity\r\n    ) internal view returns(uint256) {\r\n        MarketParameters[] memory _activeMarkets = _notionalProxy.getActiveMarkets(_currencyID);\r\n        bool success = false;\r\n        for(uint256 j=0; j<_activeMarkets.length; j++){\r\n            if(_maturity == _activeMarkets[j].maturity) {\r\n                return j+1;\r\n            }\r\n        }\r\n        \r\n        if (success == false) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Check whether the nToken has an idiosyncratic fcash position (non-opeable market) by looping through\r\n     * the nToken positions (max is 3) and check whether it has a current active market or not\r\n     * @param _notionalProxy, Notional proxy address\r\n     * @param _currencyID, Currency ID of the strategy\r\n     * @param _nTokenAddress, Address for the nToken\r\n     * @return bool indicating whether the nToken has an idiosyncratic position or not\r\n     */\r\n    function checkIdiosyncratic(\r\n        NotionalProxy _notionalProxy,\r\n        uint16 _currencyID,\r\n        address _nTokenAddress\r\n    ) public view returns(bool) {\r\n        MarketParameters[] memory _activeMarkets = _notionalProxy.getActiveMarkets(_currencyID);\r\n        (, PortfolioAsset[] memory netfCashAssets) = _notionalProxy.getNTokenPortfolio(_nTokenAddress);\r\n        for(uint256 i=0; i<netfCashAssets.length; i++){\r\n            if(getMarketIndexForMaturity(_notionalProxy, _currencyID, netfCashAssets[i].maturity) == 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  External view estimating the rewards value in want tokens. We simulate the trade in balancer to \r\n     * get WETH from the NOTE / WETH pool and if want is not weth, we simulate a trade in sushi to obtain want tokens \r\n     * @param noteToken, rewards token to estimate value\r\n     * @param notionalProxy, notional proxy distributing the rewards\r\n     * @param balancerVault, vault address in Balancer to simulate the swap\r\n     * @param poolId, identifier NOTE/weth pool in balancer\r\n     * @param currencyID, identifier of the currency operated in the strategy\r\n     * @param quoter, sushi router used to estimate simulate the weth / want trade\r\n     * @param want, address of the want token to convert the rewards to\r\n     * @return uint256 tokensOut, current number of want tokens the strategy would obtain for its rewards\r\n     */\r\n    function getRewardsValue(\r\n        RewardsValueVars memory rewardsValueVars\r\n    ) external view returns(uint256 tokensOut) {\r\n        // Get NOTE rewards\r\n        uint256 claimableRewards = rewardsValueVars.noteToken.balanceOf(address(this));\r\n        claimableRewards += rewardsValueVars.notionalProxy.nTokenGetClaimableIncentives(address(this), block.timestamp);\r\n        if (claimableRewards > 0) {\r\n            (IERC20[] memory tokens,\r\n            uint256[] memory balances,\r\n            uint256 lastChangeBlock) = rewardsValueVars.balancerVault.getPoolTokens(rewardsValueVars.poolId);\r\n            // Setup SwapRequest object for balancer\r\n            IBalancerPool.SwapRequest memory swapRequest = IBalancerPool.SwapRequest(\r\n                IBalancerPool.SwapKind.GIVEN_IN,\r\n                tokens[1],\r\n                tokens[0],\r\n                claimableRewards,\r\n                rewardsValueVars.poolId,\r\n                lastChangeBlock,\r\n                address(this),\r\n                address(this),\r\n                abi.encode(0)\r\n            );\r\n            // Simulate NOTE/WETH trade\r\n            tokensOut = rewardsValueVars.balancerPool.onSwap(\r\n                swapRequest, \r\n                balances[1],\r\n                balances[0] \r\n            );\r\n            \r\n            // If want is not weth, simulate sushi trade\r\n            if(rewardsValueVars.currencyID > 1) {\r\n                // Sushi path is [weth, want]\r\n                address[] memory path = new address[](2);\r\n                path[0] = address(weth);\r\n                path[1] = address(rewardsValueVars.want);\r\n                // Get expected number of tokens out\r\n                {\r\n                    tokensOut = rewardsValueVars.quoter.getAmountsOut(WETH_DECIMALS, path)[1].mul(tokensOut).mul(SLIPPAGE_FACTOR).div(MAX_BPS).div(WETH_DECIMALS);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Function exchanging between ETH to 'want'\r\n     * @param amount, Amount to exchange\r\n     * @param asset, 'want' asset to exchange to\r\n     * @param notionalProxy, Notional Proxu address\r\n     * @param currendyID, ID of want\r\n     * @return uint256 result, the equivalent ETH amount in 'want' tokens\r\n     */\r\n    function fromETH(\r\n        uint256 amount,\r\n        address asset,\r\n        NotionalProxy notionalProxy,\r\n        uint16 currencyID\r\n        )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (\r\n            amount == 0 ||\r\n            amount == type(uint256).max ||\r\n            address(asset) == address(weth) // 1:1 change\r\n        ) {\r\n            return amount;\r\n        }\r\n\r\n        (\r\n            Token memory assetToken,\r\n            Token memory underlyingToken,\r\n            ETHRate memory ethRate,\r\n            AssetRateParameters memory assetRate\r\n        ) = notionalProxy.getCurrencyAndRates(currencyID);\r\n            \r\n        return amount.mul(uint256(underlyingToken.decimals)).div(uint256(ethRate.rate));\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  External function used to offset a residual borrowing position\r\n     * @param _notionalProxy, Notional Proxy contract\r\n     * @param _currencyID, ID of token involved\r\n     * @param _amount, Amount to lend\r\n     * @param _fCashAmount, fCash amount needed to offset the residual position\r\n     * @param _marketIndex, market index of the residual position\r\n     * @param _ETH_CURRENCY_ID, ID of ETH as tx changes a little\r\n     * @return bytes32 result, the encoded trade ready to be used in Notional's 'BatchTradeAction'\r\n     */\r\n    function lendAmountManually (\r\n        NotionalProxy _notionalProxy,\r\n        uint16 _currencyID,\r\n        uint256 _amount,\r\n        uint256 _fCashAmount,\r\n        uint256 _marketIndex\r\n    ) external {\r\n        BalanceActionWithTrades[] memory _actions = new BalanceActionWithTrades[](1);\r\n        \r\n        bytes32[] memory _trades = new bytes32[](1);\r\n        _trades[0] = getTradeFrom(TRADE_TYPE_LEND, _marketIndex, _fCashAmount);\r\n\r\n        _actions[0] = BalanceActionWithTrades(\r\n            DepositActionType.DepositUnderlying,\r\n            _currencyID,\r\n            _amount,\r\n            0, \r\n            true,\r\n            true,\r\n            _trades\r\n        );\r\n\r\n        if (_currencyID == ETH_CURRENCY_ID) {\r\n            _notionalProxy.batchBalanceAndTradeAction{value: _amount}(address(this), _actions);\r\n            weth.deposit{value: address(this).balance}();\r\n        } else {\r\n            _notionalProxy.batchBalanceAndTradeAction(address(this), _actions);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Internal function encoding a trade parameter into a bytes32 variable needed for Notional\r\n     * @param _tradeType, Identification of the trade to perform, following the Notional classification in enum 'TradeActionType'\r\n     * @param _marketIndex, Market index in which to trade into\r\n     * @param _amount, fCash amount to trade\r\n     * @return bytes32 result, the encoded trade ready to be used in Notional's 'BatchTradeAction'\r\n     */\r\n    function getTradeFrom(uint8 _tradeType, uint256 _marketIndex, uint256 _amount) internal returns (bytes32 result) {\r\n        uint8 tradeType = uint8(_tradeType);\r\n        uint8 marketIndex = uint8(_marketIndex);\r\n        uint88 fCashAmount = uint88(_amount);\r\n        uint32 minSlippage = uint32(0);\r\n        uint120 padding = uint120(0);\r\n\r\n        // We create result of trade in a bitmap packed encoded bytes32\r\n        // (unpacking of the trade in Notional happens here: \r\n        // https://github.com/notional-finance/contracts-v2/blob/master/contracts/external/actions/TradingAction.sol#L322)\r\n        result = bytes32(uint(tradeType)) << 248;\r\n        result |= bytes32(uint(marketIndex) << 240);\r\n        result |= bytes32(uint(fCashAmount) << 152);\r\n        result |= bytes32(uint(minSlippage) << 120);\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n// File: Strategy.sol\r\n\r\n// Necessary interfaces to:\r\n// 1) interact with the Notional protocol\r\n\r\n// 2) Transact between WETH (Vault) and ETH (Notional)\r\n\r\n// 3) Swap and quote rewards to any want\r\n\r\n// 4) Views not fitting in the contract due to bytecode\r\n\r\n// These are the core Yearn libraries\r\n\r\n// Import the necessary structs to send/ receive data from Notional\r\n\r\n// Import the trade factory enabler\r\n\r\n/*\r\n     * @notice\r\n     *  Yearn Strategy allocating vault's funds to an LP position funding Notional's fixed rate lend and borrow markets\r\n*/\r\ncontract Strategy is BaseStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    // NOTE token for rewards\r\n    IERC20 private noteToken;\r\n    // Address of the nToken we interact with\r\n    nTokenERC20 private nToken;\r\n    // Balancer pool contract to swap NOTE for WETH\r\n    IBalancerPool private balancerPool;\r\n    // Balancer vault used to swap rewards\r\n    IBalancerVault private balancerVault;\r\n    // Id of the balancer NOTE/WETH pool to use\r\n    bytes32 private poolId;\r\n    // ID of the asset being lent in Notional\r\n    uint16 private currencyID;\r\n    // Only allow withdrawals with this expected max loss value\r\n    uint256 private slippageLiquidatePosition;\r\n    // ETH currency ID\r\n    uint16 private constant ETH_CURRENCY_ID = 1;\r\n    // ySwap trade factory\r\n    address private tradeFactory = address(0);\r\n    // To control whether migrations try to get positions out of notional\r\n    bool private forceMigration;\r\n    // Initialize Sushi router interface to quote WETH for want\r\n    ISushiRouter private constant quoter = ISushiRouter(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n    // Initialize WETH interface\r\n    IWETH private constant weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    // For % calculations\r\n    uint256 private constant MAX_BPS = 10_000;\r\n    // To control when rewards are claimed \r\n    bool public shouldClaimRewards;\r\n    // For cloning purposes\r\n    bool public isOriginal = true;\r\n    // NotionalContract: proxy that points to a router with different implementations depending on function \r\n    NotionalProxy public notionalProxy;\r\n    // EVENTS\r\n    event Cloned(address indexed clone);\r\n\r\n    /*\r\n     * @notice constructor for the contract, called at deployment, calls the initializer function used for \r\n     * cloning strategies\r\n     * @param _vault Address of the corresponding vault the contract reports to\r\n     * @param _notionalProxy Notional proxy used to interact with the protocol\r\n     * @param _currencyID Notional identifier of the currency (token) the strategy interacts with:\r\n     * 1 - ETH\r\n     * 2 - DAI\r\n     * 3 - USDC\r\n     * 4 - WBTC\r\n     * @param _balancerVault Address of the balancer vault to use to exchange NOTEs to WETH\r\n     * @param _poolId 32 bytes identifier of the NOTE/WETH balancer pool to use\r\n     */\r\n    constructor(\r\n        address _vault,\r\n        NotionalProxy _notionalProxy,\r\n        uint16 _currencyID,\r\n        address _balancerVault,\r\n        bytes32 _poolId \r\n    ) public BaseStrategy (_vault) {\r\n        _initializeNotionalStrategy(_notionalProxy, _currencyID, _balancerVault, _poolId);\r\n    }\r\n\r\n    /*\r\n     * @notice Initializer function to initialize both the BaseSrategy and the Notional strategy \r\n     * @param _vault Address of the corresponding vault the contract reports to\r\n     * @param _strategist Strategist managing the strategy\r\n     * @param _rewards Rewards address\r\n     * @param _keeper Keeper address\r\n     * @param _notionalProxy Notional proxy used to interact with the protocol\r\n     * @param _currencyID Notional identifier of the currency (token) the strategy interacts with:\r\n     * 1 - ETH\r\n     * 2 - DAI\r\n     * 3 - USDC\r\n     * 4 - WBTC\r\n     * @param _balancerVault Address of the balancer vault to use to exchange NOTEs to WETH\r\n     * @param _poolId 32 bytes identifier of the NOTE/WETH balancer pool to use\r\n     */\r\n    function initialize(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper,\r\n        NotionalProxy _notionalProxy,\r\n        uint16 _currencyID,\r\n        address _balancerVault,\r\n        bytes32 _poolId\r\n    ) external {\r\n        _initialize(_vault, _strategist, _rewards, _keeper);\r\n        _initializeNotionalStrategy(_notionalProxy, _currencyID, _balancerVault, _poolId);\r\n    }\r\n\r\n    /*\r\n     * @notice Internal initializer for the Notional Strategy contract\r\n     * @param _notionalProxy Notional proxy used to interact with the protocol\r\n     * @param _currencyID Notional identifier of the currency (token) the strategy interacts with:\r\n     * 1 - ETH\r\n     * 2 - DAI\r\n     * 3 - USDC\r\n     * 4 - WBTC\r\n     * @param _balancerVault Address of the balancer vault to use to exchange NOTEs to WETH\r\n     * @param _poolId 32 bytes identifier of the NOTE/WETH balancer pool to use\r\n     */\r\n    function _initializeNotionalStrategy (\r\n        NotionalProxy _notionalProxy,\r\n        uint16 _currencyID,\r\n        address _balancerVault,\r\n        bytes32 _poolId\r\n    ) internal {\r\n        currencyID = _currencyID;\r\n        notionalProxy = _notionalProxy;\r\n\r\n        // Initialize NOTE token and nToken\r\n        _updateNotionalAddresses();\r\n\r\n        // Balancer setup\r\n        balancerVault = IBalancerVault(_balancerVault);\r\n        poolId = _poolId;\r\n        (address balancerPoolAddress,) = balancerVault.getPool(_poolId);\r\n        balancerPool = IBalancerPool(balancerPoolAddress);\r\n\r\n        // Set health check to health.ychad.eth\r\n        healthCheck = 0xDDCea799fF1699e98EDF118e0629A974Df7DF012;\r\n        doHealthCheck = true;\r\n    }\r\n\r\n    /*\r\n     * @notice Cloning function to re-use the strategy code and deploy the same strategy with other key parameters,\r\n     * notably currencyID or yVault\r\n     * @param _vault Address of the corresponding vault the contract reports to\r\n     * @param _strategist Strategist managing the strategy\r\n     * @param _rewards Rewards address\r\n     * @param _keeper Keeper address\r\n     * @param _notionalProxy Notional proxy used to interact with the protocol\r\n     * @param _currencyID Notional identifier of the currency (token) the strategy interacts with:\r\n     * 1 - ETH\r\n     * 2 - DAI\r\n     * 3 - USDC\r\n     * 4 - WBTC\r\n     * @param _balancerVault Address of the balancer vault to use to exchange NOTEs to WETH\r\n     * @param _poolId 32 bytes identifier of the NOTE/WETH balancer pool to use\r\n     */\r\n    function cloneStrategy(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper,\r\n        NotionalProxy _notionalProxy,\r\n        uint16 _currencyID,\r\n        address _balancerVault,\r\n        bytes32 _poolId\r\n    ) external returns (address payable newStrategy) {\r\n        require(isOriginal, \"!clone\");\r\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\r\n        bytes20 addressBytes = bytes20(address(this));\r\n\r\n        assembly {\r\n            // EIP-1167 bytecode\r\n            let clone_code := mload(0x40)\r\n            mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone_code, 0x14), addressBytes)\r\n            mstore(add(clone_code, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            newStrategy := create(0, clone_code, 0x37)\r\n        }\r\n\r\n        Strategy(newStrategy).initialize(_vault, \r\n            _strategist, _rewards, _keeper, _notionalProxy, _currencyID,\r\n            _balancerVault, _poolId\r\n            );\r\n\r\n        emit Cloned(newStrategy);\r\n    }\r\n\r\n    // For ETH based strategies\r\n    receive() external payable {}\r\n\r\n    /*\r\n     * @notice\r\n     *  Sweep function only callable by governance to be able to sweep any ETH assigned to the strategy's balance\r\n     */\r\n    function sendETHToGovernance() external onlyGovernance {\r\n        (bool sent, bytes memory data) = governance().call{value: address(this).balance}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Getter function for the name of the strategy\r\n     * @return string, the name of the strategy\r\n     */\r\n    function name() external view override returns (string memory) {\r\n        // Add your own name here, suggestion e.g. \"StrategyCreamYFI\"\r\n        return \"StrategyNotionalLp\";\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Getter function for the address of the nToken to use\r\n     * @return address, current nToken state variable\r\n     */\r\n    function getNTokenAddress() external view returns(address) {\r\n        return address(nToken);\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Getter function for the ySwap trade factory\r\n     * @return address, current tradeFactory state variable\r\n     */\r\n    function getTradeFactory() external view returns(address) {\r\n        return tradeFactory;\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Getter function for the forceMigration defining whether to try to migrate Notional positions or not\r\n     * @return bool, current forceMigration state variable\r\n     */\r\n    function getForceMigration() external view returns(bool) {\r\n        return forceMigration;\r\n    }\r\n    \r\n    /*\r\n     * @notice\r\n     *  Setter function for the forceMigration defining whether to try to migrate Notional positions or not\r\n     * only accessible to vault managers\r\n     * @param _newToggle, new booelan value for the toggle\r\n     */\r\n    function setForceMigration(bool _forceMigration) external onlyVaultManagers {\r\n        forceMigration = _forceMigration;\r\n    }\r\n    \r\n    /*\r\n     * @notice\r\n     *  Setter function for the toggle defining whether to claim rewards or not\r\n     * only accessible to vault managers\r\n     * @param _newToggle, new booelan value for the toggle\r\n     */\r\n    function setShouldClaimRewards(bool _newToggle) external onlyVaultManagers {\r\n        shouldClaimRewards = _newToggle;\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Getter function for the current balancer vault used to swap NOTE rewards\r\n     * @return address, current balancerVault state variable\r\n     */\r\n    function getBalancerVault() external view returns (address) {\r\n        return address(balancerVault);\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Getter function for the current balancer NOTE/WETH pool is used to swap NOTE rewards\r\n     * @return address, current balancerPool state variable\r\n     */\r\n    function getBalancerPool() external view returns (address) {\r\n        return address(balancerPool);\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Getter function for the current currency ID of the strategy, following Notional's convention:\r\n     * 1 - ETH\r\n     * 2 - DAI\r\n     * 3 - USDC\r\n     * 4 - WBTC\r\n     * @return uint16, current currencyID state variable\r\n     */\r\n    function getCurrencyID() external view returns (uint16) {\r\n        return currencyID;\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Getter function for the current value of NOTE rewards earned and pending of to be claimed, in want tokens exchanged in Sushi\r\n     * @return uint256, current value of strategy's rewards\r\n     */\r\n    function getRewardsValue() external view returns (uint256) {\r\n        return _getRewardsValue();\r\n    }\r\n    \r\n    /*\r\n     * @notice\r\n     *  Getter function for the current value of max slippage factor allowed\r\n     * @return uint256, current value of slippageLiquidatePosition\r\n     */\r\n    function getSlippageLiquidatePosition() external view returns (uint256) {\r\n        return slippageLiquidatePosition;\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Setter function for the balancer vault ot use\r\n     * @param _newVault, new address of the balancer vault to use\r\n     */\r\n    function setBalancerVault(address _newVault) external onlyGovernance {\r\n        balancerVault = IBalancerVault(_newVault);\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Setter function for the balancer NOTE/WETH pool id to use\r\n     * @param _newPoolId, new pool id to use\r\n     */\r\n    function setBalancerPool(bytes32 _newPoolId) external onlyVaultManagers {\r\n        (address balancerPoolAddress,) = balancerVault.getPool(_newPoolId);\r\n        balancerPool = IBalancerPool(balancerPoolAddress);\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Setter function for the max slippage allowed liquidating a position\r\n     * @param _newFactor, new slippage factor to use\r\n     */\r\n    function setSlippage(uint256 _newFactor) external onlyVaultManagers {\r\n        slippageLiquidatePosition = _newFactor;\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Internal function to refresh NOTE and NToken addresses in the initializer and the external setter\r\n     */\r\n    function _updateNotionalAddresses() internal {\r\n        // Initialize NOTE token and nToken\r\n        noteToken = IERC20(notionalProxy.getNoteToken());\r\n        nToken = nTokenERC20(notionalProxy.nTokenAddress(currencyID));\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  External function to update the NOTE and nToken addresses after deployment\r\n     */\r\n    function updateNotionalAddresses() external onlyVaultManagers {\r\n        _updateNotionalAddresses();\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Function estimating the total assets under management of the strategy, whether realized (token balances\r\n     * of the contract) or unrealized (as Notional LP positions and/or NOTE rewards)\r\n     * @return uint256, value containing the total AUM valuation\r\n     */\r\n    function estimatedTotalAssets() public view override returns (uint256) {\r\n        // To estimate the assets under management of the strategy we add the want balance already \r\n        // in the contract and the current valuation of share of nTokens held by the strategy and the \r\n        // tokens we would get by exchanging the accumulated rewards to want tokens\r\n\r\n        return balanceOfWant()\r\n            .add(_getNTokenTotalValueFromPortfolio())\r\n            .add(_getRewardsValue())\r\n        ;\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  View reutning whether or not the nToken has an idiosyncratic position\r\n     * @return bool, value containing if there is an idiosyncratic position or not\r\n     */\r\n    function checkIdiosyncratic() external view returns(bool){\r\n        return NotionalLpLib.checkIdiosyncratic(notionalProxy, currencyID, address(nToken));\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Function claiming the pending rewards for the strategy (if any) to be swapped in yswaps\r\n     * @return uint256, value containing the current valuation of accumulakted rewards\r\n\r\n     */\r\n    function _claimRewards() internal returns(uint256) {\r\n        return notionalProxy.nTokenClaimIncentives();\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Function claiming the pending rewards for the strategy (if any), swap them to WETH in balancer\r\n     * as it's the primary exchange venue for NOTE (only a NOTE / WETH pool available)\r\n     */\r\n    function swapToWETHManually(uint256 minimumOut) external onlyVaultManagers {\r\n        uint256 _incentives = noteToken.balanceOf(address(this));\r\n        IBalancerVault.SingleSwap memory swap = IBalancerVault.SingleSwap(\r\n                poolId,\r\n                IBalancerVault.SwapKind.GIVEN_IN,\r\n                IAsset(address(noteToken)),\r\n                IAsset(address(weth)),\r\n                _incentives,\r\n                abi.encode(0)\r\n            );\r\n        _checkAllowance(address(balancerVault), noteToken, _incentives);\r\n        // Swap the NOTE tokens to WETH\r\n        balancerVault.swap(\r\n            swap, \r\n            IBalancerVault.FundManagement(address(this), false, address(this), false),\r\n            minimumOut, \r\n            now\r\n            );\r\n        noteToken.safeApprove(address(balancerVault), 0);\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Accounting function preparing the reporting to the vault taking into acccount the standing debt\r\n     * @param _debtOutstanding, Debt still left to pay to the vault\r\n     * @return _profit, the amount of profits the strategy may have produced until now\r\n     * @return _loss, the amount of losses the strategy may have produced until now\r\n     * @return _debtPayment, the amount the strategy has been able to pay back to the vault\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        )\r\n    {   \r\n        if (shouldClaimRewards) {\r\n            // Get all possible rewards to th strategy (in want)\r\n            _claimRewards();\r\n        }\r\n        // We only need profit for decision making\r\n        (_profit, ) = getUnrealisedPL();\r\n\r\n        // free funds to repay debt + profit to the strategy\r\n        uint256 wantBalance = balanceOfWant();\r\n        \r\n        uint256 amountRequired = _debtOutstanding.add(_profit);\r\n        if(amountRequired > wantBalance) {\r\n            // we need to free funds\r\n            // NOTE: liquidatePosition will try to use balanceOfWant first\r\n            // liquidatePosition will realise Losses if required !! (which cannot be equal to unrealised losses if\r\n            // we are not withdrawing 100% of position)\r\n            uint256 amountAvailable = wantBalance;\r\n\r\n            if (!NotionalLpLib.checkIdiosyncratic(notionalProxy, currencyID, address(nToken))) {\r\n                (amountAvailable, _loss) = liquidatePosition(amountRequired);\r\n            }\r\n            \r\n            if(amountAvailable >= amountRequired) {\r\n                // There are no realisedLosses, debt is paid entirely\r\n                _debtPayment = _debtOutstanding;\r\n                // In case we liberate a higher amount than needed (liquidatePosition uses the estimation of\r\n                // the value in the portfolio + performs a proportion), we avoid declaring as profit\r\n                // part of the principal position\r\n                _profit = amountRequired.sub(_debtPayment);\r\n            } else {\r\n                // we were not able to free enough funds\r\n                if(amountAvailable < _debtOutstanding) {\r\n                    // available funds are lower than the repayment that we need to do\r\n                    _profit = 0;\r\n                    _debtPayment = amountAvailable;\r\n                    // loss amount is not calculated here as it comes from the liquidate position assessment\r\n                    // if the situation is not idiosyncratic positions are freed. If it is, it could be done in the next harvest\r\n                } else {\r\n                    // NOTE: here amountAvailable is always equal or greater than _debtOutstanding\r\n                    // important to use amountAvailable as it's the real amount available as wamt\r\n                    // We will not report and losses but pay the entire debtOutstanding and report the rest of\r\n                    // amountAvailable as profit (therefore losses are 0 because we were able to pay debtPayment)\r\n                    _debtPayment = _debtOutstanding;\r\n                    _profit = amountAvailable.sub(_debtPayment);\r\n                    _loss = 0;\r\n                }\r\n            }\r\n        } else {\r\n            _debtPayment = _debtOutstanding;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     * Function re-allocating the available funds (present in the strategy's balance in the 'want' token)\r\n     * into new LP positions in Notional\r\n     * @param _debtOutstanding, Debt still left to pay to the vault\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal override {\r\n        // Available balance\r\n        uint256 availableWantBalance = balanceOfWant();\r\n        \r\n        // If there is more debt, don't do anything\r\n        if(availableWantBalance <= _debtOutstanding) {\r\n            return;\r\n        }\r\n        availableWantBalance = availableWantBalance.sub(_debtOutstanding);\r\n        \r\n        if (currencyID == ETH_CURRENCY_ID) {\r\n            // Only necessary for wETH/ ETH pair\r\n            weth.withdraw(availableWantBalance);\r\n        } else {\r\n            _checkAllowance(address(notionalProxy), want, availableWantBalance);\r\n        }\r\n\r\n        // Deposit all and mint all possible nTokens\r\n        executeBalanceAction(\r\n            DepositActionType.DepositUnderlyingAndMintNToken,\r\n            availableWantBalance\r\n        );\r\n\r\n        if (currencyID != ETH_CURRENCY_ID) {\r\n            want.safeApprove(address(notionalProxy), 0);\r\n        }\r\n\r\n    }\r\n    \r\n    /*\r\n     * @notice\r\n     *  Internal function to assess the unrealised P&L of the Notional's positions\r\n     * @return uint256 result, the encoded trade ready to be used in Notional's 'BatchTradeAction'\r\n     */\r\n    function getUnrealisedPL() internal view returns (uint256 _unrealisedProfit, uint256 _unrealisedLoss) {\r\n        // Calculate assets. This includes profit and cost of closing current position. \r\n        // Due to cost of closing position, If called just after opening the position, assets < invested want\r\n        uint256 totalAssets = estimatedTotalAssets();\r\n        // Get total debt from vault\r\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\r\n        // Calculate current P&L\r\n        if(totalDebt > totalAssets) {\r\n            // we have losses\r\n            // Losses are unrealised until we close the position so we should not report them until realised\r\n            _unrealisedLoss = totalDebt.sub(totalAssets);\r\n        } else {\r\n            // we have profit\r\n            _unrealisedProfit = totalAssets.sub(totalDebt);\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Internal function liquidating enough Notional positions to liberate _amountNeeded 'want' tokens\r\n     * @param _amountNeeded, The total amount of tokens needed to pay the vault back\r\n     * @return uint256 _liquidatedAmount, Amount freed\r\n     * @return uint256 _loss, Losses incurred due to early closing of positions\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded)\r\n        internal\r\n        override\r\n        returns (uint256 _liquidatedAmount, uint256 _loss)\r\n    {\r\n        // If enough want balance can repay the debt, do it\r\n        uint256 wantBalance = balanceOfWant();\r\n        if (wantBalance >= _amountNeeded) {\r\n            return (_amountNeeded, 0);\r\n        }\r\n        // Get current position's P&L\r\n        (, uint256 unrealisedLosses) = getUnrealisedPL();\r\n        // We only need to withdraw what we don't currently have in want\r\n        uint256 amountToLiquidate = _amountNeeded.sub(wantBalance);\r\n        \r\n        // The strategy will only realise losses proportional to the amount we are liquidating\r\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\r\n        uint256 lossesToBeRealised = unrealisedLosses.mul(amountToLiquidate).div(totalDebt.sub(wantBalance));\r\n\r\n        // Due to how Notional works, we need to substract losses from the amount to liquidate\r\n        // If we don't do this and withdraw a small enough % of position, we will not incur in losses,\r\n        // leaving them for the future withdrawals (which is bad! those who withdraw should take the losses)\r\n        \r\n        amountToLiquidate = amountToLiquidate.sub(lossesToBeRealised);\r\n        \r\n        // Minor gas savings\r\n        uint16 _currencyID = currencyID;\r\n        // Liquidate the proportional part of nTokens necessary\r\n        // We calculate the number of tokens to redeem by calculating the % of assets to \r\n        // liquidate and applying that % to the # of nTokens held\r\n        // NOTE: We do not use estimatedTotalAssets as it includes the value of the rewards\r\n        // instead we use the internal function calculating the value of the nToken position\r\n        uint256 portfolioValue = _getNTokenTotalValueFromPortfolio();\r\n        uint256 tokensToRedeem = nToken.balanceOf(address(this));\r\n        if (portfolioValue > 0) {\r\n            if(portfolioValue > amountToLiquidate) {\r\n                // Calculate proportion of nTokens to redeem\r\n                tokensToRedeem = amountToLiquidate\r\n                .mul(tokensToRedeem)\r\n                .div(portfolioValue);\r\n            }\r\n            // We launch the balance action with RedeemNtoken type and the previously calculated amount of tokens\r\n            executeBalanceAction(\r\n                DepositActionType.RedeemNToken,\r\n                tokensToRedeem\r\n            );\r\n        }\r\n\r\n        // Assess result \r\n        uint256 totalLooseWant = balanceOfWant();\r\n        _liquidatedAmount = Math.min(totalLooseWant, _amountNeeded);\r\n        if (_amountNeeded > totalLooseWant) {\r\n            // _loss should be equal to lossesToBeRealised !\r\n            _loss = _amountNeeded.sub(totalLooseWant);\r\n            // We check that the reported loss is <= (1+slippage) * lossesToBeRealised\r\n            // and >= (1-slippage) * lossesToBeRealised\r\n            require(_loss <= lossesToBeRealised.mul(MAX_BPS.add(slippageLiquidatePosition)).div(MAX_BPS));\r\n            require(_loss >= lossesToBeRealised.mul(MAX_BPS.sub(slippageLiquidatePosition)).div(MAX_BPS));\r\n        }\r\n\r\n    }\r\n    \r\n    /*\r\n     * @notice\r\n     *  External function used in emergency to redeem a specific amount of tokens manually\r\n     * @param amountToRedeem number of tokens to redeem\r\n     * @return uint256 amountLiquidated, the total amount liquidated\r\n     */\r\n    function redeemNTokenAmount(uint256 amountToRedeem) external onlyVaultManagers {\r\n        executeBalanceAction(\r\n                    DepositActionType.RedeemNToken, \r\n                    amountToRedeem\r\n                );\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Redeem nTokens in the protection period accepting the discount when converting to \r\n     * asset cash - only used manually in case of emergency\r\n     * @param tokensToRedeem number of tokens to redeem\r\n     * @param sellTokenAssets Whether to sell the corresponding fcash positions or not\r\n     * @param acceptResidualAssets Whether to accepot a residual position in the account or not\r\n     * @return int256 total amount of asset cash redeemed\r\n     * @return bool if there were residuals that were placed into the portfolio\r\n     */\r\n    function redeemIdiosyncratic(\r\n        uint96 tokensToRedeem,\r\n        bool sellTokenAssets,\r\n        bool acceptResidualAssets\r\n    ) external onlyVaultManagers returns (int256, bool){\r\n        return notionalProxy.nTokenRedeem(\r\n            address(this), \r\n            currencyID, \r\n            tokensToRedeem, \r\n            sellTokenAssets,\r\n            acceptResidualAssets\r\n            );\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Used when the nTokens cannot be redeemed without accepting residual positions (very \r\n     * small borrow positions that couldn't) be sold. This scenario is very unlikley but still,\r\n     * in order to get back all tokens we implement an external function for vault managers to\r\n     * perform a small lending action to offset the small borrow position as soon as market \r\n     * rates allow for it\r\n     * @param amount, amount to lend - won't be blocked in Notional as it's only used monentarily \r\n     * to create the offsetting lending position\r\n     * @param fCashAmount fCashAmount needed to offset the residual position\r\n     * @param marketIndex Market index of the residual position\r\n     */\r\n    function lendAmountManually(\r\n        uint256 amount,\r\n        uint256 fCashAmount,\r\n        uint256 marketIndex\r\n    ) external onlyVaultManagers {\r\n        if (currencyID == ETH_CURRENCY_ID) {\r\n            // Only necessary for wETH/ ETH pair\r\n            weth.withdraw(amount);\r\n        } else {\r\n            _checkAllowance(address(notionalProxy), want, amount);\r\n        }\r\n\r\n        // Deposit all and offset the borrow position\r\n        NotionalLpLib.lendAmountManually(\r\n            notionalProxy,\r\n            currencyID, \r\n            amount, \r\n            fCashAmount,\r\n            marketIndex\r\n            );\r\n\r\n        if (currencyID != ETH_CURRENCY_ID) {\r\n            want.safeApprove(address(notionalProxy), 0);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Withdraw asset cash in the strategy's account resulting of an nToken redeem during\r\n     * an idioyncratic period\r\n     * @param amountInternalPrecision asset cash to redeem (cTokens)\r\n     * @param redeemToUnderlying wether to receive cTokens or underlying (want)\r\n     * @return uint256 total amount withdrawn\r\n     */\r\n    function withdrawFromNotional(\r\n        uint88 amountInternalPrecision,\r\n        bool redeemToUnderlying\r\n    ) external onlyVaultManagers returns(uint256 withdrawn) {\r\n        withdrawn = notionalProxy.withdraw(\r\n            currencyID, \r\n            amountInternalPrecision, \r\n            redeemToUnderlying);\r\n        if (currencyID == ETH_CURRENCY_ID) {\r\n            weth.deposit{value: address(this).balance}();\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Internal function used in emergency to close all active positions and liberate all assets\r\n     * @return uint256 amountLiquidated, the total amount liquidated\r\n     */\r\n    function liquidateAllPositions() internal override returns (uint256) {\r\n        if (shouldClaimRewards) {\r\n            _claimRewards();\r\n        }\r\n        \r\n        executeBalanceAction(\r\n                    DepositActionType.RedeemNToken, \r\n                    nToken.balanceOf(address(this))\r\n                );\r\n\r\n        return balanceOfWant();\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  External function used in emergency to claim and swap to want tokens the NOTE rewards\r\n     */\r\n    function manuallyClaimRewards() external onlyVaultManagers {\r\n        _claimRewards();\r\n    }\r\n    \r\n    /*\r\n     * @notice\r\n     *  Internal function used to migrate all 'want' tokens and active Notional positions to a new strategy\r\n     * @param _newStrategy address where the contract of the new strategy is located\r\n     */\r\n    function prepareMigration(address _newStrategy) internal override {\r\n        if (shouldClaimRewards) {\r\n            _claimRewards();\r\n        }\r\n\r\n        if(!forceMigration) {\r\n            // Transfer nTokens and NOTE incentives (may be necessary to claim them)\r\n            nToken.transfer(_newStrategy, nToken.balanceOf(address(this)));\r\n            noteToken.transfer(_newStrategy, noteToken.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Define protected tokens for the strategy to manage persistently that will not get converted back\r\n     * to 'want'\r\n     * @return address result, the address of the tokens to protect\r\n     */\r\n    function protectedTokens()\r\n        internal\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {}\r\n\r\n    /*\r\n     * @notice\r\n     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)\r\n     *  to `want` (using the native decimal characteristics of `want`).\r\n     * @dev\r\n     *  Care must be taken when working with decimals to assure that the conversion\r\n     *  is compatible. As an example:\r\n     *\r\n     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),\r\n     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\r\n     *\r\n     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`\r\n     * @return The amount in `want` of `_amtInEth` converted to `want`\r\n     */\r\n    function ethToWant(uint256 amtInWei)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return NotionalLpLib.fromETH(amtInWei, address(want), notionalProxy, currencyID);\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /*\r\n     * @notice\r\n     *  Internal view estimating the rewards value in want tokens. We simulate the trade in balancer to \r\n     * get WETH from the NOTE / WETH pool and if want is not weth, we simulate a trade in sushi to obtain want tokens \r\n     * @return uint256 tokensOut, current number of want tokens the strategy would obtain for its rewards\r\n     */\r\n    function _getRewardsValue() internal view returns(uint256 tokensOut) {\r\n        // Call the view library\r\n        return NotionalLpLib.getRewardsValue(\r\n            NotionalLpLib.RewardsValueVars(\r\n                noteToken,\r\n                notionalProxy,\r\n                balancerVault,\r\n                poolId,\r\n                balancerPool,\r\n                currencyID,\r\n                quoter,\r\n                address(want)\r\n            )\r\n        );\r\n\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Loop through the strategy's positions and convert the fcash to current valuation in 'want', including the\r\n     * fees incurred by leaving the position early. Represents the NPV of the position today.\r\n     * @return uint256 _totalWantValue, the total amount of 'want' tokens of the strategy's positions\r\n     */\r\n    function _getNTokenTotalValueFromPortfolio() internal view returns(uint256 totalUnderlyingClaim) {\r\n\r\n        return NotionalLpLib.getNTokenTotalValueFromPortfolio(\r\n                NotionalLpLib.NTokenTotalValueFromPortfolioVars(\r\n                    address(this), \r\n                    address(nToken),\r\n                    notionalProxy,\r\n                    currencyID\r\n                )\r\n            );\r\n    }\r\n\r\n    // CALCS\r\n    /*\r\n     * @notice\r\n     *  Internal function getting the current 'want' balance of the strategy\r\n     * @return uint256 result, strategy's 'want' balance\r\n     */\r\n    function balanceOfWant() internal view returns (uint256) {\r\n        return want.balanceOf(address(this));\r\n    }\r\n\r\n    // NOTIONAL FUNCTIONS\r\n    /*\r\n     * @notice\r\n     *  Internal function executing a 'batchBalanceAndTradeAction' within Notional to either Lend,Borrow or mint nTokens\r\n     * @param actionType, Identification of the action to perform, following the Notional classification \r\n     * in enum 'DepositActionType'\r\n     * @param withdrawAmountInternalPrecision, withdraw an amount of asset cash specified in Notional \r\n     *  internal 8 decimal precision\r\n     * @param withdrawEntireCashBalance, whether to withdraw entire cash balance. Useful if there may be\r\n     * an unknown amount of asset cash residual left from trading\r\n     * @param redeemToUnderlying, whether to redeem asset cash to the underlying token on withdraw\r\n     * @param trades, array of bytes32 trades to perform\r\n     */\r\n    function executeBalanceAction(\r\n        DepositActionType actionType,\r\n        uint256 depositActionAmount\r\n        ) internal {\r\n\r\n        uint16 _currencyID = currencyID;\r\n        // Handle the 24h protection window where an nToken may have an idiosyncratic position\r\n        if (NotionalLpLib.checkIdiosyncratic(notionalProxy, _currencyID, address(nToken))) {\r\n            return;\r\n        }\r\n\r\n        BalanceAction[] memory actions = new BalanceAction[](1);\r\n        // gas savings\r\n        actions[0] = BalanceAction(\r\n            actionType,\r\n            _currencyID,\r\n            depositActionAmount,\r\n            0,\r\n            true, \r\n            true\r\n        );\r\n\r\n        if (_currencyID == ETH_CURRENCY_ID) {\r\n            if (actionType == DepositActionType.DepositUnderlyingAndMintNToken) {\r\n                notionalProxy.batchBalanceAction{value: depositActionAmount}(address(this), actions);\r\n            } else if (actionType == DepositActionType.RedeemNToken) {\r\n                notionalProxy.batchBalanceAction(address(this), actions);\r\n            }\r\n            weth.deposit{value: address(this).balance}();\r\n        } else {\r\n            notionalProxy.batchBalanceAction(address(this), actions);\r\n        }\r\n    }\r\n\r\n    // ----------------- YSWAPS FUNCTIONS ---------------------\r\n\r\n    /*\r\n     * @notice\r\n     *  External function used by gov to set up the yswaps trade factory\r\n     * and give allowances where needed\r\n     * @param _tradeFactory, Address of the trade factory to use\r\n     */\r\n    function setTradeFactory(address _tradeFactory) external onlyGovernance {\r\n        if (tradeFactory != address(0)) {\r\n            _removeTradeFactoryPermissions();\r\n        }\r\n        // approve and set up trade factory\r\n        noteToken.safeApprove(_tradeFactory, type(uint256).max);\r\n        IERC20(address(weth)).safeApprove(_tradeFactory, type(uint256).max);\r\n        ITradeFactory tf = ITradeFactory(_tradeFactory);\r\n        tf.enable(address(noteToken), address(want));\r\n        tf.enable(address(weth), address(want));\r\n        tradeFactory = _tradeFactory;\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  External function used by onlyEmergencyAuthorized remove permissions\r\n     * for the existing trade factory\r\n     */\r\n    function removeTradeFactoryPermissions() external onlyEmergencyAuthorized {\r\n        _removeTradeFactoryPermissions();\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Internal function removing permissions for the existing trade factory\r\n     */\r\n    function _removeTradeFactoryPermissions() internal {\r\n        noteToken.safeApprove(tradeFactory, 0);\r\n        IERC20(address(weth)).safeApprove(tradeFactory, 0);\r\n        tradeFactory = address(0);\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Internal function checking if allowance is already enough for the contract\r\n     * and if not, safely sets it to max\r\n     * @param _contract, spender contract\r\n     * @param _token, token to approve spend\r\n     * @param _amount, _amoun to approve\r\n     */\r\n    function _checkAllowance(\r\n        address _contract,\r\n        IERC20 _token,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_token.allowance(address(this), _contract) < _amount) {\r\n            _token.safeApprove(_contract, 0);\r\n            _token.safeApprove(_contract, _amount);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract NotionalProxy\",\"name\":\"_notionalProxy\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_currencyID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_poolId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clone\",\"type\":\"address\"}],\"name\":\"Cloned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"UpdatedMetadataURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedProfitFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategist\",\"type\":\"address\"}],\"name\":\"UpdatedStrategist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIdiosyncratic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"contract NotionalProxy\",\"name\":\"_notionalProxy\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_currencyID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_poolId\",\"type\":\"bytes32\"}],\"name\":\"cloneStrategy\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHealthCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amtInWei\",\"type\":\"uint256\"}],\"name\":\"ethToWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalancerPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalancerVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrencyID\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getForceMigration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlippageLiquidatePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCostInWei\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthCheck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"contract NotionalProxy\",\"name\":\"_notionalProxy\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_currencyID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_poolId\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOriginal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fCashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketIndex\",\"type\":\"uint256\"}],\"name\":\"lendAmountManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manuallyClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalProxy\",\"outputs\":[{\"internalType\":\"contract NotionalProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"tokensToRedeem\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"sellTokenAssets\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptResidualAssets\",\"type\":\"bool\"}],\"name\":\"redeemIdiosyncratic\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemNTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTradeFactoryPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendETHToGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newPoolId\",\"type\":\"bytes32\"}],\"name\":\"setBalancerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"setBalancerVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_doHealthCheck\",\"type\":\"bool\"}],\"name\":\"setDoHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_forceMigration\",\"type\":\"bool\"}],\"name\":\"setForceMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_healthCheck\",\"type\":\"address\"}],\"name\":\"setHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMaxReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"setMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newToggle\",\"type\":\"bool\"}],\"name\":\"setShouldClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFactor\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeFactory\",\"type\":\"address\"}],\"name\":\"setTradeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldClaimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumOut\",\"type\":\"uint256\"}],\"name\":\"swapToWETHManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCostInWei\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateNotionalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"amountInternalPrecision\",\"type\":\"uint88\"},{\"internalType\":\"bool\",\"name\":\"redeemToUnderlying\",\"type\":\"bool\"}],\"name\":\"withdrawFromNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Strategy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000da816459f1ab5631232fe5e97a05bbbb94970c950000000000000000000000001344a36a1b56144c3bc62e7757377d288fde03690000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c85f7fa48d765053f8dd85e052843e12d23e3d7bc50002000000000000000000c0", "EVMVersion": "Default", "Library": "NotionalLpLib:b5e9fa06984e4a08415e3871f575192238c41f44", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://289b21e3c83d3c8c34f725be03a933288bf50436fce252de675c4eedd0dec514"}]}