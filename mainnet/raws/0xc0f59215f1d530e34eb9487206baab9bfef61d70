{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/EchoSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IEchoSale.sol\\\";\\r\\nimport \\\"./IIncarnateEcho.sol\\\";\\r\\n\\r\\ncontract EchoSale is Ownable, IEchoSale {\\r\\n  uint256 public mintCount;\\r\\n  uint256 mintMaximum = 10_000;\\r\\n\\r\\n  mapping(address => bool) public earlyAccess;\\r\\n\\r\\n  address private _echo;\\r\\n\\r\\n  uint earlyMintStart;\\r\\n  uint earlyMintEnd;\\r\\n  uint256 earlyMintPrice;\\r\\n\\r\\n  uint mintStart;\\r\\n  uint mintEnd;\\r\\n  uint256 mintPrice;\\r\\n\\r\\n  function earlyMint(uint256 quantity) payable public {\\r\\n    require(earlyMintStart > 0, 'Early mint is not enabled');\\r\\n    require(earlyMintPrice > 0, 'Early mint is not enabled');\\r\\n    require(_echo != address(0), 'Early mint is not enabled');\\r\\n\\r\\n    require(earlyMintStart <= block.timestamp, 'Early mint has not started yet');\\r\\n    require(block.timestamp <= earlyMintEnd, 'Early mint has ended');\\r\\n    require(hasEarlyAccess(), 'You need to have early access to use early mint');\\r\\n\\r\\n    uint256 remaining = getRemaining(block.timestamp);\\r\\n    require(quantity > 0, 'Quantity needs to be at least one');\\r\\n    require(remaining > 0, 'Sold out');\\r\\n    require(quantity <= 10, 'The maximum quantity is 10');\\r\\n    require(quantity <= remaining, 'Not enough tokens available');\\r\\n    require(msg.value >= earlyMintPrice * quantity, 'The message value is not enough');\\r\\n\\r\\n    IIncarnateEcho(_echo).mint(msg.sender, quantity);\\r\\n    payable(owner()).transfer(msg.value);\\r\\n\\r\\n    delete earlyAccess[msg.sender];\\r\\n    mintCount += quantity;\\r\\n    \\r\\n    emit Remaining(mintMaximum - mintCount);\\r\\n  }\\r\\n\\r\\n  function hasEarlyAccess() view public returns (bool hasAccess) {\\r\\n    return earlyAccess[msg.sender] == true;\\r\\n  }\\r\\n\\r\\n  function getEarlyAccessInformation() view public returns (bool hasAccess, uint start, uint end, uint256 price) {\\r\\n    require(earlyMintStart > 0, 'Early mint is not enabled');\\r\\n    require(earlyMintPrice > 0, 'Early mint is not enabled');\\r\\n    require(_echo != address(0), 'Early mint is not enabled');\\r\\n\\r\\n    return (hasEarlyAccess(), earlyMintStart, earlyMintEnd, earlyMintPrice);\\r\\n  }\\r\\n\\r\\n  function addEarlyAccess(address address1, address address2, address address3, address address4, address address5) onlyOwner public {\\r\\n    if (address1 != address(0)) {\\r\\n      earlyAccess[address1] = true;\\r\\n    }\\r\\n    if (address2 != address(0)) {\\r\\n      earlyAccess[address2] = true;\\r\\n    }\\r\\n    if (address3 != address(0)) {\\r\\n      earlyAccess[address3] = true;\\r\\n    }\\r\\n    if (address4 != address(0)) {\\r\\n      earlyAccess[address4] = true;\\r\\n    }\\r\\n    if (address5 != address(0)) {\\r\\n      earlyAccess[address5] = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removeEarlyAccess(address address1, address address2, address address3, address address4, address address5) onlyOwner public {\\r\\n    if (address1 != address(0)) {\\r\\n      delete earlyAccess[address1];\\r\\n    }\\r\\n    if (address2 != address(0)) {\\r\\n      delete earlyAccess[address2];\\r\\n    }\\r\\n    if (address3 != address(0)) {\\r\\n      delete earlyAccess[address3];\\r\\n    }\\r\\n    if (address4 != address(0)) {\\r\\n      delete earlyAccess[address4];\\r\\n    }\\r\\n    if (address5 != address(0)) {\\r\\n      delete earlyAccess[address5];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function enableEarlyMint(uint start, uint end, uint256 price) onlyOwner public {\\r\\n    earlyMintStart = start;\\r\\n    earlyMintEnd = end;\\r\\n    earlyMintPrice = price;\\r\\n  }\\r\\n\\r\\n  function mint(uint256 quantity) payable public {\\r\\n    uint256 remaining = getRemaining(block.timestamp);\\r\\n\\r\\n    require(mintStart <= block.timestamp, 'Mint has not started yet');\\r\\n    require(block.timestamp <= mintEnd, 'Mint has ended');\\r\\n    require(quantity > 0, 'Quantity needs to be at least one');\\r\\n    require(remaining > 0, 'Sold out');\\r\\n    require(quantity <= 10, 'The maximum quantity is 10');\\r\\n    require(quantity <= remaining, 'Not enough tokens available');\\r\\n    require(msg.value >= mintPrice * quantity, 'The message value is not enough');\\r\\n\\r\\n    IIncarnateEcho(_echo).mint(msg.sender, quantity);\\r\\n    payable(owner()).transfer(msg.value);\\r\\n    mintCount += quantity;\\r\\n\\r\\n    emit Remaining(mintMaximum - mintCount);\\r\\n  }\\r\\n\\r\\n  function mintFor(address to, uint256 quantity) public onlyOwner {\\r\\n    uint256 remaining = getRemaining(block.timestamp);\\r\\n\\r\\n    require(quantity > 0, 'Quantity needs to be at least one');\\r\\n    require(quantity <= remaining, 'Not enough tokens available');\\r\\n\\r\\n    IIncarnateEcho(_echo).mint(to, quantity);\\r\\n    mintCount += quantity;\\r\\n\\r\\n    emit Remaining(mintMaximum - mintCount);\\r\\n  }\\r\\n\\r\\n  function getRemaining(uint time) view private returns (uint256 remaining) {\\r\\n    if (mintCount < mintMaximum) {\\r\\n      remaining = mintMaximum - mintCount;\\r\\n    } else {\\r\\n      remaining = 0;\\r\\n    }\\r\\n\\r\\n    if (mintEnd < time) {\\r\\n      remaining = 0;\\r\\n    }\\r\\n    return remaining;\\r\\n  }\\r\\n\\r\\n  function getMintInformation(uint time) view public returns (uint start, uint end, uint256 price, uint256 remaining) {\\r\\n    require(_echo != address(0), 'Mint is not enabled');\\r\\n    require(mintStart > 0, 'Mint is not enabled');\\r\\n    require(mintPrice > 0, 'Mint is not enabled');\\r\\n\\r\\n    if (time < block.timestamp) {\\r\\n      time = block.timestamp;\\r\\n    }\\r\\n\\r\\n    return (mintStart, mintEnd, mintPrice, getRemaining(time));\\r\\n  }\\r\\n\\r\\n  function enableMint(uint start, uint end, uint256 price) onlyOwner public {\\r\\n    mintStart = start;\\r\\n    mintEnd = end;\\r\\n    mintPrice = price;\\r\\n  }\\r\\n\\r\\n  function setEcho(address echo) onlyOwner public {\\r\\n    _echo = echo;\\r\\n  }\\r\\n\\r\\n  function Echo() view public returns (address) {\\r\\n    return _echo;\\r\\n  }\\r\\n\\r\\n  function setMintMaximum(uint256 max) onlyOwner public {\\r\\n    mintMaximum = max;\\r\\n  }\\r\\n\\r\\n  function MintMaximum() view public returns (uint256) {\\r\\n    return mintMaximum;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/IIncarnateEcho.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\ninterface IIncarnateEcho {\\r\\n    function mint(address to, uint256 quantity) external;\\r\\n    function burn(uint256 tokenId) external;\\r\\n    function addMinter(address minter) external;\\r\\n    function removeMinter(address minter) external;\\r\\n    function getTokenBaseUri() view external returns (string memory);\\r\\n    function setTokenBaseUri(string memory tokenBaseUri) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/IEchoSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\ninterface IEchoSale {\\r\\n  event Remaining(uint256 remaining);\\r\\n\\r\\n  function setEcho(address echo) external;\\r\\n  function setMintMaximum(uint256 max) external;\\r\\n  \\r\\n  function earlyMint(uint256 quantity) payable external;\\r\\n  function addEarlyAccess(address address1, address address2, address address3, address address4, address address5) external;\\r\\n  function removeEarlyAccess(address address1, address address2, address address3, address address4, address address5) external;\\r\\n  function enableEarlyMint(uint start, uint end, uint256 price) external;\\r\\n\\r\\n  function mint(uint256 quantity) payable external;\\r\\n  function enableMint(uint start, uint end, uint256 price) external;\\r\\n\\r\\n  function mintFor(address to, uint256 quantity) external;\\r\\n\\r\\n  function hasEarlyAccess() view external returns (bool hasAccess);\\r\\n  function getEarlyAccessInformation() view external returns (bool hasAccess, uint start, uint end, uint256 price);\\r\\n  function getMintInformation(uint time) view external returns (uint start, uint end, uint256 price, uint256 remaining);\\r\\n\\r\\n  function Echo() view external returns (address);\\r\\n  function MintMaximum() view external returns (uint256);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"Remaining\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Echo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MintMaximum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address5\",\"type\":\"address\"}],\"name\":\"addEarlyAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"earlyMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"enableEarlyMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"enableMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarlyAccessInformation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasAccess\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getMintInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEarlyAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasAccess\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address5\",\"type\":\"address\"}],\"name\":\"removeEarlyAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"echo\",\"type\":\"address\"}],\"name\":\"setEcho\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMintMaximum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EchoSale", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}