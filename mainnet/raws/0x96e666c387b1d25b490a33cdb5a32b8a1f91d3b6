{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FishbankBoosters is Ownable {\r\n\r\n    struct Booster {\r\n        address owner;\r\n        uint32 duration;\r\n        uint8 boosterType;\r\n        uint24 raiseValue;\r\n        uint8 strength;\r\n        uint32 amount;\r\n    }\r\n\r\n    Booster[] public boosters;\r\n    bool public implementsERC721 = true;\r\n    string public name = \"Fishbank Boosters\";\r\n    string public symbol = \"FISHB\";\r\n    mapping(uint256 => address) public approved;\r\n    mapping(address => uint256) public balances;\r\n    address public fishbank;\r\n    address public chests;\r\n    address public auction;\r\n\r\n    modifier onlyBoosterOwner(uint256 _tokenId) {\r\n        require(boosters[_tokenId].owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyChest() {\r\n        require(chests == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function FishbankBoosters() public {\r\n        //nothing yet\r\n    }\r\n\r\n    //mints the boosters can only be called by owner. could be a smart contract\r\n    function mintBooster(address _owner, uint32 _duration, uint8 _type, uint8 _strength, uint32 _amount, uint24 _raiseValue) onlyChest public {\r\n        boosters.length ++;\r\n\r\n        Booster storage tempBooster = boosters[boosters.length - 1];\r\n\r\n        tempBooster.owner = _owner;\r\n        tempBooster.duration = _duration;\r\n        tempBooster.boosterType = _type;\r\n        tempBooster.strength = _strength;\r\n        tempBooster.amount = _amount;\r\n        tempBooster.raiseValue = _raiseValue;\r\n\r\n        Transfer(address(0), _owner, boosters.length - 1);\r\n    }\r\n\r\n    function setFishbank(address _fishbank) onlyOwner public {\r\n        fishbank = _fishbank;\r\n    }\r\n\r\n    function setChests(address _chests) onlyOwner public {\r\n        if (chests != address(0)) {\r\n            revert();\r\n        }\r\n        chests = _chests;\r\n    }\r\n\r\n    function setAuction(address _auction) onlyOwner public {\r\n        auction = _auction;\r\n    }\r\n\r\n    function getBoosterType(uint256 _tokenId) view public returns (uint8 boosterType) {\r\n        boosterType = boosters[_tokenId].boosterType;\r\n    }\r\n\r\n    function getBoosterAmount(uint256 _tokenId) view public returns (uint32 boosterAmount) {\r\n        boosterAmount = boosters[_tokenId].amount;\r\n    }\r\n\r\n    function getBoosterDuration(uint256 _tokenId) view public returns (uint32) {\r\n        if (boosters[_tokenId].boosterType == 4 || boosters[_tokenId].boosterType == 2) {\r\n            return boosters[_tokenId].duration + boosters[_tokenId].raiseValue * 60;\r\n        }\r\n        return boosters[_tokenId].duration;\r\n    }\r\n\r\n    function getBoosterStrength(uint256 _tokenId) view public returns (uint8 strength) {\r\n        strength = boosters[_tokenId].strength;\r\n    }\r\n\r\n    function getBoosterRaiseValue(uint256 _tokenId) view public returns (uint24 raiseValue) {\r\n        raiseValue = boosters[_tokenId].raiseValue;\r\n    }\r\n\r\n    //ERC721 functionality\r\n    //could split this to a different contract but doesn't make it easier to read\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        total = boosters.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance){\r\n        balance = balances[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner){\r\n        owner = boosters[_tokenId].owner;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(boosters[_tokenId].owner == _from);\r\n        //can only transfer if previous owner equals from\r\n        boosters[_tokenId].owner = _to;\r\n        approved[_tokenId] = address(0);\r\n        //reset approved of fish on every transfer\r\n        balances[_from] -= 1;\r\n        //underflow can only happen on 0x\r\n        balances[_to] += 1;\r\n        //overflows only with very very large amounts of fish\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public\r\n    onlyBoosterOwner(_tokenId) //check if msg.sender is the owner of this fish\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n        //after master modifier invoke internal transfer\r\n        return true;\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public\r\n    onlyBoosterOwner(_tokenId)\r\n    {\r\n        approved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) {\r\n        require(approved[_tokenId] == msg.sender || msg.sender == fishbank || msg.sender == auction);\r\n        //require msg.sender to be approved for this token or to be the fishbank contract\r\n        _transfer(_from, _to, _tokenId);\r\n        //handles event, balances and approval reset\r\n        return true;\r\n    }\r\n\r\n\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(approved[_tokenId] == msg.sender);\r\n        _transfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract FishbankChests is Ownable {\r\n\r\n    struct Chest {\r\n        address owner;\r\n        uint16 boosters;\r\n        uint16 chestType;\r\n        uint24 raiseChance;//Increace chance to catch bigger chest (1 = 1:10000)\r\n        uint8 onlySpecificType;\r\n        uint8 onlySpecificStrength;\r\n        uint24 raiseStrength;\r\n    }\r\n\r\n    Chest[] public chests;\r\n    FishbankBoosters public boosterContract;\r\n    mapping(uint256 => address) public approved;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => bool) public minters;\r\n\r\n    modifier onlyChestOwner(uint256 _tokenId) {\r\n        require(chests[_tokenId].owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinters() {\r\n        require(minters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function FishbankChests(address _boosterAddress) public {\r\n        boosterContract = FishbankBoosters(_boosterAddress);\r\n    }\r\n\r\n    function addMinter(address _minter) onlyOwner public {\r\n        minters[_minter] = true;\r\n    }\r\n\r\n    function removeMinter(address _minter) onlyOwner public {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n    //create a chest\r\n\r\n    function mintChest(address _owner, uint16 _boosters, uint24 _raiseStrength, uint24 _raiseChance, uint8 _onlySpecificType, uint8 _onlySpecificStrength) onlyMinters public {\r\n\r\n        chests.length++;\r\n        chests[chests.length - 1].owner = _owner;\r\n        chests[chests.length - 1].boosters = _boosters;\r\n        chests[chests.length - 1].raiseStrength = _raiseStrength;\r\n        chests[chests.length - 1].raiseChance = _raiseChance;\r\n        chests[chests.length - 1].onlySpecificType = _onlySpecificType;\r\n        chests[chests.length - 1].onlySpecificStrength = _onlySpecificStrength;\r\n        Transfer(address(0), _owner, chests.length - 1);\r\n    }\r\n\r\n    function convertChest(uint256 _tokenId) onlyChestOwner(_tokenId) public {\r\n\r\n        Chest memory chest = chests[_tokenId];\r\n        uint16 numberOfBoosters = chest.boosters;\r\n\r\n        if (chest.onlySpecificType != 0) {//Specific boosters\r\n            if (chest.onlySpecificType == 1 || chest.onlySpecificType == 3) {\r\n                boosterContract.mintBooster(msg.sender, 2 days, chest.onlySpecificType, chest.onlySpecificStrength, chest.boosters, chest.raiseStrength);\r\n            } else if (chest.onlySpecificType == 5) {//Instant attack\r\n                boosterContract.mintBooster(msg.sender, 0, 5, 1, chest.boosters, chest.raiseStrength);\r\n            } else if (chest.onlySpecificType == 2) {//Freeze\r\n                uint32 freezeTime = 7 days;\r\n                if (chest.onlySpecificStrength == 2) {\r\n                    freezeTime = 14 days;\r\n                } else if (chest.onlySpecificStrength == 3) {\r\n                    freezeTime = 30 days;\r\n                }\r\n                boosterContract.mintBooster(msg.sender, freezeTime, 5, chest.onlySpecificType, chest.boosters, chest.raiseStrength);\r\n            } else if (chest.onlySpecificType == 4) {//Watch\r\n                uint32 watchTime = 12 hours;\r\n                if (chest.onlySpecificStrength == 2) {\r\n                    watchTime = 48 hours;\r\n                } else if (chest.onlySpecificStrength == 3) {\r\n                    watchTime = 3 days;\r\n                }\r\n                boosterContract.mintBooster(msg.sender, watchTime, 4, chest.onlySpecificStrength, chest.boosters, chest.raiseStrength);\r\n            }\r\n\r\n        } else {//Regular chest\r\n\r\n            for (uint8 i = 0; i < numberOfBoosters; i ++) {\r\n                uint24 random = uint16(keccak256(block.coinbase, block.blockhash(block.number - 1), i, chests.length)) % 1000\r\n                - chest.raiseChance;\r\n                //get random 0 - 9999 minus raiseChance\r\n\r\n                if (random > 850) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 1, 1, 1, chest.raiseStrength); //Small Agility Booster\r\n                } else if (random > 700) {\r\n                    boosterContract.mintBooster(msg.sender, 7 days, 2, 1, 1, chest.raiseStrength); //Small Freezer\r\n                } else if (random > 550) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 3, 1, 1, chest.raiseStrength); //Small Power Booster\r\n                } else if (random > 400) {\r\n                    boosterContract.mintBooster(msg.sender, 12 hours, 4, 1, 1, chest.raiseStrength); //Tiny Watch\r\n                } else if (random > 325) {\r\n                    boosterContract.mintBooster(msg.sender, 48 hours, 4, 2, 1, chest.raiseStrength); //Small Watch\r\n                } else if (random > 250) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 1, 2, 1, chest.raiseStrength); //Mid Agility Booster\r\n                } else if (random > 175) {\r\n                    boosterContract.mintBooster(msg.sender, 14 days, 2, 2, 1, chest.raiseStrength); //Mid Freezer\r\n                } else if (random > 100) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 3, 2, 1, chest.raiseStrength); //Mid Power Booster\r\n                } else if (random > 80) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 1, 3, 1, chest.raiseStrength); //Big Agility Booster\r\n                } else if (random > 60) {\r\n                    boosterContract.mintBooster(msg.sender, 30 days, 2, 3, 1, chest.raiseStrength); //Big Freezer\r\n                } else if (random > 40) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 3, 3, 1, chest.raiseStrength); //Big Power Booster\r\n                } else if (random > 20) {\r\n                    boosterContract.mintBooster(msg.sender, 0, 5, 1, 1, 0); //Instant Attack\r\n                } else {\r\n                    boosterContract.mintBooster(msg.sender, 3 days, 4, 3, 1, 0); //Gold Watch\r\n                }\r\n            }\r\n        }\r\n\r\n        _transfer(msg.sender, address(0), _tokenId); //burn chest\r\n    }\r\n\r\n    //ERC721 functionality\r\n    //could split this to a different contract but doesn't make it easier to read\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        total = chests.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance){\r\n        balance = balances[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner){\r\n        owner = chests[_tokenId].owner;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(chests[_tokenId].owner == _from); //can only transfer if previous owner equals from\r\n        chests[_tokenId].owner = _to;\r\n        approved[_tokenId] = address(0); //reset approved of fish on every transfer\r\n        balances[_from] -= 1; //underflow can only happen on 0x\r\n        balances[_to] += 1; //overflows only with very very large amounts of fish\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public\r\n    onlyChestOwner(_tokenId) //check if msg.sender is the owner of this fish\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n        //after master modifier invoke internal transfer\r\n        return true;\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public\r\n    onlyChestOwner(_tokenId)\r\n    {\r\n        approved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) {\r\n        require(approved[_tokenId] == msg.sender);\r\n        //require msg.sender to be approved for this token\r\n        _transfer(_from, _to, _tokenId);\r\n        //handles event, balances and approval reset\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boosterContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chests\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"boosters\",\"type\":\"uint16\"},{\"name\":\"chestType\",\"type\":\"uint16\"},{\"name\":\"raiseChance\",\"type\":\"uint24\"},{\"name\":\"onlySpecificType\",\"type\":\"uint8\"},{\"name\":\"onlySpecificStrength\",\"type\":\"uint8\"},{\"name\":\"raiseStrength\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"convertChest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_boosters\",\"type\":\"uint16\"},{\"name\":\"_raiseStrength\",\"type\":\"uint24\"},{\"name\":\"_raiseChance\",\"type\":\"uint24\"},{\"name\":\"_onlySpecificType\",\"type\":\"uint8\"},{\"name\":\"_onlySpecificStrength\",\"type\":\"uint8\"}],\"name\":\"mintChest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_boosterAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "FishbankChests", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f15f61643eea73be40ad9b72c09ed381fac7a256", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://22ad7fbff657ab346d395196eb78fca19320a2fd26a2cb2165dfcdb4e3ca8d85"}]}