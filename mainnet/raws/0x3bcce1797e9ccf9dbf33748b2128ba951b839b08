{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File contracts/custom/ChainParameter.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev Base contract of Hedge\r\ncontract ChainParameter {\r\n\r\n    // Block time. ethereum 14 seconds, BSC 3 seconds, polygon 2.2 seconds\r\n    uint constant BLOCK_TIME = 14;\r\n\r\n    // Minimal exercise block period. 180000\r\n    uint constant MIN_PERIOD = 180000;\r\n\r\n    uint constant MIN_EXERCISE_BLOCK = 180000;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n//MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libs/TransferHelper.sol\r\n\r\n//GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value,gas:5000}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeDAO.sol\r\n\r\n//GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines the DAO methods\r\ninterface IHedgeDAO {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Add reward\r\n    /// @param pool Destination pool\r\n    function addETHReward(address pool) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified pool\r\n    /// @param pool Destination pool\r\n    function totalETHRewards(address pool) external view returns (uint);\r\n\r\n    /// @dev Settlement\r\n    /// @param pool Destination pool. Indicates which pool to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address pool, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeMapping.sol\r\n\r\n//GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev The interface defines methods for Hedge builtin contract address mapping\r\ninterface IHedgeMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param dcuToken Address of dcu token contract\r\n    /// @param hedgeDAO IHedgeDAO implementation contract address\r\n    /// @param hedgeOptions IHedgeOptions implementation contract address\r\n    /// @param hedgeFutures IHedgeFutures implementation contract address\r\n    /// @param hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @param nestPriceFacade INestPriceFacade implementation contract address\r\n    function setBuiltinAddress(\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return dcuToken Address of dcu token contract\r\n    /// @return hedgeDAO IHedgeDAO implementation contract address\r\n    /// @return hedgeOptions IHedgeOptions implementation contract address\r\n    /// @return hedgeFutures IHedgeFutures implementation contract address\r\n    /// @return hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @return nestPriceFacade INestPriceFacade implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    );\r\n\r\n    /// @dev Get address of dcu token contract\r\n    /// @return Address of dcu token contract\r\n    function getDCUTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeDAO implementation contract address\r\n    /// @return IHedgeDAO implementation contract address\r\n    function getHedgeDAOAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeOptions implementation contract address\r\n    /// @return IHedgeOptions implementation contract address\r\n    function getHedgeOptionsAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeFutures implementation contract address\r\n    /// @return IHedgeFutures implementation contract address\r\n    function getHedgeFuturesAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeVaultForStaking implementation contract address\r\n    /// @return IHedgeVaultForStaking implementation contract address\r\n    function getHedgeVaultForStakingAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacade() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by Hedge system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string calldata key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string calldata key) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeGovernance.sol\r\n\r\n//GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev This interface defines the governance methods\r\ninterface IHedgeGovernance is IHedgeMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight \r\n    /// to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/HedgeBase.sol\r\n\r\n//GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract HedgeBase {\r\n\r\n    /// @dev IHedgeGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IHedgeGovernance implementation contract address\r\n    function initialize(address governance) public virtual {\r\n        require(_governance == address(0), \"Hedge:!initialize\");\r\n        _governance = governance;\r\n    }\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance IHedgeGovernance implementation contract address\r\n    function update(address newGovernance) public virtual {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || IHedgeGovernance(governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _governance = newGovernance;\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(IHedgeGovernance(_governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/custom/HedgeFrequentlyUsed.sol\r\n\r\n//GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract HedgeFrequentlyUsed is HedgeBase {\r\n\r\n    // Address of DCU contract\r\n    address constant DCU_TOKEN_ADDRESS = 0xf56c6eCE0C0d6Fbb9A53282C0DF71dBFaFA933eF;\r\n\r\n    // Address of NestOpenPrice contract\r\n    address constant NEST_OPEN_PRICE = 0xE544cF993C7d477C7ef8E91D28aCA250D135aa03;\r\n    \r\n    // USDT base\r\n    uint constant USDT_BASE = 1 ether;\r\n}\r\n\r\n\r\n// File contracts/interfaces/INestBatchPrice2.sol\r\n\r\n//GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This contract implemented the mining logic of nest\r\ninterface INestBatchPrice2 {\r\n\r\n    /// @dev Get the latest trigger price\r\n    /// @param channelId Target channelId\r\n    /// @param pairIndices Array of pair indices\r\n    /// @param payback Address to receive refund\r\n    /// @return prices Price array, i * 2 is the block where the ith price is located, and i * 2 + 1 is the ith price\r\n    function triggeredPrice(\r\n        uint channelId,\r\n        uint[] calldata pairIndices, \r\n        address payback\r\n    ) external payable returns (uint[] memory prices);\r\n\r\n    /// @dev Get the full information of latest trigger price\r\n    /// @param channelId Target channelId\r\n    /// @param pairIndices Array of pair indices\r\n    /// @param payback Address to receive refund\r\n    /// @return prices Price array, i * 4 is the block where the ith price is located, i * 4 + 1 is the ith price,\r\n    /// i * 4 + 2 is the ith average price and i * 4 + 3 is the ith volatility\r\n    function triggeredPriceInfo(\r\n        uint channelId, \r\n        uint[] calldata pairIndices,\r\n        address payback\r\n    ) external payable returns (uint[] memory prices);\r\n\r\n    /// @dev Find the price at block number\r\n    /// @param channelId Target channelId\r\n    /// @param pairIndices Array of pair indices\r\n    /// @param height Destination block number\r\n    /// @param payback Address to receive refund\r\n    /// @return prices Price array, i * 2 is the block where the ith price is located, and i * 2 + 1 is the ith price\r\n    function findPrice(\r\n        uint channelId,\r\n        uint[] calldata pairIndices, \r\n        uint height, \r\n        address payback\r\n    ) external payable returns (uint[] memory prices);\r\n\r\n    /// @dev Get the last (num) effective price\r\n    /// @param channelId Target channelId\r\n    /// @param pairIndices Array of pair indices\r\n    /// @param count The number of prices that want to return\r\n    /// @param payback Address to receive refund\r\n    /// @return prices Result array, i * count * 2 to (i + 1) * count * 2 - 1 are \r\n    /// the price results of group i quotation pairs\r\n    function lastPriceList(\r\n        uint channelId, \r\n        uint[] calldata pairIndices, \r\n        uint count, \r\n        address payback\r\n    ) external payable returns (uint[] memory prices);\r\n\r\n    /// @dev Returns lastPriceList and triggered price info\r\n    /// @param channelId Target channelId\r\n    /// @param pairIndices Array of pair indices\r\n    /// @param count The number of prices that want to return\r\n    /// @param payback Address to receive refund\r\n    /// @return prices result of group i quotation pair. Among them, the first two count * are the latest prices, \r\n    /// and the last four are: trigger price block number, trigger price, average price and volatility\r\n    function lastPriceListAndTriggeredPriceInfo(\r\n        uint channelId, \r\n        uint[] calldata pairIndices,\r\n        uint count, \r\n        address payback\r\n    ) external payable returns (uint[] memory prices);\r\n}\r\n\r\n\r\n// File contracts/custom/FortPriceAdapter.sol\r\n\r\n//GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract FortPriceAdapter is HedgeFrequentlyUsed {\r\n    \r\n    // token configuration\r\n    struct TokenConfig {\r\n        // The channelId for call nest price\r\n        uint16 channelId;\r\n        // The pairIndex for call nest price\r\n        uint16 pairIndex;\r\n\r\n        // SigmaSQ for token\r\n        uint64 sigmaSQ;\r\n        // MIU_LONG for token\r\n        uint64 miuLong;\r\n        // MIU_SHORT for token\r\n        uint64 miuShort;\r\n    }\r\n\r\n    // Post unit: 2000usd\r\n    uint constant POST_UNIT = 2000 * USDT_BASE;\r\n\r\n    function _pairIndices(uint pairIndex) private pure returns (uint[] memory pairIndices) {\r\n        pairIndices = new uint[](1);\r\n        pairIndices[0] = pairIndex;\r\n    }\r\n\r\n    // Query latest 2 price\r\n    function _lastPriceList(\r\n        TokenConfig memory tokenConfig, \r\n        uint fee, \r\n        address payback\r\n    ) internal returns (uint[] memory prices) {\r\n        prices = INestBatchPrice2(NEST_OPEN_PRICE).lastPriceList {\r\n            value: fee\r\n        } (uint(tokenConfig.channelId), _pairIndices(uint(tokenConfig.pairIndex)), 2, payback);\r\n\r\n        prices[1] = _toUSDTPrice(prices[1]);\r\n        prices[3] = _toUSDTPrice(prices[3]);\r\n    }\r\n\r\n    // Query latest price\r\n    function _latestPrice(\r\n        TokenConfig memory tokenConfig, \r\n        uint fee, \r\n        address payback\r\n    ) internal returns (uint oraclePrice) {\r\n        uint[] memory prices = INestBatchPrice2(NEST_OPEN_PRICE).lastPriceList {\r\n            value: fee\r\n        } (uint(tokenConfig.channelId), _pairIndices(uint(tokenConfig.pairIndex)), 1, payback);\r\n\r\n        oraclePrice = _toUSDTPrice(prices[1]);\r\n    }\r\n\r\n    // Find price by blockNumber\r\n    function _findPrice(\r\n        TokenConfig memory tokenConfig, \r\n        uint blockNumber, \r\n        uint fee, \r\n        address payback\r\n    ) internal returns (uint oraclePrice) {\r\n        uint[] memory prices = INestBatchPrice2(NEST_OPEN_PRICE).findPrice {\r\n            value: fee\r\n        } (uint(tokenConfig.channelId), _pairIndices(uint(tokenConfig.pairIndex)), blockNumber, payback);\r\n\r\n        oraclePrice = _toUSDTPrice(prices[1]);\r\n    }\r\n\r\n    // Convert to usdt based price\r\n    function _toUSDTPrice(uint rawPrice) internal pure returns (uint) {\r\n        return POST_UNIT * 1 ether / rawPrice;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/FortFuturesFix.sol\r\n\r\n//GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Futures\r\ncontract FortFuturesFix is ChainParameter, HedgeFrequentlyUsed, FortPriceAdapter {\r\n\r\n    /// @dev Account information\r\n    struct Account {\r\n        // Amount of margin\r\n        uint128 balance;\r\n        // Base price\r\n        uint64 basePrice;\r\n        // Base block\r\n        uint32 baseBlock;\r\n    }\r\n\r\n    /// @dev Future information\r\n    struct FutureInfo {\r\n        // Target token address\r\n        address tokenAddress; \r\n        // Lever of future\r\n        uint32 lever;\r\n        // true: call, false: put\r\n        bool orientation;\r\n\r\n        // Token index in _tokenConfigs\r\n        uint16 tokenIndex;\r\n        \r\n        // Account mapping\r\n        mapping(address=>Account) accounts;\r\n    }\r\n\r\n    // Minimum balance quantity. If the balance is less than this value, it will be liquidated\r\n    uint constant MIN_VALUE = 10 ether;\r\n\r\n    // Mapping from composite key to future index\r\n    mapping(uint=>uint) _futureMapping;\r\n\r\n    // PlaceHolder\r\n    mapping(address=>uint) _bases;\r\n\r\n    // Future array\r\n    FutureInfo[] _futures;\r\n\r\n    // token to index mapping\r\n    mapping(address=>uint) _tokenMapping;\r\n\r\n    // Token configs\r\n    TokenConfig[] _tokenConfigs;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /// @dev Returns the current value of the specified future\r\n    /// @param index Index of future\r\n    /// @param oraclePrice Current price from oracle\r\n    /// @param addr Target address\r\n    function balanceOf(uint index, uint oraclePrice, address addr) external view returns (uint) {\r\n        FutureInfo storage fi = _futures[index];\r\n        Account memory account = fi.accounts[addr];\r\n        return _balanceOf(\r\n            _tokenConfigs[fi.tokenIndex],\r\n            uint(account.balance), \r\n            _decodeFloat(account.basePrice), \r\n            uint(account.baseBlock),\r\n            oraclePrice, \r\n            fi.orientation, \r\n            uint(fi.lever)\r\n        );\r\n    }\r\n\r\n    /// @dev Fix basePrice for addr\r\n    /// @param index Index of future\r\n    /// @param addr Target address\r\n    function fix(uint index, address addr) external onlyGovernance {\r\n        Account storage account = _futures[index].accounts[addr];\r\n        account.basePrice = _encodeFloat(_decodeFloat(account.basePrice) * 10e12);\r\n    }\r\n\r\n    /// @dev Encode the uint value as a floating-point representation in the form of fraction * 16 ^ exponent\r\n    /// @param value Destination uint value\r\n    /// @return float format\r\n    function _encodeFloat(uint value) private pure returns (uint64) {\r\n\r\n        uint exponent = 0; \r\n        while (value > 0x3FFFFFFFFFFFFFF) {\r\n            value >>= 4;\r\n            ++exponent;\r\n        }\r\n        return uint64((value << 6) | exponent);\r\n    }\r\n\r\n    /// @dev Decode the floating-point representation of fraction * 16 ^ exponent to uint\r\n    /// @param floatValue fraction value\r\n    /// @return decode format\r\n    function _decodeFloat(uint64 floatValue) private pure returns (uint) {\r\n        return (uint(floatValue) >> 6) << ((uint(floatValue) & 0x3F) << 2);\r\n    }\r\n\r\n    // Calculate net worth\r\n    function _balanceOf(\r\n        TokenConfig memory tokenConfig,\r\n        uint balance,\r\n        uint basePrice,\r\n        uint baseBlock,\r\n        uint oraclePrice, \r\n        bool ORIENTATION, \r\n        uint LEVER\r\n    ) private view returns (uint) {\r\n\r\n        if (balance > 0) {\r\n            uint left;\r\n            uint right;\r\n            // Call\r\n            if (ORIENTATION) {\r\n                left = balance + (LEVER << 64) * balance * oraclePrice / basePrice\r\n                        / _expMiuT(uint(tokenConfig.miuLong), baseBlock);\r\n                right = balance * LEVER;\r\n            } \r\n            // Put\r\n            else {\r\n                left = balance * (1 + LEVER);\r\n                right = (LEVER << 64) * balance * oraclePrice / basePrice \r\n                        / _expMiuT(uint(tokenConfig.miuShort), baseBlock);\r\n            }\r\n\r\n            if (left > right) {\r\n                balance = left - right;\r\n            } else {\r\n                balance = 0;\r\n            }\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    // Calculate e^\u03bcT\r\n    function _expMiuT(uint miu, uint baseBlock) private view returns (uint) {\r\n        // return _toUInt(ABDKMath64x64.exp(\r\n        //     _toInt128((orientation ? MIU_LONG : MIU_SHORT) * (block.number - baseBlock) * BLOCK_TIME)\r\n        // ));\r\n\r\n        // Using approximate algorithm: x*(1+rt)\r\n        return miu * (block.number - baseBlock) * BLOCK_TIME + 0x10000000000000000;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"fix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FortFuturesFix", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "8888", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://703eafae721c26c3f4ab9d067ef9f93ac4412e33825bbc1e6644ca29727df84b"}]}