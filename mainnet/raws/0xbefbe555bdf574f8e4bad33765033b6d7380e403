{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity =0.5.16;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IUnoxERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ninterface IUnoxCallee {\r\n    function UnoxCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\ninterface IUnoxFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IUnoxPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\ncontract UnoxFactory is IUnoxFactory {\r\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(UnoxPair).creationCode));\r\n\r\n    address public feeTo;\r\n    address public feeToSetter;\r\n\r\n    mapping(address => mapping(address => address)) public getPair;\r\n    address[] public allPairs;\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    constructor(address _feeToSetter) public {\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n\r\n    function allPairsLength() external view returns (uint) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    // \u521b\u5efapair\r\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\r\n        require(tokenA != tokenB, 'Unox: IDENTICAL_ADDRESSES');\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'Unox: ZERO_ADDRESS');\r\n        require(getPair[token0][token1] == address(0), 'Unox: PAIR_EXISTS'); // single check is sufficient\r\n        bytes memory bytecode = type(UnoxPair).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        IUnoxPair(pair).initialize(token0, token1);\r\n        getPair[token0][token1] = pair;\r\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\r\n        allPairs.push(pair);\r\n        emit PairCreated(token0, token1, pair, allPairs.length);\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u6536\u7a0e\u7684\u5730\u5740\r\n    function setFeeTo(address _feeTo) external {\r\n        // \u5fc5\u987b\u662ffeeToSetter\u7684\u5730\u5740\r\n        require(msg.sender == feeToSetter, 'Unox: FORBIDDEN');\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    // \u8bbe\u7f6efeeToSetter\u7684\u5730\u5740\r\n    function setFeeToSetter(address _feeToSetter) external {\r\n        require(msg.sender == feeToSetter, 'Unox: FORBIDDEN');\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n}\r\n\r\ncontract Migrations {\r\n  address public owner;\r\n  uint public last_completed_migration;\r\n\r\n  modifier restricted() {\r\n    if (msg.sender == owner) _;\r\n  }\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function setCompleted(uint completed) public restricted {\r\n    last_completed_migration = completed;\r\n  }\r\n}\r\n\r\n\r\n// \u8fd9\u91cc\u7684name\u548csymbol\u8981\u6539\uff0c\u524d\u7aef\u4e5f\u8981\u6539\r\ncontract UnoxERC20 is IUnoxERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = 'Unox LPs';\r\n    string public constant symbol = 'UNX-LP';\r\n    uint8 public constant decimals = 18;\r\n    uint  public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint) public nonces;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    constructor() public {\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes('1')),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(deadline >= block.timestamp, 'Unox: EXPIRED');\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Unox: INVALID_SIGNATURE');\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\ncontract UnoxPair is IUnoxPair, UnoxERC20 {\r\n    using SafeMath  for uint;\r\n    using UQ112x112 for uint224;\r\n\r\n    // \u6700\u5c0f\u6d41\u52a8\u6027 = 1000\r\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\r\n    // SELECTOR\u662f 'transfer(address,uint256)' \u5b57\u7b26\u4e32\u54c8\u5e0c\u503c\u7684\u524d4\u4f4d16\u8fdb\u5236\u6570\u5b57\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n    address public factory; // \u5de5\u5382\u5730\u5740\r\n    address public token0; // token0\u5730\u5740\r\n    address public token1; // token1\u5730\u5740\r\n\r\n    uint112 private reserve0;           // \u50a8\u5907\u91cf0\r\n    uint112 private reserve1;           // \u50a8\u5907\u91cf1\r\n    uint32  private blockTimestampLast; // \u66f4\u65b0\u50a8\u5907\u91cf\u7684\u6700\u540e\u65f6\u95f4\u6233\r\n\r\n    // \u4ef7\u683c0\u6700\u540e\u7d2f\u8ba1\r\n    uint public price0CumulativeLast;\r\n    // \u4ef7\u683c1\u6700\u540e\u7d2f\u8ba1\r\n    uint public price1CumulativeLast;\r\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\r\n\r\n    // \u9501\u5b9a\u53d8\u91cf\uff0c\u653e\u7f6e\u91cd\u5165\r\n    uint private unlocked = 1;\r\n\r\n    // \u4fee\u9970\u7b26\uff1a\u9501\u5b9a\u8fd0\u884c\u9632\u6b62\u91cd\u5165\u653b\u51fb\r\n    modifier lock() {\r\n        require(unlocked == 1, 'Unox: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    // \u83b7\u53d6\u50a8\u5907\r\n    // _reserve0 \u50a8\u5907\u91cf0\r\n    // _reserve1 \u50a8\u5907\u91cf1\r\n    // _blockTimestampLast \u65f6\u95f4\u6233\r\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    // \u79c1\u6709\u5b89\u5168\u53d1\u9001\r\n    // token token\u5730\u5740\r\n    // to to\u5730\u5740\r\n    // value \u6570\u989d\r\n    function _safeTransfer(address token, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Unox: TRANSFER_FAILED');\r\n    }\r\n\r\n    // \u94f8\u9020\u4e8b\u4ef6\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    // \u9500\u6bc1\u4e8b\u4ef6\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    // \u4ea4\u6362\u4e8b\u4ef6\r\n    event Swap(\r\n        address indexed sender, // \u53d1\u9001\u8005\r\n        uint amount0In, // \u8f93\u5165\u91d1\u989d0\r\n        uint amount1In, // \u8f93\u5165\u91d1\u989d1\r\n        uint amount0Out, // \u8f93\u51fa\u91d1\u989d0\r\n        uint amount1Out, // \u8f93\u51fa\u91d1\u989d1\r\n        address indexed to\r\n    );\r\n\r\n    // \u540c\u6b65\u4e8b\u4ef6\r\n    // reserve0 \u50a8\u5907\u91cf0\r\n    // reserve1 \u50a8\u5907\u91cf1\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    constructor() public {\r\n        // factory\u5730\u5740\u4e3a\u5408\u7ea6\u90e8\u7f72\u8005\uff0c\u610f\u601d\u662f\u914d\u5bf9\u5408\u7ea6\u90fd\u662f\u7531\u5de5\u5382\u5408\u7ea6\u6765\u521b\u5efa\u7684\r\n        factory = msg.sender;\r\n    }\r\n\r\n    // \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u90e8\u7f72\u65f6\u7531\u5de5\u5382\u5408\u7ea6\u8c03\u7528\u4e00\u6b21\r\n    function initialize(address _token0, address _token1) external {\r\n        // \u786e\u8ba4\u8c03\u7528\u8005\u4e3a\u5de5\u5382\u5730\u5740\r\n        require(msg.sender == factory, 'Unox: FORBIDDEN'); // sufficient check\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n    }\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\r\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Unox: OVERFLOW');\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\r\n            // * never overflows, and + overflow is desired\r\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\r\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\r\n        }\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\r\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\r\n        // \u67e5\u8be2\u5de5\u5382\u5408\u7ea6\u7684feeTo\u7684\u503c\r\n        address feeTo = IUnoxFactory(factory).feeTo();\r\n        // \u5982\u679cfeeTo\u4e0d\u7b49\u4e8e0\u5730\u5740\uff0cfeeOn\u7b49\u4e8etrue\uff0c\u5426\u5219\u4e3afalse\r\n        feeOn = feeTo != address(0);\r\n\r\n        // \u5b9a\u4e49k\u503c\r\n        uint _kLast = kLast; // gas savings\r\n        // \u5982\u679cfeeOn\u7b49\u4e8etrue\r\n        if (feeOn) {\r\n            // \u5982\u679ck\u503c\u4e0d\u7b49\u4e8e0\r\n            if (_kLast != 0) {\r\n                // \u8ba1\u7b97(_reserve0 * _reservel)\u7684\u5e73\u65b9\u6839\r\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\r\n                // \u8ba1\u7b97k\u503c\u7684\u5e73\u65b9\u6839\r\n                uint rootKLast = Math.sqrt(_kLast);\r\n                // \u5982\u679crootK > rootKLast\r\n                if (rootK > rootKLast) {\r\n                    // \u5206\u5b50 = erc20\u603b\u91cf * (rootK - rootKLast)\r\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\r\n                    // \u5206\u6bcd = rootK * 5 + rootKLast\r\n                    // uint denominator = rootK.mul(3).add(rootKLast); // 0.03\r\n                    // uint denominator = rootK.mul(2).add(rootKLast); //0.001 to feeTo address yang\r\n                       uint denominator = rootK.mul(5).add(rootKLast); //0.0025 to feeTo address zzh\r\n                    // \u6d41\u52a8\u6027 = \u5206\u5b50 / \u5206\u6bcd\r\n                    uint liquidity = numerator / denominator;\r\n                    // \u5982\u679c\u6d41\u52a8\u6027 > 0 \u5c06\u6d41\u52a8\u6027\u94f8\u9020\u7ed9feeTo\u5730\u5740\r\n                    if (liquidity > 0) _mint(feeTo, liquidity);\r\n                }\r\n            }\r\n            // \u5426\u5219\u5982\u679c_KLast\u4e0d\u7b49\u4e8e0\r\n        } else if (_kLast != 0) {\r\n            kLast = 0;\r\n        }\r\n    }\r\n\r\n    // \u94f8\u9020\u65b9\u6cd5\r\n    // to \u5730\u5740\u3002\u5c06\u4e24\u4e2a\u94f8\u9020\u7684token\u90fd\u5e26\u5165\u5230\u4e86\u914d\u5bf9\u5408\u7ea6\u7684\u6c60\u5b50\u4e2d\uff0c\u901a\u8fc7\u7b97\u6cd5\u521b\u5efa\u4e86lp\u7684\u6570\u989d\u7ed9\u5230to\u5730\u5740\r\n    // liquidity \u6d41\u52a8\u6027\u6570\u91cf\r\n    // \u5e94\u8be5\u4ece\u6267\u884c\u91cd\u8981\u5b89\u5168\u68c0\u67e5\u7684\u5408\u7ea6\u4e2d\u8c03\u7528\u6b64\u4f4e\u7ea7\u529f\u80fd\r\n    function mint(address to) external lock returns (uint liquidity) {\r\n        // \u901a\u8fc7getReserves()\u83b7\u53d6\u50a8\u5907\u91cf0\u548c\u50a8\u5907\u91cf1\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u7559\u7a7a\u4e86\r\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\r\n        // \u5f53\u524d\u5408\u7ea6\u5728token0\u5408\u7ea6\u5185\u7684\u4f59\u989d\r\n        uint balance0 = IERC20(token0).balanceOf(address(this));\r\n        // \u5f53\u524d\u5408\u7ea6\u5728token1\u5408\u7ea6\u5185\u7684\u4f59\u989d\r\n        uint balance1 = IERC20(token1).balanceOf(address(this));\r\n        // amount0 = \u4f59\u989d0 - \u50a8\u59070\r\n        // amount1 = \u4f59\u989d1 - \u50a8\u59071\r\n        uint amount0 = balance0.sub(_reserve0);\r\n        uint amount1 = balance1.sub(_reserve1);\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        // \u5982\u679c_totalSupply\u7b49\u4e8e0\r\n        if (_totalSupply == 0) {\r\n            // \u6d41\u52a8\u6027 = (\u6570\u91cf0 * \u6570\u91cf1)\u7684\u5e73\u65b9\u6839 - \u6700\u5c0f\u6d41\u52a8\u60271000\r\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            // \u6d41\u52a8\u6027 = \u6700\u5c0f\u503c(amount0 * _totalSupply) / _reserve0,(amount1 * _totalSupply) / _reserve1)\r\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\r\n        }\r\n        require(liquidity > 0, 'Unox: INSUFFICIENT_LIQUIDITY_MINTED');\r\n        _mint(to, liquidity);\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        // \u5982\u679c\u94f8\u9020\u8d39\u5f00\u5173\u4e3atrue\uff0c k\u503c = \u50a8\u59070 * \u50a8\u59071   \u56fa\u5b9a\u4e58\u79ef\u505a\u5e02\u5546  x * y = k\r\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\r\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\r\n        address _token0 = token0;                                // gas savings\r\n        address _token1 = token1;                                // gas savings\r\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\r\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\r\n        uint liquidity = balanceOf[address(this)];\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\r\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(amount0 > 0 && amount1 > 0, 'Unox: INSUFFICIENT_LIQUIDITY_BURNED');\r\n        _burn(address(this), liquidity);\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        balance0 = IERC20(_token0).balanceOf(address(this));\r\n        balance1 = IERC20(_token1).balanceOf(address(this));\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\r\n        require(amount0Out > 0 || amount1Out > 0, 'Unox: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\r\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Unox: INSUFFICIENT_LIQUIDITY');\r\n\r\n        uint balance0;\r\n        uint balance1;\r\n        { // scope for _token{0,1}, avoids stack too deep errors\r\n            address _token0 = token0;\r\n            address _token1 = token1;\r\n            require(to != _token0 && to != _token1, 'Unox: INVALID_TO');\r\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\r\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\r\n            if (data.length > 0) IUnoxCallee(to).UnoxCall(msg.sender, amount0Out, amount1Out, data);\r\n            balance0 = IERC20(_token0).balanceOf(address(this));\r\n            balance1 = IERC20(_token1).balanceOf(address(this));\r\n        }\r\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\r\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\r\n        require(amount0In > 0 || amount1In > 0, 'Unox: INSUFFICIENT_INPUT_AMOUNT');\r\n        {\r\n            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(5)); \r\n\r\n               uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(5));\r\n\r\n            // \u786e\u8ba4balance0Adjusted * balance1Adjusted >= \u50a8\u59070 * \u50a8\u59071 * 1000**2\r\n            // require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'Unox: K');\r\n            // }\r\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'Unox: K'); // yang\r\n        }\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\r\n    }\r\n\r\n    function skim(address to) external lock {\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\r\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\r\n    }\r\n\r\n    // \u5f3a\u5236\u51c6\u5907\u91d1\u4e0e\u4f59\u989d\u5339\u914d\r\n    function sync() external lock {\r\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"INIT_CODE_PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnoxFactory", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000061aa3926697e11f97ec1d90105517cd802aaa055", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://fbefa14f5ea1eaf170e6b085a4b0c2273ac1341885d3891095ed34b03d6fe97f"}]}