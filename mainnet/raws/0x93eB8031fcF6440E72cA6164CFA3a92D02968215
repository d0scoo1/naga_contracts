{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EmissionBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./Supervisor.sol\\\";\\nimport \\\"./MToken.sol\\\";\\n\\ncontract EmissionBooster is AccessControl, ReentrancyGuard {\\n    /// @dev Based on bitmap size used in TierCheckpoint\\n    uint256 internal constant MAX_TIERS = 224;\\n\\n    /// @notice Address of the Minterest NFT.\\n    address public minterestNFT;\\n\\n    /// @notice The address of the Minterest supervisor.\\n    Supervisor public supervisor;\\n\\n    /// @dev The Tier for each MinterestNFT token\\n    mapping(uint256 => uint256) public tokenTier;\\n\\n    /// @dev Bitmap with accounts tiers\\n    mapping(address => uint256) internal accountToTiers;\\n\\n    /// @dev Stores how much tokens of one tier account have\\n    mapping(address => mapping(uint256 => uint256)) internal accountToTierAmounts;\\n\\n    /// @notice A list of all created Tiers\\n    TierData[] public tiers;\\n\\n    /// @dev Contains end block of checkpoint and what tiers where active during it\\n    struct TierCheckpoint {\\n        uint32 startBlock;\\n        uint224 activeTiers;\\n    }\\n\\n    /// @dev A list of checkpoints of tiers\\n    TierCheckpoint[] internal checkpoints;\\n\\n    /// @notice Indicates whether the emission boost mode is enabled.\\n    /// If enabled - we perform calculations of the emission boost for MNT distribution,\\n    /// if disabled - additional calculations are not performed. This flag can only be activated once.\\n    bool public isEmissionBoostingEnabled;\\n\\n    struct TierData {\\n        // Block number in which the emission boost starts work. This block number is stored at the moment\\n        // the category is activated.\\n        uint32 startBlock;\\n        // Block number in which the emission boost ends.\\n        uint32 endBlock;\\n        // Emissions Boost for MNT Emissions Rewards, scaled by 1e18\\n        uint256 emissionBoost;\\n    }\\n\\n    /// @dev Indicates the Tier that should be updated next in a specific market.\\n    mapping(MToken => uint256) internal tierToBeUpdatedSupplyIndex;\\n    mapping(MToken => uint256) internal tierToBeUpdatedBorrowIndex;\\n\\n    /// @notice Stores markets indexes per block.\\n    mapping(MToken => mapping(uint256 => uint256)) public marketSupplyIndexes;\\n    mapping(MToken => mapping(uint256 => uint256)) public marketBorrowIndexes;\\n\\n    /// @notice Emitted when new Tier was created\\n    event NewTierCreated(uint256 createdTier, uint32 endBoostBlock, uint256 emissionBoost);\\n\\n    /// @notice Emitted when Tier was enabled\\n    event TierEnabled(\\n        MToken market,\\n        uint256 enabledTier,\\n        uint32 startBoostBlock,\\n        uint224 mntSupplyIndex,\\n        uint224 mntBorrowIndex\\n    );\\n\\n    /// @notice Emitted when new Supervisor was installed\\n    event SupervisorInstalled(Supervisor supervisor);\\n\\n    /// @notice Emitted when emission boost mode was enabled\\n    event EmissionBoostEnabled(address caller);\\n\\n    /// @notice Emitted when MNT supply index of the tier ending on the market was saved to storage\\n    event SupplyIndexUpdated(address market, uint256 nextTier, uint224 newIndex, uint32 endBlock);\\n\\n    /// @notice Emitted when MNT borrow index of the tier ending on the market was saved to storage\\n    event BorrowIndexUpdated(address market, uint256 nextTier, uint224 newIndex, uint32 endBlock);\\n\\n    /// @param admin_ Address of the Admin\\n    /// @param minterestNFT_ Address of the Minterest NFT contract\\n    /// @param supervisor_ Address of the Supervisor contract\\n    function initialize(\\n        address admin_,\\n        address minterestNFT_,\\n        Supervisor supervisor_\\n    ) external {\\n        require(minterestNFT == address(0), ErrorCodes.SECOND_INITIALIZATION);\\n        require(admin_ != address(0), ErrorCodes.ADMIN_ADDRESS_CANNOT_BE_ZERO);\\n        require(minterestNFT_ != address(0), ErrorCodes.TOKEN_ADDRESS_CANNOT_BE_ZERO);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        minterestNFT = minterestNFT_;\\n        supervisor = supervisor_;\\n\\n        // Create zero Tier. Zero Tier is always disabled.\\n        tiers.push(TierData({startBlock: 0, endBlock: 0, emissionBoost: 0}));\\n    }\\n\\n    //// NFT callback functions ////\\n\\n    function onMintToken(\\n        address to_,\\n        uint256[] memory ids_,\\n        uint256[] memory amounts_,\\n        uint256[] memory tiers_\\n    ) external {\\n        require(msg.sender == minterestNFT, ErrorCodes.UNAUTHORIZED);\\n\\n        uint256 transferredTiers = 0;\\n        for (uint256 i = 0; i < ids_.length; i++) {\\n            uint256 tier = tiers_[i];\\n            if (tier == 0) continue; // Process only positive tiers\\n\\n            require(tierExists(tier), ErrorCodes.EB_TIER_DOES_NOT_EXIST);\\n            require(!isTierActive(tier), ErrorCodes.EB_CANNOT_MINT_TOKEN_FOR_ACTIVATED_TIER);\\n\\n            tokenTier[ids_[i]] = tier;\\n            accountToTierAmounts[to_][tier] += amounts_[i];\\n            transferredTiers |= _tierMask(tier);\\n        }\\n\\n        // Update only if receiver has got new tiers\\n        uint256 tiersDiff = accountToTiers[to_] ^ transferredTiers;\\n        if (tiersDiff > 0) {\\n            // slither-disable-next-line reentrancy-no-eth\\n            supervisor.distributeAllMnt(to_);\\n            accountToTiers[to_] |= transferredTiers;\\n        }\\n    }\\n\\n    /// @param from_ Address of the tokens previous owner. Should not be zero (minter).\\n    function onTransferToken(\\n        address from_,\\n        address to_,\\n        uint256[] memory ids_,\\n        uint256[] memory amounts_\\n    ) external {\\n        require(msg.sender == minterestNFT, ErrorCodes.UNAUTHORIZED);\\n\\n        uint256 removedTiers = 0;\\n        uint256 transferredTiers = 0;\\n        for (uint256 i = 0; i < ids_.length; i++) {\\n            (uint256 id, uint256 amount) = (ids_[i], amounts_[i]);\\n            if (amount == 0) continue;\\n\\n            uint256 tier = tokenTier[id];\\n            if (tier == 0) continue;\\n\\n            uint256 mask = _tierMask(tier);\\n            transferredTiers |= mask;\\n\\n            accountToTierAmounts[from_][tier] -= amount;\\n            if (accountToTierAmounts[from_][tier] == 0) removedTiers |= mask;\\n\\n            accountToTierAmounts[to_][tier] += amount;\\n        }\\n\\n        // Update only if sender has removed tiers\\n        if (removedTiers > 0) {\\n            // slither-disable-next-line reentrancy-no-eth,reentrancy-benign\\n            supervisor.distributeAllMnt(from_);\\n            accountToTiers[from_] &= ~removedTiers;\\n        }\\n\\n        // Update only if receiver has got new tiers\\n        uint256 tiersDiff = accountToTiers[to_] ^ transferredTiers;\\n        if (tiersDiff > 0) {\\n            // slither-disable-next-line reentrancy-no-eth\\n            supervisor.distributeAllMnt(to_);\\n            accountToTiers[to_] |= transferredTiers;\\n        }\\n    }\\n\\n    //// Admin Functions ////\\n\\n    /// @notice Enables emission boost mode.\\n    /// @dev Admin function for enabling emission boosts.\\n    function enableEmissionBoosting() external {\\n        address whitelist = address(supervisor.whitelist());\\n        require(whitelist != address(0) && msg.sender == whitelist, ErrorCodes.UNAUTHORIZED);\\n        isEmissionBoostingEnabled = true;\\n        // we do not activate the zero tier\\n        uint256[] memory tiersForEnabling = new uint256[](tiers.length - 1);\\n        for (uint256 i = 0; i < tiersForEnabling.length; i++) {\\n            tiersForEnabling[i] = i + 1;\\n        }\\n\\n        enableTiersInternal(tiersForEnabling);\\n        emit EmissionBoostEnabled(msg.sender);\\n    }\\n\\n    /// @notice Creates new Tiers for MinterestNFT tokens\\n    /// @dev Admin function for creating Tiers\\n    /// @param endBoostBlocks Emission boost end blocks for created Tiers\\n    /// @param emissionBoosts Emission boosts for created Tiers, scaled by 1e18\\n    /// Note: The arrays passed to the function must be of the same length and the order of the elements must match\\n    ///      each other\\n    function createTiers(uint32[] memory endBoostBlocks, uint256[] memory emissionBoosts)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(endBoostBlocks.length == emissionBoosts.length, ErrorCodes.INPUT_ARRAY_LENGTHS_ARE_NOT_EQUAL);\\n        require(\\n            tiers.length + endBoostBlocks.length - 1 <= MAX_TIERS, // Subtract zero tier\\n            ErrorCodes.EB_TIER_LIMIT_REACHED\\n        );\\n\\n        for (uint256 i = 0; i < endBoostBlocks.length; i++) {\\n            uint32 end = endBoostBlocks[i];\\n            uint256 boost = emissionBoosts[i];\\n\\n            require(_getBlockNumber() < end, ErrorCodes.EB_END_BLOCK_MUST_BE_LARGER_THAN_CURRENT);\\n            require(boost > 0 && boost <= 0.5e18, ErrorCodes.EB_EMISSION_BOOST_IS_NOT_IN_RANGE);\\n\\n            tiers.push(TierData({startBlock: 0, endBlock: end, emissionBoost: boost}));\\n            emit NewTierCreated(tiers.length - 1, end, boost);\\n        }\\n    }\\n\\n    /// @notice Enables emission boost in specified Tiers\\n    /// @param tiersForEnabling Tier for enabling emission boost\\n    function enableTiers(uint256[] memory tiersForEnabling) external nonReentrant onlyRole(DEFAULT_ADMIN_ROLE) {\\n        enableTiersInternal(tiersForEnabling);\\n    }\\n\\n    /// @notice Enables emission boost in specified Tiers\\n    /// @param tiersForEnabling Tier for enabling emission boost\\n    // slither-disable-next-line reentrancy-no-eth\\n    function enableTiersInternal(uint256[] memory tiersForEnabling) internal {\\n        uint32 currentBlock = uint32(_getBlockNumber());\\n\\n        // For each tier of tiersForEnabling set startBlock\\n        for (uint256 i = 0; i < tiersForEnabling.length; i++) {\\n            uint256 tier = tiersForEnabling[i];\\n            require(tier != 0, ErrorCodes.EB_ZERO_TIER_CANNOT_BE_ENABLED);\\n            require(tierExists(tier), ErrorCodes.EB_TIER_DOES_NOT_EXIST);\\n            require(!isTierActive(tier), ErrorCodes.EB_ALREADY_ACTIVATED_TIER);\\n            require(currentBlock < tiers[tier].endBlock, ErrorCodes.EB_END_BLOCK_MUST_BE_LARGER_THAN_CURRENT);\\n            tiers[tier].startBlock = currentBlock;\\n        }\\n\\n        _rebuildCheckpoints();\\n\\n        // For all markets update mntSupplyIndex and mntBorrowIndex, and set marketSpecificData index\\n        MToken[] memory markets = supervisor.getAllMarkets();\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            MToken market = markets[i];\\n            tierToBeUpdatedSupplyIndex[market] = getNextTierToBeUpdatedIndex(market, true);\\n            tierToBeUpdatedBorrowIndex[market] = getNextTierToBeUpdatedIndex(market, false);\\n            // slither-disable-next-line reentrancy-events,calls-loop\\n            (uint224 mntSupplyIndex, uint224 mntBorrowIndex) = supervisor.updateAndGetMntIndexes(market);\\n            for (uint256 index = 0; index < tiersForEnabling.length; index++) {\\n                uint256 tier = tiersForEnabling[index];\\n                marketSupplyIndexes[market][currentBlock] = mntSupplyIndex;\\n                marketBorrowIndexes[market][currentBlock] = mntBorrowIndex;\\n                emit TierEnabled(market, tier, currentBlock, mntSupplyIndex, mntBorrowIndex);\\n            }\\n        }\\n    }\\n\\n    /// @dev Rebuilds tier checkpoints array from scratch.\\n    /// Checkpoints have end block and bitmap with active tiers.\\n    /// Final checkpoint has the same block as previous but empty bitmap.\\n    ///           10     20     30     40     50     50\\n    ///     _0001_|_0011_|_1111_|_0101_|_0001_|_0000_|\\n    function _rebuildCheckpoints() internal {\\n        TierData[] memory tiers_ = tiers;\\n\\n        // Find bounds of all tiers\\n        uint256 firstStartBlock = type(uint256).max;\\n        uint256 lastEndBlock = type(uint256).min;\\n        for (uint256 tier = 1; tier < tiers_.length; tier++) {\\n            uint256 tierStart = tiers_[tier].startBlock;\\n            if (tierStart == 0) continue; // Skip disabled tiers\\n\\n            uint256 tierEnd = tiers_[tier].endBlock;\\n            if (tierStart < firstStartBlock) firstStartBlock = tierStart;\\n            if (tierEnd > lastEndBlock) lastEndBlock = tierEnd;\\n        }\\n\\n        // Build checkpoints...\\n        uint256 checkpointsLen = checkpoints.length;\\n        uint256 checkpointsIdx = 0; // First zero checkpoint\\n        uint256 currStartBlock = firstStartBlock;\\n\\n        // Add empty checkpoint at the start\\n        // Used to close first tier in boost calculation\\n        if (checkpointsIdx < checkpointsLen) {\\n            checkpoints[checkpointsIdx] = TierCheckpoint(0, 0);\\n            checkpointsIdx++;\\n        } else {\\n            checkpoints.push(TierCheckpoint(0, 0));\\n        }\\n\\n        while (currStartBlock < lastEndBlock) {\\n            uint256 nextChangeBlock = type(uint256).max;\\n            uint256 activeTiers = 0;\\n\\n            for (uint256 tier = 1; tier < tiers_.length; tier++) {\\n                uint256 tierStart = tiers_[tier].startBlock;\\n                if (tierStart == 0) continue; // Skip disabled tiers\\n\\n                uint256 tierEnd = tiers_[tier].endBlock;\\n\\n                // Find next tier state change\\n                if (tierStart > currStartBlock && tierStart < nextChangeBlock) nextChangeBlock = tierStart;\\n                if (tierEnd > currStartBlock && tierEnd < nextChangeBlock) nextChangeBlock = tierEnd;\\n\\n                // If tier starts now and ends later - it's active\\n                if (tierStart <= currStartBlock && tierEnd > currStartBlock) activeTiers |= _tierMask(tier);\\n            }\\n\\n            // Overwrite old checkpoint or push new one\\n            if (checkpointsIdx < checkpointsLen) {\\n                checkpoints[checkpointsIdx] = TierCheckpoint(uint32(currStartBlock), uint224(activeTiers));\\n                checkpointsIdx++;\\n            } else {\\n                checkpoints.push(TierCheckpoint(uint32(currStartBlock), uint224(activeTiers)));\\n            }\\n\\n            currStartBlock = nextChangeBlock;\\n        }\\n\\n        // Add empty checkpoint at the end\\n        // Used to close final tier in boost calculation\\n        if (checkpointsIdx < checkpointsLen) {\\n            checkpoints[checkpointsIdx] = TierCheckpoint(uint32(lastEndBlock), 0);\\n        } else {\\n            checkpoints.push(TierCheckpoint(uint32(lastEndBlock), 0));\\n        }\\n    }\\n\\n    /*** Helper special functions ***/\\n\\n    /// @notice Return the number of created Tiers\\n    /// @return The number of created Tiers\\n    function getNumberOfTiers() external view returns (uint256) {\\n        return tiers.length;\\n    }\\n\\n    /// @dev Function to simply retrieve block number\\n    ///      This exists mainly for inheriting test contracts to stub this result.\\n    // slither-disable-next-line dead-code\\n    function _getBlockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /// @notice Checks if the specified Tier is active\\n    /// @param tier_ The Tier that is being checked\\n    function isTierActive(uint256 tier_) public view returns (bool) {\\n        return tiers[tier_].startBlock > 0;\\n    }\\n\\n    /// @notice Checks if the specified Tier exists\\n    /// @param tier_ The Tier that is being checked\\n    function tierExists(uint256 tier_) public view returns (bool) {\\n        return tier_ < tiers.length;\\n    }\\n\\n    /// @param account_ The address of the account\\n    /// @return Bitmap of all accounts tiers\\n    function getAccountTiersBitmap(address account_) external view returns (uint256) {\\n        return accountToTiers[account_];\\n    }\\n\\n    /// @param account_ The address of the account to check if they have any tokens with tier\\n    function isAccountHaveTiers(address account_) public view returns (bool) {\\n        return accountToTiers[account_] > 0;\\n    }\\n\\n    /// @param account_ Address of the account\\n    /// @return tier Highest tier number\\n    /// @return boost Highest boost amount\\n    function getCurrentAccountBoost(address account_) external view returns (uint256 tier, uint256 boost) {\\n        uint256 active = accountToTiers[account_];\\n        uint256 blockN = _getBlockNumber();\\n        // We shift `active` and use it as condition to continue loop.\\n        for (uint256 ti = 1; active > 0; ti++) {\\n            if (active & 1 == 1) {\\n                TierData storage tr = tiers[ti];\\n                if (tr.emissionBoost > boost && tr.startBlock <= blockN && blockN < tr.endBlock) {\\n                    tier = ti;\\n                    boost = tr.emissionBoost;\\n                }\\n            }\\n            active >>= 1;\\n        }\\n    }\\n\\n    struct CalcEmissionVars {\\n        uint256 currentBlock;\\n        uint256 accountTiers;\\n        uint256 highIndex;\\n        uint256 prevBoost;\\n        uint256 prevCpIndex;\\n    }\\n\\n    /// @notice Calculates emission boost for the account.\\n    /// @param market_ Market for which we are calculating emission boost\\n    /// @param account_ The address of the account for which we are calculating emission boost\\n    /// @param userLastIndex_ The account's last updated mntBorrowIndex or mntSupplyIndex\\n    /// @param userLastBlock_ The block number in which the index for the account was last updated\\n    /// @param marketIndex_ The market's current mntBorrowIndex or mntSupplyIndex\\n    /// @param isSupply_ boolean value, if true, then return calculate emission boost for suppliers\\n    /// @return boostedIndex Boost part of delta index\\n    function calculateEmissionBoost(\\n        MToken market_,\\n        address account_,\\n        uint256 userLastIndex_,\\n        uint256 userLastBlock_,\\n        uint256 marketIndex_,\\n        bool isSupply_\\n    ) public view virtual returns (uint256 boostedIndex) {\\n        require(marketIndex_ >= userLastIndex_, ErrorCodes.EB_MARKET_INDEX_IS_LESS_THAN_USER_INDEX);\\n        require(userLastIndex_ >= 1e36, ErrorCodes.EB_INDEX_SHOULD_BE_GREATER_THAN_INITIAL);\\n\\n        // If emission boosting is disabled or account doesn't have NFT return nothing\\n        if (!isEmissionBoostingEnabled || !isAccountHaveTiers(account_)) {\\n            return 0;\\n        }\\n\\n        // User processed every checkpoint and can't receive any boosts because they are ended.\\n        if (userLastBlock_ > checkpoints[checkpoints.length - 1].startBlock) {\\n            return 0;\\n        }\\n\\n        // Thesaurus:\\n        //   Checkpoint, CP - Marks the end of the period and what tiers where active during it.\\n        //   Segment - Interval with the same boost amount.\\n        //   Low index, LI - Starting index of the segment.\\n        //   High index, HI - Ending index of the segment.\\n\\n        CalcEmissionVars memory vars = CalcEmissionVars({\\n            currentBlock: _getBlockNumber(),\\n            accountTiers: accountToTiers[account_],\\n            highIndex: 0,\\n            prevBoost: 0,\\n            prevCpIndex: 0\\n        });\\n\\n        // Remember, we are iterating in reverse: from recent checkpoints to the old ones.\\n        for (uint256 cpi = checkpoints.length; cpi > 0; cpi--) {\\n            TierCheckpoint memory cp = checkpoints[cpi - 1];\\n\\n            // Skip if this checkpoint is not started yet\\n            if (cp.startBlock >= vars.currentBlock) continue;\\n\\n            uint256 active = uint256(cp.activeTiers) & vars.accountTiers;\\n            uint256 cpIndex = isSupply_\\n                ? marketSupplyIndexes[market_][cp.startBlock]\\n                : marketBorrowIndexes[market_][cp.startBlock];\\n\\n            if (active == 0) {\\n                // No active tiers in this checkpoint.\\n\\n                if (vars.prevBoost > 0) {\\n                    // Payout - Tier start\\n                    // Prev tier started after we had no active tiers in this CP.\\n\\n                    uint256 deltaIndex = vars.highIndex - vars.prevCpIndex;\\n                    boostedIndex += (deltaIndex * vars.prevBoost) / 1e18;\\n\\n                    // No active tiers in this checkpoint, so we zero out values.\\n                    vars.highIndex = 0;\\n                    vars.prevBoost = 0;\\n                }\\n\\n                // We reached checkpoint that was active last time and can exit.\\n                if (cp.startBlock <= userLastBlock_) break;\\n\\n                vars.prevCpIndex = cpIndex;\\n                continue;\\n            }\\n\\n            uint256 highestBoost = _findHighestTier(active);\\n\\n            if (vars.prevBoost == highestBoost && cp.startBlock >= userLastBlock_) {\\n                vars.prevCpIndex = cpIndex;\\n                continue;\\n            }\\n\\n            if (vars.prevBoost == 0) {\\n                // If there was no previous tier then we starting new segment.\\n\\n                // When we are processing first (last in time) started checkpoint we have no prevCpIndex.\\n                // In that case we should use marketIndex_ and prevCpIndex otherwise.\\n                vars.highIndex = vars.prevCpIndex > 0 ? vars.prevCpIndex : marketIndex_;\\n            } else if (vars.prevBoost != highestBoost) {\\n                // Payout - Change tier\\n                // In this checkpoint is active other tier than in previous one.\\n\\n                uint256 deltaIndex = vars.highIndex - vars.prevCpIndex;\\n                boostedIndex += (deltaIndex * vars.prevBoost) / 1e18;\\n\\n                // Remember lowest index of previous segment as the highest index of new segment.\\n                vars.highIndex = vars.prevCpIndex;\\n            }\\n\\n            if (cp.startBlock <= userLastBlock_) {\\n                // Payout - Deep break\\n                // We reached checkpoint that was active last time.\\n                // Since this is active tier we can use user index as LI.\\n\\n                uint256 deltaIndex = vars.highIndex - userLastIndex_;\\n                boostedIndex += (deltaIndex * highestBoost) / 1e18;\\n\\n                break;\\n            }\\n\\n            // Save data about current checkpoint\\n            vars.prevBoost = highestBoost;\\n            vars.prevCpIndex = cpIndex;\\n        }\\n    }\\n\\n    /// @dev Finds tier with highest boost value from supplied bitmap\\n    /// @param active Set of tiers in form of bitmap to find the highest tier from\\n    /// @return highestBoost Highest tier boost amount with subtracted 1e18\\n    function _findHighestTier(uint256 active) internal view returns (uint256 highestBoost) {\\n        // We shift `active` and use it as condition to continue loop.\\n        for (uint256 ti = 1; active > 0; ti++) {\\n            if (active & 1 == 1) {\\n                uint256 tierEmissionBoost = tiers[ti].emissionBoost;\\n                if (tierEmissionBoost > highestBoost) {\\n                    highestBoost = tierEmissionBoost;\\n                }\\n            }\\n            active >>= 1;\\n        }\\n    }\\n\\n    /// @notice Update MNT supply index for market for NFT tiers that are expired but not yet updated.\\n    /// @dev This function checks if there are tiers to update and process them one by one:\\n    ///      calculates the MNT supply index depending on the delta index and delta blocks between\\n    ///      last MNT supply index update and the current state,\\n    ///      emits SupplyIndexUpdated event and recalculates next tier to update.\\n    /// @param market Address of the market to update\\n    /// @param lastUpdatedBlock Last updated block number\\n    /// @param lastUpdatedIndex Last updated index value\\n    /// @param currentSupplyIndex Current MNT supply index value\\n    function updateSupplyIndexesHistory(\\n        MToken market,\\n        uint256 lastUpdatedBlock,\\n        uint256 lastUpdatedIndex,\\n        uint256 currentSupplyIndex\\n    ) public virtual {\\n        require(msg.sender == address(supervisor), ErrorCodes.UNAUTHORIZED);\\n        require(\\n            currentSupplyIndex >= 1e36 && lastUpdatedIndex >= 1e36,\\n            ErrorCodes.EB_INDEX_SHOULD_BE_GREATER_THAN_INITIAL\\n        );\\n\\n        uint256 nextTier = tierToBeUpdatedSupplyIndex[market];\\n        // If parameter nextTier is equal to zero, it means that all Tiers have already been updated.\\n        if (nextTier == 0) return;\\n\\n        uint256 currentBlock = _getBlockNumber();\\n        uint256 endBlock = tiers[nextTier].endBlock;\\n        uint256 period = currentBlock - lastUpdatedBlock;\\n\\n        // calculate and fill all expired markets that were not updated\\n        // we expect that there will be only one expired tier at a time, but will parse all just in case\\n        while (endBlock <= currentBlock) {\\n            if (isTierActive(nextTier) && (marketSupplyIndexes[market][endBlock] == 0)) {\\n                uint224 newIndex = uint224(\\n                    lastUpdatedIndex +\\n                        (((currentSupplyIndex - lastUpdatedIndex) * (endBlock - lastUpdatedBlock)) / period)\\n                );\\n\\n                marketSupplyIndexes[market][endBlock] = newIndex;\\n\\n                emit SupplyIndexUpdated(address(market), nextTier, newIndex, uint32(endBlock));\\n            }\\n\\n            nextTier = getNextTierToBeUpdatedIndex(market, true);\\n            tierToBeUpdatedSupplyIndex[market] = nextTier;\\n\\n            if (nextTier == 0) break;\\n\\n            endBlock = tiers[nextTier].endBlock;\\n        }\\n    }\\n\\n    /// @notice Update MNT borrow index for market for NFT tiers that are expired but not yet updated.\\n    /// @dev This function checks if there are tiers to update and process them one by one:\\n    ///      calculates the MNT borrow index depending on the delta index and delta blocks between\\n    ///      last MNT borrow index update and the current state,\\n    ///      emits BorrowIndexUpdated event and recalculates next tier to update.\\n    /// @param market Address of the market to update\\n    /// @param lastUpdatedBlock Last updated block number\\n    /// @param lastUpdatedIndex Last updated index value\\n    /// @param currentBorrowIndex Current MNT borrow index value\\n    function updateBorrowIndexesHistory(\\n        MToken market,\\n        uint256 lastUpdatedBlock,\\n        uint256 lastUpdatedIndex,\\n        uint256 currentBorrowIndex\\n    ) public virtual {\\n        require(msg.sender == address(supervisor), ErrorCodes.UNAUTHORIZED);\\n        require(\\n            currentBorrowIndex >= 1e36 && lastUpdatedIndex >= 1e36,\\n            ErrorCodes.EB_INDEX_SHOULD_BE_GREATER_THAN_INITIAL\\n        );\\n\\n        uint256 nextTier = tierToBeUpdatedBorrowIndex[market];\\n        // If parameter nextTier is equal to zero, it means that all Tiers have already been updated.\\n        if (nextTier == 0) return;\\n\\n        uint256 currentBlock = _getBlockNumber();\\n        uint256 endBlock = tiers[nextTier].endBlock;\\n        uint256 period = currentBlock - lastUpdatedBlock;\\n\\n        // calculate and fill all expired markets that were not updated\\n        while (endBlock <= currentBlock) {\\n            if (isTierActive(nextTier) && (marketBorrowIndexes[market][endBlock] == 0)) {\\n                uint224 newIndex = uint224(\\n                    lastUpdatedIndex +\\n                        (((currentBorrowIndex - lastUpdatedIndex) * (endBlock - lastUpdatedBlock)) / period)\\n                );\\n\\n                marketBorrowIndexes[market][endBlock] = newIndex;\\n\\n                emit BorrowIndexUpdated(address(market), nextTier, newIndex, uint32(endBlock));\\n            }\\n\\n            nextTier = getNextTierToBeUpdatedIndex(market, false);\\n            tierToBeUpdatedBorrowIndex[market] = nextTier;\\n\\n            if (nextTier == 0) break;\\n\\n            endBlock = tiers[nextTier].endBlock;\\n        }\\n    }\\n\\n    /// @notice Get Id of NFT tier to update next on provided market MNT index, supply or borrow\\n    /// @param market Market for which should the next Tier to update be updated\\n    /// @param isSupply_ Flag that indicates whether MNT supply or borrow market should be updated\\n    /// @return Id of tier to update\\n    function getNextTierToBeUpdatedIndex(MToken market, bool isSupply_) public view virtual returns (uint256) {\\n        // Find the next Tier that should be updated. We are skipping Zero Tier.\\n        uint256 numberOfBoostingTiers = tiers.length - 1;\\n\\n        // return zero if no next tier available\\n        if (numberOfBoostingTiers < 1) return 0;\\n\\n        // set closest tier to update to be tier 1\\n        // we expect this list to be ordered but we have to check anyway\\n        uint256 closest = 0;\\n        uint256 bestTier = 0;\\n\\n        for (uint256 tier = 1; tier <= numberOfBoostingTiers; tier++) {\\n            // skip non-started tiers\\n            if (!isTierActive(tier)) continue;\\n\\n            // skip any finalized market\\n            uint256 current = tiers[tier].endBlock;\\n            if (isSupply_) {\\n                if (marketSupplyIndexes[market][current] != 0) continue;\\n            } else {\\n                if (marketBorrowIndexes[market][current] != 0) continue;\\n            }\\n\\n            // init closest with the first non-passed yet tier\\n            if (closest == 0) {\\n                closest = current;\\n                bestTier = tier;\\n                continue;\\n            }\\n\\n            // we are here if potentially closest tier is found, performing final check\\n            if (current < closest) {\\n                closest = current;\\n                bestTier = tier;\\n            }\\n        }\\n\\n        return bestTier;\\n    }\\n\\n    function _tierMask(uint256 tier) internal pure returns (uint256) {\\n        return tier > 0 ? 1 << (tier - 1) : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Supervisor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./MToken.sol\\\";\\nimport \\\"./SupervisorInterface.sol\\\";\\nimport \\\"./SupervisorStorage.sol\\\";\\nimport \\\"./Governance/Mnt.sol\\\";\\n\\n/**\\n * @title Minterest Supervisor Contract\\n * @author Minterest\\n */\\ncontract Supervisor is SupervisorV1Storage, SupervisorInterface {\\n    using SafeCast for uint256;\\n\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(MToken mToken);\\n\\n    /// @notice Emitted when an account enable a market\\n    event MarketEnabledAsCollateral(MToken mToken, address account);\\n\\n    /// @notice Emitted when an account disable a market\\n    event MarketDisabledAsCollateral(MToken mToken, address account);\\n\\n    /// @notice Emitted when a utilisation factor is changed by admin\\n    event NewUtilisationFactor(\\n        MToken mToken,\\n        uint256 oldUtilisationFactorMantissa,\\n        uint256 newUtilisationFactorMantissa\\n    );\\n\\n    /// @notice Emitted when price oracle is changed\\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\n\\n    /// @notice Emitted when buyback is changed\\n    event NewBuyback(Buyback oldBuyback, Buyback newBuyback);\\n\\n    /// @notice Emitted when EmissionBooster contract is installed\\n    event NewEmissionBooster(EmissionBooster emissionBooster);\\n\\n    /// @notice Emitted when Business Development System contract is installed\\n    event NewBusinessDevelopmentSystem(BDSystem oldBDSystem, BDSystem newBDSystem);\\n\\n    /// @notice Event emitted when whitelist is changed\\n    event NewWhitelist(WhitelistInterface oldWhitelist, WhitelistInterface newWhitelist);\\n\\n    /// @notice Emitted when liquidator is changed\\n    event NewLiquidator(Liquidation oldLiquidator, Liquidation newLiquidator);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event MarketActionPaused(MToken mToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when a new supply MNT emission rate is calculated for a market\\n    event MntSupplyEmissionRateUpdated(MToken indexed mToken, uint256 newSupplyEmissionRate);\\n\\n    /// @notice Emitted when a new borrow MNT emission rate is calculated for a market\\n    event MntBorrowEmissionRateUpdated(MToken indexed mToken, uint256 newBorrowEmissionRate);\\n\\n    /// @notice Emitted when liquidation fee is changed by admin\\n    event NewLiquidationFee(MToken marketAddress, uint256 oldLiquidationFee, uint256 newLiquidationFee);\\n\\n    /// @notice Emitted when MNT is distributed to a supplier\\n    event DistributedSupplierMnt(\\n        MToken indexed mToken,\\n        address indexed supplier,\\n        uint256 mntDelta,\\n        uint256 mntSupplyIndex\\n    );\\n\\n    /// @notice Emitted when MNT is distributed to a borrower\\n    event DistributedBorrowerMnt(\\n        MToken indexed mToken,\\n        address indexed borrower,\\n        uint256 mntDelta,\\n        uint256 mntBorrowIndex\\n    );\\n\\n    /// @notice Emitted when MNT is withdrew to a holder\\n    event WithdrawnMnt(address indexed holder, uint256 withdrewAmount);\\n\\n    /// @notice Emitted when MNT is distributed to a business development representative\\n    event DistributedRepresentativeMnt(MToken indexed mToken, address indexed representative, uint256 mntDelta);\\n\\n    /// @notice Emitted when borrow cap for a mToken is changed\\n    event NewBorrowCap(MToken indexed mToken, uint256 newBorrowCap);\\n\\n    /// @notice Emitted when MNT is granted by admin\\n    event MntGranted(address recipient, uint256 amount);\\n\\n    /// @notice Emitted when withdraw allowance changed\\n    event WithdrawAllowanceChanged(address owner, address withdrawer, bool allowed);\\n\\n    /// @notice The initial MNT index for a market\\n    uint224 public constant mntInitialIndex = 1e36;\\n\\n    // No utilisationFactorMantissa may exceed this value\\n    uint256 public constant utilisationFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    /// @notice The right part is the keccak-256 hash of variable name\\n    bytes32 public constant GATEKEEPER = bytes32(0x20162831d2f54c3e11eebafebfeda495d4c52c67b1708251179ec91fb76dd3b2);\\n\\n    function initialize(address admin_) external {\\n        require(!hasRole(DEFAULT_ADMIN_ROLE, admin_), ErrorCodes.SECOND_INITIALIZATION);\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(GATEKEEPER, admin_);\\n        _grantRole(TIMELOCK, admin_);\\n    }\\n\\n    /***  Manage your collateral assets ***/\\n\\n    /**\\n     * @notice Returns the assets an account has enabled as collateral\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has enabled as collateral\\n     */\\n    function getAccountAssets(address account) external view returns (MToken[] memory) {\\n        return accountAssets[account];\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is enabled as collateral in the given asset\\n     * @param account The address of the account to check\\n     * @param mToken The mToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, MToken mToken) external view returns (bool) {\\n        return markets[address(mToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param mTokens The list of addresses of the mToken markets to be enabled as collateral\\n     */\\n    function enableAsCollateral(address[] memory mTokens) external override {\\n        uint256 len = mTokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            enableMarketAsCollateralInternal(MToken(mTokens[i]), msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param mToken The market to enable as collateral\\n     * @param account The address of the account to modify\\n     */\\n    function enableMarketAsCollateralInternal(MToken mToken, address account) internal {\\n        Market storage marketToEnableAsCollateral = markets[address(mToken)];\\n        require(marketToEnableAsCollateral.isListed, ErrorCodes.MARKET_NOT_LISTED);\\n\\n        if (marketToEnableAsCollateral.accountMembership[account]) {\\n            return; // already joined\\n        }\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if particular market is enabled for an account\\n        marketToEnableAsCollateral.accountMembership[account] = true;\\n        accountAssets[account].push(mToken);\\n\\n        emit MarketEnabledAsCollateral(mToken, account);\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param mTokenAddress The address of the asset to be removed\\n     */\\n    function disableAsCollateral(address mTokenAddress) external override {\\n        MToken mToken = MToken(mTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the mToken */\\n        (uint256 tokensHeld, uint256 amountOwed, ) = mToken.getAccountSnapshot(msg.sender);\\n\\n        /* Fail if the sender has a borrow balance */\\n        require(amountOwed == 0, ErrorCodes.BALANCE_OWED);\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        beforeRedeemInternal(mTokenAddress, msg.sender, tokensHeld);\\n\\n        Market storage marketToDisable = markets[address(mToken)];\\n\\n        /* Return true if the sender is not already \u2018in\u2019 the market */\\n        if (!marketToDisable.accountMembership[msg.sender]) {\\n            return;\\n        }\\n\\n        /* Set mToken account membership to false */\\n        delete marketToDisable.accountMembership[msg.sender];\\n\\n        /* Delete mToken from the account\u2019s list of assets */\\n        // load into memory for faster iteration\\n        MToken[] memory accountAssetList = accountAssets[msg.sender];\\n        uint256 len = accountAssetList.length;\\n        uint256 assetIndex = len;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (accountAssetList[i] == mToken) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        MToken[] storage storedList = accountAssets[msg.sender];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.pop();\\n\\n        emit MarketDisabledAsCollateral(mToken, msg.sender);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Makes checks if the account should be allowed to lend tokens in the given market\\n     * @param mToken The market to verify the lend against\\n     * @param lender The account which would get the lent tokens\\n     * @param wrapBalance Wrap balance of lender account before lend\\n     */\\n    // slither-disable-next-line reentrancy-benign\\n    function beforeLend(\\n        address mToken,\\n        address lender,\\n        uint256 wrapBalance\\n    ) external override whitelistMode(lender) {\\n        // Bells and whistles to notify user - operation is paused.\\n        require(!lendKeeperPaused[mToken], ErrorCodes.OPERATION_PAUSED);\\n        require(markets[mToken].isListed, ErrorCodes.MARKET_NOT_LISTED);\\n\\n        if (wrapBalance == 0) {\\n            enableMarketAsCollateralInternal(MToken(mToken), lender);\\n        }\\n\\n        // Trigger Emission system\\n        updateMntSupplyIndex(mToken);\\n        //slither-disable-next-line reentrancy-events\\n        distributeSupplierMnt(mToken, lender);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market and triggers emission system\\n     * @param mToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of mTokens to exchange for the underlying asset in the market\\n     */\\n    //slither-disable-next-line reentrancy-benign\\n    function beforeRedeem(\\n        address mToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external override nonReentrant whitelistMode(redeemer) {\\n        beforeRedeemInternal(mToken, redeemer, redeemTokens);\\n\\n        // Trigger Emission system\\n        //slither-disable-next-line reentrancy-events\\n        updateMntSupplyIndex(mToken);\\n        distributeSupplierMnt(mToken, redeemer);\\n    }\\n\\n    /**\\n     * @dev Checks if the account should be allowed to redeem tokens in the given market\\n     * @param mToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of mTokens to exchange for the underlying asset in the market\\n     */\\n    function beforeRedeemInternal(\\n        address mToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) internal view {\\n        require(markets[mToken].isListed, ErrorCodes.MARKET_NOT_LISTED);\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[mToken].accountMembership[redeemer]) {\\n            return;\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (, uint256 shortfall) = getHypotheticalAccountLiquidity(redeemer, MToken(mToken), redeemTokens, 0);\\n        require(shortfall <= 0, ErrorCodes.INSUFFICIENT_LIQUIDITY);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(uint256 redeemAmount, uint256 redeemTokens) external pure override {\\n        // Require tokens is zero or amount is also zero\\n        require(redeemTokens > 0 || redeemAmount == 0, ErrorCodes.INVALID_REDEEM);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param mToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     */\\n    //slither-disable-next-line reentrancy-benign\\n    function beforeBorrow(\\n        address mToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external override nonReentrant whitelistMode(borrower) {\\n        // Bells and whistles to notify user - operation is paused.\\n        require(!borrowKeeperPaused[mToken], ErrorCodes.OPERATION_PAUSED);\\n        require(markets[mToken].isListed, ErrorCodes.MARKET_NOT_LISTED);\\n\\n        if (!markets[mToken].accountMembership[borrower]) {\\n            // only mTokens may call beforeBorrow if borrower not in market\\n            require(msg.sender == mToken, ErrorCodes.INVALID_SENDER);\\n\\n            // attempt to enable market for the borrower\\n            enableMarketAsCollateralInternal(MToken(msg.sender), borrower);\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[mToken].accountMembership[borrower]);\\n        }\\n\\n        require(oracle.getUnderlyingPrice(MToken(mToken)) > 0, ErrorCodes.INVALID_PRICE);\\n\\n        uint256 borrowCap = borrowCaps[mToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint256 totalBorrows = MToken(mToken).totalBorrows();\\n            uint256 nextTotalBorrows = totalBorrows + borrowAmount;\\n            require(nextTotalBorrows < borrowCap, ErrorCodes.BORROW_CAP_REACHED);\\n        }\\n\\n        (, uint256 shortfall) = getHypotheticalAccountLiquidity(borrower, MToken(mToken), 0, borrowAmount);\\n        require(shortfall <= 0, ErrorCodes.INSUFFICIENT_LIQUIDITY);\\n\\n        // Trigger Emission system\\n        uint224 borrowIndex = MToken(mToken).borrowIndex().toUint224();\\n        //slither-disable-next-line reentrancy-events\\n        updateMntBorrowIndex(mToken, borrowIndex);\\n        distributeBorrowerMnt(mToken, borrower, borrowIndex);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param mToken The market to verify the repay against\\n     * @param borrower The account which would borrowed the asset\\n     */\\n    //slither-disable-next-line reentrancy-benign\\n    function beforeRepayBorrow(address mToken, address borrower)\\n        external\\n        override\\n        nonReentrant\\n        whitelistMode(borrower)\\n    {\\n        require(markets[mToken].isListed, ErrorCodes.MARKET_NOT_LISTED);\\n\\n        // Trigger Emission system\\n        uint224 borrowIndex = MToken(mToken).borrowIndex().toUint224();\\n        //slither-disable-next-line reentrancy-events\\n        updateMntBorrowIndex(mToken, borrowIndex);\\n        distributeBorrowerMnt(mToken, borrower, borrowIndex);\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur (auto liquidation process)\\n     * @param mToken Asset which was used as collateral and will be seized\\n     * @param liquidator_ The address of liquidator contract\\n     * @param borrower The address of the borrower\\n     */\\n    //slither-disable-next-line reentrancy-benign\\n    function beforeAutoLiquidationSeize(\\n        address mToken,\\n        address liquidator_,\\n        address borrower\\n    ) external override nonReentrant {\\n        isLiquidator(liquidator_);\\n        // Trigger Emission system\\n        //slither-disable-next-line reentrancy-events\\n        updateMntSupplyIndex(mToken);\\n        distributeSupplierMnt(mToken, borrower);\\n    }\\n\\n    /**\\n     * @notice Checks if the address is the Liquidation contract\\n     * @dev Used in liquidation process\\n     * @param liquidator_ Prospective address of the Liquidation contract\\n     */\\n    function isLiquidator(address liquidator_) public view override {\\n        require(liquidator == Liquidation(liquidator_), ErrorCodes.UNRELIABLE_LIQUIDATOR);\\n    }\\n\\n    /**\\n     * @notice Checks if the sender should be allowed to repay borrow in the given market (auto liquidation process)\\n     * @param liquidator_ The address of liquidator contract\\n     * @param borrower_ The account which borrowed the asset\\n     * @param mToken_ The market to verify the repay against\\n     * @param borrowIndex_ Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    //slither-disable-next-line reentrancy-benign\\n    function beforeAutoLiquidationRepay(\\n        address liquidator_,\\n        address borrower_,\\n        address mToken_,\\n        uint224 borrowIndex_\\n    ) external override nonReentrant {\\n        isLiquidator(liquidator_);\\n        //slither-disable-next-line reentrancy-events\\n        updateMntBorrowIndex(mToken_, borrowIndex_);\\n        distributeBorrowerMnt(mToken_, borrower_, borrowIndex_);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param mToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of mTokens to transfer\\n     */\\n    //slither-disable-next-line reentrancy-benign,reentrancy-no-eth\\n    function beforeTransfer(\\n        address mToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external override nonReentrant {\\n        // Bells and whistles to notify user - operation is paused.\\n        require(!transferKeeperPaused, ErrorCodes.OPERATION_PAUSED);\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        beforeRedeemInternal(mToken, src, transferTokens);\\n\\n        // Trigger Emission system\\n        //slither-disable-next-line reentrancy-events\\n        updateMntSupplyIndex(mToken);\\n        distributeSupplierMnt(mToken, src);\\n        distributeSupplierMnt(mToken, dst);\\n    }\\n\\n    /**\\n     * @notice Makes checks before flash loan in MToken\\n     * @param mToken The address of the token\\n     * receiver - The address of the loan receiver\\n     * amount - How much tokens to flash loan\\n     * fee - Flash loan fee\\n     */\\n    function beforeFlashLoan(\\n        address mToken,\\n        address, /* receiver */\\n        uint256, /* amount */\\n        uint256 /* fee */\\n    ) external view override {\\n        require(markets[mToken].isListed, ErrorCodes.MARKET_NOT_LISTED);\\n        require(!flashLoanKeeperPaused[mToken], ErrorCodes.OPERATION_PAUSED);\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `mTokenBalance` is the number of mTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint256 sumCollateral;\\n        uint256 sumBorrowPlusEffects;\\n        uint256 mTokenBalance;\\n        uint256 borrowBalance;\\n        uint256 utilisationFactor;\\n        uint256 exchangeRate;\\n        uint256 oraclePrice;\\n        uint256 tokensToDenom;\\n    }\\n\\n    /**\\n     * @notice Calculate account liquidity in USD related to utilisation factors of underlying assets\\n     * @return (USD value above total utilisation requirements of all assets,\\n     *           USD value below total utilisation requirements of all assets)\\n     */\\n    function getAccountLiquidity(address account) external view returns (uint256, uint256) {\\n        return getHypotheticalAccountLiquidity(account, MToken(address(0)), 0, 0);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param mTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        MToken mTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    ) public view returns (uint256, uint256) {\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n\\n        // For each asset the account is in\\n        MToken[] memory assets = accountAssets[account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            MToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the mToken\\n            //slither-disable-next-line calls-loop\\n            (vars.mTokenBalance, vars.borrowBalance, vars.exchangeRate) = asset.getAccountSnapshot(account);\\n            vars.utilisationFactor = markets[address(asset)].utilisationFactorMantissa;\\n\\n            // Get the normalized price of the asset\\n            //slither-disable-next-line calls-loop\\n            vars.oraclePrice = oracle.getUnderlyingPrice(asset);\\n            require(vars.oraclePrice > 0, ErrorCodes.INVALID_PRICE);\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom =\\n                (((vars.utilisationFactor * vars.exchangeRate) / EXP_SCALE) * vars.oraclePrice) /\\n                EXP_SCALE;\\n\\n            // sumCollateral += tokensToDenom * mTokenBalance\\n            vars.sumCollateral += (vars.tokensToDenom * vars.mTokenBalance) / EXP_SCALE;\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects += (vars.oraclePrice * vars.borrowBalance) / EXP_SCALE;\\n\\n            // Calculate effects of interacting with mTokenModify\\n            if (asset == mTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects += (vars.tokensToDenom * redeemTokens) / EXP_SCALE;\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects += (vars.oraclePrice * borrowAmount) / EXP_SCALE;\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\\n        } else {\\n            return (0, vars.sumBorrowPlusEffects - vars.sumCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get liquidationFeeMantissa and utilisationFactorMantissa for market\\n     * @param market Market for which values are obtained\\n     * @return (liquidationFeeMantissa, utilisationFactorMantissa)\\n     */\\n    function getMarketData(MToken market) external view returns (uint256, uint256) {\\n        return (markets[address(market)].liquidationFeeMantissa, markets[address(market)].utilisationFactorMantissa);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Sets a new price oracle for the supervisor\\n     * @dev Admin function to set a new price oracle\\n     */\\n    function setPriceOracle(PriceOracle newOracle) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        PriceOracle oldOracle = oracle;\\n        oracle = newOracle;\\n        emit NewPriceOracle(oldOracle, newOracle);\\n    }\\n\\n    /**\\n     * @notice Sets a new buyback for the supervisor\\n     * @dev Admin function to set a new buyback\\n     */\\n    function setBuyback(Buyback newBuyback) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Buyback oldBuyback = buyback;\\n        buyback = newBuyback;\\n        emit NewBuyback(oldBuyback, newBuyback);\\n    }\\n\\n    /**\\n     * @notice Sets a new emissionBooster for the supervisor\\n     * @dev Admin function to set a new EmissionBooster. Can only be installed once.\\n     */\\n    function setEmissionBooster(EmissionBooster _emissionBooster) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(Address.isContract(address(_emissionBooster)), ErrorCodes.CONTRACT_DOES_NOT_SUPPORT_INTERFACE);\\n        require(address(emissionBooster) == address(0), ErrorCodes.CONTRACT_ALREADY_SET);\\n        emissionBooster = _emissionBooster;\\n        emit NewEmissionBooster(emissionBooster);\\n    }\\n\\n    /// @notice function to set BDSystem contract\\n    /// @param newBDSystem_ new Business Development system contract address\\n    function setBDSystem(BDSystem newBDSystem_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        BDSystem oldBDSystem = bdSystem;\\n        bdSystem = newBDSystem_;\\n        emit NewBusinessDevelopmentSystem(oldBDSystem, newBDSystem_);\\n    }\\n\\n    /*\\n     * @notice Sets a new whitelist for the supervisor\\n     * @dev Admin function to set a new whitelist\\n     */\\n    function setWhitelist(WhitelistInterface newWhitelist_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        WhitelistInterface oldWhitelist = whitelist;\\n        whitelist = newWhitelist_;\\n        emit NewWhitelist(oldWhitelist, newWhitelist_);\\n    }\\n\\n    /**\\n     * @notice Sets a new liquidator for the supervisor\\n     * @dev Admin function to set a new liquidation contract\\n     */\\n    function setLiquidator(Liquidation newLiquidator) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Liquidation oldLiquidator = liquidator;\\n        liquidator = newLiquidator;\\n        emit NewLiquidator(oldLiquidator, newLiquidator);\\n    }\\n\\n    /**\\n     * @notice Sets the utilisationFactor for a market\\n     * @dev Admin function to set per-market utilisationFactor\\n     * @param mToken The market to set the factor on\\n     * @param newUtilisationFactorMantissa The new utilisation factor, scaled by 1e18\\n     */\\n    function setUtilisationFactor(MToken mToken, uint256 newUtilisationFactorMantissa) external onlyRole(TIMELOCK) {\\n        Market storage market = markets[address(mToken)];\\n        require(market.isListed, ErrorCodes.MARKET_NOT_LISTED);\\n\\n        // Check utilisation factor <= 0.9\\n        require(\\n            newUtilisationFactorMantissa <= utilisationFactorMaxMantissa,\\n            ErrorCodes.INVALID_UTILISATION_FACTOR_MANTISSA\\n        );\\n\\n        // If utilisation factor = 0 than price can be any. Otherwise price must be > 0.\\n        require(newUtilisationFactorMantissa == 0 || oracle.getUnderlyingPrice(mToken) > 0, ErrorCodes.INVALID_PRICE);\\n\\n        // Set market's utilisation factor to new utilisation factor, remember old value\\n        uint256 oldUtilisationFactorMantissa = market.utilisationFactorMantissa;\\n        market.utilisationFactorMantissa = newUtilisationFactorMantissa;\\n\\n        // Emit event with asset, old utilisation factor, and new utilisation factor\\n        emit NewUtilisationFactor(mToken, oldUtilisationFactorMantissa, newUtilisationFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets the liquidationFee for a market\\n     * @dev Admin function to set per-market liquidationFee\\n     * @param mToken The market to set the fee on\\n     * @param newLiquidationFeeMantissa The new liquidation fee, scaled by 1e18\\n     */\\n    function setLiquidationFee(MToken mToken, uint256 newLiquidationFeeMantissa) external onlyRole(TIMELOCK) {\\n        require(newLiquidationFeeMantissa > 0, ErrorCodes.LIQUIDATION_FEE_MANTISSA_SHOULD_BE_GREATER_THAN_ZERO);\\n\\n        Market storage market = markets[address(mToken)];\\n        require(market.isListed, ErrorCodes.MARKET_NOT_LISTED);\\n\\n        uint256 oldLiquidationFeeMantissa = market.liquidationFeeMantissa;\\n        market.liquidationFeeMantissa = newLiquidationFeeMantissa;\\n\\n        emit NewLiquidationFee(mToken, oldLiquidationFeeMantissa, newLiquidationFeeMantissa);\\n    }\\n\\n    /**\\n     * @notice Add the market to the markets mapping and set it as listed, also initialize MNT market state.\\n     * @dev Admin function to set isListed and add support for the market\\n     * @param mToken The address of the market (token) to list\\n     */\\n    function supportMarket(MToken mToken) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            mToken.supportsInterface(type(MTokenInterface).interfaceId),\\n            ErrorCodes.CONTRACT_DOES_NOT_SUPPORT_INTERFACE\\n        );\\n        require(!markets[address(mToken)].isListed, ErrorCodes.MARKET_ALREADY_LISTED);\\n\\n        markets[address(mToken)].isListed = true;\\n        markets[address(mToken)].utilisationFactorMantissa = 0;\\n        markets[address(mToken)].liquidationFeeMantissa = 0;\\n        allMarkets.push(mToken);\\n\\n        // Initialize supplyState and borrowState for market\\n        MntMarketState storage supplyState = mntSupplyState[address(mToken)];\\n        MntMarketState storage borrowState = mntBorrowState[address(mToken)];\\n\\n        // Update market state indices\\n        if (supplyState.index == 0) {\\n            // Initialize supply state index with default value\\n            supplyState.index = mntInitialIndex;\\n        }\\n\\n        if (borrowState.index == 0) {\\n            // Initialize borrow state index with default value\\n            borrowState.index = mntInitialIndex;\\n        }\\n\\n        // Update market state block numbers\\n        supplyState.block = borrowState.block = uint32(getBlockNumber());\\n\\n        emit MarketListed(mToken);\\n    }\\n\\n    /**\\n     * @notice Set the given borrow caps for the given mToken markets.\\n     *         Borrowing that brings total borrows to or above borrow cap will revert.\\n     * @dev Admin or gateKeeper function to set the borrow caps.\\n     *      A borrow cap of 0 corresponds to unlimited borrowing.\\n     * @param mTokens The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set.\\n     *                      A value of 0 corresponds to unlimited borrowing.\\n     */\\n    function setMarketBorrowCaps(MToken[] calldata mTokens, uint256[] calldata newBorrowCaps)\\n        external\\n        onlyRole(GATEKEEPER)\\n    {\\n        uint256 numMarkets = mTokens.length;\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, ErrorCodes.INVALID_MTOKENS_OR_BORROW_CAPS);\\n\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            borrowCaps[address(mTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(mTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    function setLendPaused(MToken mToken, bool state) external onlyRole(GATEKEEPER) returns (bool) {\\n        require(markets[address(mToken)].isListed, ErrorCodes.MARKET_NOT_LISTED);\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || state, ErrorCodes.ADMIN_ONLY); // Only admin can unpause\\n        lendKeeperPaused[address(mToken)] = state;\\n        emit MarketActionPaused(mToken, \\\"Lend\\\", state);\\n        return state;\\n    }\\n\\n    function setBorrowPaused(MToken mToken, bool state) external onlyRole(GATEKEEPER) returns (bool) {\\n        require(markets[address(mToken)].isListed, ErrorCodes.MARKET_NOT_LISTED);\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || state, ErrorCodes.ADMIN_ONLY); // Only admin can unpause\\n        borrowKeeperPaused[address(mToken)] = state;\\n        emit MarketActionPaused(mToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function setFlashLoanPaused(MToken mToken, bool state) external onlyRole(GATEKEEPER) returns (bool) {\\n        require(markets[address(mToken)].isListed, ErrorCodes.MARKET_NOT_LISTED);\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || state, ErrorCodes.ADMIN_ONLY); // Only admin can unpause\\n        flashLoanKeeperPaused[address(mToken)] = state;\\n        emit MarketActionPaused(mToken, \\\"FlashLoan\\\", state);\\n        return state;\\n    }\\n\\n    function setTransferPaused(bool state) external onlyRole(GATEKEEPER) returns (bool) {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || state, ErrorCodes.ADMIN_ONLY); // Only admin can unpause\\n        transferKeeperPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    function setWithdrawMntPaused(bool state) external onlyRole(GATEKEEPER) returns (bool) {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || state, ErrorCodes.ADMIN_ONLY); // Only admin can unpause\\n        withdrawMntKeeperPaused = state;\\n        emit ActionPaused(\\\"WithdrawMnt\\\", state);\\n        return state;\\n    }\\n\\n    /*** Mnt Distribution ***/\\n\\n    /**\\n     * @dev Set MNT borrow and supply emission rates for a single market\\n     * @param mToken The market whose MNT emission rate to update\\n     * @param newMntSupplyEmissionRate New supply MNT emission rate for market\\n     * @param newMntBorrowEmissionRate New borrow MNT emission rate for market\\n     */\\n    //slither-disable-next-line reentrancy-no-eth\\n    function setMntEmissionRates(\\n        MToken mToken,\\n        uint256 newMntSupplyEmissionRate,\\n        uint256 newMntBorrowEmissionRate\\n    ) external onlyRole(TIMELOCK) nonReentrant {\\n        Market storage market = markets[address(mToken)];\\n        require(market.isListed, ErrorCodes.MARKET_NOT_LISTED);\\n        if (mntSupplyEmissionRate[address(mToken)] != newMntSupplyEmissionRate) {\\n            // Supply emission rate updated so let's update supply state to ensure that\\n            //  1. MNT accrued properly for the old emission rate.\\n            //  2. MNT accrued at the new speed starts after this block.\\n            //slither-disable-next-line reentrancy-events\\n            updateMntSupplyIndex(address(mToken));\\n\\n            // Update emission rate and emit event\\n            mntSupplyEmissionRate[address(mToken)] = newMntSupplyEmissionRate;\\n            emit MntSupplyEmissionRateUpdated(mToken, newMntSupplyEmissionRate);\\n        }\\n\\n        if (mntBorrowEmissionRate[address(mToken)] != newMntBorrowEmissionRate) {\\n            // Borrow emission rate updated so let's update borrow state to ensure that\\n            //  1. MNT accrued properly for the old emission rate.\\n            //  2. MNT accrued at the new speed starts after this block.\\n            uint224 borrowIndex = mToken.borrowIndex().toUint224();\\n            updateMntBorrowIndex(address(mToken), borrowIndex);\\n\\n            // Update emission rate and emit event\\n            mntBorrowEmissionRate[address(mToken)] = newMntBorrowEmissionRate;\\n            emit MntBorrowEmissionRateUpdated(mToken, newMntBorrowEmissionRate);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the new state of the market.\\n     * @param state The block number the index was last updated at and the market's last updated mntBorrowIndex\\n     * or mntSupplyIndex in this block\\n     * @param emissionRate MNT rate that each market currently receives (supply or borrow)\\n     * @param totalBalance Total market balance (totalSupply or totalBorrow)\\n     * Note: this method doesn't return anything, it only mutates memory variable `state`.\\n     */\\n    function calculateUpdatedMarketState(\\n        MntMarketState memory state,\\n        uint256 emissionRate,\\n        uint256 totalBalance\\n    ) internal view {\\n        uint256 blockNumber = getBlockNumber();\\n\\n        if (emissionRate > 0) {\\n            uint256 deltaBlocks = blockNumber - state.block;\\n            uint256 mntAccrued_ = deltaBlocks * emissionRate;\\n            uint256 ratio = totalBalance > 0 ? (mntAccrued_ * DOUBLE_SCALE) / totalBalance : 0;\\n            // index = lastUpdatedIndex + deltaBlocks * emissionRate / amount\\n            state.index += ratio.toUint224();\\n        }\\n\\n        state.block = uint32(blockNumber);\\n    }\\n\\n    /**\\n     * @dev Gets current market state (the block number and MNT supply index)\\n     * @param mToken The market whose MNT supply index to get\\n     */\\n    function getUpdatedMntSupplyIndex(address mToken) internal view returns (MntMarketState memory supplyState) {\\n        supplyState = mntSupplyState[mToken];\\n        //slither-disable-next-line calls-loop\\n        calculateUpdatedMarketState(supplyState, mntSupplyEmissionRate[mToken], MToken(mToken).totalSupply());\\n        return supplyState;\\n    }\\n\\n    /**\\n     * @dev Gets current market state (the block number and MNT supply index)\\n     * @param mToken The market whose MNT supply index to get\\n     */\\n    function getUpdatedMntBorrowIndex(address mToken, uint224 marketBorrowIndex)\\n        internal\\n        view\\n        returns (MntMarketState memory borrowState)\\n    {\\n        borrowState = mntBorrowState[mToken];\\n        //slither-disable-next-line calls-loop\\n        uint256 borrowAmount = (MToken(mToken).totalBorrows() * EXP_SCALE) / marketBorrowIndex;\\n        calculateUpdatedMarketState(borrowState, mntBorrowEmissionRate[mToken], borrowAmount);\\n        return borrowState;\\n    }\\n\\n    /**\\n     * @dev Accrue MNT to the market by updating the MNT supply index.\\n     * Index is a cumulative sum of the MNT per mToken accrued.\\n     * @param mToken The market whose MNT supply index to update\\n     */\\n    function updateMntSupplyIndex(address mToken) internal {\\n        uint32 lastUpdatedBlock = mntSupplyState[mToken].block;\\n        /* Short-circuit. Indexes already updated */\\n        //slither-disable-next-line incorrect-equality\\n        if (lastUpdatedBlock == getBlockNumber()) return;\\n\\n        //slither-disable-next-line calls-loop\\n        if (emissionBooster != EmissionBooster(address(0)) && emissionBooster.isEmissionBoostingEnabled()) {\\n            uint224 lastUpdatedIndex = mntSupplyState[mToken].index;\\n            MntMarketState memory currentState = getUpdatedMntSupplyIndex(mToken);\\n            mntSupplyState[mToken] = currentState;\\n            //slither-disable-next-line calls-loop\\n            emissionBooster.updateSupplyIndexesHistory(\\n                MToken(mToken),\\n                lastUpdatedBlock,\\n                lastUpdatedIndex,\\n                currentState.index\\n            );\\n        } else {\\n            mntSupplyState[mToken] = getUpdatedMntSupplyIndex(mToken);\\n        }\\n    }\\n\\n    /**\\n     * @dev Accrue MNT to the market by updating the MNT borrow index.\\n     * Index is a cumulative sum of the MNT per mToken accrued.\\n     * @param mToken The market whose MNT borrow index to update\\n     * @param marketBorrowIndex The market's last updated BorrowIndex\\n     */\\n    function updateMntBorrowIndex(address mToken, uint224 marketBorrowIndex) internal {\\n        uint32 lastUpdatedBlock = mntBorrowState[mToken].block;\\n        /* Short-circuit. Indexes already updated */\\n        //slither-disable-next-line incorrect-equality\\n        if (lastUpdatedBlock == getBlockNumber()) return;\\n\\n        //slither-disable-next-line calls-loop\\n        if (emissionBooster != EmissionBooster(address(0)) && emissionBooster.isEmissionBoostingEnabled()) {\\n            uint224 lastUpdatedIndex = mntBorrowState[mToken].index;\\n            MntMarketState memory currentState = getUpdatedMntBorrowIndex(mToken, marketBorrowIndex);\\n            mntBorrowState[mToken] = currentState;\\n            //slither-disable-next-line calls-loop\\n            emissionBooster.updateBorrowIndexesHistory(\\n                MToken(mToken),\\n                lastUpdatedBlock,\\n                lastUpdatedIndex,\\n                currentState.index\\n            );\\n        } else {\\n            mntBorrowState[mToken] = getUpdatedMntBorrowIndex(mToken, marketBorrowIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrues MNT to the market by updating the borrow and supply indexes\\n     * @dev This method doesn't update MNT index history in Minterest NFT.\\n     * @param market The market whose supply and borrow index to update\\n     * @return (MNT supply index, MNT borrow index)\\n     */\\n    function updateAndGetMntIndexes(MToken market) external returns (uint224, uint224) {\\n        MntMarketState memory supplyState = getUpdatedMntSupplyIndex(address(market));\\n        mntSupplyState[address(market)] = supplyState;\\n\\n        uint224 borrowIndex = market.borrowIndex().toUint224();\\n        MntMarketState memory borrowState = getUpdatedMntBorrowIndex(address(market), borrowIndex);\\n        mntBorrowState[address(market)] = borrowState;\\n\\n        return (supplyState.index, borrowState.index);\\n    }\\n\\n    /**\\n     * @dev Calculate MNT accrued by a supplier. The calculation takes into account business development system and\\n     * NFT emission boosts. NFT emission boost doesn't work with liquidity provider emission boost at the same time.\\n     * @param mToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute MNT to\\n     */\\n    //slither-disable-next-line reentrancy-benign,reentrancy-events\\n    function distributeSupplierMnt(address mToken, address supplier) internal {\\n        uint32 currentBlock = uint32(getBlockNumber());\\n        uint224 supplyIndex = mntSupplyState[mToken].index;\\n        uint32 supplierLastUpdatedBlock = mntSupplierState[mToken][supplier].block;\\n        uint224 supplierIndex = mntSupplierState[mToken][supplier].index;\\n\\n        if (supplierIndex == 0 && supplyIndex >= mntInitialIndex) {\\n            // Covers the case where users supplied tokens before the market's supply state index was set.\\n            // Rewards the user with MNT accrued from the start of when supplier rewards were first\\n            // set for the market.\\n            supplierIndex = mntInitialIndex;\\n            supplierLastUpdatedBlock = currentBlock;\\n        }\\n\\n        // Update supplier's index and block to the current index and block since we are distributing accrued MNT\\n        mntSupplierState[mToken][supplier] = MntMarketAccountState({index: supplyIndex, block: currentBlock});\\n        //slither-disable-next-line calls-loop\\n        uint256 supplierTokens = MToken(mToken).balanceOf(supplier);\\n\\n        uint256 deltaIndex = supplyIndex - supplierIndex;\\n        address representative = address(0);\\n        uint256 representativeBonus = 0;\\n        uint256 deltaIndexBoost = 0;\\n\\n        // Calculate change in the cumulative sum of the MNT per mToken accrued (with considering BD system boosts)\\n        if (address(bdSystem) != address(0)) {\\n            //slither-disable-next-line calls-loop\\n            (representative, representativeBonus, deltaIndexBoost) = bdSystem.calculateEmissionBoost(\\n                supplier,\\n                deltaIndex\\n            );\\n        }\\n\\n        // Calculate change in the cumulative sum of the MNT per mToken accrued (with considering NFT emission boost).\\n        // NFT emission boost doesn't work with liquidity provider emission boost at the same time.\\n        // slither-disable-next-line incorrect-equality\\n        if (deltaIndexBoost == 0 && emissionBooster != EmissionBooster(address(0))) {\\n            //slither-disable-next-line calls-loop\\n            deltaIndexBoost = emissionBooster.calculateEmissionBoost(\\n                MToken(mToken),\\n                supplier,\\n                supplierIndex,\\n                supplierLastUpdatedBlock,\\n                supplyIndex,\\n                true\\n            );\\n        }\\n\\n        uint256 accrueDelta = (supplierTokens * (deltaIndex + deltaIndexBoost)) / DOUBLE_SCALE;\\n\\n        if (accrueDelta > 0) {\\n            mntAccrued[supplier] += accrueDelta;\\n            emit DistributedSupplierMnt(MToken(mToken), supplier, accrueDelta, supplyIndex);\\n\\n            if (representative != address(0)) {\\n                uint256 representativeAccruedDelta = (accrueDelta * representativeBonus) / EXP_SCALE;\\n                mntAccrued[representative] += representativeAccruedDelta;\\n                emit DistributedRepresentativeMnt(MToken(mToken), representative, representativeAccruedDelta);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate MNT accrued by a borrower. The calculation takes into account business development system and\\n     * NFT emission boosts. NFT emission boost doesn't work with liquidity provider emission boost at the same time.\\n     * Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param mToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute MNT to\\n     * @param marketBorrowIndex The market's last updated BorrowIndex\\n     */\\n    //slither-disable-next-line reentrancy-benign,reentrancy-events\\n    function distributeBorrowerMnt(\\n        address mToken,\\n        address borrower,\\n        uint224 marketBorrowIndex\\n    ) internal {\\n        uint32 currentBlock = uint32(getBlockNumber());\\n        uint224 borrowIndex = mntBorrowState[mToken].index;\\n        uint32 borrowerLastUpdatedBlock = mntBorrowerState[mToken][borrower].block;\\n        uint224 borrowerIndex = mntBorrowerState[mToken][borrower].index;\\n\\n        if (borrowerIndex == 0 && borrowIndex >= mntInitialIndex) {\\n            // Covers the case where users borrowed tokens before the market's borrow state index was set.\\n            // Rewards the user with MNT accrued from the start of when borrower rewards were first\\n            // set for the market.\\n            borrowerIndex = mntInitialIndex;\\n            borrowerLastUpdatedBlock = currentBlock;\\n        }\\n\\n        // Update supplier's index and block to the current index and block since we are distributing accrued MNT\\n        mntBorrowerState[mToken][borrower] = MntMarketAccountState({index: borrowIndex, block: currentBlock});\\n        //slither-disable-next-line calls-loop\\n        uint256 borrowerAmount = (MToken(mToken).borrowBalanceStored(borrower) * EXP_SCALE) / marketBorrowIndex;\\n\\n        uint256 deltaIndex = borrowIndex - borrowerIndex;\\n        address representative = address(0);\\n        uint256 representativeBonus = 0;\\n        uint256 deltaIndexBoost = 0;\\n\\n        // Calculate change in the cumulative sum of the MNT per mToken accrued (with considering BD system boosts)\\n        if (address(bdSystem) != address(0)) {\\n            //slither-disable-next-line calls-loop\\n            (representative, representativeBonus, deltaIndexBoost) = bdSystem.calculateEmissionBoost(\\n                borrower,\\n                deltaIndex\\n            );\\n        }\\n\\n        // Calculate change in the cumulative sum of the MNT per mToken accrued (with considering NFT emission boost).\\n        // NFT emission boost doesn't work with liquidity provider emission boost at the same time.\\n        // slither-disable-next-line incorrect-equality\\n        if (deltaIndexBoost == 0 && emissionBooster != EmissionBooster(address(0))) {\\n            //slither-disable-next-line calls-loop\\n            deltaIndexBoost = emissionBooster.calculateEmissionBoost(\\n                MToken(mToken),\\n                borrower,\\n                borrowerIndex,\\n                borrowerLastUpdatedBlock,\\n                borrowIndex,\\n                false\\n            );\\n        }\\n\\n        uint256 accrueDelta = (borrowerAmount * (deltaIndex + deltaIndexBoost)) / DOUBLE_SCALE;\\n\\n        if (accrueDelta > 0) {\\n            mntAccrued[borrower] += accrueDelta;\\n            emit DistributedBorrowerMnt(MToken(mToken), borrower, accrueDelta, borrowIndex);\\n\\n            if (representative != address(0)) {\\n                uint256 representativeAccruedDelta = (accrueDelta * representativeBonus) / EXP_SCALE;\\n                mntAccrued[representative] += representativeAccruedDelta;\\n                emit DistributedRepresentativeMnt(MToken(mToken), representative, representativeAccruedDelta);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates market indices and distributes tokens (if any) for holder\\n     * @dev Updates indices and distributes only for those markets where the holder have a\\n     * non-zero supply or borrow balance.\\n     * @param holder The address to distribute MNT for\\n     */\\n    function distributeAllMnt(address holder) external nonReentrant {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        return distributeMnt(holders, allMarkets, true, true);\\n    }\\n\\n    /**\\n     * @notice Distribute all MNT accrued by the holders\\n     * @param holders The addresses to distribute MNT for\\n     * @param mTokens The list of markets to distribute MNT in\\n     * @param borrowers Whether or not to distribute MNT earned by borrowing\\n     * @param suppliers Whether or not to distribute MNT earned by supplying\\n     */\\n    //slither-disable-next-line reentrancy-no-eth\\n    function distributeMnt(\\n        address[] memory holders,\\n        MToken[] memory mTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) public {\\n        uint256 numberOfMTokens = mTokens.length;\\n        uint256 numberOfHolders = holders.length;\\n\\n        for (uint256 i = 0; i < numberOfMTokens; i++) {\\n            MToken mToken = mTokens[i];\\n            require(markets[address(mToken)].isListed, ErrorCodes.MARKET_NOT_LISTED);\\n\\n            for (uint256 j = 0; j < numberOfHolders; j++) {\\n                address holder = holders[j];\\n                if (borrowers) {\\n                    //slither-disable-next-line calls-loop\\n                    uint256 holderBorrowUnderlying = mToken.borrowBalanceStored(holder);\\n                    if (holderBorrowUnderlying > 0) {\\n                        //slither-disable-next-line calls-loop\\n                        uint224 borrowIndex = mToken.borrowIndex().toUint224();\\n                        //slither-disable-next-line reentrancy-events,reentrancy-benign\\n                        updateMntBorrowIndex(address(mToken), borrowIndex);\\n                        distributeBorrowerMnt(address(mToken), holders[j], borrowIndex);\\n                    }\\n                }\\n\\n                if (suppliers) {\\n                    //slither-disable-next-line calls-loop\\n                    uint256 holderSupplyWrap = mToken.balanceOf(holder);\\n                    if (holderSupplyWrap > 0) {\\n                        updateMntSupplyIndex(address(mToken));\\n                        //slither-disable-next-line reentrancy-events,reentrancy-benign\\n                        distributeSupplierMnt(address(mToken), holder);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @param account The address of the account whose MNT are withdrawn\\n     * @param withdrawer The address of the withdrawer\\n     * @return true if `withdrawer` can withdraw MNT in behalf of `account`\\n     */\\n    function isWithdrawAllowed(address account, address withdrawer) public view returns (bool) {\\n        return withdrawAllowances[account][withdrawer];\\n    }\\n\\n    /**\\n     * @notice Allow `withdrawer` to withdraw MNT on sender's behalf\\n     * @param withdrawer The address of the withdrawer\\n     */\\n    function allowWithdraw(address withdrawer) external {\\n        withdrawAllowances[msg.sender][withdrawer] = true;\\n        emit WithdrawAllowanceChanged(msg.sender, withdrawer, true);\\n    }\\n\\n    /**\\n     * @notice Deny `withdrawer` from withdrawing MNT on sender's behalf\\n     * @param withdrawer The address of the withdrawer\\n     */\\n    function denyWithdraw(address withdrawer) external {\\n        withdrawAllowances[msg.sender][withdrawer] = false;\\n        emit WithdrawAllowanceChanged(msg.sender, withdrawer, false);\\n    }\\n\\n    /**\\n     * @notice Withdraw mnt accrued by the holders for a given amounts\\n     * @dev If `amount_ == MaxUint256` withdraws all accrued MNT tokens.\\n     * @param holders The addresses to withdraw MNT for\\n     * @param amounts Amount of tokens to withdraw for every holder\\n     */\\n    function withdrawMnt(address[] memory holders, uint256[] memory amounts) external {\\n        require(!withdrawMntKeeperPaused, ErrorCodes.OPERATION_PAUSED);\\n        require(holders.length == amounts.length, ErrorCodes.INPUT_ARRAY_LENGTHS_ARE_NOT_EQUAL);\\n\\n        // We are transferring MNT to the account. If there is not enough MNT, we do not perform the transfer all.\\n        // Also check withdrawal allowance\\n        for (uint256 j = 0; j < holders.length; j++) {\\n            address holder = holders[j];\\n            uint256 amount = amounts[j];\\n            require(holder == msg.sender || isWithdrawAllowed(holder, msg.sender), ErrorCodes.WITHDRAW_NOT_ALLOWED);\\n            if (amount == type(uint256).max) {\\n                amount = mntAccrued[holder];\\n            } else {\\n                require(amount <= mntAccrued[holder], ErrorCodes.INCORRECT_AMOUNT);\\n            }\\n\\n            // slither-disable-next-line reentrancy-no-eth\\n            uint256 transferredAmount = amount - grantMntInternal(holder, amount);\\n            mntAccrued[holder] -= transferredAmount;\\n            //slither-disable-next-line reentrancy-events\\n            emit WithdrawnMnt(holder, transferredAmount);\\n\\n            //slither-disable-next-line calls-loop\\n            if (buyback != Buyback(address(0))) buyback.restakeFor(holder);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer MNT to the account. If there is not enough MNT, we do not perform the transfer all.\\n     * @param account The address of the account to transfer MNT to\\n     * @param amount The amount of MNT to (possibly) transfer\\n     * @return The amount of MNT which was NOT transferred to the account\\n     */\\n    function grantMntInternal(address account, uint256 amount) internal returns (uint256) {\\n        Mnt mnt = Mnt(getMntAddress());\\n        //slither-disable-next-line calls-loop\\n        uint256 mntRemaining = mnt.balanceOf(address(this));\\n        if (amount > 0 && amount <= mntRemaining) {\\n            //slither-disable-next-line calls-loop\\n            require(mnt.transfer(account, amount));\\n            return 0;\\n        }\\n        return amount;\\n    }\\n\\n    /*** Mnt Distribution Admin ***/\\n\\n    /**\\n     * @notice Transfer MNT to the recipient\\n     * @dev Note: If there is not enough MNT, we do not perform the transfer all.\\n     * @param recipient The address of the recipient to transfer MNT to\\n     * @param amount The amount of MNT to (possibly) transfer\\n     */\\n    //slither-disable-next-line reentrancy-events\\n    function grantMnt(address recipient, uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n        uint256 amountLeft = grantMntInternal(recipient, amount);\\n        require(amountLeft <= 0, ErrorCodes.INSUFFICIENT_MNT_FOR_GRANT);\\n        emit MntGranted(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() external view returns (MToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`\\n    function supportsInterface(bytes4 interfaceId) public view override(AccessControl, IERC165) returns (bool) {\\n        return interfaceId == type(SupervisorInterface).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function getBlockNumber() public view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Return the address of the MNT token\\n     * @return The address of MNT\\n     */\\n    function getMntAddress() public view virtual returns (address) {\\n        return 0x95966457BbAd4391EdaC349a43Db5798625720B4;\\n    }\\n\\n    /**\\n     * @dev Check protocol operation mode. In whitelist mode, only members from whitelist and who have Minterest NFT\\n      can work with protocol.\\n     */\\n    modifier whitelistMode(address account) {\\n        require(address(whitelist) == address(0) || whitelist.isWhitelisted(account), ErrorCodes.WHITELISTED_ONLY);\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./SupervisorInterface.sol\\\";\\nimport \\\"./MTokenInterfaces.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ErrorCodes.sol\\\";\\n\\n/**\\n * @title Minterest MToken Contract\\n * @notice Abstract base for MTokens\\n * @author Minterest\\n */\\ncontract MToken is MTokenInterface, MTokenStorage {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param supervisor_ The address of the Supervisor\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     * @param underlying_ The address of the underlying asset\\n     */\\n    function initialize(\\n        address admin_,\\n        SupervisorInterface supervisor_,\\n        InterestRateModel interestRateModel_,\\n        uint256 initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        IERC20 underlying_\\n    ) external {\\n        //slither-disable-next-line incorrect-equality\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, ErrorCodes.SECOND_INITIALIZATION);\\n\\n        // Set initial exchange rate\\n        require(initialExchangeRateMantissa_ > 0, ErrorCodes.ZERO_EXCHANGE_RATE);\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n\\n        // Set the supervisor\\n        _setSupervisor(supervisor_);\\n\\n        // Initialize block number and borrow index (block number mocks depend on supervisor being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = EXP_SCALE; // = 1e18\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        setInterestRateModelFresh(interestRateModel_);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(TIMELOCK, admin_);\\n\\n        underlying = underlying_;\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        maxFlashLoanShare = 0.1e18; // 10%\\n        flashLoanFeeShare = 0.0005e18; // 0.05%\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return totalTokenSupply;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     */\\n    //slither-disable-next-line reentrancy-benign\\n    function transferTokens(\\n        address spender,\\n        address src,\\n        address dst,\\n        uint256 tokens\\n    ) internal {\\n        /* Do not allow self-transfers */\\n        require(src != dst, ErrorCodes.INVALID_DESTINATION);\\n\\n        /* Fail if transfer not allowed */\\n        //slither-disable-next-line reentrancy-events\\n        supervisor.beforeTransfer(address(this), src, dst, tokens);\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint256 startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint256).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n\\n        accountTokens[src] -= tokens;\\n        accountTokens[dst] += tokens;\\n\\n        if (startingAllowance != type(uint256).max) {\\n            transferAllowances[src][spender] = startingAllowance - tokens;\\n        }\\n\\n        emit Transfer(src, dst, tokens);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\\n        transferTokens(msg.sender, msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external override nonReentrant returns (bool) {\\n        transferTokens(msg.sender, src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external override returns (uint256) {\\n        return (accountTokens[owner] * exchangeRateCurrent()) / EXP_SCALE;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by supervisor to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 mTokenBalance = accountTokens[account];\\n        uint256 borrowBalance = borrowBalanceStoredInternal(account);\\n        uint256 exchangeRateMantissa = exchangeRateStoredInternal();\\n        return (mTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    //slither-disable-next-line dead-code\\n    function getBlockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this mToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view override returns (uint256) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalProtocolInterest);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this mToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view override returns (uint256) {\\n        return\\n            interestRateModel.getSupplyRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalProtocolInterest,\\n                protocolInterestFactorMantissa\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external override nonReentrant returns (uint256) {\\n        accrueInterest();\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's\\n     *         borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external override nonReentrant returns (uint256) {\\n        accrueInterest();\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view override returns (uint256) {\\n        return borrowBalanceStoredInternal(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return the calculated balance\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (uint256) {\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) return 0;\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        return (borrowSnapshot.principal * borrowIndex) / borrowSnapshot.interestIndex;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public override nonReentrant returns (uint256) {\\n        accrueInterest();\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the MToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view override returns (uint256) {\\n        return exchangeRateStoredInternal();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the MToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() internal view virtual returns (uint256) {\\n        if (totalTokenSupply <= 0) {\\n            /*\\n             * If there are no tokens lent:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return initialExchangeRateMantissa;\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalProtocolInterest) / totalTokenSupply\\n             */\\n            return ((getCashPrior() + totalBorrows - totalProtocolInterest) * EXP_SCALE) / totalTokenSupply;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this mToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view override returns (uint256) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and protocol interest\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public virtual override {\\n        /* Remember the initial block number */\\n        uint256 currentBlockNumber = getBlockNumber();\\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) return;\\n\\n        /* Read the previous values out of storage */\\n        uint256 cashPrior = getCashPrior();\\n        uint256 borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, totalBorrows, totalProtocolInterest);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, ErrorCodes.BORROW_RATE_TOO_HIGH);\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and protocol interest and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrows += interestAccumulated\\n         *  totalProtocolInterest += interestAccumulated * protocolInterestFactor\\n         *  borrowIndex = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n        uint256 simpleInterestFactor = borrowRateMantissa * blockDelta;\\n        uint256 interestAccumulated = (totalBorrows * simpleInterestFactor) / EXP_SCALE;\\n        totalBorrows += interestAccumulated;\\n        totalProtocolInterest += (interestAccumulated * protocolInterestFactorMantissa) / EXP_SCALE;\\n        borrowIndex = borrowIndexPrior + (borrowIndexPrior * simpleInterestFactor) / EXP_SCALE;\\n\\n        accrualBlockNumber = currentBlockNumber;\\n\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndex, totalBorrows, totalProtocolInterest);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives mTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param lendAmount The amount of the underlying asset to supply\\n     */\\n    function lend(uint256 lendAmount) external override {\\n        accrueInterest();\\n        lendFresh(msg.sender, lendAmount);\\n    }\\n\\n    /**\\n     * @notice Account supplies assets into the market and receives mTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param lender The address of the account which is supplying the assets\\n     * @param lendAmount The amount of the underlying asset to supply\\n     * @return actualLendAmount actual lend amount\\n     */\\n    function lendFresh(address lender, uint256 lendAmount) internal nonReentrant returns (uint256 actualLendAmount) {\\n        uint256 wrapBalance = accountTokens[lender];\\n        supervisor.beforeLend(address(this), lender, wrapBalance);\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), ErrorCodes.MARKET_NOT_FRESH);\\n\\n        uint256 exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        /*\\n         *  We call `doTransferIn` for the lender and the lendAmount.\\n         *  Note: The mToken must handle variations between ERC-20 underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the mToken holds an additional `actualLendAmount`\\n         *  of cash.\\n         */\\n        // slither-disable-next-line reentrancy-eth\\n        actualLendAmount = doTransferIn(lender, lendAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of mTokens to be lent:\\n         *  lendTokens = actualLendAmount / exchangeRate\\n         */\\n        uint256 lendTokens = (actualLendAmount * EXP_SCALE) / exchangeRateMantissa;\\n\\n        /*\\n         * We calculate the new total supply of mTokens and lender token balance, checking for overflow:\\n         *  totalTokenSupply = totalTokenSupply + lendTokens\\n         *  accountTokens = accountTokens[lender] + lendTokens\\n         */\\n        uint256 newTotalTokenSupply = totalTokenSupply + lendTokens;\\n        totalTokenSupply = newTotalTokenSupply;\\n        accountTokens[lender] = wrapBalance + lendTokens;\\n\\n        emit Lend(lender, actualLendAmount, lendTokens, newTotalTokenSupply);\\n        emit Transfer(address(this), lender, lendTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems mTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of mTokens to redeem into underlying\\n     */\\n    function redeem(uint256 redeemTokens) external override {\\n        accrueInterest();\\n        redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems mTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming mTokens\\n     */\\n    function redeemUnderlying(uint256 redeemAmount) external override {\\n        accrueInterest();\\n        redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Account redeems mTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokens The number of mTokens to redeem into underlying\\n     *                       (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmount The number of underlying tokens to receive from redeeming mTokens\\n     *                       (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     */\\n    //slither-disable-next-line reentrancy-no-eth\\n    function redeemFresh(\\n        address redeemer,\\n        uint256 redeemTokens,\\n        uint256 redeemAmount\\n    ) internal nonReentrant {\\n        require(redeemTokens == 0 || redeemAmount == 0, ErrorCodes.REDEEM_TOKENS_OR_REDEEM_AMOUNT_MUST_BE_ZERO);\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        uint256 exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        if (redeemTokens > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokens\\n             *  redeemAmount = redeemTokens * exchangeRateCurrent\\n             */\\n            redeemAmount = (redeemTokens * exchangeRateMantissa) / EXP_SCALE;\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmount / exchangeRate\\n             *  redeemAmount = redeemAmount\\n             */\\n            redeemTokens = (redeemAmount * EXP_SCALE) / exchangeRateMantissa;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        //slither-disable-next-line reentrancy-benign\\n        supervisor.beforeRedeem(address(this), redeemer, redeemTokens);\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), ErrorCodes.MARKET_NOT_FRESH);\\n        require(accountTokens[redeemer] >= redeemTokens, ErrorCodes.REDEEM_TOO_MUCH);\\n        require(totalTokenSupply >= redeemTokens, ErrorCodes.INVALID_REDEEM);\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         *  totalSupplyNew = totalTokenSupply - redeemTokens\\n         */\\n        uint256 accountTokensNew = accountTokens[redeemer] - redeemTokens;\\n        uint256 totalSupplyNew = totalTokenSupply - redeemTokens;\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        require(getCashPrior() >= redeemAmount, ErrorCodes.INSUFFICIENT_TOKEN_CASH);\\n\\n        totalTokenSupply = totalSupplyNew;\\n        accountTokens[redeemer] = accountTokensNew;\\n\\n        //slither-disable-next-line reentrancy-events\\n        emit Transfer(redeemer, address(this), redeemTokens);\\n        emit Redeem(redeemer, redeemAmount, redeemTokens, totalSupplyNew);\\n\\n        doTransferOut(redeemer, redeemAmount);\\n\\n        /* We call the defense hook */\\n        supervisor.redeemVerify(redeemAmount, redeemTokens);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     */\\n\\n    //slither-disable-next-line reentrancy-no-eth, reentrancy-benign\\n    function borrow(uint256 borrowAmount) external override nonReentrant {\\n        accrueInterest();\\n\\n        address borrower = msg.sender;\\n\\n        /* Fail if borrow not allowed */\\n        //slither-disable-next-line reentrancy-benign\\n        supervisor.beforeBorrow(address(this), borrower, borrowAmount);\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        require(getCashPrior() >= borrowAmount, ErrorCodes.INSUFFICIENT_TOKEN_CASH);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        uint256 accountBorrowsNew = borrowBalanceStoredInternal(borrower) + borrowAmount;\\n        uint256 totalBorrowsNew = totalBorrows + borrowAmount;\\n\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = totalBorrowsNew;\\n\\n        //slither-disable-next-line reentrancy-events\\n        emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\n\\n        doTransferOut(borrower, borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     */\\n    function repayBorrow(uint256 repayAmount) external override {\\n        accrueInterest();\\n        repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     */\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external override {\\n        accrueInterest();\\n        repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another account (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of underlying tokens being returned\\n     * @return actualRepayAmount the actual repayment amount\\n     */\\n    function repayBorrowFresh(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) internal nonReentrant returns (uint256 actualRepayAmount) {\\n        /* Fail if repayBorrow not allowed */\\n        supervisor.beforeRepayBorrow(address(this), borrower);\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), ErrorCodes.MARKET_NOT_FRESH);\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        uint256 borrowBalance = borrowBalanceStoredInternal(borrower);\\n\\n        if (repayAmount == type(uint256).max) {\\n            repayAmount = borrowBalance;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The mToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the mToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        // slither-disable-next-line reentrancy-eth\\n        actualRepayAmount = doTransferIn(payer, repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        uint256 accountBorrowsNew = borrowBalance - actualRepayAmount;\\n        uint256 totalBorrowsNew = totalBorrows - actualRepayAmount;\\n\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = totalBorrowsNew;\\n\\n        emit RepayBorrow(payer, borrower, actualRepayAmount, accountBorrowsNew, totalBorrowsNew);\\n    }\\n\\n    /**\\n     * @notice Liquidator repays a borrow belonging to borrower\\n     * @param borrower_ the account with the debt being payed off\\n     * @param repayAmount_ the amount of underlying tokens being returned\\n     */\\n    function autoLiquidationRepayBorrow(address borrower_, uint256 repayAmount_) external override nonReentrant {\\n        // Fail if repayBorrow not allowed\\n        //slither-disable-next-line reentrancy-benign\\n        supervisor.beforeAutoLiquidationRepay(msg.sender, borrower_, address(this), borrowIndex.toUint224());\\n\\n        // Verify market's block number equals current block number\\n        require(accrualBlockNumber == getBlockNumber(), ErrorCodes.MARKET_NOT_FRESH);\\n        require(totalProtocolInterest >= repayAmount_, ErrorCodes.INSUFFICIENT_TOTAL_PROTOCOL_INTEREST);\\n\\n        // We fetch the amount the borrower owes, with accumulated interest\\n        uint256 borrowBalance = borrowBalanceStoredInternal(borrower_);\\n\\n        accountBorrows[borrower_].principal = borrowBalance - repayAmount_;\\n        accountBorrows[borrower_].interestIndex = borrowIndex;\\n        totalBorrows -= repayAmount_;\\n        totalProtocolInterest -= repayAmount_;\\n\\n        //slither-disable-next-line reentrancy-events\\n        emit AutoLiquidationRepayBorrow(\\n            borrower_,\\n            repayAmount_,\\n            accountBorrows[borrower_].principal,\\n            totalBorrows,\\n            totalProtocolInterest\\n        );\\n    }\\n\\n    /**\\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract.\\n     *         Tokens are sent to admin (timelock)\\n     * @param token The address of the ERC-20 token to sweep\\n     */\\n    function sweepToken(IERC20 token, address receiver_) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(token != underlying, ErrorCodes.INVALID_TOKEN);\\n        uint256 balance = token.balanceOf(address(this));\\n        token.safeTransfer(receiver_, balance);\\n    }\\n\\n    /**\\n     * @notice Burns collateral tokens at the borrower's address, transfer underlying assets\\n     to the DeadDrop or Liquidator address.\\n     * @dev Called only during an auto liquidation process, msg.sender must be the Liquidation contract.\\n     * @param borrower_ The account having collateral seized\\n     * @param seizeUnderlyingAmount_ The number of underlying assets to seize. The caller must ensure\\n     that the parameter is greater than zero.\\n     * @param isLoanInsignificant_ Marker for insignificant loan whose collateral must be credited to the\\n     protocolInterest\\n     * @param receiver_ Address that receives accounts collateral\\n     */\\n    //slither-disable-next-line reentrancy-benign\\n    function autoLiquidationSeize(\\n        address borrower_,\\n        uint256 seizeUnderlyingAmount_,\\n        bool isLoanInsignificant_,\\n        address receiver_\\n    ) external nonReentrant {\\n        //slither-disable-next-line reentrancy-events\\n        supervisor.beforeAutoLiquidationSeize(address(this), msg.sender, borrower_);\\n\\n        uint256 exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        uint256 borrowerSeizeTokens;\\n\\n        // Infinity means all account's collateral has to be burn.\\n        if (seizeUnderlyingAmount_ == type(uint256).max) {\\n            borrowerSeizeTokens = accountTokens[borrower_];\\n            seizeUnderlyingAmount_ = (borrowerSeizeTokens * exchangeRateMantissa) / EXP_SCALE;\\n        } else {\\n            borrowerSeizeTokens = (seizeUnderlyingAmount_ * EXP_SCALE) / exchangeRateMantissa;\\n        }\\n\\n        uint256 borrowerTokensNew = accountTokens[borrower_] - borrowerSeizeTokens;\\n        uint256 totalSupplyNew = totalTokenSupply - borrowerSeizeTokens;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n\\n        accountTokens[borrower_] = borrowerTokensNew;\\n        totalTokenSupply = totalSupplyNew;\\n\\n        if (isLoanInsignificant_) {\\n            totalProtocolInterest = totalProtocolInterest + seizeUnderlyingAmount_;\\n            emit ProtocolInterestAdded(msg.sender, seizeUnderlyingAmount_, totalProtocolInterest);\\n        } else {\\n            doTransferOut(receiver_, seizeUnderlyingAmount_);\\n        }\\n\\n        emit Seize(\\n            borrower_,\\n            receiver_,\\n            borrowerSeizeTokens,\\n            borrowerTokensNew,\\n            totalSupplyNew,\\n            seizeUnderlyingAmount_\\n        );\\n    }\\n\\n    /*** Flash loans ***/\\n\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view override returns (uint256) {\\n        return token == address(underlying) ? _maxFlashLoan() : 0;\\n    }\\n\\n    function _maxFlashLoan() internal view returns (uint256) {\\n        return (getCashPrior() * maxFlashLoanShare) / EXP_SCALE;\\n    }\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view override returns (uint256) {\\n        require(token == address(underlying), ErrorCodes.FL_TOKEN_IS_NOT_UNDERLYING);\\n        return _flashFee(amount);\\n    }\\n\\n    function _flashFee(uint256 amount) internal view returns (uint256) {\\n        return (amount * flashLoanFeeShare) / EXP_SCALE;\\n    }\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    // slither-disable-next-line reentrancy-benign\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override nonReentrant returns (bool) {\\n        require(token == address(underlying), ErrorCodes.FL_TOKEN_IS_NOT_UNDERLYING);\\n        require(amount <= _maxFlashLoan(), ErrorCodes.FL_AMOUNT_IS_TOO_LARGE);\\n\\n        accrueInterest();\\n\\n        // Make supervisor checks\\n        uint256 fee = _flashFee(amount);\\n        supervisor.beforeFlashLoan(address(this), address(receiver), amount, fee);\\n\\n        // Transfer lend amount to receiver and call its callback\\n        underlying.safeTransfer(address(receiver), amount);\\n        require(\\n            receiver.onFlashLoan(msg.sender, token, amount, fee, data) == FLASH_LOAN_SUCCESS,\\n            ErrorCodes.FL_CALLBACK_FAILED\\n        );\\n\\n        // Transfer amount + fee back and check that everything was returned by token\\n        uint256 actualPullAmount = doTransferIn(address(receiver), amount + fee);\\n        require(actualPullAmount >= amount + fee, ErrorCodes.FL_PULL_AMOUNT_IS_TOO_LOW);\\n\\n        // Fee is the protocol interest so we increase it\\n        totalProtocolInterest += fee;\\n\\n        emit FlashLoanExecuted(address(receiver), amount, fee);\\n\\n        return true;\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Sets a new supervisor for the market\\n     * @dev Admin function to set a new supervisor\\n     */\\n    function setSupervisor(SupervisorInterface newSupervisor) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setSupervisor(newSupervisor);\\n    }\\n\\n    function _setSupervisor(SupervisorInterface newSupervisor) internal {\\n        require(\\n            newSupervisor.supportsInterface(type(SupervisorInterface).interfaceId),\\n            ErrorCodes.CONTRACT_DOES_NOT_SUPPORT_INTERFACE\\n        );\\n\\n        SupervisorInterface oldSupervisor = supervisor;\\n        supervisor = newSupervisor;\\n        emit NewSupervisor(oldSupervisor, newSupervisor);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new protocol interest factor for the protocol\\n     * @dev Admin function to accrue interest and set a new protocol interest factor\\n     */\\n    function setProtocolInterestFactor(uint256 newProtocolInterestFactorMantissa)\\n        external\\n        override\\n        onlyRole(TIMELOCK)\\n        nonReentrant\\n    {\\n        // Check newProtocolInterestFactor \u2264 maxProtocolInterestFactor\\n        require(\\n            newProtocolInterestFactorMantissa <= protocolInterestFactorMaxMantissa,\\n            ErrorCodes.INVALID_PROTOCOL_INTEREST_FACTOR_MANTISSA\\n        );\\n\\n        accrueInterest();\\n\\n        uint256 oldProtocolInterestFactorMantissa = protocolInterestFactorMantissa;\\n        protocolInterestFactorMantissa = newProtocolInterestFactorMantissa;\\n\\n        emit NewProtocolInterestFactor(oldProtocolInterestFactorMantissa, newProtocolInterestFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and increase protocol interest by transferring from msg.sender\\n     * @param addAmount_ Amount of addition to protocol interest\\n     */\\n    function addProtocolInterest(uint256 addAmount_) external override nonReentrant {\\n        accrueInterest();\\n        addProtocolInterestInternal(msg.sender, addAmount_);\\n    }\\n\\n    /**\\n     * @notice Can only be called by liquidation contract. Increase protocol interest by transferring from payer.\\n     * @dev Calling code should make sure that accrueInterest() was called before.\\n     * @param payer_ The address from which the protocol interest will be transferred\\n     * @param addAmount_ Amount of addition to protocol interest\\n     */\\n    function addProtocolInterestBehalf(address payer_, uint256 addAmount_) external override nonReentrant {\\n        supervisor.isLiquidator(msg.sender);\\n        addProtocolInterestInternal(payer_, addAmount_);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and increase protocol interest by transferring from payer_\\n     * @param payer_ The address from which the protocol interest will be transferred\\n     * @param addAmount_ Amount of addition to protocol interest\\n     */\\n    function addProtocolInterestInternal(address payer_, uint256 addAmount_) internal {\\n        // Verify market's block number equals current block number\\n        require(accrualBlockNumber == getBlockNumber(), ErrorCodes.MARKET_NOT_FRESH);\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The mToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the mToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n        // slither-disable-next-line reentrancy-eth\\n        uint256 actualAddAmount = doTransferIn(payer_, addAmount_);\\n        uint256 totalProtocolInterestNew = totalProtocolInterest + actualAddAmount;\\n\\n        // Store protocolInterest[n+1] = protocolInterest[n] + actualAddAmount\\n        totalProtocolInterest = totalProtocolInterestNew;\\n\\n        emit ProtocolInterestAdded(payer_, actualAddAmount, totalProtocolInterestNew);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces protocol interest by transferring to admin\\n     * @param reduceAmount Amount of reduction to protocol interest\\n     */\\n    function reduceProtocolInterest(uint256 reduceAmount, address receiver_)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        nonReentrant\\n    {\\n        accrueInterest();\\n\\n        // Check if protocol has insufficient underlying cash\\n        require(getCashPrior() >= reduceAmount, ErrorCodes.INSUFFICIENT_TOKEN_CASH);\\n        require(totalProtocolInterest >= reduceAmount, ErrorCodes.INVALID_REDUCE_AMOUNT);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n\\n        uint256 totalProtocolInterestNew = totalProtocolInterest - reduceAmount;\\n        totalProtocolInterest = totalProtocolInterestNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(receiver_, reduceAmount);\\n\\n        emit ProtocolInterestReduced(receiver_, reduceAmount, totalProtocolInterestNew);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     */\\n    function setInterestRateModel(InterestRateModel newInterestRateModel)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        accrueInterest();\\n        setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     */\\n    function setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal {\\n        require(\\n            newInterestRateModel.supportsInterface(type(InterestRateModel).interfaceId),\\n            ErrorCodes.CONTRACT_DOES_NOT_SUPPORT_INTERFACE\\n        );\\n        require(accrualBlockNumber == getBlockNumber(), ErrorCodes.MARKET_NOT_FRESH);\\n\\n        InterestRateModel oldInterestRateModel = interestRateModel;\\n        interestRateModel = newInterestRateModel;\\n\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice Updates share of markets cash that can be used as maximum amount of flash loan.\\n     * @param newMax New max amount share\\n     */\\n    function setFlashLoanMaxShare(uint256 newMax) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newMax <= EXP_SCALE, ErrorCodes.FL_PARAM_IS_TOO_LARGE);\\n        emit NewFlashLoanMaxShare(maxFlashLoanShare, newMax);\\n        maxFlashLoanShare = newMax;\\n    }\\n\\n    /**\\n     * @notice Updates fee of flash loan.\\n     * @param newFee New fee share of flash loan\\n     */\\n    function setFlashLoanFeeShare(uint256 newFee) external onlyRole(TIMELOCK) {\\n        require(newFee <= EXP_SCALE, ErrorCodes.FL_PARAM_IS_TOO_LARGE);\\n        emit NewFlashLoanFee(flashLoanFeeShare, newFee);\\n        flashLoanFeeShare = newFee;\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying tokens owned by this contract\\n     */\\n    function getCashPrior() internal view virtual returns (uint256) {\\n        return underlying.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n     *      This will revert due to insufficient balance or insufficient allowance.\\n     *      This function returns the actual amount received,\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here:\\n     *            https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferIn(address from, uint256 amount) internal virtual returns (uint256) {\\n        uint256 balanceBefore = underlying.balanceOf(address(this));\\n        underlying.safeTransferFrom(from, address(this), amount);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = underlying.balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore, ErrorCodes.TOKEN_TRANSFER_IN_UNDERFLOW);\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer`\\n     *      and returns an explanatory error code rather than reverting. If caller has not\\n     *      called checked protocol's balance, this may revert due to insufficient cash held\\n     *      in this contract. If caller has checked protocol's balance prior to this call, and verified\\n     *      it is >= amount, this should not revert in normal conditions.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here:\\n     *            https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferOut(address to, uint256 amount) internal virtual {\\n        underlying.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Admin call to delegate the votes of the MNT-like underlying\\n     * @param mntLikeDelegatee The address to delegate votes to\\n     * @dev MTokens whose underlying are not MntLike should revert here\\n     */\\n    function delegateMntLikeTo(address mntLikeDelegatee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        MntLike(address(underlying)).delegate(mntLikeDelegatee);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`\\n    function supportsInterface(bytes4 interfaceId) public view override(AccessControl, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(MTokenInterface).interfaceId ||\\n            interfaceId == type(IERC20).interfaceId ||\\n            interfaceId == type(IERC3156FlashLender).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SupervisorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface SupervisorInterface is IERC165 {\\n    /***  Manage your collateral assets ***/\\n\\n    function enableAsCollateral(address[] calldata mTokens) external;\\n\\n    function disableAsCollateral(address mToken) external;\\n\\n    /*** Policy Hooks ***/\\n\\n    function beforeLend(\\n        address mToken,\\n        address lender,\\n        uint256 wrapBalance\\n    ) external;\\n\\n    function beforeRedeem(\\n        address mToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function redeemVerify(uint256 redeemAmount, uint256 redeemTokens) external;\\n\\n    function beforeBorrow(\\n        address mToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function beforeRepayBorrow(address mToken, address borrower) external;\\n\\n    function beforeAutoLiquidationSeize(\\n        address mToken,\\n        address liquidator_,\\n        address borrower\\n    ) external;\\n\\n    function beforeAutoLiquidationRepay(\\n        address liquidator,\\n        address borrower,\\n        address mToken,\\n        uint224 borrowIndex\\n    ) external;\\n\\n    function beforeTransfer(\\n        address mToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    function beforeFlashLoan(\\n        address mToken,\\n        address receiver,\\n        uint256 amount,\\n        uint256 fee\\n    ) external;\\n\\n    function isLiquidator(address liquidator) external;\\n}\\n\"\r\n    },\r\n    \"contracts/SupervisorStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"./MToken.sol\\\";\\nimport \\\"./Oracles/PriceOracle.sol\\\";\\nimport \\\"./Buyback.sol\\\";\\nimport \\\"./BDSystem.sol\\\";\\nimport \\\"./EmissionBooster.sol\\\";\\nimport \\\"./Liquidation.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nabstract contract SupervisorV1Storage is AccessControl, ReentrancyGuard {\\n    /// @dev Value is the Keccak-256 hash of \\\"TIMELOCK\\\"\\n    bytes32 public constant TIMELOCK = bytes32(0xaefebe170cbaff0af052a32795af0e1b8afff9850f946ad2869be14f35534371);\\n    uint256 internal constant EXP_SCALE = 1e18;\\n    uint256 internal constant DOUBLE_SCALE = 1e36;\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\"\\n     */\\n    mapping(address => MToken[]) public accountAssets;\\n\\n    struct Market {\\n        // Whether or not this market is listed\\n        bool isListed;\\n        // Multiplier representing the most one can borrow against their collateral in this market.\\n        // For instance, 0.9 to allow borrowing 90% of collateral value.\\n        // Must be between 0 and 1, and stored as a mantissa.\\n        uint256 utilisationFactorMantissa;\\n        // Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n        // Multiplier representing the additional collateral which is taken from borrowers\\n        // as a penalty for being liquidated\\n        uint256 liquidationFeeMantissa;\\n    }\\n\\n    /**\\n     * @notice Official mapping of mTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n    /**\\n     * @notice The gate keeper can pause certain actions as a safety mechanism\\n     *  and can set borrowCaps to any number for any market.\\n     *  Actions which allow accounts to remove their own assets cannot be paused.\\n     *  Transfer can only be paused globally, not by market.\\n     *  Lowering the borrow cap could disable borrowing on the given market.\\n     */\\n    bool public transferKeeperPaused;\\n    bool public withdrawMntKeeperPaused;\\n    mapping(address => bool) public lendKeeperPaused;\\n    mapping(address => bool) public borrowKeeperPaused;\\n    mapping(address => bool) public flashLoanKeeperPaused;\\n\\n    struct MntMarketState {\\n        // The market's last updated mntBorrowIndex or mntSupplyIndex\\n        uint224 index;\\n        // The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    struct MntMarketAccountState {\\n        // The account's last updated mntBorrowIndex or mntSupplyIndex\\n        uint224 index;\\n        // The block number in which the index for the account was last updated.\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    MToken[] public allMarkets;\\n\\n    /// @notice The rate at which MNT is distributed to the corresponding supply market (per block)\\n    mapping(address => uint256) public mntSupplyEmissionRate;\\n\\n    /// @notice The rate at which MNT is distributed to the corresponding borrow market (per block)\\n    mapping(address => uint256) public mntBorrowEmissionRate;\\n\\n    /// @notice The MNT market supply state for each market\\n    mapping(address => MntMarketState) public mntSupplyState;\\n\\n    /// @notice The MNT market borrow state for each market\\n    mapping(address => MntMarketState) public mntBorrowState;\\n\\n    /// @notice The MNT supply index and block number for each market\\n    /// for each supplier as of the last time they accrued MNT\\n    mapping(address => mapping(address => MntMarketAccountState)) public mntSupplierState;\\n\\n    /// @notice The MNT borrow index and block number for each market\\n    /// for each supplier as of the last time they accrued MNT\\n    mapping(address => mapping(address => MntMarketAccountState)) public mntBorrowerState;\\n\\n    /// @notice The MNT accrued but not yet transferred to each account\\n    mapping(address => uint256) public mntAccrued;\\n\\n    // @notice Borrow caps enforced by beforeBorrow for each mToken address.\\n    //         Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint256) public borrowCaps;\\n\\n    /// @notice Allowances to withdraw MNT on behalf of others\\n    mapping(address => mapping(address => bool)) public withdrawAllowances;\\n\\n    /// @notice Buyback contract that implements buy-back logic for all users\\n    Buyback public buyback;\\n\\n    /// @notice EmissionBooster contract that provides boost logic for MNT distribution rewards\\n    EmissionBooster public emissionBooster;\\n\\n    /// @notice Liquidation contract that can automatically liquidate accounts' insolvent loans\\n    Liquidation public liquidator;\\n\\n    /// @notice Contract which manage access to main functionality\\n    WhitelistInterface public whitelist;\\n\\n    /// @notice Contract to create agreement and calculate rewards for representative and liquidity provider\\n    BDSystem public bdSystem;\\n}\\n\"\r\n    },\r\n    \"contracts/Governance/Mnt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"./MntVotes.sol\\\";\\n\\ncontract Mnt is ERC20, ERC20Permit, MntVotes {\\n    /// @notice Total number of tokens in circulation\\n    uint256 internal constant TOTAL_SUPPLY = 100_000_030e18; // 100,000,030 MNT\\n\\n    constructor(address account, address admin) ERC20(\\\"Minterest\\\", \\\"MNT\\\") ERC20Permit(\\\"Minterest\\\") {\\n        _mint(account, uint256(TOTAL_SUPPLY));\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    // The functions below are overrides required by Solidity.\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20, MntVotes) {\\n        super._afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address to, uint256 amount) internal override(ERC20, MntVotes) {\\n        super._mint(to, amount);\\n    }\\n\\n    //slither-disable-next-line dead-code\\n    function _burn(address, uint256) internal pure override(ERC20) {\\n        revert();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MTokenInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./SupervisorInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./WhitelistInterface.sol\\\";\\n\\nabstract contract MTokenStorage is AccessControl, ReentrancyGuard {\\n    uint256 internal constant EXP_SCALE = 1e18;\\n    bytes32 internal constant FLASH_LOAN_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /// @dev Value is the Keccak-256 hash of \\\"TIMELOCK\\\"\\n    bytes32 public constant TIMELOCK = bytes32(0xaefebe170cbaff0af052a32795af0e1b8afff9850f946ad2869be14f35534371);\\n\\n    /**\\n     * @notice Underlying asset for this MToken\\n     */\\n    IERC20 public underlying;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @dev Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n    uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @dev Maximum fraction of interest that can be set aside for protocol interest\\n     */\\n    uint256 internal constant protocolInterestFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Contract which oversees inter-mToken operations\\n     */\\n    SupervisorInterface public supervisor;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @dev Initial exchange rate used when lending the first MTokens (used when totalTokenSupply = 0)\\n     */\\n    uint256 public initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for protocol interest\\n     */\\n    uint256 public protocolInterestFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint256 public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint256 public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint256 public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of protocol interest of the underlying held in this market\\n     */\\n    uint256 public totalProtocolInterest;\\n\\n    /**\\n     * @dev Total number of tokens in circulation\\n     */\\n    uint256 internal totalTokenSupply;\\n\\n    /**\\n     * @dev Official record of token balances for each account\\n     */\\n    mapping(address => uint256) internal accountTokens;\\n\\n    /**\\n     * @dev Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @param principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @param interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint256 principal;\\n        uint256 interestIndex;\\n    }\\n\\n    /**\\n     * @dev Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /// @dev Share of market's current underlying  token balance that can be used as flash loan (scaled by 1e18).\\n    uint256 public maxFlashLoanShare;\\n\\n    /// @dev Share of flash loan amount that would be taken as fee (scaled by 1e18).\\n    uint256 public flashLoanFeeShare;\\n}\\n\\ninterface MTokenInterface is IERC20, IERC3156FlashLender, IERC165 {\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(\\n        uint256 cashPrior,\\n        uint256 interestAccumulated,\\n        uint256 borrowIndex,\\n        uint256 totalBorrows,\\n        uint256 totalProtocolInterest\\n    );\\n\\n    /**\\n     * @notice Event emitted when tokens are lended\\n     */\\n    event Lend(address lender, uint256 lendAmount, uint256 lendTokens, uint256 newTotalTokenSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens, uint256 newTotalTokenSupply);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are seized\\n     */\\n    event Seize(\\n        address borrower,\\n        address receiver,\\n        uint256 seizeTokens,\\n        uint256 accountsTokens,\\n        uint256 totalSupply,\\n        uint256 seizeUnderlyingAmount\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 accountBorrows,\\n        uint256 totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid during autoliquidation\\n     */\\n    event AutoLiquidationRepayBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 accountBorrowsNew,\\n        uint256 totalBorrowsNew,\\n        uint256 TotalProtocolInterestNew\\n    );\\n\\n    /**\\n     * @notice Event emitted when flash loan is executed\\n     */\\n    event FlashLoanExecuted(address receiver, uint256 amount, uint256 fee);\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when supervisor is changed\\n     */\\n    event NewSupervisor(SupervisorInterface oldSupervisor, SupervisorInterface newSupervisor);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the protocol interest factor is changed\\n     */\\n    event NewProtocolInterestFactor(\\n        uint256 oldProtocolInterestFactorMantissa,\\n        uint256 newProtocolInterestFactorMantissa\\n    );\\n\\n    /**\\n     * @notice Event emitted when the flash loan max share is changed\\n     */\\n    event NewFlashLoanMaxShare(uint256 oldMaxShare, uint256 newMaxShare);\\n\\n    /**\\n     * @notice Event emitted when the flash loan fee is changed\\n     */\\n    event NewFlashLoanFee(uint256 oldFee, uint256 newFee);\\n\\n    /**\\n     * @notice Event emitted when the protocol interest are added\\n     */\\n    event ProtocolInterestAdded(address benefactor, uint256 addAmount, uint256 newTotalProtocolInterest);\\n\\n    /**\\n     * @notice Event emitted when the protocol interest reduced\\n     */\\n    event ProtocolInterestReduced(address admin, uint256 reduceAmount, uint256 newTotalProtocolInterest);\\n\\n    /*** User Interface ***/\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function accrueInterest() external;\\n\\n    function lend(uint256 lendAmount) external;\\n\\n    function redeem(uint256 redeemTokens) external;\\n\\n    function redeemUnderlying(uint256 redeemAmount) external;\\n\\n    function borrow(uint256 borrowAmount) external;\\n\\n    function repayBorrow(uint256 repayAmount) external;\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external;\\n\\n    function autoLiquidationRepayBorrow(address borrower, uint256 repayAmount) external;\\n\\n    function sweepToken(IERC20 token, address admin_) external;\\n\\n    function addProtocolInterestBehalf(address payer, uint256 addAmount) external;\\n\\n    /*** Admin Functions ***/\\n\\n    function setSupervisor(SupervisorInterface newSupervisor) external;\\n\\n    function setProtocolInterestFactor(uint256 newProtocolInterestFactorMantissa) external;\\n\\n    function reduceProtocolInterest(uint256 reduceAmount, address admin_) external;\\n\\n    function setInterestRateModel(InterestRateModel newInterestRateModel) external;\\n\\n    function addProtocolInterest(uint256 addAmount) external;\\n}\\n\\ninterface MntLike {\\n    function delegate(address delegatee) external;\\n}\\n\"\r\n    },\r\n    \"contracts/InterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Minterest InterestRateModel Interface\\n * @author Minterest\\n */\\ninterface InterestRateModel is IERC165 {\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param protocolInterest The total amount of protocol interest the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 protocolInterest\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param protocolInterest The total amount of protocol interest the market has\\n     * @param protocolInterestFactorMantissa The current protocol interest factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 protocolInterest,\\n        uint256 protocolInterestFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/ErrorCodes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nlibrary ErrorCodes {\\n    // Common\\n    string internal constant ADMIN_ONLY = \\\"E101\\\";\\n    string internal constant UNAUTHORIZED = \\\"E102\\\";\\n    string internal constant OPERATION_PAUSED = \\\"E103\\\";\\n    string internal constant WHITELISTED_ONLY = \\\"E104\\\";\\n\\n    // Invalid input\\n    string internal constant ADMIN_ADDRESS_CANNOT_BE_ZERO = \\\"E201\\\";\\n    string internal constant INVALID_REDEEM = \\\"E202\\\";\\n    string internal constant REDEEM_TOO_MUCH = \\\"E203\\\";\\n    string internal constant WITHDRAW_NOT_ALLOWED = \\\"E204\\\";\\n    string internal constant MARKET_NOT_LISTED = \\\"E205\\\";\\n    string internal constant INSUFFICIENT_LIQUIDITY = \\\"E206\\\";\\n    string internal constant INVALID_SENDER = \\\"E207\\\";\\n    string internal constant BORROW_CAP_REACHED = \\\"E208\\\";\\n    string internal constant BALANCE_OWED = \\\"E209\\\";\\n    string internal constant UNRELIABLE_LIQUIDATOR = \\\"E210\\\";\\n    string internal constant INVALID_DESTINATION = \\\"E211\\\";\\n    string internal constant CONTRACT_DOES_NOT_SUPPORT_INTERFACE = \\\"E212\\\";\\n    string internal constant INSUFFICIENT_STAKE = \\\"E213\\\";\\n    string internal constant INVALID_DURATION = \\\"E214\\\";\\n    string internal constant INVALID_PERIOD_RATE = \\\"E215\\\";\\n    string internal constant EB_TIER_LIMIT_REACHED = \\\"E216\\\";\\n    string internal constant INVALID_DEBT_REDEMPTION_RATE = \\\"E217\\\";\\n    string internal constant LQ_INVALID_SEIZE_DISTRIBUTION = \\\"E218\\\";\\n    string internal constant EB_TIER_DOES_NOT_EXIST = \\\"E219\\\";\\n    string internal constant EB_ZERO_TIER_CANNOT_BE_ENABLED = \\\"E220\\\";\\n    string internal constant EB_ALREADY_ACTIVATED_TIER = \\\"E221\\\";\\n    string internal constant EB_END_BLOCK_MUST_BE_LARGER_THAN_CURRENT = \\\"E222\\\";\\n    string internal constant EB_CANNOT_MINT_TOKEN_FOR_ACTIVATED_TIER = \\\"E223\\\";\\n    string internal constant EB_EMISSION_BOOST_IS_NOT_IN_RANGE = \\\"E224\\\";\\n    string internal constant TARGET_ADDRESS_CANNOT_BE_ZERO = \\\"E225\\\";\\n    string internal constant INSUFFICIENT_TOKEN_IN_VESTING_CONTRACT = \\\"E226\\\";\\n    string internal constant VESTING_SCHEDULE_ALREADY_EXISTS = \\\"E227\\\";\\n    string internal constant INSUFFICIENT_TOKENS_TO_CREATE_SCHEDULE = \\\"E228\\\";\\n    string internal constant NO_VESTING_SCHEDULE = \\\"E229\\\";\\n    string internal constant SCHEDULE_IS_IRREVOCABLE = \\\"E230\\\";\\n    string internal constant SCHEDULE_START_IS_ZERO = \\\"E231\\\";\\n    string internal constant MNT_AMOUNT_IS_ZERO = \\\"E232\\\";\\n    string internal constant RECEIVER_ALREADY_LISTED = \\\"E233\\\";\\n    string internal constant RECEIVER_ADDRESS_CANNOT_BE_ZERO = \\\"E234\\\";\\n    string internal constant CURRENCY_ADDRESS_CANNOT_BE_ZERO = \\\"E235\\\";\\n    string internal constant INCORRECT_AMOUNT = \\\"E236\\\";\\n    string internal constant RECEIVER_NOT_IN_APPROVED_LIST = \\\"E237\\\";\\n    string internal constant MEMBERSHIP_LIMIT = \\\"E238\\\";\\n    string internal constant MEMBER_NOT_EXIST = \\\"E239\\\";\\n    string internal constant MEMBER_ALREADY_ADDED = \\\"E240\\\";\\n    string internal constant MEMBERSHIP_LIMIT_REACHED = \\\"E241\\\";\\n    string internal constant REPORTED_PRICE_SHOULD_BE_GREATER_THAN_ZERO = \\\"E242\\\";\\n    string internal constant MTOKEN_ADDRESS_CANNOT_BE_ZERO = \\\"E243\\\";\\n    string internal constant TOKEN_ADDRESS_CANNOT_BE_ZERO = \\\"E244\\\";\\n    string internal constant REDEEM_TOKENS_OR_REDEEM_AMOUNT_MUST_BE_ZERO = \\\"E245\\\";\\n    string internal constant FL_TOKEN_IS_NOT_UNDERLYING = \\\"E246\\\";\\n    string internal constant FL_AMOUNT_IS_TOO_LARGE = \\\"E247\\\";\\n    string internal constant FL_CALLBACK_FAILED = \\\"E248\\\";\\n    string internal constant DD_UNSUPPORTED_TOKEN = \\\"E249\\\";\\n    string internal constant DD_MARKET_ADDRESS_IS_ZERO = \\\"E250\\\";\\n    string internal constant DD_ROUTER_ADDRESS_IS_ZERO = \\\"E251\\\";\\n    string internal constant DD_RECEIVER_ADDRESS_IS_ZERO = \\\"E252\\\";\\n    string internal constant DD_BOT_ADDRESS_IS_ZERO = \\\"E253\\\";\\n    string internal constant DD_MARKET_NOT_FOUND = \\\"E254\\\";\\n    string internal constant DD_ROUTER_NOT_FOUND = \\\"E255\\\";\\n    string internal constant DD_RECEIVER_NOT_FOUND = \\\"E256\\\";\\n    string internal constant DD_BOT_NOT_FOUND = \\\"E257\\\";\\n    string internal constant DD_ROUTER_ALREADY_SET = \\\"E258\\\";\\n    string internal constant DD_RECEIVER_ALREADY_SET = \\\"E259\\\";\\n    string internal constant DD_BOT_ALREADY_SET = \\\"E260\\\";\\n    string internal constant EB_MARKET_INDEX_IS_LESS_THAN_USER_INDEX = \\\"E261\\\";\\n    string internal constant MV_BLOCK_NOT_YET_MINED = \\\"E262\\\";\\n    string internal constant MV_SIGNATURE_EXPIRED = \\\"E263\\\";\\n    string internal constant MV_INVALID_NONCE = \\\"E264\\\";\\n    string internal constant DD_EXPIRED_DEADLINE = \\\"E265\\\";\\n    string internal constant LQ_INVALID_DRR_ARRAY = \\\"E266\\\";\\n    string internal constant LQ_INVALID_SEIZE_ARRAY = \\\"E267\\\";\\n    string internal constant LQ_INVALID_DEBT_REDEMPTION_RATE = \\\"E268\\\";\\n    string internal constant LQ_INVALID_SEIZE_INDEX = \\\"E269\\\";\\n    string internal constant LQ_DUPLICATE_SEIZE_INDEX = \\\"E270\\\";\\n\\n    // Protocol errors\\n    string internal constant INVALID_PRICE = \\\"E301\\\";\\n    string internal constant MARKET_NOT_FRESH = \\\"E302\\\";\\n    string internal constant BORROW_RATE_TOO_HIGH = \\\"E303\\\";\\n    string internal constant INSUFFICIENT_TOKEN_CASH = \\\"E304\\\";\\n    string internal constant INSUFFICIENT_TOKENS_FOR_RELEASE = \\\"E305\\\";\\n    string internal constant INSUFFICIENT_MNT_FOR_GRANT = \\\"E306\\\";\\n    string internal constant TOKEN_TRANSFER_IN_UNDERFLOW = \\\"E307\\\";\\n    string internal constant NOT_PARTICIPATING_IN_BUYBACK = \\\"E308\\\";\\n    string internal constant NOT_ENOUGH_PARTICIPATING_ACCOUNTS = \\\"E309\\\";\\n    string internal constant NOTHING_TO_DISTRIBUTE = \\\"E310\\\";\\n    string internal constant ALREADY_PARTICIPATING_IN_BUYBACK = \\\"E311\\\";\\n    string internal constant MNT_APPROVE_FAILS = \\\"E312\\\";\\n    string internal constant TOO_EARLY_TO_DRIP = \\\"E313\\\";\\n    string internal constant INSUFFICIENT_SHORTFALL = \\\"E315\\\";\\n    string internal constant HEALTHY_FACTOR_NOT_IN_RANGE = \\\"E316\\\";\\n    string internal constant BUYBACK_DRIPS_ALREADY_HAPPENED = \\\"E317\\\";\\n    string internal constant EB_INDEX_SHOULD_BE_GREATER_THAN_INITIAL = \\\"E318\\\";\\n    string internal constant NO_VESTING_SCHEDULES = \\\"E319\\\";\\n    string internal constant INSUFFICIENT_UNRELEASED_TOKENS = \\\"E320\\\";\\n    string internal constant INSUFFICIENT_FUNDS = \\\"E321\\\";\\n    string internal constant ORACLE_PRICE_EXPIRED = \\\"E322\\\";\\n    string internal constant TOKEN_NOT_FOUND = \\\"E323\\\";\\n    string internal constant RECEIVED_PRICE_HAS_INVALID_ROUND = \\\"E324\\\";\\n    string internal constant FL_PULL_AMOUNT_IS_TOO_LOW = \\\"E325\\\";\\n    string internal constant INSUFFICIENT_TOTAL_PROTOCOL_INTEREST = \\\"E326\\\";\\n    string internal constant BB_ACCOUNT_RECENTLY_VOTED = \\\"E327\\\";\\n    // Invalid input - Admin functions\\n    string internal constant ZERO_EXCHANGE_RATE = \\\"E401\\\";\\n    string internal constant SECOND_INITIALIZATION = \\\"E402\\\";\\n    string internal constant MARKET_ALREADY_LISTED = \\\"E403\\\";\\n    string internal constant IDENTICAL_VALUE = \\\"E404\\\";\\n    string internal constant ZERO_ADDRESS = \\\"E405\\\";\\n    string internal constant NEW_ORACLE_MISMATCH = \\\"E406\\\";\\n    string internal constant EC_INVALID_PROVIDER_REPRESENTATIVE = \\\"E407\\\";\\n    string internal constant EC_PROVIDER_CANT_BE_REPRESENTATIVE = \\\"E408\\\";\\n    string internal constant OR_ORACLE_ADDRESS_CANNOT_BE_ZERO = \\\"E409\\\";\\n    string internal constant OR_UNDERLYING_TOKENS_DECIMALS_SHOULD_BE_GREATER_THAN_ZERO = \\\"E410\\\";\\n    string internal constant OR_REPORTER_MULTIPLIER_SHOULD_BE_GREATER_THAN_ZERO = \\\"E411\\\";\\n    string internal constant CONTRACT_ALREADY_SET = \\\"E412\\\";\\n    string internal constant INVALID_TOKEN = \\\"E413\\\";\\n    string internal constant INVALID_PROTOCOL_INTEREST_FACTOR_MANTISSA = \\\"E414\\\";\\n    string internal constant INVALID_REDUCE_AMOUNT = \\\"E415\\\";\\n    string internal constant LIQUIDATION_FEE_MANTISSA_SHOULD_BE_GREATER_THAN_ZERO = \\\"E416\\\";\\n    string internal constant INVALID_UTILISATION_FACTOR_MANTISSA = \\\"E417\\\";\\n    string internal constant INVALID_MTOKENS_OR_BORROW_CAPS = \\\"E418\\\";\\n    string internal constant FL_PARAM_IS_TOO_LARGE = \\\"E419\\\";\\n    string internal constant MNT_INVALID_NONVOTING_PERIOD = \\\"E420\\\";\\n    string internal constant INPUT_ARRAY_LENGTHS_ARE_NOT_EQUAL = \\\"E421\\\";\\n    string internal constant EC_INVALID_BOOSTS = \\\"E422\\\";\\n    string internal constant EC_ACCOUNT_IS_ALREADY_LIQUIDITY_PROVIDER = \\\"E423\\\";\\n    string internal constant EC_ACCOUNT_HAS_NO_AGREEMENT = \\\"E424\\\";\\n    string internal constant OR_TIMESTAMP_THRESHOLD_SHOULD_BE_GREATER_THAN_ZERO = \\\"E425\\\";\\n    string internal constant OR_UNDERLYING_TOKENS_DECIMALS_TOO_BIG = \\\"E426\\\";\\n    string internal constant OR_REPORTER_MULTIPLIER_TOO_BIG = \\\"E427\\\";\\n    string internal constant SHOULD_HAVE_REVOCABLE_SCHEDULE = \\\"E428\\\";\\n    string internal constant MEMBER_NOT_IN_DELAY_LIST = \\\"E429\\\";\\n    string internal constant DELAY_LIST_LIMIT = \\\"E430\\\";\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/WhitelistInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface WhitelistInterface is IERC165 {\\n    function addMember(address _newAccount) external;\\n\\n    function removeMember(address _accountToRemove) external;\\n\\n    function turnOffWhitelistMode() external;\\n\\n    function setMaxMembers(uint256 _newThreshold) external;\\n\\n    function isWhitelisted(address _who) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/Oracles/PriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"../MToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /// @notice Get the underlying price of a mToken asset\\n    /// @param mToken The mToken to get the underlying price of\\n    /// @return The underlying asset price mantissa (scaled by 1e18).\\n    /// Zero means the price is unavailable.\\n    function getUnderlyingPrice(MToken mToken) external view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Buyback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Supervisor.sol\\\";\\nimport \\\"./Vesting.sol\\\";\\nimport \\\"./WhitelistInterface.sol\\\";\\n\\n/**\\n * @title Buyback\\n */\\ncontract Buyback is AccessControl {\\n    using SafeERC20 for Mnt;\\n\\n    /// @dev Value is the Keccak-256 hash of \\\"GATEKEEPER\\\"\\n    bytes32 public constant GATEKEEPER = bytes32(0x20162831d2f54c3e11eebafebfeda495d4c52c67b1708251179ec91fb76dd3b2);\\n    /// @dev Tole that's allowed to initiate buyback\\n    /// @dev Value is the Keccak-256 hash of \\\"DISTRIBUTOR\\\"\\n    bytes32 public constant DISTRIBUTOR = bytes32(0x85faced7bde13e1a7dad704b895f006e704f207617d68166b31ba2d79624862d);\\n\\n    uint256 internal constant SHARE_SCALE = 1e36;\\n    uint256 internal constant CURVE_SCALE = 1e18;\\n\\n    uint256 public constant SECS_PER_YEAR = 365 * 24 * 60 * 60;\\n\\n    /// buyback curve approximates discount rate of the e^-kt, k = 0.725, t = days/365 with the polynomial.\\n    /// polynomial function f(x) = A + (B * x) + (C * x^2) + (D * x^3) + (E * x^4)\\n    /// e^(-0.725*t) ~ 1 - 0.7120242*x + 0.2339357*x^2 - 0.04053335*x^3 + 0.00294642*x^4, x in range\\n    /// of 0 .. 4.44 years in seconds, with good precision\\n    /// e^-kt gives a steady discount rate of approximately 48% per year on the function range\\n    /// polynomial approximation gives similar results on most of the range and then smoothly reduces it\\n    /// to the constant value of about 4.75% (flatRate) starting from the kink point, i.e. when\\n    /// blockTime >= flatSeconds, result value equals the flatRate\\n    /// kink point (flatSeconds) calculated as df/dx = 0 for approximation polynomial\\n    /// A..E are as follows, B and D values are negative in the formula,\\n    /// substraction is used in the calculations instead\\n    /// result formula is f(x) = A + C*x^2 + E*x^4 - B*x - D * x^3\\n    uint256 internal constant A = 1e18;\\n    uint256 internal constant B = 0.7120242e18; // negative\\n    uint256 internal constant C = 0.2339357e18; // positive\\n    uint256 internal constant D = 0.04053335e18; // negative\\n    uint256 internal constant E = 0.00294642e18; // positive\\n\\n    /// @notice Seconds from protocol start when approximation function has minimum value\\n    ///     ~ 4.44 years of the perfect year, at this point df/dx == 0\\n    uint256 public constant flatSeconds = 140119200;\\n\\n    /// @notice Flat rate of the discounted MNTs after the kink point, equal to the percentage at flatSeconds time\\n    uint256 public constant flatRate = 47563813360365998;\\n\\n    /// @notice Timestamp from which the discount starts\\n    uint256 public startTimestamp;\\n\\n    Mnt public mnt;\\n    Supervisor public supervisor;\\n    Vesting public vesting;\\n\\n    /// @notice How much MNT claimed from the buyback\\n    /// @param participating Marks account as legally participating in Buyback\\n    /// @param weight Total weight of accounts' funds\\n    /// @param lastShareAccMantissa The cumulative buyback share which was claimed last time\\n    struct MemberData {\\n        bool participating;\\n        uint256 weight;\\n        uint256 lastShareAccMantissa;\\n    }\\n\\n    /// @param amount The amount of staked MNT\\n    /// @param discounted The amount of staked MNT with discount\\n    struct StakeData {\\n        uint256 amount;\\n        uint256 discounted;\\n    }\\n\\n    /// @notice Member info of accounts\\n    mapping(address => MemberData) public members;\\n    /// @notice Stake info of accounts\\n    mapping(address => StakeData) public stakes;\\n\\n    /// @notice The sum of all members' weights\\n    uint256 public weightSum;\\n    /// @notice The accumulated buyback share per 1 weight.\\n    uint256 public shareAccMantissa;\\n\\n    /// @notice is stake function paused\\n    bool public isStakePaused;\\n    /// @notice is unstake function paused\\n    bool public isUnstakePaused;\\n    /// @notice is leave function paused\\n    bool public isLeavePaused;\\n    /// @notice is restake function paused\\n    bool public isRestakePaused;\\n\\n    event ClaimReward(address who, uint256 amount);\\n    event Unstake(address who, uint256 amount);\\n    event NewBuyback(uint256 amount, uint256 share);\\n    event ParticipateBuyback(address who);\\n    event LeaveBuyback(address who, uint256 currentStaked);\\n    event BuybackActionPaused(string action, bool pauseState);\\n    event DistributorChanged(address oldDistributor, address newDistributor);\\n\\n    function initialize(\\n        Mnt mnt_,\\n        Supervisor supervisor_,\\n        Vesting vesting_,\\n        address admin_\\n    ) external {\\n        require(startTimestamp == 0, ErrorCodes.SECOND_INITIALIZATION);\\n        supervisor = supervisor_;\\n        startTimestamp = getTime();\\n        mnt = mnt_;\\n        vesting = vesting_;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(GATEKEEPER, admin_);\\n        _grantRole(DISTRIBUTOR, admin_);\\n    }\\n\\n    /// @param account_ The account address\\n    /// @return Does the account legally participating Buyback\\n    function isParticipating(address account_) public view returns (bool) {\\n        return members[account_].participating;\\n    }\\n\\n    /// @notice function to change stake enabled mode\\n    /// @param isPaused_ new state of stake allowance\\n    function setStakePaused(bool isPaused_) external onlyRole(GATEKEEPER) {\\n        emit BuybackActionPaused(\\\"Stake\\\", isPaused_);\\n        isStakePaused = isPaused_;\\n    }\\n\\n    /// @notice function to change unstake enabled mode\\n    /// @param isPaused_ new state of stake allowance\\n    function setUnstakePaused(bool isPaused_) external onlyRole(GATEKEEPER) {\\n        emit BuybackActionPaused(\\\"Unstake\\\", isPaused_);\\n        isUnstakePaused = isPaused_;\\n    }\\n\\n    /// @notice function to change unstake enabled mode\\n    /// @param isPaused_ new state of restake allowance\\n    function setRestakePaused(bool isPaused_) external onlyRole(GATEKEEPER) {\\n        emit BuybackActionPaused(\\\"Restake\\\", isPaused_);\\n        isRestakePaused = isPaused_;\\n    }\\n\\n    /// @notice function to change unstake enabled mode\\n    /// @param isPaused_ new state of _leave allowance\\n    function setLeavePaused(bool isPaused_) external onlyRole(GATEKEEPER) {\\n        emit BuybackActionPaused(\\\"Leave\\\", isPaused_);\\n        isLeavePaused = isPaused_;\\n    }\\n\\n    /// @notice How much weight address has\\n    /// @param who_ Buyback member address\\n    /// @return Weight\\n    function weight(address who_) external view returns (uint256) {\\n        return members[who_].weight;\\n    }\\n\\n    /// @notice Applies current discount rate to supplied amount\\n    /// @param amount_ The amount to discount\\n    /// @return Discounted amount in range [0; amount]\\n    function discountAmount(uint256 amount_) public view returns (uint256) {\\n        uint256 realPassed = getTime() - startTimestamp;\\n        return (amount_ * getPolynomialFactor(realPassed)) / CURVE_SCALE;\\n    }\\n\\n    /// @notice Calculates value of polynomial approximation of e^-kt, k = 0.725, t in seconds of a perfect year\\n    ///         function follows e^(-0.725*t) ~ 1 - 0.7120242*x + 0.2339357*x^2 - 0.04053335*x^3 + 0.00294642*x^4\\n    ///         up to the minimum and then continues with a flat rate\\n    /// @param secondsElapsed_ Seconds elapsed from the start block\\n    /// @return Discount rate in range [0..1] with precision mantissa 1e18\\n    function getPolynomialFactor(uint256 secondsElapsed_) public pure returns (uint256) {\\n        if (secondsElapsed_ >= flatSeconds) return flatRate;\\n\\n        uint256 x = (CURVE_SCALE * secondsElapsed_) / SECS_PER_YEAR;\\n        uint256 x2 = (x * x) / CURVE_SCALE;\\n        uint256 bX = (B * x) / CURVE_SCALE;\\n        uint256 cX = (C * x2) / CURVE_SCALE;\\n        uint256 dX = (((D * x2) / CURVE_SCALE) * x) / CURVE_SCALE;\\n        uint256 eX = (((E * x2) / CURVE_SCALE) * x2) / CURVE_SCALE;\\n\\n        return A + cX + eX - bX - dX;\\n    }\\n\\n    /// @notice Calculates current weight of an account.\\n    /// @dev Reads a parameter mntAccrued from the supervisor's storage. Make sure you update the MNT supply and\\n    ///      borrow indexes and distribute MNT tokens for `who`.\\n    /// @param who_ The account under study\\n    /// @return Weight\\n    function calcWeight(address who_) public view returns (uint256) {\\n        return supervisor.mntAccrued(who_) + vesting.releasableAmount(who_) + stakes[who_].discounted;\\n    }\\n\\n    /// @notice Stakes the specified amount of MNT and transfers them to this contract.\\n    ///         Sender's weight would increase by the discounted amount of staked funds.\\n    /// @notice This contract should be approved to transfer MNT from sender account\\n    /// @param amount_ The amount of MNT to stake\\n    function stake(uint256 amount_) external {\\n        WhitelistInterface whitelist = supervisor.whitelist();\\n        require(address(whitelist) == address(0) || whitelist.isWhitelisted(msg.sender), ErrorCodes.WHITELISTED_ONLY);\\n        require(isParticipating(msg.sender), ErrorCodes.NOT_PARTICIPATING_IN_BUYBACK);\\n        require(!isStakePaused, ErrorCodes.OPERATION_PAUSED);\\n\\n        StakeData storage staked = stakes[msg.sender];\\n        staked.amount += amount_;\\n        staked.discounted += discountAmount(amount_);\\n\\n        _restakeFor(msg.sender);\\n        mnt.safeTransferFrom(msg.sender, address(this), amount_);\\n    }\\n\\n    /// @notice Unstakes the specified amount of MNT and transfers them back to sender if he participates\\n    ///         in the Buyback system, otherwise just transfers MNT tokens to the sender.\\n    ///         Sender's weight would decrease by discounted amount of unstaked funds, but resulting weight\\n    ///         would not be greater than staked amount left. If `amount_ == MaxUint256` unstakes all staked tokens.\\n    /// @param amount_ The amount of MNT to unstake\\n    function unstake(uint256 amount_) external {\\n        require(amount_ > 0, ErrorCodes.INCORRECT_AMOUNT);\\n        require(!isUnstakePaused, ErrorCodes.OPERATION_PAUSED);\\n\\n        StakeData storage staked = stakes[msg.sender];\\n\\n        // Check if the sender is a member of the Buyback system\\n        bool isSenderParticipating = isParticipating(msg.sender);\\n\\n        if (amount_ == type(uint256).max || amount_ == staked.amount) {\\n            amount_ = staked.amount;\\n            delete stakes[msg.sender];\\n        } else {\\n            require(amount_ < staked.amount, ErrorCodes.INSUFFICIENT_STAKE);\\n            staked.amount -= amount_;\\n            // Recalculate the discount if the sender participates in the Buyback system\\n            if (isSenderParticipating) {\\n                uint256 newDiscounted = staked.discounted - discountAmount(amount_);\\n                /// Stake amount can be greater if discount is high leading to small discounted delta\\n                staked.discounted = Math.min(newDiscounted, staked.amount);\\n            }\\n        }\\n\\n        emit Unstake(msg.sender, amount_);\\n\\n        // Restake for the sender if he participates in the Buyback system\\n        if (isSenderParticipating) _restakeFor(msg.sender);\\n\\n        mnt.safeTransfer(msg.sender, amount_);\\n    }\\n\\n    /// @notice Stakes buyback reward and updates the sender's weight\\n    function restake() external {\\n        _restakeFor(msg.sender);\\n    }\\n\\n    /// @notice Stakes buyback reward and updates the specified account's weight.\\n    /// @param who_ Address to claim for\\n    function restakeFor(address who_) external {\\n        _restakeFor(who_);\\n    }\\n\\n    /// @notice Stakes buyback reward and updates the specified account's weight. Also updates MNT supply and\\n    ///         borrow indices and distributes for \\\"who\\\" MNT tokens\\n    /// @param who_ Address to claim for\\n    function restakeForWithDistribution(address who_) external {\\n        // slither-disable-next-line reentrancy-events,reentrancy-benign\\n        supervisor.distributeAllMnt(who_);\\n        _restakeFor(who_);\\n    }\\n\\n    function _restakeFor(address who_) internal {\\n        require(!isRestakePaused, ErrorCodes.OPERATION_PAUSED);\\n\\n        if (!isParticipating(who_)) return;\\n        MemberData storage member = members[who_];\\n        _claimReward(who_, member);\\n\\n        uint256 oldWeight = member.weight;\\n        uint256 newWeight = calcWeight(who_);\\n\\n        if (newWeight != oldWeight) {\\n            member.weight = newWeight;\\n            weightSum = weightSum + newWeight - oldWeight;\\n\\n            mnt.updateVotesForAccount(who_, uint224(newWeight), uint224(weightSum));\\n        }\\n    }\\n\\n    function _claimReward(address who_, MemberData storage member_) internal {\\n        if (member_.lastShareAccMantissa >= shareAccMantissa) return;\\n        if (member_.weight == 0) {\\n            // member weight 0 means account is not participating in buyback yet, we need\\n            // to initialize it first. There is nothing to claim so function simply returns\\n            member_.lastShareAccMantissa = shareAccMantissa;\\n            return;\\n        }\\n\\n        uint256 shareDiffMantissa = shareAccMantissa - member_.lastShareAccMantissa;\\n        uint256 rewardMnt = (member_.weight * shareDiffMantissa) / SHARE_SCALE;\\n        if (rewardMnt <= 0) return;\\n\\n        stakes[who_].amount += rewardMnt;\\n        stakes[who_].discounted += rewardMnt;\\n        member_.lastShareAccMantissa = shareAccMantissa;\\n\\n        emit ClaimReward(who_, rewardMnt);\\n    }\\n\\n    /// @notice Does a buyback using the specified amount of MNT from sender's account\\n    /// @param amount_ The amount of MNT to take and distribute as buyback\\n    function buyback(uint256 amount_) external onlyRole(DISTRIBUTOR) {\\n        require(amount_ > 0, ErrorCodes.NOTHING_TO_DISTRIBUTE);\\n        require(weightSum > 0, ErrorCodes.NOT_ENOUGH_PARTICIPATING_ACCOUNTS);\\n\\n        uint256 shareMantissa = (amount_ * SHARE_SCALE) / weightSum;\\n        shareAccMantissa = shareAccMantissa + shareMantissa;\\n\\n        emit NewBuyback(amount_, shareMantissa);\\n\\n        mnt.safeTransferFrom(msg.sender, address(this), amount_);\\n    }\\n\\n    /// @notice Make account participating in the buyback. If the sender has a staked balance, then\\n    /// the weight will be equal to the discounted amount of staked funds.\\n    function participate() external {\\n        require(!isParticipating(msg.sender), ErrorCodes.ALREADY_PARTICIPATING_IN_BUYBACK);\\n\\n        members[msg.sender].participating = true;\\n        emit ParticipateBuyback(msg.sender);\\n\\n        StakeData storage staked = stakes[msg.sender];\\n        if (staked.amount > 0) staked.discounted = discountAmount(staked.amount);\\n\\n        _restakeFor(msg.sender);\\n    }\\n\\n    ///@notice Make accounts participate in buyback before its start.\\n    /// @param accounts_ Address to make participate in buyback.\\n    function participateOnBehalf(address[] memory accounts_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(shareAccMantissa == 0, ErrorCodes.BUYBACK_DRIPS_ALREADY_HAPPENED);\\n        for (uint256 i = 0; i < accounts_.length; i++) {\\n            members[accounts_[i]].participating = true;\\n        }\\n    }\\n\\n    /// @notice Leave buyback participation, claim any MNTs rewarded by the buyback and withdraw all staked MNTs\\n    function leave() external {\\n        _leave(msg.sender);\\n    }\\n\\n    /// @notice Leave buyback participation on behalf, claim any MNTs rewarded by the buyback and\\n    /// withdraw all staked MNTs.\\n    /// @dev Admin function to leave on behalf.\\n    /// Can only be called if (timestamp > participantLastVoteTimestamp + maxNonVotingPeriod).\\n    /// @param participant_ Address to leave for\\n    function leaveOnBehalf(address participant_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(!mnt.isParticipantActive(participant_), ErrorCodes.BB_ACCOUNT_RECENTLY_VOTED);\\n        _leave(participant_);\\n    }\\n\\n    /// @notice Leave buyback participation, set discounted amount for the `_participant` to zero.\\n    function _leave(address participant_) internal {\\n        require(isParticipating(participant_), ErrorCodes.NOT_PARTICIPATING_IN_BUYBACK);\\n        require(!isLeavePaused, ErrorCodes.OPERATION_PAUSED);\\n\\n        _claimReward(participant_, members[participant_]);\\n\\n        weightSum -= members[participant_].weight;\\n        delete members[participant_];\\n        stakes[participant_].discounted = 0;\\n\\n        emit LeaveBuyback(participant_, stakes[participant_].amount);\\n\\n        mnt.updateVotesForAccount(msg.sender, uint224(0), uint224(weightSum));\\n    }\\n\\n    /// @return timestamp\\n    // slither-disable-next-line dead-code\\n    function getTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BDSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./ErrorCodes.sol\\\";\\nimport \\\"./Supervisor.sol\\\";\\nimport \\\"./Buyback.sol\\\";\\nimport \\\"./Governance/Mnt.sol\\\";\\n\\ncontract BDSystem is AccessControl {\\n    uint256 internal constant EXP_SCALE = 1e18;\\n    using SafeERC20 for Mnt;\\n\\n    struct Agreement {\\n        /// Emission boost for liquidity provider\\n        uint256 liquidityProviderBoost;\\n        /// Percentage of the total emissions earned by the representative\\n        uint256 representativeBonus;\\n        /// The number of the block in which agreement ends.\\n        uint32 endBlock;\\n        /// Business Development Representative\\n        address representative;\\n    }\\n    /// Linking the liquidity provider with the agreement\\n    mapping(address => Agreement) public providerToAgreement;\\n    /// Counts liquidity providers of the representative\\n    mapping(address => uint256) public representativesProviderCounter;\\n\\n    Supervisor public supervisor;\\n\\n    event AgreementAdded(\\n        address indexed liquidityProvider,\\n        address indexed representative,\\n        uint256 representativeBonus,\\n        uint256 liquidityProviderBoost,\\n        uint32 startBlock,\\n        uint32 endBlock\\n    );\\n    event AgreementEnded(\\n        address indexed liquidityProvider,\\n        address indexed representative,\\n        uint256 representativeBonus,\\n        uint256 liquidityProviderBoost,\\n        uint32 endBlock\\n    );\\n\\n    constructor(address admin_, Supervisor supervisor_) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        supervisor = supervisor_;\\n    }\\n\\n    /*** Admin functions ***/\\n\\n    /**\\n     * @notice Creates a new agreement between liquidity provider and representative\\n     * @dev Admin function to create a new agreement\\n     * @param liquidityProvider_ address of the liquidity provider\\n     * @param representative_ address of the liquidity provider representative.\\n     * @param representativeBonus_ percentage of the emission boost for representative\\n     * @param liquidityProviderBoost_ percentage of the boost for liquidity provider\\n     * @param endBlock_ The number of the first block when agreement will not be in effect\\n     */\\n    function createAgreement(\\n        address liquidityProvider_,\\n        address representative_,\\n        uint256 representativeBonus_,\\n        uint256 liquidityProviderBoost_,\\n        uint32 endBlock_\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        // (1 + liquidityProviderBoost) * (1 + representativeBonus) <= 150%\\n        require(\\n            (EXP_SCALE + liquidityProviderBoost_) * (EXP_SCALE + representativeBonus_) <= 1.5e36,\\n            ErrorCodes.EC_INVALID_BOOSTS\\n        );\\n        // one account at one time can be a liquidity provider once,\\n        require(!isAccountLiquidityProvider(liquidityProvider_), ErrorCodes.EC_ACCOUNT_IS_ALREADY_LIQUIDITY_PROVIDER);\\n        // one account can't be a liquidity provider and a representative at the same time\\n        require(\\n            !isAccountRepresentative(liquidityProvider_) && !isAccountLiquidityProvider(representative_),\\n            ErrorCodes.EC_PROVIDER_CANT_BE_REPRESENTATIVE\\n        );\\n\\n        // we are distribution MNT tokens for liquidity provider\\n        // slither-disable-next-line reentrancy-no-eth,reentrancy-benign,reentrancy-events\\n        supervisor.distributeAllMnt(liquidityProvider_);\\n\\n        // we are creating agreement between liquidity provider and representative\\n        providerToAgreement[liquidityProvider_] = Agreement({\\n            representative: representative_,\\n            liquidityProviderBoost: liquidityProviderBoost_,\\n            representativeBonus: representativeBonus_,\\n            endBlock: endBlock_\\n        });\\n        representativesProviderCounter[representative_]++;\\n\\n        emit AgreementAdded(\\n            liquidityProvider_,\\n            representative_,\\n            representativeBonus_,\\n            liquidityProviderBoost_,\\n            uint32(_getBlockNumber()),\\n            endBlock_\\n        );\\n    }\\n\\n    /**\\n     * @notice Removes a agreement between liquidity provider and representative\\n     * @dev Admin function to remove a agreement\\n     * @param liquidityProvider_ address of the liquidity provider\\n     * @param representative_ address of the representative.\\n     */\\n    function removeAgreement(address liquidityProvider_, address representative_)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        Agreement storage agreement = providerToAgreement[liquidityProvider_];\\n        require(agreement.representative == representative_, ErrorCodes.EC_INVALID_PROVIDER_REPRESENTATIVE);\\n\\n        emit AgreementEnded(\\n            liquidityProvider_,\\n            representative_,\\n            agreement.representativeBonus,\\n            agreement.liquidityProviderBoost,\\n            agreement.endBlock\\n        );\\n\\n        // We call emission system for liquidity provider, so liquidity provider and his representative will accrue\\n        // MNT tokens with their emission boosts\\n        // slither-disable-next-line reentrancy-no-eth,reentrancy-benign\\n        supervisor.distributeAllMnt(liquidityProvider_);\\n\\n        // We remove agreement between liquidity provider and representative\\n        delete providerToAgreement[liquidityProvider_];\\n        representativesProviderCounter[representative_]--;\\n    }\\n\\n    /*** Helper special functions ***/\\n\\n    /**\\n     * @notice Calculates boosts for liquidity provider and representative.\\n     * @param liquidityProvider_ address of the liquidity provider,\\n     * @param deltaIndex_ difference between the current MNT index and the index of the last update for\\n     *        the liquidity provider\\n     */\\n    function calculateEmissionBoost(address liquidityProvider_, uint256 deltaIndex_)\\n        public\\n        view\\n        returns (\\n            address representative,\\n            uint256 representativeBonus,\\n            uint256 providerBoostedIndex\\n        )\\n    {\\n        // get a representative for the account_ and his representative bonus\\n        Agreement storage agreement = providerToAgreement[liquidityProvider_];\\n        representative = agreement.representative;\\n\\n        // if account isn't liquidity provider we return from method.\\n        if (representative == address(0)) return (address(0), 0, 0);\\n\\n        representativeBonus = agreement.representativeBonus;\\n        providerBoostedIndex = (deltaIndex_ * agreement.liquidityProviderBoost) / EXP_SCALE;\\n    }\\n\\n    /**\\n     * @notice checks if `account_` is liquidity provider.\\n     * @dev account_ is liquidity provider if he has agreement.\\n     * @param account_ address to check\\n     * @return `true` if `account_` is liquidity provider, otherwise returns false\\n     */\\n    function isAccountLiquidityProvider(address account_) public view returns (bool) {\\n        return providerToAgreement[account_].representative != address(0);\\n    }\\n\\n    /**\\n     * @notice checks if `account_` is business development representative.\\n     * @dev account_ is business development representative if he has liquidity providers.\\n     * @param account_ address to check\\n     * @return `true` if `account_` is business development representative, otherwise returns false\\n     */\\n    function isAccountRepresentative(address account_) public view returns (bool) {\\n        return representativesProviderCounter[account_] > 0;\\n    }\\n\\n    /**\\n     * @notice checks if agreement is expired\\n     * @dev reverts if the `account_` is not a valid liquidity provider\\n     * @param account_ address of the liquidity provider\\n     * @return `true` if agreement is expired, otherwise returns false\\n     */\\n    function isAgreementExpired(address account_) external view returns (bool) {\\n        require(isAccountLiquidityProvider(account_), ErrorCodes.EC_ACCOUNT_HAS_NO_AGREEMENT);\\n        return providerToAgreement[account_].endBlock <= _getBlockNumber();\\n    }\\n\\n    /// @dev Function to simply retrieve block number\\n    ///      This exists mainly for inheriting test contracts to stub this result.\\n    // slither-disable-next-line dead-code\\n    function _getBlockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Liquidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\nimport \\\"./Oracles/PriceOracle.sol\\\";\\nimport \\\"./MToken.sol\\\";\\nimport \\\"./Supervisor.sol\\\";\\nimport \\\"./DeadDrop.sol\\\";\\n\\n/**\\n * This contract provides the liquidation functionality.\\n */\\n\\ncontract Liquidation is AccessControl, ReentrancyGuard, Multicall {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant EXP_SCALE = 1e18;\\n\\n    /**\\n     * @notice The maximum allowable value of a healthy factor after liquidation, scaled by 1e18\\n     */\\n    uint256 public healthyFactorLimit = 1.2e18; // 120%\\n\\n    /**\\n     * @notice Maximum sum in USD for internal liquidation. Collateral for loans that are less than this parameter will\\n     * be counted as protocol interest, scaled by 1e18\\n     */\\n    uint256 public insignificantLoanThreshold = 100e18; // 100$\\n\\n    /// @notice Value is the Keccak-256 hash of \\\"TRUSTED_LIQUIDATOR\\\"\\n    /// @dev Role that's allowed to liquidate in Auto mode\\n    bytes32 public constant TRUSTED_LIQUIDATOR =\\n        bytes32(0xf81d27a41879d78d5568e0bc2989cb321b89b84d8e1b49895ee98604626c0218);\\n    /// @notice Value is the Keccak-256 hash of \\\"MANUAL_LIQUIDATOR\\\"\\n    /// @dev Role that's allowed to liquidate in Manual mode.\\n    ///      Each MANUAL_LIQUIDATOR address has to be appended to TRUSTED_LIQUIDATOR role too.\\n    bytes32 public constant MANUAL_LIQUIDATOR =\\n        bytes32(0x53402487d33e65b38c49f6f89bd08cbec4ff7c074cddd2357722b7917cd13f1e);\\n    /// @dev Value is the Keccak-256 hash of \\\"TIMELOCK\\\"\\n    bytes32 public constant TIMELOCK = bytes32(0xaefebe170cbaff0af052a32795af0e1b8afff9850f946ad2869be14f35534371);\\n\\n    /**\\n     * @notice Minterest deadDrop contract\\n     */\\n    DeadDrop public deadDrop;\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Minterest supervisor contract\\n     */\\n    Supervisor public supervisor;\\n\\n    event HealthyFactorLimitChanged(uint256 oldValue, uint256 newValue);\\n    event NewSupervisor(Supervisor oldSupervisor, Supervisor newSupervisor);\\n    event NewPriceOracle(PriceOracle oldOracle, PriceOracle newOracle);\\n    event NewDeadDrop(DeadDrop oldDeadDrop, DeadDrop newDeadDrop);\\n    event NewInsignificantLoanThreshold(uint256 oldValue, uint256 newValue);\\n    event ReliableLiquidation(\\n        bool isManualLiquidation,\\n        bool isDebtHealthy,\\n        address liquidator,\\n        address borrower,\\n        MToken[] marketAddresses,\\n        uint256[] seizeIndexes,\\n        uint256[] debtRates\\n    );\\n\\n    /**\\n     * @notice Construct a Liquidation contract\\n     * @param deadDrop_ Minterest deadDrop address\\n     * @param liquidators_ Array of addresses of liquidators\\n     * @param supervisor_ The address of the Supervisor contract\\n     * @param admin_ The address of the admin\\n     */\\n    constructor(\\n        address[] memory liquidators_,\\n        DeadDrop deadDrop_,\\n        Supervisor supervisor_,\\n        address admin_\\n    ) {\\n        require(\\n            supervisor_.supportsInterface(type(SupervisorInterface).interfaceId),\\n            ErrorCodes.CONTRACT_DOES_NOT_SUPPORT_INTERFACE\\n        );\\n        require(address(deadDrop_) != address(0), ErrorCodes.ZERO_ADDRESS);\\n\\n        supervisor = supervisor_;\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(TRUSTED_LIQUIDATOR, admin_);\\n        _grantRole(MANUAL_LIQUIDATOR, admin_);\\n        _grantRole(TIMELOCK, admin_);\\n        oracle = supervisor_.oracle();\\n        deadDrop = deadDrop_;\\n\\n        for (uint256 i = 0; i < liquidators_.length; i++) {\\n            _grantRole(TRUSTED_LIQUIDATOR, liquidators_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Local accountState for avoiding stack-depth limits in calculating liquidation amounts.\\n     */\\n    struct AccountLiquidationAmounts {\\n        uint256 accountTotalSupplyUsd;\\n        uint256 accountTotalCollateralUsd;\\n        uint256 accountPresumedTotalSeizeUsd;\\n        uint256 accountTotalBorrowUsd;\\n        uint256[] repayAmounts;\\n        uint256[] seizeAmounts;\\n    }\\n\\n    /**\\n     * @notice Liquidate insolvent debt position\\n     * @param borrower_ Account which is being liquidated\\n     * @param seizeIndexes_ An array with market indexes that will be used as collateral.\\n     *        Each element corresponds to the market index in the accountAssets array\\n     * @param debtRates_  An array of debt redemption rates for each debt markets (scaled by 1e18).\\n     */\\n    //slither-disable-next-line reentrancy-benign\\n    function liquidateUnsafeLoan(\\n        address borrower_,\\n        uint256[] memory seizeIndexes_,\\n        uint256[] memory debtRates_\\n    ) external onlyRole(TRUSTED_LIQUIDATOR) nonReentrant {\\n        AccountLiquidationAmounts memory accountState;\\n\\n        MToken[] memory accountAssets = supervisor.getAccountAssets(borrower_);\\n        verifyExternalData(accountAssets.length, seizeIndexes_, debtRates_);\\n\\n        //slither-disable-next-line reentrancy-events\\n        accrue(accountAssets, seizeIndexes_, debtRates_);\\n        accountState = calculateLiquidationAmounts(borrower_, accountAssets, seizeIndexes_, debtRates_);\\n\\n        require(\\n            accountState.accountTotalCollateralUsd < accountState.accountTotalBorrowUsd,\\n            ErrorCodes.INSUFFICIENT_SHORTFALL\\n        );\\n\\n        bool isManualLiquidation = hasRole(MANUAL_LIQUIDATOR, msg.sender);\\n        bool isDebtHealthy = accountState.accountPresumedTotalSeizeUsd <= accountState.accountTotalSupplyUsd;\\n\\n        seize(\\n            borrower_,\\n            accountAssets,\\n            accountState.seizeAmounts,\\n            accountState.accountTotalBorrowUsd <= insignificantLoanThreshold,\\n            isManualLiquidation\\n        );\\n        repay(borrower_, accountAssets, accountState.repayAmounts, isManualLiquidation);\\n\\n        if (isDebtHealthy) {\\n            require(approveBorrowerHealthyFactor(borrower_, accountAssets), ErrorCodes.HEALTHY_FACTOR_NOT_IN_RANGE);\\n        }\\n\\n        emit ReliableLiquidation(\\n            isManualLiquidation,\\n            isDebtHealthy,\\n            msg.sender,\\n            borrower_,\\n            accountAssets,\\n            seizeIndexes_,\\n            debtRates_\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks if input data meets requirements\\n     * @param accountAssetsLength The length of borrower's accountAssets array\\n     * @param seizeIndexes_ An array with market indexes that will be used as collateral.\\n     *        Each element corresponds to the market index in the accountAssets array\\n     * @param debtRates_ An array of debt redemption rates for each debt markets (scaled by 1e18).\\n     * @dev Indexes for arrays accountAssets && debtRates match each other\\n     */\\n    function verifyExternalData(\\n        uint256 accountAssetsLength,\\n        uint256[] memory seizeIndexes_,\\n        uint256[] memory debtRates_\\n    ) internal pure {\\n        uint256 debtRatesLength = debtRates_.length;\\n        uint256 seizeIndexesLength = seizeIndexes_.length;\\n\\n        require(accountAssetsLength != 0 && debtRatesLength == accountAssetsLength, ErrorCodes.LQ_INVALID_DRR_ARRAY);\\n        require(\\n            seizeIndexesLength != 0 && seizeIndexesLength <= accountAssetsLength,\\n            ErrorCodes.LQ_INVALID_SEIZE_ARRAY\\n        );\\n\\n        // Check all DRR are <= 100%\\n        for (uint256 i = 0; i < debtRatesLength; i++) {\\n            require(debtRates_[i] <= EXP_SCALE, ErrorCodes.LQ_INVALID_DEBT_REDEMPTION_RATE);\\n        }\\n\\n        // Check all seizeIndexes are <= to (accountAssetsLength - 1)\\n        for (uint256 i = 0; i < seizeIndexesLength; i++) {\\n            require(seizeIndexes_[i] <= (accountAssetsLength - 1), ErrorCodes.LQ_INVALID_SEIZE_INDEX);\\n            // Check seizeIndexes array does not contain duplicates\\n            for (uint256 j = i + 1; j < seizeIndexesLength; j++) {\\n                require(seizeIndexes_[i] != seizeIndexes_[j], ErrorCodes.LQ_DUPLICATE_SEIZE_INDEX);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrues interest for all required borrower's markets\\n     * @dev Accrue is required if market is used as borrow (debtRate > 0)\\n     *      or collateral (seizeIndex arr contains market index)\\n     *      The caller must ensure that the lengths of arrays 'accountAssets' and 'debtRates' are the same,\\n     *      array 'seizeIndexes' does not contain duplicates and none of the indexes exceeds the value\\n     *      (accountAssets.length - 1).\\n     * @param accountAssets An array with addresses of markets where the debtor is in\\n     * @param seizeIndexes_ An array with market indexes that will be used as collateral\\n     *        Each element corresponds to the market index in the accountAssets array\\n     * @param debtRates_ An array of debt redemption rates for each debt markets (scaled by 1e18)\\n     */\\n    function accrue(\\n        MToken[] memory accountAssets,\\n        uint256[] memory seizeIndexes_,\\n        uint256[] memory debtRates_\\n    ) public {\\n        for (uint256 i = 0; i < accountAssets.length; i++) {\\n            //slither-disable-next-line calls-loop\\n            if (debtRates_[i] > 0 || includes(i, seizeIndexes_)) accountAssets[i].accrueInterest();\\n        }\\n    }\\n\\n    /**\\n     * @notice Determines whether an array includes a certain value among its entries\\n     * @param index_ The value to search for\\n     * @param seizeIndexes_ An array with market indexes that will be used as collateral.\\n     * @return bool Returning true or false as appropriate.\\n     */\\n    function includes(uint256 index_, uint256[] memory seizeIndexes_) internal pure returns (bool) {\\n        for (uint256 i = 0; i < seizeIndexes_.length; i++) {\\n            if (seizeIndexes_[i] == index_) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Local marketParams for avoiding stack-depth limits in calculating liquidation amounts.\\n     */\\n    struct MarketParams {\\n        uint256 supplyWrap;\\n        uint256 borrowUnderlying;\\n        uint256 exchangeRateMantissa;\\n        uint256 liquidationFeeMantissa;\\n        uint256 utilisationFactorMantissa;\\n    }\\n\\n    /**\\n     * @notice For each market calculates the liquidation amounts based on borrower's state.\\n     * @param account_ The address of the borrower\\n     * @param marketAddresses An array with addresses of markets where the debtor is in\\n     * @param seizeIndexes_ An array with market indexes that will be used as collateral\\n     *        Each element corresponds to the market index in the accountAssets array\\n     * @param debtRates_ An array of debt redemption rates for each debt markets (scaled by 1e18)\\n     * @return accountState Struct that contains all balance parameters\\n     *         All arrays calculated in underlying assets, all total values calculated in USD.\\n     *         (the array indexes match each other)\\n     */\\n    function calculateLiquidationAmounts(\\n        address account_,\\n        MToken[] memory marketAddresses,\\n        uint256[] memory seizeIndexes_,\\n        uint256[] memory debtRates_\\n    ) public view virtual returns (AccountLiquidationAmounts memory accountState) {\\n        uint256 actualSeizeUsd = 0;\\n        uint256 accountMarketsLen = marketAddresses.length;\\n        uint256[] memory supplyAmountsUsd = new uint256[](accountMarketsLen);\\n        uint256[] memory oraclePrices = new uint256[](accountMarketsLen);\\n\\n        accountState.repayAmounts = new uint256[](accountMarketsLen);\\n        accountState.seizeAmounts = new uint256[](accountMarketsLen);\\n\\n        // For each market the borrower is in calculate liquidation amounts\\n        for (uint256 i = 0; i < accountMarketsLen; i++) {\\n            MToken market = marketAddresses[i];\\n\\n            oraclePrices[i] = oracle.getUnderlyingPrice(market);\\n            require(oraclePrices[i] > 0, ErrorCodes.INVALID_PRICE);\\n\\n            //slither-disable-next-line uninitialized-local\\n            MarketParams memory vars;\\n            (vars.supplyWrap, vars.borrowUnderlying, vars.exchangeRateMantissa) = market.getAccountSnapshot(account_);\\n            (vars.liquidationFeeMantissa, vars.utilisationFactorMantissa) = supervisor.getMarketData(market);\\n\\n            if (vars.borrowUnderlying > 0) {\\n                // accountTotalBorrowUsd += borrowUnderlying * oraclePrice\\n                uint256 accountBorrowUsd = (vars.borrowUnderlying * oraclePrices[i]) / EXP_SCALE;\\n                accountState.accountTotalBorrowUsd += accountBorrowUsd;\\n\\n                // accountPresumedTotalSeizeUsd parameter showing what the totalSeize would be under the condition of\\n                // complete liquidation.\\n                // accountPresumedTotalSeizeUsd += borrowUnderlying * oraclePrice * (1 + liquidationFee)\\n                uint256 fullSeizeUsd = (accountBorrowUsd * (vars.liquidationFeeMantissa + EXP_SCALE)) / EXP_SCALE;\\n                accountState.accountPresumedTotalSeizeUsd += fullSeizeUsd;\\n\\n                // repayAmountUnderlying = borrowUnderlying * redemptionRate\\n                // actualSeizeUsd += borrowUnderlying * oraclePrice * (1 + liquidationFee) * redemptionRate\\n                if (debtRates_[i] > 0) {\\n                    accountState.repayAmounts[i] = (vars.borrowUnderlying * debtRates_[i]) / EXP_SCALE;\\n                    actualSeizeUsd += (fullSeizeUsd * debtRates_[i]) / EXP_SCALE;\\n                }\\n            }\\n\\n            if (vars.supplyWrap > 0) {\\n                // supplyAmount = supplyWrap * exchangeRate\\n                uint256 supplyAmount = (vars.supplyWrap * vars.exchangeRateMantissa) / EXP_SCALE;\\n\\n                // accountTotalSupplyUsd += supplyWrap * exchangeRate * oraclePrice\\n                uint256 accountSupplyUsd = (supplyAmount * oraclePrices[i]) / EXP_SCALE;\\n                accountState.accountTotalSupplyUsd += accountSupplyUsd;\\n                supplyAmountsUsd[i] = accountSupplyUsd;\\n\\n                // accountTotalCollateralUsd += accountSupplyUSD * utilisationFactor\\n                accountState.accountTotalCollateralUsd +=\\n                    (accountSupplyUsd * vars.utilisationFactorMantissa) /\\n                    EXP_SCALE;\\n            }\\n        }\\n\\n        if (actualSeizeUsd > 0) {\\n            for (uint256 i = 0; i < seizeIndexes_.length; i++) {\\n                uint256 marketIndex = seizeIndexes_[i];\\n                uint256 marketSupply = supplyAmountsUsd[marketIndex];\\n\\n                if (marketSupply <= actualSeizeUsd) {\\n                    accountState.seizeAmounts[marketIndex] = type(uint256).max;\\n                    actualSeizeUsd -= marketSupply;\\n                } else {\\n                    accountState.seizeAmounts[marketIndex] = (actualSeizeUsd * EXP_SCALE) / oraclePrices[marketIndex];\\n                    actualSeizeUsd = 0;\\n                    break;\\n                }\\n            }\\n            require(actualSeizeUsd == 0, ErrorCodes.LQ_INVALID_SEIZE_DISTRIBUTION);\\n        }\\n        return (accountState);\\n    }\\n\\n    /**\\n     * @dev Burns collateral tokens at the borrower's address, transfer underlying assets\\n     *      to the deadDrop or ManualLiquidator address, if loan is not insignificant, otherwise, all account's\\n     *      collateral is credited to the protocolInterest. Process all borrower's markets.\\n     * @param borrower_ The account having collateral seized\\n     * @param marketAddresses_ Array of markets the borrower is in\\n     * @param seizeUnderlyingAmounts_ Array of seize amounts in underlying assets\\n     * @param isLoanInsignificant_ Marker for insignificant loan whose collateral must be credited to the\\n     *        protocolInterest\\n     * @param isManualLiquidation_ Marker for manual liquidation process.\\n     */\\n    function seize(\\n        address borrower_,\\n        MToken[] memory marketAddresses_,\\n        uint256[] memory seizeUnderlyingAmounts_,\\n        bool isLoanInsignificant_,\\n        bool isManualLiquidation_\\n    ) internal {\\n        for (uint256 i = 0; i < marketAddresses_.length; i++) {\\n            uint256 seizeUnderlyingAmount = seizeUnderlyingAmounts_[i];\\n            if (seizeUnderlyingAmount > 0) {\\n                address receiver = isManualLiquidation_ ? msg.sender : address(deadDrop);\\n\\n                MToken seizeMarket = marketAddresses_[i];\\n                seizeMarket.autoLiquidationSeize(borrower_, seizeUnderlyingAmount, isLoanInsignificant_, receiver);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Liquidator repays a borrow belonging to borrower. Process all borrower's markets.\\n     * @param borrower_ The account with the debt being payed off\\n     * @param marketAddresses_ Array of markets the borrower is in\\n     * @param repayAmounts_ Array of repay amounts in underlying assets\\n     * @param isManualLiquidation_ Marker for manual liquidation process.\\n     * Note: The calling code must be sure that the oracle price for all processed markets is greater than zero.\\n     */\\n    function repay(\\n        address borrower_,\\n        MToken[] memory marketAddresses_,\\n        uint256[] memory repayAmounts_,\\n        bool isManualLiquidation_\\n    ) internal {\\n        for (uint256 i = 0; i < marketAddresses_.length; i++) {\\n            uint256 repayAmount = repayAmounts_[i];\\n            if (repayAmount > 0) {\\n                MToken repayMarket = marketAddresses_[i];\\n\\n                if (isManualLiquidation_) {\\n                    repayMarket.addProtocolInterestBehalf(msg.sender, repayAmount);\\n                }\\n\\n                repayMarket.autoLiquidationRepayBorrow(borrower_, repayAmount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve that current healthy factor satisfies the condition:\\n     *      currentHealthyFactor <= healthyFactorLimit\\n     * @param borrower_ The account with the debt being payed off\\n     * @param marketAddresses_ Array of markets the borrower is in\\n     * @return Whether or not the current account healthy factor is correct\\n     */\\n    function approveBorrowerHealthyFactor(address borrower_, MToken[] memory marketAddresses_)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 accountTotalCollateral = 0;\\n        uint256 accountTotalBorrow = 0;\\n\\n        uint256 supplyWrap;\\n        uint256 borrowUnderlying;\\n        uint256 exchangeRateMantissa;\\n        uint256 utilisationFactorMantissa;\\n\\n        for (uint256 i = 0; i < marketAddresses_.length; i++) {\\n            MToken market = marketAddresses_[i];\\n            uint256 oraclePriceMantissa = oracle.getUnderlyingPrice(market);\\n            require(oraclePriceMantissa > 0, ErrorCodes.INVALID_PRICE);\\n\\n            (supplyWrap, borrowUnderlying, exchangeRateMantissa) = market.getAccountSnapshot(borrower_);\\n\\n            if (borrowUnderlying > 0) {\\n                accountTotalBorrow += ((borrowUnderlying * oraclePriceMantissa) / EXP_SCALE);\\n            }\\n            if (supplyWrap > 0) {\\n                (, utilisationFactorMantissa) = supervisor.getMarketData(market);\\n                uint256 supplyAmountUsd = ((((supplyWrap * exchangeRateMantissa) / EXP_SCALE) * oraclePriceMantissa) /\\n                    EXP_SCALE);\\n                accountTotalCollateral += (supplyAmountUsd * utilisationFactorMantissa) / EXP_SCALE;\\n            }\\n        }\\n        // currentHealthyFactor = accountTotalCollateral / accountTotalBorrow\\n        uint256 currentHealthyFactor = (accountTotalCollateral * EXP_SCALE) / accountTotalBorrow;\\n\\n        return (currentHealthyFactor <= healthyFactorLimit);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Sets a new value for healthyFactorLimit\\n     */\\n    function setHealthyFactorLimit(uint256 newValue_) external onlyRole(TIMELOCK) {\\n        uint256 oldValue = healthyFactorLimit;\\n\\n        require(newValue_ != oldValue, ErrorCodes.IDENTICAL_VALUE);\\n        healthyFactorLimit = newValue_;\\n\\n        emit HealthyFactorLimitChanged(oldValue, newValue_);\\n    }\\n\\n    /**\\n     * @notice Sets a new supervisor for the market\\n     */\\n    function setSupervisor(Supervisor newSupervisor_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            newSupervisor_.supportsInterface(type(SupervisorInterface).interfaceId),\\n            ErrorCodes.CONTRACT_DOES_NOT_SUPPORT_INTERFACE\\n        );\\n\\n        Supervisor oldSupervisor = supervisor;\\n        supervisor = newSupervisor_;\\n\\n        emit NewSupervisor(oldSupervisor, newSupervisor_);\\n    }\\n\\n    /**\\n     * @notice Sets a new price oracle for the liquidation contract\\n     */\\n    function setPriceOracle(PriceOracle newOracle_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newOracle_ == supervisor.oracle(), ErrorCodes.NEW_ORACLE_MISMATCH);\\n\\n        PriceOracle oldOracle = oracle;\\n        oracle = newOracle_;\\n\\n        emit NewPriceOracle(oldOracle, newOracle_);\\n    }\\n\\n    /**\\n     * @notice Sets a new minterest deadDrop\\n     */\\n    function setDeadDrop(DeadDrop newDeadDrop_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(address(newDeadDrop_) != address(0), ErrorCodes.ZERO_ADDRESS);\\n        DeadDrop oldDeadDrop = deadDrop;\\n        deadDrop = newDeadDrop_;\\n\\n        emit NewDeadDrop(oldDeadDrop, newDeadDrop_);\\n    }\\n\\n    /**\\n     * @notice Sets a new insignificantLoanThreshold\\n     */\\n    function setInsignificantLoanThreshold(uint256 newValue_) external onlyRole(TIMELOCK) {\\n        uint256 oldValue = insignificantLoanThreshold;\\n        insignificantLoanThreshold = newValue_;\\n\\n        emit NewInsignificantLoanThreshold(oldValue, newValue_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./Governance/Mnt.sol\\\";\\nimport \\\"./Buyback.sol\\\";\\nimport \\\"./ErrorCodes.sol\\\";\\n\\n/**\\n * @title Vesting contract provides unlocking of tokens on a schedule. It uses the *graded vesting* way,\\n * which unlocks a specific amount of balance every period of time, until all balance unlocked.\\n *\\n * Vesting Schedule.\\n *\\n * The schedule of a vesting is described by data structure `VestingSchedule`: starting from the start timestamp\\n * throughout the duration, the entire amount of totalAmount tokens will be unlocked.\\n *\\n * Interface.\\n *\\n * - `withdraw` - withdraw released tokens.\\n * - `createVestingSchedule` - allows admin to create a new vesting schedule for an account.\\n * - `revokeVestingSchedule` - allows admin to revoke the vesting schedule. Tokens already vested\\n * transfer to the account, the rest are returned to the vesting contract.\\n */\\n\\ncontract Vesting is AccessControl {\\n    /**\\n     * @notice The structure is used in the contract constructor for create vesting schedules\\n     * during contract deploying.\\n     * @param totalAmount the number of tokens to be vested during the vesting duration.\\n     * @param target the address that will receive tokens according to schedule parameters.\\n     * @param start the timestamp in minutes at which vesting starts. Must not be equal to zero, as it is used to\\n     * check for the existence of a vesting schedule.\\n     * @param duration duration in minutes of the period in which the tokens will vest.\\n     * @param revocable whether the vesting is revocable or not.\\n     */\\n    struct ScheduleData {\\n        uint256 totalAmount;\\n        address target;\\n        uint32 start;\\n        uint32 duration;\\n        bool revocable;\\n    }\\n\\n    /**\\n     * @notice Vesting schedules of an account.\\n     * @param totalAmount the number of tokens to be vested during the vesting duration.\\n     * @param released the amount of the token released. It means that the account has called withdraw() and received\\n     * @param start the timestamp in minutes at which vesting starts. Must not be equal to zero, as it is used to\\n     * check for the existence of a vesting schedule.\\n     * @param duration duration in minutes of the period in which the tokens will vest.\\n     * `released amount` of tokens to his address.\\n     * @param revocable whether the vesting is revocable or not.\\n     */\\n    struct VestingSchedule {\\n        uint256 totalAmount;\\n        uint256 released;\\n        uint32 start;\\n        uint32 duration;\\n        bool revocable;\\n    }\\n\\n    /**\\n     * @notice The address of the Minterest governance token.\\n     */\\n    IERC20 public mnt;\\n\\n    /**\\n     * @notice Vesting schedule of an account.\\n     */\\n    mapping(address => VestingSchedule) public schedules;\\n\\n    /**\\n     * @notice The number of MNT tokens that are currently not allocated in the vesting. This number of tokens\\n     * is free and can used to create vesting schedule for accounts. When the contract are deployed,\\n     * all tokens (49,967,630 MNT tokens) are vested according to the account's vesting schedules\\n     * and this value is equal to zero.\\n     */\\n    uint256 public freeAllocation = 49_967_630 ether;\\n\\n    /**\\n     * @notice The address of the Minterest buyback.\\n     */\\n    Buyback public buyback;\\n\\n    /// @notice Whether or not the account is in the delay list\\n    mapping(address => bool) public delayList;\\n\\n    /// @notice is stake function paused\\n    bool public isWithdrawPaused;\\n\\n    /// @notice The right part is the keccak-256 hash of variable name\\n    bytes32 public constant GATEKEEPER = bytes32(0x20162831d2f54c3e11eebafebfeda495d4c52c67b1708251179ec91fb76dd3b2);\\n\\n    /// @notice An event that's emitted when a new vesting schedule for a account is created.\\n    event VestingScheduleAdded(address target, VestingSchedule schedule);\\n\\n    /// @notice An event that's emitted when a vesting schedule revoked.\\n    event VestingScheduleRevoked(address target, uint256 unreleased, uint256 locked);\\n\\n    /// @notice An event that's emitted when the account Withdrawn the released tokens.\\n    event Withdrawn(address, uint256 withdrawn);\\n\\n    /// @notice Emitted when buyback is changed\\n    event NewBuyback(Buyback oldBuyback, Buyback newBuyback);\\n\\n    /// @notice Emitted when an action is paused\\n    event VestingActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an account is added to the delay list\\n    event AddedToDelayList(address account);\\n\\n    /// @notice Emitted when an account is removed from the delay list\\n    event RemovedFromDelayList(address account);\\n\\n    /**\\n     * @notice Construct a vesting contract.\\n     * @param _admin The address of the Admin\\n     * @param _mnt The address of the MNT contract.\\n     */\\n    constructor(address _admin, IERC20 _mnt) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(GATEKEEPER, _admin);\\n        mnt = _mnt;\\n    }\\n\\n    function setBuyback(Buyback buyback_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Buyback oldBuyback = buyback;\\n        require(oldBuyback != buyback_, ErrorCodes.IDENTICAL_VALUE);\\n        buyback = buyback_;\\n        emit NewBuyback(oldBuyback, buyback_);\\n    }\\n\\n    /**\\n     * @notice function to change withdraw enabled mode\\n     * @param isPaused_ new state of stake allowance\\n     */\\n    function setWithdrawPaused(bool isPaused_) external onlyRole(GATEKEEPER) {\\n        emit VestingActionPaused(\\\"Withdraw\\\", isPaused_);\\n        isWithdrawPaused = isPaused_;\\n    }\\n\\n    /**\\n     * @notice Withdraw the specified number of tokens. For a successful transaction, the requirement\\n     * `amount_ > 0 && amount_ <= unreleased` must be met.\\n     * If `amount_ == MaxUint256` withdraw all unreleased tokens.\\n     * @param amount_ The number of tokens to withdraw.\\n     */\\n    function withdraw(uint256 amount_) external {\\n        require(!isWithdrawPaused, ErrorCodes.OPERATION_PAUSED);\\n        require(!delayList[msg.sender], ErrorCodes.DELAY_LIST_LIMIT);\\n\\n        VestingSchedule storage schedule = schedules[msg.sender];\\n\\n        require(schedule.start != 0, ErrorCodes.NO_VESTING_SCHEDULES);\\n\\n        uint256 unreleased = releasableAmount(msg.sender);\\n        if (amount_ == type(uint256).max) {\\n            amount_ = unreleased;\\n        }\\n        require(amount_ > 0 && amount_ <= unreleased, ErrorCodes.INSUFFICIENT_UNRELEASED_TOKENS);\\n\\n        uint256 mntRemaining = mnt.balanceOf(address(this));\\n        require(amount_ <= mntRemaining, ErrorCodes.INSUFFICIENT_TOKEN_IN_VESTING_CONTRACT);\\n\\n        schedule.released = schedule.released + amount_;\\n        // Remove the vesting schedule if all tokens were released to the account.\\n        if (schedule.released == schedule.totalAmount) {\\n            delete schedules[msg.sender];\\n        }\\n\\n        emit Withdrawn(msg.sender, amount_);\\n        if (buyback != Buyback(address(0))) buyback.restakeFor(msg.sender);\\n\\n        require(mnt.transfer(msg.sender, amount_));\\n    }\\n\\n    /// @notice Allows the admin to create a new vesting schedules.\\n    /// @param schedulesData an array of vesting schedules that will be created.\\n    function createVestingScheduleBatch(ScheduleData[] memory schedulesData) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 length = schedulesData.length;\\n\\n        uint256 mntRemaining = mnt.balanceOf(address(this));\\n        for (uint256 i = 0; i < length; i++) {\\n            ScheduleData memory schedule = schedulesData[i];\\n\\n            ensureValidVestingSchedule(schedule.target, schedule.start, schedule.totalAmount);\\n            require(schedules[schedule.target].start == 0, ErrorCodes.VESTING_SCHEDULE_ALREADY_EXISTS);\\n\\n            require(\\n                freeAllocation >= schedule.totalAmount && mntRemaining >= freeAllocation,\\n                ErrorCodes.INSUFFICIENT_TOKENS_TO_CREATE_SCHEDULE\\n            );\\n\\n            schedules[schedule.target] = VestingSchedule({\\n                totalAmount: schedule.totalAmount,\\n                released: 0,\\n                start: schedule.start,\\n                duration: schedule.duration,\\n                revocable: schedule.revocable\\n            });\\n\\n            //slither-disable-next-line costly-loop\\n            freeAllocation -= schedule.totalAmount;\\n\\n            emit VestingScheduleAdded(schedule.target, schedules[schedule.target]);\\n            //slither-disable-next-line calls-loop\\n            if (buyback != Buyback(address(0))) buyback.restakeFor(schedule.target);\\n        }\\n    }\\n\\n    /// @notice Allows the admin to revoke the vesting schedule. Tokens already vested\\n    ///  transfer to the account, the rest are returned to the vesting contract.\\n    /// @param target_ the address from which the vesting schedule is revoked.\\n    function revokeVestingSchedule(address target_) external onlyRole(GATEKEEPER) {\\n        require(schedules[target_].start != 0, ErrorCodes.NO_VESTING_SCHEDULE);\\n        require(schedules[target_].revocable, ErrorCodes.SCHEDULE_IS_IRREVOCABLE);\\n\\n        uint256 locked = lockedAmount(target_);\\n        uint256 unreleased = releasableAmount(target_);\\n        uint256 mntRemaining = mnt.balanceOf(address(this));\\n\\n        require(mntRemaining >= unreleased, ErrorCodes.INSUFFICIENT_TOKENS_FOR_RELEASE);\\n\\n        freeAllocation += locked;\\n        delete schedules[target_];\\n        delete delayList[target_];\\n\\n        emit VestingScheduleRevoked(target_, unreleased, locked);\\n        if (buyback != Buyback(address(0))) buyback.restakeFor(target_);\\n\\n        require(mnt.transfer(target_, unreleased));\\n    }\\n\\n    /// @notice Calculates the end of the vesting.\\n    /// @param who_ account address for which the parameter is returned.\\n    /// @return the end of the vesting.\\n    function endOfVesting(address who_) external view returns (uint256) {\\n        VestingSchedule storage schedule = schedules[who_];\\n        return uint256(schedule.start) + uint256(schedule.duration);\\n    }\\n\\n    /// @notice Calculates locked amount for a given `time`.\\n    /// @param who_ account address for which the parameter is returned.\\n    /// @return locked amount for a given `time`.\\n    function lockedAmount(address who_) public view returns (uint256) {\\n        // lockedAmount = (end - time) * totalAmount / duration;\\n        // if the parameter `duration` is zero, it means that the allocated tokens are not locked for address `who`.\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 _now = getTime();\\n        VestingSchedule storage schedule = schedules[who_];\\n\\n        uint256 _start = uint256(schedule.start);\\n        uint256 _duration = uint256(schedule.duration);\\n        uint256 _end = _start + _duration;\\n        if (schedule.duration == 0 || _now > _end) {\\n            return 0;\\n        }\\n        if (_now < _start) {\\n            return schedule.totalAmount;\\n        }\\n        return ((_end - _now) * schedule.totalAmount) / _duration;\\n    }\\n\\n    /// @notice Calculates the amount that has already vested.\\n    /// @param who_ account address for which the parameter is returned.\\n    /// @return the amount that has already vested.\\n    function vestedAmount(address who_) public view returns (uint256) {\\n        return schedules[who_].totalAmount - lockedAmount(who_);\\n    }\\n\\n    /// @notice Calculates the amount that has already vested but hasn't been released yet.\\n    /// @param who_ account address for which the parameter is returned.\\n    /// @return the amount that has already vested but hasn't been released yet.\\n    function releasableAmount(address who_) public view returns (uint256) {\\n        return vestedAmount(who_) - schedules[who_].released;\\n    }\\n\\n    /// @notice Checks if the Vesting schedule is correct.\\n    /// @param target_ the address on which the vesting schedule is created.\\n    /// @param start_ the time (as Unix time) at which point vesting starts.\\n    /// @param amount_ the balance for which the vesting schedule is created.\\n    function ensureValidVestingSchedule(\\n        address target_,\\n        uint32 start_,\\n        uint256 amount_\\n    ) public pure {\\n        require(target_ != address(0), ErrorCodes.TARGET_ADDRESS_CANNOT_BE_ZERO);\\n        require(amount_ > 0, ErrorCodes.MNT_AMOUNT_IS_ZERO);\\n        // Star should not be zero, because this parameter is used to check for the existence of a schedule.\\n        require(start_ > 0, ErrorCodes.SCHEDULE_START_IS_ZERO);\\n    }\\n\\n    /// @notice Add an account with revocable schedule to the delay list\\n    /// @param who_ The account that is being added to the delay list\\n    function addToDelayList(address who_) external onlyRole(GATEKEEPER) {\\n        require(schedules[who_].revocable, ErrorCodes.SHOULD_HAVE_REVOCABLE_SCHEDULE);\\n        emit AddedToDelayList(who_);\\n        delayList[who_] = true;\\n    }\\n\\n    /// @notice Remove an account from the delay list\\n    /// @param who_ The account that is being removed from the delay list\\n    function removeFromDelayList(address who_) external onlyRole(GATEKEEPER) {\\n        require(delayList[who_], ErrorCodes.MEMBER_NOT_IN_DELAY_LIST);\\n        emit RemovedFromDelayList(who_);\\n        delete delayList[who_];\\n    }\\n\\n    /// @return timestamp truncated to minutes\\n    //slither-disable-next-line dead-code\\n    function getTime() internal view virtual returns (uint256) {\\n        return block.timestamp / 1 minutes;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Governance/MntVotes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./IERC20Votes.sol\\\";\\nimport \\\"./MntErrorCodes.sol\\\";\\nimport \\\"./MntGovernor.sol\\\";\\n\\n/**\\n * @dev Extension of MNT token based on OpenZeppelin ERC20Votes Compound-like voting v4.2 with reduced features.\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * Token balance does not account for voting power, instead Buyback contract is responsible for updating the\\n * voting power during the stake and unstake actions performed by the account. This extension requires accounts to\\n * delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n */\\nabstract contract MntVotes is IERC20Votes, ERC20Permit, AccessControl {\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] internal _totalSupplyCheckpoints;\\n\\n    /// @dev Will be used instead of token balances for the accounts\\n    mapping(address => uint224) private _votingBalance;\\n\\n    /// @dev Buyback will push this value after each account weight update, so we don't have to pull it\\n    /// when new proposal acquired and total supply checkpoint should be added to the list\\n    /// this will cost some gas every call but allows to keep total votes logic in the buyback\\n    uint224 private _totalVotesCurrent;\\n\\n    address private buyback;\\n\\n    MntGovernor public governor;\\n\\n    uint256 public constant SECS_PER_YEAR = 365 * 24 * 60 * 60;\\n\\n    /// @notice If the account has not voted within this time, admin can call the method `leaveOnBehalf()` for him from\\n    /// Minterest buyback system\\n    uint256 public maxNonVotingPeriod = SECS_PER_YEAR;\\n\\n    /// @notice timestamp of last vote for accounts\\n    mapping(address => uint256) public lastVotingTimestamp;\\n\\n    /// @notice timestamp of the last delegation of votes for the account\\n    mapping(address => uint256) public lastDelegatingTimestamp;\\n\\n    /// @notice Emitted when buyback is set\\n    event NewBuyback(address oldBuyback, address newBuyback);\\n\\n    /// @notice Emitted when governor is set\\n    event NewGovernor(MntGovernor oldGovernor, MntGovernor newGovernor);\\n\\n    event MaxNonVotingPeriodChanged(uint256 oldValue, uint256 newValue);\\n\\n    /// @notice Emitted when total votes updated\\n    event TotalVotesUpdated(uint224 oldTotalVotes, uint224 newTotalVotes);\\n\\n    /// @notice Emitted when account votes updated\\n    event VotesUpdated(address account, uint224 oldVotingPower, uint224 newVotingPower);\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, MntErrorCodes.MV_BLOCK_NOT_YET_MINED);\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all discounted MNTs\\n     * staked to buyback contract in order to get Buyback rewards and to participate in the voting process.\\n     * Requirements:\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, MntErrorCodes.MV_BLOCK_NOT_YET_MINED);\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // Each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        //solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= expiry, MntErrorCodes.MV_SIGNATURE_EXPIRED);\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), MntErrorCodes.MV_INVALID_NONCE);\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Mint does not change voting power.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n    }\\n\\n    /**\\n     * @dev We don't move voting power when tokens are transferred.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = _votingBalance[delegator];\\n        _delegates[delegator] = delegatee;\\n\\n        if (lastVotingTimestamp[currentDelegate] > lastDelegatingTimestamp[delegator])\\n            lastVotingTimestamp[delegator] = lastVotingTimestamp[currentDelegate];\\n        lastDelegatingTimestamp[delegator] = block.timestamp;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                uint256 oldWeight;\\n                uint256 newWeight;\\n                (oldWeight, newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                uint256 oldWeight;\\n                uint256 newWeight;\\n                (oldWeight, newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        // Don't create new checkpoint if votes change in the same block\\n        // slither-disable-next-line incorrect-equality\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    // slither-disable-next-line dead-code\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    // slither-disable-next-line dead-code\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    // end of OpenZeppelin implementation; MNT-specific code listed below\\n\\n    /// @dev Throws if called by any account other than the buyback.\\n    modifier buybackOnly() {\\n        require(buyback != address(0) && buyback == msg.sender, MntErrorCodes.UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the governor.\\n    modifier governorOnly() {\\n        require(governor != MntGovernor(payable(0)) && address(governor) == msg.sender, MntErrorCodes.UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /// @notice Set buyback implementation that is responsible for voting power calculations\\n    function setBuyback(address newBuyback) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newBuyback != address(0), MntErrorCodes.ZERO_ADDRESS);\\n        address oldBuyback = buyback;\\n        buyback = newBuyback;\\n        emit NewBuyback(oldBuyback, newBuyback);\\n    }\\n\\n    /// @notice Set governor implementation that is responsible for voting\\n    function setGovernor(MntGovernor newGovernor_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(address(newGovernor_) != address(0), MntErrorCodes.ZERO_ADDRESS);\\n        MntGovernor oldGovernor = governor;\\n        require(oldGovernor == MntGovernor(payable(0)), MntErrorCodes.SECOND_INITIALIZATION);\\n        governor = newGovernor_;\\n        emit NewGovernor(oldGovernor, newGovernor_);\\n    }\\n\\n    /// @notice Update votes for account and total voting volume on the current block\\n    function updateVotesForAccount(\\n        address account,\\n        uint224 balance,\\n        uint224 volume\\n    ) external buybackOnly {\\n        require(account != address(0), MntErrorCodes.TARGET_ADDRESS_CANNOT_BE_ZERO);\\n\\n        // update total votes volume\\n        _totalVotesCurrent = volume;\\n\\n        // update voting power\\n        uint224 oldBalance = _votingBalance[account];\\n        if (oldBalance == balance) {\\n            // don't create new point and return immediately\\n            return;\\n        }\\n\\n        if (oldBalance < balance) {\\n            // increase voting balance of account and voting power of its delegatee\\n            uint224 delta = balance - oldBalance;\\n            _votingBalance[account] = balance;\\n            // \\\"mint\\\" some voting power\\n            _moveVotingPower(address(0), delegates(account), delta);\\n        } else {\\n            // decrease voting balance of account and voting power of its delegatee\\n            uint224 delta = oldBalance - balance;\\n            _votingBalance[account] = balance;\\n            // \\\"burn\\\" some voting power\\n            _moveVotingPower(delegates(account), address(0), delta);\\n        }\\n\\n        emit VotesUpdated(account, oldBalance, _votingBalance[account]);\\n    }\\n\\n    /// @notice Create checkpoint by voting volume on the current block\\n    function updateTotalVotes() external governorOnly {\\n        if (_totalSupplyCheckpoints.length > 0) {\\n            uint224 oldVotes = _totalSupplyCheckpoints[_totalSupplyCheckpoints.length - 1].votes;\\n            if (oldVotes > _totalVotesCurrent) {\\n                _writeCheckpoint(_totalSupplyCheckpoints, _subtract, oldVotes - _totalVotesCurrent);\\n            } else {\\n                _writeCheckpoint(_totalSupplyCheckpoints, _add, _totalVotesCurrent - oldVotes);\\n            }\\n\\n            emit TotalVotesUpdated(oldVotes, _totalSupplyCheckpoints[_totalSupplyCheckpoints.length - 1].votes);\\n        } else {\\n            _writeCheckpoint(_totalSupplyCheckpoints, _add, _totalVotesCurrent);\\n\\n            emit TotalVotesUpdated(0, _totalSupplyCheckpoints[_totalSupplyCheckpoints.length - 1].votes);\\n        }\\n    }\\n\\n    /// @notice Checks user activity for the last `maxNonVotingPeriod` blocks\\n    /// @param account_ The address of the account\\n    /// @return returns true if the user voted or his delegatee voted for the last maxNonVotingPeriod blocks,\\n    /// otherwise returns false\\n    function isParticipantActive(address account_) public view virtual returns (bool) {\\n        return lastActivityTimestamp(account_) > block.timestamp - maxNonVotingPeriod;\\n    }\\n\\n    /// @notice Gets the latest voting timestamp for account.\\n    /// @dev If the user delegated his votes, then it also checks the timestamp of the last vote of the delegatee\\n    /// @param account_ The address of the account\\n    /// @return latest voting timestamp for account\\n    function lastActivityTimestamp(address account_) public view virtual returns (uint256) {\\n        address delegatee = _delegates[account_];\\n        uint256 lastVoteAccount = lastVotingTimestamp[account_];\\n\\n        // if the votes are not delegated to anyone, then we return the timestamp of the last vote of the account\\n        if (delegatee == address(0)) return lastVoteAccount;\\n        uint256 lastVoteDelegatee = lastVotingTimestamp[delegatee];\\n\\n        // if delegatee voted after delegation, then returns the timestamp for the delegatee\\n        if (lastVoteDelegatee > lastDelegatingTimestamp[account_]) {\\n            return lastVoteDelegatee;\\n        }\\n\\n        return lastVoteAccount;\\n    }\\n\\n    /**\\n     * @notice Sets the maxNonVotingPeriod\\n     * @dev Admin function to set maxNonVotingPeriod\\n     * @param newPeriod_ The new maxNonVotingPeriod (in sec). Must be greater than 90 days and lower than 2 years.\\n     */\\n    function setMaxNonVotingPeriod(uint256 newPeriod_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newPeriod_ >= 90 days && newPeriod_ <= 2 * SECS_PER_YEAR, MntErrorCodes.MNT_INVALID_NONVOTING_PERIOD);\\n\\n        uint256 oldPeriod = maxNonVotingPeriod;\\n        require(newPeriod_ != oldPeriod, MntErrorCodes.IDENTICAL_VALUE);\\n\\n        emit MaxNonVotingPeriodChanged(oldPeriod, newPeriod_);\\n        maxNonVotingPeriod = newPeriod_;\\n    }\\n\\n    /**\\n     * @notice function to change lastVotingTimestamp\\n     * @param account_ The address of the account\\n     * @param timestamp_ New timestamp of account user last voting\\n     */\\n    function setLastVotingTimestamp(address account_, uint256 timestamp_) external governorOnly {\\n        lastVotingTimestamp[account_] = timestamp_;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Governance/IERC20Votes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Votes is IERC20 {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    function delegates(address owner) external view returns (address);\\n\\n    function checkpoints(address account, uint32 pos) external view returns (Checkpoint memory);\\n\\n    function numCheckpoints(address account) external view returns (uint32);\\n\\n    function getVotes(address account) external view returns (uint256);\\n\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    function delegate(address delegatee) external;\\n\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Governance/MntErrorCodes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nlibrary MntErrorCodes {\\n    string internal constant UNAUTHORIZED = \\\"E102\\\";\\n    string internal constant TARGET_ADDRESS_CANNOT_BE_ZERO = \\\"E225\\\";\\n    string internal constant MV_BLOCK_NOT_YET_MINED = \\\"E262\\\";\\n    string internal constant MV_SIGNATURE_EXPIRED = \\\"E263\\\";\\n    string internal constant MV_INVALID_NONCE = \\\"E264\\\";\\n    string internal constant SECOND_INITIALIZATION = \\\"E402\\\";\\n    string internal constant IDENTICAL_VALUE = \\\"E404\\\";\\n    string internal constant ZERO_ADDRESS = \\\"E405\\\";\\n    string internal constant MNT_INVALID_NONVOTING_PERIOD = \\\"E420\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/Governance/MntGovernor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./MntVotes.sol\\\";\\nimport \\\"./MntErrorCodes.sol\\\";\\n\\ncontract MntGovernor is\\n    Initializable,\\n    GovernorUpgradeable,\\n    GovernorSettingsUpgradeable,\\n    GovernorCountingSimpleUpgradeable,\\n    GovernorVotesUpgradeable,\\n    GovernorVotesQuorumFractionUpgradeable,\\n    GovernorTimelockControlUpgradeable\\n{\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n\\n    constructor() initializer {} /* solhint-disable-line no-empty-blocks */\\n\\n    function initialize(ERC20VotesUpgradeable _token, TimelockControllerUpgradeable _timelock) external initializer {\\n        __Governor_init(\\\"MntGovernor\\\");\\n        __GovernorSettings_init(\\n            720, // Set voting delay between the proposal and voting period to 3 hours (in blocks, 15 second per block)\\n            40320, // Set voting period to 1 week of (in blocks, 15 second per block)\\n            100e18 // Set minimal voting power required to create the proposal to 100 MNT\\n        );\\n        __GovernorCountingSimple_init();\\n        __GovernorVotes_init(_token);\\n\\n        // Set % of quorum required for a proposal to pass. Usually it is about 4% of total token supply\\n        // available. We use Buyback weights as voting power, it is available only for accounts that\\n        // committed to perform voting actions by participating in Buyback, so quorum is going to be\\n        // much higher. We set 30% votes of the participants that vote For or Abstain for proposal to be applied\\n        __GovernorVotesQuorumFraction_init(30);\\n        __GovernorTimelockControl_init(_timelock);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a proposer role defined in timelock contract.\\n     */\\n    modifier onlyProposer() {\\n        AccessControlUpgradeable ac = AccessControlUpgradeable(timelock());\\n        require(ac.hasRole(PROPOSER_ROLE, msg.sender), MntErrorCodes.UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a proposer role defined in timelock contract. In\\n     * addition to checking the sender's role, `address(0)` 's role is also considered. Granting a role\\n     * to `address(0)` is equivalent to enabling this role for everyone.\\n     */\\n    modifier onlyProposerOrOpenRole() {\\n        AccessControlUpgradeable ac = AccessControlUpgradeable(timelock());\\n        require(\\n            ac.hasRole(PROPOSER_ROLE, msg.sender) || ac.hasRole(PROPOSER_ROLE, address(0)),\\n            MntErrorCodes.UNAUTHORIZED\\n        );\\n        _;\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    /// @notice Delay (in number of blocks) since the proposal is submitted until voting power is fixed and voting\\n    /// starts. This can be used to enforce a delay after a proposal is published for users to buy tokens,\\n    /// or delegate their votes.\\n    function votingDelay() public view override(IGovernorUpgradeable, GovernorSettingsUpgradeable) returns (uint256) {\\n        return super.votingDelay();\\n    }\\n\\n    /// @notice Delay (in number of blocks) since the proposal starts until voting ends.\\n    function votingPeriod() public view override(IGovernorUpgradeable, GovernorSettingsUpgradeable) returns (uint256) {\\n        return super.votingPeriod();\\n    }\\n\\n    /// @notice Quorum required for a proposal to be successful. This function includes a blockNumber argument so\\n    /// the quorum can adapt through time\\n    function quorum(uint256 blockNumber)\\n        public\\n        view\\n        override(IGovernorUpgradeable, GovernorVotesQuorumFractionUpgradeable)\\n        returns (uint256)\\n    {\\n        return super.quorum(blockNumber);\\n    }\\n\\n    /// @notice Voting power of an account at a specific blockNumber.\\n    function getVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        override(IGovernorUpgradeable, GovernorVotesUpgradeable)\\n        returns (uint256)\\n    {\\n        return super.getVotes(account, blockNumber);\\n    }\\n\\n    /// @notice Current state of a proposal, see the { ProposalState } for details.\\n    function state(uint256 proposalId)\\n        public\\n        view\\n        override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\\n        returns (ProposalState)\\n    {\\n        return super.state(proposalId);\\n    }\\n\\n    /// @notice Create a new proposal. Vote start votingDelay blocks after the proposal is created and ends\\n    /// votingPeriod blocks after the voting starts. Emits a ProposalCreated event.\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public override(GovernorUpgradeable, IGovernorUpgradeable) onlyProposerOrOpenRole returns (uint256) {\\n        MntVotes(address(token)).updateTotalVotes();\\n        return super.propose(targets, values, calldatas, description);\\n    }\\n\\n    /// @notice The number of votes required in order for a voter to become a proposer\\n    function proposalThreshold()\\n        public\\n        view\\n        override(GovernorUpgradeable, GovernorSettingsUpgradeable)\\n        returns (uint256)\\n    {\\n        return super.proposalThreshold();\\n    }\\n\\n    //slither-disable-next-line dead-code\\n    function _execute(\\n        uint256,\\n        address[] memory,\\n        uint256[] memory,\\n        bytes[] memory,\\n        bytes32\\n    ) internal pure override(GovernorUpgradeable, GovernorTimelockControlUpgradeable) {\\n        revert();\\n    }\\n\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external onlyProposer returns (uint256) {\\n        return _cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal override(GovernorUpgradeable, GovernorTimelockControlUpgradeable) returns (uint256) {\\n        return super._cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _executor()\\n        internal\\n        view\\n        override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\\n        returns (address)\\n    {\\n        return super._executor();\\n    }\\n\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal override returns (uint256) {\\n        // We write the timestamp of the last vote of the account\\n        MntVotes mntVotes = MntVotes(address(token));\\n        mntVotes.setLastVotingTimestamp(account, block.timestamp);\\n        return super._castVote(proposalId, account, support, reason);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/Governor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/TimersUpgradeable.sol\\\";\\nimport \\\"./IGovernorUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Core of the governance system, designed to be extended though various modules.\\n *\\n * This contract is abstract and requires several function to be implemented in various modules:\\n *\\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\\n * - A voting module must implement {getVotes}\\n * - Additionanly, the {votingPeriod} must also be implemented\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, EIP712Upgradeable, IGovernorUpgradeable {\\n    using SafeCastUpgradeable for uint256;\\n    using TimersUpgradeable for TimersUpgradeable.BlockNumber;\\n\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n\\n    struct ProposalCore {\\n        TimersUpgradeable.BlockNumber voteStart;\\n        TimersUpgradeable.BlockNumber voteEnd;\\n        bool executed;\\n        bool canceled;\\n    }\\n\\n    string private _name;\\n\\n    mapping(uint256 => ProposalCore) private _proposals;\\n\\n    /**\\n     * @dev Restrict access to governor executing address. Some module might override the _executor function to make\\n     * sure this modifier is consistant with the execution model.\\n     */\\n    modifier onlyGovernance() {\\n        require(_msgSender() == _executor(), \\\"Governor: onlyGovernance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the value for {name} and {version}\\n     */\\n    function __Governor_init(string memory name_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __EIP712_init_unchained(name_, version());\\n        __IGovernor_init_unchained();\\n        __Governor_init_unchained(name_);\\n    }\\n\\n    function __Governor_init_unchained(string memory name_) internal onlyInitializing {\\n        _name = name_;\\n    }\\n\\n    /**\\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\\n     */\\n    receive() external payable virtual {\\n        require(_executor() == address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IGovernorUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-version}.\\n     */\\n    function version() public view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hashProposal}.\\n     *\\n     * The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array\\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\\n     * advance, before the proposal is submitted.\\n     *\\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\\n     * accross multiple networks. This also means that in order to execute the same operation twice (on the same\\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-state}.\\n     */\\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\\n        ProposalCore memory proposal = _proposals[proposalId];\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        } else if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        } else if (proposal.voteStart.getDeadline() >= block.number) {\\n            return ProposalState.Pending;\\n        } else if (proposal.voteEnd.getDeadline() >= block.number) {\\n            return ProposalState.Active;\\n        } else if (proposal.voteEnd.isExpired()) {\\n            return\\n                _quorumReached(proposalId) && _voteSucceeded(proposalId)\\n                    ? ProposalState.Succeeded\\n                    : ProposalState.Defeated;\\n        } else {\\n            revert(\\\"Governor: unknown proposal id\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalSnapshot}.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart.getDeadline();\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalDeadline}.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd.getDeadline();\\n    }\\n\\n    /**\\n     * @dev Part of the Governor Bravo's interface: _\\\"The number of votes required in order for a voter to become a proposer\\\"_.\\n     */\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Amount of votes already cast passes the threshold limit.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Is the proposal successful or not.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Register a vote with a given support and voting weight.\\n     *\\n     * Note: Support is generic and can represent various things depending on the voting system used.\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual;\\n\\n    /**\\n     * @dev See {IGovernor-propose}.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override returns (uint256) {\\n        require(\\n            getVotes(msg.sender, block.number - 1) >= proposalThreshold(),\\n            \\\"GovernorCompatibilityBravo: proposer votes below proposal threshold\\\"\\n        );\\n\\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\\n\\n        require(targets.length == values.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length == calldatas.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length > 0, \\\"Governor: empty proposal\\\");\\n\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(proposal.voteStart.isUnset(), \\\"Governor: proposal already exists\\\");\\n\\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\\n        uint64 deadline = snapshot + votingPeriod().toUint64();\\n\\n        proposal.voteStart.setDeadline(snapshot);\\n        proposal.voteEnd.setDeadline(deadline);\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            _msgSender(),\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            snapshot,\\n            deadline,\\n            description\\n        );\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-execute}.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n        require(\\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\\n            \\\"Governor: proposal not successful\\\"\\n        );\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Internal execution mechanism. Can be overriden to implement different execution mechanism\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        string memory errorMessage = \\\"Governor: call reverted without message\\\";\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\\n            AddressUpgradeable.verifyCallResult(success, returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\\n     * canceled to allow distinguishing it from executed proposals.\\n     *\\n     * Emits a {IGovernor-ProposalCanceled} event.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n        ProposalState status = state(proposalId);\\n\\n        require(\\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\\n            \\\"Governor: proposal not active\\\"\\n        );\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVote}.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReason}.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteBySig}.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSAUpgradeable.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\\n            v,\\n            r,\\n            s\\n        );\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(state(proposalId) == ProposalState.Active, \\\"Governor: vote not currently active\\\");\\n\\n        uint256 weight = getVotes(account, proposal.voteStart.getDeadline());\\n        _countVote(proposalId, account, support, weight);\\n\\n        emit VoteCast(account, proposalId, support, weight, reason);\\n\\n        return weight;\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\\n     * through another contract such as a timelock.\\n     */\\n    function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorSettings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../GovernorUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for settings updatable through governance.\\n *\\n * _Available since v4.4._\\n */\\nabstract contract GovernorSettingsUpgradeable is Initializable, GovernorUpgradeable {\\n    uint256 private _votingDelay;\\n    uint256 private _votingPeriod;\\n    uint256 private _proposalThreshold;\\n\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n    /**\\n     * @dev Initialize the governance parameters.\\n     */\\n    function __GovernorSettings_init(\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod,\\n        uint256 initialProposalThreshold\\n    ) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __IGovernor_init_unchained();\\n        __GovernorSettings_init_unchained(initialVotingDelay, initialVotingPeriod, initialProposalThreshold);\\n    }\\n\\n    function __GovernorSettings_init_unchained(\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod,\\n        uint256 initialProposalThreshold\\n    ) internal onlyInitializing {\\n        _setVotingDelay(initialVotingDelay);\\n        _setVotingPeriod(initialVotingPeriod);\\n        _setProposalThreshold(initialProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingDelay}.\\n     */\\n    function votingDelay() public view virtual override returns (uint256) {\\n        return _votingDelay;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingPeriod}.\\n     */\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        return _votingPeriod;\\n    }\\n\\n    /**\\n     * @dev See {Governor-proposalThreshold}.\\n     */\\n    function proposalThreshold() public view virtual override returns (uint256) {\\n        return _proposalThreshold;\\n    }\\n\\n    /**\\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\\n        _setVotingDelay(newVotingDelay);\\n    }\\n\\n    /**\\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    /**\\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\\n        _setProposalThreshold(newProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting delay.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\\n        _votingDelay = newVotingDelay;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting period.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\\n        // voting period must be at least one block long\\n        require(newVotingPeriod > 0, \\\"GovernorSettings: voting period too low\\\");\\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\\n        _votingPeriod = newVotingPeriod;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the proposal threshold.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\\n        _proposalThreshold = newProposalThreshold;\\n    }\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../GovernorUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorCountingSimpleUpgradeable is Initializable, GovernorUpgradeable {\\n    function __GovernorCountingSimple_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __IGovernor_init_unchained();\\n        __GovernorCountingSimple_init_unchained();\\n    }\\n\\n    function __GovernorCountingSimple_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 => ProposalVote) private _proposalVotes;\\n\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(uint256 proposalId)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256 againstVotes,\\n            uint256 forVotes,\\n            uint256 abstainVotes\\n        )\\n    {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n        return (proposalvote.againstVotes, proposalvote.forVotes, proposalvote.abstainVotes);\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        return quorum(proposalSnapshot(proposalId)) <= proposalvote.forVotes + proposalvote.abstainVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        return proposalvote.forVotes > proposalvote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual override {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        require(!proposalvote.hasVoted[account], \\\"GovernorVotingSimple: vote already cast\\\");\\n        proposalvote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalvote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalvote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalvote.abstainVotes += weight;\\n        } else {\\n            revert(\\\"GovernorVotingSimple: invalid value for enum VoteType\\\");\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../GovernorUpgradeable.sol\\\";\\nimport \\\"../../token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport \\\"../../utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotesUpgradeable is Initializable, GovernorUpgradeable {\\n    ERC20VotesUpgradeable public token;\\n\\n    function __GovernorVotes_init(ERC20VotesUpgradeable tokenAddress) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __IGovernor_init_unchained();\\n        __GovernorVotes_init_unchained(tokenAddress);\\n    }\\n\\n    function __GovernorVotes_init_unchained(ERC20VotesUpgradeable tokenAddress) internal onlyInitializing {\\n        token = tokenAddress;\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        return token.getPastVotes(account, blockNumber);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorVotesQuorumFraction.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./GovernorVotesUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\\n * fraction of the total supply.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotesQuorumFractionUpgradeable is Initializable, GovernorVotesUpgradeable {\\n    uint256 private _quorumNumerator;\\n\\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\\n\\n    function __GovernorVotesQuorumFraction_init(uint256 quorumNumeratorValue) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __IGovernor_init_unchained();\\n        __GovernorVotesQuorumFraction_init_unchained(quorumNumeratorValue);\\n    }\\n\\n    function __GovernorVotesQuorumFraction_init_unchained(uint256 quorumNumeratorValue) internal onlyInitializing {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n    }\\n\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return _quorumNumerator;\\n    }\\n\\n    function quorumDenominator() public view virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    function quorum(uint256 blockNumber) public view virtual override returns (uint256) {\\n        return (token.getPastTotalSupply(blockNumber) * quorumNumerator()) / quorumDenominator();\\n    }\\n\\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\\n        require(\\n            newQuorumNumerator <= quorumDenominator(),\\n            \\\"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = _quorumNumerator;\\n        _quorumNumerator = newQuorumNumerator;\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorTimelockControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGovernorTimelockUpgradeable.sol\\\";\\nimport \\\"../GovernorUpgradeable.sol\\\";\\nimport \\\"../TimelockControllerUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\n * {Governor} needs the proposer (an ideally the executor) roles for the {Governor} to work properly.\\n *\\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\\n * inaccessible.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorTimelockControlUpgradeable is Initializable, IGovernorTimelockUpgradeable, GovernorUpgradeable {\\n    TimelockControllerUpgradeable private _timelock;\\n    mapping(uint256 => bytes32) private _timelockIds;\\n\\n    /**\\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\\n     */\\n    event TimelockChange(address oldTimelock, address newTimelock);\\n\\n    /**\\n     * @dev Set the timelock.\\n     */\\n    function __GovernorTimelockControl_init(TimelockControllerUpgradeable timelockAddress) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __IGovernor_init_unchained();\\n        __IGovernorTimelock_init_unchained();\\n        __GovernorTimelockControl_init_unchained(timelockAddress);\\n    }\\n\\n    function __GovernorTimelockControl_init_unchained(TimelockControllerUpgradeable timelockAddress) internal onlyInitializing {\\n        _updateTimelock(timelockAddress);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, GovernorUpgradeable) returns (bool) {\\n        return interfaceId == type(IGovernorTimelockUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\\n     */\\n    function state(uint256 proposalId) public view virtual override(IGovernorUpgradeable, GovernorUpgradeable) returns (ProposalState) {\\n        ProposalState status = super.state(proposalId);\\n\\n        if (status != ProposalState.Succeeded) {\\n            return status;\\n        }\\n\\n        // core tracks execution, so we just have to check if successful proposal have been queued.\\n        bytes32 queueid = _timelockIds[proposalId];\\n        if (queueid == bytes32(0)) {\\n            return status;\\n        } else if (_timelock.isOperationDone(queueid)) {\\n            return ProposalState.Executed;\\n        } else {\\n            return ProposalState.Queued;\\n        }\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the address of the timelock\\n     */\\n    function timelock() public view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the eta of a queued proposal\\n     */\\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\\n    }\\n\\n    /**\\n     * @dev Function to queue a proposal to the timelock.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"Governor: proposal not successful\\\");\\n\\n        uint256 delay = _timelock.getMinDelay();\\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\\n\\n        emit ProposalQueued(proposalId, block.timestamp + delay);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Overriden execute function that run the already queued proposal through the timelock.\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override {\\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Overriden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\\n     * been queued.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override returns (uint256) {\\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\\n\\n        if (_timelockIds[proposalId] != 0) {\\n            _timelock.cancel(_timelockIds[proposalId]);\\n            delete _timelockIds[proposalId];\\n        }\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. In this case, the timelock.\\n     */\\n    function _executor() internal view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\\n     * must be proposed, scheduled and executed using the {Governor} workflow.\\n     */\\n    function updateTimelock(TimelockControllerUpgradeable newTimelock) external virtual onlyGovernance {\\n        _updateTimelock(newTimelock);\\n    }\\n\\n    function _updateTimelock(TimelockControllerUpgradeable newTimelock) private {\\n        emit TimelockChange(address(_timelock), address(newTimelock));\\n        _timelock = newTimelock;\\n    }\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/TimersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Tooling for timepoints, timers and delays\\n */\\nlibrary TimersUpgradeable {\\n    struct Timestamp {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(Timestamp storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(Timestamp memory timer) internal view returns (bool) {\\n        return timer._deadline > block.timestamp;\\n    }\\n\\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.timestamp;\\n    }\\n\\n    struct BlockNumber {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(BlockNumber storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\\n        return timer._deadline > block.number;\\n    }\\n\\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.number;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorUpgradeable is Initializable, IERC165Upgradeable {\\n    function __IGovernor_init() internal onlyInitializing {\\n        __IGovernor_init_unchained();\\n    }\\n\\n    function __IGovernor_init_unchained() internal onlyInitializing {\\n    }\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast.\\n     *\\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../../../utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\\n * will significantly increase the base gas cost of transfers.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20VotesUpgradeable is Initializable, ERC20PermitUpgradeable {\\n    function __ERC20Votes_init_unchained() internal onlyInitializing {\\n    }\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCastUpgradeable.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSAUpgradeable.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCastUpgradeable.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCastUpgradeable.toUint32(block.number), votes: SafeCastUpgradeable.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal onlyInitializing {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/governance/extensions/IGovernorTimelockUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IGovernorUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of the {IGovernor} for timelock supporting modules.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorTimelockUpgradeable is Initializable, IGovernorUpgradeable {\\n    function __IGovernorTimelock_init() internal onlyInitializing {\\n        __IGovernor_init_unchained();\\n        __IGovernorTimelock_init_unchained();\\n    }\\n\\n    function __IGovernorTimelock_init_unchained() internal onlyInitializing {\\n    }\\n    event ProposalQueued(uint256 proposalId, uint256 eta);\\n\\n    function timelock() public view virtual returns (address);\\n\\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\\n\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockControllerUpgradeable is Initializable, AccessControlUpgradeable {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with a given `minDelay`.\\n     */\\n    function __TimelockController_init(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors\\n    ) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __TimelockController_init_unchained(minDelay, proposers, executors);\\n    }\\n\\n    function __TimelockController_init_unchained(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors\\n    ) internal onlyInitializing {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // deployer + self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // register proposers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == datas.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _beforeCall(id, predecessor);\\n        _call(id, 0, target, value, data);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == datas.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            _call(id, i, targets[i], values[i], datas[i]);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     *\\n     * Emits a {CallExecuted} event.\\n     */\\n    function _call(\\n        bytes32 id,\\n        uint256 index,\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) private {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n\\n        emit CallExecuted(id, index, target, value, data);\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DeadDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"./MToken.sol\\\";\\nimport \\\"./ErrorCodes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ncontract DeadDrop is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Whitelist for markets allowed as a withdrawal destination.\\n    mapping(IERC20 => MToken) public allowedMarkets;\\n    /// @notice Whitelist for swap routers\\n    mapping(IUniswapV2Router02 => bool) public allowedSwapRouters;\\n    /// @notice Whitelist for users who can be a withdrawal recipients\\n    mapping(address => bool) public allowedWithdrawReceivers;\\n    /// @notice Whitelist for bots\\n    mapping(address => bool) public allowedBots;\\n\\n    /// @notice The right part is the keccak-256 hash of variable name\\n    bytes32 public constant GUARDIAN = bytes32(0x8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8);\\n\\n    event WithdrewToProtocolInterest(uint256 amount, IERC20 token, MToken market);\\n    event SwapTokensForExactTokens(\\n        uint256 amountInMax,\\n        uint256 amountInActual,\\n        uint256 amountOut,\\n        IUniswapV2Router02 router,\\n        address[] path,\\n        uint256 deadline\\n    );\\n    event SwapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 amountOutActual,\\n        IUniswapV2Router02 router,\\n        address[] path,\\n        uint256 deadline\\n    );\\n    event Withdraw(address token, address to, uint256 amount);\\n    event NewAllowedSwapRouter(IUniswapV2Router01 router);\\n    event NewAllowedWithdrawReceiver(address receiver);\\n    event NewAllowedBot(address bot);\\n    event NewAllowedMarket(IERC20 token, MToken market);\\n    event AllowedSwapRouterRemoved(IUniswapV2Router01 router);\\n    event AllowedWithdrawReceiverRemoved(address receiver);\\n    event AllowedBotRemoved(address bot);\\n    event AllowedMarketRemoved(IERC20 token, MToken market);\\n\\n    constructor(address admin_) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(GUARDIAN, admin_);\\n    }\\n\\n    /************************************************************************/\\n    /*                          BOT FUNCTIONS                               */\\n    /************************************************************************/\\n\\n    /**\\n     * @notice Withdraw underlying asset to market's protocol interest\\n     * @param amount Amount to withdraw\\n     * @param underlying Token to withdraw\\n     */\\n    //slither-disable-next-line reentrancy-events\\n    function withdrawToProtocolInterest(uint256 amount, IERC20 underlying) external onlyRole(GUARDIAN) {\\n        MToken market = allowedMarkets[underlying];\\n        require(address(market) != address(0), ErrorCodes.DD_UNSUPPORTED_TOKEN);\\n\\n        underlying.safeIncreaseAllowance(address(market), amount);\\n        market.addProtocolInterest(amount);\\n        emit WithdrewToProtocolInterest(amount, underlying, market);\\n    }\\n\\n    /**\\n     * @dev Wrapper over UniswapV2Router02 swapTokensForExactTokens()\\n     * @notice Withdraw token[0], change to token[1] on DEX and send result to market's protocol interest\\n     * @param amountInMax Max amount to swap\\n     * @param amountOut Exact amount to swap for\\n     * @param path Swap path 0 - source token, n - destination token\\n     * @param router UniswapV2Router02 router\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    //slither-disable-next-line reentrancy-events\\n    function swapTokensForExactTokens(\\n        uint256 amountInMax,\\n        uint256 amountOut,\\n        address[] memory path,\\n        IUniswapV2Router02 router,\\n        uint256 deadline\\n    ) external onlyRole(GUARDIAN) allowedRouter(router) {\\n        require(deadline >= block.timestamp, ErrorCodes.DD_EXPIRED_DEADLINE);\\n        IERC20 tokenIn = IERC20(path[0]);\\n\\n        uint256 tokenInBalance = tokenIn.balanceOf(address(this));\\n        require(tokenInBalance >= amountInMax, ErrorCodes.INSUFFICIENT_LIQUIDITY);\\n\\n        tokenIn.safeIncreaseAllowance(address(router), amountInMax);\\n        //slither-disable-next-line unused-return\\n        router.swapTokensForExactTokens(amountOut, amountInMax, path, address(this), deadline);\\n\\n        uint256 newTokenInBalance = tokenIn.balanceOf(address(this));\\n\\n        emit SwapTokensForExactTokens(\\n            amountInMax,\\n            tokenInBalance - newTokenInBalance,\\n            amountOut,\\n            router,\\n            path,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @dev Wrapper over UniswapV2Router02 swapExactTokensForTokens()\\n     * @notice Withdraw token[0], change to token[1] on DEX and send result to market's protocol interest\\n     * @param amountIn Exact amount to swap\\n     * @param amountOutMin Min amount to swap for\\n     * @param path Swap path 0 - source token, n - destination token\\n     * @param router UniswapV2Router02 router\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    //slither-disable-next-line reentrancy-events\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        IUniswapV2Router02 router,\\n        uint256 deadline\\n    ) external onlyRole(GUARDIAN) allowedRouter(router) {\\n        require(deadline >= block.timestamp, ErrorCodes.DD_EXPIRED_DEADLINE);\\n        uint256 pathLength = path.length;\\n        IERC20 tokenIn = IERC20(path[0]);\\n        IERC20 tokenOut = IERC20(path[pathLength - 1]);\\n\\n        require(tokenIn.balanceOf(address(this)) >= amountIn, ErrorCodes.INSUFFICIENT_LIQUIDITY);\\n\\n        uint256 tokenOutBalance = tokenOut.balanceOf(address(this));\\n\\n        tokenIn.safeIncreaseAllowance(address(router), amountIn);\\n        //slither-disable-next-line unused-return\\n        router.swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), deadline);\\n\\n        uint256 newTokenOutBalance = tokenOut.balanceOf(address(this));\\n        uint256 amountOutActual = newTokenOutBalance - tokenOutBalance;\\n\\n        emit SwapExactTokensForTokens(amountIn, amountOutMin, amountOutActual, router, path, deadline);\\n    }\\n\\n    /************************************************************************/\\n    /*                        ADMIN FUNCTIONS                               */\\n    /************************************************************************/\\n\\n    /* --- LOGIC --- */\\n\\n    /**\\n     * @notice Withdraw tokens to the wallet\\n     * @param amount Amount to withdraw\\n     * @param underlying Token to withdraw\\n     * @param to Receipient address\\n     */\\n    //slither-disable-next-line reentrancy-events\\n    function withdraw(\\n        uint256 amount,\\n        IERC20 underlying,\\n        address to\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) allowedReceiversOnly(to) {\\n        require(underlying.balanceOf(address(this)) >= amount, ErrorCodes.INSUFFICIENT_LIQUIDITY);\\n\\n        underlying.safeTransfer(to, amount);\\n        emit Withdraw(address(underlying), to, amount);\\n    }\\n\\n    /* --- SETTERS --- */\\n\\n    /// @notice Add new market to the whitelist\\n    function addAllowedMarket(MToken market) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(address(market) != address(0), ErrorCodes.DD_MARKET_ADDRESS_IS_ZERO);\\n        require(\\n            market.supportsInterface(type(MTokenInterface).interfaceId),\\n            ErrorCodes.CONTRACT_DOES_NOT_SUPPORT_INTERFACE\\n        );\\n        allowedMarkets[market.underlying()] = market;\\n        emit NewAllowedMarket(market.underlying(), market);\\n    }\\n\\n    /// @notice Add new IUniswapV2Router02 router to the whitelist\\n    function addAllowedRouter(IUniswapV2Router02 router) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(address(router) != address(0), ErrorCodes.DD_ROUTER_ADDRESS_IS_ZERO);\\n        require(!allowedSwapRouters[router], ErrorCodes.DD_ROUTER_ALREADY_SET);\\n        allowedSwapRouters[router] = true;\\n        emit NewAllowedSwapRouter(router);\\n    }\\n\\n    /// @notice Add new withdraw receiver address to the whitelist\\n    function addAllowedReceiver(address receiver) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(receiver != address(0), ErrorCodes.DD_RECEIVER_ADDRESS_IS_ZERO);\\n        require(!allowedWithdrawReceivers[receiver], ErrorCodes.DD_RECEIVER_ALREADY_SET);\\n        allowedWithdrawReceivers[receiver] = true;\\n        emit NewAllowedWithdrawReceiver(receiver);\\n    }\\n\\n    /// @notice Add new bot address to the whitelist\\n    function addAllowedBot(address bot) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(bot != address(0), ErrorCodes.DD_BOT_ADDRESS_IS_ZERO);\\n        require(!allowedBots[bot], ErrorCodes.DD_BOT_ALREADY_SET);\\n        allowedBots[bot] = true;\\n        emit NewAllowedBot(bot);\\n    }\\n\\n    /* --- REMOVERS --- */\\n\\n    /// @notice Remove market from the whitelist\\n    function removeAllowedMarket(IERC20 underlying) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        MToken market = allowedMarkets[underlying];\\n        require(address(market) != address(0), ErrorCodes.DD_MARKET_NOT_FOUND);\\n        delete allowedMarkets[underlying];\\n        emit AllowedMarketRemoved(underlying, market);\\n    }\\n\\n    /// @notice Remove IUniswapV2Router02 router from the whitelist\\n    function removeAllowedRouter(IUniswapV2Router02 router)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        allowedRouter(router)\\n    {\\n        delete allowedSwapRouters[router];\\n        emit AllowedSwapRouterRemoved(router);\\n    }\\n\\n    /// @notice Remove withdraw receiver address from the whitelist\\n    function removeAllowedReceiver(address receiver)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        allowedReceiversOnly(receiver)\\n    {\\n        delete allowedWithdrawReceivers[receiver];\\n        emit AllowedWithdrawReceiverRemoved(receiver);\\n    }\\n\\n    /// @notice Remove withdraw bot address from the whitelist\\n    function removeAllowedBot(address bot) external onlyRole(DEFAULT_ADMIN_ROLE) allowedBotsOnly(bot) {\\n        delete allowedBots[bot];\\n        emit AllowedBotRemoved(bot);\\n    }\\n\\n    /************************************************************************/\\n    /*                          INTERNAL FUNCTIONS                          */\\n    /************************************************************************/\\n\\n    modifier allowedRouter(IUniswapV2Router02 router) {\\n        require(allowedSwapRouters[router], ErrorCodes.DD_ROUTER_NOT_FOUND);\\n        _;\\n    }\\n\\n    modifier allowedReceiversOnly(address receiver) {\\n        require(allowedWithdrawReceivers[receiver], ErrorCodes.DD_RECEIVER_NOT_FOUND);\\n        _;\\n    }\\n\\n    modifier allowedBotsOnly(address bot) {\\n        require(allowedBots[bot], ErrorCodes.DD_BOT_NOT_FOUND);\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint224\",\"name\":\"newIndex\",\"type\":\"uint224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endBlock\",\"type\":\"uint32\"}],\"name\":\"BorrowIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"EmissionBoostEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdTier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endBoostBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emissionBoost\",\"type\":\"uint256\"}],\"name\":\"NewTierCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract Supervisor\",\"name\":\"supervisor\",\"type\":\"address\"}],\"name\":\"SupervisorInstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint224\",\"name\":\"newIndex\",\"type\":\"uint224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endBlock\",\"type\":\"uint32\"}],\"name\":\"SupplyIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract MToken\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enabledTier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startBoostBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint224\",\"name\":\"mntSupplyIndex\",\"type\":\"uint224\"},{\"indexed\":false,\"internalType\":\"uint224\",\"name\":\"mntBorrowIndex\",\"type\":\"uint224\"}],\"name\":\"TierEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MToken\",\"name\":\"market_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userLastIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userLastBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketIndex_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSupply_\",\"type\":\"bool\"}],\"name\":\"calculateEmissionBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boostedIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"endBoostBlocks\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"emissionBoosts\",\"type\":\"uint256[]\"}],\"name\":\"createTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEmissionBoosting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tiersForEnabling\",\"type\":\"uint256[]\"}],\"name\":\"enableTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getAccountTiersBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getCurrentAccountBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MToken\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSupply_\",\"type\":\"bool\"}],\"name\":\"getNextTierToBeUpdatedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterestNFT_\",\"type\":\"address\"},{\"internalType\":\"contract Supervisor\",\"name\":\"supervisor_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isAccountHaveTiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmissionBoostingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier_\",\"type\":\"uint256\"}],\"name\":\"isTierActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketBorrowIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketSupplyIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterestNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tiers_\",\"type\":\"uint256[]\"}],\"name\":\"onMintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"onTransferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supervisor\",\"outputs\":[{\"internalType\":\"contract Supervisor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier_\",\"type\":\"uint256\"}],\"name\":\"tierExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"emissionBoost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MToken\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"updateBorrowIndexesHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MToken\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"updateSupplyIndexesHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EmissionBooster", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}