{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@airswap/staking/contracts/interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\n/**\\n * @title AirSwap Pool: Claim Tokens\\n * @notice https://www.airswap.io/\\n */\\ncontract Pool is IPool, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\n      abi.encodePacked(\\n        \\\"EIP712Domain(\\\",\\n        \\\"string name,\\\",\\n        \\\"string version,\\\",\\n        \\\"uint256 chainId,\\\",\\n        \\\"address verifyingContract\\\",\\n        \\\")\\\"\\n      )\\n    );\\n\\n  bytes32 public constant CLAIM_TYPEHASH =\\n    keccak256(\\n      abi.encodePacked(\\n        \\\"Claim(\\\",\\n        \\\"uint256 nonce,\\\",\\n        \\\"uint256 expiry,\\\",\\n        \\\"address participant,\\\",\\n        \\\"uint256 score\\\",\\n        \\\")\\\"\\n      )\\n    );\\n\\n  bytes32 public constant DOMAIN_NAME = keccak256(\\\"POOL\\\");\\n  bytes32 public constant DOMAIN_VERSION = keccak256(\\\"1\\\");\\n  uint256 public immutable DOMAIN_CHAIN_ID;\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n  uint256 internal constant MAX_PERCENTAGE = 100;\\n  uint256 internal constant MAX_SCALE = 77;\\n\\n  // Larger the scale, lower the output for a claim\\n  uint256 public scale;\\n\\n  // Max percentage for a claim with infinite score\\n  uint256 public max;\\n\\n  // Mapping of address to boolean to enable admin accounts\\n  mapping(address => bool) public admins;\\n\\n  /**\\n   * @notice Double mapping of signers to nonce groups to nonce states\\n   * @dev The nonce group is computed as nonce / 256, so each group of 256 sequential nonces uses the same key\\n   * @dev The nonce states are encoded as 256 bits, for each nonce in the group 0 means available and 1 means used\\n   */\\n  mapping(address => mapping(uint256 => uint256)) internal noncesClaimed;\\n\\n  // Staking contract address\\n  address public stakingContract;\\n\\n  // Staking token address\\n  address public stakingToken;\\n\\n  /**\\n   * @notice Constructor\\n   * @param _scale uint256\\n   * @param _max uint256\\n   * @param _stakingContract address\\n   * @param _stakingToken address\\n   */\\n  constructor(\\n    uint256 _scale,\\n    uint256 _max,\\n    address _stakingContract,\\n    address _stakingToken\\n  ) {\\n    require(_max <= MAX_PERCENTAGE, \\\"MAX_TOO_HIGH\\\");\\n    require(_scale <= MAX_SCALE, \\\"SCALE_TOO_HIGH\\\");\\n    scale = _scale;\\n    max = _max;\\n    stakingContract = _stakingContract;\\n    stakingToken = _stakingToken;\\n    admins[msg.sender] = true;\\n\\n    uint256 currentChainId = getChainId();\\n    DOMAIN_CHAIN_ID = currentChainId;\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        DOMAIN_TYPEHASH,\\n        DOMAIN_NAME,\\n        DOMAIN_VERSION,\\n        currentChainId,\\n        this\\n      )\\n    );\\n\\n    IERC20(stakingToken).safeApprove(stakingContract, 2**256 - 1);\\n  }\\n\\n  /**\\n   * @notice Set scale\\n   * @dev Only owner\\n   * @param _scale uint256\\n   */\\n  function setScale(uint256 _scale) external override onlyOwner {\\n    require(_scale <= MAX_SCALE, \\\"SCALE_TOO_HIGH\\\");\\n    scale = _scale;\\n    emit SetScale(scale);\\n  }\\n\\n  /**\\n   * @notice Set max\\n   * @dev Only owner\\n   * @param _max uint256\\n   */\\n  function setMax(uint256 _max) external override onlyOwner {\\n    require(_max <= MAX_PERCENTAGE, \\\"MAX_TOO_HIGH\\\");\\n    max = _max;\\n    emit SetMax(max);\\n  }\\n\\n  /**\\n   * @notice Add admin address\\n   * @dev Only owner\\n   * @param _admin address\\n   */\\n  function addAdmin(address _admin) external override onlyOwner {\\n    require(_admin != address(0), \\\"INVALID_ADDRESS\\\");\\n    admins[_admin] = true;\\n  }\\n\\n  /**\\n   * @notice Remove admin address\\n   * @dev Only owner\\n   * @param _admin address\\n   */\\n  function removeAdmin(address _admin) external override onlyOwner {\\n    require(admins[_admin] == true, \\\"ADMIN_NOT_SET\\\");\\n    admins[_admin] = false;\\n  }\\n\\n  /**\\n   * @notice Set staking contract address\\n   * @dev Only owner\\n   * @param _stakingContract address\\n   */\\n  function setStakingContract(address _stakingContract)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    require(_stakingContract != address(0), \\\"INVALID_ADDRESS\\\");\\n    // set allowance on old staking contract to zero\\n    IERC20(stakingToken).safeApprove(stakingContract, 0);\\n    stakingContract = _stakingContract;\\n    IERC20(stakingToken).safeApprove(stakingContract, 2**256 - 1);\\n  }\\n\\n  /**\\n   * @notice Set staking token address\\n   * @dev Only owner\\n   * @param _stakingToken address\\n   */\\n  function setStakingToken(address _stakingToken) external override onlyOwner {\\n    require(_stakingToken != address(0), \\\"INVALID_ADDRESS\\\");\\n    // set allowance on old staking token to zero\\n    IERC20(stakingToken).safeApprove(stakingContract, 0);\\n    stakingToken = _stakingToken;\\n    IERC20(stakingToken).safeApprove(stakingContract, 2**256 - 1);\\n  }\\n\\n  /**\\n   * @notice Admin function to migrate funds\\n   * @dev Only owner\\n   * @param tokens address[]\\n   * @param dest address\\n   */\\n  function drainTo(address[] calldata tokens, address dest)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      uint256 bal = IERC20(tokens[i]).balanceOf(address(this));\\n      IERC20(tokens[i]).safeTransfer(dest, bal);\\n    }\\n    emit DrainTo(tokens, dest);\\n  }\\n\\n  /**\\n   * @notice Withdraw tokens from the pool using a signed claim\\n   * @param token address\\n   * @param nonce uint256\\n   * @param expiry uint256\\n   * @param score uint256\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function withdraw(\\n    address token,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    withdrawProtected(0, msg.sender, token, nonce, expiry, msg.sender, score, v, r, s);\\n  }\\n\\n  /**\\n   * @notice Withdraw tokens from the pool using a signed claim and send to recipient\\n   * @param minimumAmount uint256\\n   * @param token address\\n   * @param recipient address\\n   * @param nonce uint256\\n   * @param expiry uint256\\n   * @param score uint256\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function withdrawWithRecipient(\\n    uint256 minimumAmount,\\n    address token,\\n    address recipient,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    withdrawProtected(\\n      minimumAmount,\\n      recipient,\\n      token,\\n      nonce,\\n      expiry,\\n      msg.sender,\\n      score,\\n      v,\\n      r,\\n      s\\n    );\\n  }\\n\\n  /**\\n   * @notice Withdraw tokens from the pool using a signed claim and stake\\n   * @param minimumAmount uint256\\n   * @param token address\\n   * @param nonce uint256\\n   * @param expiry uint256\\n   * @param score uint256\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function withdrawAndStake(\\n    uint256 minimumAmount,\\n    address token,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    require(token == address(stakingToken), \\\"INVALID_TOKEN\\\");\\n    _checkValidClaim(nonce, expiry, msg.sender, score, v, r, s);\\n    uint256 amount = _withdrawCheck(score, token, minimumAmount);\\n    IStaking(stakingContract).stakeFor(msg.sender, amount);\\n    emit Withdraw(nonce, expiry, msg.sender, token, amount, score);\\n  }\\n\\n  /**\\n   * @notice Withdraw tokens from the pool using signature and stake for another account\\n   * @param minimumAmount uint256\\n   * @param token address\\n   * @param account address\\n   * @param nonce uint256\\n   * @param expiry uint256\\n   * @param score uint256\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function withdrawAndStakeFor(\\n    uint256 minimumAmount,\\n    address token,\\n    address account,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    require(token == address(stakingToken), \\\"INVALID_TOKEN\\\");\\n    _checkValidClaim(nonce, expiry, msg.sender, score, v, r, s);\\n    uint256 amount = _withdrawCheck(score, token, minimumAmount);\\n    IStaking(stakingContract).stakeFor(account, amount);\\n    emit Withdraw(nonce, expiry, msg.sender, token, amount, score);\\n  }\\n\\n  /**\\n   * @notice Withdraw tokens from the pool using a signed claim\\n   * @param minimumAmount uint256\\n   * @param token address\\n   * @param participant address\\n   * @param nonce uint256\\n   * @param expiry uint256\\n   * @param score uint256\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function withdrawProtected(\\n    uint256 minimumAmount,\\n    address recipient,\\n    address token,\\n    uint256 nonce,\\n    uint256 expiry,\\n    address participant,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public override returns (uint256) {\\n    _checkValidClaim(nonce, expiry, participant, score, v, r, s);\\n    uint256 amount = _withdrawCheck(score, token, minimumAmount);\\n    IERC20(token).safeTransfer(recipient, amount);\\n    emit Withdraw(nonce, expiry, participant, token, amount, score);\\n    return amount;\\n  }\\n\\n  /**\\n   * @notice Calculate output amount for an input score\\n   * @param score uint256\\n   * @param token address\\n   * @return amount uint256 amount to claim based on balance, scale, and max\\n   */\\n  function calculate(uint256 score, address token)\\n    public\\n    view\\n    override\\n    returns (uint256 amount)\\n  {\\n    uint256 balance = IERC20(token).balanceOf(address(this));\\n    uint256 divisor = (uint256(10)**scale) + score;\\n    return (max * score * balance) / divisor / 100;\\n  }\\n\\n  /**\\n   * @notice Verify a signature\\n   * @param nonce uint256\\n   * @param expiry uint256\\n   * @param participant address\\n   * @param score uint256\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function verify(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address participant,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public view override returns (bool valid) {\\n    require(DOMAIN_CHAIN_ID == getChainId(), \\\"CHAIN_ID_CHANGED\\\");\\n    require(expiry > block.timestamp, \\\"EXPIRY_PASSED\\\");\\n    bytes32 claimHash = keccak256(\\n      abi.encode(CLAIM_TYPEHASH, nonce, expiry, participant, score)\\n    );\\n    address signatory = ecrecover(\\n      keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, claimHash)),\\n      v,\\n      r,\\n      s\\n    );\\n    admins[signatory] && !nonceUsed(participant, nonce)\\n      ? valid = true\\n      : valid = false;\\n  }\\n\\n  /**\\n   * @notice Returns true if the nonce has been used\\n   * @param participant address\\n   * @param nonce uint256\\n   */\\n  function nonceUsed(address participant, uint256 nonce)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    uint256 groupKey = nonce / 256;\\n    uint256 indexInGroup = nonce % 256;\\n    return (noncesClaimed[participant][groupKey] >> indexInGroup) & 1 == 1;\\n  }\\n\\n  /**\\n   * @notice Returns the current chainId using the chainid opcode\\n   * @return id uint256 The chain id\\n   */\\n  function getChainId() public view returns (uint256 id) {\\n    // no-inline-assembly\\n    assembly {\\n      id := chainid()\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks Claim Nonce, Expiry, Participant, Score, Signature\\n   * @param nonce uint256\\n   * @param expiry uint256\\n   * @param participant address\\n   * @param score uint256\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function _checkValidClaim(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address participant,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    require(DOMAIN_CHAIN_ID == getChainId(), \\\"CHAIN_ID_CHANGED\\\");\\n    require(expiry > block.timestamp, \\\"EXPIRY_PASSED\\\");\\n    bytes32 claimHash = keccak256(\\n      abi.encode(CLAIM_TYPEHASH, nonce, expiry, participant, score)\\n    );\\n    address signatory = ecrecover(\\n      keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, claimHash)),\\n      v,\\n      r,\\n      s\\n    );\\n    require(admins[signatory], \\\"UNAUTHORIZED\\\");\\n    require(_markNonceAsUsed(participant, nonce), \\\"NONCE_ALREADY_USED\\\");\\n  }\\n\\n  /**\\n   * @notice Marks a nonce as used for the given participant\\n   * @param participant address\\n   * @param nonce uint256\\n   * @return bool True if nonce was not marked as used already\\n   */\\n  function _markNonceAsUsed(address participant, uint256 nonce)\\n    internal\\n    returns (bool)\\n  {\\n    uint256 groupKey = nonce / 256;\\n    uint256 indexInGroup = nonce % 256;\\n    uint256 group = noncesClaimed[participant][groupKey];\\n\\n    // If it is already used, return false\\n    if ((group >> indexInGroup) & 1 == 1) {\\n      return false;\\n    }\\n\\n    noncesClaimed[participant][groupKey] = group | (uint256(1) << indexInGroup);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Withdraw tokens from the pool using a score\\n   * @param score uint256\\n   * @param token address\\n   * @param minimumAmount uint256\\n   */\\n  function _withdrawCheck(\\n    uint256 score,\\n    address token,\\n    uint256 minimumAmount\\n  ) internal view returns (uint256) {\\n    require(score > 0, \\\"SCORE_MUST_BE_PROVIDED\\\");\\n    uint256 amount = calculate(score, token);\\n    require(amount >= minimumAmount, \\\"INSUFFICIENT_AMOUNT\\\");\\n    return amount;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@airswap/staking/contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStaking {\\n  struct Stake {\\n    uint256 duration;\\n    uint256 balance;\\n    uint256 timestamp;\\n  }\\n\\n  // ERC-20 Transfer event\\n  event Transfer(address indexed from, address indexed to, uint256 tokens);\\n\\n  // Schedule timelock event\\n  event ScheduleDurationChange(uint256 indexed unlockTimestamp);\\n\\n  // Cancel timelock event\\n  event CancelDurationChange();\\n\\n  // Complete timelock event\\n  event CompleteDurationChange(uint256 indexed newDuration);\\n\\n  // Propose Delegate event\\n  event ProposeDelegate(address indexed delegate, address indexed account);\\n\\n  // Set Delegate event\\n  event SetDelegate(address indexed delegate, address indexed account);\\n\\n  /**\\n   * @notice Stake tokens\\n   * @param amount uint256\\n   */\\n  function stake(uint256 amount) external;\\n\\n  /**\\n   * @notice Unstake tokens\\n   * @param amount uint256\\n   */\\n  function unstake(uint256 amount) external;\\n\\n  /**\\n   * @notice Receive stakes for an account\\n   * @param account address\\n   */\\n  function getStakes(address account)\\n    external\\n    view\\n    returns (Stake memory accountStake);\\n\\n  /**\\n   * @notice Total balance of all accounts (ERC-20)\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Balance of an account (ERC-20)\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @notice Decimals of underlying token (ERC-20)\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Stake tokens for an account\\n   * @param account address\\n   * @param amount uint256\\n   */\\n  function stakeFor(address account, uint256 amount) external;\\n\\n  /**\\n   * @notice Available amount for an account\\n   * @param account uint256\\n   */\\n  function available(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPool {\\n  event Withdraw(\\n    uint256 indexed nonce,\\n    uint256 indexed expiry,\\n    address indexed account,\\n    address token,\\n    uint256 amount,\\n    uint256 score\\n  );\\n  event SetScale(uint256 scale);\\n  event SetMax(uint256 max);\\n  event DrainTo(address[] tokens, address dest);\\n\\n  function setScale(uint256 _scale) external;\\n\\n  function setMax(uint256 _max) external;\\n\\n  function addAdmin(address _admin) external;\\n\\n  function removeAdmin(address _admin) external;\\n\\n  function setStakingContract(address _stakingContract) external;\\n\\n  function setStakingToken(address _stakingToken) external;\\n\\n  function drainTo(address[] calldata tokens, address dest) external;\\n\\n  function withdraw(\\n    address token,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function withdrawWithRecipient(\\n    uint256 minimumAmount,\\n    address token,\\n    address recipient,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function withdrawAndStake(\\n    uint256 minimumAmount,\\n    address token,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function withdrawAndStakeFor(\\n    uint256 minimumAmount,\\n    address token,\\n    address account,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function withdrawProtected(\\n    uint256 minimumAmount,\\n    address recipient,\\n    address token,\\n    uint256 nonce,\\n    uint256 expiry,\\n    address participant,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256);\\n\\n  function calculate(uint256 score, address token)\\n    external\\n    view\\n    returns (uint256 amount);\\n\\n  function verify(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address participant,\\n    uint256 score,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external view returns (bool valid);\\n\\n  function nonceUsed(address participant, uint256 nonce)\\n    external\\n    view\\n    returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"DrainTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"SetMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"}],\"name\":\"SetScale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"drainTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"nonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scale\",\"type\":\"uint256\"}],\"name\":\"setScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawAndStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawProtected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawWithRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pool", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000640000000000000000000000006d88b09805b90dad911e5c5a512eedd984d6860b00000000000000000000000027054b13b1b798b345b591a4d22e6562d47ea75a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}