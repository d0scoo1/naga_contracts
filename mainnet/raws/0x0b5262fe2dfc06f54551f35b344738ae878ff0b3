{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n __          __    _      __  __                               _         \r\n \\ \\        / /   | |    |  \\/  |                             (_)        \r\n  \\ \\  /\\  / /___ | |__  | \\  / |  __ _  ___   ___   _ __      _   ___   \r\n   \\ \\/  \\/ // _ \\| '_ \\ | |\\/| | / _` |/ __| / _ \\ | '_ \\    | | / _ \\  \r\n    \\  /\\  /|  __/| |_) || |  | || (_| |\\__ \\| (_) || | | | _ | || (_) | \r\n     \\/  \\/  \\___||_.__/ |_|  |_| \\__,_||___/ \\___/ |_| |_|(_)|_| \\___/  \r\n                                                                         \r\n                             www.WebMason.io                             \r\n                                                                         \r\n*/\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the merkle tree could be reinterpreted as a leaf value.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = _efficientHash(computedHash, proofElement);\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = _efficientHash(proofElement, computedHash);\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IRecoverable.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\ninterface IRecoverable {\r\n    event RecoveredFunds(\r\n        address indexed token,\r\n        uint256 amount,\r\n        address indexed recipient\r\n    );\r\n\r\n    function recoverFunds(\r\n        address token,\r\n        uint256 amount,\r\n        address recipient\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: contracts/utils/Recoverable.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"contracts/interfaces/IRecoverable.sol\";\r\n\r\n/**\r\n @dev The contract is intendent to help recovering arbitrary ERC20 tokens and ETH accidentally transferred to the contract address\r\n */\r\nabstract contract Recoverable is Ownable, IRecoverable {\r\n    function _getRecoverableAmount(address token)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        if (token == address(0)) return address(this).balance;\r\n        else return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     @param token ERC20 token's address to recover or address(0) to recover ETH\r\n     @param amount to recover from contract's address\r\n     @param recipient address to receive tokens from the contract\r\n     */\r\n    function recoverFunds(\r\n        address token,\r\n        uint256 amount,\r\n        address recipient\r\n    ) external override onlyOwner returns (bool) {\r\n        uint256 recoverableAmount = _getRecoverableAmount(token);\r\n        require(\r\n            amount <= recoverableAmount,\r\n            \"Recoverable: RECOVERABLE_AMOUNT_NOT_ENOUGH\"\r\n        );\r\n        if (token == address(0)) _transferEth(amount, recipient);\r\n        else _transferErc20(token, amount, recipient);\r\n        emit RecoveredFunds(token, amount, recipient);\r\n        return true;\r\n    }\r\n\r\n    function _transferEth(uint256 amount, address recipient) private {\r\n        address payable toPayable = payable(recipient);\r\n        toPayable.transfer(amount);\r\n    }\r\n\r\n    function _transferErc20(\r\n        address token,\r\n        uint256 amount,\r\n        address recipient\r\n    ) private {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, recipient, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"Recoverable: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IVesting.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\ninterface IVesting {\r\n    struct VestingEntry {\r\n        uint96 amount;\r\n        uint64 start;\r\n        uint32 lockup;\r\n        uint32 cliff;\r\n        uint32 vesting;\r\n    }\r\n\r\n    event AirdropperUpdated(address indexed account, bool status);\r\n    event Airdrop(address indexed account, uint96 amount);\r\n    event VestingEntryUpdated(\r\n        address indexed account,\r\n        uint96 amount,\r\n        uint64 start,\r\n        uint32 lockup,\r\n        uint32 cliff,\r\n        uint32 vesting\r\n    );\r\n\r\n    function vestingOf(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint64 start,\r\n            uint32 lockup,\r\n            uint32 cliff,\r\n            uint32 vesting,\r\n            uint96 balance,\r\n            uint96 vested,\r\n            uint96 locked,\r\n            uint96 unlocked\r\n        );\r\n\r\n    function airdrop(\r\n        uint32 lockup,\r\n        uint32 cliff,\r\n        uint32 vesting,\r\n        address account,\r\n        uint96 amount\r\n    ) external returns (bool);\r\n\r\n    function airdropBatch(\r\n        uint32 lockup,\r\n        uint32 cliff,\r\n        uint32 vesting,\r\n        address[] memory accounts,\r\n        uint96[] memory amounts\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// Root file: contracts/WebMasonCoinOpenSeaAirdrop.sol\r\n\r\npragma solidity 0.8.14;\r\n\r\n// import \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"contracts/utils/Recoverable.sol\";\r\n// import \"contracts/interfaces/IVesting.sol\";\r\n\r\n/// @custom:security-contact support@webmason.io\r\ncontract WebMasonCoinOpenSeaAirdrop is Ownable, Recoverable {\r\n    address public immutable WMC;\r\n\r\n    // WMC vesting parameters\r\n    uint256 private _initTime;\r\n    uint256 public vestingStart = 1669852800; // 2022-12-01T00:00:00.000Z\r\n    uint32 private constant _vesting = 5 * 12 * 30 * 24 * 60 * 60; // 60mo = 5y\r\n\r\n    // Airdrop\r\n    bytes32 public merkleRoot;\r\n    uint256 public airdropEndTime;\r\n\r\n    mapping(address => bool) public claimed;\r\n    event AirdropClaimed(address indexed account, uint256 amount);\r\n\r\n    constructor(address token_) {\r\n        _initTime = block.timestamp;\r\n        WMC = token_;\r\n    }\r\n\r\n    // Airdrop\r\n    function claim(\r\n        address account,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external {\r\n        require(!claimed[account], \"Already claimed\");\r\n        require(\r\n            _verify(_leaf(account, amount), merkleProof),\r\n            \"MerkleDistributor: Invalid  merkle proof\"\r\n        );\r\n\r\n        claimed[account] = true;\r\n        emit AirdropClaimed(account, amount);\r\n\r\n        (uint64 tStart, , , uint32 tVesting, , , , ) = IVesting(WMC).vestingOf(\r\n            account\r\n        );\r\n        uint256 endTime = vestingStart + _vesting;\r\n\r\n        if (block.timestamp >= endTime) {\r\n            // If the vesting has already ended, then we do an airdrop without vesting.\r\n            IVesting(WMC).airdrop(0, 0, 0, account, uint96(amount));\r\n            return;\r\n        }\r\n\r\n        if (tStart == 0) {\r\n            // If vesting is not set.\r\n            if (vestingStart >= block.timestamp) {\r\n                // If time is less than vestingStart. Then we set up a new vesting.\r\n                IVesting(WMC).airdrop(\r\n                    uint32(vestingStart - block.timestamp),\r\n                    0,\r\n                    _vesting,\r\n                    account,\r\n                    uint96(amount)\r\n                );\r\n                return;\r\n            }\r\n            if (vestingStart < block.timestamp) {\r\n                // If time is greater than vestingStart.\r\n                // We increase the vested amount or set vesting.\r\n                uint256 remainingTime = 0;\r\n                uint256 locked = 0;\r\n\r\n                // Recalculate and set the vesting.\r\n                remainingTime = endTime - block.timestamp;\r\n                locked = (amount * remainingTime) / _vesting;\r\n                // Set vesting\r\n                IVesting(WMC).airdrop(\r\n                    0,\r\n                    0,\r\n                    uint32(remainingTime),\r\n                    account,\r\n                    uint96(locked)\r\n                );\r\n\r\n                // Airdrop of unlocked amount\r\n                IVesting(WMC).airdrop(\r\n                    0,\r\n                    0,\r\n                    0,\r\n                    account,\r\n                    uint96(amount - locked)\r\n                );\r\n                return;\r\n            }\r\n        } else {\r\n            /**\r\n             * If vesting is set.\r\n             * Option 1. tVesting is 5 years. The vesting was set before the tokens were unlocked.\r\n             * Then we add the quantity to the old quantity. Tokens will be unlocked automatically.\r\n             * Option 2. tVesting less than 5 years. The vesting was set after the tokens were unlocked.\r\n             * Then we airdrop the unlocked amount and add the remaining amount.\r\n             */\r\n            uint256 locked = amount;\r\n            if (tVesting < _vesting) {\r\n                uint256 unlocked = (amount * (_vesting - tVesting)) / _vesting;\r\n                locked = amount - unlocked;\r\n                // Airdrop of unlocked amount.\r\n                IVesting(WMC).airdrop(0, 0, 0, account, uint96(unlocked));\r\n            }\r\n            // Add the remaining amount.\r\n            IVesting(WMC).airdrop(0, 0, 1, account, uint96(locked));\r\n            return;\r\n        }\r\n    }\r\n\r\n    function _leaf(address account, uint256 amount)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(account, amount));\r\n    }\r\n\r\n    function _verify(bytes32 leaf, bytes32[] memory merkleProof)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return MerkleProof.verify(merkleProof, merkleRoot, leaf);\r\n    }\r\n\r\n    function setRoot(bytes32 merkleRoot_, uint256 duration) external onlyOwner {\r\n        merkleRoot = merkleRoot_;\r\n        airdropEndTime = block.timestamp + duration;\r\n    }\r\n\r\n    function claim_rest_of_tokens_and_selfdestruct() external onlyOwner {\r\n        require(block.timestamp >= airdropEndTime, \"Too early\");\r\n        require(\r\n            IERC20(WMC).transfer(owner(), IERC20(WMC).balanceOf(address(this)))\r\n        );\r\n        selfdestruct(payable(owner()));\r\n    }\r\n\r\n    // Vesting\r\n    function setVestingStart(uint256 newTime) external onlyOwner {\r\n        require(\r\n            newTime < vestingStart && newTime >= _initTime,\r\n            \"The new time must be less than the old vesting start time\"\r\n        );\r\n        vestingStart = newTime;\r\n    }\r\n\r\n    // Extra\r\n    function _getRecoverableAmount(address token)\r\n        internal\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        if (token == WMC) return 0;\r\n        else if (token == address(0)) return address(this).balance;\r\n        else return IERC20(token).balanceOf(address(this));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"RecoveredFunds\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WMC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim_rest_of_tokens_and_selfdestruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setVestingStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WebMasonCoinOpenSeaAirdrop", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000cddbcea313fadfb8c339ddf45454b10b3d79a6f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b462abab37a3ace533912821d449bc82827aa40d12d919dc334d462ec227467e"}]}