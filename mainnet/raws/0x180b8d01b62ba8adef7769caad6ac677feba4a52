{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\nt.me/BlueBallsPortal\r\nhttps://BlueBalls.International\r\nhttps://twitter.com/Blue_Balls_ERC\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract BLUEBALLS is Context, IERC20, Ownable {\r\n\r\n    using Address for address payable;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    mapping (address => bool) private _isExcludedFromMaxWallet;\r\n\r\n    mapping (address => bool) public isBot;\r\n\r\n    address[] private _excluded;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private _tTotal = 1_000_000 * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint256 public maxTxAmountBuy = _tTotal/200; \r\n    uint256 public maxTxAmountSell = maxTxAmountBuy;\r\n    uint256 public maxWalletAmount = _tTotal* 15/1000; \r\n\r\n    // Trading\r\n    bool private _tradingEnabled = false;\r\n    \r\n    //antisnipers\r\n    uint256 private liqAddedBlockNumber;\r\n    uint256 private blocksToWait = 2;\r\n\r\n    address payable public projectFundsAddress;\r\n    address payable public teamAddress;\r\n    \r\n    uint256 private projectFundsRatio = 700; \r\n    uint256 private teamRatio = 500;\r\n    uint256 constant private totalRatio = 1200;\r\n\r\n\r\n    mapping (address => bool) public isAutomatedMarketMakerPair;\r\n\r\n    string private constant _name = \"Blue Balls\";\r\n    string private constant _symbol = \"BLUEBALLS\";\r\n\r\n    bool private inSwapAndLiquify;\r\n\r\n    IUniswapV2Router02 public UniswapV2Router;\r\n    address public uniswapPair;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    uint256 private _tTotalDivisor = 1000;\r\n    uint256 public numTokensSellToAddToLiquidity = _tTotal/_tTotalDivisor;\r\n\r\n    struct feeRatesStruct {\r\n      uint8 rfi;\r\n      uint8 ProjectFunds;\r\n      uint8 autolp;\r\n      uint8 toSwap;\r\n    }\r\n\r\n    feeRatesStruct public buyRates = feeRatesStruct(\r\n     {\r\n      rfi: 0,    \r\n      ProjectFunds: 12, \r\n      autolp: 0, \r\n      toSwap: 12 \r\n    });\r\n\r\n    feeRatesStruct public sellRates = feeRatesStruct(\r\n    {\r\n      rfi: 3,   \r\n      ProjectFunds: 12,\r\n      autolp: 0, \r\n      toSwap: 12 \r\n    });\r\n\r\n\r\n    /// MODS\r\n    mapping (address => uint256) buyTime;\r\n    uint256 public antiDumpDuration = 4 hours;\r\n    bool public antiDumpEnabled = true;\r\n    \r\n    feeRatesStruct public antiDumpRates = feeRatesStruct(\r\n    {\r\n      rfi: 3,   \r\n      ProjectFunds: 22,\r\n      autolp: 0, \r\n      toSwap: 22 \r\n    });\r\n    \r\n    function setAntiDumpParams(bool enabled, uint256 durationInMinutes, uint8 rfi_, uint8 projectFunds_, uint8 autoLp_, uint8 toSwap_) public onlyOwner{\r\n        //If anti dump disabled will not care to change other params to save gas \r\n        if (!enabled){\r\n            antiDumpEnabled = enabled;\r\n            return;    \r\n        }\r\n        antiDumpEnabled=enabled;\r\n        antiDumpDuration = durationInMinutes * 1 minutes;\r\n        antiDumpRates.rfi = rfi_;\r\n        antiDumpRates.ProjectFunds = projectFunds_;\r\n        antiDumpRates.autolp = autoLp_;\r\n        antiDumpRates.toSwap = toSwap_;\r\n    }\r\n\r\n\r\n\r\n    /// MODS\r\n\r\n    feeRatesStruct private appliedRates = buyRates;\r\n\r\n    struct TotFeesPaidStruct{\r\n        uint256 rfi;\r\n        uint256 toSwap;\r\n    }\r\n    TotFeesPaidStruct public totFeesPaid;\r\n\r\n    struct valuesFromGetValues{\r\n      uint256 rAmount;\r\n      uint256 rTransferAmount;\r\n      uint256 rRfi;\r\n      uint256 rToSwap;\r\n      uint256 tTransferAmount;\r\n      uint256 tRfi;\r\n      uint256 tToSwap;\r\n    }\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ETHReceived, uint256 tokensIntotoSwap);\r\n    event LiquidityAdded(uint256 tokenAmount, uint256 ETHAmount);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event BlacklistedUser(address botAddress, bool indexed value);\r\n    event MaxWalletAmountUpdated(uint256 amount);\r\n    event ExcludeFromMaxWallet(address account, bool indexed isExcluded);\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor () {\r\n        // AVAX 0x60aE616a2155Ee3d9A68541Ba4544862310933d4\r\n        IUniswapV2Router02 _UniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapPair = IUniswapV2Factory(_UniswapV2Router.factory())\r\n                            .createPair(address(this), _UniswapV2Router.WETH());\r\n        isAutomatedMarketMakerPair[uniswapPair] = true;\r\n        emit SetAutomatedMarketMakerPair(uniswapPair, true);\r\n        UniswapV2Router = _UniswapV2Router;\r\n\r\n        _rOwned[owner()] = _rTotal;\r\n\r\n        projectFundsAddress= payable(0x6185eBd34B87Ba0B4E4d9BBED948dB2e0497c951);\r\n        teamAddress= payable(0xcf28bBF9714BE65145b953dF08a6E224C99b5936);\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[projectFundsAddress]=true;\r\n        _isExcludedFromFee[address(this)]=true;\r\n        \r\n        _isExcludedFromMaxWallet[owner()] = true;\r\n        _isExcludedFromMaxWallet[address(this)]=true;\r\n        _isExcludedFromMaxWallet[uniswapPair] = true;\r\n        _isExcludedFromMaxWallet[0x000000000000000000000000000000000000dEaD] = true;\r\n\r\n        \r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    //std ERC20:\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    //override ERC20:\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender]+addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferRfi) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount/currentRate;\r\n    }\r\n\r\n    function tradingEnabled() external onlyOwner() {\r\n        _tradingEnabled = true;\r\n        liqAddedBlockNumber = block.number;\r\n    }\r\n\r\n\r\n    //@dev kept original RFI naming -> \"reward\" as in reflection\r\n    function excludeFromReward(address account) external onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function excludeMultipleAccountsFromMaxWallet(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            require(_isExcludedFromMaxWallet[accounts[i]] != excluded, \"_isExcludedFromMaxWallet already set to that value for one wallet\");\r\n            _isExcludedFromMaxWallet[accounts[i]] = excluded;\r\n            emit ExcludeFromMaxWallet(accounts[i], excluded);\r\n        }\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    function isExcludedFromMaxWallet(address account) public view returns(bool) {\r\n        return _isExcludedFromMaxWallet[account];\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n      swapAndLiquifyEnabled = _enabled;\r\n      emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    //  @dev receive ETH from UniswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\r\n        _rTotal -= rRfi;\r\n        totFeesPaid.rfi += tRfi;\r\n    }\r\n\r\n    function _takeToSwap(uint256 rToSwap,uint256 tToSwap) private {\r\n        _rOwned[address(this)] +=rToSwap;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] += tToSwap;\r\n        totFeesPaid.toSwap+=tToSwap;\r\n        \r\n    }\r\n\r\n    function _getValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee);\r\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rRfi, to_return.rToSwap) = _getRValues(to_return, tAmount, takeFee, _getRate());\r\n        return to_return;\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory s) {\r\n\r\n        if(!takeFee) {\r\n          s.tTransferAmount = tAmount;\r\n          return s;\r\n        }\r\n        s.tRfi = tAmount*appliedRates.rfi/100;\r\n        s.tToSwap = tAmount*appliedRates.toSwap/100;\r\n        s.tTransferAmount = tAmount-s.tRfi-s.tToSwap;\r\n        return s;\r\n    }\r\n\r\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rRfi, uint256 rToSwap) {\r\n        rAmount = tAmount*currentRate;\r\n\r\n        if(!takeFee) {\r\n          return(rAmount, rAmount,0,0);\r\n        }\r\n\r\n        rRfi = s.tRfi*currentRate;\r\n        rToSwap = s.tToSwap*currentRate;\r\n        rTransferAmount =  rAmount-rRfi-rToSwap;\r\n        return (rAmount, rTransferAmount, rRfi,rToSwap);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply/tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply -=_rOwned[_excluded[i]];\r\n            tSupply -=_tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal/_tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        \r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!isBot[from], \"ERC20: address blacklisted (bot)\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount <= balanceOf(from),\"You are trying to transfer more than your balance\");\r\n        bool takeFee = !(_isExcludedFromFee[from] || _isExcludedFromFee[to]);\r\n\r\n        \r\n        if ( from != owner() ) {\r\n            if (!_tradingEnabled && to != owner() ) {\r\n                revert();\r\n            }\r\n\r\n        }\r\n        \r\n        if(takeFee)\r\n        {\r\n\r\n            if(from != owner() && isAutomatedMarketMakerPair[from] && to != owner())\r\n            {\r\n                if(block.number<liqAddedBlockNumber+blocksToWait)\r\n                {\r\n                isBot[to] = true;\r\n                emit BlacklistedUser(to,true);\r\n                }\r\n\r\n                appliedRates = buyRates;\r\n                /// MODS\r\n                buyTime[to]=block.timestamp;    \r\n\r\n                require(amount<=maxTxAmountBuy, \"amount must be <= maxTxAmountBuy\");\r\n            }\r\n            else\r\n            {\r\n                appliedRates = sellRates;\r\n                /// MODS\r\n                if (antiDumpEnabled && ( ( block.timestamp - buyTime[from] ) < antiDumpDuration)){\r\n                    appliedRates = antiDumpRates;\r\n                }\r\n                require(amount<=maxTxAmountSell, \"amount must be <= maxTxAmountSell\");\r\n            }\r\n        }\r\n\r\n        if (balanceOf(address(this)) >= numTokensSellToAddToLiquidity  && !inSwapAndLiquify && !isAutomatedMarketMakerPair[from] && swapAndLiquifyEnabled) {\r\n            //add liquidity\r\n            swapAndLiquify(numTokensSellToAddToLiquidity);\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private {\r\n        \r\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\r\n\r\n        if (_isExcluded[sender]) {\r\n                _tOwned[sender] -= tAmount;\r\n        } \r\n        if (_isExcluded[recipient]) {\r\n                _tOwned[recipient] += s.tTransferAmount;\r\n        }\r\n\r\n        _rOwned[sender] -= s.rAmount;\r\n        _rOwned[recipient] += s.rTransferAmount;\r\n        if(takeFee)\r\n        {\r\n        _reflectRfi(s.rRfi, s.tRfi);\r\n        _takeToSwap(s.rToSwap,s.tToSwap);\r\n        emit Transfer(sender, address(this), s.tToSwap);\r\n        }\r\n        require(_isExcludedFromMaxWallet[recipient] || balanceOf(recipient)<= maxWalletAmount, \"Recipient cannot hold more than maxWalletAmount\");\r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n\r\n        uint256 denominator = appliedRates.toSwap*2;\r\n        uint256 tokensToAddLiquidityWith = contractTokenBalance*appliedRates.autolp/denominator;\r\n        uint256 toSwap = contractTokenBalance-tokensToAddLiquidityWith;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForETH(toSwap);\r\n\r\n        uint256 deltaBalance = address(this).balance -initialBalance;\r\n        uint256 ETHToAddLiquidityWith = deltaBalance*appliedRates.autolp/ (denominator- appliedRates.autolp);\r\n        \r\n        // add liquidity to  Uniswap\r\n        addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith);\r\n\r\n        // send ETH to taxReceivers\r\n        projectFundsAddress.transfer((address(this).balance * projectFundsRatio) / totalRatio);\r\n        teamAddress.transfer(address(this).balance);\r\n\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = UniswapV2Router.WETH();\r\n\r\n        if(allowance(address(this), address(UniswapV2Router)) < tokenAmount) {\r\n          _approve(address(this), address(UniswapV2Router), ~uint256(0));\r\n        }\r\n\r\n        UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        UniswapV2Router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0, \r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address _pair, bool value) external onlyOwner{\r\n        require(isAutomatedMarketMakerPair[_pair] != value, \"Automated market maker pair is already set to that value\");\r\n        isAutomatedMarketMakerPair[_pair] = value;\r\n        if(value)\r\n        {\r\n        _isExcludedFromMaxWallet[_pair] = true;\r\n\r\n        }\r\n    }\r\n\r\n    function setBuyFees(uint8 _rfi,uint8 _ProjectFunds, uint8 _autolp) external onlyOwner\r\n    {\r\n     buyRates.rfi=_rfi;\r\n     buyRates.ProjectFunds=_ProjectFunds;\r\n     buyRates.autolp=_autolp;\r\n     buyRates.toSwap= _ProjectFunds+_autolp;\r\n    }\r\n\r\n    function setSellFees(uint8 _rfi,uint8 _ProjectFunds, uint8 _autolp) external onlyOwner\r\n    {\r\n     sellRates.rfi=_rfi;\r\n     sellRates.ProjectFunds=_ProjectFunds;\r\n     sellRates.autolp=_autolp;\r\n     sellRates.toSwap= _ProjectFunds+_autolp;\r\n    }\r\n\r\n    function setMaxTransactionAmountsPerK(uint256 _maxTxAmountBuyPer1K, uint256 _maxTxAmountSellPer1K) external onlyOwner\r\n    {\r\n     require(_maxTxAmountBuyPer1K >= 30 && _maxTxAmountSellPer1K >= 30);\r\n     maxTxAmountBuy = _tTotal*(_maxTxAmountBuyPer1K/1000);\r\n     maxTxAmountSell = _tTotal* (_maxTxAmountSellPer1K/1000);\r\n    }\r\n    \r\n    function setNumTokensSellToAddToLiq(uint256 tTotalDivisor) external onlyOwner\r\n    {\r\n     _tTotalDivisor = tTotalDivisor;\r\n     numTokensSellToAddToLiquidity = _tTotal/_tTotalDivisor;\r\n    }\r\n\r\n    function setprojectFundsAddress(address payable _projectFundsAddress, address payable _teamAddress) external onlyOwner\r\n    {\r\n        projectFundsAddress = _projectFundsAddress;\r\n        teamAddress = _teamAddress;\r\n    }\r\n\r\n    function setFundRatios(uint256 _projectFundsRatio, uint256 _teamRatio) external onlyOwner\r\n    {\r\n        require((_projectFundsRatio + _teamRatio) == 1200);\r\n        projectFundsRatio = _projectFundsRatio;\r\n        teamRatio = _teamRatio;\r\n    }\r\n\r\n    function manualSwap() external onlyOwner\r\n    {\r\n        swapAndLiquify(balanceOf(address(this)));\r\n    }\r\n    \r\n    function unblacklistSniper(address botAddress) external onlyOwner\r\n    {   require(!isBot[botAddress] ,\"address provided is already not blacklisted\");\r\n        isBot[botAddress] = false;\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 _maxAmountWalletPer1K) external onlyOwner {\r\n        require(_maxAmountWalletPer1K >= 30);\r\n        maxWalletAmount = _tTotal*(_maxAmountWalletPer1K/1000);\r\n    }\r\n\r\n    function excludeFromMaxWallet(address account, bool excluded) external onlyOwner {\r\n        require(_isExcludedFromMaxWallet[account] != excluded, \"_isExcludedFromMaxWallet already set to that value\");\r\n        _isExcludedFromMaxWallet[account] = excluded;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"BlacklistedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntotoSwap\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiDumpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiDumpEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiDumpRates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"rfi\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ProjectFunds\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"autolp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toSwap\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"rfi\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ProjectFunds\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"autolp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toSwap\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAutomatedMarketMakerPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectFundsAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"rfi\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ProjectFunds\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"autolp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toSwap\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"durationInMinutes\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"rfi_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"projectFunds_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"autoLp_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toSwap_\",\"type\":\"uint8\"}],\"name\":\"setAntiDumpParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rfi\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_ProjectFunds\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_autolp\",\"type\":\"uint8\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectFundsRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamRatio\",\"type\":\"uint256\"}],\"name\":\"setFundRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxAmountBuyPer1K\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTxAmountSellPer1K\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmountsPerK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmountWalletPer1K\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tTotalDivisor\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rfi\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_ProjectFunds\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_autolp\",\"type\":\"uint8\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_projectFundsAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setprojectFundsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toSwap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"}],\"name\":\"unblacklistSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BLUEBALLS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e1f0c6d18bb078338db29defe1af387205b01a3a80280c3653971aa7c548bb08"}]}