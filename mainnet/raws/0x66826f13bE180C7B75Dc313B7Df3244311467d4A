{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.6.12;\r\n/*\r\n _    _                                _   _____                                   _             \r\n| |  | |                              | | /  __ \\                                 (_)            \r\n| |  | |_ __ __ _ _ __  _ __   ___  __| | | /  \\/ ___  _ __ ___  _ __   __ _ _ __  _  ___  _ __  \r\n| |/\\| | '__/ _` | '_ \\| '_ \\ / _ \\/ _` | | |    / _ \\| '_ ` _ \\| '_ \\ / _` | '_ \\| |/ _ \\| '_ \\ \r\n\\  /\\  / | | (_| | |_) | |_) |  __/ (_| | | \\__/\\ (_) | | | | | | |_) | (_| | | | | | (_) | | | |\r\n \\/  \\/|_|  \\__,_| .__/| .__/ \\___|\\__,_|  \\____/\\___/|_| |_| |_| .__/ \\__,_|_| |_|_|\\___/|_| |_|\r\n                 | |   | |                                      | |                              \r\n                 |_|   |_|                                      |_|                              \r\n______      _          _____             _                  _                                    \r\n|  _  \\    | |        /  __ \\           | |                | |                                   \r\n| | | |__ _| |_ __ _  | /  \\/ ___  _ __ | |_ _ __ __ _  ___| |_                                  \r\n| | | / _` | __/ _` | | |    / _ \\| '_ \\| __| '__/ _` |/ __| __|                                 \r\n| |/ / (_| | || (_| | | \\__/\\ (_) | | | | |_| | | (_| | (__| |_                                  \r\n|___/ \\__,_|\\__\\__,_|  \\____/\\___/|_| |_|\\__|_|  \\__,_|\\___|\\__|                                 \r\n                                                                                                 \r\n                                                                                               \r\n\r\n-NFT data store to hold the following\r\n- Wrapped Status\r\n- Blocked NFT's\r\n- Is Holder?\r\n- Status of wrapped (fees)\r\n- number of holders (For future use)\r\n- Array for address storage for royalty cleanup\r\n*/\r\n\r\n//Interface to NFT contract\r\ninterface wrappedcompanion{\r\n    ////Interface to RCVR\r\n  function balanceOf(address owner) external view returns (uint256);\r\n  function tokenURI(uint256 tokenId ) external view returns (string memory);\r\n  function getArtApproval(uint _tokennumber,address _wallet)external view returns(bool);\r\n  function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n}\r\ninterface ogcompanion{\r\n    ////Interface to RCVR\r\n  function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n}\r\n\r\ncontract NFTInfo{\r\n    //Arrays///\r\n    uint[] private blockednfts; //Array to handle a blocked nfts\r\n    //Std Variables///\r\n    address public wtcaddress = 0xc1A3bfd6678Ce5fb16db9A544cBd279850baA81D;\r\n    address public companion = 0xdE22827Fe636E8e7d8e21F5EAb10Db644f6AA361;\r\n    address public Owner;\r\n    address public manager; //Able to modify addresses at a lower level\r\n    address public royaltywallet; //Wallet for royalties\r\n    uint private numwraps;\r\n    uint public numholders;\r\n    uint public numblocked;\r\n    ///////Important Mappings///////\r\n    mapping(address => bool) internal wrapped; //Whether a holder has wrapped\r\n    mapping(address => bool) internal holder; //Whether they are a holder\r\n    mapping(address => uint) internal feespaid; //Status of users fees -> 0 -> Not paid for wrap 1-> Paid once 0.01ETH 2-> Paid up to limit of 0.02ETH\r\n    mapping(address => uint) internal artenabled; //Dynamic mapping of ar enabled/disabled\r\n    mapping(address => string) internal artpath; //Dynamic mapping of art\r\n    ///////Array for holders////////\r\n    address[] internal holderaddresses; //array to store the holders\r\n    ////////////////////////////////\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == Owner);\r\n        _;\r\n    }\r\n    \r\n    constructor () public {\r\n      Owner = msg.sender; //Owner of Contract\r\n      manager = msg.sender; //Owner as default      \r\n    }\r\n    ///Update NB address if required\r\n    function configNBAddresses(uint option,address _address) external onlyOwner{\r\n        if (option==1)\r\n        {\r\n        wtcaddress = _address;\r\n        }\r\n        if (option==2)\r\n        {\r\n        royaltywallet = _address;\r\n        }\r\n        if (option==3)\r\n        {\r\n        companion = _address;\r\n        }\r\n            }\r\n    //Setup ArtWork Manager address///\r\n    function setManager(address _manager) external onlyOwner\r\n    {\r\n        manager = _manager;\r\n    }\r\n    //Obtain Art status for user\r\n    function getArtStatus(address _wallet)public view returns(uint)\r\n    {\r\n        uint temp;\r\n        temp = artenabled[_wallet];\r\n        return temp;\r\n    }\r\n    \r\n    ////Sets the art path for a user\r\n    function setArtPath(uint _tokennumber,address _holder,uint _pathno) external\r\n    {\r\n        bool temp;\r\n        require(msg.sender == Owner || msg.sender==manager,\"Not Auth!\");\r\n        temp = wrappedcompanion(wtcaddress).getArtApproval(_tokennumber,_holder);\r\n        require(temp==true,\"Owner not approved!\");\r\n        if (_pathno == 1)\r\n        {\r\n            artenabled[_holder] = 1;\r\n        }\r\n        if (_pathno == 2)\r\n        {\r\n            artenabled[_holder] = 2;\r\n        }\r\n        if (_pathno == 3)\r\n        {\r\n           artenabled[_holder] = 3;\r\n        }  \r\n    }\r\n   \r\n    //Function to Verify whether an NFT is blocked\r\n    function isBlockedNFT(uint _tokenID) public view returns(bool,uint256)\r\n   {\r\n       for (uint256 s = 0; s < blockednfts.length; s += 1){\r\n           if (_tokenID == blockednfts[s]) return (true,s);\r\n       }\r\n       return (false,0);\r\n   }\r\n   //Function to return whether they are a holder or not\r\n   function isHolder(address _address) public view returns(bool)\r\n   {\r\n       bool temp;\r\n       if(holder[_address]==true)\r\n       {\r\n          temp=true; \r\n       }\r\n       return temp;\r\n   }\r\n   function manageHolderAddresses(bool status,address _holder) external {\r\n       require(msg.sender == wtcaddress||msg.sender==Owner||msg.sender==royaltywallet,\"Not Oracle/Owner!\");\r\n       if(status==true)\r\n       {\r\n           //Add user to array!\r\n           (bool _isholder, ) = isHolderInArray(_holder);\r\n           if(!_isholder)holderaddresses.push(_holder);\r\n       }\r\n       if(status==false)\r\n       {\r\n           (bool _isholder, uint256 s) = isHolderInArray(_holder);\r\n           if(_isholder){\r\n           holderaddresses[s] = holderaddresses[holderaddresses.length - 1];\r\n           holderaddresses.pop();\r\n       }\r\n       holder[ _holder]=status;\r\n\r\n\r\n   }\r\n   }\r\n   /////To keep track of holders for future use\r\n   function manageNumHolders(uint _option) external {\r\n       require(msg.sender == wtcaddress||msg.sender==Owner||msg.sender==royaltywallet,\"Not Oracle/Owner!\");\r\n       if (_option==1) //remove holder\r\n       {\r\n           numholders -= numholders -1;\r\n       }\r\n       if (_option==2) //add holder\r\n       {\r\n           numholders += 1;\r\n       }\r\n   }\r\n    \r\n    /////Returns whether the user is stored in the array////////\r\n    function isHolderInArray(address _wallet) public view returns(bool,uint)\r\n    {\r\n        for (uint256 s = 0; s < holderaddresses.length; s += 1){\r\n           if(_wallet == holderaddresses[s]) return (true,s);\r\n       }\r\n       return (false,0);\r\n    }\r\n    /////////////////////////\r\n\r\n\r\n\r\n    ///Function to override the numholders, this is incase of logic issues and to make sure claim is fair\r\n    function forceNumHolders(uint _value) external onlyOwner{\r\n        numholders = _value;\r\n    }\r\n       \r\n\r\n   \r\n   ///Function to manage addresses\r\n   function manageBlockedNFT(int option,uint _tokenID,address _wallet,uint _numNFT) external onlyOwner{\r\n       address temp;\r\n       if (option==1) // Add NFT to block list\r\n       {\r\n           blockednfts.push(_tokenID); //add nfts to blocked id's\r\n           numblocked+=1;\r\n       }\r\n       if (option==2) //Remove from array\r\n       {\r\n           (bool _isblocked,uint256 s) = isBlockedNFT(_tokenID);\r\n       if(_isblocked){\r\n           blockednfts[s] = blockednfts[blockednfts.length - 1];\r\n          blockednfts.pop();\r\n          if (numblocked>0)\r\n          {\r\n              numblocked-=1;\r\n          }\r\n       }\r\n       }\r\n        if (option==3) //Iterate through entire colletion and add\r\n       {\r\n       for (uint256 s = 0; s < _numNFT; s += 1){\r\n           if(s>0)\r\n           {\r\n               temp = ownerOfToken(s);\r\n           \r\n           if (temp ==_wallet)\r\n           {\r\n            blockednfts.push(s);\r\n            numblocked+=1;\r\n           }\r\n           }\r\n\r\n       }\r\n       }\r\n       \r\n   \r\n   }\r\n    \r\n    //Function to set the status of a wrap for fee support////\r\n   function setUserStatus(address _wrapper,uint _status,bool _haswrapped) external{\r\n       require(msg.sender == wtcaddress||msg.sender==Owner||msg.sender==royaltywallet,\"Not Oracle/Owner!\");\r\n       feespaid[_wrapper] = _status;\r\n       wrapped[_wrapper] = _haswrapped;\r\n       numwraps+=1; //track number of wraps\r\n       \r\n   }\r\n   function getWrappedStatus(address _migrator) external view returns(bool){\r\n       bool temp;\r\n       if(wrapped[_migrator]==true)\r\n       {\r\n       temp = wrapped[_migrator];\r\n       }\r\n       return temp;\r\n   }\r\n   function getFeesStatus(address _migrator) external view returns(uint){\r\n       uint temp;\r\n       temp = feespaid[_migrator];\r\n       return temp;\r\n   }\r\n   function getNumHolders(uint _feed) external view returns(uint){\r\n\r\n       uint temp;\r\n        if (_feed ==1)\r\n        {\r\n            temp = numholders;\r\n        }\r\n        if (_feed ==2)\r\n        {\r\n            temp = holderaddresses.length;\r\n        }\r\n        if (_feed ==3)\r\n        {\r\n            temp = blockednfts.length;\r\n        }\r\n       return temp;\r\n   }\r\n   ///Returns the holder address given an Index\r\n   function getHolderAddress(uint _index) external view returns(address payable)\r\n   {\r\n     address temp;\r\n     address payable temp2;\r\n     temp = holderaddresses[_index];\r\n     temp2 = payable(temp);\r\n     return temp2;\r\n\r\n   }\r\n   //Returns OwnerOf from NFT\r\n   function ownerOfToken(uint _tid) public view returns (address)\r\n   {\r\n       address temp;\r\n       temp = ogcompanion(companion).ownerOf(_tid);\r\n       return temp;\r\n   }\r\n \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"option\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"configNBAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"forceNumHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getArtStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"getFeesStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHolderAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feed\",\"type\":\"uint256\"}],\"name\":\"getNumHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"getWrappedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"isBlockedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isHolderInArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"option\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numNFT\",\"type\":\"uint256\"}],\"name\":\"manageBlockedNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"manageHolderAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"}],\"name\":\"manageNumHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numblocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numholders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"ownerOfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltywallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokennumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pathno\",\"type\":\"uint256\"}],\"name\":\"setArtPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_haswrapped\",\"type\":\"bool\"}],\"name\":\"setUserStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wtcaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTInfo", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fb0d2423adf500093ae01e836321c5cd84a9f65d2b885a97aa6add3840ebcd53"}]}