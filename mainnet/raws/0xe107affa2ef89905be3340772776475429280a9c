{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n\r\n  modifier onlyPayloadSize(uint size) {\r\n      if (msg.data.length < size + 4) {\r\n      revert();\r\n      }\r\n      _;\r\n  }\r\n\r\n\r\n  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    \r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /*\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\n*/\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /*\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\r\n    require(_to != address(0));\r\n    require(allowed[_from][msg.sender] >= _value);\r\n    require(balances[_from] >= _value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /*\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /*\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  /*\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /*\r\n   */\r\n  function Ownable() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /*\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /*\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n */\r\ncontract Pausable is Ownable  {\r\n    event Pause();\r\n    event Unpause();\r\n    event Freeze ();\r\n    event LogFreeze();\r\n\r\n    bool public paused = false;\r\n\r\n    address public founder;\r\n    \r\n    /*\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused || msg.sender == founder);\r\n        _;\r\n    }\r\n\r\n    /*\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /*\r\n    */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n    \r\n\r\n    /*\r\n    */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused onlyPayloadSize(2 * 32) returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused onlyPayloadSize(3 * 32) returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  //The functions below surve no real purpose. Even if one were to approve another to spend\r\n  //tokens on their behalf, those tokens will still only be transferable when the token contract\r\n  //is not paused.\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract MintableToken is PausableToken {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract TokenBank is MintableToken {\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  event TokensBurned(address initiatior, address indexed _partner, uint256 _tokens);\r\n \r\n\r\n  /*\r\n   */\r\n    function TokenBank() public {\r\n        name = \"Token Bank\";\r\n        symbol = \"TKB\";\r\n        decimals = 8;\r\n        totalSupply = 1000000000e8;\r\n        founder = 0xd606c83Bc9C740cBf39a42eB4c338828e90F451a;\r\n        balances[founder] = totalSupply;\r\n        emit Transfer(0x0, founder, totalSupply);\r\n        pause();\r\n    }\r\n\r\n    modifier onlyFounder {\r\n      require(msg.sender == founder);\r\n      _;\r\n    }\r\n\r\n    event NewFounderAddress(address indexed from, address indexed to);\r\n\r\n    function changeFounderAddress(address _newFounder) public onlyFounder {\r\n        require(_newFounder != 0x0);\r\n        emit NewFounderAddress(founder, _newFounder);\r\n        founder = _newFounder;\r\n    }\r\n\r\n    /*\r\n    */\r\n    function burnTokens(address _partner, uint256 _tokens) public onlyFounder {\r\n        require(balances[_partner] >= _tokens);\r\n        balances[_partner] = balances[_partner].sub(_tokens);\r\n        totalSupply = totalSupply.sub(_tokens);\r\n        emit TokensBurned(msg.sender, _partner, _tokens);\r\n    }\r\n}\r\n\r\n\r\ncontract TokenBankICO is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    TokenBank public token;\r\n\r\n    uint256 public TokenBankFirstStage;\r\n    uint256 public TokenBankSecondStage;\r\n    uint256 public TokenBankThirdStage;\r\n    uint256 public TokenBankFourthStage;\r\n\tuint256 public TokenBankFifthStage;\r\n    uint256 public TokenBankForSale;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    address public wallet;\r\n    uint256 public rate;\r\n    uint256 public weiRaised;\r\n    bool public ICOpaused;\r\n\r\n    uint256[4] public TokenBankBonusStage;\r\n\r\n    uint256 public TokenBankSold;\r\n\r\n    /*\r\n    */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event ICOSaleExtended(uint256 newEndTime);\r\n\r\n    function ICO() public {\r\n        token = new TokenBank();  \r\n        startTime = 1525478400; \r\n        rate = 400000;\r\n        wallet = 0xd606c83Bc9C740cBf39a42eB4c338828e90F451a;\r\n        TokenBankForSale = 500000000e8;\r\n        TokenBankSold = 0;\r\n\r\n        TokenBankFirstStage = 100000000e8;\r\n        TokenBankSecondStage = 200000000e8;  \r\n        TokenBankThirdStage = 300000000e8;  \r\n        TokenBankFourthStage = 400000000e8;\r\n\t\tTokenBankFifthStage = 500000000e8;\t\t\r\n    \r\n        TokenBankBonusStage[0] = now.add(5 days);\r\n        for (uint y = 1; y < TokenBankBonusStage.length; y++) {\r\n            TokenBankBonusStage[y] = TokenBankBonusStage[y - 1].add(5 days);\r\n        }\r\n        \r\n        endTime = TokenBankBonusStage[3];\r\n        \r\n        ICOpaused = false;\r\n    }\r\n    \r\n    modifier whenNotPaused {\r\n        require(!ICOpaused);\r\n        _;\r\n    }\r\n\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _addr) public payable whenNotPaused {\r\n        require(validPurchase() && TokenBankSold < TokenBankForSale);\r\n        require(_addr != 0x0 && msg.value >= 100 finney);  \r\n        uint256 toMint;\r\n        toMint = msg.value.mul(getRateWithBonus());\r\n        TokenBankSold = TokenBankSold.add(toMint);\r\n        token.mint(_addr, toMint);\r\n        forwardFunds();\r\n    }\r\n\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    function processOfflinePurchase(address _to, uint256 _toMint) public onlyOwner {\r\n        require(TokenBankSold.add(_toMint) <= TokenBankForSale);\r\n        require(_toMint > 0 && _to != 0x0);\r\n        TokenBankSold = TokenBankSold.add(_toMint);\r\n        token.mint(_to, _toMint);\r\n    }\r\n    \r\n    \r\n    /*\r\n     */\r\n    function airDrop(address[] _addrs, uint256[] _values) public onlyOwner {\r\n        //require(_addrs.length > 0);\r\n        for (uint i = 0; i < _addrs.length; i++) {\r\n            if (_addrs[i] != 0x0 && _values[i] > 0) {\r\n                token.mint(_addrs[i], _values[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime; \r\n        bool nonZeroPurchase = msg.value != 0; \r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    \r\n    function finishMinting() public onlyOwner {\r\n        token.finishMinting();\r\n    }\r\n    \r\n    function getRateWithBonus() internal view returns (uint256 rateWithDiscount) {\r\n        if (TokenBankSold < TokenBankForSale) {\r\n            return rate.mul(getCurrentBonus()).div(100).add(rate);\r\n            return rateWithDiscount;\r\n        }\r\n        return rate;\r\n    }\r\n\r\n    /*\r\n    */\r\n    function getCurrentBonus() internal view returns (uint256 discount) {\r\n        require(TokenBankSold < TokenBankFifthStage);\r\n        uint256 timeStamp = now;\r\n        uint256 stage;\r\n\r\n        for (uint i = 0; i < TokenBankBonusStage.length; i++) {\r\n            if (timeStamp <= TokenBankBonusStage[i]) {\r\n                stage = i + 1;\r\n                break;\r\n            } \r\n        } \r\n\r\n        if(stage == 1 && TokenBankSold < TokenBankFirstStage) { discount = 20; }\r\n        if(stage == 1 && TokenBankSold >= TokenBankSecondStage) { discount = 15; }\r\n        if(stage == 1 && TokenBankSold >= TokenBankThirdStage) { discount = 10; }\r\n        if(stage == 1 && TokenBankSold >= TokenBankFourthStage) { discount = 5; }\r\n\t\tif(stage == 1 && TokenBankSold >= TokenBankFifthStage) { discount = 0; }\r\n\t\t\r\n        if(stage == 2 && TokenBankSold < TokenBankSecondStage) { discount = 15; }\r\n        if(stage == 2 && TokenBankSold >= TokenBankThirdStage) { discount = 10; }\r\n        if(stage == 2 && TokenBankSold >= TokenBankFourthStage) { discount = 5; }\r\n\t\tif(stage == 2 && TokenBankSold >= TokenBankFifthStage) { discount = 0; }\r\n\r\n        if(stage == 3 && TokenBankSold < TokenBankThirdStage) { discount = 10; }\r\n        if(stage == 3 && TokenBankSold >= TokenBankFourthStage) { discount = 5; }\r\n\t\tif(stage == 3 && TokenBankSold >= TokenBankFifthStage) { discount = 0; }\r\n\t\t\r\n\t\tif(stage == 4 && TokenBankSold < TokenBankFourthStage) { discount = 5; }\r\n        if(stage == 4 && TokenBankSold >= TokenBankFifthStage) { discount = 0; }\r\n\r\n        if(stage == 5) { discount = 0; }\r\n\r\n        return discount;\r\n    }\r\n\r\n\r\n\r\n    function extendDuration(uint256 _newEndTime) public onlyOwner {\r\n        require(endTime < _newEndTime);\r\n        endTime = _newEndTime;\r\n        emit ICOSaleExtended(_newEndTime);\r\n    }\r\n\r\n\r\n    function hasEnded() public view returns (bool) { \r\n        return now > endTime;\r\n    }\r\n\r\n    /**\r\n    * Allows the owner of the ICO contract to unpause the token contract. This function is needed\r\n    * because the ICO contract deploys a new instance of the token contract, and by default the \r\n    * ETH address which deploys a contract which is Ownable is assigned ownership of the contract,\r\n    * so the ICO contract is the owner of the token contract. Since unpause is a function which can\r\n    * only be executed by the owner, by adding this function here, then the owner of the ICO contract\r\n    * can call this and then the ICO contract will invoke the unpause function of the token contract\r\n    * and thus the token contract will successfully unpause as its owner the ICO contract invokend\r\n    * the the function. \r\n    */\r\n    function unpauseToken() public onlyOwner {\r\n        token.unpause();\r\n    }\r\n    \r\n    function pauseUnpauseICO() public onlyOwner {\r\n        if (ICOpaused) {\r\n            ICOpaused = false;\r\n        } else {\r\n            ICOpaused = true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFounder\",\"type\":\"address\"}],\"name\":\"changeFounderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiatior\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_partner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"NewFounderAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "TokenBank", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0b223f8b7a5297bbf38f9ba18c5de2c3c3bb4e64d3320ba3810d90a11de382a8"}]}