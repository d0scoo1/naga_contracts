{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SwapNftRelay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Blockwell-Smart-License\\npragma solidity ^0.8.9;\\n\\nimport \\\"common8/LicenseRef-Blockwell-Smart-License.sol\\\";\\nimport \\\"common8/relay/RelayBase.sol\\\";\\nimport \\\"common8/ERC721.sol\\\";\\nimport \\\"common8/Erc20.sol\\\";\\nimport \\\"common8/ERC721TokenReceiver.sol\\\";\\n\\n/**\\n * @dev Relay contract for verifying crosschain swaps.\\n *\\n * Blockwell Exclusive (Intellectual Property that lives on-chain via Smart License)\\n */\\ncontract SwapNftRelay is RelayBase, ERC721TokenReceiver {\\n    uint256 public swapNonce;\\n\\n    event SwapToChain(\\n        uint256 toChainId,\\n        uint256 swapNonce,\\n        ERC721 tokenContract,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed swapId,\\n        uint256[] tokenIds\\n    );\\n\\n    event SwapFromChain(\\n        ERC721 tokenContract,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed swapId,\\n        uint256 fromChainId,\\n        uint256[] tokenIds\\n    );\\n\\n    error SwapIdMismatch();\\n\\n    constructor(uint256 _swappersNeeded) RelayBase(_swappersNeeded) {\\n        name = \\\"NFT SwapRelay\\\";\\n        bwtype = SWAP_NFT_RELAY;\\n        bwver = 88;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external pure returns (bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    }\\n\\n    /**\\n     * @dev Initiates a swap to another chain. Transfers the tokens to this contract and emits an event\\n     *      indicating the request to swap.\\n     *\\n     * Blockwell Exclusive (Intellectual Property that lives on-chain via Smart License)\\n     */\\n    function swapToChain(\\n        ERC721 tokenContract,\\n        uint256 toChainId,\\n        address to,\\n        uint256[] calldata tokenIds\\n    ) public {\\n        uint256 nonce = getSwapNonce();\\n        uint256 chainID;\\n        assembly {\\n            chainID := chainid()\\n        }\\n\\n        bytes32 swapId = keccak256(\\n            abi.encodePacked(\\n                address(this),\\n                chainID,\\n                nonce,\\n                tokenContract,\\n                msg.sender,\\n                to,\\n                toChainId,\\n                tokenIds\\n            )\\n        );\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            tokenContract.transferFrom(msg.sender, address(this), tokenIds[i]);\\n        }\\n\\n        emit SwapToChain(toChainId, nonce, tokenContract, msg.sender, to, swapId, tokenIds);\\n    }\\n\\n    function swapFromChain(\\n        address relayContract,\\n        uint256 fromChainId,\\n        uint256 sourceSwapNonce,\\n        address sourceTokenContract,\\n        ERC721 tokenContract,\\n        address from,\\n        address to,\\n        bytes32 swapId,\\n        uint256[] calldata tokenIds\\n    ) public onlySwapper {\\n        uint256 chainID;\\n        assembly {\\n            chainID := chainid()\\n        }\\n        bytes32 swapIdCheck = keccak256(\\n            abi.encodePacked(\\n                relayContract,\\n                fromChainId,\\n                sourceSwapNonce,\\n                sourceTokenContract,\\n                from,\\n                to,\\n                chainID,\\n                tokenIds\\n            )\\n        );\\n        if (swapId != swapIdCheck) {\\n            revert SwapIdMismatch();\\n        }\\n\\n        if (shouldSwap(swapId, msg.sender)) {\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\n                tokenContract.transferFrom(address(this), to, tokenIds[i]);\\n            }\\n        }\\n\\n        emit SwapFromChain(tokenContract, from, to, swapId, fromChainId, tokenIds);\\n    }\\n\\n    function getSwapNonce() internal returns (uint256) {\\n        return ++swapNonce;\\n    }\\n\\n    function withdraw() public onlyAdmin {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function withdrawTokens(Erc20 token) public onlyAdmin {\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    },\r\n    \"common8/LicenseRef-Blockwell-Smart-License.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Blockwell-Smart-License\\n/*\\n\\nBLOCKWELL SMART LICENSE\\n\\nEveryone is permitted to copy and distribute verbatim copies of this license\\ndocument, but changing it is not allowed.\\n\\n\\nPREAMBLE\\n\\nBlockwell provides a blockchain platform designed to make cryptocurrency fast,\\neasy and low cost. It enables anyone to tokenize, monetize, analyze and scale\\ntheir business with blockchain. Users who deploy smart contracts on\\nBlockwell\u2019s blockchain agree to do so on the terms and conditions of this\\nBlockwell Smart License, unless otherwise expressly agreed in writing with\\nBlockwell.\\n\\nThe Blockwell Smart License is an evolved version of GNU General Public\\nLicense version 2. The extent of the modification is to reflect Blockwell\u2019s\\nintention to require its users to send a minting and system transfer fee to\\nthe Blockwell network each time a smart contract is deployed (or token is\\ncreated). These fees will then be distributed among Blockwell token holders\\nand to contributors that build and support the Blockwell ecosystem.\\n\\nYou can create a token on the Blockwell network at:\\nhttps://app.blockwell.ai/prime\\n\\nThe accompanying source code can be used in accordance with the terms of this\\nLicense, using the following arguments, with the bracketed arguments being\\ncontractually mandated by this license:\\n\\ntokenName, tokenSymbol, tokenDecimals, tokenSupply, founderWallet,\\n[0xda0f00d92086E50099742B6bfB0230c942DdA4cC],\\n[0xda0f00d92086E50099742B6bfB0230c942DdA4cC], [20], attorneyWallet,\\nattorneyAndLegalEmailAddress\\n\\nThe precise terms and conditions for copying, distribution, deployment and\\nmodification follow.\\n\\n\\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION, DEPLOYMENT AND MODIFICATION\\n\\n0. This License applies to any program or other work which contains a notice\\n   placed by the copyright holder saying it may be distributed under the terms\\n   of this License. The \\\"Program\\\", below, refers to any such program or work,\\n   and a \\\"work based on the Program\\\" means either the Program or any\\n   derivative work under copyright law: that is to say, a work containing the\\n   Program or a portion of it, either verbatim or with modifications and/or\\n   translated into another language. (Hereinafter, translation is included\\n   without limitation in the term \\\"modification\\\".) Each licensee is addressed\\n   as \\\"you\\\".\\n\\n   Activities other than copying, distribution, deployment and modification are\\n   not covered by this License; they are outside its scope. The act of running\\n   the Program is not restricted, and the output from the Program is covered only\\n   if its contents constitute a work based on the Program (independent of having\\n   been made by running the Program). Whether that is true depends on what the\\n   Program does.\\n\\n1. You may copy and distribute verbatim copies of the Program's source code as\\n   you receive it, in any medium, provided that you conspicuously and\\n   appropriately publish on each copy an appropriate copyright notice and\\n   disclaimer of warranty; keep intact all the notices that refer to this\\n   License and to the absence of any warranty; and give any other recipients\\n   of the Program a copy of this License along with the Program.\\n\\n   You may charge a fee for the physical act of transferring a copy, and you may\\n   at your option offer warranty protection in exchange for a fee.\\n\\n2. You may modify your copy or copies of the Program or any portion of it,\\n   thus forming a work based on the Program, and copy and distribute such\\n   modifications or work under the terms of Section 1 above, provided that you\\n   also meet all of these conditions:\\n\\na) You must cause the modified files to carry prominent notices stating that\\n   you changed the files.\\n\\nb) You must cause any work that you distribute or publish, that in whole or in\\n   part contains or is derived from the Program or any part thereof, to be\\n   licensed as a whole to all third parties under the terms of this License.\\n\\nc) You must cause Blockwell Fee Wallet\\n   \u201c0xda0f00d92086E50099742B6bfB0230c942DdA4cC\u201d to receive 2% of the total\\n   supply of tokens each and every any time tokens are created on the\\n   Blockchain network. This can be achieved using the current version of the\\n   source code to which this License attaches by setting the \u201cfeeAccount\u201d\\n   parameter to Blockwell Fee Wallet\\n   \u201c0xda0f00d92086E50099742B6bfB0230c942DdA4cC\u201d, and the \u201cfeePercentageTenths\u201d\\n   parameter to \u201c20\u201d when deploying.\\n\\nd) You must add Blockwell\u2019s wallet\\n   \u201c0xda0f00d92086E50099742B6bfB0230c942DdA4cC\u201d as a BW Admin, and you must\\n   not restrict the abilities of a BW Admin in any derivative works. This can\\n   be achieved using the current version of the source code to which this\\n   License attaches by setting the \u201cbwAdmin\u201d parameter to Blockwell\u2019s wallet\\n   \u201c0xda0f00d92086E50099742B6bfB0230c942DdA4cC\u201d when deploying.\\n\\n   These requirements apply to the modified work as a whole. If identifiable\\n   sections of that work are not derived from the Program, and can be reasonably\\n   considered independent and separate works in themselves, then this License,\\n   and its terms, do not apply to those sections when you distribute them as\\n   separate works. But when you distribute the same sections as part of a whole\\n   which is a work based on the Program, the distribution of the whole must be on\\n   the terms of this License, whose permissions for other licensees extend to the\\n   entire whole, and thus to each and every part regardless of who wrote it.\\n\\n   Thus, it is not the intent of this section to claim rights or contest your\\n   rights to work written entirely by you; rather, the intent is to exercise the\\n   right to control the distribution of derivative or collective works based on\\n   the Program.\\n\\n   In addition, mere aggregation of another work not based on the Program with\\n   the Program (or with a work based on the Program) on a volume of a storage or\\n   distribution medium does not bring the other work under the scope of this\\n   License.\\n\\n3. You may copy and distribute the Program (or a work based on it, under\\n   Section 2) in object code or executable form under the terms of Sections 1\\n   and 2 above provided that you also make good faith and reasonable attempts\\n   to make available the complete corresponding machine-readable source code,\\n   which must be distributed under the terms of Sections 1 and 2 above.\\n\\n   The source code for a work means the preferred form of the work for making\\n   modifications to it. For an executable work, complete source code means all\\n   the source code for all modules it contains, plus any associated interface\\n   definition files, plus the scripts used to control compilation and\\n   installation of the executable. However, as a special exception, the source\\n   code distributed need not include anything that is normally distributed (in\\n   either source or binary form) with the major components (compiler, kernel, and\\n   so on) of the operating system on which the executable runs, unless that\\n   component itself accompanies the executable.\\n\\n   If distribution of executable or object code is made by offering access to\\n   copy from a designated place, then offering equivalent access to copy the\\n   source code from the same place counts as distribution of the source code,\\n   even though third parties are not compelled to copy the source along with the\\n   object code.\\n\\n   Distribution and execution of executable or object code as part of existing\\n   smart contracts on the blockchain in the normal operation of the blockchain\\n   network (miners, node hosts, infrastructure providers and so on) is excepted\\n   from the requirement to make available the source code as set out in this\\n   clause.\\n\\n4. You may not copy, modify, sublicense, or distribute the Program except as\\n   expressly provided under this License. Any attempt otherwise to copy,\\n   modify, sublicense or distribute the Program is void, and will\\n   automatically terminate your rights under this License. However, parties\\n   who have received copies, or rights, from you under this License will not\\n   have their licenses terminated so long as such parties remain in full\\n   compliance.\\n\\n5. You are not required to accept this License, since you have not signed it.\\n   However, nothing else grants you permission to modify or distribute the\\n   Program or its derivative works. These actions are prohibited by law if you\\n   do not accept this License. Therefore, by modifying or distributing the\\n   Program (or any work based on the Program), you indicate your acceptance of\\n   this License to do so, and all its terms and conditions for copying,\\n   distributing or modifying the Program or works based on it.\\n\\n6. Each time you redistribute the Program (or any work based on the Program),\\n   the recipient automatically receives a license from the original licensor\\n   to copy, distribute or modify the Program subject to these terms and\\n   conditions. You may not impose any further restrictions on the recipients'\\n   exercise of the rights granted herein. You are not responsible for\\n   enforcing compliance by third parties to this License.\\n\\n7. If, as a consequence of a court judgment or allegation of patent\\n   infringement or for any other reason (not limited to patent issues),\\n   conditions are imposed on you (whether by court order, agreement or\\n   otherwise) that contradict the conditions of this License, they do not\\n   excuse you from the conditions of this License. If you cannot distribute so\\n   as to satisfy simultaneously your obligations under this License and any\\n   other pertinent obligations, then as a consequence you may not distribute\\n   the Program at all. For example, if a patent license would not permit\\n   royalty-free redistribution of the Program by all those who receive copies\\n   directly or indirectly through you, then the only way you could satisfy\\n   both it and this License would be to refrain entirely from distribution of\\n   the Program.\\n\\n   If any portion of this section is held invalid or unenforceable under any\\n   particular circumstance, the balance of the section is intended to apply and\\n   the section as a whole is intended to apply in other circumstances.\\n\\n   It is not the purpose of this section to induce you to infringe any patents or\\n   other property right claims or to contest validity of any such claims; this\\n   section has the sole purpose of protecting the integrity of the free software\\n   distribution system, which is implemented by public license practices. Many\\n   people have made generous contributions to the wide range of software\\n   distributed through that system in reliance on consistent application of that\\n   system; it is up to the author/donor to decide if he or she is willing to\\n   distribute software through any other system and a licensee cannot impose that\\n   choice.\\n\\n   This section is intended to make thoroughly clear what is believed to be a\\n   consequence of the rest of this License.\\n\\n8. Blockwell may publish revised and/or new versions of the Blockwell Smart\\n   License from time to time. Such new versions will be similar in spirit to\\n   the present version, but may differ in detail to address new problems or\\n   concerns.\\n\\n\\nNO WARRANTY\\n\\n9. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE\\n   LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\\n   OTHER PARTIES PROVIDE THE PROGRAM \\\"AS IS\\\" WITHOUT WARRANTY OF ANY KIND,\\n   EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\n   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE\\n   ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM AND YOUR USE\\n   OF THE SOURCE CODE INCLUDING AS TO ITS COMPLIANCE WITH ANY APPLICABLE LAW\\n   IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL\\n   NECESSARY SERVICING, REPAIR OR CORRECTION.\\n\\n10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL\\n    ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\\n    REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\\n    INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES\\n    ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT\\n    LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES\\n    SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE\\n    WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN\\n    ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\\n\\nEND OF TERMS AND CONDITIONS\\n\\n*/\\n\\npragma solidity >=0.8.0;\\n\\ncontract NoContract {\\n\\n}\\n\"\r\n    },\r\n    \"common8/relay/RelayBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Blockwell-Smart-License\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ContractGroups.sol\\\";\\nimport \\\"common/Type.sol\\\";\\n\\n/**\\n * @dev Relay contract for verifying crosschain swaps.\\n *\\n * Blockwell Exclusive (Intellectual Property that lives on-chain via Smart License)\\n */\\ncontract RelayBase is ContractGroups, Type {\\n    struct SwapData {\\n        bool swapped;\\n        address[] swappers;\\n    }\\n\\n    string public name = \\\"SwapRelay\\\";\\n\\n    uint256 public swappersNeeded;\\n\\n    mapping(bytes32 => bool) public swapDone;\\n\\n    mapping(bytes32 => address[]) internal swaps;\\n\\n    event Swap(bytes32 indexed swapId, address indexed swapper, uint256 indexed count);\\n    event SwappersNeededUpdate(uint256 indexed count);\\n\\n    constructor(uint256 _swappersNeeded) {\\n        swappersNeeded = _swappersNeeded;\\n        _addAdmin(msg.sender);\\n\\n        bwtype = SWAP_RELAY;\\n        bwver = 85;\\n    }\\n\\n    function setSwappersNeeded(uint256 count) public onlyAdmin {\\n        expect(count > 0, ERROR_BAD_PARAMETER_1);\\n        swappersNeeded = count;\\n        emit SwappersNeededUpdate(count);\\n    }\\n\\n    function swapsDone(bytes32[] calldata swapIds) public view returns (bool[] memory) {\\n        bool[] memory done = new bool[](swapIds.length);\\n\\n        for (uint256 i = 0; i < swapIds.length; i++) {\\n            done[i] = swapDone[swapIds[i]];\\n        }\\n\\n        return done;\\n    }\\n\\n    function swapRelayers(bytes32 swapId) public view returns (address[] memory) {\\n        return swaps[swapId];\\n    }\\n\\n    function shouldSwap(bytes32 swapId, address swapper) internal returns (bool) {\\n        if (swapDone[swapId]) {\\n            return false;\\n        }\\n        address[] storage swappers = swaps[swapId];\\n\\n        for (uint256 i = 0; i < swappers.length; i++) {\\n            if (swappers[i] == swapper) {\\n                return false;\\n            }\\n        }\\n\\n        emit Swap(swapId, swapper, swappers.length + 1);\\n        if (swappers.length + 1 >= swappersNeeded) {\\n            swapDone[swapId] = true;\\n            if (swappers.length > 0) {\\n                delete swaps[swapId];\\n            }\\n            return true;\\n        }\\n\\n        swappers.push(swapper);\\n\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"common8/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.6;\\n\\n/// @title ERC-721 Non-Fungible Token Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface ERC721 /* is ERC165 */ {\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an NFT\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    ///  all of `msg.sender`'s assets\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\n    ///  multiple operators per owner.\\n    /// @param _operator Address to add to the set of authorized operators\\n    /// @param _approved True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"common8/Erc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.0;\\n\\ninterface Erc20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"common8/ERC721TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.6;\\n\\ninterface ERC721TokenReceiver {\\n    /// @notice Handle the receipt of an NFT\\n    /// @dev The ERC721 smart contract calls this function on the recipient\\n    ///  after a `transfer`. This function MAY throw to revert and reject the\\n    ///  transfer. Return of other than the magic value MUST result in the\\n    ///  transaction being reverted.\\n    ///  Note: the contract address is always the message sender.\\n    /// @param _operator The address which called `safeTransferFrom` function\\n    /// @param _from The address which previously owned the token\\n    /// @param _tokenId The NFT identifier which is being transferred\\n    /// @param _data Additional data with no specified format\\n    /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    ///  unless throwing\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes memory _data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"common8/relay/ContractGroups.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Blockwell-Smart-License\\npragma solidity ^0.8.9;\\n\\nimport \\\"common/ErrorCodes.sol\\\";\\nimport \\\"../Groups.sol\\\";\\n\\n/**\\n * @dev User groups for SwapRelay.\\n *\\n * Blockwell Exclusive (Intellectual Property that lives on-chain via Smart License)\\n */\\ncontract ContractGroups is ErrorCodes {\\n    uint8 public constant ADMIN = 1;\\n    uint8 public constant SWAPPERS = 7;\\n\\n    using Groups for Groups.GroupMap;\\n\\n    Groups.GroupMap groups;\\n\\n    event AddedToGroup(uint8 indexed groupId, address indexed account);\\n    event RemovedFromGroup(uint8 indexed groupId, address indexed account);\\n\\n\\n    modifier onlyAdmin() {\\n        expect(isAdmin(msg.sender), ERROR_UNAUTHORIZED);\\n        _;\\n    }\\n    // ADMIN\\n\\n    function _addAdmin(address account) internal {\\n        _add(ADMIN, account);\\n    }\\n\\n    function addAdmin(address account) public onlyAdmin {\\n        _addAdmin(account);\\n    }\\n\\n    function removeAdmin(address account) public onlyAdmin {\\n        _remove(ADMIN, account);\\n    }\\n\\n    function isAdmin(address account) public view returns (bool) {\\n        return _contains(ADMIN, account);\\n    }\\n\\n    // SWAPPERS\\n\\n    function addSwapper(address account) public onlyAdmin {\\n        _addSwapper(account);\\n    }\\n\\n    function _addSwapper(address account) internal {\\n        _add(SWAPPERS, account);\\n    }\\n\\n    function removeSwapper(address account) public onlyAdmin {\\n        _remove(SWAPPERS, account);\\n    }\\n\\n    function isSwapper(address account) public view returns (bool) {\\n        return _contains(SWAPPERS, account);\\n    }\\n\\n    modifier onlySwapper() {\\n        expect(isSwapper(msg.sender), ERROR_UNAUTHORIZED);\\n        _;\\n    }\\n\\n    // Internal functions\\n\\n    function _add(uint8 groupId, address account) internal {\\n        groups.add(groupId, account);\\n        emit AddedToGroup(groupId, account);\\n    }\\n\\n    function _remove(uint8 groupId, address account) internal {\\n        groups.remove(groupId, account);\\n        emit RemovedFromGroup(groupId, account);\\n    }\\n\\n    function _contains(uint8 groupId, address account) internal view returns (bool) {\\n        return groups.contains(groupId, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"common/Type.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Blockwell-Smart-License\\npragma solidity >=0.4.25;\\n\\n/**\\n * @dev Contract type mapping.\\n *\\n * Blockwell Exclusive (Intellectual Property that lives on-chain via Smart License)\\n */\\ncontract Type {\\n    uint256 constant PRIME = 1; // Prime/master/build/PrimeToken.abi happ=suggestions features=erc20,suggestions\\n    uint256 constant PRIDE = 2; // Pride/build/PrideToken.abi features=erc20\\n    uint256 constant FOOD_COIN = 3; // Prime/foodcoin/build/FoodCoin.abi features=erc20\\n    uint256 constant EGO = 4; // OldEgoCoin/master/build/EgoCoin.abi happ=suggestions features=erc20\\n    uint256 constant EGO_TIME_BASED = 5;  // OldEgoCoin/time-based/build/EgoCoin.abi happ=suggestions features=erc20\\n    uint256 constant EGO_TRAINER_TOKEN = 6;  // OldEgoCoin/trainer-token/build/TrainerToken.abi features=erc20\\n    uint256 constant DAICO = 7; // Daico/build/Daico.abi happ=daico features=daico\\n    uint256 constant ITEM_DROPS = 8; // ItemDrops/build/ItemDrops.abi happ=lotto features=lotto\\n    uint256 constant ITEM_TOKEN = 9; // ItemDrops/build/ItemToken.abi features=erc20\\n    uint256 constant COMMUNITY = 10; // Community/build/CommunityToken.abi happ=suggestions features=erc20,suggestions,proposals\\n    uint256 constant PAYMENT_RELAY = 11; // PaymentRelay/build/PaymentRelay.abi\\n    uint256 constant GHOST = 12; // Ghost/build/GhostToken.abi features=erc20\\n    uint256 constant FORUM = 13;  // Forum/build/ForumToken.abi happ=nft features=erc721,suggestions,proposals\\n    uint256 constant BOOK = 14;  //Book/build/BaseBook.abi happ=book features=book\\n    uint256 constant VOTING_BOOK = 15;  //Book/build/VotingBook.abi happ=book\\n    uint256 constant REFUNDS = 16;  //Refund/build/Refunds.abi happ=refunds features=refunds\\n    uint256 constant SMART_LICENSE = 17;  //SmartLicense/build/SmartLicense.abi happ=smart features=smart-license\\n    uint256 constant FIRE = 18;  //OldFire/standard/build/FireToken.abi features=erc20\\n    uint256 constant CORE = 19;  //Core/build/CoreToken.abi happ=core features=erc20,suggestions,core\\n    uint256 constant CORE_TASKS_EXTENSION = 20;  //Core/build/TasksExtension.abi happ=core\\n    uint256 constant PRICES = 21;  //Prices/build/Prices.abi\\n    uint256 constant CORE_TASKS_LIBRARY = 22; //Core/build/TasksLibrary.abi\\n    uint256 constant CORE_FREELANCE_EXTENSION = 23; //Core/build/FreelanceExtension.abi happ=core\\n    uint256 constant CORE_FREELANCE_LIBRARY = 24; //Core/build/FreelanceLibrary.abi\\n    uint256 constant HOURGLASS = 25; //Hourglass/build/Hourglass.abi happ=hourglass features=erc20,hourglass\\n    uint256 constant NFT = 26; //Nft/build/NfToken.abi happ=nft features=erc721\\n    uint256 constant PARTIAL_NFT = 27; //Nft/build/PartialNft.abi happ=nft features=erc721\\n    uint256 constant FUEL = 28; //Fuel/build/FuelToken.abi features=erc20,stake\\n    uint256 constant SWAPPER = 29; //Swapper/build/Swapper.abi features=swapper\\n    uint256 constant SWAP_RELAY = 30; //Prime/master/build/SwapRelay.abi\\n    uint256 constant NFT_ITEM_POOL = 31; //ItemDrops/build/NftItemPool.abi features=item-pool\\n    uint256 constant SWAP_RELAY_V1 = 32; //Prime/master/build/SwapRelayV1.abi\\n    uint256 constant SMART_RELAY = 33; //SmartLicense/build/SmartRelay.abi features=smart-relay\\n    uint256 constant SWAP_NFT_RELAY = 34; //Nft/build/SwapNftRelay.abi features=nft-swap\\n    uint256 constant GAME_NFT = 35; //Nft/build/GameNft.abi features=erc721\\n\\n    uint256 constant PRIME_DEPLOYER = 50;  //Prime/master/build/PrimeDeployer.abi features=deployer\\n    uint256 constant DAICO_DEPLOYER = 51;  //Daico/build/DaicoDeployer.abi features=deployer\\n    uint256 constant PRIME_GIVER = 52;  //Prime/master/build/PrimeGiver.abi\\n    uint256 constant FORUM_DEPLOYER = 53;  //Forum/build/ForumDeployer.abi features=deployer\\n    uint256 constant COMMUNITY_DEPLOYER = 54;  //Community/build/CommunityDeployer.abi features=deployer\\n    uint256 constant ITEM_DROPS_DEPLOYER = 55;  //ItemDrops/build/ItemDropsDeployer.abi features=deployer\\n    uint256 constant BOOK_DEPLOYER = 56;  //Book/build/BookDeployer.abi features=deployer\\n    uint256 constant SMART_LICENSE_DEPLOYER = 57;  //SmartLicense/build/SmartLicenseDeployer.abi features=deployer\\n    uint256 constant HOURGLASS_DEPLOYER = 58;  //Hourglass/build/HourglassDeployer.abi features=deployer\\n    uint256 constant NFT_DEPLOYER = 59;  //Nft/build/NftDeployer.abi features=deployer\\n\\n    uint256 constant PROXY_TOKEN = 100;  //Proxy/build/ProxyToken.abi features=erc20\\n    uint256 constant PROXY_TOKEN_DEPLOYER = 101;  //Proxy/build/ProxyTokenDeployer.abi features=deployer\\n    uint256 constant PROXY_DEPLOYER = 102;  //Proxy/build/ProxyDeployer.abi features=deployer\\n    uint256 constant PROXY_SWAPPER = 103;  //Proxy/build/ProxySwapper.abi\\n    uint256 constant CROSSCHAIN_TOKEN = 104;  //Crosschain/build/CrosschainToken.abi features=erc20\\n    uint256 constant CROSSCHAIN_DEPLOYER = 105;  //Crosschain/build/CrosschainDeployer.abi features=deployer\\n    uint256 constant REFUNDS_DEPLOYER = 106;  //Refund/build/RefundsDeployer.abi features=deployer\\n    uint256 constant SWAPPER_DEPLOYER = 107;  //Swapper/build/SwapperDeployer.abi features=deployer\\n\\n    uint256 constant RESERVED1 = 1001;\\n\\n    uint256 public bwtype;\\n    uint256 public bwver;\\n}\\n\"\r\n    },\r\n    \"common/ErrorCodes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Blockwell-Smart-License\\npragma solidity >=0.4.25;\\n\\n/**\\n * Gas-efficient error codes and replacement for require.\\n *\\n * This uses significantly less gas, and reduces the length of the contract bytecode.\\n */\\ncontract ErrorCodes {\\n\\n    bytes2 constant ERROR_RESERVED = 0xe100;\\n    bytes2 constant ERROR_RESERVED2 = 0xe200;\\n    bytes2 constant ERROR_MATH = 0xe101;\\n    bytes2 constant ERROR_FROZEN = 0xe102;\\n    bytes2 constant ERROR_INVALID_ADDRESS = 0xe103;\\n    bytes2 constant ERROR_ZERO_VALUE = 0xe104;\\n    bytes2 constant ERROR_INSUFFICIENT_BALANCE = 0xe105;\\n    bytes2 constant ERROR_WRONG_TIME = 0xe106;\\n    bytes2 constant ERROR_EMPTY_ARRAY = 0xe107;\\n    bytes2 constant ERROR_LENGTH_MISMATCH = 0xe108;\\n    bytes2 constant ERROR_UNAUTHORIZED = 0xe109;\\n    bytes2 constant ERROR_DISALLOWED_STATE = 0xe10a;\\n    bytes2 constant ERROR_TOO_HIGH = 0xe10b;\\n    bytes2 constant ERROR_ERC721_CHECK = 0xe10c;\\n    bytes2 constant ERROR_PAUSED = 0xe10d;\\n    bytes2 constant ERROR_NOT_PAUSED = 0xe10e;\\n    bytes2 constant ERROR_ALREADY_EXISTS = 0xe10f;\\n\\n    bytes2 constant ERROR_OWNER_MISMATCH = 0xe110;\\n    bytes2 constant ERROR_LOCKED = 0xe111;\\n    bytes2 constant ERROR_TOKEN_LOCKED = 0xe112;\\n    bytes2 constant ERROR_ATTORNEY_PAUSE = 0xe113;\\n    bytes2 constant ERROR_VALUE_MISMATCH = 0xe114;\\n    bytes2 constant ERROR_TRANSFER_FAIL = 0xe115;\\n    bytes2 constant ERROR_INDEX_RANGE = 0xe116;\\n    bytes2 constant ERROR_PAYMENT = 0xe117;\\n    bytes2 constant ERROR_BAD_PARAMETER_1 = 0xe118;\\n    bytes2 constant ERROR_BAD_PARAMETER_2 = 0xe119;\\n\\n    function expect(bool pass, bytes2 code) internal pure {\\n        if (!pass) {\\n            assembly {\\n                mstore(0x40, code)\\n                revert(0x40, 0x02)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"common8/Groups.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Blockwell-Smart-License\\npragma solidity >=0.8.9;\\n\\nerror Unauthorized(uint8 group);\\n\\n/**\\n * @dev Unified system for arbitrary user groups.\\n *\\n * Blockwell Exclusive (Intellectual Property that lives on-chain via Smart License)\\n */\\nlibrary Groups {\\n    struct MemberMap {\\n        mapping(address => bool) members;\\n    }\\n\\n    struct GroupMap {\\n        mapping(uint8 => MemberMap) groups;\\n    }\\n\\n    /**\\n     * @dev Add an account to a group\\n     *\\n     * Blockwell Exclusive (Intellectual Property that lives on-chain via Smart License)\\n     */\\n    function add(\\n        GroupMap storage map,\\n        uint8 groupId,\\n        address account\\n    ) internal {\\n        MemberMap storage group = map.groups[groupId];\\n        require(account != address(0));\\n        require(!groupContains(group, account));\\n\\n        group.members[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account from a group\\n     *\\n     * Blockwell Exclusive (Intellectual Property that lives on-chain via Smart License)\\n     */\\n    function remove(\\n        GroupMap storage map,\\n        uint8 groupId,\\n        address account\\n    ) internal {\\n        MemberMap storage group = map.groups[groupId];\\n        require(account != address(0));\\n        require(groupContains(group, account));\\n\\n        group.members[account] = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the account is in the group\\n     *\\n     * Blockwell Exclusive (Intellectual Property that lives on-chain via Smart License)\\n     * @return bool\\n     */\\n    function contains(\\n        GroupMap storage map,\\n        uint8 groupId,\\n        address account\\n    ) internal view returns (bool) {\\n        MemberMap storage group = map.groups[groupId];\\n        return groupContains(group, account);\\n    }\\n\\n    function groupContains(MemberMap storage group, address account) internal view returns (bool) {\\n        require(account != address(0));\\n        return group.members[account];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swappersNeeded\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SwapIdMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"groupId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedToGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"groupId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC721\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"SwapFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract ERC721\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"SwapToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"SwappersNeededUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAPPERS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bwtype\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bwver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSwapper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setSwappersNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swapDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceSwapNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceTokenContract\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"swapFromChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"swapRelayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"swapToChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swappersNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"swapIds\",\"type\":\"bytes32[]\"}],\"name\":\"swapsDone\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Erc20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwapNftRelay", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://db4c630fdaa370215d2be90b15d3096ba9d4a54d86f196f0b3c0f894c73aaaf8"}]}