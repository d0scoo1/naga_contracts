{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UniPlayVesting.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract UniplayVesting is Ownable,ReentrancyGuard {\\n\\n    IERC20 public token;\\n\\n    uint256 public startDate;\\n    uint256 public activeLockDate;\\n    bool isremoved;\\n    bool public isStart;\\n    mapping(address=>mapping(uint=>bool)) public isSameInvestor;\\n\\n    uint[7] public  lockEnd=[0,seedLockEndDate,privateLockEndDate,teamLockEndDate,launchpadLockEndDate,marketdevelopmentLockEndDate,airdropcampaignLockEndDate];\\n    uint[7] public vestEnd=[0,seedVestingEndDate,privateVestingEndDate,teamVestingEndDate,launchpadVestingEndDate,marketdevelopmentVestingEndDate,airdropcampaignVestingEndDate];\\n    uint256 day = 60;\\n\\n    modifier setStart{\\n        require(isStart==true,\\\"wait for start\\\");\\n        _;\\n    }\\n\\n    event TokenWithdraw(address indexed buyer, uint value);\\n    event InvestersAddress(address accoutt, uint _amout,uint saletype);\\n\\n    mapping(address => InvestorDetails) public Investors;\\n\\n  \\n\\n    uint256 public seedStartDate;\\n    uint256 public privateStartDate;\\n    uint256 public teamStartDate;\\n    uint256 public launchpadStartDate;\\n    uint256 public marketdevelopmentStartDate;\\n    uint256 public airdropcampaignStartDate;\\n\\n    uint256 public seedLockEndDate;\\n    uint256 public privateLockEndDate;\\n    uint256 public teamLockEndDate;\\n    uint256 public launchpadLockEndDate;\\n    uint256 public marketdevelopmentLockEndDate;\\n    uint256 public airdropcampaignLockEndDate;\\n\\n    uint256 public seedVestingEndDate;\\n    uint256 public privateVestingEndDate;\\n    uint256 public teamVestingEndDate;\\n    uint256 public launchpadVestingEndDate;\\n    uint256 public marketdevelopmentVestingEndDate;\\n    uint256 public airdropcampaignVestingEndDate;\\n   \\n    receive() external payable {\\n    }\\n    \\n    /* Withdraw the contract's ETH balance to owner wallet*/\\n    function extractETH() public onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function getInvestorDetails(address _addr) public view returns(InvestorDetails memory){\\n        return Investors[_addr];\\n    }\\n\\n    \\n    function getContractTokenBalance() public view returns(uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n    \\n    \\n    /* \\n        Transfer the remining token to different wallet. \\n        Once the ICO is completed and if there is any remining tokens it can be transfered other wallets.\\n    */\\n    function transferToken(address _addr, uint256 value) public onlyOwner {\\n        require(value <= token.balanceOf(address(this)), 'Insufficient balance to withdraw');\\n        token.transfer(_addr, value);\\n    }\\n\\n    /* Utility function for testing. The token address used in this ICO contract can be changed. */\\n    function setTokenAddress(address _addr) public onlyOwner {\\n        token = IERC20(_addr);\\n    }\\n\\n\\n    struct Investor {\\n        address account;\\n        uint256 amount;\\n        uint8 saleType;\\n    }\\n\\n    struct InvestorDetails {\\n        uint256 totalBalance;\\n        uint256 timeDifference;\\n        uint256 lastVestedTime;\\n        uint256 reminingUnitsToVest;\\n        uint256 tokensPerUnit;\\n        uint256 vestingBalance;\\n        uint256 investorType;\\n        uint256 initialAmount;\\n        bool isInitialAmountClaimed;\\n    }\\n\\n\\n    function addInvestorDetails(Investor[] memory investorArray) public onlyOwner {\\n        for(uint16 i = 0; i < investorArray.length; i++) {\\n         if(isremoved){\\n                 isSameInvestor[investorArray[i].account][investorArray[i].saleType]=true;\\n                 isremoved=false;\\n            }else{  \\n                require(!isSameInvestor[investorArray[i].account][investorArray[i].saleType],\\\"Investor Exist\\\");\\n                isSameInvestor[investorArray[i].account][investorArray[i].saleType]=true;\\n            }\\n\\n             uint8 saleType = investorArray[i].saleType;\\n            InvestorDetails memory investor;\\n            investor.totalBalance = (investorArray[i].amount) * (10 ** 18);\\n            investor.investorType = investorArray[i].saleType;\\n            investor.vestingBalance = investor.totalBalance;\\n            if(saleType == 1) {\\n                investor.reminingUnitsToVest = 365;\\n                investor.initialAmount = (investor.totalBalance * 5)/(100);\\n                investor.tokensPerUnit = ((investor.totalBalance) - (investor.initialAmount))/(365);\\n            }\\n\\n            if(saleType == 2) {\\n                investor.reminingUnitsToVest = 300;\\n                investor.initialAmount = (investor.totalBalance * 8)/(100);\\n                investor.tokensPerUnit = ((investor.totalBalance) - (investor.initialAmount))/(300);\\n            }\\n\\n            if(saleType == 3) {\\n                investor.reminingUnitsToVest = 1095;\\n                investor.initialAmount = 0;\\n                investor.tokensPerUnit = investor.totalBalance/1095;\\n            }\\n\\n            if(saleType == 4){\\n                investor.reminingUnitsToVest = 240;\\n                investor.initialAmount = (investor.totalBalance * 10)/(100);\\n                investor.tokensPerUnit = ((investor.totalBalance)-(investor.initialAmount))/(240);\\n            }\\n\\n            if(saleType == 5){\\n                investor.reminingUnitsToVest = 730;\\n                investor.initialAmount = 0;\\n                investor.tokensPerUnit = investor.totalBalance/730;\\n            }\\n            if(saleType == 6){\\n                investor.reminingUnitsToVest = 180;\\n                investor.initialAmount = 0;\\n                investor.tokensPerUnit = investor.totalBalance/180;\\n\\n            }\\n\\n            Investors[investorArray[i].account] = investor; \\n            emit InvestersAddress(investorArray[i].account,investorArray[i].amount, investorArray[i].saleType);\\n        }\\n        \\n       \\n\\n    }\\n\\n    function withdrawTokens() public   nonReentrant setStart {\\n        require(block.timestamp >=seedStartDate,\\\"wait for start date\\\");\\n        require(Investors[msg.sender].investorType >0,\\\"Investor Not Found\\\");\\n        vestEnd=[0,seedVestingEndDate,privateVestingEndDate,teamVestingEndDate,launchpadVestingEndDate,marketdevelopmentVestingEndDate,airdropcampaignVestingEndDate];\\n        lockEnd=[0,seedLockEndDate,privateLockEndDate,teamLockEndDate,launchpadLockEndDate,marketdevelopmentLockEndDate,airdropcampaignLockEndDate];           \\n        if(Investors[msg.sender].isInitialAmountClaimed || Investors[msg.sender].investorType == 3 || Investors[msg.sender].investorType == 5 || Investors[msg.sender].investorType == 6) {\\n            require(block.timestamp>=lockEnd[Investors[msg.sender].investorType],\\\"wait until lock period complete\\\");\\n            activeLockDate = lockEnd[Investors[msg.sender].investorType] ;\\n            /* Time difference to calculate the interval between now and last vested time. */\\n            uint256 timeDifference;\\n            if(Investors[msg.sender].lastVestedTime == 0) {\\n                require(activeLockDate > 0, \\\"Active lockdate was zero\\\");\\n                timeDifference = (block.timestamp) - (activeLockDate);\\n            } else {\\n                timeDifference = (block.timestamp) -(Investors[msg.sender].lastVestedTime);\\n            }\\n            \\n            /* Number of units that can be vested between the time interval */\\n            uint256 numberOfUnitsCanBeVested = (timeDifference)/(day);\\n            \\n            /* Remining units to vest should be greater than 0 */\\n            require(Investors[msg.sender].reminingUnitsToVest > 0, \\\"All units vested!\\\");\\n            \\n            /* Number of units can be vested should be more than 0 */\\n            require(numberOfUnitsCanBeVested > 0, \\\"Please wait till next vesting period!\\\");\\n\\n            if(numberOfUnitsCanBeVested >= Investors[msg.sender].reminingUnitsToVest) {\\n                numberOfUnitsCanBeVested = Investors[msg.sender].reminingUnitsToVest;\\n            }\\n            \\n            /*\\n                1. Calculate number of tokens to transfer\\n                2. Update the investor details\\n                3. Transfer the tokens to the wallet\\n            */\\n            uint256 tokenToTransfer = numberOfUnitsCanBeVested * Investors[msg.sender].tokensPerUnit;\\n            uint256 reminingUnits = Investors[msg.sender].reminingUnitsToVest;\\n            uint256 balance = Investors[msg.sender].vestingBalance;\\n            Investors[msg.sender].reminingUnitsToVest -= numberOfUnitsCanBeVested;\\n            Investors[msg.sender].vestingBalance -= numberOfUnitsCanBeVested * Investors[msg.sender].tokensPerUnit;\\n            Investors[msg.sender].lastVestedTime = block.timestamp;\\n            if(numberOfUnitsCanBeVested == reminingUnits) { \\n                token.transfer(msg.sender, balance);\\n                emit TokenWithdraw(msg.sender, balance);\\n            } else {\\n                token.transfer(msg.sender, tokenToTransfer);\\n                emit TokenWithdraw(msg.sender, tokenToTransfer);\\n            }  \\n        }\\n        else {\\n            require(!Investors[msg.sender].isInitialAmountClaimed, \\\"Amount already withdrawn!\\\");\\n            require(block.timestamp >seedStartDate,\\\"wait for start date\\\");\\n            Investors[msg.sender].vestingBalance -= Investors[msg.sender].initialAmount;\\n            Investors[msg.sender].isInitialAmountClaimed = true;\\n            uint256 amount = Investors[msg.sender].initialAmount;\\n            Investors[msg.sender].initialAmount = 0;\\n            token.transfer(msg.sender, amount);\\n            emit TokenWithdraw(msg.sender, amount);\\n            \\n        }\\n    }\\n    function setDates(uint256 StartDate,bool _isStart) public onlyOwner{\\n        seedStartDate = StartDate;\\n        privateStartDate = StartDate;\\n        teamStartDate = StartDate;\\n        launchpadStartDate = StartDate;\\n        marketdevelopmentStartDate = StartDate;\\n        airdropcampaignStartDate = StartDate;\\n        isStart=_isStart;\\n\\n\\n        seedLockEndDate = seedStartDate +  2 minutes;\\n        privateLockEndDate = privateStartDate + 2 minutes;\\n        teamLockEndDate = teamStartDate + 6  minutes;\\n        launchpadLockEndDate = launchpadStartDate + 2 minutes;\\n        marketdevelopmentLockEndDate = marketdevelopmentStartDate + 4 minutes;\\n        airdropcampaignLockEndDate = airdropcampaignStartDate + 2 minutes;\\n\\n        seedVestingEndDate = seedLockEndDate + 365 minutes;\\n        privateVestingEndDate = privateLockEndDate + 300 minutes;\\n        teamVestingEndDate = teamLockEndDate + 1095 minutes;\\n        launchpadVestingEndDate = launchpadLockEndDate + 240 minutes;\\n        marketdevelopmentVestingEndDate = marketdevelopmentLockEndDate + 730 minutes;\\n        airdropcampaignVestingEndDate = airdropcampaignLockEndDate + 180 minutes;\\n    }\\n\\n    function setDay(uint256 _value) public onlyOwner {\\n        day = _value;\\n    }\\n  \\n\\n  function removeSingleInvestor(address  _addr) public onlyOwner{\\n        isremoved=true;\\n        require(!isStart,\\\"Vesting Started , Unable to Remove Investor\\\");\\n        require(Investors[_addr].investorType >0,\\\"Investor Not Found\\\");\\n            delete Investors[_addr];\\n  }\\n  \\n    function removeMultipleInvestors(address[] memory _addr) external onlyOwner{\\n        for(uint i=0;i<_addr.length;i++){\\n            removeSingleInvestor(_addr[i]);\\n        }\\n    }\\n\\n     function getAvailableBalance(address _addr) external view returns(uint256, uint256, uint256){\\n     uint VestEnd=vestEnd[Investors[_addr].investorType];\\n     uint lockDate=lockEnd[Investors[_addr].investorType];\\n           if(Investors[_addr].isInitialAmountClaimed || Investors[_addr].investorType == 3 || Investors[_addr].investorType == 5 || Investors[_addr].investorType == 6 ){\\n            uint hello= day;\\n            uint timeDifference;\\n            // uint lockDateteam = teamLockEndDate;\\n                   if(Investors[_addr].lastVestedTime == 0) {\\n\\n                           if(block.timestamp>=VestEnd)return(Investors[_addr].reminingUnitsToVest*Investors[_addr].tokensPerUnit,0,0);\\n                           if(block.timestamp<lockDate) return(0,0,0);\\n                           if(lockDate + day> 0)return (((block.timestamp-lockDate)/day) *Investors[_addr].tokensPerUnit,0,0);//, \\\"Active lockdate was zero\\\");\\n                                timeDifference = (block.timestamp) -(lockDate);}\\n            else{ \\n                 timeDifference = (block.timestamp) - (Investors[_addr].lastVestedTime);\\n               }\\n\\n            \\n            uint numberOfUnitsCanBeVested;\\n            uint tokenToTransfer ;\\n            numberOfUnitsCanBeVested = (timeDifference)/(hello);\\n            if(numberOfUnitsCanBeVested >= Investors[_addr].reminingUnitsToVest) {\\n                numberOfUnitsCanBeVested = Investors[_addr].reminingUnitsToVest;}\\n            tokenToTransfer = numberOfUnitsCanBeVested * Investors[_addr].tokensPerUnit;\\n            uint reminingUnits = Investors[_addr].reminingUnitsToVest;\\n            uint balance = Investors[_addr].vestingBalance;\\n                    if(numberOfUnitsCanBeVested == reminingUnits) return(balance,0,0) ;  \\n                    else return(tokenToTransfer,reminingUnits,balance);\\n                     }\\n        else {\\n                   if(!isStart)return(0,0,0);\\n                   if(block.timestamp<seedStartDate)return(0,0,0);\\n                    Investors[_addr].initialAmount == 0 ;\\n            return (Investors[_addr].initialAmount,0,0);}\\n        \\n         \\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accoutt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saletype\",\"type\":\"uint256\"}],\"name\":\"InvestersAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVestedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reminingUnitsToVest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investorType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitialAmountClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeLockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saleType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniplayVesting.Investor[]\",\"name\":\"investorArray\",\"type\":\"tuple[]\"}],\"name\":\"addInvestorDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropcampaignLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropcampaignStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropcampaignVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getInvestorDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVestedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reminingUnitsToVest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investorType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitialAmountClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct UniplayVesting.InvestorDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isSameInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpadLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpadStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpadVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketdevelopmentLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketdevelopmentStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketdevelopmentVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"removeMultipleInvestors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeSingleInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StartDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStart\",\"type\":\"bool\"}],\"name\":\"setDates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UniplayVesting", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}