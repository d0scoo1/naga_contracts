{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/auction/LiquidationAuction02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport '../interfaces/IOracleRegistry.sol';\\r\\nimport '../interfaces/IVault.sol';\\r\\nimport '../interfaces/ICDPRegistry.sol';\\r\\nimport '../interfaces/vault-managers/parameters/IVaultManagerParameters.sol';\\r\\nimport '../interfaces/vault-managers/parameters/IAssetsBooleanParameters.sol';\\r\\nimport '../interfaces/IVaultParameters.sol';\\r\\nimport '../interfaces/IWrappedToUnderlyingOracle.sol';\\r\\nimport '../interfaces/wrapped-assets/IWrappedAsset.sol';\\r\\n\\r\\nimport '../vault-managers/parameters/AssetParameters.sol';\\r\\n\\r\\nimport '../helpers/ReentrancyGuard.sol';\\r\\nimport '../helpers/SafeMath.sol';\\r\\n\\r\\n/**\\r\\n * @title LiquidationAuction02\\r\\n **/\\r\\ncontract LiquidationAuction02 is ReentrancyGuard {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    IVault public immutable vault;\\r\\n    IVaultManagerParameters public immutable vaultManagerParameters;\\r\\n    ICDPRegistry public immutable cdpRegistry;\\r\\n    IAssetsBooleanParameters public immutable assetsBooleanParameters;\\r\\n\\r\\n    uint public constant DENOMINATOR_1E2 = 1e2;\\r\\n    uint public constant WRAPPED_TO_UNDERLYING_ORACLE_TYPE = 11;\\r\\n\\r\\n    /**\\r\\n     * @dev Trigger when buyouts are happened\\r\\n    **/\\r\\n    event Buyout(address indexed asset, address indexed owner, address indexed buyer, uint amount, uint price, uint penalty);\\r\\n\\r\\n    modifier checkpoint(address asset, address owner) {\\r\\n        _;\\r\\n        cdpRegistry.checkpoint(asset, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param _vaultManagerParameters The address of the contract with Vault manager parameters\\r\\n     * @param _cdpRegistry The address of the CDP registry\\r\\n     * @param _assetsBooleanParameters The address of the AssetsBooleanParameters\\r\\n     **/\\r\\n    constructor(address _vaultManagerParameters, address _cdpRegistry, address _assetsBooleanParameters) {\\r\\n        require(\\r\\n            _vaultManagerParameters != address(0) &&\\r\\n            _cdpRegistry != address(0) &&\\r\\n            _assetsBooleanParameters != address(0),\\r\\n            \\\"Unit Protocol: INVALID_ARGS\\\"\\r\\n        );\\r\\n        vaultManagerParameters = IVaultManagerParameters(_vaultManagerParameters);\\r\\n        vault = IVault(IVaultParameters(IVaultManagerParameters(_vaultManagerParameters).vaultParameters()).vault());\\r\\n        cdpRegistry = ICDPRegistry(_cdpRegistry);\\r\\n        assetsBooleanParameters = IAssetsBooleanParameters(_assetsBooleanParameters);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buyouts a position's collateral\\r\\n     * @param asset The address of the main collateral token of a position\\r\\n     * @param owner The owner of a position\\r\\n     **/\\r\\n    function buyout(address asset, address owner) public nonReentrant checkpoint(asset, owner) {\\r\\n        require(vault.liquidationBlock(asset, owner) != 0, \\\"Unit Protocol: LIQUIDATION_NOT_TRIGGERED\\\");\\r\\n        uint startingPrice = vault.liquidationPrice(asset, owner);\\r\\n        uint blocksPast = block.number.sub(vault.liquidationBlock(asset, owner));\\r\\n        uint depreciationPeriod = vaultManagerParameters.devaluationPeriod(asset);\\r\\n        uint debt = vault.getTotalDebt(asset, owner);\\r\\n        uint penalty = debt.mul(vault.liquidationFee(asset, owner)).div(DENOMINATOR_1E2);\\r\\n        uint collateralInPosition = vault.collaterals(asset, owner);\\r\\n\\r\\n        uint collateralToLiquidator;\\r\\n        uint collateralToOwner;\\r\\n        uint repayment;\\r\\n\\r\\n        (collateralToLiquidator, collateralToOwner, repayment) = _calcLiquidationParams(\\r\\n            depreciationPeriod,\\r\\n            blocksPast,\\r\\n            startingPrice,\\r\\n            debt.add(penalty),\\r\\n            collateralInPosition\\r\\n        );\\r\\n\\r\\n        uint256 assetBoolParams = assetsBooleanParameters.getAll(asset);\\r\\n\\r\\n        // ensure that at least 1 unit of token is transferred to cdp owner\\r\\n        if (collateralToOwner == 0 && AssetParameters.needForceTransferAssetToOwnerOnLiquidation(assetBoolParams)) {\\r\\n            collateralToOwner = 1;\\r\\n            collateralToLiquidator = collateralToLiquidator.sub(1);\\r\\n        }\\r\\n\\r\\n        // manually move position since transfer doesn't do this\\r\\n        if (AssetParameters.needForceMoveWrappedAssetPositionOnLiquidation(assetBoolParams)) {\\r\\n            IWrappedAsset(asset).movePosition(owner, msg.sender, collateralToLiquidator);\\r\\n        }\\r\\n\\r\\n        _liquidate(\\r\\n            asset,\\r\\n            owner,\\r\\n            collateralToLiquidator,\\r\\n            collateralToOwner,\\r\\n            repayment,\\r\\n            penalty\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _liquidate(\\r\\n        address asset,\\r\\n        address user,\\r\\n        uint collateralToBuyer,\\r\\n        uint collateralToOwner,\\r\\n        uint repayment,\\r\\n        uint penalty\\r\\n    ) private {\\r\\n        // send liquidation command to the Vault\\r\\n        vault.liquidate(\\r\\n            asset,\\r\\n            user,\\r\\n            collateralToBuyer,\\r\\n            0, // colToLiquidator\\r\\n            collateralToOwner,\\r\\n            0, // colToPositionOwner\\r\\n            repayment,\\r\\n            penalty,\\r\\n            msg.sender\\r\\n        );\\r\\n        // fire an buyout event\\r\\n        emit Buyout(asset, user, msg.sender, collateralToBuyer, repayment, penalty);\\r\\n    }\\r\\n\\r\\n    function _calcLiquidationParams(\\r\\n        uint depreciationPeriod,\\r\\n        uint blocksPast,\\r\\n        uint startingPrice,\\r\\n        uint debtWithPenalty,\\r\\n        uint collateralInPosition\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns(\\r\\n        uint collateralToBuyer,\\r\\n        uint collateralToOwner,\\r\\n        uint price\\r\\n    ) {\\r\\n        if (depreciationPeriod > blocksPast) {\\r\\n            uint valuation = depreciationPeriod.sub(blocksPast);\\r\\n            uint collateralPrice = startingPrice.mul(valuation).div(depreciationPeriod);\\r\\n            if (collateralPrice > debtWithPenalty) {\\r\\n                collateralToBuyer = collateralInPosition.mul(debtWithPenalty).div(collateralPrice);\\r\\n                collateralToOwner = collateralInPosition.sub(collateralToBuyer);\\r\\n                price = debtWithPenalty;\\r\\n            } else {\\r\\n                collateralToBuyer = collateralInPosition;\\r\\n                price = collateralPrice;\\r\\n            }\\r\\n        } else {\\r\\n            collateralToBuyer = collateralInPosition;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IOracleRegistry {\\n\\n    struct Oracle {\\n        uint oracleType;\\n        address oracleAddress;\\n    }\\n\\n    function WETH (  ) external view returns ( address );\\n    function getKeydonixOracleTypes (  ) external view returns ( uint256[] memory );\\n    function getOracles (  ) external view returns ( Oracle[] memory foundOracles );\\n    function keydonixOracleTypes ( uint256 ) external view returns ( uint256 );\\n    function maxOracleType (  ) external view returns ( uint256 );\\n    function oracleByAsset ( address asset ) external view returns ( address );\\n    function oracleByType ( uint256 ) external view returns ( address );\\n    function oracleTypeByAsset ( address ) external view returns ( uint256 );\\n    function oracleTypeByOracle ( address ) external view returns ( uint256 );\\n    function setKeydonixOracleTypes ( uint256[] memory _keydonixOracleTypes ) external;\\n    function setOracle ( uint256 oracleType, address oracle ) external;\\n    function setOracleTypeForAsset ( address asset, uint256 oracleType ) external;\\n    function setOracleTypeForAssets ( address[] memory assets, uint256 oracleType ) external;\\n    function unsetOracle ( uint256 oracleType ) external;\\n    function unsetOracleForAsset ( address asset ) external;\\n    function unsetOracleForAssets ( address[] memory assets ) external;\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVault {\\n    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\\n    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\\n    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\\n    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\\n    function chargeFee ( address asset, address user, uint256 amount ) external;\\n    function col (  ) external view returns ( address );\\n    function colToken ( address, address ) external view returns ( uint256 );\\n    function collaterals ( address, address ) external view returns ( uint256 );\\n    function debts ( address, address ) external view returns ( uint256 );\\n    function depositCol ( address asset, address user, uint256 amount ) external;\\n    function depositEth ( address user ) external payable;\\n    function depositMain ( address asset, address user, uint256 amount ) external;\\n    function destroy ( address asset, address user ) external;\\n    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\\n    function lastUpdate ( address, address ) external view returns ( uint256 );\\n    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\\n    function liquidationBlock ( address, address ) external view returns ( uint256 );\\n    function liquidationFee ( address, address ) external view returns ( uint256 );\\n    function liquidationPrice ( address, address ) external view returns ( uint256 );\\n    function oracleType ( address, address ) external view returns ( uint256 );\\n    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function spawn ( address asset, address user, uint256 _oracleType ) external;\\n    function stabilityFee ( address, address ) external view returns ( uint256 );\\n    function tokenDebts ( address ) external view returns ( uint256 );\\n    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\\n    function update ( address asset, address user ) external;\\n    function usdp (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n    function weth (  ) external view returns ( address payable );\\n    function withdrawCol ( address asset, address user, uint256 amount ) external;\\n    function withdrawEth ( address user, uint256 amount ) external;\\n    function withdrawMain ( address asset, address user, uint256 amount ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICDPRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICDPRegistry {\\n\\n    struct CDP {\\n        address asset;\\n        address owner;\\n    }\\n\\n    function batchCheckpoint ( address[] calldata assets, address[] calldata owners ) external;\\n    function batchCheckpointForAsset ( address asset, address[] calldata owners ) external;\\n    function checkpoint ( address asset, address owner ) external;\\n    function cr (  ) external view returns ( address );\\n    function getAllCdps (  ) external view returns ( CDP[] memory r );\\n    function getCdpsByCollateral ( address asset ) external view returns ( CDP[] memory cdps );\\n    function getCdpsByOwner ( address owner ) external view returns ( CDP[] memory r );\\n    function getCdpsCount (  ) external view returns ( uint256 totalCdpCount );\\n    function getCdpsCountForCollateral ( address asset ) external view returns ( uint256 );\\n    function isAlive ( address asset, address owner ) external view returns ( bool );\\n    function isListed ( address asset, address owner ) external view returns ( bool );\\n    function vault (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IVaultManagerParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\ninterface IVaultManagerParameters {\\r\\n    function devaluationPeriod ( address ) external view returns ( uint256 );\\r\\n    function initialCollateralRatio ( address ) external view returns ( uint256 );\\r\\n    function liquidationDiscount ( address ) external view returns ( uint256 );\\r\\n    function liquidationRatio ( address ) external view returns ( uint256 );\\r\\n    function maxColPercent ( address ) external view returns ( uint256 );\\r\\n    function minColPercent ( address ) external view returns ( uint256 );\\r\\n    function setColPartRange ( address asset, uint256 min, uint256 max ) external;\\r\\n    function setCollateral (\\r\\n        address asset,\\r\\n        uint256 stabilityFeeValue,\\r\\n        uint256 liquidationFeeValue,\\r\\n        uint256 initialCollateralRatioValue,\\r\\n        uint256 liquidationRatioValue,\\r\\n        uint256 liquidationDiscountValue,\\r\\n        uint256 devaluationPeriodValue,\\r\\n        uint256 usdpLimit,\\r\\n        uint256[] calldata oracles,\\r\\n        uint256 minColP,\\r\\n        uint256 maxColP\\r\\n    ) external;\\r\\n    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\\r\\n    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\\r\\n    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\\r\\n    function setLiquidationRatio ( address asset, uint256 newValue ) external;\\r\\n    function vaultParameters (  ) external view returns ( address );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IAssetsBooleanParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\ninterface IAssetsBooleanParameters {\\r\\n\\r\\n    event ValueSet(address indexed asset, uint8 param, uint256 valuesForAsset);\\r\\n    event ValueUnset(address indexed asset, uint8 param, uint256 valuesForAsset);\\r\\n\\r\\n    function get(address _asset, uint8 _param) external view returns (bool);\\r\\n    function getAll(address _asset) external view returns (uint256);\\r\\n    function set(address _asset, uint8 _param, bool _value) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultParameters {\\n    function canModifyVault ( address ) external view returns ( bool );\\n    function foundation (  ) external view returns ( address );\\n    function isManager ( address ) external view returns ( bool );\\n    function isOracleTypeEnabled ( uint256, address ) external view returns ( bool );\\n    function liquidationFee ( address ) external view returns ( uint256 );\\n    function setCollateral ( address asset, uint256 stabilityFeeValue, uint256 liquidationFeeValue, uint256 usdpLimit, uint256[] calldata oracles ) external;\\n    function setFoundation ( address newFoundation ) external;\\n    function setLiquidationFee ( address asset, uint256 newValue ) external;\\n    function setManager ( address who, bool permit ) external;\\n    function setOracleType ( uint256 _type, address asset, bool enabled ) external;\\n    function setStabilityFee ( address asset, uint256 newValue ) external;\\n    function setTokenDebtLimit ( address asset, uint256 limit ) external;\\n    function setVaultAccess ( address who, bool permit ) external;\\n    function stabilityFee ( address ) external view returns ( uint256 );\\n    function tokenDebtLimit ( address ) external view returns ( uint256 );\\n    function vault (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrappedToUnderlyingOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IWrappedToUnderlyingOracle {\\n    function assetToUnderlying(address) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/wrapped-assets/IWrappedAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IWrappedAsset is IERC20 /* IERC20WithOptional */ {\\r\\n\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event PositionMoved(address indexed userFrom, address indexed userTo, uint256 amount);\\r\\n\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n    event TokenWithdraw(address indexed user, address token, uint256 amount);\\r\\n\\r\\n    event FeeChanged(uint256 newFeePercent);\\r\\n    event FeeReceiverChanged(address newFeeReceiver);\\r\\n    event AllowedBoneLockerSelectorAdded(address boneLocker, bytes4 selector);\\r\\n    event AllowedBoneLockerSelectorRemoved(address boneLocker, bytes4 selector);\\r\\n\\r\\n    /**\\r\\n     * @notice Get underlying token\\r\\n     */\\r\\n    function getUnderlyingToken() external view returns (IERC20);\\r\\n\\r\\n    /**\\r\\n     * @notice deposit underlying token and send wrapped token to user\\r\\n     * @dev Important! Only user or trusted contracts must be able to call this method\\r\\n     */\\r\\n    function deposit(address _userAddr, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice get wrapped token and return underlying\\r\\n     * @dev Important! Only user or trusted contracts must be able to call this method\\r\\n     */\\r\\n    function withdraw(address _userAddr, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice get pending reward amount for user if reward is supported\\r\\n     */\\r\\n    function pendingReward(address _userAddr) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice claim pending reward for user if reward is supported\\r\\n     */\\r\\n    function claimReward(address _userAddr) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Manually move position (or its part) to another user (for example in case of liquidation)\\r\\n     * @dev Important! Only trusted contracts must be able to call this method\\r\\n     */\\r\\n    function movePosition(address _userAddrFrom, address _userAddrTo, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev function for checks that asset is unitprotocol wrapped asset.\\r\\n     * @dev For wrapped assets must return keccak256(\\\"UnitProtocolWrappedAsset\\\")\\r\\n     */\\r\\n    function isUnitProtocolWrappedAsset() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/vault-managers/parameters/AssetParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n/**\\r\\n * @title AssetParameters\\r\\n **/\\r\\nlibrary AssetParameters {\\r\\n\\r\\n    /**\\r\\n     * Some assets require a transfer of at least 1 unit of token\\r\\n     * to update internal logic related to staking rewards in case of full liquidation\\r\\n     */\\r\\n    uint8 public constant PARAM_FORCE_TRANSFER_ASSET_TO_OWNER_ON_LIQUIDATION = 0;\\r\\n\\r\\n    /**\\r\\n     * Some wrapped assets that require a manual position transfer between users\\r\\n     * since `transfer` doesn't do this\\r\\n     */\\r\\n    uint8 public constant PARAM_FORCE_MOVE_WRAPPED_ASSET_POSITION_ON_LIQUIDATION = 1;\\r\\n\\r\\n    function needForceTransferAssetToOwnerOnLiquidation(uint256 assetBoolParams) internal pure returns (bool) {\\r\\n        return assetBoolParams & (1 << PARAM_FORCE_TRANSFER_ASSET_TO_OWNER_ON_LIQUIDATION) != 0;\\r\\n    }\\r\\n\\r\\n    function needForceMoveWrappedAssetPositionOnLiquidation(uint256 assetBoolParams) internal pure returns (bool) {\\r\\n        return assetBoolParams & (1 << PARAM_FORCE_MOVE_WRAPPED_ASSET_POSITION_ON_LIQUIDATION) != 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/helpers/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n    /**\\n    * @dev Multiplies two numbers, throws on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, throws on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManagerParameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cdpRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetsBooleanParameters\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"Buyout\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR_1E2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_TO_UNDERLYING_ORACLE_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsBooleanParameters\",\"outputs\":[{\"internalType\":\"contract IAssetsBooleanParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"buyout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpRegistry\",\"outputs\":[{\"internalType\":\"contract ICDPRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LiquidationAuction02", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000203153522b9eaef4ae17c6e99851ee7b2f7d312e0000000000000000000000001a5ff58bc3246eb233fea20d32b79b5f01ec650c000000000000000000000000cc33c2840b65c0a4ac4015c650dd20dc3eb2081d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}