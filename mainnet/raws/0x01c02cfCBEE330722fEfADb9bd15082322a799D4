{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BMICoverStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableMap.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/tokens/erc20permit-upgradeable/IERC20PermitUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IPolicyBookRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IBMICoverStaking.sol\\\";\\r\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IRewardsGenerator.sol\\\";\\r\\nimport \\\"./interfaces/ILiquidityMining.sol\\\";\\r\\nimport \\\"./interfaces/IPolicyBook.sol\\\";\\r\\nimport \\\"./interfaces/IBMIStaking.sol\\\";\\r\\nimport \\\"./interfaces/ILiquidityRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IShieldMining.sol\\\";\\r\\n\\r\\nimport \\\"./tokens/ERC1155Upgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\r\\nimport \\\"./abstract/AbstractSlasher.sol\\\";\\r\\n\\r\\nimport \\\"./Globals.sol\\\";\\r\\n\\r\\ncontract BMICoverStaking is\\r\\n    IBMICoverStaking,\\r\\n    OwnableUpgradeable,\\r\\n    ERC1155Upgradeable,\\r\\n    AbstractDependant,\\r\\n    AbstractSlasher\\r\\n{\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n    using SafeMath for uint256;\\r\\n    using Math for uint256;\\r\\n\\r\\n    IERC20 public bmiToken;\\r\\n    IPolicyBookRegistry public policyBookRegistry;\\r\\n    IRewardsGenerator public rewardsGenerator;\\r\\n    ILiquidityMining public liquidityMining;\\r\\n    IBMIStaking public bmiStaking;\\r\\n    ILiquidityRegistry public liquidityRegistry;\\r\\n\\r\\n    mapping(uint256 => StakingInfo) public override _stakersPool; // nft index -> info\\r\\n    uint256 internal _nftMintId; // next nft mint id\\r\\n\\r\\n    mapping(address => EnumerableSet.UintSet) internal _nftHolderTokens; // holder -> nfts\\r\\n    EnumerableMap.UintToAddressMap internal _nftTokenOwners; // index nft -> holder\\r\\n    // new state post v2\\r\\n    IShieldMining public shieldMining;\\r\\n\\r\\n    bool public allowStakeProfit;\\r\\n\\r\\n    address public bmiTreasury;\\r\\n\\r\\n    event StakingNFTMinted(uint256 id, address policyBookAddress, address to);\\r\\n    event StakingNFTBurned(uint256 id, address policyBookAddress);\\r\\n    event StakingBMIProfitWithdrawn(\\r\\n        uint256 id,\\r\\n        address policyBookAddress,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event StakingFundsWithdrawn(uint256 id, address policyBookAddress, address to, uint256 amount);\\r\\n    event TokensRecovered(address to, uint256 amount);\\r\\n\\r\\n    modifier onlyPolicyBooks() {\\r\\n        require(policyBookRegistry.isPolicyBook(_msgSender()), \\\"BDS: No access\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function __BMICoverStaking_init() external initializer {\\r\\n        __Ownable_init();\\r\\n        __ERC1155_init(\\\"\\\");\\r\\n\\r\\n        _nftMintId = 1;\\r\\n        allowStakeProfit = true;\\r\\n    }\\r\\n\\r\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\r\\n        external\\r\\n        override\\r\\n        onlyInjectorOrZero\\r\\n    {\\r\\n        bmiToken = IERC20(_contractsRegistry.getBMIContract());\\r\\n        rewardsGenerator = IRewardsGenerator(_contractsRegistry.getRewardsGeneratorContract());\\r\\n        policyBookRegistry = IPolicyBookRegistry(\\r\\n            _contractsRegistry.getPolicyBookRegistryContract()\\r\\n        );\\r\\n        if (allowStakeProfit) {\\r\\n            bmiStaking = IBMIStaking(_contractsRegistry.getBMIStakingContract());\\r\\n        }\\r\\n        liquidityRegistry = ILiquidityRegistry(_contractsRegistry.getLiquidityRegistryContract());\\r\\n        shieldMining = IShieldMining(_contractsRegistry.getShieldMiningContract());\\r\\n        bmiTreasury = _contractsRegistry.getBMITreasury();\\r\\n    }\\r\\n\\r\\n    /// @dev the output URI will be: \\\"https://token-cdn-domain/<tokenId>\\\"\\r\\n    function uri(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC1155Upgradeable, IBMICoverStaking)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return string(abi.encodePacked(super.uri(0), Strings.toString(tokenId)));\\r\\n    }\\r\\n\\r\\n    /// @dev this is a correct URI: \\\"https://token-cdn-domain/\\\"\\r\\n    function setBaseURI(string calldata newURI) external onlyOwner {\\r\\n        _setURI(newURI);\\r\\n    }\\r\\n\\r\\n    function setAllowStakeProfit(bool _allowStakeProfit) external onlyOwner {\\r\\n        allowStakeProfit = _allowStakeProfit;\\r\\n    }\\r\\n\\r\\n    function recoverTokens() external onlyOwner {\\r\\n        uint256 balance = bmiToken.balanceOf(address(this));\\r\\n\\r\\n        bmiToken.transfer(_msgSender(), balance);\\r\\n\\r\\n        emit TokensRecovered(_msgSender(), balance);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal override {\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            if (amounts[i] != 1) {\\r\\n                // not an NFT\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (from == address(0)) {\\r\\n                // mint happened\\r\\n                _nftHolderTokens[to].add(ids[i]);\\r\\n                _nftTokenOwners.set(ids[i], to);\\r\\n            } else if (to == address(0)) {\\r\\n                // burn happened\\r\\n                _nftHolderTokens[from].remove(ids[i]);\\r\\n                _nftTokenOwners.remove(ids[i]);\\r\\n            } else {\\r\\n                // transfer happened\\r\\n                _nftHolderTokens[from].remove(ids[i]);\\r\\n                _nftHolderTokens[to].add(ids[i]);\\r\\n\\r\\n                _nftTokenOwners.set(ids[i], to);\\r\\n\\r\\n                _updateLiquidityRegistry(to, from, _stakersPool[ids[i]].policyBookAddress);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateLiquidityRegistry(\\r\\n        address to,\\r\\n        address from,\\r\\n        address policyBookAddress\\r\\n    ) internal {\\r\\n        liquidityRegistry.tryToAddPolicyBook(to, policyBookAddress);\\r\\n        liquidityRegistry.tryToRemovePolicyBook(from, policyBookAddress);\\r\\n    }\\r\\n\\r\\n    function _mintStake(address staker, uint256 id) internal {\\r\\n        _mint(staker, id, 1, \\\"\\\"); // mint NFT\\r\\n    }\\r\\n\\r\\n    function _burnStake(address staker, uint256 id) internal {\\r\\n        _burn(staker, id, 1); // burn NFT\\r\\n    }\\r\\n\\r\\n    function _mintAggregatedNFT(\\r\\n        address staker,\\r\\n        address policyBookAddress,\\r\\n        uint256[] memory tokenIds\\r\\n    ) internal {\\r\\n        require(policyBookRegistry.isPolicyBook(policyBookAddress), \\\"BDS: Not a PB\\\");\\r\\n\\r\\n        uint256 totalBMIXAmount;\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            require(ownerOf(tokenIds[i]) == _msgSender(), \\\"BDS: Not a token owner\\\");\\r\\n            require(\\r\\n                _stakersPool[tokenIds[i]].policyBookAddress == policyBookAddress,\\r\\n                \\\"BDS: NFTs from distinct origins\\\"\\r\\n            );\\r\\n\\r\\n            totalBMIXAmount = totalBMIXAmount.add(_stakersPool[tokenIds[i]].stakedBMIXAmount);\\r\\n\\r\\n            _burnStake(staker, tokenIds[i]);\\r\\n\\r\\n            emit StakingNFTBurned(tokenIds[i], policyBookAddress);\\r\\n\\r\\n            /// @dev should be enough\\r\\n            delete _stakersPool[tokenIds[i]].policyBookAddress;\\r\\n        }\\r\\n\\r\\n        _mintStake(staker, _nftMintId);\\r\\n\\r\\n        _stakersPool[_nftMintId] = StakingInfo(policyBookAddress, totalBMIXAmount);\\r\\n\\r\\n        emit StakingNFTMinted(_nftMintId, policyBookAddress, staker);\\r\\n\\r\\n        _nftMintId++;\\r\\n    }\\r\\n\\r\\n    function _mintNewNFT(\\r\\n        address staker,\\r\\n        uint256 bmiXAmount,\\r\\n        address policyBookAddress\\r\\n    ) internal {\\r\\n        _mintStake(staker, _nftMintId);\\r\\n\\r\\n        _stakersPool[_nftMintId] = StakingInfo(policyBookAddress, bmiXAmount);\\r\\n\\r\\n        emit StakingNFTMinted(_nftMintId, policyBookAddress, staker);\\r\\n\\r\\n        _nftMintId++;\\r\\n    }\\r\\n\\r\\n    function aggregateNFTs(address policyBookAddress, uint256[] calldata tokenIds)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        require(tokenIds.length > 1, \\\"BDS: Can't aggregate\\\");\\r\\n\\r\\n        _mintAggregatedNFT(_msgSender(), policyBookAddress, tokenIds);\\r\\n        rewardsGenerator.aggregate(policyBookAddress, tokenIds, _nftMintId - 1); // nftMintId is changed, so -1\\r\\n    }\\r\\n\\r\\n    function stakeBMIX(uint256 bmiXAmount, address policyBookAddress) external override {\\r\\n        _stakeBMIX(_msgSender(), bmiXAmount, policyBookAddress);\\r\\n    }\\r\\n\\r\\n    function stakeBMIXWithPermit(\\r\\n        uint256 bmiXAmount,\\r\\n        address policyBookAddress,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override {\\r\\n        _stakeBMIXWithPermit(_msgSender(), bmiXAmount, policyBookAddress, v, r, s);\\r\\n    }\\r\\n\\r\\n    function stakeBMIXFrom(address user, uint256 bmiXAmount) external override onlyPolicyBooks {\\r\\n        _stakeBMIX(user, bmiXAmount, _msgSender());\\r\\n    }\\r\\n\\r\\n    function stakeBMIXFromWithPermit(\\r\\n        address user,\\r\\n        uint256 bmiXAmount,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override onlyPolicyBooks {\\r\\n        _stakeBMIXWithPermit(user, bmiXAmount, _msgSender(), v, r, s);\\r\\n    }\\r\\n\\r\\n    function _stakeBMIXWithPermit(\\r\\n        address staker,\\r\\n        uint256 bmiXAmount,\\r\\n        address policyBookAddress,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        IERC20PermitUpgradeable(policyBookAddress).permit(\\r\\n            staker,\\r\\n            address(this),\\r\\n            bmiXAmount,\\r\\n            MAX_INT,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n\\r\\n        _stakeBMIX(staker, bmiXAmount, policyBookAddress);\\r\\n    }\\r\\n\\r\\n    function _stakeBMIX(\\r\\n        address user,\\r\\n        uint256 bmiXAmount,\\r\\n        address policyBookAddress\\r\\n    ) internal {\\r\\n        require(policyBookRegistry.isPolicyBook(policyBookAddress), \\\"BDS: Not a PB\\\");\\r\\n        require(IPolicyBook(policyBookAddress).whitelisted(), \\\"BDS: PB is not whitelisted\\\");\\r\\n        require(bmiXAmount > 0, \\\"BDS: Zero tokens\\\");\\r\\n\\r\\n        uint256 stblAmount = IPolicyBook(policyBookAddress).convertBMIXToSTBL(bmiXAmount);\\r\\n\\r\\n        IERC20(policyBookAddress).transferFrom(user, address(this), bmiXAmount);\\r\\n\\r\\n        _mintNewNFT(user, bmiXAmount, policyBookAddress);\\r\\n        rewardsGenerator.stake(policyBookAddress, _nftMintId - 1, stblAmount); // nftMintId is changed, so -1\\r\\n    }\\r\\n\\r\\n    function _transferProfit(uint256 tokenId, bool onlyProfit) internal {\\r\\n        address policyBookAddress = _stakersPool[tokenId].policyBookAddress;\\r\\n        uint256 totalProfit;\\r\\n\\r\\n        if (onlyProfit) {\\r\\n            totalProfit = rewardsGenerator.withdrawReward(policyBookAddress, tokenId);\\r\\n        } else {\\r\\n            totalProfit = rewardsGenerator.withdrawFunds(policyBookAddress, tokenId);\\r\\n        }\\r\\n\\r\\n        uint256 bmiStakingProfit = _getSlashed(totalProfit);\\r\\n        uint256 profit = totalProfit.sub(bmiStakingProfit);\\r\\n\\r\\n        // transfer slashed bmi to the bmi treasury\\r\\n        bmiToken.transfer(bmiTreasury, bmiStakingProfit);\\r\\n\\r\\n        // transfer bmi profit to the user\\r\\n        bmiToken.transfer(_msgSender(), profit);\\r\\n\\r\\n        emit StakingBMIProfitWithdrawn(tokenId, policyBookAddress, _msgSender(), profit);\\r\\n    }\\r\\n\\r\\n    /// @param staker address of the staker account\\r\\n    /// @param policyBookAddress addres of the policbook\\r\\n    /// @param offset pagination start up place\\r\\n    /// @param limit size of the listing page\\r\\n    /// @param func callback function that returns a uint256\\r\\n    /// @return total\\r\\n    function _aggregateForEach(\\r\\n        address staker,\\r\\n        address policyBookAddress,\\r\\n        uint256 offset,\\r\\n        uint256 limit,\\r\\n        function(uint256) view returns (uint256) func\\r\\n    ) internal view returns (uint256 total) {\\r\\n        bool nullAddr = policyBookAddress == address(0);\\r\\n\\r\\n        require(nullAddr || policyBookRegistry.isPolicyBook(policyBookAddress), \\\"BDS: Not a PB\\\");\\r\\n\\r\\n        uint256 to = (offset.add(limit)).min(balanceOf(staker)).max(offset);\\r\\n\\r\\n        for (uint256 i = offset; i < to; i++) {\\r\\n            uint256 nftIndex = tokenOfOwnerByIndex(staker, i);\\r\\n\\r\\n            if (nullAddr || _stakersPool[nftIndex].policyBookAddress == policyBookAddress) {\\r\\n                total = total.add(func(nftIndex));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferForEach(address policyBookAddress, function(uint256) func) internal {\\r\\n        require(policyBookRegistry.isPolicyBook(policyBookAddress), \\\"BDS: Not a PB\\\");\\r\\n\\r\\n        uint256 stakerBalance = balanceOf(_msgSender());\\r\\n\\r\\n        for (int256 i = int256(stakerBalance) - 1; i >= 0; i--) {\\r\\n            uint256 nftIndex = tokenOfOwnerByIndex(_msgSender(), uint256(i));\\r\\n\\r\\n            if (_stakersPool[nftIndex].policyBookAddress == policyBookAddress) {\\r\\n                func(nftIndex);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function restakeBMIProfit(uint256 tokenId) public override {\\r\\n        require(_stakersPool[tokenId].policyBookAddress != address(0), \\\"BDS: Token doesn't exist\\\");\\r\\n        require(ownerOf(tokenId) == _msgSender(), \\\"BDS: Not a token owner\\\");\\r\\n        require(allowStakeProfit, \\\"BDS: restake not avaiable\\\");\\r\\n\\r\\n        uint256 totalProfit =\\r\\n            rewardsGenerator.withdrawReward(_stakersPool[tokenId].policyBookAddress, tokenId);\\r\\n\\r\\n        bmiToken.transfer(address(bmiStaking), totalProfit);\\r\\n        bmiStaking.stakeFor(_msgSender(), totalProfit);\\r\\n    }\\r\\n\\r\\n    function restakeStakerBMIProfit(address policyBookAddress) external override {\\r\\n        _transferForEach(policyBookAddress, restakeBMIProfit);\\r\\n    }\\r\\n\\r\\n    function withdrawBMIProfit(uint256 tokenId) public override {\\r\\n        require(_stakersPool[tokenId].policyBookAddress != address(0), \\\"BDS: Token doesn't exist\\\");\\r\\n        require(ownerOf(tokenId) == _msgSender(), \\\"BDS: Not a token owner\\\");\\r\\n\\r\\n        _transferProfit(tokenId, true);\\r\\n    }\\r\\n\\r\\n    function withdrawStakerBMIProfit(address policyBookAddress) external override {\\r\\n        _transferForEach(policyBookAddress, withdrawBMIProfit);\\r\\n\\r\\n        if (policyBookRegistry.isUserLeveragePool(policyBookAddress)) {\\r\\n            shieldMining.getRewardFor(_msgSender(), policyBookAddress);\\r\\n        } else {\\r\\n            shieldMining.getRewardFor(_msgSender(), policyBookAddress, address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawFundsWithProfit(uint256 tokenId) public override {\\r\\n        address policyBookAddress = _stakersPool[tokenId].policyBookAddress;\\r\\n\\r\\n        require(policyBookAddress != address(0), \\\"BDS: Token doesn't exist\\\");\\r\\n        require(ownerOf(tokenId) == _msgSender(), \\\"BDS: Not a token owner\\\");\\r\\n\\r\\n        _transferProfit(tokenId, false);\\r\\n\\r\\n        uint256 stakedFunds = _stakersPool[tokenId].stakedBMIXAmount;\\r\\n\\r\\n        // transfer bmiX from staking to the user\\r\\n        IERC20(policyBookAddress).transfer(_msgSender(), stakedFunds);\\r\\n\\r\\n        emit StakingFundsWithdrawn(tokenId, policyBookAddress, _msgSender(), stakedFunds);\\r\\n\\r\\n        _burnStake(_msgSender(), tokenId);\\r\\n\\r\\n        emit StakingNFTBurned(tokenId, policyBookAddress);\\r\\n\\r\\n        delete _stakersPool[tokenId];\\r\\n    }\\r\\n\\r\\n    function withdrawStakerFundsWithProfit(address policyBookAddress) external override {\\r\\n        _transferForEach(policyBookAddress, withdrawFundsWithProfit);\\r\\n    }\\r\\n\\r\\n    function getSlashedBMIProfit(uint256 tokenId) public view override returns (uint256) {\\r\\n        return _applySlashing(getBMIProfit(tokenId));\\r\\n    }\\r\\n\\r\\n    /// @notice retrieves the BMI profit of a tokenId\\r\\n    /// @param tokenId numeric id identifier of the token\\r\\n    /// @return profit amount\\r\\n    function getBMIProfit(uint256 tokenId) public view override returns (uint256) {\\r\\n        return rewardsGenerator.getReward(_stakersPool[tokenId].policyBookAddress, tokenId);\\r\\n    }\\r\\n\\r\\n    function getSlashedStakerBMIProfit(\\r\\n        address staker,\\r\\n        address policyBookAddress,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view override returns (uint256 totalProfit) {\\r\\n        uint256 stakerBMIProfit = getStakerBMIProfit(staker, policyBookAddress, offset, limit);\\r\\n\\r\\n        return _applySlashing(stakerBMIProfit);\\r\\n    }\\r\\n\\r\\n    function getStakerBMIProfit(\\r\\n        address staker,\\r\\n        address policyBookAddress,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) public view override returns (uint256) {\\r\\n        return _aggregateForEach(staker, policyBookAddress, offset, limit, getBMIProfit);\\r\\n    }\\r\\n\\r\\n    function totalStaked(address user) external view override returns (uint256) {\\r\\n        return _aggregateForEach(user, address(0), 0, MAX_INT, stakedByNFT);\\r\\n    }\\r\\n\\r\\n    function totalStakedSTBL(address user) external view override returns (uint256) {\\r\\n        return _aggregateForEach(user, address(0), 0, MAX_INT, stakedSTBLByNFT);\\r\\n    }\\r\\n\\r\\n    function stakedByNFT(uint256 tokenId) public view override returns (uint256) {\\r\\n        return _stakersPool[tokenId].stakedBMIXAmount;\\r\\n    }\\r\\n\\r\\n    function stakedSTBLByNFT(uint256 tokenId) public view override returns (uint256) {\\r\\n        return rewardsGenerator.getStakedNFTSTBL(tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice returns number of NFTs on user's account\\r\\n    function balanceOf(address user) public view override returns (uint256) {\\r\\n        return _nftHolderTokens[user].length();\\r\\n    }\\r\\n\\r\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n        return _nftTokenOwners.get(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenOfOwnerByIndex(address user, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _nftHolderTokens[user].at(index);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/tokens/ERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC1155Upgradeable,\\n    IERC1155MetadataURIUpgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            require(accounts[i] != address(0), \\\"ERC1155: zero address\\\");\\n            batchBalances[i] = _balances[ids[i]][accounts[i]];\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: self approval\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(to != address(0), \\\"ERC1155: zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer failed\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            from,\\n            to,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(ids.length == amounts.length, \\\"ERC1155: length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer failed\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance\\\");\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            \\\"\\\"\\n        );\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data)\\n            returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: non ERC1155Receiver\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: non ERC1155Receiver\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/tokens/erc20permit-upgradeable/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * COPIED FROM https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/tree/release-v3.4/contracts/drafts\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/tokens/ISTKBMIToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface ISTKBMIToken is IERC20Upgradeable {\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    function burn(address account, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IShieldMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IShieldMining {\\r\\n    struct ShieldMiningInfo {\\r\\n        IERC20 rewardsToken;\\r\\n        uint8 decimals;\\r\\n        uint256 firstBlockWithReward;\\r\\n        uint256 lastBlockWithReward;\\r\\n        uint256 lastUpdateBlock;\\r\\n        uint256 rewardTokensLocked;\\r\\n        uint256 rewardPerTokenStored;\\r\\n        uint256 totalSupply;\\r\\n        uint256[] endsOfDistribution;\\r\\n        // new state post v2\\r\\n        uint256 nearestLastBlocksWithReward;\\r\\n        // lastBlockWithReward => rewardPerBlock\\r\\n        mapping(uint256 => uint256) rewardPerBlock;\\r\\n    }\\r\\n\\r\\n    struct ShieldMiningDeposit {\\r\\n        address policyBook;\\r\\n        uint256 amount;\\r\\n        uint256 duration;\\r\\n        uint256 depositRewardPerBlock;\\r\\n        uint256 startBlock;\\r\\n        uint256 endBlock;\\r\\n    }\\r\\n\\r\\n    /// TODO document SM functions\\r\\n    function blocksWithRewardsPassed(address _policyBook) external view returns (uint256);\\r\\n\\r\\n    function rewardPerToken(address _policyBook) external view returns (uint256);\\r\\n\\r\\n    function earned(\\r\\n        address _policyBook,\\r\\n        address _userLeveragePool,\\r\\n        address _account\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function updateTotalSupply(\\r\\n        address _policyBook,\\r\\n        address _userLeveragePool,\\r\\n        address liquidityProvider\\r\\n    ) external;\\r\\n\\r\\n    function associateShieldMining(address _policyBook, address _shieldMiningToken) external;\\r\\n\\r\\n    function fillShieldMining(\\r\\n        address _policyBook,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external;\\r\\n\\r\\n    function getRewardFor(\\r\\n        address _userAddress,\\r\\n        address _policyBook,\\r\\n        address _userLeveragePool\\r\\n    ) external;\\r\\n\\r\\n    function getRewardFor(address _userAddress, address _userLeveragePoolAddress) external;\\r\\n\\r\\n    function getReward(address _policyBook, address _userLeveragePool) external;\\r\\n\\r\\n    function getReward(address _userLeveragePoolAddress) external;\\r\\n\\r\\n    function getShieldTokenAddress(address _policyBook) external view returns (address);\\r\\n\\r\\n    function getShieldMiningInfo(address _policyBook)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _rewardsToken,\\r\\n            uint256 _decimals,\\r\\n            uint256 _firstBlockWithReward,\\r\\n            uint256 _lastBlockWithReward,\\r\\n            uint256 _lastUpdateBlock,\\r\\n            uint256 _nearestLastBlocksWithReward,\\r\\n            uint256 _rewardTokensLocked,\\r\\n            uint256 _rewardPerTokenStored,\\r\\n            uint256 _rewardPerBlock,\\r\\n            uint256 _tokenPerDay,\\r\\n            uint256 _totalSupply\\r\\n        );\\r\\n\\r\\n    function getDepositList(\\r\\n        address _account,\\r\\n        uint256 _offset,\\r\\n        uint256 _limit\\r\\n    ) external view returns (ShieldMiningDeposit[] memory _depositsList);\\r\\n\\r\\n    function countUsersDeposits(address _account) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRewardsGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IRewardsGenerator {\\r\\n    struct PolicyBookRewardInfo {\\r\\n        uint256 rewardMultiplier; // includes 5 decimal places\\r\\n        uint256 totalStaked;\\r\\n        uint256 lastUpdateBlock;\\r\\n        uint256 lastCumulativeSum; // includes 100 percentage\\r\\n        uint256 cumulativeReward; // includes 100 percentage\\r\\n    }\\r\\n\\r\\n    struct StakeRewardInfo {\\r\\n        uint256 lastCumulativeSum; // includes 100 percentage\\r\\n        uint256 cumulativeReward;\\r\\n        uint256 stakeAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice this function is called every time policybook's STBL to bmiX rate changes\\r\\n    function updatePolicyBookShare(uint256 newRewardMultiplier, address policyBook) external;\\r\\n\\r\\n    /// @notice aggregates specified nfts into a single one\\r\\n    function aggregate(\\r\\n        address policyBookAddress,\\r\\n        uint256[] calldata nftIndexes,\\r\\n        uint256 nftIndexTo\\r\\n    ) external;\\r\\n\\r\\n    /// @notice informs generator of stake (rewards)\\r\\n    function stake(\\r\\n        address policyBookAddress,\\r\\n        uint256 nftIndex,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice returns policybook's APY multiplied by 10**5\\r\\n    function getPolicyBookAPY(address policyBookAddress) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns policybook's RewardMultiplier multiplied by 10**5\\r\\n    function getPolicyBookRewardMultiplier(address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev returns PolicyBook reward per block multiplied by 10**25\\r\\n    function getPolicyBookRewardPerBlock(address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice returns PolicyBook's staked STBL\\r\\n    function getStakedPolicyBookSTBL(address policyBookAddress) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns NFT's staked STBL\\r\\n    function getStakedNFTSTBL(uint256 nftIndex) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns a reward of NFT\\r\\n    function getReward(address policyBookAddress, uint256 nftIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice informs generator of withdrawal (all funds)\\r\\n    function withdrawFunds(address policyBookAddress, uint256 nftIndex) external returns (uint256);\\r\\n\\r\\n    /// @notice informs generator of withdrawal (rewards)\\r\\n    function withdrawReward(address policyBookAddress, uint256 nftIndex)\\r\\n        external\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\n\\r\\ninterface IPolicyBookRegistry {\\r\\n    struct PolicyBookStats {\\r\\n        string symbol;\\r\\n        address insuredContract;\\r\\n        IPolicyBookFabric.ContractType contractType;\\r\\n        uint256 maxCapacity;\\r\\n        uint256 totalSTBLLiquidity;\\r\\n        uint256 totalLeveragedLiquidity;\\r\\n        uint256 stakedSTBL;\\r\\n        uint256 APY;\\r\\n        uint256 annualInsuranceCost;\\r\\n        uint256 bmiXRatio;\\r\\n        bool whitelisted;\\r\\n    }\\r\\n\\r\\n    function policyBooksByInsuredAddress(address insuredContract) external view returns (address);\\r\\n\\r\\n    function policyBookFacades(address facadeAddress) external view returns (address);\\r\\n\\r\\n    /// @notice Adds PolicyBook to registry, access: PolicyFabric\\r\\n    function add(\\r\\n        address insuredContract,\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        address policyBook,\\r\\n        address facadeAddress\\r\\n    ) external;\\r\\n\\r\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\r\\n\\r\\n    /// @notice returns required allowances for the policybooks\\r\\n    function getPoliciesPrices(\\r\\n        address[] calldata policyBooks,\\r\\n        uint256[] calldata epochsNumbers,\\r\\n        uint256[] calldata coversTokens\\r\\n    ) external view returns (uint256[] memory _durations, uint256[] memory _allowances);\\r\\n\\r\\n    /// @notice Buys a batch of policies\\r\\n    function buyPolicyBatch(\\r\\n        address[] calldata policyBooks,\\r\\n        uint256[] calldata epochsNumbers,\\r\\n        uint256[] calldata coversTokens\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Checks if provided address is a PolicyBook\\r\\n    function isPolicyBook(address policyBook) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks if provided address is a policyBookFacade\\r\\n    function isPolicyBookFacade(address _facadeAddress) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks if provided address is a user leverage pool\\r\\n    function isUserLeveragePool(address policyBookAddress) external view returns (bool);\\r\\n\\r\\n    /// @notice Returns number of registered PolicyBooks with certain contract type\\r\\n    function countByType(IPolicyBookFabric.ContractType contractType)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice Returns number of registered PolicyBooks, access: ANY\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function countByTypeWhitelisted(IPolicyBookFabric.ContractType contractType)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function countWhitelisted() external view returns (uint256);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with certain contract type, access: ANY\\r\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses with certain contract type\\r\\n    function listByType(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks, access: ANY\\r\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses\\r\\n    function list(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    function listByTypeWhitelisted(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    function listWhitelisted(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with stats and certain contract type, access: ANY\\r\\n    function listWithStatsByType(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with stats, access: ANY\\r\\n    function listWithStats(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    function listWithStatsByTypeWhitelisted(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    function listWithStatsWhitelisted(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Getting stats from policy books, access: ANY\\r\\n    /// @param policyBooks is list of PolicyBooks addresses\\r\\n    function stats(address[] calldata policyBooks)\\r\\n        external\\r\\n        view\\r\\n        returns (PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Return existing Policy Book contract, access: ANY\\r\\n    /// @param insuredContract is contract address to lookup for created IPolicyBook\\r\\n    function policyBookFor(address insuredContract) external view returns (address);\\r\\n\\r\\n    /// @notice Getting stats from policy books, access: ANY\\r\\n    /// @param insuredContracts is list of insuredContracts in registry\\r\\n    function statsByInsuredContracts(address[] calldata insuredContracts)\\r\\n        external\\r\\n        view\\r\\n        returns (PolicyBookStats[] memory _stats);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IPolicyBook.sol\\\";\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\nimport \\\"./ILeveragePortfolio.sol\\\";\\r\\n\\r\\ninterface IPolicyBookFacade {\\r\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    function buyPolicy(uint256 _epochsNumber, uint256 _coverTokens) external;\\r\\n\\r\\n    /// @param _holder who owns coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    function buyPolicyFor(\\r\\n        address _holder,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens\\r\\n    ) external;\\r\\n\\r\\n    function policyBook() external view returns (IPolicyBook);\\r\\n\\r\\n    function userLiquidity(address account) external view returns (uint256);\\r\\n\\r\\n    /// @notice forces an update of RewardsGenerator multiplier\\r\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\r\\n\\r\\n    /// @notice view function to get precise policy price\\r\\n    /// @param _epochsNumber is number of epochs to cover\\r\\n    /// @param _coverTokens is number of tokens to cover\\r\\n    /// @param _buyer address of the user who buy the policy\\r\\n    /// @return totalSeconds is number of seconds to cover\\r\\n    /// @return totalPrice is the policy price which will pay by the buyer\\r\\n    function getPolicyPrice(\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _buyer\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalSeconds,\\r\\n            uint256 totalPrice,\\r\\n            uint256 pricePercentage\\r\\n        );\\r\\n\\r\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\r\\n\\r\\n    /// @notice virtual funds deployed by reinsurance pool\\r\\n    function VUreinsurnacePool() external view returns (uint256);\\r\\n\\r\\n    /// @notice leverage funds deployed by reinsurance pool\\r\\n    function LUreinsurnacePool() external view returns (uint256);\\r\\n\\r\\n    /// @notice leverage funds deployed by user leverage pool\\r\\n    function LUuserLeveragePool(address userLeveragePool) external view returns (uint256);\\r\\n\\r\\n    /// @notice total leverage funds deployed to the pool sum of (VUreinsurnacePool,LUreinsurnacePool,LUuserLeveragePool)\\r\\n    function totalLeveragedLiquidity() external view returns (uint256);\\r\\n\\r\\n    function userleveragedMPL() external view returns (uint256);\\r\\n\\r\\n    function reinsurancePoolMPL() external view returns (uint256);\\r\\n\\r\\n    function rebalancingThreshold() external view returns (uint256);\\r\\n\\r\\n    function safePricingModel() external view returns (bool);\\r\\n\\r\\n    /// @notice policyBookFacade initializer\\r\\n    /// @param pbProxy polciybook address upgreadable cotnract.\\r\\n    function __PolicyBookFacade_init(\\r\\n        address pbProxy,\\r\\n        address liquidityProvider,\\r\\n        uint256 initialDeposit\\r\\n    ) external;\\r\\n\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicyFromDistributor(\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _distributor\\r\\n    ) external;\\r\\n\\r\\n    /// @param _buyer who is buying the coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicyFromDistributorFor(\\r\\n        address _buyer,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _distributor\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidity(uint256 _liquidityAmount) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _user the one taht add liquidity\\r\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidityFromDistributorFor(address _user, uint256 _liquidityAmount) external;\\r\\n\\r\\n    function addLiquidityAndStakeFor(\\r\\n        address _liquidityHolderAddr,\\r\\n        uint256 _liquidityAmount,\\r\\n        uint256 _stakeSTBLAmount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin and stake it,\\r\\n    /// @dev access: ANY\\r\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\r\\n\\r\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\r\\n    function withdrawLiquidity() external;\\r\\n\\r\\n    /// @notice deploy leverage funds (RP lStable, ULP lStable)\\r\\n    /// @param  deployedAmount uint256 the deployed amount to be added or substracted from the total liquidity\\r\\n    /// @param leveragePool whether user leverage or reinsurance leverage\\r\\n    function deployLeverageFundsAfterRebalance(\\r\\n        uint256 deployedAmount,\\r\\n        ILeveragePortfolio.LeveragePortfolio leveragePool\\r\\n    ) external;\\r\\n\\r\\n    /// @notice deploy virtual funds (RP vStable)\\r\\n    /// @param  deployedAmount uint256 the deployed amount to be added to the liquidity\\r\\n    function deployVirtualFundsAfterRebalance(uint256 deployedAmount) external;\\r\\n\\r\\n    ///@dev in case ur changed of the pools by commit a claim or policy expired\\r\\n    function reevaluateProvidedLeverageStable() external;\\r\\n\\r\\n    /// @notice set the MPL for the user leverage and the reinsurance leverage\\r\\n    /// @param _userLeverageMPL uint256 value of the user leverage MPL\\r\\n    /// @param _reinsuranceLeverageMPL uint256  value of the reinsurance leverage MPL\\r\\n    function setMPLs(uint256 _userLeverageMPL, uint256 _reinsuranceLeverageMPL) external;\\r\\n\\r\\n    /// @notice sets the rebalancing threshold value\\r\\n    /// @param _newRebalancingThreshold uint256 rebalancing threshhold value\\r\\n    function setRebalancingThreshold(uint256 _newRebalancingThreshold) external;\\r\\n\\r\\n    /// @notice sets the rebalancing threshold value\\r\\n    /// @param _safePricingModel bool is pricing model safe (true) or not (false)\\r\\n    function setSafePricingModel(bool _safePricingModel) external;\\r\\n\\r\\n    /// @notice returns how many BMI tokens needs to approve in order to submit a claim\\r\\n    function getClaimApprovalAmount(address user) external view returns (uint256);\\r\\n\\r\\n    /// @notice upserts a withdraw request\\r\\n    /// @dev prevents adding a request if an already pending or ready request is open.\\r\\n    /// @param _tokensToWithdraw uint256 amount of tokens to withdraw\\r\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\r\\n\\r\\n    function listUserLeveragePools(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _userLeveragePools);\\r\\n\\r\\n    function countUserLeveragePools() external view returns (uint256);\\r\\n\\r\\n    /// @notice Getting info, access: ANY\\r\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\r\\n    /// @return _insuredContract is an addres of insured contract\\r\\n    /// @return _contractType is a type of insured contract\\r\\n    /// @return _whitelisted is a state of whitelisting\\r\\n    function info()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory _symbol,\\r\\n            address _insuredContract,\\r\\n            IPolicyBookFabric.ContractType _contractType,\\r\\n            bool _whitelisted\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookFabric.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPolicyBookFabric {\\r\\n    enum ContractType {CONTRACT, STABLECOIN, SERVICE, EXCHANGE, VARIOUS}\\r\\n\\r\\n    /// @notice Create new Policy Book contract, access: ANY\\r\\n    /// @param _contract is Contract to create policy book for\\r\\n    /// @param _contractType is Contract to create policy book for\\r\\n    /// @param _description is bmiXCover token desription for this policy book\\r\\n    /// @param _projectSymbol replaces x in bmiXCover token symbol\\r\\n    /// @param _initialDeposit is an amount user deposits on creation (addLiquidity())\\r\\n    /// @return _policyBook is address of created contract\\r\\n    function create(\\r\\n        address _contract,\\r\\n        ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol,\\r\\n        uint256 _initialDeposit,\\r\\n        address _shieldMiningToken\\r\\n    ) external returns (address);\\r\\n\\r\\n    function createLeveragePools(\\r\\n        address _insuranceContract,\\r\\n        ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol\\r\\n    ) external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\nimport \\\"./IClaimingRegistry.sol\\\";\\r\\nimport \\\"./IPolicyBookFacade.sol\\\";\\r\\n\\r\\ninterface IPolicyBook {\\r\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\r\\n\\r\\n    struct PolicyHolder {\\r\\n        uint256 coverTokens;\\r\\n        uint256 startEpochNumber;\\r\\n        uint256 endEpochNumber;\\r\\n        uint256 paid;\\r\\n        uint256 reinsurancePrice;\\r\\n    }\\r\\n\\r\\n    struct WithdrawalInfo {\\r\\n        uint256 withdrawalAmount;\\r\\n        uint256 readyToWithdrawDate;\\r\\n        bool withdrawalAllowed;\\r\\n    }\\r\\n\\r\\n    struct BuyPolicyParameters {\\r\\n        address buyer;\\r\\n        address holder;\\r\\n        uint256 epochsNumber;\\r\\n        uint256 coverTokens;\\r\\n        uint256 distributorFee;\\r\\n        address distributor;\\r\\n    }\\r\\n\\r\\n    function policyHolders(address _holder)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function policyBookFacade() external view returns (IPolicyBookFacade);\\r\\n\\r\\n    function setPolicyBookFacade(address _policyBookFacade) external;\\r\\n\\r\\n    function EPOCH_DURATION() external view returns (uint256);\\r\\n\\r\\n    function stblDecimals() external view returns (uint256);\\r\\n\\r\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\r\\n\\r\\n    function whitelisted() external view returns (bool);\\r\\n\\r\\n    function epochStartTime() external view returns (uint256);\\r\\n\\r\\n    // @TODO: should we let DAO to change contract address?\\r\\n    /// @notice Returns address of contract this PolicyBook covers, access: ANY\\r\\n    /// @return _contract is address of covered contract\\r\\n    function insuranceContractAddress() external view returns (address _contract);\\r\\n\\r\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\r\\n    /// @return _type is type of contract\\r\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\r\\n\\r\\n    function totalLiquidity() external view returns (uint256);\\r\\n\\r\\n    function totalCoverTokens() external view returns (uint256);\\r\\n\\r\\n    // /// @notice return MPL for user leverage pool\\r\\n    // function userleveragedMPL() external view returns (uint256);\\r\\n\\r\\n    // /// @notice return MPL for reinsurance pool\\r\\n    // function reinsurancePoolMPL() external view returns (uint256);\\r\\n\\r\\n    // function bmiRewardMultiplier() external view returns (uint256);\\r\\n\\r\\n    function withdrawalsInfo(address _userAddr)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _withdrawalAmount,\\r\\n            uint256 _readyToWithdrawDate,\\r\\n            bool _withdrawalAllowed\\r\\n        );\\r\\n\\r\\n    function __PolicyBook_init(\\r\\n        address _insuranceContract,\\r\\n        IPolicyBookFabric.ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol\\r\\n    ) external;\\r\\n\\r\\n    function whitelist(bool _whitelisted) external;\\r\\n\\r\\n    function getEpoch(uint256 time) external view returns (uint256);\\r\\n\\r\\n    /// @notice get STBL equivalent\\r\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    /// @notice get BMIX equivalent\\r\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    /// @notice submits new claim of the policy book\\r\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\r\\n\\r\\n    /// @notice submits new appeal claim of the policy book\\r\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\r\\n\\r\\n    /// @notice updates info on claim when not accepted\\r\\n    function commitClaim(\\r\\n        address claimer,\\r\\n        uint256 claimEndTime,\\r\\n        IClaimingRegistry.ClaimStatus status\\r\\n    ) external;\\r\\n\\r\\n    /// @notice withdraw the claim after requested\\r\\n    function commitWithdrawnClaim(address claimer) external;\\r\\n\\r\\n    /// @notice function to get precise current cover and liquidity\\r\\n    function getNewCoverAndLiquidity()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\r\\n\\r\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\r\\n    /// @param _buyer who is transferring funds\\r\\n    /// @param _holder who owns coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributorFee distributor fee (commission). It can't be greater than PROTOCOL_PERCENTAGE\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicy(\\r\\n        address _buyer,\\r\\n        address _holder,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        uint256 _distributorFee,\\r\\n        address _distributor\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    /// @notice end active policy from ClaimingRegistry in case of a new bought policy\\r\\n    function endActivePolicy(address _holder) external;\\r\\n\\r\\n    function updateEpochsInfo() external;\\r\\n\\r\\n    /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\r\\n    /// @param _liquidityHolderAddr is address of address to assign cover\\r\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _liquidityBuyerAddr address the one that transfer funds\\r\\n    /// @param _liquidityHolderAddr address the one that owns liquidity\\r\\n    /// @param _liquidityAmount uint256 amount to be added on behalf the sender\\r\\n    /// @param _stakeSTBLAmount uint256 the staked amount if add liq and stake\\r\\n    function addLiquidity(\\r\\n        address _liquidityBuyerAddr,\\r\\n        address _liquidityHolderAddr,\\r\\n        uint256 _liquidityAmount,\\r\\n        uint256 _stakeSTBLAmount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\r\\n\\r\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\r\\n\\r\\n    function requestWithdrawal(uint256 _tokensToWithdraw, address _user) external;\\r\\n\\r\\n    // function requestWithdrawalWithPermit(\\r\\n    //     uint256 _tokensToWithdraw,\\r\\n    //     uint8 _v,\\r\\n    //     bytes32 _r,\\r\\n    //     bytes32 _s\\r\\n    // ) external;\\r\\n\\r\\n    function unlockTokens() external;\\r\\n\\r\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\r\\n    function withdrawLiquidity(address sender) external returns (uint256);\\r\\n\\r\\n    ///@notice for doing defi hard rebalancing, access: policyBookFacade\\r\\n    function updateLiquidity(uint256 _newLiquidity) external;\\r\\n\\r\\n    function getAPY() external view returns (uint256);\\r\\n\\r\\n    /// @notice Getting user stats, access: ANY\\r\\n    function userStats(address _user) external view returns (PolicyHolder memory);\\r\\n\\r\\n    /// @notice Getting number stats, access: ANY\\r\\n    /// @return _maxCapacities is a max token amount that a user can buy\\r\\n    /// @return _buyPolicyCapacity new capacity which is a max token amount that a user can buy including withdraw amount\\r\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\r\\n    /// @return _totalLeveragedLiquidity is PolicyBook's leveraged liquidity\\r\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\r\\n    /// @return _annualProfitYields is its APY\\r\\n    /// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\r\\n    function numberStats()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _maxCapacities,\\r\\n            uint256 _buyPolicyCapacity,\\r\\n            uint256 _totalSTBLLiquidity,\\r\\n            uint256 _totalLeveragedLiquidity,\\r\\n            uint256 _stakedSTBL,\\r\\n            uint256 _annualProfitYields,\\r\\n            uint256 _annualInsuranceCost,\\r\\n            uint256 _bmiXRatio\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ILiquidityRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ILiquidityRegistry {\\r\\n    struct LiquidityInfo {\\r\\n        address policyBookAddr;\\r\\n        uint256 lockedAmount;\\r\\n        uint256 availableAmount;\\r\\n        uint256 bmiXRatio; // multiply availableAmount by this num to get stable coin\\r\\n    }\\r\\n\\r\\n    struct WithdrawalRequestInfo {\\r\\n        address policyBookAddr;\\r\\n        uint256 requestAmount;\\r\\n        uint256 requestSTBLAmount;\\r\\n        uint256 availableLiquidity;\\r\\n        uint256 readyToWithdrawDate;\\r\\n        uint256 endWithdrawDate;\\r\\n    }\\r\\n\\r\\n    struct WithdrawalSetInfo {\\r\\n        address policyBookAddr;\\r\\n        uint256 requestAmount;\\r\\n        uint256 requestSTBLAmount;\\r\\n        uint256 availableSTBLAmount;\\r\\n    }\\r\\n\\r\\n    function tryToAddPolicyBook(address _userAddr, address _policyBookAddr) external;\\r\\n\\r\\n    function tryToRemovePolicyBook(address _userAddr, address _policyBookAddr) external;\\r\\n\\r\\n    function removeExpiredWithdrawalRequest(address _userAddr, address _policyBookAddr) external;\\r\\n\\r\\n    function getPolicyBooksArrLength(address _userAddr) external view returns (uint256);\\r\\n\\r\\n    function getPolicyBooksArr(address _userAddr)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _resultArr);\\r\\n\\r\\n    function getLiquidityInfos(\\r\\n        address _userAddr,\\r\\n        uint256 _offset,\\r\\n        uint256 _limit\\r\\n    ) external view returns (LiquidityInfo[] memory _resultArr);\\r\\n\\r\\n    function getWithdrawalRequests(\\r\\n        address _userAddr,\\r\\n        uint256 _offset,\\r\\n        uint256 _limit\\r\\n    ) external view returns (uint256 _arrLength, WithdrawalRequestInfo[] memory _resultArr);\\r\\n\\r\\n    function registerWithdrawl(address _policyBook, address _users) external;\\r\\n\\r\\n    function getAllPendingWithdrawalRequestsAmount()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _totalWithdrawlAmount);\\r\\n\\r\\n    function getPendingWithdrawalAmountByPolicyBook(address _policyBook)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _totalWithdrawlAmount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ILiquidityMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILiquidityMining {\\n    struct TeamDetails {\\n        string teamName;\\n        address referralLink;\\n        uint256 membersNumber;\\n        uint256 totalStakedAmount;\\n        uint256 totalReward;\\n    }\\n\\n    struct UserInfo {\\n        address userAddr;\\n        string teamName;\\n        uint256 stakedAmount;\\n        uint256 mainNFT; // 0 or NFT index if available\\n        uint256 platinumNFT; // 0 or NFT index if available\\n    }\\n\\n    struct UserRewardsInfo {\\n        string teamName;\\n        uint256 totalBMIReward; // total BMI reward\\n        uint256 availableBMIReward; // current claimable BMI reward\\n        uint256 incomingPeriods; // how many month are incoming\\n        uint256 timeToNextDistribution; // exact time left to next distribution\\n        uint256 claimedBMI; // actual number of claimed BMI\\n        uint256 mainNFTAvailability; // 0 or NFT index if available\\n        uint256 platinumNFTAvailability; // 0 or NFT index if available\\n        bool claimedNFTs; // true if user claimed NFTs\\n    }\\n\\n    struct MyTeamInfo {\\n        TeamDetails teamDetails;\\n        uint256 myStakedAmount;\\n        uint256 teamPlace;\\n    }\\n\\n    struct UserTeamInfo {\\n        address teamAddr;\\n        uint256 stakedAmount;\\n        uint256 countOfRewardedMonth;\\n        bool isNFTDistributed;\\n    }\\n\\n    struct TeamInfo {\\n        string name;\\n        uint256 totalAmount;\\n        address[] teamLeaders;\\n    }\\n\\n    function startLiquidityMiningTime() external view returns (uint256);\\n\\n    function getTopTeams() external view returns (TeamDetails[] memory teams);\\n\\n    function getTopUsers() external view returns (UserInfo[] memory users);\\n\\n    function getAllTeamsLength() external view returns (uint256);\\n\\n    function getAllTeamsDetails(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (TeamDetails[] memory _teamDetailsArr);\\n\\n    function getMyTeamsLength() external view returns (uint256);\\n\\n    function getMyTeamMembers(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (address[] memory _teamMembers, uint256[] memory _memberStakedAmount);\\n\\n    function getAllUsersLength() external view returns (uint256);\\n\\n    function getAllUsersInfo(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (UserInfo[] memory _userInfos);\\n\\n    function getMyTeamInfo() external view returns (MyTeamInfo memory _myTeamInfo);\\n\\n    function getRewardsInfo(address user)\\n        external\\n        view\\n        returns (UserRewardsInfo memory userRewardInfo);\\n\\n    function createTeam(string calldata _teamName) external;\\n\\n    function deleteTeam() external;\\n\\n    function joinTheTeam(address _referralLink) external;\\n\\n    function getSlashingPercentage() external view returns (uint256);\\n\\n    function investSTBL(uint256 _tokensAmount, address _policyBookAddr) external;\\n\\n    function distributeNFT() external;\\n\\n    function checkPlatinumNFTReward(address _userAddr) external view returns (uint256);\\n\\n    function checkMainNFTReward(address _userAddr) external view returns (uint256);\\n\\n    function distributeBMIReward() external;\\n\\n    function getTotalUserBMIReward(address _userAddr) external view returns (uint256);\\n\\n    function checkAvailableBMIReward(address _userAddr) external view returns (uint256);\\n\\n    /// @notice checks if liquidity mining event is lasting (startLiquidityMining() has been called)\\n    /// @return true if LM is started and not ended, false otherwise\\n    function isLMLasting() external view returns (bool);\\n\\n    /// @notice checks if liquidity mining event is finished. In order to be finished, it has to be started\\n    /// @return true if LM is finished, false if event is still going or not started\\n    function isLMEnded() external view returns (bool);\\n\\n    function getEndLMTime() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/ILeveragePortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface ILeveragePortfolio {\\r\\n    enum LeveragePortfolio {USERLEVERAGEPOOL, REINSURANCEPOOL}\\r\\n    struct LevFundsFactors {\\r\\n        uint256 netMPL;\\r\\n        uint256 netMPLn;\\r\\n        address policyBookAddr;\\r\\n    }\\r\\n\\r\\n    function targetUR() external view returns (uint256);\\r\\n\\r\\n    function d_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    function a_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    function max_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    /// @notice deploy lStable from user leverage pool or reinsurance pool using 2 formulas: access by policybook.\\r\\n    /// @param leveragePoolType LeveragePortfolio is determine the pool which call the function\\r\\n    function deployLeverageStableToCoveragePools(LeveragePortfolio leveragePoolType)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice deploy the vStable from RP in v2 and for next versions it will be from RP and LP : access by policybook.\\r\\n    function deployVirtualStableToCoveragePools() external returns (uint256);\\r\\n\\r\\n    /// @notice set the threshold % for re-evaluation of the lStable provided across all Coverage pools : access by owner\\r\\n    /// @param threshold uint256 is the reevaluatation threshold\\r\\n    function setRebalancingThreshold(uint256 threshold) external;\\r\\n\\r\\n    /// @notice set the protocol constant : access by owner\\r\\n    /// @param _targetUR uint256 target utitlization ration\\r\\n    /// @param _d_ProtocolConstant uint256 D protocol constant\\r\\n    /// @param  _a1_ProtocolConstant uint256 A1 protocol constant\\r\\n    /// @param _max_ProtocolConstant uint256 the max % included\\r\\n    function setProtocolConstant(\\r\\n        uint256 _targetUR,\\r\\n        uint256 _d_ProtocolConstant,\\r\\n        uint256 _a1_ProtocolConstant,\\r\\n        uint256 _max_ProtocolConstant\\r\\n    ) external;\\r\\n\\r\\n    /// @notice calc M factor by formual M = min( abs((1/ (Tur-UR))*d) /a, max)\\r\\n    /// @param poolUR uint256 utitilization ratio for a coverage pool\\r\\n    /// @return uint256 M facotr\\r\\n    //function calcM(uint256 poolUR) external returns (uint256);\\r\\n\\r\\n    /// @return uint256 the amount of vStable stored in the pool\\r\\n    function totalLiquidity() external view returns (uint256);\\r\\n\\r\\n    /// @notice add the portion of 80% of premium to user leverage pool where the leverage provide lstable : access policybook\\r\\n    /// add the 20% of premium + portion of 80% of premium where reisnurance pool participate in coverage pools (vStable)  : access policybook\\r\\n    /// @param epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\r\\n    /// @param  premiumAmount uint256 the premium amount which is a portion of 80% of the premium\\r\\n    function addPolicyPremium(uint256 epochsNumber, uint256 premiumAmount) external;\\r\\n\\r\\n    /// @notice Used to get a list of coverage pools which get leveraged , use with count()\\r\\n    /// @return _coveragePools a list containing policybook addresses\\r\\n    function listleveragedCoveragePools(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _coveragePools);\\r\\n\\r\\n    /// @notice get count of coverage pools which get leveraged\\r\\n    function countleveragedCoveragePools() external view returns (uint256);\\r\\n\\r\\n    function updateLiquidity(uint256 _lostLiquidity) external;\\r\\n\\r\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IContractsRegistry {\\r\\n    function getAMMRouterContract() external view returns (address);\\r\\n\\r\\n    function getAMMBMIToETHPairContract() external view returns (address);\\r\\n\\r\\n    function getAMMBMIToUSDTPairContract() external view returns (address);\\r\\n\\r\\n    function getSushiSwapMasterChefV2Contract() external view returns (address);\\r\\n\\r\\n    function getWrappedTokenContract() external view returns (address);\\r\\n\\r\\n    function getUSDTContract() external view returns (address);\\r\\n\\r\\n    function getBMIContract() external view returns (address);\\r\\n\\r\\n    function getPriceFeedContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookRegistryContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookFabricContract() external view returns (address);\\r\\n\\r\\n    function getBMICoverStakingContract() external view returns (address);\\r\\n\\r\\n    function getBMICoverStakingViewContract() external view returns (address);\\r\\n\\r\\n    function getBMITreasury() external view returns (address);\\r\\n\\r\\n    function getRewardsGeneratorContract() external view returns (address);\\r\\n\\r\\n    function getBMIUtilityNFTContract() external view returns (address);\\r\\n\\r\\n    function getNFTStakingContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityBridgeContract() external view returns (address);\\r\\n\\r\\n    function getClaimingRegistryContract() external view returns (address);\\r\\n\\r\\n    function getPolicyRegistryContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityRegistryContract() external view returns (address);\\r\\n\\r\\n    function getClaimVotingContract() external view returns (address);\\r\\n\\r\\n    function getReinsurancePoolContract() external view returns (address);\\r\\n\\r\\n    function getLeveragePortfolioViewContract() external view returns (address);\\r\\n\\r\\n    function getCapitalPoolContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookAdminContract() external view returns (address);\\r\\n\\r\\n    function getPolicyQuoteContract() external view returns (address);\\r\\n\\r\\n    function getBMIStakingContract() external view returns (address);\\r\\n\\r\\n    function getSTKBMIContract() external view returns (address);\\r\\n\\r\\n    function getStkBMIStakingContract() external view returns (address);\\r\\n\\r\\n    function getVBMIContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityMiningStakingETHContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityMiningStakingUSDTContract() external view returns (address);\\r\\n\\r\\n    function getReputationSystemContract() external view returns (address);\\r\\n\\r\\n    function getDefiProtocol1Contract() external view returns (address);\\r\\n\\r\\n    function getAaveLendPoolAddressProvdierContract() external view returns (address);\\r\\n\\r\\n    function getAaveATokenContract() external view returns (address);\\r\\n\\r\\n    function getDefiProtocol2Contract() external view returns (address);\\r\\n\\r\\n    function getCompoundCTokenContract() external view returns (address);\\r\\n\\r\\n    function getCompoundComptrollerContract() external view returns (address);\\r\\n\\r\\n    function getDefiProtocol3Contract() external view returns (address);\\r\\n\\r\\n    function getYearnVaultContract() external view returns (address);\\r\\n\\r\\n    function getYieldGeneratorContract() external view returns (address);\\r\\n\\r\\n    function getShieldMiningContract() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IClaimingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\n\\r\\ninterface IClaimingRegistry {\\r\\n    enum ClaimStatus {\\r\\n        CAN_CLAIM,\\r\\n        UNCLAIMABLE,\\r\\n        PENDING,\\r\\n        AWAITING_CALCULATION,\\r\\n        REJECTED_CAN_APPEAL,\\r\\n        REJECTED,\\r\\n        ACCEPTED,\\r\\n        EXPIRED\\r\\n    }\\r\\n\\r\\n    struct ClaimInfo {\\r\\n        address claimer;\\r\\n        address policyBookAddress;\\r\\n        string evidenceURI;\\r\\n        uint256 dateSubmitted;\\r\\n        uint256 dateEnded;\\r\\n        bool appeal;\\r\\n        ClaimStatus status;\\r\\n        uint256 claimAmount;\\r\\n        uint256 claimRefund;\\r\\n    }\\r\\n\\r\\n    struct ClaimWithdrawalInfo {\\r\\n        uint256 readyToWithdrawDate;\\r\\n        bool committed;\\r\\n    }\\r\\n\\r\\n    struct RewardWithdrawalInfo {\\r\\n        uint256 rewardAmount;\\r\\n        uint256 readyToWithdrawDate;\\r\\n    }\\r\\n\\r\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\r\\n\\r\\n    function claimWithdrawalInfo(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 readyToWithdrawDate, bool committed);\\r\\n\\r\\n    function rewardWithdrawalInfo(address voter)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 rewardAmount, uint256 readyToWithdrawDate);\\r\\n\\r\\n    /// @notice returns anonymous voting duration\\r\\n    function anonymousVotingDuration(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns the whole voting duration\\r\\n    function votingDuration(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns the whole voting duration + view verdict duration\\r\\n    function validityDuration(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many time should pass before anyone could calculate a claim result\\r\\n    function anyoneCanCalculateClaimResultAfter(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice check if a user can buy new policy of specified PolicyBook and end the active one if there is\\r\\n    function canBuyNewPolicy(address buyer, address policyBookAddress) external;\\r\\n\\r\\n    /// @notice returns withdrawal status of requested claim\\r\\n    function getClaimWithdrawalStatus(uint256 index) external view returns (WithdrawalStatus);\\r\\n\\r\\n    /// @notice returns withdrawal status of requested reward\\r\\n    function getRewardWithdrawalStatus(address voter) external view returns (WithdrawalStatus);\\r\\n\\r\\n    /// @notice returns true if there is ongoing claiming procedure\\r\\n    function hasProcedureOngoing(address poolAddress) external view returns (bool);\\r\\n\\r\\n    /// @notice submits new PolicyBook claim for the user\\r\\n    function submitClaim(\\r\\n        address user,\\r\\n        address policyBookAddress,\\r\\n        string calldata evidenceURI,\\r\\n        uint256 cover,\\r\\n        bool appeal\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim with this index exists\\r\\n    function claimExists(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns claim submition time\\r\\n    function claimSubmittedTime(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns claim end time or zero in case it is pending\\r\\n    function claimEndTime(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim is anonymously votable\\r\\n    function isClaimAnonymouslyVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if the claim is exposably votable\\r\\n    function isClaimExposablyVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if claim is anonymously votable or exposably votable\\r\\n    function isClaimVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if a claim can be calculated by anyone\\r\\n    function canClaimBeCalculatedByAnyone(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if this claim is pending or awaiting\\r\\n    function isClaimPending(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns how many claims the holder has\\r\\n    function countPolicyClaimerClaims(address user) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many pending claims are there\\r\\n    function countPendingClaims() external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many claims are there\\r\\n    function countClaims() external view returns (uint256);\\r\\n\\r\\n    /// @notice returns a claim index of it's claimer and an ordinal number\\r\\n    function claimOfOwnerIndexAt(address claimer, uint256 orderIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice returns pending claim index by its ordinal index\\r\\n    function pendingClaimIndexAt(uint256 orderIndex) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns claim index by its ordinal index\\r\\n    function claimIndexAt(uint256 orderIndex) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns current active claim index by policybook and claimer\\r\\n    function claimIndex(address claimer, address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim is appealed\\r\\n    function isClaimAppeal(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns current status of a claim\\r\\n    function policyStatus(address claimer, address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (ClaimStatus);\\r\\n\\r\\n    /// @notice returns current status of a claim\\r\\n    function claimStatus(uint256 index) external view returns (ClaimStatus);\\r\\n\\r\\n    /// @notice returns the claim owner (claimer)\\r\\n    function claimOwner(uint256 index) external view returns (address);\\r\\n\\r\\n    /// @notice returns the claim PolicyBook\\r\\n    function claimPolicyBook(uint256 index) external view returns (address);\\r\\n\\r\\n    /// @notice returns claim info by its index\\r\\n    function claimInfo(uint256 index) external view returns (ClaimInfo memory _claimInfo);\\r\\n\\r\\n    function getAllPendingClaimsAmount() external view returns (uint256 _totalClaimsAmount);\\r\\n\\r\\n    function getAllPendingRewardsAmount() external view returns (uint256 _totalRewardsAmount);\\r\\n\\r\\n    function getClaimableAmounts(uint256[] memory _claimIndexes) external view returns (uint256);\\r\\n\\r\\n    /// @notice marks the user's claim as Accepted\\r\\n    function acceptClaim(uint256 index, uint256 amount) external;\\r\\n\\r\\n    /// @notice marks the user's claim as Rejected\\r\\n    function rejectClaim(uint256 index) external;\\r\\n\\r\\n    /// @notice marks the user's claim as Expired\\r\\n    function expireClaim(uint256 index) external;\\r\\n\\r\\n    /// @notice Update Image Uri in case it contains material that is ilegal\\r\\n    ///         or offensive.\\r\\n    /// @dev Only the owner of the PolicyBookAdmin can erase/update evidenceUri.\\r\\n    /// @param claim_Index Claim Index that is going to be updated\\r\\n    /// @param _newEvidenceURI New evidence uri. It can be blank.\\r\\n    function updateImageUriOfClaim(uint256 claim_Index, string calldata _newEvidenceURI) external;\\r\\n\\r\\n    function requestClaimWithdrawal(uint256 index) external;\\r\\n\\r\\n    function requestRewardWithdrawal(address voter, uint256 rewardAmount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IBMIStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./tokens/ISTKBMIToken.sol\\\";\\r\\n\\r\\ninterface IBMIStaking {\\r\\n    event StakedBMI(uint256 stakedBMI, uint256 mintedStkBMI, address indexed recipient);\\r\\n    event BMIWithdrawn(uint256 amountBMI, uint256 burnedStkBMI, address indexed recipient);\\r\\n\\r\\n    event UnusedRewardPoolRevoked(address recipient, uint256 amount);\\r\\n    event RewardPoolRevoked(address recipient, uint256 amount);\\r\\n\\r\\n    struct WithdrawalInfo {\\r\\n        uint256 coolDownTimeEnd;\\r\\n        uint256 amountBMIRequested;\\r\\n    }\\r\\n\\r\\n    function stakeWithPermit(\\r\\n        uint256 _amountBMI,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external;\\r\\n\\r\\n    function stakeFor(address _user, uint256 _amountBMI) external;\\r\\n\\r\\n    function stake(uint256 _amountBMI) external;\\r\\n\\r\\n    function whenCanWithdrawBMIReward(address _address) external view returns (uint256);\\r\\n\\r\\n    function unlockTokensToWithdraw(uint256 _amountBMIUnlock) external;\\r\\n\\r\\n    function withdraw() external;\\r\\n\\r\\n    /// @notice Getting withdraw information\\r\\n    /// @return _amountBMIRequested is amount of bmi tokens requested to unlock\\r\\n    /// @return _amountStkBMI is amount of stkBMI that will burn\\r\\n    /// @return _unlockPeriod is its timestamp when user can withdraw\\r\\n    ///         returns 0 if it didn't unlocked yet. User has 48hs to withdraw\\r\\n    /// @return _availableFor is the end date if withdraw period has already begun\\r\\n    ///         or 0 if it is expired or didn't start\\r\\n    function getWithdrawalInfo(address _userAddr)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _amountBMIRequested,\\r\\n            uint256 _amountStkBMI,\\r\\n            uint256 _unlockPeriod,\\r\\n            uint256 _availableFor\\r\\n        );\\r\\n\\r\\n    function addToPool(uint256 _amount) external;\\r\\n\\r\\n    function stakingReward(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    function getStakedBMI(address _address) external view returns (uint256);\\r\\n\\r\\n    function getAPY() external view returns (uint256);\\r\\n\\r\\n    function setRewardPerBlock(uint256 _amount) external;\\r\\n\\r\\n    function revokeRewardPool(uint256 _amount) external;\\r\\n\\r\\n    function revokeUnusedRewardPool() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IBMICoverStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IBMICoverStaking {\\r\\n    struct StakingInfo {\\r\\n        address policyBookAddress;\\r\\n        uint256 stakedBMIXAmount;\\r\\n    }\\r\\n\\r\\n    struct PolicyBookInfo {\\r\\n        uint256 totalStakedSTBL;\\r\\n        uint256 rewardPerBlock;\\r\\n        uint256 stakingAPY;\\r\\n        uint256 liquidityAPY;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 totalStakedBMIX;\\r\\n        uint256 totalStakedSTBL;\\r\\n        uint256 totalBmiReward;\\r\\n    }\\r\\n\\r\\n    struct NFTsInfo {\\r\\n        uint256 nftIndex;\\r\\n        string uri;\\r\\n        uint256 stakedBMIXAmount;\\r\\n        uint256 stakedSTBLAmount;\\r\\n        uint256 reward;\\r\\n    }\\r\\n\\r\\n    function aggregateNFTs(address policyBookAddress, uint256[] calldata tokenIds) external;\\r\\n\\r\\n    function stakeBMIX(uint256 amount, address policyBookAddress) external;\\r\\n\\r\\n    function stakeBMIXWithPermit(\\r\\n        uint256 bmiXAmount,\\r\\n        address policyBookAddress,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function stakeBMIXFrom(address user, uint256 amount) external;\\r\\n\\r\\n    function stakeBMIXFromWithPermit(\\r\\n        address user,\\r\\n        uint256 bmiXAmount,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    // mappings\\r\\n\\r\\n    function _stakersPool(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (address policyBookAddress, uint256 stakedBMIXAmount);\\r\\n\\r\\n    // function getPolicyBookAPY(address policyBookAddress) external view returns (uint256);\\r\\n\\r\\n    function restakeBMIProfit(uint256 tokenId) external;\\r\\n\\r\\n    function restakeStakerBMIProfit(address policyBookAddress) external;\\r\\n\\r\\n    function withdrawBMIProfit(uint256 tokenID) external;\\r\\n\\r\\n    function withdrawStakerBMIProfit(address policyBookAddress) external;\\r\\n\\r\\n    function withdrawFundsWithProfit(uint256 tokenID) external;\\r\\n\\r\\n    function withdrawStakerFundsWithProfit(address policyBookAddress) external;\\r\\n\\r\\n    function getSlashedBMIProfit(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function getBMIProfit(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function getSlashedStakerBMIProfit(\\r\\n        address staker,\\r\\n        address policyBookAddress,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (uint256 totalProfit);\\r\\n\\r\\n    function getStakerBMIProfit(\\r\\n        address staker,\\r\\n        address policyBookAddress,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (uint256 totalProfit);\\r\\n\\r\\n    function totalStaked(address user) external view returns (uint256);\\r\\n\\r\\n    function totalStakedSTBL(address user) external view returns (uint256);\\r\\n\\r\\n    function stakedByNFT(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function stakedSTBLByNFT(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function uri(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    function tokenOfOwnerByIndex(address user, uint256 index) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/abstract/AbstractSlasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\n\\r\\nimport \\\"../Globals.sol\\\";\\r\\n\\r\\nabstract contract AbstractSlasher {\\r\\n    using SafeMath for uint256;\\r\\n    using Math for uint256;\\r\\n\\r\\n    uint256 public constant MIN_EXIT_FEE = 20 * PRECISION;\\r\\n\\r\\n    function getSlashingPercentage() public pure returns (uint256) {\\r\\n        return MIN_EXIT_FEE;\\r\\n    }\\r\\n\\r\\n    function _applySlashing(uint256 amount) internal pure returns (uint256) {\\r\\n        return amount.sub(_getSlashed(amount));\\r\\n    }\\r\\n\\r\\n    function _getSlashed(uint256 amount) internal pure returns (uint256) {\\r\\n        return amount.mul(getSlashingPercentage()).div(PERCENTAGE_100);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\r\\nuint256 constant DAYS_IN_THE_YEAR = 365;\\r\\nuint256 constant MAX_INT = type(uint256).max;\\r\\n\\r\\nuint256 constant DECIMALS18 = 10**18;\\r\\n\\r\\nuint256 constant PRECISION = 10**25;\\r\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\r\\n\\r\\nuint256 constant BLOCKS_PER_DAY = 6450;\\r\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\r\\n\\r\\nuint256 constant APY_TOKENS = DECIMALS18;\\r\\n\\r\\nuint256 constant PROTOCOL_PERCENTAGE = 20 * PRECISION;\\r\\n\\r\\nuint256 constant DEFAULT_REBALANCING_THRESHOLD = 10**23;\\r\\n\\r\\nuint256 constant EPOCH_DAYS_AMOUNT = 7;\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingBMIProfitWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"}],\"name\":\"StakingNFTBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"StakingNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_EXIT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__BMICoverStaking_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_stakersPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedBMIXAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"aggregateNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowStakeProfit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmiStaking\",\"outputs\":[{\"internalType\":\"contract IBMIStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmiTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBMIProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSlashedBMIProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getSlashedStakerBMIProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlashingPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getStakerBMIProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMining\",\"outputs\":[{\"internalType\":\"contract ILiquidityMining\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRegistry\",\"outputs\":[{\"internalType\":\"contract ILiquidityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookRegistry\",\"outputs\":[{\"internalType\":\"contract IPolicyBookRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"restakeBMIProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"}],\"name\":\"restakeStakerBMIProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsGenerator\",\"outputs\":[{\"internalType\":\"contract IRewardsGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowStakeProfit\",\"type\":\"bool\"}],\"name\":\"setAllowStakeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shieldMining\",\"outputs\":[{\"internalType\":\"contract IShieldMining\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bmiXAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"}],\"name\":\"stakeBMIX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bmiXAmount\",\"type\":\"uint256\"}],\"name\":\"stakeBMIXFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bmiXAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeBMIXFromWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bmiXAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeBMIXWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakedByNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakedSTBLByNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalStakedSTBL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawBMIProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawFundsWithProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"}],\"name\":\"withdrawStakerBMIProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"}],\"name\":\"withdrawStakerFundsWithProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BMICoverStaking", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}