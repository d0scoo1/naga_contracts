{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (access/AccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport { IAccessControl } from \\\"./IAccessControl.sol\\\";\\r\\nimport { Context } from \\\"./Context.sol\\\";\\r\\nimport { Strings } from \\\"./Strings.sol\\\";\\r\\nimport { ERC165 } from \\\"./ERC165.sol\\\";\\r\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn\\u0027t allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\r\\n    struct RoleData {\\r\\n        mapping(address =\\u003e bool) members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 =\\u003e RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\r\\n     * with a standardized message including the required role.\\r\\n     *\\r\\n     * The format of the revert reason is given by the following regular expression:\\r\\n     *\\r\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n     *\\r\\n     * _Available since v4.1._\\r\\n     */\\r\\n    modifier onlyRole(bytes32 role) virtual {\\r\\n        _checkRole(role, _msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\r\\n        return _roles[role].members[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with a standard message if `account` is missing `role`.\\r\\n     *\\r\\n     * The format of the revert reason is given by the following regular expression:\\r\\n     *\\r\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n     */\\r\\n    function _checkRole(bytes32 role, address account) internal view {\\r\\n        if (!hasRole(role, account)) {\\r\\n            revert(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"AccessControl: account \\\",\\r\\n                        Strings.toHexString(uint160(account), 20),\\r\\n                        \\\" is missing role \\\",\\r\\n                        Strings.toHexString(uint256(role), 32)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual override {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     *\\r\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _grantRole(bytes32 role, address account) internal virtual {\\r\\n        if (!hasRole(role, account)) {\\r\\n            _roles[role].members[account] = true;\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\r\\n        if (hasRole(role, account)) {\\r\\n            _roles[role].members[account] = false;\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\"},\"IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControl {\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {AccessControl-_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role\\u0027s admin, use {AccessControl-_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) external;\\r\\n}\\r\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IStakingContractV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n\\r\\ninterface IStakingContractV1 {\\r\\n\\r\\n    event StakeDeposited(\\r\\n        address indexed staker,\\r\\n        uint256 amount,\\r\\n        string stakerPubKey,\\r\\n        string validatorPubKey);\\r\\n\\r\\n    event UnlockStake(\\r\\n        address indexed staker,\\r\\n        uint256 amount,\\r\\n        string validatorPubKey);\\r\\n\\r\\n    event ForceUnlockStake(\\r\\n        address indexed staker,\\r\\n        uint256 amount,\\r\\n        string validatorPubKey);\\r\\n\\r\\n    event StakeWithdrawn(\\r\\n        address indexed staker,\\r\\n        uint256 stake,\\r\\n        uint256 rewards);\\r\\n\\r\\n    function deposit(\\r\\n        uint256 _amount, \\r\\n        string memory _stakerPubKey,\\r\\n        string memory _validatorPubKey)\\r\\n            external;\\r\\n\\r\\n    function unlockStake(\\r\\n        string memory _stakerPubKey, \\r\\n        uint256 _rewardAmount)\\r\\n            external;\\r\\n\\r\\n    function forceUnlockStake(\\r\\n        string memory _stakerPubKey, \\r\\n        uint256 _rewardAmount)\\r\\n            external;\\r\\n\\r\\n    function withdraw()\\r\\n            external;\\r\\n\\r\\n    function getStatus(\\r\\n        address _stakerEthAddress)\\r\\n            external\\r\\n            returns(uint currentStatus);\\r\\n\\r\\n    function setRatio(\\r\\n        uint256 _newRatio)\\r\\n        external;\\r\\n\\r\\n    function getRatio()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 newRatio);\\r\\n\\r\\n    function changeMinDeposit(\\r\\n        uint256 _newAmount)\\r\\n        external;\\r\\n\\r\\n    function changeUnlockGasCost(\\r\\n        uint256 _newGasCost)\\r\\n        external;\\r\\n\\r\\n    function changeRewardWallet(\\r\\n        address _newRewardWallet)\\r\\n        external;\\r\\n\\r\\n    function pause()\\r\\n        external;\\r\\n\\r\\n    function unPause()\\r\\n        external;\\r\\n}\\r\\n\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport { Context } from \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { Context } from \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor () {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\"},\"StakeOpsController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { AccessControl } from \\\"./AccessControl.sol\\\";\\r\\n\\r\\n/// @title StakeOpsController\\r\\n/// 3 roles are defined:\\r\\n/// STAKE_OPS_ADMIN_ROLE: Accounts with this role have unrestricted execution permissions to all protected functions.\\r\\n/// BALANCE_UPDATER_ROLE:  Accounts with this role have execution permissions over unlockStake function which applies rewards\\r\\n/// PAUSER_ROLE: Accounts with this role can Pause or UnPause (see Pausable.sol) the PowerLedgerStakingV1 contract\\r\\n/// STAKE_OPS_ADMIN_ROLE can be PAUSER_ROLE, but not BALANCE_UPDATER_ROLE\\r\\n/// PAUSER_ROLE and BALANCE_UPDATER_ROLE must be different\\r\\ncontract StakeOpsController is AccessControl {\\r\\n\\r\\n    bytes32 public constant STAKE_OPS_ADMIN_ROLE = keccak256(\\\"STAKE_OPS_ADMIN_ROLE\\\");\\r\\n    bytes32 public constant BALANCE_UPDATER_ROLE = keccak256(\\\"BALANCE_UPDATER_ROLE\\\");\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n\\r\\n    /// @dev Construction of this contract requires the .\\r\\n    /// @param _stakeOpsAdmin Admin account. Has all 3 permissions.\\r\\n    /// @param _balanceUpdater Updater account. Can only execute stats update functionality\\r\\n    /// @param _pauser Pauser account. Can only pause / unpause the contract.\\r\\n    constructor(\\r\\n        address _stakeOpsAdmin,\\r\\n        address _balanceUpdater,\\r\\n        address _pauser) {\\r\\n\\r\\n        require(_stakeOpsAdmin != _balanceUpdater, \\\"StakeOpsController: Accounts must be different\\\");\\r\\n        require(_balanceUpdater != _pauser, \\\"StakeOpsController: Accounts must be different\\\");\\r\\n\\r\\n        _setRoleAdmin(STAKE_OPS_ADMIN_ROLE, STAKE_OPS_ADMIN_ROLE);\\r\\n        _setRoleAdmin(BALANCE_UPDATER_ROLE, STAKE_OPS_ADMIN_ROLE);\\r\\n        _setRoleAdmin(PAUSER_ROLE, STAKE_OPS_ADMIN_ROLE);\\r\\n\\r\\n        _setupRole(STAKE_OPS_ADMIN_ROLE, _stakeOpsAdmin);\\r\\n        _setupRole(BALANCE_UPDATER_ROLE, _stakeOpsAdmin);\\r\\n        _setupRole(PAUSER_ROLE, _stakeOpsAdmin);\\r\\n\\r\\n        _setupRole(BALANCE_UPDATER_ROLE, _balanceUpdater);\\r\\n        _setupRole(PAUSER_ROLE, _pauser);\\r\\n    }\\r\\n\\r\\n    /// @dev Modifier to make a function callable only by a certain role. In\\r\\n    /// addition to checking the sender\\u0027s role, `address(0)` \\u0027s role is also\\r\\n    /// considered. Granting a role to `address(0)` is equivalent to enabling\\r\\n    /// this role for everyone.\\r\\n    modifier onlyRole(bytes32 role) override {\\r\\n        require(hasRole(role, _msgSender()) || hasRole(role, address(0)), \\\"StakeOpsController: sender requires permission\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"},\"StakeStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/// GENERAL STAKING DATA\\r\\n///     \u2514\u2500 StakingOpsInfo\\r\\n/// STAKER\\r\\n///     \u2514\u2500 StakeInfo\\r\\n\\r\\ncontract StakeStructs {\\r\\n\\r\\n    enum StakeStatus { NeverStaked, Deposited, Unstaked, Withdrawn }\\r\\n\\r\\n    /// General Staking Info \\u0026 Parameters\\r\\n    struct StakingOpsInfo {\\r\\n        uint256 stakeCount;             // Total number of stakers, activated and not activated\\r\\n        uint256 totalStaked;            // The total amount of POWR tokens staked regardless of the status\\r\\n        uint256 minPowrDeposit;         // The min amount of POWR tokens required for staking\\r\\n        uint256 maxPowrPerValidator;     // The max amount of POWR to be delegated to each validator\\r\\n        uint256 powrRatio;              // From 0 to 100000, respresenting a mulplier of 0.00% - 1000.00%\\r\\n        address powrEthPool;            // address of the uniswap v2 POWR-ETH pool\\r\\n        uint256 unlockGasCost;         // gas price of unlock transaction\\r\\n        address rewardWallet;          // wallet POWR rewards are paid from\\r\\n    }\\r\\n\\r\\n    /// Stake information. Per Staker.\\r\\n    struct StakeInfo {\\r\\n        uint256 stake;                              // The amount of POWR tokens staked\\r\\n        uint256 stakeRewards;                       // Amount of POWR tokens rewards\\r\\n        string registeredStaker;                   // Address of the wallet used for staking\\r\\n        string registeredStakerValidatorPubKey;    // The public key of the PLChain Node to delegate to\\r\\n        StakeStatus stakeStatus;                     // Enum storing status of stake Stake\\r\\n        uint256 ethFee;                                   // eth fee charged to subsidize unlock stake tx\\r\\n        uint256 unstakeTimestamp;                    //timestamp for storing when the user requested an unstake\\r\\n    }\\r\\n}\\r\\n\"},\"StakingContractV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { IUniswapV2Pair } from \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\r\\nimport { IStakingContractV1 } from \\\"./IStakingContractV1.sol\\\";\\r\\nimport { Pausable } from \\\"./Pausable.sol\\\";\\r\\nimport { StakeStructs } from \\\"./StakeStructs.sol\\\";\\r\\nimport { StakeOpsController } from \\\"./StakeOpsController.sol\\\";\\r\\nimport { Context } from \\\"./Context.sol\\\";\\r\\n\\r\\ncontract StakingContractV1 is StakeStructs, IStakingContractV1, StakeOpsController, Pausable {\\r\\n\\r\\n    IERC20 public immutable powrToken;\\r\\n\\r\\n    // Same decimal precision as the POWR ERC20 Token\\r\\n    uint256 public constant unit = 1000000;\\r\\n\\r\\n    StakeStructs.StakingOpsInfo public stkOpsData;\\r\\n\\r\\n    mapping(address =\\u003e StakeStructs.StakeInfo) public stkData;\\r\\n\\r\\n    mapping(string =\\u003e uint256) public validatorTotalStake;\\r\\n\\r\\n    mapping (string =\\u003e  address) public stakeAddressToEthAddress;\\r\\n\\r\\n    /// @dev Verifies the following conditions:\\r\\n    /// 1) The amount being deposited must be \\u003e 0\\r\\n    /// 2) The amount being deposited must be \\u003e minimum POWR tokens deposit limit\\r\\n    /// 3) The amount being deposited will not cause the chosen validator to exceed the maximum allowed stake\\r\\n    /// 4) The address has not been used for staking before\\r\\n    modifier checkDepositConditions(\\r\\n        address _addr,\\r\\n        uint256 _amount,\\r\\n        string memory _stakerPubKey,\\r\\n        string memory _validatorPubKey) {\\r\\n        require(_amount \\u003e 0, \\\"StakingContractV1:checkDepositConditions: Amount must be \\u003e 0\\\");\\r\\n        require(_amount \\u003e= stkOpsData.minPowrDeposit, \\\"StakingContractV1:checkDepositConditions: Amount must be at least the min deposit requirement\\\");\\r\\n        require(validatorTotalStake[_validatorPubKey] + _amount \\u003c= stkOpsData.maxPowrPerValidator, \\\"StakingContractV1:checkDepositConditions: Total stake cannot exceed max stake per validator\\\");\\r\\n        require(stkData[_addr].stakeStatus == StakeStatus.NeverStaked, \\\"StakingContractV1:checkDepositConditions: Address can only stake once\\\");\\r\\n        require(stakeAddressToEthAddress[_stakerPubKey] == address(0), \\\"StakingContractV1:checkDepositConditions: Solana wallet can only stake once\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Verifies the following conditions:\\r\\n    /// 1) Stake has not already been withdrawn\\r\\n    /// 2) stakeStatus is equal to Unstaked\\r\\n    /// 3) Stake + rewards \\u003e 0\\r\\n    /// 4) Require 7 days have passed since undelegating/unlocking stake\\r\\n    modifier checkWithdrawalConditions(address _addr) {\\r\\n        require(stkData[_addr].stakeStatus != StakeStatus.Withdrawn, \\\"StakingContractV1:checkWithdrawalConditions: Stake already withdrawn\\\");\\r\\n        require(stkData[_addr].stakeStatus == StakeStatus.Unstaked, \\\"StakingContractV1:checkWithdrawalConditions: Stake has not been unstaked or cannot be found\\\");\\r\\n        require(stkData[_addr].stake + stkData[_addr].stakeRewards \\u003e 0, \\\"StakingContractV1:checkWithdrawalConditions: No stake to withdraw\\\");\\r\\n        require(block.timestamp \\u003e= (stkData[_addr].unstakeTimestamp + (7*24*60*60)), \\\"StakingContractV1:checkWithdrawalConditions: 7 days need to pass before you can withdraw\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Setting initial parameters.\\r\\n    /// @param _powrToken The address of the POWR ERC20 token. Mainnet address: 0x595832F8FC6BF59c85C527fEC3740A1b7a361269\\r\\n    /// @param _minPowrDeposit The minimum amount of POWR tokens that are going to be required in order to become a Staker.\\r\\n    /// @param _maxPowrPerValidator The maxinum POWR that can be delegated to each validator\\r\\n    /// @param _stakeOpsAdmin The account that is going to be granted the STAKE_OPS_ADMIN_ROLE.\\r\\n    /// @param _balanceUpdater The account that is going to be granted the BALANCE_UPDATER_ROLE.\\r\\n    /// @param _pauser The account that is going to be granted the PAUSER_ROLE.\\r\\n    /// @param _powrEthPoolAddress The POWR-ETH uniswap v2 pool\\r\\n    /// @param _rewardWallet The wallet the POWR rewards will be paid from\\r\\n    constructor(\\r\\n        address _powrToken,\\r\\n        uint256 _minPowrDeposit,\\r\\n        uint256 _maxPowrPerValidator,\\r\\n        address _stakeOpsAdmin,\\r\\n        address _balanceUpdater,\\r\\n        address _pauser,\\r\\n        address _powrEthPoolAddress,\\r\\n        uint256 _unlockGasCost,\\r\\n        address _rewardWallet)\\r\\n            StakeOpsController(\\r\\n                _stakeOpsAdmin,\\r\\n                _balanceUpdater,\\r\\n                _pauser){\\r\\n\\r\\n        require(_powrToken != address(0), \\\"StakingContractV1: _powrToken address is incorrect\\\");\\r\\n\\r\\n        powrToken = IERC20(_powrToken);\\r\\n        stkOpsData.minPowrDeposit = _minPowrDeposit * unit;\\r\\n        stkOpsData.maxPowrPerValidator = _maxPowrPerValidator * unit;\\r\\n        stkOpsData.powrRatio = 10000; //initial ratio set to 100.00%\\r\\n        stkOpsData.powrEthPool = _powrEthPoolAddress;\\r\\n        stkOpsData.unlockGasCost = _unlockGasCost;\\r\\n        stkOpsData.rewardWallet = _rewardWallet;\\r\\n    }\\r\\n\\r\\n    /// @dev The First step into staking, wanna-be staker must sent POWR tokens to this contract using this deposit function.\\r\\n    /// @param _amount The amount of POWR tokens to stake. If the amount to stake is 1 POWR token then the value of this parameter should be 1x10^6\\r\\n    /// @param _stakerPubKey The solana public key of the user\\r\\n    /// @param _validatorPubKey The public key from the PLChain Node\\r\\n    function deposit(\\r\\n        uint256 _amount, \\r\\n        string memory _stakerPubKey,\\r\\n        string memory _validatorPubKey)\\r\\n            external\\r\\n            whenNotPaused\\r\\n            checkDepositConditions(_msgSender(), _amount, _stakerPubKey, _validatorPubKey)\\r\\n            {\\r\\n                address stakerEthAddress = _msgSender();\\r\\n                /// require amount of tokens in account ready to deposit\\r\\n                require(powrToken.transferFrom(stakerEthAddress, address(this), _amount), \\\"StakingContractV1:deposit: Can\\u0027t transfer the POWR tokens\\\");\\r\\n\\r\\n                // First deposit\\r\\n                stkData[stakerEthAddress] = StakeStructs.StakeInfo({\\r\\n                    stake: _amount,\\r\\n                    stakeRewards: 0,\\r\\n                    registeredStaker: _stakerPubKey,\\r\\n                    registeredStakerValidatorPubKey: _validatorPubKey,\\r\\n                    stakeStatus: StakeStatus.Deposited,\\r\\n                    ethFee: 0,\\r\\n                    unstakeTimestamp: 0\\r\\n                });\\r\\n                stakeAddressToEthAddress[_stakerPubKey] = stakerEthAddress;\\r\\n                validatorTotalStake[_validatorPubKey] = validatorTotalStake[_validatorPubKey] + _amount;\\r\\n                stkOpsData.stakeCount = stkOpsData.stakeCount + 1;\\r\\n                stkOpsData.totalStaked = stkOpsData.totalStaked + _amount;\\r\\n                emit StakeDeposited(stakerEthAddress, _amount, _stakerPubKey, _validatorPubKey);\\r\\n    }\\r\\n\\r\\n    /// @dev This function is called after the user has requested an unstake. This is called by the BALANCE_UPDATER_ROLE and updates the reward amounts\\r\\n    /// @dev This function sets the rewards + stake to be withdrawn by the user using the withdraw() function\\r\\n    /// @param _stakerPubKey The solana pubkey of the staker that has unstaked their POWR and it has finished unstaking on the plchain\\r\\n    /// @param _rewardAmount The amount of rewards accrued (in base units i.e. 1 POWR = 10^6)\\r\\n    function unlockStake(\\r\\n        string memory _stakerPubKey, \\r\\n        uint256 _rewardAmount)\\r\\n            external\\r\\n            whenNotPaused\\r\\n            onlyRole(BALANCE_UPDATER_ROLE)\\r\\n            {\\r\\n                // get eth address from sol address\\r\\n                address stakerEthAddress = stakeAddressToEthAddress[_stakerPubKey];\\r\\n                require(stkData[stakerEthAddress].stakeStatus == StakeStatus.Deposited, \\\"StakingContractV1:unlockStake Stake must be in \\u0027deposited\\u0027 state\\\");\\r\\n                //set status to unstaked, set reward amount\\r\\n                stkData[stakerEthAddress].stakeStatus = StakeStatus.Unstaked;\\r\\n                stkData[stakerEthAddress].stakeRewards = _rewardAmount;\\r\\n                stkData[stakerEthAddress].ethFee = stkOpsData.unlockGasCost*tx.gasprice;\\r\\n                stkData[stakerEthAddress].unstakeTimestamp = block.timestamp;\\r\\n\\r\\n\\r\\n                //update contract stats\\r\\n                stkOpsData.stakeCount = stkOpsData.stakeCount - 1;\\r\\n                stkOpsData.totalStaked = stkOpsData.totalStaked - stkData[stakerEthAddress].stake;\\r\\n                validatorTotalStake[stkData[stakerEthAddress].registeredStakerValidatorPubKey] = validatorTotalStake[stkData[stakerEthAddress].registeredStakerValidatorPubKey] - stkData[stakerEthAddress].stake;\\r\\n\\r\\n                //emit event\\r\\n                emit UnlockStake(stakerEthAddress, stkData[stakerEthAddress].stake, stkData[stakerEthAddress].registeredStaker);\\r\\n    }\\r\\n\\r\\n    /// @dev This function can be called after the unlockStake transaction has been sent by the bridge\\r\\n    /// @dev This function ensures that the fee collection is not greater than withdrawal amount\\r\\n    /// @dev if the fee is greater than reward amount, we transfer no rewards from the admin account \\r\\n    /// @dev If the fee is greater than rewards we subtract the remaining fee from the principal stake and transfer it back from the contract\\r\\n    /// @dev If the rewards are enough to cover the fee, this function tranfers the stake from the contract and the rewards from the admin account\\r\\n    function withdraw()\\r\\n        external\\r\\n        whenNotPaused\\r\\n        checkWithdrawalConditions(_msgSender()){\\r\\n            address stakerEthAddress = _msgSender();\\r\\n            uint256 stakeAmount = stkData[stakerEthAddress].stake;\\r\\n            uint256 rewardAmount = stkData[stakerEthAddress].stakeRewards * stkOpsData.powrRatio / 10000;\\r\\n            uint256 powrFee = uint(convertEthToPOWR(stkData[stakerEthAddress].ethFee));\\r\\n            // sets stake and reward to 0 and updates status\\r\\n            stkData[stakerEthAddress].stake = 0;\\r\\n            stkData[stakerEthAddress].stakeRewards = 0;\\r\\n            stkData[stakerEthAddress].stakeStatus = StakeStatus.Withdrawn;\\r\\n\\r\\n            // Checks if the fee will cover the rewarded amount, if not, the rewards are zeroed out and the remaining fee subtracted from principal\\r\\n            // If the fee does cover the reward amount, transfer full stake from staking contract, and rewards are transferred from admin account\\r\\n            if(powrFee \\u003e= rewardAmount) {\\r\\n                uint256 remainingFee = powrFee - rewardAmount;\\r\\n                require(stakeAmount \\u003e= remainingFee, \\\"StakingContractV1:withdraw Not enough POWR in stake to cover withdrawal fee\\\");\\r\\n                uint256 remainingStake = stakeAmount - remainingFee;\\r\\n                require(powrToken.transfer(stakerEthAddress, remainingStake), \\\"StakingContractV1:withdraw Can\\u0027t transfer remaining POWR tokens staking contract\\\");\\r\\n                require(powrToken.transfer(stkOpsData.rewardWallet, stakeAmount - remainingStake), \\\"StakingContractV1:withdraw Can\\u0027t transfer POWR fee from staking contract\\\");\\r\\n\\r\\n            } else {\\r\\n                require(powrToken.transfer(stakerEthAddress, stakeAmount), \\\"StakingContractV1:withdraw Can\\u0027t transfer POWR tokens from staking contract\\\");\\r\\n                require(powrToken.transferFrom(stkOpsData.rewardWallet, stakerEthAddress, rewardAmount - powrFee), \\\"StakingContractV1:withdraw Can\\u0027t transfer POWR tokens from admin account\\\");\\r\\n            }\\r\\n\\r\\n           // emit event\\r\\n            emit StakeWithdrawn(stakerEthAddress, stakeAmount, rewardAmount);\\r\\n    }\\r\\n\\r\\n    /// @dev This function is called in an emergency to force a user to unstake their POWR. This is called by the STAKE_OPS_ADMIN_ROLE and updates the reward amounts\\r\\n    /// @dev This function sets the rewards + stake minus the fee to be withdrawn by the user using the withdraw() function\\r\\n    /// @param _stakerPubKey The sol address of the staker that has unstaked their POWR and it has finished unstaking on the plchain\\r\\n    /// @param _rewardAmount The amount of rewards accrued (in base units i.e. 1 POWR = 10^6)\\r\\n    function forceUnlockStake(\\r\\n        string memory _stakerPubKey, \\r\\n        uint256 _rewardAmount)\\r\\n            external\\r\\n            onlyRole(STAKE_OPS_ADMIN_ROLE) \\r\\n            {\\r\\n                // get eth address from sol address\\r\\n                address stakerEthAddress = stakeAddressToEthAddress[_stakerPubKey];\\r\\n                require(stkData[stakerEthAddress].stakeStatus == StakeStatus.Deposited || stkData[stakerEthAddress].stakeStatus == StakeStatus.Unstaked, \\\"StakingContractV1:forceUnlockStake: Stake must be in \\u0027deposited\\u0027 or \\u0027unstaked\\u0027 state\\\");\\r\\n                //set status to unstaked, set reward amount\\r\\n                stkData[stakerEthAddress].stakeStatus = StakeStatus.Unstaked;\\r\\n                stkData[stakerEthAddress].stakeRewards = _rewardAmount;\\r\\n                stkData[stakerEthAddress].ethFee = stkOpsData.unlockGasCost*tx.gasprice;\\r\\n                stkData[stakerEthAddress].unstakeTimestamp = block.timestamp;\\r\\n\\r\\n                //update internal contract status\\r\\n                stkOpsData.stakeCount = stkOpsData.stakeCount - 1;\\r\\n                stkOpsData.totalStaked = stkOpsData.totalStaked - stkData[stakerEthAddress].stake;\\r\\n                validatorTotalStake[stkData[stakerEthAddress].registeredStakerValidatorPubKey] = validatorTotalStake[stkData[stakerEthAddress].registeredStakerValidatorPubKey] - stkData[stakerEthAddress].stake;\\r\\n\\r\\n                //emit event\\r\\n                emit ForceUnlockStake(stakerEthAddress, stkData[stakerEthAddress].stake, stkData[stakerEthAddress].registeredStaker);\\r\\n    }\\r\\n\\r\\n    /// @dev Getter function to return the status of a stake\\r\\n    /// @param _stakerEthAddress The eth address of the staker \\r\\n    /// @return currentStatus The current status of the staker\\r\\n    function getStatus(address _stakerEthAddress)\\r\\n        external\\r\\n        view\\r\\n        returns(uint currentStatus)\\r\\n        {\\r\\n            currentStatus = uint(stkData[_stakerEthAddress].stakeStatus);\\r\\n            return(currentStatus);\\r\\n        }\\r\\n\\r\\n\\r\\n    /// @dev This function takes an amount of eth and using the current uniswap pool rate, returns a powr amount\\r\\n    /// @param _ethAmount The amount of ether (in wei) to convert to powr\\r\\n    /// @return powrAmount the amount of powr in base units (6 decimals)\\r\\n    function convertEthToPOWR(uint256 _ethAmount) \\r\\n        public \\r\\n        view \\r\\n        returns(uint256 powrAmount)\\r\\n        {\\r\\n            IUniswapV2Pair pair = IUniswapV2Pair(stkOpsData.powrEthPool);\\r\\n            (uint112 powrReserves, uint112 ethReserves,) = pair.getReserves();\\r\\n            powrAmount = (_ethAmount*powrReserves)/(ethReserves); // return amount of POWR needed to buy _ethAmount in base unit (i.e. 1 POWR = 10^6)\\r\\n            return(powrAmount);\\r\\n        }\\r\\n\\r\\n    /// @dev This function takes an integer between 0 and 100000 and updates the powrRatio for reward distribution.\\r\\n    /// @dev This function can only be called by STAKE_OPS_ADMIN_ROLE\\r\\n    /// @param _newRatio an integer between 0 and 100000 that represents between 0 and 1000.00% of powr conversion ratio\\r\\n    function setRatio(\\r\\n        uint256 _newRatio)\\r\\n        external\\r\\n        onlyRole(STAKE_OPS_ADMIN_ROLE)\\r\\n            {\\r\\n                require(_newRatio \\u003c= 100000, \\\"New Ratio must be \\u003c= 100000\\\");\\r\\n                stkOpsData.powrRatio = _newRatio;\\r\\n            }\\r\\n\\r\\n    /// @dev This function returns the current vavlue of stkOpsData.powrRatio\\r\\n    /// @return currentRatio an integer between 0 and 100000 that represents between 0 and 100.00% of powr conversion ratio\\r\\n    function getRatio()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 currentRatio)\\r\\n            {\\r\\n                currentRatio = stkOpsData.powrRatio;\\r\\n                return(currentRatio);\\r\\n            }\\r\\n\\r\\n    /// @dev This function allows the admin role to change the minimum deposit required to stake from the initial amount set\\r\\n    /// @param _newAmount new minimum amount of POWR to deposit. in POWR units (i.e. enter 5000 POWR for 5000000000 base units)\\r\\n    function changeMinDeposit(uint256 _newAmount)\\r\\n        external\\r\\n        onlyRole(STAKE_OPS_ADMIN_ROLE){\\r\\n            stkOpsData.minPowrDeposit = _newAmount * unit;\\r\\n        }\\r\\n\\r\\n    /// @dev This function allows the admin role to change the gas cost of an unlock transaction from 130000\\r\\n    /// @param _newGasCost new gas cost of the unlock transactions\\r\\n    function changeUnlockGasCost(uint256 _newGasCost)\\r\\n        external\\r\\n        onlyRole(STAKE_OPS_ADMIN_ROLE){\\r\\n            stkOpsData.unlockGasCost = _newGasCost;\\r\\n        }\\r\\n\\r\\n    /// @dev This function allows the admin role to change the reward wallet\\r\\n    /// @param _newRewardWallet address of new reward wallet\\r\\n    function changeRewardWallet(address _newRewardWallet)\\r\\n        external\\r\\n        onlyRole(STAKE_OPS_ADMIN_ROLE){\\r\\n            stkOpsData.rewardWallet = _newRewardWallet;\\r\\n        }\\r\\n\\r\\n    /// @dev Pauses the contract. Can only be called by user with PAUSER_ROLE\\r\\n    function pause()\\r\\n        external\\r\\n        onlyRole(PAUSER_ROLE) {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @dev If the contract is Paused, it unpauses it, only called by user with PAUSER_ROLE\\r\\n    function unPause()\\r\\n        external\\r\\n        onlyRole(PAUSER_ROLE) {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp \\u003e\\u003e= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\r\\n            value \\u003e\\u003e= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_powrToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPowrDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPowrPerValidator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakeOpsAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balanceUpdater\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_powrEthPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlockGasCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"validatorPubKey\",\"type\":\"string\"}],\"name\":\"ForceUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"stakerPubKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"validatorPubKey\",\"type\":\"string\"}],\"name\":\"StakeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"validatorPubKey\",\"type\":\"string\"}],\"name\":\"UnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALANCE_UPDATER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_OPS_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardWallet\",\"type\":\"address\"}],\"name\":\"changeRewardWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGasCost\",\"type\":\"uint256\"}],\"name\":\"changeUnlockGasCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"convertEthToPOWR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"powrAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_stakerPubKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_validatorPubKey\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_stakerPubKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"forceUnlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerEthAddress\",\"type\":\"address\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentStatus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powrToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRatio\",\"type\":\"uint256\"}],\"name\":\"setRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"stakeAddressToEthAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stkData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRewards\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"registeredStaker\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"registeredStakerValidatorPubKey\",\"type\":\"string\"},{\"internalType\":\"enum StakeStructs.StakeStatus\",\"name\":\"stakeStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"ethFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkOpsData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPowrDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPowrPerValidator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"powrRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"powrEthPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockGasCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_stakerPubKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"validatorTotalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingContractV1", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000595832f8fc6bf59c85c527fec3740a1b7a361269000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000004c4b40000000000000000000000000292e662c822585778031ad6ac9f1d15bd45dcdc0000000000000000000000000cc4368a368144e405417e633aac88ad0cbae7bb70000000000000000000000009ba9b8db5b61029a0d6717c3d21e052e323ac1a60000000000000000000000003c442bab170f19dd40d0b1a405c9d93b088b9332000000000000000000000000000000000000000000000000000000000001fbd00000000000000000000000007ae39790f6dc6ddb27e2cab06ccd7b0bad6fe4a0", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://03e1aa8b46affd464c2c923f9eb444ca925ad8c61545177d88c9c5175c37d8c6"}]}