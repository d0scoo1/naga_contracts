{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/redeemableERC20/RedeemableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ERC20Config} from \\\"../erc20/ERC20Config.sol\\\";\\nimport \\\"../erc20/ERC20Redeem.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ITier} from \\\"../tier/ITier.sol\\\";\\nimport {TierReport} from \\\"../tier/libraries/TierReport.sol\\\";\\n\\nimport {Phased} from \\\"../phased/Phased.sol\\\";\\n\\nimport {ERC20Pull, ERC20PullConfig} from \\\"../erc20/ERC20Pull.sol\\\";\\n\\n/// Everything required by the `RedeemableERC20` constructor.\\n/// @param reserve Reserve token that the associated `Trust` or equivalent\\n/// raise contract will be forwarding to the `RedeemableERC20` contract.\\n/// @param erc20Config ERC20 config forwarded to the ERC20 constructor.\\n/// @param tier Tier contract to compare statuses against on transfer.\\n/// @param minimumTier Minimum tier required for transfers in `Phase.ZERO`.\\n/// Can be `0`.\\n/// @param distributionEndForwardingAddress Optional address to send rTKN to at\\n/// the end of the distribution phase. If `0` address then all undistributed\\n/// rTKN will burn itself at the end of the distribution.\\nstruct RedeemableERC20Config {\\n    address reserve;\\n    ERC20Config erc20Config;\\n    address tier;\\n    uint256 minimumTier;\\n    address distributionEndForwardingAddress;\\n}\\n\\n/// @title RedeemableERC20\\n/// @notice This is the ERC20 token that is minted and distributed.\\n///\\n/// During `Phase.ZERO` the token can be traded and so compatible with the\\n/// Balancer pool mechanics.\\n///\\n/// During `Phase.ONE` the token is frozen and no longer able to be traded on\\n/// any AMM or transferred directly.\\n///\\n/// The token can be redeemed during `Phase.ONE` which burns the token in\\n/// exchange for pro-rata erc20 tokens held by the `RedeemableERC20` contract\\n/// itself.\\n///\\n/// The token balances can be used indirectly for other claims, promotions and\\n/// events as a proof of participation in the original distribution by token\\n/// holders.\\n///\\n/// The token can optionally be restricted by the `ITier` contract to only\\n/// allow receipients with a specified membership status.\\n///\\n/// @dev `RedeemableERC20` is an ERC20 with 2 phases.\\n///\\n/// `Phase.ZERO` is the distribution phase where the token can be freely\\n/// transfered but not redeemed.\\n/// `Phase.ONE` is the redemption phase where the token can be redeemed but no\\n/// longer transferred.\\n///\\n/// Redeeming some amount of `RedeemableERC20` burns the token in exchange for\\n/// some other tokens held by the contract. For example, if the\\n/// `RedeemableERC20` token contract holds 100 000 USDC then a holder of the\\n/// redeemable token can burn some of their tokens to receive a % of that USDC.\\n/// If they redeemed (burned) an amount equal to 10% of the redeemable token\\n/// supply then they would receive 10 000 USDC.\\n///\\n/// To make the treasury assets discoverable anyone can call `newTreasuryAsset`\\n/// to emit an event containing the treasury asset address. As malicious and/or\\n/// spam users can emit many treasury events there is a need for sensible\\n/// indexing and filtering of asset events to only trusted users. This contract\\n/// is agnostic to how that trust relationship is defined for each user.\\n///\\n/// Users must specify all the treasury assets they wish to redeem to the\\n/// `redeem` function. After `redeem` is called the redeemed tokens are burned\\n/// so all treasury assets must be specified and claimed in a batch atomically.\\n/// Note: The same amount of `RedeemableERC20` is burned, regardless of which\\n/// treasury assets were specified. Specifying fewer assets will NOT increase\\n/// the proportion of each that is returned.\\n///\\n/// `RedeemableERC20` has several owner administrative functions:\\n/// - Owner can add senders and receivers that can send/receive tokens even\\n///   during `Phase.ONE`\\n/// - Owner can end `Phase.ONE` during `Phase.ZERO` by specifying the address\\n///   of a distributor, which will have any undistributed tokens burned.\\n/// The owner should be a `Trust` not an EOA.\\n///\\n/// The redeem functions MUST be used to redeem and burn RedeemableERC20s\\n/// (NOT regular transfers).\\n///\\n/// `redeem` will simply revert if called outside `Phase.ONE`.\\n/// A `Redeem` event is emitted on every redemption (per treasury asset) as\\n/// `(redeemer, asset, redeemAmount)`.\\ncontract RedeemableERC20 is Initializable, Phased, ERC20Redeem, ERC20Pull {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev Phase constants.\\n    /// Contract is not yet initialized.\\n    uint256 private constant PHASE_UNINITIALIZED = 0;\\n    /// @dev Token is in the distribution phase and can be transferred freely\\n    /// subject to tier requirements.\\n    uint256 private constant PHASE_DISTRIBUTING = 1;\\n    /// @dev Token is frozen and cannot be transferred unless the\\n    /// sender/receiver is authorized as a sender/receiver.\\n    uint256 private constant PHASE_FROZEN = 2;\\n\\n    /// @dev Bits for a receiver.\\n    uint256 private constant RECEIVER = 0x1;\\n    /// @dev Bits for a sender.\\n    uint256 private constant SENDER = 0x2;\\n\\n    /// @dev To be clear, this admin is NOT intended to be an EOA.\\n    /// This contract is designed assuming the admin is a `Sale` or equivalent\\n    /// contract that itself does NOT have an admin key.\\n    address private admin;\\n    /// @dev Tracks addresses that can always send/receive regardless of phase.\\n    /// sender/receiver => access bits\\n    mapping(address => uint256) private access;\\n\\n    /// Results of initializing.\\n    /// @param sender `msg.sender` of initialize.\\n    /// @param config Initialization config.\\n    event Initialize(address sender, RedeemableERC20Config config);\\n\\n    /// A new token sender has been added.\\n    /// @param sender `msg.sender` that approved the token sender.\\n    /// @param grantedSender address that is now a token sender.\\n    event Sender(address sender, address grantedSender);\\n\\n    /// A new token receiver has been added.\\n    /// @param sender `msg.sender` that approved the token receiver.\\n    /// @param grantedReceiver address that is now a token receiver.\\n    event Receiver(address sender, address grantedReceiver);\\n\\n    /// RedeemableERC20 uses the standard/default 18 ERC20 decimals.\\n    /// The minimum supply enforced by the constructor is \\\"one\\\" token which is\\n    /// `10 ** 18`.\\n    /// The minimum supply does not prevent subsequent redemption/burning.\\n    uint256 private constant MINIMUM_INITIAL_SUPPLY = 10**18;\\n\\n    /// Tier contract that produces the report that `minimumTier` is checked\\n    /// against.\\n    /// Public so external contracts can interface with the required tier.\\n    ITier public tier;\\n\\n    /// The minimum status that a user must hold to receive transfers during\\n    /// `Phase.ZERO`.\\n    /// The tier contract passed to `TierByConstruction` determines if\\n    /// the status is held during `_beforeTokenTransfer`.\\n    /// Public so external contracts can interface with the required tier.\\n    uint256 public minimumTier;\\n\\n    /// Optional address to send rTKN to at the end of the distribution phase.\\n    /// If `0` address then all undistributed rTKN will burn itself at the end\\n    /// of the distribution.\\n    address private distributionEndForwardingAddress;\\n\\n    /// Mint the full ERC20 token supply and configure basic transfer\\n    /// restrictions. Initializes all base contracts.\\n    /// @param config_ Initialized configuration.\\n    function initialize(RedeemableERC20Config calldata config_)\\n        external\\n        initializer\\n    {\\n        initializePhased();\\n\\n        tier = ITier(config_.tier);\\n        __ERC20_init(config_.erc20Config.name, config_.erc20Config.symbol);\\n        initializeERC20Pull(\\n            ERC20PullConfig(config_.erc20Config.distributor, config_.reserve)\\n        );\\n\\n        require(\\n            config_.erc20Config.initialSupply >= MINIMUM_INITIAL_SUPPLY,\\n            \\\"MINIMUM_INITIAL_SUPPLY\\\"\\n        );\\n        minimumTier = config_.minimumTier;\\n        distributionEndForwardingAddress = config_\\n            .distributionEndForwardingAddress;\\n\\n        // Minting and burning must never fail.\\n        access[address(0)] = RECEIVER | SENDER;\\n\\n        // Admin receives full supply.\\n        access[config_.erc20Config.distributor] = RECEIVER;\\n\\n        // Forwarding address must be able to receive tokens.\\n        if (distributionEndForwardingAddress != address(0)) {\\n            access[distributionEndForwardingAddress] = RECEIVER;\\n        }\\n\\n        admin = config_.erc20Config.distributor;\\n\\n        // Need to mint after assigning access.\\n        _mint(\\n            config_.erc20Config.distributor,\\n            config_.erc20Config.initialSupply\\n        );\\n\\n        // The reserve must always be one of the treasury assets.\\n        newTreasuryAsset(config_.reserve);\\n\\n        emit Initialize(msg.sender, config_);\\n\\n        // Smoke test on whatever is on the other side of `config_.tier`.\\n        // It is a common mistake to pass in a contract without the `ITier`\\n        // interface and brick transfers. We want to discover that ASAP.\\n        // E.g. `Verify` instead of `VerifyTier`.\\n        // Slither does not like this unused return, but we're not looking for\\n        // any specific return value, just trying to avoid something that\\n        // blatantly errors out.\\n        // slither-disable-next-line unused-return\\n        ITier(config_.tier).report(msg.sender);\\n\\n        schedulePhase(PHASE_DISTRIBUTING, block.number);\\n    }\\n\\n    /// Require a function is only admin callable.\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"ONLY_ADMIN\\\");\\n        _;\\n    }\\n\\n    /// Check that an address is a receiver.\\n    /// A sender is also a receiver.\\n    /// @param maybeReceiver_ account to check.\\n    /// @return True if account is a receiver.\\n    function isReceiver(address maybeReceiver_) public view returns (bool) {\\n        return access[maybeReceiver_] & RECEIVER > 0;\\n    }\\n\\n    /// Admin can grant an address receiver rights.\\n    /// @param newReceiver_ The account to grand receiver.\\n    function grantReceiver(address newReceiver_) external onlyAdmin {\\n        // Using `|` preserves sender if previously granted.\\n        access[newReceiver_] |= RECEIVER;\\n        emit Receiver(msg.sender, newReceiver_);\\n    }\\n\\n    /// Check that an address is a sender.\\n    /// @param maybeSender_ account to check.\\n    /// @return True if account is a sender.\\n    function isSender(address maybeSender_) public view returns (bool) {\\n        return access[maybeSender_] & SENDER > 0;\\n    }\\n\\n    /// Admin can grant an addres sender rights.\\n    /// @param newSender_ The account to grant sender.\\n    function grantSender(address newSender_) external onlyAdmin {\\n        // Uinsg `|` preserves receiver if previously granted.\\n        access[newSender_] |= SENDER;\\n        emit Sender(msg.sender, newSender_);\\n    }\\n\\n    /// The admin can forward or burn all tokens of a single address to end\\n    /// `PHASE_DISTRIBUTING`.\\n    /// The intent is that during `PHASE_DISTRIBUTING` there is some contract\\n    /// responsible for distributing the tokens.\\n    /// The admin specifies the distributor to end `PHASE_DISTRIBUTING` and the\\n    /// forwarding address set during initialization is used. If the forwarding\\n    /// address is `0` the rTKN will be burned, otherwise the entire balance of\\n    /// the distributor is forwarded to the nominated address. In practical\\n    /// terms the forwarding allows for escrow depositors to receive a prorata\\n    /// claim on unsold rTKN if they forward it to themselves, otherwise raise\\n    /// participants will receive a greater share of the final escrowed tokens\\n    /// due to the burn reducing the total supply.\\n    /// The distributor is NOT set during the constructor because it may not\\n    /// exist at that point. For example, Balancer needs the paired erc20\\n    /// tokens to exist before the trading pool can be built.\\n    /// @param distributor_ The distributor according to the admin.\\n    /// BURN the tokens if `address(0)`.\\n    function endDistribution(address distributor_)\\n        external\\n        onlyPhase(PHASE_DISTRIBUTING)\\n        onlyAdmin\\n    {\\n        schedulePhase(PHASE_FROZEN, block.number);\\n        address forwardTo_ = distributionEndForwardingAddress;\\n        uint256 distributorBalance_ = balanceOf(distributor_);\\n        if (distributorBalance_ > 0) {\\n            if (forwardTo_ == address(0)) {\\n                _burn(distributor_, distributorBalance_);\\n            } else {\\n                _transfer(distributor_, forwardTo_, distributorBalance_);\\n            }\\n        }\\n    }\\n\\n    /// Wraps `_redeem` from `ERC20Redeem`.\\n    /// Very thin wrapper so be careful when calling!\\n    /// @param treasuryAssets_ The treasury assets to redeem for. If this is\\n    /// empty or incomplete then tokens will be permanently burned for no\\n    /// reason by the caller and the remaining funds will be effectively\\n    /// redistributed to everyone else.\\n    function redeem(IERC20[] calldata treasuryAssets_, uint256 redeemAmount_)\\n        external\\n        onlyPhase(PHASE_FROZEN)\\n    {\\n        _redeem(treasuryAssets_, redeemAmount_);\\n    }\\n\\n    /// Apply phase sensitive transfer restrictions.\\n    /// During `Phase.ZERO` only tier requirements apply.\\n    /// During `Phase.ONE` all transfers except burns are prevented.\\n    /// If a transfer involves either a sender or receiver with the SENDER\\n    /// or RECEIVER role, respectively, it will bypass these restrictions.\\n    /// @inheritdoc ERC20Upgradeable\\n    function _beforeTokenTransfer(\\n        address sender_,\\n        address receiver_,\\n        uint256 amount_\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(sender_, receiver_, amount_);\\n\\n        // Sending tokens to this contract (e.g. instead of redeeming) is\\n        // always an error.\\n        require(receiver_ != address(this), \\\"TOKEN_SEND_SELF\\\");\\n\\n        // Some contracts may attempt a preflight (e.g. Balancer) of a 0 amount\\n        // transfer.\\n        // We don't want to accidentally cause external errors due to zero\\n        // value transfers.\\n        if (\\n            amount_ > 0 &&\\n            // The sender and receiver lists bypass all access restrictions.\\n            !(isSender(sender_) || isReceiver(receiver_))\\n        ) {\\n            // During `PHASE_DISTRIBUTING` transfers are only restricted by the\\n            // tier of the recipient. Every other phase only allows senders and\\n            // receivers as above.\\n            require(currentPhase() == PHASE_DISTRIBUTING, \\\"FROZEN\\\");\\n\\n            // Receivers act as \\\"hubs\\\" that can send to \\\"spokes\\\".\\n            // i.e. any address of the minimum tier.\\n            // Spokes cannot send tokens another \\\"hop\\\" e.g. to each other.\\n            // Spokes can only send back to a receiver (doesn't need to be\\n            // the same receiver they received from).\\n            require(isReceiver(sender_), \\\"2SPOKE\\\");\\n            require(\\n                TierReport.tierAtBlockFromReport(\\n                    tier.report(receiver_),\\n                    block.number\\n                ) >= minimumTier,\\n                \\\"MIN_TIER\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc20/ERC20Config.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// Constructor config for standard Open Zeppelin ERC20.\\n/// @param name Name as defined by Open Zeppelin ERC20.\\n/// @param symbol Symbol as defined by Open Zeppelin ERC20.\\n/// @param distributor Distributor address of the initial supply.\\n/// MAY be zero.\\n/// @param initialSupply Initial supply to mint.\\n/// MAY be zero.\\nstruct ERC20Config {\\n    string name;\\n    string symbol;\\n    address distributor;\\n    uint256 initialSupply;\\n}\\n\"\r\n    },\r\n    \"contracts/erc20/ERC20Redeem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\n\\ncontract ERC20Redeem is ERC20BurnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /// Anon has burned their tokens in exchange for some treasury assets.\\n    /// Emitted once per redeemed asset.\\n    /// @param sender `msg.sender` is burning.\\n    /// @param treasuryAsset Treasury asset being sent to redeemer.\\n    /// @param redeemAmount Amount of token being burned.\\n    /// @param assetAmount Amount of treasury asset being sent.\\n    event Redeem(\\n        address sender,\\n        address treasuryAsset,\\n        uint256 redeemAmount,\\n        uint256 assetAmount\\n    );\\n\\n    /// Anon can notify the world that they are adding treasury assets to the\\n    /// contract. Indexers are strongly encouraged to ignore untrusted anons.\\n    /// @param sender `msg.sender` adding a treasury asset.\\n    /// @param asset The treasury asset being added.\\n    event TreasuryAsset(address sender, address asset);\\n\\n    /// Anon can emit a `TreasuryAsset` event to notify token holders that\\n    /// an asset could be redeemed by burning `RedeemableERC20` tokens.\\n    /// As this is callable by anon the events should be filtered by the\\n    /// indexer to those from trusted entities only.\\n    /// @param newTreasuryAsset_ The asset to log.\\n    function newTreasuryAsset(address newTreasuryAsset_) public {\\n        emit TreasuryAsset(msg.sender, newTreasuryAsset_);\\n    }\\n\\n    /// Burn tokens for a prorata share of the current treasury.\\n    ///\\n    /// The assets to be redeemed for must be specified as an array. This keeps\\n    /// the redeem functionality:\\n    /// - Gas efficient as we avoid tracking assets in storage\\n    /// - Decentralised as any user can deposit any asset to be redeemed\\n    /// - Error resistant as any individual asset reverting can be avoided by\\n    ///   redeeming againt sans the problematic asset.\\n    /// It is also a super sharp edge if someone burns their tokens prematurely\\n    /// or with an incorrect asset list. Implementing contracts are strongly\\n    /// encouraged to implement additional safety rails to prevent high value\\n    /// mistakes.\\n    /// Only \\\"vanilla\\\" erc20 token balances are supported as treasury assets.\\n    /// I.e. if the balance is changing such as due to a rebasing token or\\n    /// other mechanism then the WRONG token amounts will be redeemed. The\\n    /// redemption calculation is very simple and naive in that it takes the\\n    /// current balance of this contract of the assets being claimed via\\n    /// redemption to calculate the \\\"prorata\\\" entitlement. If the contract's\\n    /// balance of the claimed token is changing between redemptions (other\\n    /// than due to the redemption itself) then each redemption will send\\n    /// incorrect amounts.\\n    /// @param treasuryAssets_ The list of assets to redeem.\\n    /// @param redeemAmount_ The amount of redeemable token to burn.\\n    function _redeem(IERC20[] memory treasuryAssets_, uint256 redeemAmount_)\\n        internal\\n    {\\n        uint256 assetsLength_ = treasuryAssets_.length;\\n\\n        // Calculate everything before any balances change.\\n        uint256[] memory amounts_ = new uint256[](assetsLength_);\\n\\n        // The fraction of the assets we release is the fraction of the\\n        // outstanding total supply of the redeemable being burned.\\n        // Every treasury asset is released in the same proportion.\\n        // Guard against no asset redemptions and log all events before we\\n        // change any contract state or call external contracts.\\n        require(assetsLength_ > 0, \\\"EMPTY_ASSETS\\\");\\n        uint256 supply_ = IERC20(address(this)).totalSupply();\\n        uint256 amount_ = 0;\\n        for (uint256 i_ = 0; i_ < assetsLength_; i_++) {\\n            amount_ =\\n                (treasuryAssets_[i_].balanceOf(address(this)) * redeemAmount_) /\\n                supply_;\\n            require(amount_ > 0, \\\"ZERO_AMOUNT\\\");\\n            emit Redeem(\\n                msg.sender,\\n                address(treasuryAssets_[i_]),\\n                redeemAmount_,\\n                amount_\\n            );\\n            amounts_[i_] = amount_;\\n        }\\n\\n        // Burn FIRST (reentrancy safety).\\n        _burn(msg.sender, redeemAmount_);\\n\\n        // THEN send all assets.\\n        for (uint256 i_ = 0; i_ < assetsLength_; i_++) {\\n            treasuryAssets_[i_].safeTransfer(msg.sender, amounts_[i_]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tier/ITier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers as a `uint`.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at `1`; Tier `0` is implied if no tier has ever\\n///     been held.\\n///   - Tier `0` is NOT encoded in the report, it is simply the fallback value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If a tier is held but the historical block information is not available\\n///     the report MAY return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if tier 0 is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\n///\\n/// So the four possible states and report values are:\\n/// - Tier is held and block is known: Block is in the report\\n/// - Tier is held but block is NOT known: `0` is in the report\\n/// - Tier is NOT held: `0xFF..` is in the report\\n/// - Tier is unknown: `0xFF..` is in the report\\ninterface ITier {\\n    /// Every time a tier changes we log start and end tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    /// The start tier MAY be lower than the current tier as at the block this\\n    /// event is emitted in.\\n    /// @param sender The `msg.sender` that authorized the tier change.\\n    /// @param account The account changing tier.\\n    /// @param startTier The previous tier the account held.\\n    /// @param endTier The newly acquired tier the account now holds.\\n    /// @param data The associated data for the tier change.\\n    event TierChange(\\n        address sender,\\n        address account,\\n        uint256 startTier,\\n        uint256 endTier,\\n        bytes data\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, uint startTier, uint endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where tier 3 can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// tier 0 to themselves.\\n    ///\\n    /// The tier 0 status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        uint256 endTier,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with tier 0 for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at tier 8\\n    /// from high bits and working down to tier 1.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost and\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tier/libraries/TierReport.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ITier} from \\\"../ITier.sol\\\";\\nimport \\\"./TierConstants.sol\\\";\\n\\n/// @title TierReport\\n/// @notice `TierReport` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this\\n/// factors that out.\\nlibrary TierReport {\\n    /// Enforce upper limit on tiers so we can do unchecked math.\\n    /// @param tier_ The tier to enforce bounds on.\\n    modifier maxTier(uint256 tier_) {\\n        require(tier_ <= TierConstants.MAX_TIER, \\\"MAX_TIER\\\");\\n        _;\\n    }\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(uint256 report_, uint256 blockNumber_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < 8; i_++) {\\n                if (uint32(uint256(report_ >> (i_ * 32))) > blockNumber_) {\\n                    return i_;\\n                }\\n            }\\n            return TierConstants.MAX_TIER;\\n        }\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // ZERO is a special case. Everyone has always been at least ZERO,\\n            // since block 0.\\n            if (tier_ == 0) {\\n                return 0;\\n            }\\n\\n            uint256 offset_ = (tier_ - 1) * 32;\\n            return uint256(uint32(uint256(report_ >> offset_)));\\n        }\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            uint256 mask_ = (TierConstants.NEVER_REPORT >> offset_) << offset_;\\n            return report_ | mask_;\\n        }\\n    }\\n\\n    /// Updates a report with a block number for a given tier.\\n    /// More gas efficient than `updateBlocksForTierRange` if only a single\\n    /// tier is being modified.\\n    /// The tier at/above the given tier is updated. E.g. tier `0` will update\\n    /// the block for tier `1`.\\n    /// @param report_ Report to use as the baseline for the updated report.\\n    /// @param tier_ The tier level to update.\\n    /// @param blockNumber_ The new block number for `tier_`.\\n    function updateBlockAtTier(\\n        uint256 report_,\\n        uint256 tier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(tier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            return\\n                (report_ &\\n                    ~uint256(uint256(TierConstants.NEVER_TIER) << offset_)) |\\n                uint256(blockNumber_ << offset_);\\n        }\\n    }\\n\\n    /// Updates a report with a block number for every tier in a range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start tier.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier at the start of the range (exclusive).\\n    /// @param endTier_ The tier at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every tier in the\\n    /// range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(endTier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_;\\n            for (uint256 i_ = startTier_; i_ < endTier_; i_++) {\\n                offset_ = i_ * 32;\\n                report_ =\\n                    (report_ &\\n                        ~uint256(\\n                            uint256(TierConstants.NEVER_TIER) << offset_\\n                        )) |\\n                    uint256(blockNumber_ << offset_);\\n            }\\n            return report_;\\n        }\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure returns (uint256) {\\n        return\\n            endTier_ < startTier_\\n                ? truncateTiersAbove(report_, endTier_)\\n                : updateBlocksForTierRange(\\n                    report_,\\n                    startTier_,\\n                    endTier_,\\n                    blockNumber_\\n                );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tier/libraries/TierConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title TierConstants\\n/// @notice Constants for use with tier logic.\\nlibrary TierConstants {\\n    /// NEVER is 0xFF.. as it is infinitely in the future.\\n    /// NEVER for an entire report.\\n    uint256 internal constant NEVER_REPORT = type(uint256).max;\\n    /// NEVER for a single tier.\\n    uint32 internal constant NEVER_TIER = type(uint32).max;\\n\\n    /// Always is 0 as it is the genesis block.\\n    /// Tiers can't predate the chain but they can predate an `ITier` contract.\\n    uint256 internal constant ALWAYS = 0;\\n\\n    /// Account has never held a tier.\\n    uint256 internal constant TIER_ZERO = 0;\\n\\n    /// Magic number for tier one.\\n    uint256 internal constant TIER_ONE = 1;\\n    /// Magic number for tier two.\\n    uint256 internal constant TIER_TWO = 2;\\n    /// Magic number for tier three.\\n    uint256 internal constant TIER_THREE = 3;\\n    /// Magic number for tier four.\\n    uint256 internal constant TIER_FOUR = 4;\\n    /// Magic number for tier five.\\n    uint256 internal constant TIER_FIVE = 5;\\n    /// Magic number for tier six.\\n    uint256 internal constant TIER_SIX = 6;\\n    /// Magic number for tier seven.\\n    uint256 internal constant TIER_SEVEN = 7;\\n    /// Magic number for tier eight.\\n    uint256 internal constant TIER_EIGHT = 8;\\n    /// Maximum tier is `TIER_EIGHT`.\\n    uint256 internal constant MAX_TIER = TIER_EIGHT;\\n}\\n\"\r\n    },\r\n    \"contracts/phased/Phased.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title Phased\\n/// @notice `Phased` is an abstract contract that defines up to `9` phases that\\n/// an implementing contract moves through.\\n///\\n/// Phase `0` is always the first phase and does not, and cannot, be set\\n/// expicitly. Effectively it is implied that phase `0` has been active\\n/// since block zero.\\n///\\n/// Each subsequent phase `1` through `8` must be scheduled sequentially and\\n/// explicitly at a block number.\\n///\\n/// Only the immediate next phase can be scheduled with `scheduleNextPhase`,\\n/// it is not possible to schedule multiple phases ahead.\\n///\\n/// Multiple phases can be scheduled in a single block if each scheduled phase\\n/// is scheduled for the current block.\\n///\\n/// Several utility functions and modifiers are provided.\\n///\\n/// One event `PhaseShiftScheduled` is emitted each time a phase shift is\\n/// scheduled (not when the scheduled phase is reached).\\n///\\n/// @dev `Phased` contracts have a defined timeline with available\\n/// functionality grouped into phases.\\n/// Every `Phased` contract starts at `0` and moves sequentially\\n/// through phases `1` to `8`.\\n/// Every `Phase` other than `0` is optional, there is no requirement\\n/// that all 9 phases are implemented.\\n/// Phases can never be revisited, the inheriting contract always moves through\\n/// each achieved phase linearly.\\n/// This is enforced by only allowing `scheduleNextPhase` to be called once per\\n/// phase.\\n/// It is possible to call `scheduleNextPhase` several times in a single block\\n/// but the `block.number` for each phase must be reached each time to schedule\\n/// the next phase.\\n/// Importantly there are events and several modifiers and checks available to\\n/// ensure that functionality is limited to the current phase.\\n/// The full history of each phase shift block is recorded as a fixed size\\n/// array of `uint32`.\\ncontract Phased {\\n    /// @dev Every phase block starts uninitialized.\\n    /// Only uninitialized blocks can be set by the phase scheduler.\\n    uint32 private constant UNINITIALIZED = type(uint32).max;\\n    /// @dev This is how many phases can fit in a `uint256`.\\n    uint256 private constant MAX_PHASE = 8;\\n\\n    /// `PhaseScheduled` is emitted when the next phase is scheduled.\\n    /// @param sender `msg.sender` that scheduled the next phase.\\n    /// @param newPhase The next phase being scheduled.\\n    /// @param scheduledBlock The block the phase will be achieved.\\n    event PhaseScheduled(\\n        address sender,\\n        uint256 newPhase,\\n        uint256 scheduledBlock\\n    );\\n\\n    /// 8 phases each as 32 bits to fit a single 32 byte word.\\n    uint32[MAX_PHASE] public phaseBlocks;\\n\\n    /// Initialize the blocks at \\\"never\\\".\\n    /// All phase blocks are initialized to `UNINITIALIZED`.\\n    /// i.e. not fallback solidity value of `0`.\\n    function initializePhased() internal {\\n        // Reinitialization is a bug.\\n        // Only need to check the first block as all blocks are about to be set\\n        // to `UNINITIALIZED`.\\n        assert(phaseBlocks[0] < 1);\\n        uint32[MAX_PHASE] memory phaseBlocks_ = [\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED\\n        ];\\n        phaseBlocks = phaseBlocks_;\\n        // 0 is always the block for implied phase 0.\\n        emit PhaseScheduled(msg.sender, 0, 0);\\n    }\\n\\n    /// Pure function to reduce an array of phase blocks and block number to a\\n    /// specific `Phase`.\\n    /// The phase will be the highest attained even if several phases have the\\n    /// same block number.\\n    /// If every phase block is after the block number then `0` is\\n    /// returned.\\n    /// If every phase block is before the block number then `MAX_PHASE` is\\n    /// returned.\\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\\n    /// @param blockNumber_ Determine the relevant phase relative to this block\\n    /// number.\\n    /// @return The \\\"current\\\" phase relative to the block number and phase\\n    /// blocks list.\\n    function phaseAtBlockNumber(\\n        uint32[MAX_PHASE] memory phaseBlocks_,\\n        uint256 blockNumber_\\n    ) public pure returns (uint256) {\\n        for (uint256 i_ = 0; i_ < MAX_PHASE; i_++) {\\n            if (blockNumber_ < phaseBlocks_[i_]) {\\n                return i_;\\n            }\\n        }\\n        return MAX_PHASE;\\n    }\\n\\n    /// Pure function to reduce an array of phase blocks and phase to a\\n    /// specific block number.\\n    /// `Phase.ZERO` will always return block `0`.\\n    /// Every other phase will map to a block number in `phaseBlocks_`.\\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\\n    /// @param phase_ Determine the relevant block number for this phase.\\n    /// @return The block number for the phase according to `phaseBlocks_`.\\n    function blockNumberForPhase(\\n        uint32[MAX_PHASE] memory phaseBlocks_,\\n        uint256 phase_\\n    ) public pure returns (uint256) {\\n        return phase_ > 0 ? phaseBlocks_[phase_ - 1] : 0;\\n    }\\n\\n    /// Impure read-only function to return the \\\"current\\\" phase from internal\\n    /// contract state.\\n    /// Simply wraps `phaseAtBlockNumber` for current values of `phaseBlocks`\\n    /// and `block.number`.\\n    function currentPhase() public view returns (uint256) {\\n        return phaseAtBlockNumber(phaseBlocks, block.number);\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase.\\n    /// @param phase_ Modified functions can only be called during this phase.\\n    modifier onlyPhase(uint256 phase_) {\\n        require(currentPhase() == phase_, \\\"BAD_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase OR if the\\n    /// specified phase has passed.\\n    /// @param phase_ Modified function only callable during or after this\\n    /// phase.\\n    modifier onlyAtLeastPhase(uint256 phase_) {\\n        require(currentPhase() >= phase_, \\\"MIN_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Writes the block for the next phase.\\n    /// Only uninitialized blocks can be written to.\\n    /// Only the immediate next phase relative to `currentPhase` can be written\\n    /// to. It is still required to specify the `phase_` so that it is explicit\\n    /// and clear in the calling code which phase is being moved to.\\n    /// Emits `PhaseShiftScheduled` with the phase block.\\n    /// @param phase_ The phase being scheduled.\\n    /// @param block_ The block for the phase.\\n    function schedulePhase(uint256 phase_, uint256 block_) internal {\\n        require(block.number <= block_, \\\"NEXT_BLOCK_PAST\\\");\\n        require(block_ < UNINITIALIZED, \\\"NEXT_BLOCK_UNINITIALIZED\\\");\\n        // Don't need to check for underflow as the index will be used as a\\n        // fixed array index below. Implies that scheduling phase `0` is NOT\\n        // supported.\\n        uint256 index_;\\n        unchecked {\\n            index_ = phase_ - 1;\\n        }\\n        // Bit of a hack to check the current phase against the index to\\n        // save calculating the subtraction twice.\\n        require(currentPhase() == index_, \\\"NEXT_PHASE\\\");\\n\\n        require(UNINITIALIZED == phaseBlocks[index_], \\\"NEXT_BLOCK_SET\\\");\\n\\n        // Cannot exceed UNINITIALIZED (see above) so don't need to check\\n        // overflow on downcast.\\n        unchecked {\\n            phaseBlocks[index_] = uint32(block_);\\n        }\\n\\n        emit PhaseScheduled(msg.sender, phase_, block_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc20/ERC20Pull.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// Constructor config for `ERC20Pull`.\\n/// @param sender Token sender to bind to `pullERC20`.\\n/// @param token ERC20 token to bind to `pullERC20`.\\nstruct ERC20PullConfig {\\n    address sender;\\n    address token;\\n}\\n\\n/// @title ERC20Pull\\n/// @notice Enables a contract to pull (transfer to self) some `IERC20` token\\n/// from a sender. Both the sender and token must be known and trusted by the\\n/// implementing contract during initialization, and cannot be changed.\\n///\\n/// This enables the `sender` to merely approve the implementing contract then\\n/// anon can call `pullERC20` to have those tokens transferred. In some cases\\n/// (e.g. distributing the proceeds of a raise) it is safer to only approve\\n/// tokens than to transfer (e.g. if there is some bug reverting transfers).\\n///\\n/// The `sender` is singular and bound at construction to avoid the situation\\n/// where EOA accounts inadvertantly \\\"infinite approve\\\" and lose their tokens.\\n/// For this reason EOA accounts are NOT supported as the `sender`. Approvals\\n/// MUST expect the `ERC20Pull` contract to take any and all tokens up to the\\n/// allowance at any moment. EOA accounts typically are not security conscious\\n/// enough to be nominated as the `sender`.\\n///\\n/// The token is singular and bound at construction to avoid the situation\\n/// where anons can force the implementing contract to call an arbitrary\\n/// external contract.\\ncontract ERC20Pull {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    /// Emitted during initialization.\\n    /// @param sender `msg.sender` of initialize.\\n    /// @param tokenSender Address that token can be pulled from.\\n    /// @param token Token that can be pulled.\\n    event ERC20PullInitialize(\\n        address sender,\\n        address tokenSender,\\n        address token\\n    );\\n\\n    /// @dev The `sender` that this contract will attempt to pull tokens from.\\n    address private sender;\\n    /// @dev The ERC20 token that this contract will attempt to pull to itself\\n    /// from `sender`.\\n    address private token;\\n\\n    /// Initialize the sender and token.\\n    /// @param config_ `ERC20PullConfig` to initialize.\\n    function initializeERC20Pull(ERC20PullConfig memory config_) internal {\\n        // Sender and token MUST be set in the config. MAY point at a known\\n        // address that cannot approve the specified token to effectively\\n        // disable pull functionality.\\n        // Sender MUST NOT be an EOA.\\n        // See https://github.com/beehive-innovation/rain-protocol/issues/254\\n        require(config_.sender.isContract(), \\\"EOA_SENDER\\\");\\n        require(config_.token != address(0), \\\"ZERO_TOKEN\\\");\\n        // Reinitialization is a bug.\\n        // We know the token is non-zero for an initialized contract so can\\n        // just check that.\\n        assert(token == address(0));\\n        sender = config_.sender;\\n        token = config_.token;\\n        emit ERC20PullInitialize(msg.sender, config_.sender, config_.token);\\n    }\\n\\n    /// Attempts to transfer `amount_` of `token` to this contract.\\n    /// Relies on `token` having been approved for at least `amount_` by the\\n    /// `sender`. Will revert if the transfer fails due to `safeTransferFrom`.\\n    /// Also relies on `token` not being malicious.\\n    /// @param amount_ The amount to attempt to pull to the implementing\\n    /// contract.\\n    function pullERC20(uint256 amount_) external {\\n        IERC20(token).safeTransferFrom(sender, address(this), amount_);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ERC20PullInitialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20Config\",\"name\":\"erc20Config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"tier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumTier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"distributionEndForwardingAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct RedeemableERC20Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPhase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduledBlock\",\"type\":\"uint256\"}],\"name\":\"PhaseScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"grantedReceiver\",\"type\":\"address\"}],\"name\":\"Receiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"grantedSender\",\"type\":\"address\"}],\"name\":\"Sender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"TreasuryAsset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[8]\",\"name\":\"phaseBlocks_\",\"type\":\"uint32[8]\"},{\"internalType\":\"uint256\",\"name\":\"phase_\",\"type\":\"uint256\"}],\"name\":\"blockNumberForPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor_\",\"type\":\"address\"}],\"name\":\"endDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver_\",\"type\":\"address\"}],\"name\":\"grantReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSender_\",\"type\":\"address\"}],\"name\":\"grantSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20Config\",\"name\":\"erc20Config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"tier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumTier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"distributionEndForwardingAddress\",\"type\":\"address\"}],\"internalType\":\"struct RedeemableERC20Config\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeReceiver_\",\"type\":\"address\"}],\"name\":\"isReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeSender_\",\"type\":\"address\"}],\"name\":\"isSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryAsset_\",\"type\":\"address\"}],\"name\":\"newTreasuryAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[8]\",\"name\":\"phaseBlocks_\",\"type\":\"uint32[8]\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"phaseAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phaseBlocks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"pullERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"treasuryAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount_\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier\",\"outputs\":[{\"internalType\":\"contract ITier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RedeemableERC20", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0e98bd243707999fddbe3a723adfa0bc42f752b4d0730f086841614ced18857c"}]}