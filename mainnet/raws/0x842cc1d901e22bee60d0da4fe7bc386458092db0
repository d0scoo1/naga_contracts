{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n\r\ninterface Claim {\r\n    function alphaClaimed(uint256 tokenid) external returns (bool);\r\n    function betaClaimed(uint256 tokenid) external returns (bool);\r\n}\r\n\r\ncontract Checker {\r\n    Claim claim = Claim(0x025C6da5BD0e6A5dd1350fda9e3B6a614B205a1F);\r\n\r\n\r\n    function checkAlpha() external returns (uint256[] memory) {\r\n        uint256[] memory unclaimed = new uint256[](10000);\r\n        uint256 count;\r\n        for (uint i = 0; i < 10000; i++){\r\n            if (!claim.alphaClaimed(i)) {\r\n                unclaimed[count] = i;\r\n                count++;\r\n            }\r\n        }\r\n        return unclaimed;\r\n    }\r\n\r\n    function checkBeta() external returns (uint256[] memory) {\r\n        uint256[] memory unclaimed = new uint256[](20000);\r\n        uint256 count;\r\n        for (uint i = 0; i < 20000; i++){\r\n            \r\n            if (!claim.betaClaimed(i)) {\r\n                unclaimed[count] = i;\r\n                count++;\r\n            }\r\n        }\r\n        return unclaimed;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"checkAlpha\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBeta\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Checker", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dd54b043c700e22e63ce5c5af423e1b6a166c827089e41bbea502d57220b6174"}]}