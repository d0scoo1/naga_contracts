{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * SAFEMATH LIBRARY\r\n */\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"NOT AN OWNER\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface Irouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external;\r\n\r\n    function setShare(address shareholder, uint256 amount) external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function process(uint256 gas) external;\r\n\r\n    function claimDividend(address _user) external;\r\n\r\n    function getPaidEarnings(address shareholder)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function totalDistributed() external view returns (uint256);\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    address WBNB;\r\n    Irouter router;\r\n\r\n    address[] shareholders;\r\n    mapping(address => uint256) shareholderIndexes;\r\n    mapping(address => uint256) shareholderClaims;\r\n\r\n    mapping(address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10**36;\r\n\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1 * (10**18);\r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token);\r\n        _;\r\n    }\r\n\r\n    constructor(address _router) {\r\n        router = Irouter(_router);\r\n        WBNB = router.WETH();\r\n        _token = msg.sender;\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount)\r\n        external\r\n        override\r\n        onlyToken\r\n    {\r\n        if (shares[shareholder].amount > 0) {\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 amount = msg.value;\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(\r\n            dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)\r\n        );\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n            getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed.add(amount);\r\n            payable(shareholder).transfer(amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder]\r\n                .totalRealised\r\n                .add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(\r\n                shares[shareholder].amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function claimDividend(address _user) public {\r\n        distributeDividend(_user);\r\n    }\r\n\r\n    function getPaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return shares[shareholder].totalRealised;\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract MILLIONAIRESAPECLUB is IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string constant _name = \"Millionaire's Ape Club\";\r\n    string constant _symbol = \"$MAC\";\r\n    uint8 constant _decimals = 9;\r\n    uint256 constant _totalSupply = 1 * 10**12 * (10**_decimals);\r\n    uint256 public maxWalletSize = _totalSupply.mul(2).div(100); // 2%\r\n\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isTxLimitExempt;\r\n    mapping(address => bool) public isDividendExempt;\r\n    mapping(address => bool) public isSniper;\r\n    mapping(address => bool) public isMaxWalletExempt;\r\n\r\n    Irouter public router;\r\n    address public pair;\r\n    address public WBNB;\r\n    DividendDistributor distributor;\r\n    address public distributorAddress;\r\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private autoLiquidityReceiver;\r\n    address private marketFeeReceiver;\r\n    address private devFeeReceiver;\r\n\r\n    // buy tax fee\r\n    uint256 reflectionFeeOnBuying = 300;\r\n    uint256 liquidityFeeOnBuying = 200;\r\n    uint256 devFeeOnBuying = 300;\r\n    uint256 marketFeeOnBuying = 400;\r\n    uint256 burnFeeOnBuying = 100;\r\n\r\n    // sell tax fee\r\n    uint256 reflectionFeeOnSelling = 300;\r\n    uint256 liquidityFeeOnSelling = 200;\r\n    uint256 devFeeOnSelling = 300;\r\n    uint256 marketFeeOnSelling = 400;\r\n    uint256 burnFeeOnSelling = 100;\r\n\r\n    // normal tax fee\r\n    uint256 reflectionFee = 0;\r\n    uint256 liquidityFee = 0;\r\n    uint256 devFee = 0;\r\n    uint256 marketFee = 0;\r\n    uint256 burnFee = 0;\r\n\r\n    // current tx fee contract use\r\n    uint256 _reflectionFee;\r\n    uint256 _liquidityFee;\r\n    uint256 _devFee;\r\n    uint256 _marketFee;\r\n    uint256 _burnFee;\r\n\r\n    // counters for swaping\r\n    uint256 _accumulatedReflection;\r\n    uint256 _accumulatedLiquidity;\r\n    uint256 _accumulatedDev;\r\n    uint256 _accumulatedMarket;\r\n\r\n    uint256 public launchedAt;\r\n    uint256 public launchedAtTimestamp;\r\n    uint256 public antiSnipingTime = 75 seconds;\r\n    uint256 public feeDenominator = 10000;\r\n    uint256 public maxBuyAmount = _totalSupply.div(100); // 1%\r\n    uint256 public maxSellAmount = _totalSupply.div(400); // 0.25%\r\n    uint256 public swapThreshold = _totalSupply / 2000; // 0.005%\r\n    uint256 distributorGas = 500000;\r\n\r\n    bool public swapEnabled;\r\n    bool public tradingOpen;\r\n    bool inSwap;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(\r\n        address _router \r\n    ) Ownable(msg.sender) {\r\n        router = Irouter(_router);\r\n        WBNB = router.WETH();\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        distributor = new DividendDistributor(_router);\r\n        distributorAddress = address(distributor);\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n\r\n        isMaxWalletExempt[pair] = true;\r\n        isMaxWalletExempt[msg.sender]=true;\r\n        isMaxWalletExempt[DEAD]=true;\r\n        isMaxWalletExempt[address(this)]=true;\r\n\r\n        autoLiquidityReceiver = msg.sender;\r\n        marketFeeReceiver =payable(0x7d0B182308CD54462fA1541931f409Afe2aE7afD);\r\n        devFeeReceiver = payable(0x7d0B182308CD54462fA1541931f409Afe2aE7afD);\r\n\r\n        approve(_router, _totalSupply);\r\n        approve(address(pair), _totalSupply);\r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\r\n                .sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(!isSniper[sender], \"Sniper detected\");\r\n        require(!isSniper[recipient], \"Sniper detected\");\r\n        if (!isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\r\n            // trading disable till launch\r\n            if (!tradingOpen) {\r\n                require(\r\n                    sender != pair && recipient != pair,\r\n                    \"Trading is not enabled yet\"\r\n                );\r\n                if (!isMaxWalletExempt[recipient] && sender == pair) {\r\n                require(\r\n                    balanceOf(recipient).add(amount) <= maxWalletSize,\r\n                    \"Max Holding Limit reached\"\r\n                );\r\n            }\r\n            }\r\n            // antibot\r\n            if (\r\n                block.timestamp < launchedAtTimestamp + antiSnipingTime &&\r\n                sender != address(router)\r\n            ) {\r\n                if (sender == pair) {\r\n                    isSniper[recipient] = true;\r\n                } else if (recipient == pair) {\r\n                    isSniper[sender] = true;\r\n                }\r\n            }\r\n        }\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n\r\n        if (isFeeExempt[sender] || isFeeExempt[recipient]) {\r\n            _basicTransfer(sender, recipient, amount);\r\n        } else {\r\n            // buying handler\r\n            if (sender == pair) {\r\n                require(amount <= maxBuyAmount, \"TX Limit Exceeded\");\r\n                setBuyFee();\r\n            }\r\n            // selling handler\r\n            else if (recipient == pair) {\r\n                require(amount <= maxSellAmount, \"TX Limit Exceeded\");\r\n                setSellFee();\r\n            }\r\n            // wallet to wallet handler\r\n            else {\r\n                setNormalFee();\r\n            }\r\n\r\n            _feeTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (!isDividendExempt[sender]) {\r\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\r\n        }\r\n        if (!isDividendExempt[recipient]) {\r\n            try\r\n                distributor.setShare(recipient, _balances[recipient])\r\n            {} catch {}\r\n        }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _feeTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        uint256 transferAmount = amount.sub(\r\n            amount\r\n                .mul(\r\n                    _reflectionFee\r\n                        .add(_liquidityFee)\r\n                        .add(_devFee)\r\n                        .add(_marketFee)\r\n                        .add(_burnFee)\r\n                )\r\n                .div(feeDenominator)\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(transferAmount);\r\n        emit Transfer(sender, recipient, transferAmount);\r\n        if (_reflectionFee > 0) _takeReflectionFee(sender, amount);\r\n\r\n        if (_liquidityFee > 0) _takeLiquidityFee(sender, amount);\r\n\r\n        if (_devFee > 0) _takeDevFee(sender, amount);\r\n\r\n        if (_marketFee > 0) _takeMarketFee(sender, amount);\r\n\r\n        if (_burnFee > 0) _takeBurnFee(sender, amount);\r\n    }\r\n\r\n    function _takeReflectionFee(address sender, uint256 amount) private {\r\n        uint256 reflectionFeeAmount;\r\n        reflectionFeeAmount = amount.mul(_reflectionFee).div(feeDenominator);\r\n        _accumulatedReflection = _accumulatedReflection.add(\r\n            reflectionFeeAmount\r\n        );\r\n        _balances[address(this)] = _balances[address(this)].add(\r\n            reflectionFeeAmount\r\n        );\r\n        emit Transfer(sender, address(this), reflectionFeeAmount);\r\n    }\r\n\r\n    function _takeLiquidityFee(address sender, uint256 amount) private {\r\n        uint256 liquidityFeeAmount;\r\n        liquidityFeeAmount = amount.mul(_liquidityFee).div(feeDenominator);\r\n        _accumulatedLiquidity = _accumulatedLiquidity.add(liquidityFeeAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(\r\n            liquidityFeeAmount\r\n        );\r\n        emit Transfer(sender, address(this), liquidityFeeAmount);\r\n    }\r\n\r\n    function _takeDevFee(address sender, uint256 amount) private {\r\n        uint256 devFeeAmount;\r\n        devFeeAmount = amount.mul(_devFee).div(feeDenominator);\r\n        _accumulatedDev = _accumulatedDev.add(devFeeAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(devFeeAmount);\r\n        emit Transfer(sender, address(this), devFeeAmount);\r\n    }\r\n\r\n    function _takeMarketFee(address sender, uint256 amount) private {\r\n        uint256 marketFeeAmount;\r\n        marketFeeAmount = amount.mul(_marketFee).div(feeDenominator);\r\n        _accumulatedMarket = _accumulatedMarket.add(marketFeeAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(\r\n            marketFeeAmount\r\n        );\r\n        emit Transfer(sender, address(this), marketFeeAmount);\r\n    }\r\n\r\n    function _takeBurnFee(address sender, uint256 amount) private {\r\n        uint256 burnFeeAmount;\r\n        burnFeeAmount = amount.mul(_burnFee).div(feeDenominator);\r\n        _balances[DEAD] = _balances[DEAD].add(burnFeeAmount);\r\n        emit Transfer(sender, DEAD, burnFeeAmount);\r\n    }\r\n\r\n    function setBuyFee() private {\r\n        _reflectionFee = reflectionFeeOnBuying;\r\n        _liquidityFee = liquidityFeeOnBuying;\r\n        _devFee = devFeeOnBuying;\r\n        _marketFee = marketFeeOnBuying;\r\n        _burnFee = burnFeeOnBuying;\r\n    }\r\n\r\n    function setSellFee() private {\r\n        _reflectionFee = reflectionFeeOnSelling;\r\n        _liquidityFee = liquidityFeeOnSelling;\r\n        _devFee = devFeeOnSelling;\r\n        _marketFee = marketFeeOnSelling;\r\n        _burnFee = burnFeeOnSelling;\r\n    }\r\n\r\n    function setNormalFee() private {\r\n        _reflectionFee = reflectionFee;\r\n        _liquidityFee = liquidityFee;\r\n        _devFee = devFee;\r\n        _marketFee = marketFee;\r\n        _burnFee = burnFee;\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 swapDivider = _accumulatedLiquidity\r\n            .add(_accumulatedReflection)\r\n            .add(_accumulatedDev)\r\n            .add(_accumulatedMarket);\r\n        uint256 halfLiquidity = _accumulatedLiquidity.div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(halfLiquidity);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 amountBNBLiquidity = amountBNB.mul(halfLiquidity).div(\r\n            swapDivider\r\n        );\r\n        uint256 amountBNBReflection = amountBNB.mul(_accumulatedReflection).div(\r\n            swapDivider\r\n        );\r\n        uint256 amountBNBDev = amountBNB.mul(_accumulatedDev).div(\r\n            swapDivider\r\n        );\r\n        uint256 amountBNBMarketing = amountBNB\r\n            .sub(amountBNBLiquidity)\r\n            .sub(amountBNBReflection)\r\n            .sub(amountBNBDev);\r\n\r\n        payable(marketFeeReceiver).transfer(amountBNBMarketing);\r\n        payable(devFeeReceiver).transfer(amountBNBDev);\r\n        try distributor.deposit{value: amountBNBReflection}() {} catch {}\r\n\r\n        if (halfLiquidity > 0) {\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                halfLiquidity,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, halfLiquidity);\r\n        }\r\n        _accumulatedReflection = 0;\r\n        _accumulatedLiquidity = 0;\r\n        _accumulatedDev = 0;\r\n        _accumulatedMarket = 0;\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() public onlyOwner {\r\n        require(launchedAt == 0, \"Already launched boi\");\r\n        launchedAt = block.number;\r\n        launchedAtTimestamp = block.timestamp;\r\n        tradingOpen = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function setSellLimit(uint256 amount) external onlyOwner { \r\n        maxSellAmount = amount;\r\n    }\r\n\r\n    function setBuyLimit(uint256 amount) external onlyOwner { \r\n        maxBuyAmount = amount;\r\n    }\r\n    \r\n    function ExcludeAddressesFromMaxWalletLimit(address account, bool _state)\r\n        external\r\n        onlyOwner\r\n    {\r\n        isMaxWalletExempt[account] = _state;\r\n    }\r\n    function setMaxWalletLimit(uint256 amount) external onlyOwner {\r\n        maxWalletSize = amount;\r\n    }\r\n    function setIsDividendExempt(address holder, bool exempt)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if (exempt) {\r\n            distributor.setShare(holder, 0);\r\n        } else {\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt)\r\n        external\r\n        onlyOwner\r\n    {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setBuyFeePercent(\r\n        uint256 reflectionFee_,\r\n        uint256 liquidityFee_,\r\n        uint256 devFee_,\r\n        uint256 marketFee_,\r\n        uint256 burnFee_,\r\n        uint256 _feeDenominator\r\n    ) external onlyOwner {\r\n        reflectionFeeOnBuying = reflectionFee_;\r\n        liquidityFeeOnBuying = liquidityFee_;\r\n        devFeeOnBuying = devFee_;\r\n        marketFeeOnBuying = marketFee_;\r\n        burnFeeOnBuying = burnFee_;\r\n        feeDenominator = _feeDenominator;\r\n        require(\r\n            reflectionFeeOnBuying\r\n                .add(liquidityFeeOnBuying)\r\n                .add(devFeeOnBuying)\r\n                .add(marketFeeOnBuying) <= feeDenominator / 4,\r\n            \"BEP20: Can not be greater than max fee\"\r\n        );\r\n    }\r\n\r\n    function setSellFeePercent(\r\n        uint256 reflectionFee_,\r\n        uint256 liquidityFee_,\r\n        uint256 devFee_,\r\n        uint256 marketFee_,\r\n        uint256 burnFee_,\r\n        uint256 _feeDenominator\r\n    ) external onlyOwner {\r\n        reflectionFeeOnSelling = reflectionFee_;\r\n        liquidityFeeOnSelling = liquidityFee_;\r\n        devFeeOnSelling = devFee_;\r\n        marketFeeOnSelling = marketFee_;\r\n        burnFeeOnSelling = burnFee_;\r\n        feeDenominator = _feeDenominator;\r\n        require(\r\n            reflectionFeeOnSelling\r\n                .add(liquidityFeeOnSelling)\r\n                .add(devFeeOnSelling)\r\n                .add(marketFeeOnSelling) <= feeDenominator / 4,\r\n            \"BEP20: Can not be greater than max fee\"\r\n        );\r\n    }\r\n\r\n    function setNormalFeePercent(\r\n        uint256 reflectionFee_,\r\n        uint256 liquidityFee_,\r\n        uint256 devFee_,\r\n        uint256 marketFee_,\r\n        uint256 burnFee_,\r\n        uint256 _feeDenominator\r\n    ) external onlyOwner {\r\n        reflectionFee = reflectionFee_;\r\n        liquidityFee = liquidityFee_;\r\n        devFee = devFee_;\r\n        marketFee = marketFee_;\r\n        burnFee = burnFee_;\r\n        feeDenominator = _feeDenominator;\r\n        require(\r\n            reflectionFee.add(liquidityFee).add(devFee).add(marketFee) <=\r\n                feeDenominator / 4,\r\n            \"BEP20: Can not be greater than max fee\"\r\n        );\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _autoLiquidityReceiver,\r\n        address _marketFeeReceiver,\r\n        address _devFeeReceiver\r\n    ) external onlyOwner {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        marketFeeReceiver = _marketFeeReceiver;\r\n        devFeeReceiver = _devFeeReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 750000);\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributor.claimDividend(msg.sender);\r\n    }\r\n\r\n    function getPaidDividend(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return distributor.getPaidEarnings(shareholder);\r\n    }\r\n\r\n    function getUnpaidDividend(address shareholder)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return distributor.getUnpaidEarnings(shareholder);\r\n    }\r\n\r\n    function getTotalDistributedDividend() external view returns (uint256) {\r\n        return distributor.totalDistributed();\r\n    }\r\n\r\n    function addSniperInList(address _account) external onlyOwner {\r\n        require(_account != address(router), \"We can not blacklist router\");\r\n        require(!isSniper[_account], \"Sniper already exist\");\r\n        isSniper[_account] = true;\r\n    }\r\n\r\n    function removeSniperFromList(address _account) external onlyOwner {\r\n        require(isSniper[_account], \"Not a sniper\");\r\n        isSniper[_account] = false;\r\n    }\r\n\r\n    function changeRoute(address _router, address _pair) external onlyOwner {\r\n        router = Irouter(_router);\r\n        pair = _pair;\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"ExcludeAddressesFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addSniperInList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSnipingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"changeRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getPaidDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDistributedDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaidDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMaxWalletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeSniperFromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract Irouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setNormalFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MILLIONAIRESAPECLUB", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://770ccf22fbecb5faff21fc7ad92cf03fb9df7fae2615239e044a8219f564a5e3"}]}