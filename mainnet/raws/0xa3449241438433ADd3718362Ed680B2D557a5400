{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/library/BridgeScanRange.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nstruct AbnormalRangeInfo {\r\n    bool startInit;\r\n    bool endInit;\r\n    uint256 startIndex;\r\n    uint256 endIndex;\r\n    bool continuousStart;\r\n    bool continuousEnd;\r\n    bool middle;\r\n}\r\n\r\nlibrary BridgeScanRange {\r\n    function getBlockScanRange(\r\n        uint64[] memory r,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) internal pure returns (uint64[] memory _r) {\r\n        if (r.length == 0) {\r\n            _r = new uint64[](2);\r\n            (, _r) = _insertRange(0, _r, v1, v2);\r\n        } else {\r\n            uint256 total;\r\n            uint64[2][] memory ranges = _extractBlockScanRanges(r);\r\n            bool normality = _determineRangeNormality(ranges, v1, v2);\r\n            if (normality) {\r\n                total = _getNewRangeCount(r.length, ranges, v1, v2);\r\n                if (total > 0) {\r\n                    _r = new uint64[](total);\r\n                    _r = _createNewRanges(ranges, v1, v2, _r);\r\n                }\r\n            } else {\r\n                AbnormalRangeInfo memory info;\r\n                (total, info) = _getAbnormalNewRangeCount(\r\n                    r.length,\r\n                    ranges,\r\n                    v1,\r\n                    v2\r\n                );\r\n                if (total > 0) {\r\n                    _r = new uint64[](total);\r\n                    _r = _createAbnormalNewRanges(ranges, v1, v2, _r, info);\r\n                }\r\n            }\r\n\r\n            if (total == 0) {\r\n                _r = new uint64[](r.length);\r\n                _r = r;\r\n            }\r\n        }\r\n    }\r\n\r\n    // extract [x1, x2, x3, x4] into [[x1, x2], [x3, x4]]\r\n    function _extractBlockScanRanges(uint64[] memory r)\r\n        private\r\n        pure\r\n        returns (uint64[2][] memory arr)\r\n    {\r\n        uint256 maxRange = r.length / 2;\r\n        arr = new uint64[2][](maxRange);\r\n\r\n        uint64 k = 0;\r\n        for (uint64 i = 0; i < maxRange; i++) {\r\n            (bool e1, uint64 v1) = _getElement(i + k, r);\r\n            (bool e2, uint64 v2) = _getElement(i + k + 1, r);\r\n\r\n            uint64[2] memory tmp;\r\n            if (e1 && e2) tmp = [v1, v2];\r\n            arr[k] = tmp;\r\n            k++;\r\n        }\r\n    }\r\n\r\n    function _getElement(uint64 i, uint64[] memory arr)\r\n        private\r\n        pure\r\n        returns (bool exist, uint64 ele)\r\n    {\r\n        if (exist = (i >= 0 && i < arr.length)) {\r\n            ele = arr[i];\r\n        }\r\n    }\r\n\r\n    function _getElement(uint64 i, uint64[2][] memory arr)\r\n        private\r\n        pure\r\n        returns (bool exist, uint64[2] memory ranges)\r\n    {\r\n        if (exist = (i >= 0 && i < arr.length)) {\r\n            ranges = arr[i];\r\n        }\r\n    }\r\n\r\n    // determine range overlapping\r\n    function _determineRangeNormality(\r\n        uint64[2][] memory ranges,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) private pure returns (bool normality) {\r\n        bool ended;\r\n        for (uint64 i = 0; i < ranges.length; i++) {\r\n            (bool e1, uint64[2] memory ele1) = _getElement(i, ranges);\r\n            (bool e2, uint64[2] memory ele2) = _getElement(i + 1, ranges);\r\n\r\n            if (e1 && e2)\r\n                (ended, normality) = _checkRangeNormality(\r\n                    i,\r\n                    v1,\r\n                    v2,\r\n                    ele1,\r\n                    ele2\r\n                );\r\n            else if (e1)\r\n                (ended, normality) = _checkRangeNormality(i, v1, v2, ele1);\r\n\r\n            if (ended) return normality;\r\n        }\r\n    }\r\n\r\n    function _checkRangeNormality(\r\n        uint64 index,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1\r\n    ) private pure returns (bool, bool) {\r\n        if ((index == 0 && v2 <= ele1[0]) || v1 >= ele1[1]) {\r\n            return (true, true);\r\n        }\r\n        return (true, false);\r\n    }\r\n\r\n    function _checkRangeNormality(\r\n        uint64 index,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        uint64[2] memory ele2\r\n    ) private pure returns (bool, bool) {\r\n        if ((index == 0 && v2 <= ele1[0]) || (v1 >= ele1[1] && v2 <= ele2[0])) {\r\n            return (true, true);\r\n        }\r\n        return (false, false);\r\n    }\r\n\r\n    /** Range Normal */\r\n\r\n    // Get total number of elements\r\n    function _getNewRangeCount(\r\n        uint256 curCount,\r\n        uint64[2][] memory ranges,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) private pure returns (uint256 total) {\r\n        for (uint64 i = 0; i < ranges.length; i++) {\r\n            (bool e1, uint64[2] memory ele1) = _getElement(i, ranges);\r\n            (bool e2, uint64[2] memory ele2) = _getElement(i + 1, ranges);\r\n\r\n            if (e1 && e2) total = _calculateRange(curCount, v1, v2, ele1, ele2);\r\n            else if (e1) total = _calculateRange(curCount, v1, v2, ele1);\r\n\r\n            if (total > 0) return total;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function _calculateRange(\r\n        uint256 curCount,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1\r\n    ) private pure returns (uint256 total) {\r\n        if (v2 <= ele1[0]) {\r\n            if (_checkEnd(ele1[0], v2)) {\r\n                total = curCount;\r\n            } else {\r\n                total = curCount + 2;\r\n            }\r\n        } else if (v1 >= ele1[1]) {\r\n            if (_checkStart(ele1[1], v1)) {\r\n                total = curCount;\r\n            } else {\r\n                total = curCount + 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _calculateRange(\r\n        uint256 curCount,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        uint64[2] memory ele2\r\n    ) private pure returns (uint256 total) {\r\n        if (v2 <= ele1[0]) {\r\n            if (_checkEnd(ele1[0], v2)) {\r\n                total = curCount;\r\n            } else {\r\n                total = curCount + 2;\r\n            }\r\n        } else if (v1 >= ele1[1] && v2 <= ele2[0]) {\r\n            if (_checkStart(ele1[1], v1) && _checkEnd(ele2[0], v2)) {\r\n                total = curCount - 2;\r\n            } else if (_checkStart(ele1[1], v1) || _checkEnd(ele2[0], v2)) {\r\n                total = curCount;\r\n            } else {\r\n                total = curCount + 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create new blockScanRanges array\r\n    function _createNewRanges(\r\n        uint64[2][] memory ranges,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[] memory r\r\n    ) private pure returns (uint64[] memory) {\r\n        bool done = false;\r\n        bool skip = false;\r\n        uint256 total = 0;\r\n        for (uint64 i = 0; i < ranges.length; i++) {\r\n            (bool e1, uint64[2] memory ele1) = _getElement(i, ranges);\r\n            (bool e2, uint64[2] memory ele2) = _getElement(i + 1, ranges);\r\n\r\n            if (done) {\r\n                if (!skip && e1)\r\n                    (total, r) = _insertRange(total, r, ele1[0], ele1[1]);\r\n                else skip = false;\r\n            } else {\r\n                if (e1 && e2) {\r\n                    (done, total, r) = _insertRange(\r\n                        total,\r\n                        r,\r\n                        v1,\r\n                        v2,\r\n                        ele1,\r\n                        ele2\r\n                    );\r\n                    if (done) skip = true;\r\n                } else if (e1)\r\n                    (done, total, r) = _insertRange(total, r, v1, v2, ele1);\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function _insertRange(\r\n        uint256 i,\r\n        uint64[] memory r,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) private pure returns (uint256, uint64[] memory) {\r\n        r[i] = v1;\r\n        r[i + 1] = v2;\r\n        i += 2;\r\n        return (i, r);\r\n    }\r\n\r\n    function _insertRange(\r\n        uint256 i,\r\n        uint64[] memory r,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            bool done,\r\n            uint256,\r\n            uint64[] memory\r\n        )\r\n    {\r\n        if (v2 <= ele1[0]) {\r\n            if (_checkEnd(ele1[0], v2)) {\r\n                (i, r) = _insertRange(i, r, v1, ele1[1]);\r\n                done = true;\r\n            } else {\r\n                (i, r) = _insertRange(i, r, v1, v2);\r\n                (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n                done = true;\r\n            }\r\n        } else if (v1 >= ele1[1]) {\r\n            if (_checkStart(ele1[1], v1)) {\r\n                (i, r) = _insertRange(i, r, ele1[0], v2);\r\n                done = true;\r\n            } else {\r\n                (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n                (i, r) = _insertRange(i, r, v1, v2);\r\n                done = true;\r\n            }\r\n        }\r\n        return (done, i, r);\r\n    }\r\n\r\n    function _insertRange(\r\n        uint256 i,\r\n        uint64[] memory r,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        uint64[2] memory ele2\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            bool done,\r\n            uint256,\r\n            uint64[] memory\r\n        )\r\n    {\r\n        if (v2 <= ele1[0]) {\r\n            if (_checkEnd(ele1[0], v2)) {\r\n                (i, r) = _insertRange(i, r, v1, ele1[1]);\r\n                (i, r) = _insertRange(i, r, ele2[0], ele2[1]);\r\n                done = true;\r\n            } else {\r\n                (i, r) = _insertRange(i, r, v1, v2);\r\n                (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n                (i, r) = _insertRange(i, r, ele2[0], ele2[1]);\r\n                done = true;\r\n            }\r\n        } else if (v1 >= ele1[1] && v2 <= ele2[0]) {\r\n            if (_checkStart(ele1[1], v1) && _checkEnd(ele2[0], v2)) {\r\n                (i, r) = _insertRange(i, r, ele1[0], ele2[1]);\r\n                done = true;\r\n            } else if (_checkStart(ele1[1], v1)) {\r\n                (i, r) = _insertRange(i, r, ele1[0], v2);\r\n                (i, r) = _insertRange(i, r, ele2[0], ele2[1]);\r\n                done = true;\r\n            } else if (_checkEnd(ele2[0], v2)) {\r\n                (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n                (i, r) = _insertRange(i, r, v1, ele2[1]);\r\n                done = true;\r\n            } else {\r\n                (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n                (i, r) = _insertRange(i, r, v1, v2);\r\n                (i, r) = _insertRange(i, r, ele2[0], ele2[1]);\r\n                done = true;\r\n            }\r\n        }\r\n\r\n        if (!done) (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n\r\n        return (done, i, r);\r\n    }\r\n\r\n    /** END Range Normal */\r\n\r\n    /** Range Abnormal (overlapping) */\r\n    function _getAbnormalNewRangeCount(\r\n        uint256 curCount,\r\n        uint64[2][] memory ranges,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) private pure returns (uint256 total, AbnormalRangeInfo memory info) {\r\n        for (uint64 i = 0; i < ranges.length; i++) {\r\n            (bool e1, uint64[2] memory ele1) = _getElement(i, ranges);\r\n            (bool e2, uint64[2] memory ele2) = _getElement(i + 1, ranges);\r\n\r\n            if (e1 && e2) {\r\n                if (info.startInit)\r\n                    info = _calculateAbnormalRangeEnd(i, v2, ele1, ele2, info);\r\n                else\r\n                    info = _calculateAbnormalRange(i, v1, v2, ele1, ele2, info);\r\n            } else if (e1) {\r\n                if (info.startInit)\r\n                    info = _calculateAbnormalRange(i, v2, ele1, info);\r\n                else info = _calculateAbnormalRange(i, v1, v2, ele1, info);\r\n            }\r\n\r\n            if (info.endInit)\r\n                total = _calculateAbnormalRangeTotal(curCount, info);\r\n\r\n            if (total > 0) return (total, info);\r\n        }\r\n    }\r\n\r\n    function _calculateAbnormalRange(\r\n        uint256 i,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (AbnormalRangeInfo memory) {\r\n        if (v1 <= ele1[0] && v2 >= ele1[1]) {\r\n            info.startInit = info.endInit = true;\r\n            info.startIndex = info.endIndex = i;\r\n        }\r\n        return info;\r\n    }\r\n\r\n    function _calculateAbnormalRange(\r\n        uint256 i,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (AbnormalRangeInfo memory) {\r\n        if (v2 >= ele1[1]) {\r\n            info.endInit = true;\r\n            info.endIndex = i;\r\n        }\r\n        return info;\r\n    }\r\n\r\n    function _calculateAbnormalRange(\r\n        uint256 i,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        uint64[2] memory ele2,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (AbnormalRangeInfo memory) {\r\n        if (v1 <= ele1[0] && v2 >= ele1[1] && v2 <= ele2[0]) {\r\n            info.startInit = info.endInit = true;\r\n            info.startIndex = info.endIndex = i;\r\n            if (_checkEnd(ele2[0], v2)) info.continuousEnd = true;\r\n        } else if (v1 <= ele1[0]) {\r\n            info.startInit = true;\r\n            info.startIndex = i;\r\n        } else if (v1 >= ele1[1] && v1 <= ele2[0]) {\r\n            info.startInit = true;\r\n            info.startIndex = i;\r\n            info.middle = true;\r\n            if (_checkStart(ele1[1], v1)) info.continuousStart = true;\r\n        }\r\n        return info;\r\n    }\r\n\r\n    function _calculateAbnormalRangeEnd(\r\n        uint256 i,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        uint64[2] memory ele2,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (AbnormalRangeInfo memory) {\r\n        if (v2 >= ele1[1] && v2 <= ele2[0]) {\r\n            info.endInit = true;\r\n            info.endIndex = i;\r\n            if (_checkEnd(ele2[0], v2)) info.continuousEnd = true;\r\n        }\r\n        return info;\r\n    }\r\n\r\n    function _calculateAbnormalRangeTotal(\r\n        uint256 curCount,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (uint256 total) {\r\n        if (info.startIndex == info.endIndex) {\r\n            if (info.continuousEnd) total = curCount - 2;\r\n            else total = curCount;\r\n        } else if (info.endIndex > info.startIndex) {\r\n            uint256 diff = info.endIndex - info.startIndex;\r\n            total = curCount - (2 * diff);\r\n            if (\r\n                (info.continuousStart && info.continuousEnd && info.middle) ||\r\n                (info.continuousEnd && !info.middle)\r\n            ) total -= 2;\r\n            else if (\r\n                !info.continuousStart && !info.continuousEnd && info.middle\r\n            ) total += 2;\r\n        }\r\n    }\r\n\r\n    function _createAbnormalNewRanges(\r\n        uint64[2][] memory ranges,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[] memory r,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (uint64[] memory) {\r\n        bool skip = false;\r\n        uint256 total = 0;\r\n        for (uint64 i = 0; i < ranges.length; i++) {\r\n            (, uint64[2] memory ele1) = _getElement(i, ranges);\r\n            (bool e2, uint64[2] memory ele2) = _getElement(i + 1, ranges);\r\n\r\n            if (info.startIndex == i) {\r\n                if (info.middle) {\r\n                    if (info.continuousStart) {\r\n                        (total, r) = _insertAbnormalRange(total, r, ele1[0]);\r\n                        skip = true;\r\n                    } else {\r\n                        (total, r) = _insertAbnormalRange(\r\n                            total,\r\n                            r,\r\n                            ele1[0],\r\n                            ele1[1]\r\n                        );\r\n                        (total, r) = _insertAbnormalRange(total, r, v1);\r\n                        skip = true;\r\n                    }\r\n                } else {\r\n                    (total, r) = _insertAbnormalRange(total, r, v1);\r\n                }\r\n            }\r\n\r\n            if (info.endIndex == i) {\r\n                if (info.continuousEnd) {\r\n                    (total, r) = _insertAbnormalRange(total, r, ele2[1]);\r\n                    skip = true;\r\n                } else {\r\n                    (total, r) = _insertAbnormalRange(total, r, v2);\r\n                    if (e2) {\r\n                        (total, r) = _insertAbnormalRange(\r\n                            total,\r\n                            r,\r\n                            ele2[0],\r\n                            ele2[1]\r\n                        );\r\n                        skip = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!(i >= info.startIndex && i <= info.endIndex)) {\r\n                if (!skip)\r\n                    (total, r) = _insertAbnormalRange(\r\n                        total,\r\n                        r,\r\n                        ele1[0],\r\n                        ele1[1]\r\n                    );\r\n                else skip = false;\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function _insertAbnormalRange(\r\n        uint256 i,\r\n        uint64[] memory r,\r\n        uint64 v\r\n    ) private pure returns (uint256, uint64[] memory) {\r\n        r[i] = v;\r\n        i += 1;\r\n        return (i, r);\r\n    }\r\n\r\n    function _insertAbnormalRange(\r\n        uint256 i,\r\n        uint64[] memory r,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) private pure returns (uint256, uint64[] memory) {\r\n        r[i] = v1;\r\n        r[i + 1] = v2;\r\n        i += 2;\r\n        return (i, r);\r\n    }\r\n\r\n    /** END Range Abnormal (overlapping) */\r\n\r\n    // Check continuous\r\n    function _checkStart(uint64 ele, uint64 v) private pure returns (bool) {\r\n        return ((uint64(ele + 1) == v) || ele == v);\r\n    }\r\n\r\n    function _checkEnd(uint64 ele, uint64 v) private pure returns (bool) {\r\n        return ((uint64(ele - 1) == v) || ele == v);\r\n    }\r\n}\r\n\r\n// File: contracts/library/BridgeSecurity.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary BridgeSecurity {\r\n    function generateSignerMsgHash(uint64 epoch, address[] memory signers)\r\n        internal\r\n        pure\r\n        returns (bytes32 msgHash)\r\n    {\r\n        msgHash = keccak256(\r\n            abi.encodePacked(\r\n                bytes1(0x19),\r\n                bytes1(0),\r\n                address(0),\r\n                epoch,\r\n                _encodeAddressArr(signers)\r\n            )\r\n        );\r\n    }\r\n\r\n    function generatePackMsgHash(\r\n        address thisAddr,\r\n        uint64 epoch,\r\n        uint8 networkId,\r\n        uint64[2] memory blockScanRange,\r\n        uint256[] memory txHashes,\r\n        address[] memory tokens,\r\n        address[] memory recipients,\r\n        uint256[] memory amounts\r\n    ) internal pure returns (bytes32 msgHash) {\r\n        msgHash = keccak256(\r\n            abi.encodePacked(\r\n                bytes1(0x19),\r\n                bytes1(0),\r\n                thisAddr,\r\n                epoch,\r\n                _encodeFixed2Uint64Arr(blockScanRange),\r\n                networkId,\r\n                _encodeUint256Arr(txHashes),\r\n                _encodeAddressArr(tokens),\r\n                _encodeAddressArr(recipients),\r\n                _encodeUint256Arr(amounts)\r\n            )\r\n        );\r\n    }\r\n\r\n    function signersVerification(\r\n        bytes32 msgHash,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s,\r\n        address[] memory signers,\r\n        mapping(address => bool) storage mapSigners\r\n    ) internal view returns (bool) {\r\n        uint64 totalSigners = 0;\r\n        for (uint64 i = 0; i < signers.length; i++) {\r\n            if (mapSigners[signers[i]]) totalSigners++;\r\n        }\r\n        return (_getVerifiedSigners(msgHash, v, r, s, mapSigners) ==\r\n            (totalSigners / 2) + 1);\r\n    }\r\n\r\n    function _getVerifiedSigners(\r\n        bytes32 msgHash,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s,\r\n        mapping(address => bool) storage mapSigners\r\n    ) private view returns (uint8 verifiedSigners) {\r\n        address lastAddr = address(0);\r\n        verifiedSigners = 0;\r\n        for (uint64 i = 0; i < v.length; i++) {\r\n            address recovered = ecrecover(msgHash, v[i], r[i], s[i]);\r\n            if (recovered > lastAddr && mapSigners[recovered])\r\n                verifiedSigners++;\r\n            lastAddr = recovered;\r\n        }\r\n    }\r\n\r\n    function _encodeAddressArr(address[] memory arr)\r\n        private\r\n        pure\r\n        returns (bytes memory data)\r\n    {\r\n        for (uint64 i = 0; i < arr.length; i++) {\r\n            data = abi.encodePacked(data, arr[i]);\r\n        }\r\n    }\r\n\r\n    function _encodeUint256Arr(uint256[] memory arr)\r\n        private\r\n        pure\r\n        returns (bytes memory data)\r\n    {\r\n        for (uint64 i = 0; i < arr.length; i++) {\r\n            data = abi.encodePacked(data, arr[i]);\r\n        }\r\n    }\r\n\r\n    function _encodeFixed2Uint64Arr(uint64[2] memory arr)\r\n        private\r\n        pure\r\n        returns (bytes memory data)\r\n    {\r\n        for (uint64 i = 0; i < arr.length; i++) {\r\n            data = abi.encodePacked(data, arr[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/BaseToken/interface/ITokenFactory.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface ITokenFactory {\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n    event BridgeChanged(address indexed oldBridge, address indexed newBridge);\r\n\r\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\r\n\r\n    event TokenCreated(\r\n        string name,\r\n        string indexed symbol,\r\n        uint256 amount,\r\n        uint8 decimal,\r\n        uint256 cap,\r\n        address indexed token\r\n    );\r\n\r\n    event TokenRemoved(address indexed token);\r\n\r\n    event TokenDecimalChanged(\r\n        address indexed token,\r\n        uint8 oldDecimal,\r\n        uint8 newDecimal\r\n    );\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function tokens() external view returns (address[] memory);\r\n\r\n    function tokenExist(address token) external view returns (bool);\r\n\r\n    function bridge() external view returns (address);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function setBridge(address bridge) external;\r\n\r\n    function setAdmin(address admin) external;\r\n\r\n    function createToken(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 amount,\r\n        uint8 decimal,\r\n        uint256 cap\r\n    ) external returns (address token);\r\n\r\n    function removeToken(address token) external;\r\n\r\n    function setTokenDecimal(address token, uint8 decimal) external;\r\n}\r\n\r\n// File: contracts/BaseBridgeV2/interface/IBridgeV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nstruct TokenReq {\r\n    bool exist;\r\n    uint256 minAmount;\r\n    uint256 maxAmount;\r\n    uint256 chargePercent;\r\n    uint256 minCharge;\r\n    uint256 maxCharge;\r\n}\r\n\r\nstruct CrossTokenInfo {\r\n    string name;\r\n    string symbol;\r\n}\r\n\r\nstruct NetworkInfo {\r\n    uint8 id;\r\n    string name;\r\n}\r\n\r\nstruct TokenData {\r\n    address[] tokens;\r\n    address[] crossTokens;\r\n    uint256[] minAmounts;\r\n    uint256[] maxAmounts;\r\n    uint256[] chargePercents;\r\n    uint256[] minCharges;\r\n    uint256[] maxCharges;\r\n    uint8[] tokenTypes;\r\n}\r\n\r\nstruct TokensInfo {\r\n    uint8[] ids;\r\n    address[][] tokens;\r\n    address[][] crossTokens;\r\n    uint256[][] minAmounts;\r\n    uint256[][] maxAmounts;\r\n    uint256[][] chargePercents;\r\n    uint256[][] minCharges;\r\n    uint256[][] maxCharges;\r\n    uint8[][] tokenTypes;\r\n}\r\n\r\ninterface IBridgeV2 {\r\n    event TokenConnected(\r\n        address indexed token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 percent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge,\r\n        address indexed crossToken,\r\n        string symbol\r\n    );\r\n\r\n    event TokenReqChanged(\r\n        uint64 blockIndex,\r\n        address indexed token,\r\n        uint256[2] minAmount,\r\n        uint256[2] maxAmount,\r\n        uint256[2] percent,\r\n        uint256[2] minCharge,\r\n        uint256[2] maxCharge\r\n    );\r\n\r\n    function initialize(\r\n        address factory,\r\n        address admin,\r\n        address tokenFactory,\r\n        address wMech,\r\n        uint8 networkId,\r\n        string memory networkName\r\n    ) external;\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function network() external view returns (uint8, string memory);\r\n\r\n    function activeTokenCount() external view returns (uint8);\r\n\r\n    function crossToken(address crossToken)\r\n        external\r\n        view\r\n        returns (string memory, string memory);\r\n\r\n    function tokens(uint64 futureBlock, uint64 searchBlockIndex)\r\n        external\r\n        view\r\n        returns (TokenData memory data);\r\n\r\n    function blockScanRange() external view returns (uint64[] memory);\r\n\r\n    function txHash(uint256 txHash) external view returns (bool);\r\n\r\n    function setTokenConnection(\r\n        address token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 percent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge,\r\n        address crossToken,\r\n        string memory name,\r\n        string memory symbol\r\n    ) external;\r\n\r\n    function setTokenInfo(\r\n        address token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 percent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge\r\n    ) external;\r\n\r\n    function resetTokenConnection(address token, address crossToken) external;\r\n\r\n    function processPack(\r\n        uint64[2] memory blockScanRange,\r\n        uint256[] memory txHashes,\r\n        address[] memory tokens,\r\n        address[] memory recipients,\r\n        uint256[] memory amounts\r\n    ) external;\r\n\r\n    function setScanRange(uint64[2] memory scanRange) external;\r\n}\r\n\r\n// File: contracts/BaseCrossBridgeV2/interface/ICrossBridgeStorageTokenV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface ICrossBridgeStorageTokenV2 {\r\n    event TokenConnected(\r\n        address indexed token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 percent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge,\r\n        address indexed crossToken,\r\n        string symbol\r\n    );\r\n\r\n    event TokenRequirementChanged(\r\n        uint64 blockIndex,\r\n        address indexed token,\r\n        uint256[2] minAmount,\r\n        uint256[2] maxAmount,\r\n        uint256[2] percent,\r\n        uint256[2] minCharge,\r\n        uint256[2] maxCharge\r\n    );\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function bridge() external view returns (address);\r\n\r\n    function mapToken(address token) external view returns (bool);\r\n\r\n    function mapOcToken(address token) external view returns (address);\r\n\r\n    function mapCoToken(address token) external view returns (address);\r\n\r\n    function blockScanRange() external view returns (uint64[] memory);\r\n\r\n    function crossToken(address token)\r\n        external\r\n        view\r\n        returns (string memory, string memory);\r\n\r\n    function tokens(\r\n        ITokenFactory tf,\r\n        uint64 futureBlock,\r\n        uint64 searchBlockIndex\r\n    ) external view returns (TokensInfo memory info);\r\n\r\n    function txHash(uint256 txHash) external view returns (bool);\r\n\r\n    function setCallers(address admin, address bridge) external;\r\n\r\n    function resetTokenConnection(address token, address crossToken) external;\r\n\r\n    function setTokenConnection(\r\n        address token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 chargePercent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge,\r\n        address crossToken,\r\n        string memory name,\r\n        string memory symbol\r\n    ) external;\r\n\r\n    function setTokenInfo(\r\n        address token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 chargePercent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge\r\n    ) external;\r\n\r\n    function setTxHash(uint256 txHash) external;\r\n\r\n    function setScanRange(uint64[2] memory scanRange) external;\r\n}\r\n\r\n// File: contracts/library/BridgeUtilsV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary BridgeUtilsV2 {\r\n    uint256 internal constant FUTURE_BLOCK_INTERVAL = 100;\r\n    uint256 public constant CHARGE_PERCENTAGE_DIVIDER = 10000;\r\n\r\n    function roundFuture(uint256 blockIndex) internal pure returns (uint64) {\r\n        uint256 _futureBlockIndex;\r\n        if (blockIndex <= FUTURE_BLOCK_INTERVAL) {\r\n            _futureBlockIndex = FUTURE_BLOCK_INTERVAL;\r\n        } else {\r\n            _futureBlockIndex =\r\n                FUTURE_BLOCK_INTERVAL *\r\n                ((blockIndex / FUTURE_BLOCK_INTERVAL) + 1);\r\n        }\r\n        return uint64(_futureBlockIndex);\r\n    }\r\n\r\n    function getFuture(uint256 blockIndex)\r\n        internal\r\n        pure\r\n        returns (uint64 futureBlockIndex)\r\n    {\r\n        uint256 _futureBlockIndex;\r\n        if (blockIndex <= FUTURE_BLOCK_INTERVAL) {\r\n            _futureBlockIndex = 0;\r\n        } else {\r\n            _futureBlockIndex =\r\n                FUTURE_BLOCK_INTERVAL *\r\n                (blockIndex / FUTURE_BLOCK_INTERVAL);\r\n        }\r\n        return uint64(_futureBlockIndex);\r\n    }\r\n\r\n    function getBlockScanRange(\r\n        uint16 count,\r\n        uint8[] memory networks,\r\n        mapping(uint8 => address) storage bridges\r\n    )\r\n        internal\r\n        view\r\n        returns (uint8[] memory _networks, uint64[][] memory _ranges)\r\n    {\r\n        _networks = new uint8[](count);\r\n        _ranges = new uint64[][](count);\r\n        uint64 k = 0;\r\n        for (uint64 i = 0; i < networks.length; i++) {\r\n            if (bridges[networks[i]] != address(0)) {\r\n                _networks[k] = networks[i];\r\n                _ranges[k] = IBridgeV2(bridges[networks[i]]).blockScanRange();\r\n                k++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTokenReq(\r\n        uint64 futureBlock,\r\n        address token,\r\n        uint64[] memory futureBlocks,\r\n        mapping(address => mapping(uint64 => TokenReq)) storage tokenReqs\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 minAmount,\r\n            uint256 maxAmount,\r\n            uint256 percent,\r\n            uint256 minCharge,\r\n            uint256 maxCharge\r\n        )\r\n    {\r\n        TokenReq memory _req = getReq(\r\n            futureBlock,\r\n            token,\r\n            futureBlocks,\r\n            tokenReqs\r\n        );\r\n        minAmount = _req.minAmount;\r\n        maxAmount = _req.maxAmount;\r\n        percent = _req.chargePercent;\r\n        minCharge = _req.minCharge;\r\n        maxCharge = _req.maxCharge;\r\n    }\r\n\r\n    function updateMap(\r\n        address[] memory arr,\r\n        bool status,\r\n        mapping(address => bool) storage map\r\n    ) internal {\r\n        for (uint64 i = 0; i < arr.length; i++) {\r\n            map[arr[i]] = status;\r\n        }\r\n    }\r\n\r\n    function getReq(\r\n        uint64 blockIndex,\r\n        address token,\r\n        uint64[] memory futureBlocks,\r\n        mapping(address => mapping(uint64 => TokenReq)) storage tokenReqs\r\n    ) internal view returns (TokenReq memory req) {\r\n        req = tokenReqs[token][blockIndex];\r\n        if (!req.exist) {\r\n            for (uint256 i = futureBlocks.length; i > 0; i--) {\r\n                if (futureBlocks[i - 1] <= blockIndex) {\r\n                    req = tokenReqs[token][futureBlocks[i - 1]];\r\n                    if (req.exist) return req;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCountBySearchIndex(\r\n        uint64 searchBlockIndex,\r\n        address[] memory tokens,\r\n        mapping(address => bool) storage mapTokens,\r\n        mapping(address => uint64) storage mapTokenCreatedBlockIndex\r\n    ) internal view returns (uint64 k) {\r\n        for (uint64 i = 0; i < tokens.length; i++) {\r\n            if (\r\n                mapTokens[tokens[i]] &&\r\n                (mapTokenCreatedBlockIndex[tokens[i]] <= searchBlockIndex)\r\n            ) {\r\n                k++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/BaseCrossBridgeV2/interface/ICrossBridgeStorageV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface ICrossBridgeStorageV2 {\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n    event SignersChanged(\r\n        address[] indexed oldSigners,\r\n        address[] indexed newSigners\r\n    );\r\n\r\n    event RelayersChanged(\r\n        address[] indexed oldRelayers,\r\n        address[] indexed newRelayers\r\n    );\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function bridge() external view returns (address);\r\n\r\n    function network() external view returns (NetworkInfo memory);\r\n\r\n    function epoch() external view returns (uint64);\r\n\r\n    function signers() external view returns (address[] memory);\r\n\r\n    function relayers() external view returns (address[] memory);\r\n\r\n    function mapSigner(address signer) external view returns (bool);\r\n\r\n    function mapRelayer(address relayer) external view returns (bool);\r\n\r\n    function setCallers(address admin, address bridge) external;\r\n\r\n    function setEpoch(uint64 epoch) external;\r\n\r\n    function setSigners(address[] memory signers_) external;\r\n\r\n    function setRelayers(address[] memory relayers_) external;\r\n\r\n    function signerVerification(\r\n        bytes32 msgHash,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s\r\n    ) external view returns (bool);\r\n}\r\n\r\n// File: contracts/BaseCrossBridgeV2/interface/ICrossBridgeV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface ICrossBridgeV2 {\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function epoch() external view returns (uint64);\r\n\r\n    function cap(address token) external view returns (uint256);\r\n\r\n    function tokens(uint64 searchBlockIndex)\r\n        external\r\n        view\r\n        returns (\r\n            uint8[] memory networkIds,\r\n            address[][] memory tokens,\r\n            address[][] memory crossTokens,\r\n            uint256[][] memory minAmounts,\r\n            uint256[][] memory maxAmounts,\r\n            uint256[][] memory chargePercents,\r\n            uint256[][] memory minCharges,\r\n            uint256[][] memory maxCharges,\r\n            uint8[][] memory tokenTypes\r\n        );\r\n\r\n    function blockScanRange(uint8 networkId)\r\n        external\r\n        view\r\n        returns (uint64[] memory);\r\n\r\n    function processSigners(\r\n        uint64 epoch,\r\n        address[] memory signers,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s\r\n    ) external;\r\n\r\n    function processPack(\r\n        uint8 id,\r\n        uint64[2] memory scanRange,\r\n        uint256[] memory txHashes,\r\n        address[] memory tokens,\r\n        address[] memory recipients,\r\n        uint256[] memory amounts,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s\r\n    ) external;\r\n\r\n    function setSigners(address[] memory signers) external;\r\n\r\n    function setRelayers(address[] memory relayers) external;\r\n\r\n    function withdrawal(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/BaseToken/interface/ITokenMintable.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface ITokenMintable is IERC20Upgradeable {\r\n    function initialize(\r\n        address factory,\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 amount,\r\n        uint8 decimal,\r\n        uint256 cap\r\n    ) external;\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function cap() external view returns (uint256);\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function increaseCap(uint256 cap) external;\r\n\r\n    function setupDecimal(uint8 decimal) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data)\r\n        private\r\n    {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            _initializing || !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/BaseCrossBridgeV2/base/CrossBridgeUpgradeableV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract CrossBridgeUpgradeableV2 is\r\n    Initializable,\r\n    OwnableUpgradeable,\r\n    ICrossBridgeV2\r\n{\r\n    using SafeERC20Upgradeable for ITokenMintable;\r\n    using BridgeSecurity for *;\r\n    using BridgeUtilsV2 for *;\r\n    using BridgeScanRange for uint64[];\r\n\r\n    ITokenFactory private tf;\r\n    ICrossBridgeStorageV2 private bs;\r\n    ICrossBridgeStorageTokenV2 private bts;\r\n\r\n    address[] private _wdSigners;\r\n    mapping(address => bool) private _mapWdSigners;\r\n\r\n    modifier onlyRelayer() {\r\n        require(bs.mapRelayer(msg.sender), \"OR\");\r\n        _;\r\n    }\r\n\r\n    function __CrossBridge_init(\r\n        address tokenFactory,\r\n        address bridgeStorage,\r\n        address bridgeTokenStorage,\r\n        address[] memory wdSigners_\r\n    ) internal initializer {\r\n        __Ownable_init();\r\n        tf = ITokenFactory(tokenFactory);\r\n        bs = ICrossBridgeStorageV2(bridgeStorage);\r\n        bts = ICrossBridgeStorageTokenV2(bridgeTokenStorage);\r\n        _wdSigners = wdSigners_;\r\n        for (uint64 i = 0; i < wdSigners_.length; i++) {\r\n            _mapWdSigners[wdSigners_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function owner()\r\n        public\r\n        view\r\n        virtual\r\n        override(OwnableUpgradeable, ICrossBridgeV2)\r\n        returns (address)\r\n    {\r\n        return super.owner();\r\n    }\r\n\r\n    function epoch() public view virtual override returns (uint64 epoch_) {\r\n        epoch_ = bs.epoch();\r\n    }\r\n\r\n    function cap(address token) external view override returns (uint256 _cap) {\r\n        return ITokenMintable(token).cap();\r\n    }\r\n\r\n    function blockScanRange(uint8 networkId)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint64[] memory blockScanRange_)\r\n    {\r\n        NetworkInfo memory network = bs.network();\r\n        if (networkId == network.id) blockScanRange_ = bts.blockScanRange();\r\n    }\r\n\r\n    function tokens(uint64 searchBlockIndex)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (\r\n            uint8[] memory networkIds,\r\n            address[][] memory tokens_,\r\n            address[][] memory crossTokens,\r\n            uint256[][] memory minAmounts,\r\n            uint256[][] memory maxAmounts,\r\n            uint256[][] memory chargePercents,\r\n            uint256[][] memory minCharges,\r\n            uint256[][] memory maxCharges,\r\n            uint8[][] memory tokenTypes\r\n        )\r\n    {\r\n        uint64 futureBlock = searchBlockIndex.getFuture();\r\n        TokensInfo memory info = bts.tokens(tf, futureBlock, searchBlockIndex);\r\n        return (\r\n            info.ids,\r\n            info.tokens,\r\n            info.crossTokens,\r\n            info.minAmounts,\r\n            info.maxAmounts,\r\n            info.chargePercents,\r\n            info.minCharges,\r\n            info.maxCharges,\r\n            info.tokenTypes\r\n        );\r\n    }\r\n\r\n    function processSigners(\r\n        uint64 epoch_,\r\n        address[] memory signers_,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s\r\n    ) external virtual override onlyRelayer {\r\n        require(epoch_ > epoch(), \"IE\");\r\n        bytes32 msgHash = epoch_.generateSignerMsgHash(signers_);\r\n        if (bs.signerVerification(msgHash, v, r, s)) {\r\n            bs.setEpoch(epoch_);\r\n            bs.setSigners(signers_);\r\n        }\r\n    }\r\n\r\n    function processPack(\r\n        uint8 networkId,\r\n        uint64[2] memory blockScanRange_,\r\n        uint256[] memory txHashes,\r\n        address[] memory tokens_,\r\n        address[] memory recipients,\r\n        uint256[] memory amounts,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s\r\n    ) external virtual override onlyRelayer {\r\n        require(blockScanRange_[1] > blockScanRange_[0], \"IR\");\r\n        bytes32 msgHash = address(this).generatePackMsgHash(\r\n            epoch(),\r\n            networkId,\r\n            blockScanRange_,\r\n            txHashes,\r\n            tokens_,\r\n            recipients,\r\n            amounts\r\n        );\r\n\r\n        if (bs.signerVerification(msgHash, v, r, s)) {\r\n            for (uint64 i = 0; i < txHashes.length; i++) {\r\n                if (!bts.txHash(txHashes[i]) && bts.mapToken(tokens_[i])) {\r\n                    bts.setTxHash(txHashes[i]);\r\n\r\n                    if (tf.tokenExist(tokens_[i])) {\r\n                        ITokenMintable(tokens_[i]).mint(\r\n                            recipients[i],\r\n                            amounts[i]\r\n                        );\r\n                    } else {\r\n                        ITokenMintable(tokens_[i]).safeTransfer(\r\n                            recipients[i],\r\n                            amounts[i]\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            bts.setScanRange(blockScanRange_);\r\n        }\r\n    }\r\n\r\n    function setSigners(address[] memory signers)\r\n        external\r\n        virtual\r\n        override\r\n        onlyOwner\r\n    {\r\n        bs.setSigners(signers);\r\n    }\r\n\r\n    function setRelayers(address[] memory relayers)\r\n        external\r\n        virtual\r\n        override\r\n        onlyOwner\r\n    {\r\n        bs.setRelayers(relayers);\r\n    }\r\n\r\n    function withdrawal(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s\r\n    ) external virtual override onlyOwner {\r\n        require(token != address(0), \"ZA\");\r\n        require(recipient != address(0), \"ZA\");\r\n        require(r.length == _wdSigners.length, \"SG1\");\r\n\r\n        bytes32 msgHash = keccak256(\r\n            abi.encodePacked(\r\n                bytes1(0x19),\r\n                bytes1(0),\r\n                address(this),\r\n                token,\r\n                recipient,\r\n                amount\r\n            )\r\n        );\r\n\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        msgHash = keccak256(abi.encodePacked(prefix, msgHash));\r\n\r\n        uint64 verified = 0;\r\n        address lastAddr = address(0);\r\n        for (uint64 i = 0; i < _wdSigners.length; i++) {\r\n            address recovered = ecrecover(msgHash, v[i], r[i], s[i]);\r\n            require(recovered > lastAddr && _mapWdSigners[recovered], \"SG2\");\r\n            lastAddr = recovered;\r\n            verified++;\r\n        }\r\n\r\n        if (verified == _wdSigners.length) {\r\n            ITokenMintable(token).safeTransfer(recipient, amount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Net-Ethereum/BridgeV2/EthereumBridgeV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract EthereumBridgeV2 is CrossBridgeUpgradeableV2 {\r\n    function initialize(\r\n        address tokenFactory,\r\n        address bridgeStorage,\r\n        address bridgeTokenStorage,\r\n        address[] memory wdSigners\r\n    ) public initializer {\r\n        __CrossBridge_init(\r\n            tokenFactory,\r\n            bridgeStorage,\r\n            bridgeTokenStorage,\r\n            wdSigners\r\n        );\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"networkId\",\"type\":\"uint8\"}],\"name\":\"blockScanRange\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"blockScanRange_\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"epoch_\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeTokenStorage\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"wdSigners\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"networkId\",\"type\":\"uint8\"},{\"internalType\":\"uint64[2]\",\"name\":\"blockScanRange_\",\"type\":\"uint64[2]\"},{\"internalType\":\"uint256[]\",\"name\":\"txHashes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"processPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"epoch_\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"signers_\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"processSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"relayers\",\"type\":\"address[]\"}],\"name\":\"setRelayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"}],\"name\":\"setSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"searchBlockIndex\",\"type\":\"uint64\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"networkIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address[][]\",\"name\":\"tokens_\",\"type\":\"address[][]\"},{\"internalType\":\"address[][]\",\"name\":\"crossTokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"minAmounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"maxAmounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"chargePercents\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"minCharges\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"maxCharges\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint8[][]\",\"name\":\"tokenTypes\",\"type\":\"uint8[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EthereumBridgeV2", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d310586d92cf089906a24aa7c34b151745266de6b73ab034b89c76d58403ab2b"}]}