{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ReservationBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n////   //////////          //////////////        /////////////////          //////////////\\n////          /////      /////        /////      ////          /////      /////        /////\\n////            ///     ////            ////     ////            ////    ////            ////\\n////           ////     ////            ////     ////            ////    ////            ////\\n//////////////////      ////            ////     ////            ////    ////            ////\\n////                    ////     ///    ////     ////            ////    ////     ///    ////\\n////      ////          ////     /////  ////     ////            ////    ////     /////  ////\\n////        ////        ////       /////////     ////            ////    ////       /////////\\n////         /////       /////       //////      ////          /////      /////       //////\\n////           /////       ////////    ////      ////   //////////          ////////    ////\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IReservationBook.sol\\\";\\nimport \\\"./IERC721Dispatcher.sol\\\";\\nimport \\\"./DispatchLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ReservationBook\\n * @dev ReservationBook contract for use with ERC721Dispatcher.\\n * @author 0xAnimist (kanon.art)\\n */\\ncontract ReservationBook is IReservationBook {\\n\\n  // ERC721Dispatcher\\n  address public dispatcherAddress;\\n\\n  // The dispatcher\\n  IERC721Dispatcher private dispatcher;\\n\\n  // Basic terms\\n  struct TermBase {\\n    address payee;\\n    address reservee;\\n    address currency;\\n    uint256 fee;\\n    uint256 durationInSecs;\\n  }\\n\\n  // Stores reservation information\\n  struct Reservations {\\n    uint256 startingIndex;\\n    uint256 maxReservations;\\n    uint256[] startTimes;\\n    uint256[] feesAccruedInWei;\\n    address[] reservees;\\n    address[] payees;\\n    bytes[] terms;\\n  }\\n\\n  // Mapping from token ID to reservations\\n  mapping(uint256 => Reservations) internal _reservations;\\n\\n  // Temporary buffer for processing refunds\\n  mapping(uint256 => address) private _refundRecipientsBuffer;\\n\\n  // Temporary buffer for processing refunds\\n  mapping(address => uint256) private _refundAmountBuffer;\\n\\n  // Default maxiumum reservations per token\\n  uint256 defaultMaxReservations = 20;\\n\\n  modifier onlyDispatcher() {\\n    require(msg.sender == dispatcherAddress, \\\"only dispatcher\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Constructor.\\n   */\\n  constructor(address _dispatcherAddress) {\\n    dispatcherAddress = _dispatcherAddress;\\n    dispatcher = IERC721Dispatcher(_dispatcherAddress);\\n  }\\n\\n  /**\\n   * @dev See {IReservationBook-setDefaultMaxReservations}.\\n   */\\n  function setDefaultMaxReservations(uint256 _defaultMaxReservations) external virtual override onlyDispatcher {\\n    defaultMaxReservations = _defaultMaxReservations;\\n  }\\n\\n  /**\\n   * @dev See {IReservationBook-setMaxReservations}.\\n   */\\n  function setMaxReservations(uint256[] memory _maxReservations, uint256[] memory _tokenIds) external virtual override onlyDispatcher {\\n    require(_tokenIds.length == _maxReservations.length, \\\"must be same length\\\");\\n    for(uint256 i = 0; i < _tokenIds.length; i++){\\n      _reservations[_tokenIds[i]].maxReservations = _maxReservations[i];\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IReservationBook-getMaxReservations}.\\n   */\\n  function getMaxReservations(uint256 _tokenId) external virtual override view returns (uint256 maxReservations) {\\n    return _reservations[_tokenId].maxReservations;\\n  }\\n\\n  /**\\n   * @dev See {IReservationBook-reserve}.\\n   */\\n  function reserve(address _reservee, address _RQContract, uint256 _RQTokenId, uint256 _startTime, bytes memory _requestTerms, bytes calldata _data) external payable virtual override returns (bool success) {\\n    (bool tokenExists, uint256 tokenId) = dispatcher.getTokenIdByDeposit(_RQContract, _RQTokenId);\\n    require(tokenExists, \\\"no such tokenId\\\");\\n    require(_startTime >= block.timestamp, \\\"past\\\");\\n\\n    uint256 reservationsRemaining = purgeExpired(tokenId);\\n\\n    require(reservationsRemaining > 0, \\\"reservations full\\\");\\n\\n    //confirm terms are acceptable\\n    bool valid;\\n    TermBase memory termBase;\\n    (valid, termBase.currency, termBase.fee, termBase.durationInSecs) = DispatchLib.validateReservation(msg.sender, _requestTerms, dispatcher.getTerms(tokenId));\\n    require(valid, \\\"inv\\\");\\n\\n    //confirm the reservation window is available\\n    (bool reserved, uint256 insertHere) = isReserved(_startTime, _startTime + termBase.durationInSecs - 1, tokenId);\\n    require(!reserved, \\\"already reserved at this time\\\");\\n    require(dispatcher.getNextAvailable(tokenId) <= _startTime, \\\"not avail\\\");\\n\\n    //process pre-payment\\n    _processPayment(msg.sender, termBase.currency, termBase.fee);\\n\\n    termBase.reservee = _reservee;\\n    termBase.payee = msg.sender;\\n\\n    success = _insertReservation(termBase, _startTime, insertHere, tokenId, _requestTerms);\\n\\n    if(success){\\n      emit Reserved(termBase.payee, termBase.reservee, _startTime, tokenId, _requestTerms, _data);\\n    }\\n  }\\n\\n  /**\\n   * @dev Proceeses payment.\\n   */\\n  function _processPayment(address _payee, address _currency, uint256 _fee) internal {\\n    if(_fee > 0){\\n      //collect withholding\\n      if(_currency != address(0)){//pay in ERC20\\n        IERC20(_currency).transferFrom(_payee, address(this), _fee);\\n      }else{//pay in ETH\\n        require(msg.value >= _fee, \\\"more ETH\\\");\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IReservationBook-refundFutureReservations}.\\n   */\\n  function refundFutureReservations(address _currency, uint256 _tokenId) external {\\n    uint256 totalRecipients = 0;\\n\\n    for(uint256 i = _reservations[_tokenId].startingIndex; i < _reservations[_tokenId].feesAccruedInWei.length; i++){\\n      uint256 endTime = _reservations[_tokenId].startTimes[i] + DispatchLib.getDuration(_reservations[_tokenId].terms[i]);\\n\\n      if(endTime >= block.timestamp){\\n        for(uint256 j = 0; j <= totalRecipients; j++){\\n          if(_refundRecipientsBuffer[j] == _reservations[_tokenId].payees[i]){\\n            break;\\n          }else{\\n            if(j == totalRecipients){\\n              _refundRecipientsBuffer[totalRecipients] = _reservations[_tokenId].payees[i];\\n              totalRecipients++;\\n              break;\\n            }\\n          }\\n        }\\n        //require(false, \\\"add to buffer\\\");\\n        _refundAmountBuffer[_reservations[_tokenId].payees[i]] += _reservations[_tokenId].feesAccruedInWei[i];\\n\\n      }\\n    }\\n    _processRefunds(_currency, totalRecipients);\\n  }\\n\\n  /**\\n   * @dev Processes refunds to recipients, paying with `_currency` currency.\\n   */\\n  function _processRefunds(address _currency, uint256 _totalRecipients) internal {\\n    //require(false, \\\"_processRefunds\\\");\\n    for(uint256 i = 0; i < _totalRecipients; i++){\\n      //require(false, \\\"_processRefunds for\\\");\\n      _pay(_currency, _refundRecipientsBuffer[i], _refundAmountBuffer[_refundRecipientsBuffer[i]]);\\n\\n      delete _refundAmountBuffer[_refundRecipientsBuffer[i]];\\n      delete _refundRecipientsBuffer[i];\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IReservationBook-claimFeesAccrued}.\\n   */\\n  function claimFeesAccrued(address _currency, uint256 _tokenId) external onlyDispatcher returns (bool success, uint256 feesClaimedInWei){\\n    uint256 feesToPayInWei = 0;\\n    for(uint256 i = _reservations[_tokenId].startingIndex; i < _reservations[_tokenId].feesAccruedInWei.length; i++){\\n      uint256 endTime = _reservations[_tokenId].startTimes[i] + DispatchLib.getDuration(_reservations[_tokenId].terms[i]);\\n      if(block.timestamp > endTime){\\n        feesToPayInWei += _reservations[_tokenId].feesAccruedInWei[i];\\n        _clearReservation(i, _tokenId);\\n      }\\n    }\\n\\n    return _pay(_currency, dispatcherAddress, feesToPayInWei);\\n  }\\n\\n  /**\\n   * @dev Clears reservation at `_i` index on `_tokenId` token.\\n   */\\n  function _clearReservation(uint256 _i, uint256 _tokenId) internal {\\n    delete _reservations[_tokenId].startTimes[_i];\\n    delete _reservations[_tokenId].feesAccruedInWei[_i];\\n    delete _reservations[_tokenId].payees[_i];\\n    delete _reservations[_tokenId].reservees[_i];\\n    delete _reservations[_tokenId].terms[_i];\\n  }\\n\\n  /**\\n   * @dev Pays out `_amountInWei` amount in wei of `_currency` currency to `_recipient` recipient.\\n   */\\n  function _pay(address _currency, address _recipient, uint256 _amountInWei) internal returns (bool success, uint256 paidInWei){\\n    if(_currency == address(0)){//ETH is the currency\\n      (success,) = _recipient.call{value: _amountInWei}(\\\"\\\");\\n    }else{//currency is an ERC20\\n      try IERC20(_currency).transfer(_recipient, _amountInWei) returns (bool transferred){\\n        success = transferred;\\n      } catch {}\\n    }\\n    paidInWei = _amountInWei;\\n  }\\n\\n  /**\\n   * @dev See {IERC721DispatcherReservable-isReserved}.\\n   */\\n  function isReserved(uint256 _startTime, uint256 _endTime, uint256 _tokenId) public view virtual override returns (bool reserved, uint256 nextIndex) {\\n    return DispatchLib.isReserved(_endTime, _reservations[_tokenId].startTimes, _reservations[_tokenId].terms);\\n  }\\n\\n  /**\\n   * @dev Inserts new reservation into the _reservations[_tokenId] mapping.\\n   */\\n  function _insertReservation(TermBase memory _termBase, uint256 _startTime, uint256 insertHere, uint256 _tokenId, bytes memory _terms) internal returns (bool success){\\n    uint256 totalReservations = _reservations[_tokenId].reservees.length;\\n    //add to end if inserting after last reservation\\n    if(totalReservations == insertHere){\\n      _reservations[_tokenId].payees.push(_termBase.payee);\\n      _reservations[_tokenId].reservees.push(_termBase.reservee);\\n      _reservations[_tokenId].startTimes.push(_startTime);\\n      _reservations[_tokenId].terms.push(_terms);\\n      _reservations[_tokenId].feesAccruedInWei.push(_termBase.fee);\\n      return true;\\n    }\\n\\n    //make room for new reservation\\n    for(uint256 i = insertHere; i < totalReservations+1; i++){\\n      _reservations[_tokenId].payees[i+1] = _reservations[_tokenId].payees[i];\\n      _reservations[_tokenId].reservees[i+1] = _reservations[_tokenId].reservees[i];\\n      _reservations[_tokenId].startTimes[i+1] = _reservations[_tokenId].startTimes[i];\\n      _reservations[_tokenId].terms[i+1] = _reservations[_tokenId].terms[i];\\n      _reservations[_tokenId].feesAccruedInWei[i+1] = _reservations[_tokenId].feesAccruedInWei[i];\\n    }\\n\\n    //insert new reservation\\n    _reservations[_tokenId].payees[insertHere] = _termBase.payee;\\n    _reservations[_tokenId].reservees[insertHere] = _termBase.reservee;\\n    _reservations[_tokenId].startTimes[insertHere] = _startTime;\\n    _reservations[_tokenId].terms[insertHere] = _terms;\\n    _reservations[_tokenId].feesAccruedInWei[insertHere] = _termBase.fee;\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC721DispatcherReservable-getReservations}.\\n   */\\n  function getReservations(uint256 _tokenId) external view virtual override returns (address[] memory reservees, uint256[] memory startTimes, bytes[] memory terms) {\\n    uint256 length = _reservations[_tokenId].reservees.length - _reservations[_tokenId].startingIndex;\\n    reservees = new address[](length);\\n    startTimes = new uint256[](length);\\n    terms = new bytes[](length);\\n\\n    for(uint256 i = _reservations[_tokenId].startingIndex; i < _reservations[_tokenId].reservees.length; i++){\\n      uint256 j = i - _reservations[_tokenId].startingIndex;\\n      reservees[j] = _reservations[_tokenId].reservees[i];\\n      startTimes[j] = _reservations[_tokenId].startTimes[i];\\n      terms[j] = _reservations[_tokenId].terms[i];\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IERC721DispatcherReservable-reservedFor}.\\n   */\\n  function reservedFor(uint256 _time, uint256 _tokenId) public view virtual override returns (address reservee, uint256 startTime, uint256 endTime, uint256 termsIndex) {\\n    bool reserved;\\n    (reserved, termsIndex, endTime) = DispatchLib.reservedFor(_time, _reservations[_tokenId].reservees, _reservations[_tokenId].startTimes, _reservations[_tokenId].terms);\\n\\n    if(reserved){\\n      reservee = _reservations[_tokenId].reservees[termsIndex];\\n      startTime = _reservations[_tokenId].startTimes[termsIndex];\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IERC721DispatcherReservable-validateReservation}.\\n   */\\n  function validateReservation(address _reservee, uint256 _tokenId, bytes memory _requestedTerms) external view returns (bool valid) {\\n    (address reservee,,, uint256 termsIndex) = reservedFor(block.timestamp, _tokenId);\\n    if(reservee != _reservee){\\n      return false;\\n    }\\n\\n    //confirm terms match the reservation terms\\n    if(DispatchLib.termsApproved(_reservations[_tokenId].terms[termsIndex], _requestedTerms)) {\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IERC721DispatcherReservable-purgeExpired}.\\n   */\\n  function purgeExpired(uint256 _tokenId) public returns (uint256 reservationsRemaining){\\n    uint256 startingIndex = _reservations[_tokenId].startingIndex;\\n    for(uint256 i = _reservations[_tokenId].startingIndex; i < _reservations[_tokenId].reservees.length; i++){\\n      uint256 endTime = _reservations[_tokenId].startTimes[i] + DispatchLib.getDuration(_reservations[_tokenId].terms[i]);\\n      if(block.timestamp > endTime){//reservation at index i has expired\\n        startingIndex = i+1;\\n      }else{\\n        break;\\n      }\\n    }\\n    _reservations[_tokenId].startingIndex = startingIndex;\\n\\n    uint256 currentTotal = _reservations[_tokenId].reservees.length - startingIndex;\\n    return _reservations[_tokenId].maxReservations - currentTotal;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/IReservationBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n////   //////////          //////////////        /////////////////          //////////////\\n////          /////      /////        /////      ////          /////      /////        /////\\n////            ///     ////            ////     ////            ////    ////            ////\\n////           ////     ////            ////     ////            ////    ////            ////\\n//////////////////      ////            ////     ////            ////    ////            ////\\n////                    ////     ///    ////     ////            ////    ////     ///    ////\\n////      ////          ////     /////  ////     ////            ////    ////     /////  ////\\n////        ////        ////       /////////     ////            ////    ////       /////////\\n////         /////       /////       //////      ////          /////      /////       //////\\n////           /////       ////////    ////      ////   //////////          ////////    ////\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IReservationBook\\n * @dev Interface for ReservationBook contract for ERC721Dispatcher.\\n * @author 0xAnimist (kanon.art)\\n */\\ninterface IReservationBook {\\n  /**\\n   * @dev Emitted when `tokenId` token is reserved for `reservee` reservee by `payee` payee.\\n   */\\n  event Reserved(address indexed payee, address indexed reservee, uint256 startTime, uint256 indexed tokenId, bytes terms, bytes data);\\n\\n  /**\\n   *  @dev Reserves `ERC721Delegable` `ERC721DelegableTokenId` token for `_reservee` beginning at `_startTime` with\\n   * `_terms` terms.\\n   *\\n   *  Requirements:\\n   *\\n   * - ERC721Delegable token must be deposited.\\n   * - terms must be acceptable\\n   * - token must not already be reserved in this time window (NOTE: duration described in terms)\\n   */\\n  function reserve(address _reservee, address _ERC721DelegableContract, uint256 _ERC721DelegableTokenId, uint256 _startTime, bytes memory _requestTerms, bytes calldata _data) external payable returns (bool success);\\n\\n  /**\\n   *  @dev Returns all reservations for `_tokenId` token.\\n   *\\n   *  Requirements:\\n   *\\n   * - token must exist.\\n   */\\n  function getReservations(uint256 _tokenId) external view returns (address[] memory reservees, uint256[] memory startTimes, bytes[] memory terms);\\n\\n  /**\\n   *  @dev Returns `startTime` start time, `terms` terms, and address of\\n   * `reservee` if `_tokenId` token is reserved at `_time` time.\\n   *\\n   *  Requirements:\\n   *\\n   * - token must exist.\\n   */\\n  function reservedFor(uint256 _time, uint256 _tokenId) external view returns (address reservee, uint256 startTime, uint256 endTime, uint256 index);\\n\\n  /**\\n   *  @dev Returns true if `_tokenId` token is reserved between `_startTime` and `_endTime`, as well as the index of the next reservation.\\n   *\\n   *  Requirements:\\n   *\\n   * - token must exist.\\n   */\\n  function isReserved(uint256 _startTime, uint256 _endTime, uint256 _tokenId) external view returns (bool reserved, uint256 nextIndex);\\n\\n  /**\\n   *  @dev Returns true if `_requestedTerms` reservation terms requested by `_reservee` reservee on `_tokenId` token are valid.\\n   */\\n  function validateReservation(address _reservee, uint256 _tokenId, bytes memory _requestedTerms) external view returns (bool valid);\\n\\n  /**\\n   *  @dev Sets the default maxiumum reservations a token can have at a time.\\n   */\\n  function setDefaultMaxReservations(uint256 _defaultMaxReservations) external;\\n\\n  /**\\n   *  @dev Sets the maxiumum reservations a token can have at a time.\\n   */\\n  function setMaxReservations(uint256[] memory _maxReservations, uint256[] memory _tokenIds) external;\\n\\n  /**\\n   *  @dev Gets the maxiumum reservations a token can have at a time.\\n   */\\n  function getMaxReservations(uint256 _tokenId) external view returns (uint256 maxReservations);\\n\\n  /**\\n   *  @dev Withdraws fees accrued for `_tokenId` token in `_currency` currency (where address(0) == ETH) to the caller.\\n   */\\n  function claimFeesAccrued(address _currency, uint256 _tokenId) external returns (bool success, uint256 feesClaimedInWei);\\n\\n  /**\\n   *  @dev Refunds prepaid fees for all reservations with end times in the future.\\n   */\\n  function refundFutureReservations(address _currency, uint256 _tokenId) external;\\n\\n  /**\\n   * @dev Removes expired reservations.\\n   */\\n  function purgeExpired(uint256 _tokenId) external returns (uint256 reservationsRemaining);\\n}\\n\"\r\n    },\r\n    \"/contracts/IERC721Dispatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title IERC721Dispatcher\\n * @dev Interface for an ERC721Delegable token dispatcher.\\n * @author 0xAnimist (kanon.art)\\n */\\ninterface IERC721Dispatcher {\\n\\n  /**\\n   * @dev Emitted when a delegate token has been deposited.\\n   */\\n  event Deposited(address indexed sourceTokenContract, uint256 indexed sourceTokenId, uint256 tokenId, address depositedBy, bytes[] terms, bytes data);\\n\\n  /**\\n   * @dev Emitted when a delegate token has been withdrawn.\\n   */\\n  event Withdrawn(address indexed sourceTokenContract, uint256 indexed sourceTokenId, uint256 tokenId, address withdrawnBy, bytes data);\\n\\n  /**\\n   * @dev Emitted when an approval request has been granted.\\n   */\\n  event ApprovalGranted(address indexed sourceTokenContract, uint256 indexed sourceTokenId, address indexed to, address payee, bytes terms, bytes data);\\n\\n  /**\\n   * @dev Emitted when terms are set for a token.\\n   */\\n  event TermsSet(address indexed owner, bytes[] terms, uint256 tokenId, bytes data);\\n\\n  /**\\n   * @dev Deposits an array of delegate tokens of their corresponding delegable Tokens\\n   * in exchange for sDQ receipt tokens.\\n   *\\n   * Requirements:\\n   *\\n   * - must be the owner of the delegate token\\n   *\\n   * Emits a {Deposited} event.\\n   */\\n  function deposit(address[] memory _ERC721DelegableContract, uint256[] memory _ERC721DelegableTokenId, bytes[][] memory _terms, bytes calldata _data) external returns (uint256[] memory tokenIds);\\n\\n  /**\\n   * @dev Withdraws a staked delegate token in exchange for `_tokenId` sDQ token receipt.\\n   *\\n   * Emits a {Withdrawn} event.\\n   */\\n  function withdraw(uint256 _tokenId, bytes calldata _data) external;\\n\\n  /**\\n   * @dev Sets the terms by which an approval request will be granted.\\n   *\\n   * Emits a {TermsSet} event.\\n   */\\n  function setTerms(bytes[] memory _terms, uint256 _tokenId, bytes calldata _data) external;\\n\\n  /**\\n   * @dev Gets the terms by which an approval request will be granted.\\n   */\\n  function getTerms(uint256 _tokenId) external view returns (bytes[] memory terms);\\n\\n  /**\\n   * @dev Gets array of methodIds served by the dispatcher.\\n   */\\n  function getServedMethodIds() external view returns (bytes4[] memory methodIds);\\n\\n  /**\\n   * @dev Gets timestamp of next availability for `_tokenId` token.\\n   */\\n  function getNextAvailable(uint256 _tokenId) external view returns (uint256 availableStartingTime);\\n\\n  /**\\n   * @dev Gets source ERC721Delegable token for a given `_tokenId` token.\\n   */\\n  function getDepositByTokenId(uint256 _tokenId) external view returns (address contractAddress, uint256 tokenId);\\n\\n  /**\\n   * @dev Gets tokenId` token ID for a given source ERC721Delegable token.\\n   */\\n  function getTokenIdByDeposit(address _ERC721DelegableContract, uint256 _ERC721DelegableTokenId) external view returns (bool success, uint256 tokenId);\\n\\n  /**\\n   * @dev Requests dispatcher call approveByDelegate() on the source ERC721Delegable\\n   * token corresponding to `_tokenId` token for `_to` address with `_terms` terms.\\n   */\\n  function requestApproval(address _payee, address _to, address _ERC721DelegableContract, uint256 _ERC721DelegableTokenId, bytes memory _terms, bytes calldata _data) external payable;\\n\\n  /**\\n   * @dev Withdraws fees accrued to all eligible recipients for `_tokenId` token without withdrawing the token itself.\\n   *\\n   * Requirements:\\n   *\\n   * - token must exist.\\n   *\\n   */\\n  function claimFeesAccrued(uint256 _tokenId) external returns (bool success, address currency);\\n}\\n\"\r\n    },\r\n    \"/contracts/DispatchLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n////   //////////          //////////////        /////////////////          //////////////\\n////          /////      /////        /////      ////          /////      /////        /////\\n////            ///     ////            ////     ////            ////    ////            ////\\n////           ////     ////            ////     ////            ////    ////            ////\\n//////////////////      ////            ////     ////            ////    ////            ////\\n////                    ////     ///    ////     ////            ////    ////     ///    ////\\n////      ////          ////     /////  ////     ////            ////    ////     /////  ////\\n////        ////        ////       /////////     ////            ////    ////       /////////\\n////         /////       /////       //////      ////          /////      /////       //////\\n////           /////       ////////    ////      ////   //////////          ////////    ////\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Dispatcher.sol\\\";\\nimport \\\"./BytesLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/// @title DispatchLib\\n/// @notice Utility library for ERC721Dispatcher\\n/// @author 0xAnimist (kanon.art)\\nlibrary DispatchLib {\\n\\n  bytes4 public constant _METHOD_ID_BORROW = bytes4(keccak256(\\\"borrow(address,uint256,uint256)\\\"));//(currency, feeInWeiPerSec, maxDurationInSecs)\\n\\n  bytes4 public constant _METHOD_ID_BORROW_RESERVED = bytes4(keccak256(\\\"borrowReserved(address,uint256,uint256)\\\"));//(currency, feeInWeiPerSec, maxDurationInSecs)\\n\\n  bytes4 public constant _METHOD_ID_BORROW_WITH_721_PASS = bytes4(keccak256(\\\"borrowWith721Pass(address,uint256,uint256,address)\\\"));//(currency, feeInWeiPerSec, maxDurationInSecs, ERC721Contract)\\n\\n  bytes4 public constant _METHOD_ID_BORROW_RESERVED_WITH_721_PASS = bytes4(keccak256(\\\"borrowReservedWith721Pass(address,uint256,uint256,address)\\\"));//(currency, feeInWeiPerSec, maxDurationInSecs, ERC721Contract)\\n\\n  bytes4 public constant _METHOD_ID_BORROW_WITH_1155_PASS = bytes4(keccak256(\\\"borrowWith1155Pass(address,uint256,uint256,address,uint256)\\\"));//(currency, feeInWeiPerSec, maxDurationInSecs, ERC1155Contract, ERC1155TokenId)\\n\\n  bytes4 public constant _METHOD_ID_BORROW_RESERVED_WITH_1155_PASS = bytes4(keccak256(\\\"borrowReservedWith1155Pass(address,uint256,uint256,address,uint256)\\\"));//(currency, feeInWeiPerSec, maxDurationInSecs, ERC1155Contract, ERC1155TokenId)\\n\\n  function validateMethodId(bytes4 methodId) public pure returns (bool valid) {\\n    if(methodId == _METHOD_ID_BORROW || methodId == _METHOD_ID_BORROW_RESERVED || methodId == _METHOD_ID_BORROW_WITH_721_PASS || methodId == _METHOD_ID_BORROW_RESERVED_WITH_721_PASS || methodId == _METHOD_ID_BORROW_WITH_1155_PASS || methodId == _METHOD_ID_BORROW_RESERVED_WITH_1155_PASS){\\n      valid = true;\\n    }\\n  }\\n\\n  function validateRequestFormat(bytes memory _term, bytes4[] memory _servedMethodIds) public pure returns (bool valid) {\\n    bytes4 methodId = bytes4(_term);\\n    for(uint256 i = 0; i < _servedMethodIds.length; i++){\\n      if(_servedMethodIds[i] == methodId){//methodId is served\\n        if(methodId == _METHOD_ID_BORROW || methodId == _METHOD_ID_BORROW_RESERVED){\\n          return _term.length == 88;\\n        }else if(methodId == _METHOD_ID_BORROW_WITH_721_PASS || methodId == _METHOD_ID_BORROW_RESERVED_WITH_721_PASS){\\n          return _term.length == 108;\\n        }else if(methodId == _METHOD_ID_BORROW_WITH_1155_PASS || methodId == _METHOD_ID_BORROW_RESERVED_WITH_1155_PASS){\\n          return _term.length == 140;\\n        }\\n      }\\n    }\\n  }\\n\\n  function isReserveRequest(bytes4 methodId) public pure returns (bool reserveRequest) {\\n    if(methodId == _METHOD_ID_BORROW_RESERVED || methodId == _METHOD_ID_BORROW_RESERVED_WITH_721_PASS || methodId == _METHOD_ID_BORROW_RESERVED_WITH_1155_PASS){\\n      reserveRequest = true;\\n    }\\n  }\\n\\n  function getDuration(bytes memory _terms) public pure returns (uint256 duration) {\\n    if(validateMethodId(bytes4(_terms))){\\n      return BytesLib.toUint256(_terms, 56);\\n    }\\n  }\\n\\n  function isReservedMethodId(bytes4 _methodId) public pure returns (bool reservedMethodId) {\\n    if(_methodId == _METHOD_ID_BORROW_RESERVED || _methodId == _METHOD_ID_BORROW_RESERVED_WITH_721_PASS || _methodId == _METHOD_ID_BORROW_RESERVED_WITH_1155_PASS){\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n\\n  function isCurrencyDiff(bytes memory _newTerms, bytes memory _oldTerms) public pure returns (bool diff) {\\n    diff = BytesLib.toAddress(_newTerms, 4) != BytesLib.toAddress(_oldTerms, 4);\\n  }\\n\\n  function getBorrowTerms(bytes[] memory _terms) public pure returns (bool success, address currency, uint256 feeInWeiPerSec, uint256 maxDurationInSecs){\\n    (bool borrowTermsSet, uint256 i) = getTermIndexByMethodId(_terms, _METHOD_ID_BORROW);\\n    if(borrowTermsSet){\\n      (currency, feeInWeiPerSec, maxDurationInSecs) = unpackBorrowTerms(_terms[i]);\\n      success = true;\\n    }\\n  }\\n\\n  function getTermIndexByMethodId(bytes[] memory _terms, bytes4 _type) public pure returns (bool success, uint256 index) {\\n    for(uint256 i = 0; i < _terms.length; i++){\\n      if(bytes4(_terms[i]) == _type){\\n        return (true, i);\\n      }\\n    }\\n  }\\n\\n  function unpackMethodId(bytes memory _term) public pure returns (bytes4 methodId) {\\n    require(_term.length >= 4, \\\"no methodId\\\");\\n    return bytes4(_term);\\n  }\\n\\n  function requiresPass(bytes memory _term) public pure returns (bool required, bool is721) {\\n    bytes4 methodId = unpackMethodId(_term);\\n    if(methodId == _METHOD_ID_BORROW_WITH_721_PASS || methodId == _METHOD_ID_BORROW_RESERVED_WITH_721_PASS){\\n      required = true;\\n      is721 = true;\\n    }else if(methodId == _METHOD_ID_BORROW_WITH_1155_PASS || methodId == _METHOD_ID_BORROW_RESERVED_WITH_1155_PASS){\\n      required = true;\\n      is721 = false;\\n    }\\n  }\\n\\n  function termsApproved(bytes memory _approvedTerms, bytes memory _requestedTerms) public pure returns (bool approved) {\\n    return BytesLib.equal(_approvedTerms, _requestedTerms);\\n  }\\n\\n  function validateTerms(bool settableCurrency, address defaultCurrency, bytes[] memory _terms, bytes4[] memory _servedMethodIds) public pure returns (bool valid) {\\n    address firstCurrency = BytesLib.toAddress(_terms[0], 4);\\n\\n    for(uint256 i = 0; i < _terms.length; i++){\\n      //determines if it served and if the terms well-formatted\\n      validateRequestFormat(_terms[i], _servedMethodIds);\\n\\n      //validate currencies\\n      address currency = BytesLib.toAddress(_terms[i], 4);\\n      if((currency != firstCurrency && settableCurrency && i > 0) || (currency != defaultCurrency && !settableCurrency)){\\n        return false;//cannot have multiple currencies\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  function unpackPass(bytes memory _term) public pure returns (bool passRequired, bool is721, bool hasId, address passContract, uint256 passId) {\\n    (passRequired, is721) = requiresPass(_term);\\n    if(passRequired){\\n      passContract = unpackPassContractTerms(_term);\\n      if(!is721){\\n        passId = unpackPassIdTerms(_term);\\n        hasId = true;\\n      }\\n    }\\n  }\\n\\n  function unpackPassIdTerms(bytes memory _term) public pure returns (uint256 passId) {\\n    return BytesLib.toUint256(_term, 108);\\n  }\\n\\n  function unpackPassContractTerms(bytes memory _term) public pure returns (address passContract) {\\n    return BytesLib.toAddress(_term, 88);\\n  }\\n\\n  function unpackBorrowTerms(bytes memory _term) public pure returns (address currency, uint256 feeInWeiPerSec, uint256 maxDurationInSecs) {\\n    return (BytesLib.toAddress(_term, 4), BytesLib.toUint256(_term, 24), BytesLib.toUint256(_term, 56));\\n  }\\n\\n  function validateReservation(address _from, bytes memory _requestTerms, bytes[] memory _allApprovedTerms) public pure returns (bool valid, address currency, uint256 fee, uint256 durationInSecs){\\n\\n    (bool validTerms, bytes4 methodId, address currency_, uint256 fee_, uint256 durationInSecs_) = validateRequestedBorrowTerms(_requestTerms, _allApprovedTerms);\\n\\n    bool isReservedMethod = isReservedMethodId(methodId);\\n\\n    bool validPass = true;//validatePass(_from, methodId, _requestTerms, _allApprovedTerms);\\n\\n    return (true == validPass == validTerms == isReservedMethod, currency_, fee_, durationInSecs_);\\n  }\\n\\n  function validateRequest(address _payee, bytes memory _requestedTerms, bytes[] memory _allApprovedTerms) public view returns (bool valid, bytes4 methodId, address currency, uint256 fee, uint256 durationInSecs) {\\n    //paid is true if prepaid (eg as with reservation)\\n    bool validTerms;\\n    (validTerms, methodId, currency, fee, durationInSecs) = validateRequestedBorrowTerms(_requestedTerms, _allApprovedTerms);\\n\\n    bool validPass = true;\\n\\n    if(methodId == _METHOD_ID_BORROW_WITH_721_PASS || methodId == _METHOD_ID_BORROW_WITH_1155_PASS){\\n      validPass = validatePass(_payee, methodId, _requestedTerms, _allApprovedTerms);\\n    }\\n\\n    valid = (true == validTerms == validPass);\\n  }\\n\\n  function isApprovedPassContract(address _requestedPassContract, bytes memory _requestedTerms, bytes[] memory _allApprovedTerms) public pure returns (bool approved) {\\n    for(uint256 i = 0; i < _allApprovedTerms.length; i++){\\n      if(bytes4(_allApprovedTerms[i]) == bytes4(_requestedTerms)){\\n        if(_requestedPassContract == unpackPassContractTerms(_allApprovedTerms[i])){\\n          return true;\\n        }\\n      }\\n    }\\n  }\\n\\n  function isApprovedPassId(uint256 _requestedPassId, bytes memory _requestedTerms, bytes[] memory _allApprovedTerms) public pure returns (bool approved) {\\n    for(uint256 i = 0; i < _allApprovedTerms.length; i++){\\n      if(bytes4(_allApprovedTerms[i]) == bytes4(_requestedTerms)){\\n        if(_requestedPassId == unpackPassIdTerms(_allApprovedTerms[i])){\\n          return true;\\n        }\\n      }\\n    }\\n  }\\n\\n  function validatePass(address _passHolder, bytes4 _methodId, bytes memory _requestTerms, bytes[] memory _allApprovedTerms) public view returns (bool valid){\\n    address requestedPassContract = unpackPassContractTerms(_requestTerms);\\n\\n    if(!isApprovedPassContract(requestedPassContract, _requestTerms, _allApprovedTerms)){\\n      return false;\\n    }\\n\\n    if(_methodId == _METHOD_ID_BORROW_RESERVED_WITH_721_PASS || _methodId == _METHOD_ID_BORROW_WITH_721_PASS){\\n      if(IERC721(requestedPassContract).balanceOf(_passHolder) < 1){\\n        return false;\\n      }\\n    }else if(_methodId == _METHOD_ID_BORROW_RESERVED_WITH_1155_PASS || _methodId == _METHOD_ID_BORROW_WITH_1155_PASS){\\n      uint256 requestedPassId = unpackPassIdTerms(_requestTerms);\\n\\n      if(!isApprovedPassId(requestedPassId, _requestTerms, _allApprovedTerms)){\\n        return false;\\n      }\\n\\n      if(IERC1155(requestedPassContract).balanceOf(_passHolder, requestedPassId) < 1){\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  function validateRequestedBorrowTerms(bytes memory _requestedTerms, bytes[] memory _allApprovedTerms) public pure returns (bool valid, bytes4 methodId, address currency, uint256 fee, uint256 durationInSecs) {\\n    methodId = bytes4(_requestedTerms);\\n\\n    if(methodId == _METHOD_ID_BORROW || methodId == _METHOD_ID_BORROW_RESERVED || methodId == _METHOD_ID_BORROW_WITH_721_PASS || methodId == _METHOD_ID_BORROW_WITH_1155_PASS){\\n\\n      for(uint256 i = 0; i < _allApprovedTerms.length; i++){\\n        if(bytes4(_allApprovedTerms[i]) == methodId){\\n          (address approvedCurrency, uint256 approvedFeeInWeiPerSec, uint256 approvedMaxDurationInSecs) = unpackBorrowTerms(_allApprovedTerms[i]);\\n\\n          (address requestedCurrency, uint requestedTotalFeeInWei, uint256 requestedDurationInSecs) = unpackBorrowTerms(_requestedTerms);\\n\\n          require(requestedCurrency == approvedCurrency, \\\"RequestLib: request currency invalid\\\");\\n\\n          fee = requestedDurationInSecs * approvedFeeInWeiPerSec;\\n          require(requestedTotalFeeInWei >= fee, \\\"RequestLib: requested fee insufficient for requested duration\\\");\\n\\n          require(requestedDurationInSecs <= approvedMaxDurationInSecs, \\\"RequestLib: requested duration exceeds max\\\");\\n\\n          valid = true;\\n          currency = approvedCurrency;\\n          durationInSecs = requestedDurationInSecs;\\n          break;\\n        }\\n      }\\n    //}else if(request == _METHOD_ID_BORROWTO){\\n\\n    //}\\n    }\\n  }\\n\\n  function isPaymentOutstanding(bytes memory _requestedTerms) public pure returns (bool outstanding) {\\n    bytes4 methodId = bytes4(_requestedTerms);\\n    if(methodId == _METHOD_ID_BORROW || methodId == _METHOD_ID_BORROW_WITH_721_PASS || methodId == _METHOD_ID_BORROW_WITH_1155_PASS) {\\n      return true;\\n    }\\n  }\\n\\n  /// @dev Checks if a time window is already reserved in an\\n  /// array of reservations ordered by ascending start times\\n  function isReserved(uint256 _endTime, uint256[] memory _startTimes, bytes[] memory _terms) public pure returns (bool reserved, uint256 nextIndex) {\\n    uint256[] memory endTimes = new uint256[](_startTimes.length);\\n\\n    for(uint256 i = 0; i < _startTimes.length; i++){\\n      endTimes[i] = _startTimes[i] + getDuration(_terms[i]) -1;\\n    }\\n\\n    //insert reservation\\n    for(uint256 i = 0; i <= _startTimes.length; i++){\\n      nextIndex = i;\\n      if(i == _startTimes.length){\\n        return (false, i);\\n      }\\n\\n      if(endTimes[i] > _endTime){\\n        if(_startTimes[i] > _endTime){\\n          break;\\n        }else{\\n          return (true, 0);\\n        }\\n      }\\n    }\\n    reserved = false;\\n  }\\n\\n  function reservedFor(uint256 _time, address[] memory _reservees, uint256[] memory _startTimes, bytes[] memory _terms) public pure returns (bool reserved, uint256 index, uint256 endTime) {\\n    for(uint256 i = 0; i < _startTimes.length; i++){\\n      if(_startTimes[i] <= _time){\\n        endTime = _startTimes[i] + getDuration(_terms[i]);\\n        if(_time <= endTime){\\n          reserved = true;\\n          index = i;\\n        }\\n      }\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"/contracts/DispatchLib.sol\": {\r\n        \"DispatchLib\": \"0xD267b06d261F4847DB40cCd7DC8aC8f5CBFDC0B3\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcherAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reservee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Reserved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFeesAccrued\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feesClaimedInWei\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispatcherAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMaxReservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxReservations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getReservations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"reservees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"terms\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isReserved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"reserved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nextIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purgeExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reservationsRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"refundFutureReservations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reservee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_RQContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_RQTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_requestTerms\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reservedFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reservee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termsIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultMaxReservations\",\"type\":\"uint256\"}],\"name\":\"setDefaultMaxReservations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_maxReservations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"setMaxReservations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reservee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_requestedTerms\",\"type\":\"bytes\"}],\"name\":\"validateReservation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReservationBook", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000de77909cbe946f9081222fe51185abc6360d317a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}