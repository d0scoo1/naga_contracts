{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/IUniswapV2Factory.sol\r\n\r\n\r\n\r\npragma solidity 0.8.13;\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n}\r\n\r\n\r\n// File: contracts/utils/SafeCast.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n\r\n * checks.\r\n\r\n *\r\n\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n\r\n * reverting the transaction when such an operation overflows.\r\n\r\n *\r\n\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n\r\n * class of bugs, so it's recommended to use it always.\r\n\r\n *\r\n\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n\r\n * all math on `uint256` and `int256` and then downcasting.\r\n\r\n */\r\n\r\nlibrary SafeCast {\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n\r\n     * overflow (when the input is greater than largest uint224).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `uint224` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 224 bits\r\n\r\n     */\r\n\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n\r\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\r\n\r\n        return uint224(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n\r\n     * overflow (when the input is greater than largest uint128).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `uint128` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 128 bits\r\n\r\n     */\r\n\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n\r\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n\r\n        return uint128(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n\r\n     * overflow (when the input is greater than largest uint96).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `uint96` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 96 bits\r\n\r\n     */\r\n\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n\r\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\r\n\r\n        return uint96(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n\r\n     * overflow (when the input is greater than largest uint64).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `uint64` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 64 bits\r\n\r\n     */\r\n\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n\r\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n\r\n        return uint64(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n\r\n     * overflow (when the input is greater than largest uint32).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `uint32` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 32 bits\r\n\r\n     */\r\n\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n\r\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n\r\n        return uint32(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n\r\n     * overflow (when the input is greater than largest uint16).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `uint16` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 16 bits\r\n\r\n     */\r\n\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n\r\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n\r\n        return uint16(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n\r\n     * overflow (when the input is greater than largest uint8).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `uint8` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 8 bits.\r\n\r\n     */\r\n\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n\r\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n\r\n        return uint8(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must be greater than or equal to 0.\r\n\r\n     */\r\n\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n\r\n        return uint256(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n\r\n     * overflow (when the input is less than smallest int128 or\r\n\r\n     * greater than largest int128).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `int128` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 128 bits\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n\r\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n\r\n        return int128(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n\r\n     * overflow (when the input is less than smallest int64 or\r\n\r\n     * greater than largest int64).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `int64` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 64 bits\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n\r\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n\r\n        return int64(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n\r\n     * overflow (when the input is less than smallest int32 or\r\n\r\n     * greater than largest int32).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `int32` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 32 bits\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n\r\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n\r\n        return int32(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n\r\n     * overflow (when the input is less than smallest int16 or\r\n\r\n     * greater than largest int16).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `int16` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 16 bits\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n\r\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n\r\n        return int16(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n\r\n     * overflow (when the input is less than smallest int8 or\r\n\r\n     * greater than largest int8).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `int8` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must fit into 8 bits.\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n\r\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n\r\n        return int8(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - input must be less than or equal to maxInt256.\r\n\r\n     */\r\n\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n\r\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n\r\n        return int256(value);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/IVotes.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\r\n\r\n *\r\n\r\n * _Available since v4.5._\r\n\r\n */\r\n\r\ninterface IVotes {\r\n\r\n    /**\r\n\r\n     * @dev Emitted when an account changes their delegate.\r\n\r\n     */\r\n\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\r\n\r\n     */\r\n\r\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the current amount of votes that `account` has.\r\n\r\n     */\r\n\r\n    function getVotes(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\r\n\r\n     */\r\n\r\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\r\n\r\n     *\r\n\r\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\r\n\r\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\r\n\r\n     * vote.\r\n\r\n     */\r\n\r\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the delegate that `account` has chosen.\r\n\r\n     */\r\n\r\n    function delegates(address account) external view returns (address);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Delegates votes from the sender to `delegatee`.\r\n\r\n     */\r\n\r\n    function delegate(address delegatee) external;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Delegates votes from signer to `delegatee`.\r\n\r\n     */\r\n\r\n    function delegateBySig(\r\n\r\n        address delegatee,\r\n\r\n        uint256 nonce,\r\n\r\n        uint256 expiry,\r\n\r\n        uint8 v,\r\n\r\n        bytes32 r,\r\n\r\n        bytes32 s\r\n\r\n    ) external;\r\n\r\n}\r\n\r\n\r\n// File: contracts/utils/Strings.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev String operations.\r\n\r\n */\r\n\r\nlibrary Strings {\r\n\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n\r\n     */\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n\r\n\r\n        if (value == 0) {\r\n\r\n            return \"0\";\r\n\r\n        }\r\n\r\n        uint256 temp = value;\r\n\r\n        uint256 digits;\r\n\r\n        while (temp != 0) {\r\n\r\n            digits++;\r\n\r\n            temp /= 10;\r\n\r\n        }\r\n\r\n        bytes memory buffer = new bytes(digits);\r\n\r\n        while (value != 0) {\r\n\r\n            digits -= 1;\r\n\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\r\n            value /= 10;\r\n\r\n        }\r\n\r\n        return string(buffer);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n\r\n     */\r\n\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n\r\n        if (value == 0) {\r\n\r\n            return \"0x00\";\r\n\r\n        }\r\n\r\n        uint256 temp = value;\r\n\r\n        uint256 length = 0;\r\n\r\n        while (temp != 0) {\r\n\r\n            length++;\r\n\r\n            temp >>= 8;\r\n\r\n        }\r\n\r\n        return toHexString(value, length);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n\r\n     */\r\n\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n\r\n        buffer[0] = \"0\";\r\n\r\n        buffer[1] = \"x\";\r\n\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n\r\n            value >>= 4;\r\n\r\n        }\r\n\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n\r\n        return string(buffer);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/utils/ECDSA.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n\r\n *\r\n\r\n * These functions can be used to verify that a message was signed by the holder\r\n\r\n * of the private keys of a given address.\r\n\r\n */\r\n\r\nlibrary ECDSA {\r\n\r\n    enum RecoverError {\r\n\r\n        NoError,\r\n\r\n        InvalidSignature,\r\n\r\n        InvalidSignatureLength,\r\n\r\n        InvalidSignatureS,\r\n\r\n        InvalidSignatureV\r\n\r\n    }\r\n\r\n\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n\r\n        if (error == RecoverError.NoError) {\r\n\r\n            return; // no error: do nothing\r\n\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n\r\n            revert(\"ECDSA: invalid signature\");\r\n\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n\r\n            revert(\"ECDSA: invalid signature length\");\r\n\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n\r\n     *\r\n\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n\r\n     * half order, and the `v` value to be either 27 or 28.\r\n\r\n     *\r\n\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n\r\n     * verification to be secure: it is possible to craft signatures that\r\n\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n\r\n     *\r\n\r\n     * Documentation for signature generation:\r\n\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n\r\n     *\r\n\r\n     * _Available since v4.3._\r\n\r\n     */\r\n\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n\r\n        // Check the signature length\r\n\r\n        // - case 65: r,s,v signature (standard)\r\n\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n\r\n        if (signature.length == 65) {\r\n\r\n            bytes32 r;\r\n\r\n            bytes32 s;\r\n\r\n            uint8 v;\r\n\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n\r\n            // currently is to use assembly.\r\n\r\n            assembly {\r\n\r\n                r := mload(add(signature, 0x20))\r\n\r\n                s := mload(add(signature, 0x40))\r\n\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n\r\n            }\r\n\r\n            return tryRecover(hash, v, r, s);\r\n\r\n        } else if (signature.length == 64) {\r\n\r\n            bytes32 r;\r\n\r\n            bytes32 vs;\r\n\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n\r\n            // currently is to use assembly.\r\n\r\n            assembly {\r\n\r\n                r := mload(add(signature, 0x20))\r\n\r\n                vs := mload(add(signature, 0x40))\r\n\r\n            }\r\n\r\n            return tryRecover(hash, r, vs);\r\n\r\n        } else {\r\n\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n\r\n     * `signature`. This address can then be used for verification purposes.\r\n\r\n     *\r\n\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n\r\n     * half order, and the `v` value to be either 27 or 28.\r\n\r\n     *\r\n\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n\r\n     * verification to be secure: it is possible to craft signatures that\r\n\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n\r\n     */\r\n\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n\r\n        _throwError(error);\r\n\r\n        return recovered;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n\r\n     *\r\n\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n\r\n     *\r\n\r\n     * _Available since v4.3._\r\n\r\n     */\r\n\r\n    function tryRecover(\r\n\r\n        bytes32 hash,\r\n\r\n        bytes32 r,\r\n\r\n        bytes32 vs\r\n\r\n    ) internal pure returns (address, RecoverError) {\r\n\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n\r\n        return tryRecover(hash, v, r, s);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n\r\n     *\r\n\r\n     * _Available since v4.2._\r\n\r\n     */\r\n\r\n    function recover(\r\n\r\n        bytes32 hash,\r\n\r\n        bytes32 r,\r\n\r\n        bytes32 vs\r\n\r\n    ) internal pure returns (address) {\r\n\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n\r\n        _throwError(error);\r\n\r\n        return recovered;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n\r\n     * `r` and `s` signature fields separately.\r\n\r\n     *\r\n\r\n     * _Available since v4.3._\r\n\r\n     */\r\n\r\n    function tryRecover(\r\n\r\n        bytes32 hash,\r\n\r\n        uint8 v,\r\n\r\n        bytes32 r,\r\n\r\n        bytes32 s\r\n\r\n    ) internal pure returns (address, RecoverError) {\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n\r\n        //\r\n\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n\r\n        // these malleable signatures as well.\r\n\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n\r\n        }\r\n\r\n\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n\r\n        address signer = ecrecover(hash, v, r, s);\r\n\r\n        if (signer == address(0)) {\r\n\r\n            return (address(0), RecoverError.InvalidSignature);\r\n\r\n        }\r\n\r\n\r\n\r\n        return (signer, RecoverError.NoError);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n\r\n     * `r` and `s` signature fields separately.\r\n\r\n     */\r\n\r\n    function recover(\r\n\r\n        bytes32 hash,\r\n\r\n        uint8 v,\r\n\r\n        bytes32 r,\r\n\r\n        bytes32 s\r\n\r\n    ) internal pure returns (address) {\r\n\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n\r\n        _throwError(error);\r\n\r\n        return recovered;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n\r\n     * produces hash corresponding to the one signed with the\r\n\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n\r\n     * JSON-RPC method as part of EIP-191.\r\n\r\n     *\r\n\r\n     * See {recover}.\r\n\r\n     */\r\n\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n\r\n        // 32 is the length in bytes of hash,\r\n\r\n        // enforced by the type signature above\r\n\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n\r\n     * produces hash corresponding to the one signed with the\r\n\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n\r\n     * JSON-RPC method as part of EIP-191.\r\n\r\n     *\r\n\r\n     * See {recover}.\r\n\r\n     */\r\n\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n\r\n     * to the one signed with the\r\n\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n\r\n     * JSON-RPC method as part of EIP-712.\r\n\r\n     *\r\n\r\n     * See {recover}.\r\n\r\n     */\r\n\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/utils/draft-EIP712.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n\r\n *\r\n\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n\r\n *\r\n\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n\r\n * ({_hashTypedDataV4}).\r\n\r\n *\r\n\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n\r\n *\r\n\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n\r\n *\r\n\r\n * _Available since v3.4._\r\n\r\n */\r\n\r\nabstract contract EIP712 {\r\n\r\n    /* solhint-disable var-name-mixedcase */\r\n\r\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\r\n\r\n    // invalidate the cached domain separator if the chain id changes.\r\n\r\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\r\n\r\n    uint256 private immutable _CACHED_CHAIN_ID;\r\n\r\n    address private immutable _CACHED_THIS;\r\n\r\n\r\n\r\n    bytes32 private immutable _HASHED_NAME;\r\n\r\n    bytes32 private immutable _HASHED_VERSION;\r\n\r\n    bytes32 private immutable _TYPE_HASH;\r\n\r\n\r\n\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Initializes the domain separator and parameter caches.\r\n\r\n     *\r\n\r\n     * The meaning of `name` and `version` is specified in\r\n\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n\r\n     *\r\n\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n\r\n     * - `version`: the current major version of the signing domain.\r\n\r\n     *\r\n\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n\r\n     * contract upgrade].\r\n\r\n     */\r\n\r\n    constructor(string memory name, string memory version) {\r\n\r\n        bytes32 hashedName = keccak256(bytes(name));\r\n\r\n        bytes32 hashedVersion = keccak256(bytes(version));\r\n\r\n        bytes32 typeHash = keccak256(\r\n\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n\r\n        );\r\n\r\n        _HASHED_NAME = hashedName;\r\n\r\n        _HASHED_VERSION = hashedVersion;\r\n\r\n        _CACHED_CHAIN_ID = block.chainid;\r\n\r\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\r\n\r\n        _CACHED_THIS = address(this);\r\n\r\n        _TYPE_HASH = typeHash;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the domain separator for the current chain.\r\n\r\n     */\r\n\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n\r\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\r\n\r\n            return _CACHED_DOMAIN_SEPARATOR;\r\n\r\n        } else {\r\n\r\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _buildDomainSeparator(\r\n\r\n        bytes32 typeHash,\r\n\r\n        bytes32 nameHash,\r\n\r\n        bytes32 versionHash\r\n\r\n    ) private view returns (bytes32) {\r\n\r\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n\r\n     *\r\n\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n\r\n     *\r\n\r\n     * ```solidity\r\n\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n\r\n     *     mailTo,\r\n\r\n     *     keccak256(bytes(mailContents))\r\n\r\n     * )));\r\n\r\n     * address signer = ECDSA.recover(digest, signature);\r\n\r\n     * ```\r\n\r\n     */\r\n\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n\r\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n\r\n *\r\n\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n\r\n */\r\n\r\ninterface IERC20Permit {\r\n\r\n    /**\r\n\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n\r\n     * given ``owner``'s signed approval.\r\n\r\n     *\r\n\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n\r\n     * ordering also apply here.\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `spender` cannot be the zero address.\r\n\r\n     * - `deadline` must be a timestamp in the future.\r\n\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n\r\n     * over the EIP712-formatted function arguments.\r\n\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n\r\n     *\r\n\r\n     * For more information on the signature format, see the\r\n\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n\r\n     * section].\r\n\r\n     */\r\n\r\n    function permit(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 value,\r\n\r\n        uint256 deadline,\r\n\r\n        uint8 v,\r\n\r\n        bytes32 r,\r\n\r\n        bytes32 s\r\n\r\n    ) external;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n\r\n     * included whenever a signature is generated for {permit}.\r\n\r\n     *\r\n\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n\r\n     * prevents a signature from being used multiple times.\r\n\r\n     */\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n\r\n     */\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n}\r\n\r\n\r\n// File: contracts/utils/Counters.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n\r\n * @title Counters\r\n\r\n * @author Matt Condon (@shrugs)\r\n\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n\r\n *\r\n\r\n * Include with `using Counters for Counters.Counter;`\r\n\r\n */\r\n\r\nlibrary Counters {\r\n\r\n    struct Counter {\r\n\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n\r\n        uint256 _value; // default: 0\r\n\r\n    }\r\n\r\n\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n\r\n        return counter._value;\r\n\r\n    }\r\n\r\n\r\n\r\n    function increment(Counter storage counter) internal {\r\n\r\n        unchecked {\r\n\r\n            counter._value += 1;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function decrement(Counter storage counter) internal {\r\n\r\n        uint256 value = counter._value;\r\n\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n\r\n        unchecked {\r\n\r\n            counter._value = value - 1;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function reset(Counter storage counter) internal {\r\n\r\n        counter._value = 0;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/utils/Math.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Standard math utilities missing in the Solidity language.\r\n\r\n */\r\n\r\nlibrary Math {\r\n\r\n    /**\r\n\r\n     * @dev Returns the largest of two numbers.\r\n\r\n     */\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return a >= b ? a : b;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the smallest of two numbers.\r\n\r\n     */\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return a < b ? a : b;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n\r\n     * zero.\r\n\r\n     */\r\n\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        // (a + b) / 2 can overflow.\r\n\r\n        return (a & b) + (a ^ b) / 2;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n\r\n     *\r\n\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n\r\n     * of rounding down.\r\n\r\n     */\r\n\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/utils/Arrays.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Collection of functions related to array types.\r\n\r\n */\r\n\r\nlibrary Arrays {\r\n\r\n    /**\r\n\r\n     * @dev Searches a sorted `array` and returns the first index that contains\r\n\r\n     * a value greater or equal to `element`. If no such index exists (i.e. all\r\n\r\n     * values in the array are strictly less than `element`), the array length is\r\n\r\n     * returned. Time complexity O(log n).\r\n\r\n     *\r\n\r\n     * `array` is expected to be sorted in ascending order, and to contain no\r\n\r\n     * repeated elements.\r\n\r\n     */\r\n\r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\r\n\r\n        if (array.length == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 low = 0;\r\n\r\n        uint256 high = array.length;\r\n\r\n\r\n\r\n        while (low < high) {\r\n\r\n            uint256 mid = Math.average(low, high);\r\n\r\n\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n\r\n            // because Math.average rounds down (it does integer division with truncation).\r\n\r\n            if (array[mid] > element) {\r\n\r\n                high = mid;\r\n\r\n            } else {\r\n\r\n                low = mid + 1;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n\r\n        if (low > 0 && array[low - 1] == element) {\r\n\r\n            return low - 1;\r\n\r\n        } else {\r\n\r\n            return low;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/Context.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Provides information about the current execution context, including the\r\n\r\n * sender of the transaction and its data. While these are generally available\r\n\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n\r\n * manner, since when dealing with meta-transactions the account sending and\r\n\r\n * paying for execution may not be the actual sender (as far as an application\r\n\r\n * is concerned).\r\n\r\n *\r\n\r\n * This contract is only required for intermediate, library-like contracts.\r\n\r\n */\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n\r\n        return msg.sender;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/Ownable.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n\r\n * there is an account (an owner) that can be granted exclusive access to\r\n\r\n * specific functions.\r\n\r\n *\r\n\r\n * By default, the owner account will be the one that deploys the contract. This\r\n\r\n * can later be changed with {transferOwnership}.\r\n\r\n *\r\n\r\n * This module is used through inheritance. It will make available the modifier\r\n\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n\r\n * the owner.\r\n\r\n */\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n\r\n     */\r\n\r\n    constructor() {\r\n\r\n        _transferOwnership(_msgSender());\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the address of the current owner.\r\n\r\n     */\r\n\r\n    function owner() public view virtual returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\r\n     *\r\n\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\r\n     * thereby removing any functionality that is only available to the owner.\r\n\r\n     */\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n\r\n        _transferOwnership(address(0));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * Can only be called by the current owner.\r\n\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        _transferOwnership(newOwner);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * Internal function without access restriction.\r\n\r\n     */\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n\r\n        address oldOwner = _owner;\r\n\r\n        _owner = newOwner;\r\n\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/IUniswapV2Router01.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n \r\n\r\n    function addLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint amountADesired,\r\n\r\n        uint amountBDesired,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint amountTokenDesired,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n\r\n        uint amountOut,\r\n\r\n        uint amountInMax,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n \r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n// File: contracts/extensions/IUniswapV2Router02.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n \r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n}\r\n// File: contracts/extensions/IERC20.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n\r\n */\r\n\r\ninterface IERC20 {\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens in existence.\r\n\r\n     */\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n\r\n     */\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\r\n     * zero by default.\r\n\r\n     *\r\n\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n\r\n     */\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n\r\n     * transaction ordering. One possible solution to mitigate this race\r\n\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n\r\n     * desired value afterwards:\r\n\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event.\r\n\r\n     */\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n\r\n     * allowance.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\r\n     * another (`to`).\r\n\r\n     *\r\n\r\n     * Note that `value` may be zero.\r\n\r\n     */\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\r\n     * a call to {approve}. `value` is the new allowance.\r\n\r\n     */\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/IERC20Metadata.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n\r\n *\r\n\r\n * _Available since v4.1._\r\n\r\n */\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    /**\r\n\r\n     * @dev Returns the name of the token.\r\n\r\n     */\r\n\r\n    function name() external view returns (string memory);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the symbol of the token.\r\n\r\n     */\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the decimals places of the token.\r\n\r\n     */\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/ERC20.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Implementation of the {IERC20} interface.\r\n\r\n *\r\n\r\n * This implementation is agnostic to the way tokens are created. This means\r\n\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n\r\n *\r\n\r\n * TIP: For a detailed writeup see our guide\r\n\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n\r\n * to implement supply mechanisms].\r\n\r\n *\r\n\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n\r\n * conventional and does not conflict with the expectations of ERC20\r\n\r\n * applications.\r\n\r\n *\r\n\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n\r\n * these events, as it isn't required by the specification.\r\n\r\n *\r\n\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n\r\n * functions have been added to mitigate the well-known issues around setting\r\n\r\n * allowances. See {IERC20-approve}.\r\n\r\n */\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\r\n\r\n    uint256 private _totalSupply;\r\n\r\n\r\n\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets the values for {name} and {symbol}.\r\n\r\n     *\r\n\r\n     * The default value of {decimals} is 18. To select a different value for\r\n\r\n     * {decimals} you should overload it.\r\n\r\n     *\r\n\r\n     * All two of these values are immutable: they can only be set once during\r\n\r\n     * construction.\r\n\r\n     */\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n\r\n        _name = name_;\r\n\r\n        _symbol = symbol_;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the name of the token.\r\n\r\n     */\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n\r\n     * name.\r\n\r\n     */\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n\r\n     *\r\n\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n\r\n     * overridden;\r\n\r\n     *\r\n\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n\r\n     * no way affects any of the arithmetic of the contract, including\r\n\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n\r\n     */\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n\r\n        return 18;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-totalSupply}.\r\n\r\n     */\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-balanceOf}.\r\n\r\n     */\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n\r\n        return _balances[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-transfer}.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `to` cannot be the zero address.\r\n\r\n     * - the caller must have a balance of at least `amount`.\r\n\r\n     */\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        _transfer(owner, to, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-allowance}.\r\n\r\n     */\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-approve}.\r\n\r\n     *\r\n\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `spender` cannot be the zero address.\r\n\r\n     */\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        _approve(owner, spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-transferFrom}.\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n\r\n     *\r\n\r\n     * NOTE: Does not update the allowance if the current allowance\r\n\r\n     * is the maximum `uint256`.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `from` and `to` cannot be the zero address.\r\n\r\n     * - `from` must have a balance of at least `amount`.\r\n\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n\r\n     * `amount`.\r\n\r\n     */\r\n\r\n    function transferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) public virtual override returns (bool) {\r\n\r\n        address spender = _msgSender();\r\n\r\n        _spendAllowance(from, spender, amount);\r\n\r\n        _transfer(from, to, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\r\n     *\r\n\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n\r\n     * problems described in {IERC20-approve}.\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `spender` cannot be the zero address.\r\n\r\n     */\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\r\n     *\r\n\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n\r\n     * problems described in {IERC20-approve}.\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `spender` cannot be the zero address.\r\n\r\n     * - `spender` must have allowance for the caller of at least\r\n\r\n     * `subtractedValue`.\r\n\r\n     */\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\r\n        unchecked {\r\n\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n\r\n        }\r\n\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n\r\n     *\r\n\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `from` cannot be the zero address.\r\n\r\n     * - `to` cannot be the zero address.\r\n\r\n     * - `from` must have a balance of at least `amount`.\r\n\r\n     */\r\n\r\n    function _transfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n\r\n\r\n        uint256 fromBalance = _balances[from];\r\n\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        unchecked {\r\n\r\n            _balances[from] = fromBalance - amount;\r\n\r\n        }\r\n\r\n        _balances[to] += amount;\r\n\r\n\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n\r\n     * the total supply.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `account` cannot be the zero address.\r\n\r\n     */\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n\r\n\r\n        _totalSupply += amount;\r\n\r\n        _balances[account] += amount;\r\n\r\n        emit Transfer(address(0), account, amount);\r\n\r\n\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n\r\n     * total supply.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `account` cannot be the zero address.\r\n\r\n     * - `account` must have at least `amount` tokens.\r\n\r\n     */\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n\r\n\r\n        uint256 accountBalance = _balances[account];\r\n\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n        unchecked {\r\n\r\n            _balances[account] = accountBalance - amount;\r\n\r\n        }\r\n\r\n        _totalSupply -= amount;\r\n\r\n\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n\r\n     *\r\n\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `owner` cannot be the zero address.\r\n\r\n     * - `spender` cannot be the zero address.\r\n\r\n     */\r\n\r\n    function _approve(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n\r\n     *\r\n\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n\r\n     * Revert if not enough allowance is available.\r\n\r\n     *\r\n\r\n     * Might emit an {Approval} event.\r\n\r\n     */\r\n\r\n    function _spendAllowance(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n\r\n        if (currentAllowance != type(uint256).max) {\r\n\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n\r\n            unchecked {\r\n\r\n                _approve(owner, spender, currentAllowance - amount);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n\r\n     * minting and burning.\r\n\r\n     *\r\n\r\n     * Calling conditions:\r\n\r\n     *\r\n\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\r\n     * will be transferred to `to`.\r\n\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n\r\n     * - `from` and `to` are never both zero.\r\n\r\n     *\r\n\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\r\n     */\r\n\r\n    function _beforeTokenTransfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {}\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n\r\n     * minting and burning.\r\n\r\n     *\r\n\r\n     * Calling conditions:\r\n\r\n     *\r\n\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\r\n     * has been transferred to `to`.\r\n\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n\r\n     * - `from` and `to` are never both zero.\r\n\r\n     *\r\n\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\r\n     */\r\n\r\n    function _afterTokenTransfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {}\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/draft-ERC20Permit.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n\r\n *\r\n\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n\r\n *\r\n\r\n * _Available since v3.4._\r\n\r\n */\r\n\r\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\r\n\r\n    using Counters for Counters.Counter;\r\n\r\n\r\n\r\n    mapping(address => Counters.Counter) private _nonces;\r\n\r\n\r\n\r\n    // solhint-disable-next-line var-name-mixedcase\r\n\r\n    bytes32 private immutable _PERMIT_TYPEHASH =\r\n\r\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\r\n\r\n     *\r\n\r\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\r\n\r\n     */\r\n\r\n    constructor(string memory name) EIP712(name, \"1\") {}\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20Permit-permit}.\r\n\r\n     */\r\n\r\n    function permit(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 value,\r\n\r\n        uint256 deadline,\r\n\r\n        uint8 v,\r\n\r\n        bytes32 r,\r\n\r\n        bytes32 s\r\n\r\n    ) public virtual override {\r\n\r\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\r\n\r\n\r\n\r\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\r\n\r\n\r\n\r\n        bytes32 hash = _hashTypedDataV4(structHash);\r\n\r\n\r\n\r\n        address signer = ECDSA.recover(hash, v, r, s);\r\n\r\n        require(signer == owner, \"ERC20Permit: invalid signature\");\r\n\r\n\r\n\r\n        _approve(owner, spender, value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20Permit-nonces}.\r\n\r\n     */\r\n\r\n    function nonces(address owner) public view virtual override returns (uint256) {\r\n\r\n        return _nonces[owner].current();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\r\n\r\n     */\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n\r\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\r\n\r\n        return _domainSeparatorV4();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev \"Consume a nonce\": return the current value and increment.\r\n\r\n     *\r\n\r\n     * _Available since v4.1._\r\n\r\n     */\r\n\r\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\r\n\r\n        Counters.Counter storage nonce = _nonces[owner];\r\n\r\n        current = nonce.current();\r\n\r\n        nonce.increment();\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/ERC20Votes.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Votes.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\r\n\r\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\r\n\r\n *\r\n\r\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\r\n\r\n *\r\n\r\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\r\n\r\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\r\n\r\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\r\n\r\n *\r\n\r\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\r\n\r\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\r\n\r\n *\r\n\r\n * _Available since v4.2._\r\n\r\n */\r\n\r\nabstract contract ERC20Votes is IVotes, ERC20Permit {\r\n\r\n    struct Checkpoint {\r\n\r\n        uint32 fromBlock;\r\n\r\n        uint224 votes;\r\n\r\n    }\r\n\r\n\r\n\r\n    bytes32 private constant _DELEGATION_TYPEHASH =\r\n\r\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n\r\n\r\n    mapping(address => address) private _delegates;\r\n\r\n    mapping(address => Checkpoint[]) private _checkpoints;\r\n\r\n    Checkpoint[] private _totalSupplyCheckpoints;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Get the `pos`-th checkpoint for `account`.\r\n\r\n     */\r\n\r\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\r\n\r\n        return _checkpoints[account][pos];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Get number of checkpoints for `account`.\r\n\r\n     */\r\n\r\n    function numCheckpoints(address account) public view virtual returns (uint32) {\r\n\r\n        return SafeCast.toUint32(_checkpoints[account].length);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Get the address `account` is currently delegating to.\r\n\r\n     */\r\n\r\n    function delegates(address account) public view virtual override returns (address) {\r\n\r\n        return _delegates[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the current votes balance for `account`\r\n\r\n     */\r\n\r\n    function getVotes(address account) public view virtual override returns (uint256) {\r\n\r\n        uint256 pos = _checkpoints[account].length;\r\n\r\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `blockNumber` must have been already mined\r\n\r\n     */\r\n\r\n    function getPastVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\r\n\r\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\r\n\r\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\r\n\r\n     * It is but NOT the sum of all the delegated votes!\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `blockNumber` must have been already mined\r\n\r\n     */\r\n\r\n    function getPastTotalSupply(uint256 blockNumber) public view virtual override returns (uint256) {\r\n\r\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\r\n\r\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Lookup a value in a list of (sorted) checkpoints.\r\n\r\n     */\r\n\r\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\r\n\r\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\r\n\r\n        //\r\n\r\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\r\n\r\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\r\n\r\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\r\n\r\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\r\n\r\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\r\n\r\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\r\n\r\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\r\n\r\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\r\n\r\n        // the same.\r\n\r\n        uint256 high = ckpts.length;\r\n\r\n        uint256 low = 0;\r\n\r\n        while (low < high) {\r\n\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            if (ckpts[mid].fromBlock > blockNumber) {\r\n\r\n                high = mid;\r\n\r\n            } else {\r\n\r\n                low = mid + 1;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        return high == 0 ? 0 : ckpts[high - 1].votes;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Delegate votes from the sender to `delegatee`.\r\n\r\n     */\r\n\r\n    function delegate(address delegatee) public virtual override {\r\n\r\n        _delegate(_msgSender(), delegatee);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Delegates votes from signer to `delegatee`\r\n\r\n     */\r\n\r\n    function delegateBySig(\r\n\r\n        address delegatee,\r\n\r\n        uint256 nonce,\r\n\r\n        uint256 expiry,\r\n\r\n        uint8 v,\r\n\r\n        bytes32 r,\r\n\r\n        bytes32 s\r\n\r\n    ) public virtual override {\r\n\r\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\r\n\r\n        address signer = ECDSA.recover(\r\n\r\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\r\n\r\n            v,\r\n\r\n            r,\r\n\r\n            s\r\n\r\n        );\r\n\r\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\r\n\r\n        _delegate(signer, delegatee);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\r\n\r\n     */\r\n\r\n    function _maxSupply() internal view virtual returns (uint224) {\r\n\r\n        return type(uint224).max;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Snapshots the totalSupply after it has been increased.\r\n\r\n     */\r\n\r\n    function _mint(address account, uint256 amount) internal virtual override {\r\n\r\n        super._mint(account, amount);\r\n\r\n        require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\r\n\r\n\r\n\r\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Snapshots the totalSupply after it has been decreased.\r\n\r\n     */\r\n\r\n    function _burn(address account, uint256 amount) internal virtual override {\r\n\r\n        super._burn(account, amount);\r\n\r\n\r\n\r\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Move voting power when tokens are transferred.\r\n\r\n     *\r\n\r\n     * Emits a {DelegateVotesChanged} event.\r\n\r\n     */\r\n\r\n    function _afterTokenTransfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual override {\r\n\r\n        super._afterTokenTransfer(from, to, amount);\r\n\r\n\r\n\r\n        _moveVotingPower(delegates(from), delegates(to), amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Change delegation for `delegator` to `delegatee`.\r\n\r\n     *\r\n\r\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\r\n\r\n     */\r\n\r\n    function _delegate(address delegator, address delegatee) internal virtual {\r\n\r\n        address currentDelegate = delegates(delegator);\r\n\r\n        uint256 delegatorBalance = balanceOf(delegator);\r\n\r\n        _delegates[delegator] = delegatee;\r\n\r\n\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n\r\n\r\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _moveVotingPower(\r\n\r\n        address src,\r\n\r\n        address dst,\r\n\r\n        uint256 amount\r\n\r\n    ) private {\r\n\r\n        if (src != dst && amount > 0) {\r\n\r\n            if (src != address(0)) {\r\n\r\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\r\n\r\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\r\n\r\n            }\r\n\r\n\r\n\r\n            if (dst != address(0)) {\r\n\r\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\r\n\r\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _writeCheckpoint(\r\n\r\n        Checkpoint[] storage ckpts,\r\n\r\n        function(uint256, uint256) view returns (uint256) op,\r\n\r\n        uint256 delta\r\n\r\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\r\n\r\n        uint256 pos = ckpts.length;\r\n\r\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\r\n\r\n        newWeight = op(oldWeight, delta);\r\n\r\n\r\n\r\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\r\n\r\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\r\n\r\n        } else {\r\n\r\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\r\n\r\n        return a + b;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/ERC20Snapshot.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Snapshot.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\r\n\r\n * total supply at the time are recorded for later access.\r\n\r\n *\r\n\r\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\r\n\r\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\r\n\r\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\r\n\r\n * used to create an efficient ERC20 forking mechanism.\r\n\r\n *\r\n\r\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\r\n\r\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\r\n\r\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\r\n\r\n * and the account address.\r\n\r\n *\r\n\r\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\r\n\r\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\r\n\r\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\r\n\r\n *\r\n\r\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\r\n\r\n * alternative consider {ERC20Votes}.\r\n\r\n *\r\n\r\n * ==== Gas Costs\r\n\r\n *\r\n\r\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\r\n\r\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\r\n\r\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\r\n\r\n *\r\n\r\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\r\n\r\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\r\n\r\n * transfers will have normal cost until the next snapshot, and so on.\r\n\r\n */\r\n\r\n\r\n\r\nabstract contract ERC20Snapshot is ERC20 {\r\n\r\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\r\n\r\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\r\n\r\n\r\n\r\n    using Arrays for uint256[];\r\n\r\n    using Counters for Counters.Counter;\r\n\r\n\r\n\r\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\r\n\r\n    // Snapshot struct, but that would impede usage of functions that work on an array.\r\n\r\n    struct Snapshots {\r\n\r\n        uint256[] ids;\r\n\r\n        uint256[] values;\r\n\r\n    }\r\n\r\n\r\n\r\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\r\n\r\n    Snapshots private _totalSupplySnapshots;\r\n\r\n\r\n\r\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\r\n\r\n    Counters.Counter private _currentSnapshotId;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\r\n\r\n     */\r\n\r\n    event Snapshot(uint256 id);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Creates a new snapshot and returns its snapshot id.\r\n\r\n     *\r\n\r\n     * Emits a {Snapshot} event that contains the same id.\r\n\r\n     *\r\n\r\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\r\n\r\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\r\n\r\n     *\r\n\r\n     * [WARNING]\r\n\r\n     * ====\r\n\r\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\r\n\r\n     * you must consider that it can potentially be used by attackers in two ways.\r\n\r\n     *\r\n\r\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\r\n\r\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\r\n\r\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\r\n\r\n     * section above.\r\n\r\n     *\r\n\r\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\r\n\r\n     * ====\r\n\r\n     */\r\n\r\n    function _snapshot() internal virtual returns (uint256) {\r\n\r\n        _currentSnapshotId.increment();\r\n\r\n\r\n\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n\r\n        emit Snapshot(currentId);\r\n\r\n        return currentId;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Get the current snapshotId\r\n\r\n     */\r\n\r\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\r\n\r\n        return _currentSnapshotId.current();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\r\n\r\n     */\r\n\r\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\r\n\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\r\n\r\n\r\n\r\n        return snapshotted ? value : balanceOf(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\r\n\r\n     */\r\n\r\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\r\n\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\r\n\r\n\r\n\r\n        return snapshotted ? value : totalSupply();\r\n\r\n    }\r\n\r\n\r\n\r\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\r\n\r\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\r\n\r\n    function _beforeTokenTransfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual override {\r\n\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n\r\n\r\n        if (from == address(0)) {\r\n\r\n            // mint\r\n\r\n            _updateAccountSnapshot(to);\r\n\r\n            _updateTotalSupplySnapshot();\r\n\r\n        } else if (to == address(0)) {\r\n\r\n            // burn\r\n\r\n            _updateAccountSnapshot(from);\r\n\r\n            _updateTotalSupplySnapshot();\r\n\r\n        } else {\r\n\r\n            // transfer\r\n\r\n            _updateAccountSnapshot(from);\r\n\r\n            _updateAccountSnapshot(to);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\r\n\r\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\r\n\r\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\r\n\r\n\r\n\r\n        // When a valid snapshot is queried, there are three possibilities:\r\n\r\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\r\n\r\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\r\n\r\n        //  to this id is the current one.\r\n\r\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\r\n\r\n        //  requested id, and its value is the one to return.\r\n\r\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\r\n\r\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\r\n\r\n        //  larger than the requested one.\r\n\r\n        //\r\n\r\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\r\n\r\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\r\n\r\n        // exactly this.\r\n\r\n\r\n\r\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\r\n\r\n\r\n\r\n        if (index == snapshots.ids.length) {\r\n\r\n            return (false, 0);\r\n\r\n        } else {\r\n\r\n            return (true, snapshots.values[index]);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _updateAccountSnapshot(address account) private {\r\n\r\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\r\n\r\n    }\r\n\r\n\r\n\r\n    function _updateTotalSupplySnapshot() private {\r\n\r\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\r\n\r\n    }\r\n\r\n\r\n\r\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\r\n\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n\r\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\r\n\r\n            snapshots.ids.push(currentId);\r\n\r\n            snapshots.values.push(currentValue);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\r\n\r\n        if (ids.length == 0) {\r\n\r\n            return 0;\r\n\r\n        } else {\r\n\r\n            return ids[ids.length - 1];\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/ERC20Burnable.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n\r\n * tokens and those that they have an allowance for, in a way that can be\r\n\r\n * recognized off-chain (via event analysis).\r\n\r\n */\r\n\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n\r\n    /**\r\n\r\n     * @dev Destroys `amount` tokens from the caller.\r\n\r\n     *\r\n\r\n     * See {ERC20-_burn}.\r\n\r\n     */\r\n\r\n    function burn(uint256 amount) public virtual {\r\n\r\n        _burn(_msgSender(), amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n\r\n     * allowance.\r\n\r\n     *\r\n\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n\r\n     * `amount`.\r\n\r\n     */\r\n\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n\r\n        _spendAllowance(account, _msgSender(), amount);\r\n\r\n        _burn(account, amount);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/extensions/IRewardTracker.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n\r\n\r\n\r\ninterface IRewardTracker is IERC20 {\r\n\r\n    event RewardsDistributed(address indexed from, uint256 weiAmount);\r\n\r\n    event RewardWithdrawn(address indexed to, uint256 weiAmount);\r\n\r\n    event ExcludeFromRewards(address indexed account, bool excluded);\r\n\r\n    event Claim(address indexed account, uint256 amount);\r\n\r\n    event Compound(address indexed account, uint256 amount, uint256 tokens);\r\n\r\n    event LogErrorString(string message);\r\n\r\n\r\n\r\n    struct AccountInfo {\r\n\r\n        address account;\r\n\r\n        uint256 withdrawableRewards;\r\n\r\n        uint256 totalRewards;\r\n\r\n        uint256 lastClaimTime;\r\n\r\n    }\r\n\r\n\r\n\r\n    receive() external payable;\r\n\r\n\r\n\r\n    function distributeRewards() external payable;\r\n\r\n\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external;\r\n\r\n\r\n\r\n    function excludeFromRewards(address account, bool excluded) external;\r\n\r\n\r\n\r\n    function isExcludedFromRewards(address account) external view returns (bool);\r\n\r\n\r\n\r\n    function manualSendReward(uint256 amount, address holder) external;\r\n\r\n\r\n\r\n    function processAccount(address payable account) external returns (bool);\r\n\r\n\r\n\r\n    function compoundAccount(address payable account) external returns (bool);\r\n\r\n\r\n\r\n    function withdrawableRewardOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    function withdrawnRewardOf(address account) external view returns (uint256);\r\n\r\n    \r\n\r\n    function accumulativeRewardOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    function getAccountInfo(address account) external view returns (address, uint256, uint256, uint256, uint256);\r\n\r\n\r\n\r\n    function getLastClaimTime(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n\r\n\r\n    function totalSupply() external view override returns (uint256);\r\n\r\n\r\n\r\n    function balanceOf(address account) external view override returns (uint256);\r\n\r\n\r\n\r\n    function transfer(address, uint256) external pure override returns (bool);\r\n\r\n\r\n\r\n    function allowance(address, address) external pure override returns (uint256);\r\n\r\n\r\n\r\n    function approve(address, uint256) external pure override returns (bool);\r\n\r\n\r\n\r\n    function transferFrom(address, address, uint256) external pure override returns (bool);\r\n\r\n}\r\n// File: contracts/RewardTracker.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardTracker is IRewardTracker, Ownable {\r\n\r\n    address immutable UNISWAPROUTER;\r\n\r\n\r\n\r\n    string private constant _name = \"AGFI_RewardTracker\";\r\n\r\n    string private constant _symbol = \"AGFI_RewardTracker\";\r\n\r\n\r\n\r\n    uint256 public lastProcessedIndex;\r\n\r\n\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n\r\n\r\n    uint256 private constant magnitude = 2**128;\r\n\r\n    uint256 public immutable minTokenBalanceForRewards;\r\n\r\n    uint256 private magnifiedRewardPerShare;\r\n\r\n    uint256 public totalRewardsDistributed;\r\n\r\n    uint256 public totalRewardsWithdrawn;\r\n\r\n\r\n\r\n    address public immutable tokenAddress;\r\n\r\n\r\n\r\n    mapping(address => bool) public excludedFromRewards;\r\n\r\n    mapping(address => int256) private magnifiedRewardCorrections;\r\n\r\n    mapping(address => uint256) private withdrawnRewards;\r\n\r\n    mapping(address => uint256) private lastClaimTimes;\r\n\r\n\r\n\r\n    constructor(address _tokenAddress, address _uniswapRouter) {\r\n\r\n        minTokenBalanceForRewards = 1 * (10**9);\r\n\r\n        tokenAddress = _tokenAddress;\r\n\r\n        UNISWAPROUTER = _uniswapRouter;\r\n\r\n    }\r\n\r\n\r\n\r\n    receive() external override payable {\r\n\r\n        distributeRewards();\r\n\r\n    }\r\n\r\n\r\n\r\n    function distributeRewards() public override payable {\r\n\r\n        require(_totalSupply > 0, \"Total supply invalid\");\r\n\r\n        if (msg.value > 0) {\r\n\r\n            magnifiedRewardPerShare =\r\n\r\n                magnifiedRewardPerShare +\r\n\r\n                ((msg.value * magnitude) / _totalSupply);\r\n\r\n            emit RewardsDistributed(msg.sender, msg.value);\r\n\r\n            totalRewardsDistributed += msg.value;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function setBalance(address payable account, uint256 newBalance)\r\n\r\n        external\r\n\r\n        override\r\n\r\n        onlyOwner\r\n\r\n    {\r\n\r\n        if (excludedFromRewards[account]) {\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        if (newBalance >= minTokenBalanceForRewards) {\r\n\r\n            _setBalance(account, newBalance);\r\n\r\n        } else {\r\n\r\n            _setBalance(account, 0);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function excludeFromRewards(address account, bool excluded)\r\n\r\n        external\r\n\r\n        override\r\n\r\n        onlyOwner\r\n\r\n    {\r\n\r\n        require(\r\n\r\n            excludedFromRewards[account] != excluded,\r\n\r\n            \"AGFI_RewardTracker: account already set to requested state\"\r\n\r\n        );\r\n\r\n        excludedFromRewards[account] = excluded;\r\n\r\n        if (excluded) {\r\n\r\n            _setBalance(account, 0);\r\n\r\n        } else {\r\n\r\n            uint256 newBalance = IERC20(tokenAddress).balanceOf(account);\r\n\r\n            if (newBalance >= minTokenBalanceForRewards) {\r\n\r\n                _setBalance(account, newBalance);\r\n\r\n            } else {\r\n\r\n                _setBalance(account, 0);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        emit ExcludeFromRewards(account, excluded);\r\n\r\n    }\r\n\r\n\r\n\r\n    function isExcludedFromRewards(address account) public override view returns (bool) {\r\n\r\n        return excludedFromRewards[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function manualSendReward(uint256 amount, address holder)\r\n\r\n        external\r\n\r\n        override\r\n\r\n        onlyOwner\r\n\r\n    {\r\n\r\n        uint256 contractETHBalance = address(this).balance;\r\n\r\n        (bool success, ) = payable(holder).call{\r\n\r\n            value: amount > 0 ? amount : contractETHBalance\r\n\r\n        }(\"\");\r\n\r\n        require(success, \"Manual send failed.\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n\r\n        uint256 currentBalance = _balances[account];\r\n\r\n        if (newBalance > currentBalance) {\r\n\r\n            uint256 addAmount = newBalance - currentBalance;\r\n\r\n            _mint(account, addAmount);\r\n\r\n        } else if (newBalance < currentBalance) {\r\n\r\n            uint256 subAmount = currentBalance - newBalance;\r\n\r\n            _burn(account, subAmount);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _mint(address account, uint256 amount) private {\r\n\r\n        require(\r\n\r\n            account != address(0),\r\n\r\n            \"AGFI_RewardTracker: mint to the zero address\"\r\n\r\n        );\r\n\r\n        _totalSupply += amount;\r\n\r\n        _balances[account] += amount;\r\n\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        magnifiedRewardCorrections[account] =\r\n\r\n            magnifiedRewardCorrections[account] -\r\n\r\n            int256(magnifiedRewardPerShare * amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _burn(address account, uint256 amount) private {\r\n\r\n        require(\r\n\r\n            account != address(0),\r\n\r\n            \"AGFI_RewardTracker: burn from the zero address\"\r\n\r\n        );\r\n\r\n        uint256 accountBalance = _balances[account];\r\n\r\n        require(\r\n\r\n            accountBalance >= amount,\r\n\r\n            \"AGFI_RewardTracker: burn amount exceeds balance\"\r\n\r\n        );\r\n\r\n        _balances[account] = accountBalance - amount;\r\n\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        magnifiedRewardCorrections[account] =\r\n\r\n            magnifiedRewardCorrections[account] +\r\n\r\n            int256(magnifiedRewardPerShare * amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function processAccount(address payable account)\r\n\r\n        public\r\n\r\n        override\r\n\r\n        onlyOwner\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        uint256 amount = _withdrawRewardOfUser(account);\r\n\r\n        if (amount > 0) {\r\n\r\n            lastClaimTimes[account] = block.timestamp;\r\n\r\n            emit Claim(account, amount);\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _withdrawRewardOfUser(address payable account)\r\n\r\n        private\r\n\r\n        returns (uint256)\r\n\r\n    {\r\n\r\n        uint256 _withdrawableReward = withdrawableRewardOf(account);\r\n\r\n        if (_withdrawableReward > 0) {\r\n\r\n            withdrawnRewards[account] += _withdrawableReward;\r\n\r\n            totalRewardsWithdrawn += _withdrawableReward;\r\n\r\n            (bool success, ) = account.call{value: _withdrawableReward}(\"\");\r\n\r\n            if (!success) {\r\n\r\n                withdrawnRewards[account] -= _withdrawableReward;\r\n\r\n                totalRewardsWithdrawn -= _withdrawableReward;\r\n\r\n                emit LogErrorString(\"Withdraw failed\");\r\n\r\n                return 0;\r\n\r\n            }\r\n\r\n            emit RewardWithdrawn(account, _withdrawableReward);\r\n\r\n            return _withdrawableReward;\r\n\r\n        }\r\n\r\n        return 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    function compoundAccount(address payable account)\r\n\r\n        public\r\n\r\n        override\r\n\r\n        onlyOwner\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        (uint256 amount, uint256 tokens) = _compoundRewardOfUser(account);\r\n\r\n        if (amount > 0) {\r\n\r\n            lastClaimTimes[account] = block.timestamp;\r\n\r\n            emit Compound(account, amount, tokens);\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _compoundRewardOfUser(address payable account)\r\n\r\n        private\r\n\r\n        returns (uint256, uint256)\r\n\r\n    {\r\n\r\n        uint256 _withdrawableReward = withdrawableRewardOf(account);\r\n\r\n        if (_withdrawableReward > 0) {\r\n\r\n            withdrawnRewards[account] += _withdrawableReward;\r\n\r\n            totalRewardsWithdrawn += _withdrawableReward;\r\n\r\n\r\n\r\n            IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(\r\n\r\n                UNISWAPROUTER\r\n\r\n            );\r\n\r\n\r\n\r\n            address[] memory path = new address[](2);\r\n\r\n            path[0] = uniswapV2Router.WETH();\r\n\r\n            path[1] = address(tokenAddress);\r\n\r\n\r\n\r\n            bool success;\r\n\r\n            uint256 tokens;\r\n\r\n\r\n\r\n            uint256 initTokenBal = IERC20(tokenAddress).balanceOf(account);\r\n\r\n            try\r\n\r\n                uniswapV2Router\r\n\r\n                    .swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n\r\n                    value: _withdrawableReward\r\n\r\n                }(0, path, address(account), block.timestamp)\r\n\r\n            {\r\n\r\n                success = true;\r\n\r\n                tokens = IERC20(tokenAddress).balanceOf(account) - initTokenBal;\r\n\r\n            } catch Error(\r\n\r\n                string memory reason /*err*/\r\n\r\n            ) {\r\n\r\n                emit LogErrorString(reason);\r\n\r\n                success = false;\r\n\r\n            }\r\n\r\n\r\n\r\n            if (!success) {\r\n\r\n                withdrawnRewards[account] -= _withdrawableReward;\r\n\r\n                totalRewardsWithdrawn -= _withdrawableReward;\r\n\r\n                emit LogErrorString(\"Withdraw failed\");\r\n\r\n                return (0, 0);\r\n\r\n            }\r\n\r\n\r\n\r\n            emit RewardWithdrawn(account, _withdrawableReward);\r\n\r\n            return (_withdrawableReward, tokens);\r\n\r\n        }\r\n\r\n        return (0, 0);\r\n\r\n    }\r\n\r\n\r\n\r\n    function withdrawableRewardOf(address account)\r\n\r\n        public\r\n\r\n        override\r\n\r\n        view\r\n\r\n        returns (uint256)\r\n\r\n    {\r\n\r\n        return accumulativeRewardOf(account) - withdrawnRewards[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function withdrawnRewardOf(address account) public view returns (uint256) {\r\n\r\n        return withdrawnRewards[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function accumulativeRewardOf(address account)\r\n\r\n        public\r\n\r\n        override\r\n\r\n        view\r\n\r\n        returns (uint256)\r\n\r\n    {\r\n\r\n        int256 a = int256(magnifiedRewardPerShare * balanceOf(account));\r\n\r\n        int256 b = magnifiedRewardCorrections[account]; // this is an explicit int256 (signed)\r\n\r\n        return uint256(a + b) / magnitude;\r\n\r\n    }\r\n\r\n\r\n\r\n    function getAccountInfo(address account)\r\n\r\n        public\r\n\r\n        override\r\n\r\n        view\r\n\r\n        returns (\r\n\r\n            address,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256\r\n\r\n        )\r\n\r\n    {\r\n\r\n        AccountInfo memory info;\r\n\r\n        info.account = account;\r\n\r\n        info.withdrawableRewards = withdrawableRewardOf(account);\r\n\r\n        info.totalRewards = accumulativeRewardOf(account);\r\n\r\n        info.lastClaimTime = lastClaimTimes[account];\r\n\r\n        return (\r\n\r\n            info.account,\r\n\r\n            info.withdrawableRewards,\r\n\r\n            info.totalRewards,\r\n\r\n            info.lastClaimTime,\r\n\r\n            totalRewardsWithdrawn\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    function getLastClaimTime(address account) public override view returns (uint256) {\r\n\r\n        return lastClaimTimes[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function name() public override pure returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n\r\n\r\n    function symbol() public override pure returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decimals() public override pure returns (uint8) {\r\n\r\n        return 9;\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n\r\n        return _balances[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address, uint256) public pure override returns (bool) {\r\n\r\n        revert(\"AGFI_RewardTracker: method not implemented\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function allowance(address, address)\r\n\r\n        public\r\n\r\n        pure\r\n\r\n        override\r\n\r\n        returns (uint256)\r\n\r\n    {\r\n\r\n        revert(\"AGFI_RewardTracker: method not implemented\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function approve(address, uint256) public pure override returns (bool) {\r\n\r\n        revert(\"AGFI_RewardTracker: method not implemented\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(\r\n\r\n        address,\r\n\r\n        address,\r\n\r\n        uint256\r\n\r\n    ) public pure override returns (bool) {\r\n\r\n        revert(\"AGFI_RewardTracker: method not implemented\");\r\n\r\n    }\r\n\r\n}\r\n// File: contracts/AggregatedFinance.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @custom:security-contact team@aggregated.finance\r\n\r\ncontract AggregatedFinance is ERC20, ERC20Burnable, ERC20Snapshot, Ownable, ERC20Permit, ERC20Votes {\r\n\r\n    address constant UNISWAPROUTER = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n\r\n\r\n    // non-immutable reward tracker so it can be upgraded if needed\r\n\r\n    IRewardTracker public rewardTracker;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n\r\n    address public immutable uniswapV2Pair;\r\n\r\n\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public _blacklist;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n\r\n    mapping (address => uint256) private _holderLastTransferTimestamp;\r\n\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n\r\n\r\n    bool public limitsInEffect = true;\r\n\r\n    bool public transferDelayEnabled = true;\r\n\r\n    bool private swapping;\r\n\r\n    uint8 public swapIndex; // tracks which fee is being sold off\r\n\r\n    bool private isCompounding;\r\n\r\n    bool public transferTaxEnabled = false;\r\n\r\n    bool public swapEnabled = false;\r\n\r\n    bool public compoundingEnabled = true;\r\n\r\n    uint256 public lastSwapTime;\r\n\r\n    uint256 private launchedAt;\r\n\r\n\r\n\r\n    // Fee channel definitions. Enable each individually, and define tax rates for each.\r\n\r\n    bool public buyFeeC1Enabled = true;\r\n\r\n    bool public buyFeeC2Enabled = false;\r\n\r\n    bool public buyFeeC3Enabled = true;\r\n\r\n    bool public buyFeeC4Enabled = true;\r\n\r\n    bool public buyFeeC5Enabled = true;\r\n\r\n\r\n\r\n    bool public sellFeeC1Enabled = true;\r\n\r\n    bool public sellFeeC2Enabled = true;\r\n\r\n    bool public sellFeeC3Enabled = true;\r\n\r\n    bool public sellFeeC4Enabled = true;\r\n\r\n    bool public sellFeeC5Enabled = true;\r\n\r\n\r\n\r\n    bool public swapC1Enabled = true;\r\n\r\n    bool public swapC2Enabled = true;\r\n\r\n    bool public swapC3Enabled = true;\r\n\r\n    bool public swapC4Enabled = true;\r\n\r\n    bool public swapC5Enabled = true;\r\n\r\n\r\n\r\n    bool public c2BurningEnabled = true;\r\n\r\n    bool public c3RewardsEnabled = true;\r\n\r\n\r\n\r\n    uint256 public tokensForC1;\r\n\r\n    uint256 public tokensForC2;\r\n\r\n    uint256 public tokensForC3;\r\n\r\n    uint256 public tokensForC4;\r\n\r\n    uint256 public tokensForC5;\r\n\r\n\r\n\r\n    // treasury wallet, default to 0x3e822d55e79eA9F53C744BD9179d89dDec081556\r\n\r\n    address public c1Wallet;\r\n\r\n\r\n\r\n    // burning wallet, default to the staking rewards wallet, but when burning is enabled \r\n\r\n    // it will just burn them. The wallet still needs to be defined to function:\r\n\r\n    // 0x16cc620dBBACc751DAB85d7Fc1164C62858d9b9f\r\n\r\n    address public c2Wallet;\r\n\r\n\r\n\r\n    // rewards wallet, default to the rewards contract itself, not a wallet. But\r\n\r\n    // if rewards are disabled then they'll fall back to the staking rewards wallet:\r\n\r\n    // 0x16cc620dBBACc751DAB85d7Fc1164C62858d9b9f\r\n\r\n    address public c3Wallet;\r\n\r\n\r\n\r\n    // staking rewards wallet, default to 0x16cc620dBBACc751DAB85d7Fc1164C62858d9b9f\r\n\r\n    address public c4Wallet;\r\n\r\n\r\n\r\n    // operations wallet, default to 0xf05E5AeFeCd9c370fbfFff94c6c4614E6c165b78\r\n\r\n    address public c5Wallet;\r\n\r\n\r\n\r\n    uint256 public buyTotalFees = 1200; // 12% default\r\n\r\n    uint256 public buyC1Fee = 400; // 4% Treasury\r\n\r\n    uint256 public buyC2Fee = 0; // Nothing\r\n\r\n    uint256 public buyC3Fee = 300; // 3% Eth Rewards\r\n\r\n    uint256 public buyC4Fee = 300; // 3% Eth Staking Pool\r\n\r\n    uint256 public buyC5Fee = 200; // 2% Operations\r\n\r\n \r\n\r\n    uint256 public sellTotalFees = 1300; // 13% default\r\n\r\n    uint256 public sellC1Fee = 400; // 4% Treasury\r\n\r\n    uint256 public sellC2Fee = 100; // 1% Auto Burn\r\n\r\n    uint256 public sellC3Fee = 300; // 3% Eth Rewards\r\n\r\n    uint256 public sellC4Fee = 300; // 3% Eth Staking Pool\r\n\r\n    uint256 public sellC5Fee = 200; // 2% Operations\r\n\r\n\r\n\r\n    event LogErrorString(string message);\r\n\r\n    event SwapEnabled(bool enabled);\r\n\r\n    event TaxEnabled(bool enabled);\r\n\r\n    event TransferTaxEnabled(bool enabled);\r\n\r\n    event CompoundingEnabled(bool enabled);\r\n\r\n    event ChangeSwapTokensAtAmount(uint256 amount);\r\n\r\n    event LimitsReinstated();\r\n\r\n    event LimitsRemoved();\r\n\r\n    event C2BurningModified(bool enabled);\r\n\r\n    event C3RewardsModified(bool enabled);\r\n\r\n    event ChannelWalletsModified(address indexed newAddress, uint8 idx);\r\n\r\n\r\n\r\n    event BoughtEarly(address indexed sniper);\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event SetRewardTracker(address indexed newAddress);\r\n\r\n    event FeesUpdated();\r\n\r\n    event SendChannel1(uint256 amount);\r\n\r\n    event SendChannel2(uint256 amount);\r\n\r\n    event SendChannel3(uint256 amount);\r\n\r\n    event SendChannel4(uint256 amount);\r\n\r\n    event SendChannel5(uint256 amount);\r\n\r\n    event TokensBurned(uint256 amountBurned);\r\n\r\n    event NativeWithdrawn();\r\n\r\n    event FeesWithdrawn();\r\n\r\n\r\n\r\n    constructor()\r\n\r\n        ERC20(\"Aggregated Finance\", \"AGFI\")\r\n\r\n        ERC20Permit(\"Aggregated Finance\")\r\n\r\n    {\r\n\r\n        c1Wallet = address(0x3e822d55e79eA9F53C744BD9179d89dDec081556);\r\n\r\n        c2Wallet = address(0x16cc620dBBACc751DAB85d7Fc1164C62858d9b9f);\r\n\r\n        c3Wallet = address(0x16cc620dBBACc751DAB85d7Fc1164C62858d9b9f);\r\n\r\n        c4Wallet = address(0x16cc620dBBACc751DAB85d7Fc1164C62858d9b9f);\r\n\r\n        c5Wallet = address(0xf05E5AeFeCd9c370fbfFff94c6c4614E6c165b78);\r\n\r\n\r\n\r\n        rewardTracker = new RewardTracker(address(this), UNISWAPROUTER);\r\n\r\n\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(UNISWAPROUTER);\r\n\r\n\r\n\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n\r\n\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n\r\n\r\n        rewardTracker.excludeFromRewards(address(rewardTracker), true);\r\n\r\n        rewardTracker.excludeFromRewards(address(this), true);\r\n\r\n        rewardTracker.excludeFromRewards(owner(), true);\r\n\r\n        rewardTracker.excludeFromRewards(address(_uniswapV2Router), true);\r\n\r\n        rewardTracker.excludeFromRewards(address(0xdead), true); // we won't use the dead address as we can burn, but just in case someone burns their tokens\r\n\r\n\r\n\r\n        excludeFromFees(owner(), true);\r\n\r\n        excludeFromFees(address(rewardTracker), true);\r\n\r\n        excludeFromFees(address(this), true);\r\n\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n\r\n\r\n        _mint(owner(), 1000000000000 * (1e9)); // 1,000,000,000,000 tokens with 9 decimal places\r\n\r\n    }\r\n\r\n\r\n\r\n    receive() external payable {}\r\n\r\n\r\n\r\n    function decimals() override public pure returns (uint8) {\r\n\r\n        return 9;\r\n\r\n    }\r\n\r\n\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n\r\n    }\r\n\r\n\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n\r\n        return _isExcludedFromFees[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function blacklistAccount(address account, bool isBlacklisted) public onlyOwner {\r\n\r\n        _blacklist[account] = isBlacklisted;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool enabled) public onlyOwner {\r\n\r\n        require(pair != uniswapV2Pair, \"AGFI: The pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, enabled);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool enabled) private {\r\n\r\n        automatedMarketMakerPairs[pair] = enabled;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, enabled);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setRewardTracker(address payable newTracker) public onlyOwner {\r\n\r\n        require(newTracker != address(0), \"AGFI: newTracker cannot be zero address\");\r\n\r\n        rewardTracker = IRewardTracker(newTracker);\r\n\r\n        emit SetRewardTracker(newTracker);\r\n\r\n    }\r\n\r\n\r\n\r\n    function claim() public {\r\n\r\n        rewardTracker.processAccount(payable(_msgSender()));\r\n\r\n    }\r\n\r\n\r\n\r\n    function compound() public {\r\n\r\n        require(compoundingEnabled, \"AGFI: compounding is not enabled\");\r\n\r\n        isCompounding = true;\r\n\r\n        rewardTracker.compoundAccount(payable(_msgSender()));\r\n\r\n        isCompounding = false;\r\n\r\n    }\r\n\r\n\r\n\r\n    function withdrawableRewardOf(address account)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns (uint256)\r\n\r\n    {\r\n\r\n        return rewardTracker.withdrawableRewardOf(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function withdrawnRewardOf(address account) public view returns (uint256) {\r\n\r\n        return rewardTracker.withdrawnRewardOf(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function accumulativeRewardOf(address account) public view returns (uint256) {\r\n\r\n        return rewardTracker.accumulativeRewardOf(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function getAccountInfo(address account)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns (\r\n\r\n            address,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256\r\n\r\n        )\r\n\r\n    {\r\n\r\n        return rewardTracker.getAccountInfo(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function enableTrading() external onlyOwner {\r\n\r\n        swapEnabled = true;\r\n\r\n        transferTaxEnabled = true;\r\n\r\n        launchedAt = block.number;\r\n\r\n    }\r\n\r\n\r\n\r\n    function getLastClaimTime(address account) public view returns (uint256) {\r\n\r\n        return rewardTracker.getLastClaimTime(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setCompoundingEnabled(bool enabled) external onlyOwner {\r\n\r\n        compoundingEnabled = enabled;\r\n\r\n        emit CompoundingEnabled(enabled);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSwapEnabled(bool enabled) external onlyOwner {\r\n\r\n        swapEnabled = enabled;\r\n\r\n        emit SwapEnabled(enabled);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSwapChannels(bool c1, bool c2, bool c3, bool c4, bool c5) external onlyOwner {\r\n\r\n        swapC1Enabled = c1;\r\n\r\n        swapC2Enabled = c2;\r\n\r\n        swapC3Enabled = c3;\r\n\r\n        swapC4Enabled = c4;\r\n\r\n        swapC5Enabled = c5;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setTransferTaxEnabled(bool enabled) external onlyOwner {\r\n\r\n        transferTaxEnabled = enabled;\r\n\r\n        emit TransferTaxEnabled(enabled);\r\n\r\n    }\r\n\r\n\r\n\r\n    function removeLimits() external onlyOwner {\r\n\r\n        limitsInEffect = false;\r\n\r\n        emit LimitsRemoved();\r\n\r\n    }\r\n\r\n\r\n\r\n    function reinstateLimits() external onlyOwner {\r\n\r\n        limitsInEffect = true;\r\n\r\n        emit LimitsReinstated();\r\n\r\n    }\r\n\r\n\r\n\r\n    function modifyC2Burning(bool enabled) external onlyOwner {\r\n\r\n        c2BurningEnabled = enabled;\r\n\r\n        emit C2BurningModified(enabled);\r\n\r\n    }\r\n\r\n\r\n\r\n    function modifyC3Rewards(bool enabled) external onlyOwner {\r\n\r\n        c3RewardsEnabled = enabled;\r\n\r\n        emit C3RewardsModified(enabled);\r\n\r\n    }\r\n\r\n\r\n\r\n    function modifyChannelWallet(address newAddress, uint8 idx) external onlyOwner {\r\n\r\n        require(newAddress != address(0), \"AGFI: newAddress can not be zero address.\");\r\n\r\n\r\n\r\n        if (idx == 1) {\r\n\r\n            c1Wallet = newAddress;\r\n\r\n        } else if (idx == 2) {\r\n\r\n            c2Wallet = newAddress;\r\n\r\n        } else if (idx == 3) {\r\n\r\n            c3Wallet = newAddress;\r\n\r\n        } else if (idx == 4) {\r\n\r\n            c4Wallet = newAddress;\r\n\r\n        } else if (idx == 5) {\r\n\r\n            c5Wallet = newAddress;\r\n\r\n        }\r\n\r\n\r\n\r\n        emit ChannelWalletsModified(newAddress, idx);\r\n\r\n    }\r\n\r\n\r\n\r\n    // disable Transfer delay - cannot be reenabled\r\n\r\n    function disableTransferDelay() external onlyOwner returns (bool) {\r\n\r\n        transferDelayEnabled = false;\r\n\r\n        // not bothering with an event emission, as it's only called once\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function updateBuyFees(\r\n\r\n        bool _enableC1,\r\n\r\n        uint256 _c1Fee,\r\n\r\n        bool _enableC2,\r\n\r\n        uint256 _c2Fee,\r\n\r\n        bool _enableC3,\r\n\r\n        uint256 _c3Fee,\r\n\r\n        bool _enableC4,\r\n\r\n        uint256 _c4Fee,\r\n\r\n        bool _enableC5,\r\n\r\n        uint256 _c5Fee\r\n\r\n    ) external onlyOwner {\r\n\r\n        buyFeeC1Enabled = _enableC1;\r\n\r\n        buyC1Fee = _c1Fee;\r\n\r\n        buyFeeC2Enabled = _enableC2;\r\n\r\n        buyC2Fee = _c2Fee;\r\n\r\n        buyFeeC3Enabled = _enableC3;\r\n\r\n        buyC3Fee = _c3Fee;\r\n\r\n        buyFeeC4Enabled = _enableC4;\r\n\r\n        buyC4Fee = _c4Fee;\r\n\r\n        buyFeeC5Enabled = _enableC5;\r\n\r\n        buyC5Fee = _c5Fee;\r\n\r\n\r\n\r\n        buyTotalFees = _c1Fee + _c2Fee + _c3Fee + _c4Fee + _c5Fee;\r\n\r\n        require(buyTotalFees <= 3000, \"AGFI: Must keep fees at 30% or less\");\r\n\r\n        emit FeesUpdated();\r\n\r\n    }\r\n\r\n \r\n\r\n    function updateSellFees(\r\n\r\n        bool _enableC1,\r\n\r\n        uint256 _c1Fee,\r\n\r\n        bool _enableC2,\r\n\r\n        uint256 _c2Fee,\r\n\r\n        bool _enableC3,\r\n\r\n        uint256 _c3Fee,\r\n\r\n        bool _enableC4,\r\n\r\n        uint256 _c4Fee,\r\n\r\n        bool _enableC5,\r\n\r\n        uint256 _c5Fee\r\n\r\n    ) external onlyOwner {\r\n\r\n        sellFeeC1Enabled = _enableC1;\r\n\r\n        sellC1Fee = _c1Fee;\r\n\r\n        sellFeeC2Enabled = _enableC2;\r\n\r\n        sellC2Fee = _c2Fee;\r\n\r\n        sellFeeC3Enabled = _enableC3;\r\n\r\n        sellC3Fee = _c3Fee;\r\n\r\n        sellFeeC4Enabled = _enableC4;\r\n\r\n        sellC4Fee = _c4Fee;\r\n\r\n        sellFeeC5Enabled = _enableC5;\r\n\r\n        sellC5Fee = _c5Fee;\r\n\r\n\r\n\r\n        sellTotalFees = _c1Fee + _c2Fee + _c3Fee + _c4Fee + _c5Fee;\r\n\r\n        require(sellTotalFees <= 3000, \"AGFI: Must keep fees at 30% or less\");\r\n\r\n        emit FeesUpdated();\r\n\r\n    }\r\n\r\n\r\n\r\n    function snapshot() public onlyOwner {\r\n\r\n        _snapshot();\r\n\r\n    }\r\n\r\n\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override(ERC20, ERC20Snapshot) {\r\n\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal override(ERC20, ERC20Votes) {\r\n\r\n        super._afterTokenTransfer(from, to, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _mint(address to, uint256 amount) internal override(ERC20, ERC20Votes) {\r\n\r\n        super._mint(to, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _burn(address account, uint256 amount) internal override(ERC20, ERC20Votes) {\r\n\r\n        super._burn(account, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal override {\r\n\r\n        require(from != address(0), \"_transfer: transfer from the zero address\");\r\n\r\n        require(to != address(0), \"_transfer: transfer to the zero address\");\r\n\r\n        require(!_blacklist[from], \"_transfer: Sender is blacklisted\");\r\n\r\n        require(!_blacklist[to], \"_transfer: Recipient is blacklisted\");\r\n\r\n\r\n\r\n         if (amount == 0) {\r\n\r\n            _executeTransfer(from, to, 0);\r\n\r\n            return;\r\n\r\n        }\r\n\r\n \r\n\r\n        if (limitsInEffect) {\r\n\r\n            if (\r\n\r\n                from != owner() &&\r\n\r\n                to != owner() &&\r\n\r\n                to != address(0) &&\r\n\r\n                to != address(0xdead) &&\r\n\r\n                !swapping\r\n\r\n            ) {\r\n\r\n                if (!swapEnabled) {\r\n\r\n                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"_transfer: Trading is not active.\");\r\n\r\n                }\r\n\r\n \r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.  \r\n\r\n                if (transferDelayEnabled){\r\n\r\n                    if (to != owner() && to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n\r\n                        require(_holderLastTransferTimestamp[tx.origin] < block.number, \"_transfer: Transfer Delay enabled.  Only one purchase per block allowed.\");\r\n\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n \r\n\r\n        // anti bot logic\r\n\r\n        if (block.number <= (launchedAt + 3) && \r\n\r\n            to != uniswapV2Pair && \r\n\r\n            to != address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)\r\n\r\n        ) {\r\n\r\n            _blacklist[to] = true;\r\n\r\n            emit BoughtEarly(to);\r\n\r\n        }\r\n\r\n\r\n\r\n        if (\r\n\r\n            swapEnabled && // only executeSwap when enabled\r\n\r\n            !swapping && // and its not currently swapping (no reentry)\r\n\r\n            !automatedMarketMakerPairs[from] && // no swap on remove liquidity step 1 or DEX buy\r\n\r\n            from != address(uniswapV2Router) && // no swap on remove liquidity step 2\r\n\r\n            from != owner() && // and not the contract owner\r\n\r\n            to != owner()\r\n\r\n        ) {\r\n\r\n            swapping = true;\r\n\r\n\r\n\r\n            _executeSwap();\r\n\r\n\r\n\r\n            lastSwapTime = block.timestamp;\r\n\r\n            swapping = false;\r\n\r\n        }\r\n\r\n\r\n\r\n        bool takeFee;\r\n\r\n\r\n\r\n        if (\r\n\r\n            from == address(uniswapV2Pair) ||\r\n\r\n            to == address(uniswapV2Pair) ||\r\n\r\n            automatedMarketMakerPairs[to] ||\r\n\r\n            automatedMarketMakerPairs[from] ||\r\n\r\n            transferTaxEnabled\r\n\r\n        ) {\r\n\r\n            takeFee = true;\r\n\r\n        }\r\n\r\n\r\n\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to] || swapping || isCompounding || !transferTaxEnabled) {\r\n\r\n            takeFee = false;\r\n\r\n        }\r\n\r\n\r\n\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n\r\n        if (takeFee) {\r\n\r\n            uint256 fees;\r\n\r\n            // on sell\r\n\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n\r\n                fees = (amount * sellTotalFees) / 10000;\r\n\r\n                if (sellFeeC1Enabled) {\r\n\r\n                    tokensForC1 += fees * sellC1Fee / sellTotalFees;\r\n\r\n                }\r\n\r\n                if (sellFeeC2Enabled) {\r\n\r\n                    tokensForC2 += fees * sellC2Fee / sellTotalFees;\r\n\r\n                }\r\n\r\n                if (sellFeeC3Enabled) {\r\n\r\n                    tokensForC3 += fees * sellC3Fee / sellTotalFees;\r\n\r\n                }\r\n\r\n                if (sellFeeC4Enabled) {\r\n\r\n                    tokensForC4 += fees * sellC4Fee / sellTotalFees;\r\n\r\n                }\r\n\r\n                if (sellFeeC5Enabled) {\r\n\r\n                    tokensForC5 += fees * sellC5Fee / sellTotalFees;\r\n\r\n                }\r\n\r\n            // on buy\r\n\r\n            } else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n\r\n                fees = (amount * buyTotalFees) / 10000;\r\n\r\n\r\n\r\n                if (buyFeeC1Enabled) {\r\n\r\n                    tokensForC1 += fees * buyC1Fee / buyTotalFees;\r\n\r\n                }\r\n\r\n                if (buyFeeC2Enabled) {\r\n\r\n                    tokensForC2 += fees * buyC2Fee / buyTotalFees;\r\n\r\n                }\r\n\r\n                if (buyFeeC3Enabled) {\r\n\r\n                    tokensForC3 += fees * buyC3Fee / buyTotalFees;\r\n\r\n                }\r\n\r\n                if (buyFeeC4Enabled) {\r\n\r\n                    tokensForC4 += fees * buyC4Fee / buyTotalFees;\r\n\r\n                }\r\n\r\n                if (buyFeeC5Enabled) {\r\n\r\n                    tokensForC5 += fees * buyC5Fee / buyTotalFees;\r\n\r\n                }\r\n\r\n            }\r\n\r\n \r\n\r\n            amount -= fees;\r\n\r\n            if (fees > 0){\r\n\r\n                _executeTransfer(from, address(this), fees);\r\n\r\n            }\r\n\r\n        }\r\n\r\n \r\n\r\n        _executeTransfer(from, to, amount);\r\n\r\n\r\n\r\n        rewardTracker.setBalance(payable(from), balanceOf(from));\r\n\r\n        rewardTracker.setBalance(payable(to), balanceOf(to));\r\n\r\n    }\r\n\r\n\r\n\r\n    function _executeSwap() private {\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        if (contractTokenBalance <= 0) { return; }\r\n\r\n        \r\n\r\n        if (swapIndex == 0 && swapC1Enabled && tokensForC1 > 0) {\r\n\r\n            // channel 1 (treasury)\r\n\r\n            swapTokensForNative(tokensForC1);\r\n\r\n            (bool success, ) = payable(c1Wallet).call{value: address(this).balance}(\"\");\r\n\r\n            if (success) {\r\n\r\n                emit SendChannel1(tokensForC1);\r\n\r\n            } else {\r\n\r\n                emit LogErrorString(\"Wallet failed to receive channel 1 tokens\");\r\n\r\n            }\r\n\r\n            tokensForC1 = 0;\r\n\r\n\r\n\r\n        } else if (swapIndex == 1 && swapC2Enabled && tokensForC2 > 0) {\r\n\r\n            // channel 2 (burning)\r\n\r\n            if (c2BurningEnabled) {\r\n\r\n                _burn(address(this), tokensForC2);\r\n\r\n                emit TokensBurned(tokensForC2);\r\n\r\n            } else {\r\n\r\n                swapTokensForNative(tokensForC2);\r\n\r\n                (bool success, ) = payable(c2Wallet).call{value: address(this).balance}(\"\");\r\n\r\n                if (success) {\r\n\r\n                    emit SendChannel2(tokensForC2);\r\n\r\n                } else {\r\n\r\n                    emit LogErrorString(\"Wallet failed to receive channel 1 tokens\");\r\n\r\n                }\r\n\r\n            }\r\n\r\n            tokensForC2 = 0;\r\n\r\n\r\n\r\n        } else if (swapIndex == 2 && swapC3Enabled && tokensForC3 > 0) {\r\n\r\n            // channel 3 (rewards)\r\n\r\n            if (c3RewardsEnabled) {\r\n\r\n                swapTokensForNative(tokensForC3);\r\n\r\n                (bool success, ) = payable(rewardTracker).call{value: address(this).balance}(\"\");\r\n\r\n                if (success) {\r\n\r\n                    emit SendChannel3(tokensForC3);\r\n\r\n                } else {\r\n\r\n                    emit LogErrorString(\"Wallet failed to receive channel 3 tokens\");\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                _executeTransfer(address(this), c3Wallet, tokensForC3);\r\n\r\n                emit SendChannel3(tokensForC3);\r\n\r\n            }\r\n\r\n            tokensForC3 = 0;\r\n\r\n\r\n\r\n        } else if (swapIndex == 3 && swapC4Enabled && tokensForC4 > 0) {\r\n\r\n            // channel 4 (staking rewards)\r\n\r\n            _executeTransfer(address(this), c4Wallet, tokensForC4);\r\n\r\n            emit SendChannel4(tokensForC4);\r\n\r\n            tokensForC4 = 0;\r\n\r\n\r\n\r\n        } else if (swapIndex == 4 && swapC5Enabled && tokensForC5 > 0) {\r\n\r\n            // channel 5 (operations funds)\r\n\r\n            swapTokensForNative(tokensForC5);\r\n\r\n            (bool success, ) = payable(c5Wallet).call{value: address(this).balance}(\"\");\r\n\r\n            if (success) {\r\n\r\n                emit SendChannel5(tokensForC5);\r\n\r\n            } else {\r\n\r\n                emit LogErrorString(\"Wallet failed to receive channel 5 tokens\");\r\n\r\n            }\r\n\r\n            tokensForC5 = 0;\r\n\r\n        }\r\n\r\n\r\n\r\n        if (swapIndex == 4) {\r\n\r\n            swapIndex = 0; // reset back to the start\r\n\r\n        } else {\r\n\r\n            swapIndex++; // advance for the next swap call\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    // withdraw tokens\r\n\r\n    function withdrawCollectedFees() public onlyOwner {\r\n\r\n        _executeTransfer(address(this), msg.sender, balanceOf(address(this)));\r\n\r\n        tokensForC1 = 0;\r\n\r\n        tokensForC2 = 0;\r\n\r\n        tokensForC3 = 0;\r\n\r\n        tokensForC4 = 0;\r\n\r\n        tokensForC5 = 0;\r\n\r\n        emit FeesWithdrawn();\r\n\r\n    }\r\n\r\n\r\n\r\n    function _executeTransfer(address sender, address recipient, uint256 amount) private {\r\n\r\n        super._transfer(sender, recipient, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    // withdraw native\r\n\r\n    function withdrawCollectedNative() public onlyOwner {\r\n\r\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n\r\n        if (success) {\r\n\r\n            emit NativeWithdrawn();\r\n\r\n        } else {\r\n\r\n            emit LogErrorString(\"Wallet failed to receive channel 5 tokens\");\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    // swap the tokens back to ETH\r\n\r\n    function swapTokensForNative(uint256 tokens) private {\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokens);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n            tokens,\r\n\r\n            0, // accept any amount of native\r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"BoughtEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"C2BurningModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"C3RewardsModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChangeSwapTokensAtAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"idx\",\"type\":\"uint8\"}],\"name\":\"ChannelWalletsModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"CompoundingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LimitsReinstated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LimitsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogErrorString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NativeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendChannel1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendChannel2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendChannel3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendChannel4\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendChannel5\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetRewardTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TaxEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBurned\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TransferTaxEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accumulativeRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"blacklistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyC1Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyC2Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyC3Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyC4Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyC5Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeC1Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeC2Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeC3Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeC4Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeC5Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c1Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c2BurningEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c2Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c3RewardsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c3Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c4Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c5Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct ERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"modifyC2Burning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"modifyC3Rewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"idx\",\"type\":\"uint8\"}],\"name\":\"modifyChannelWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinstateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTracker\",\"outputs\":[{\"internalType\":\"contract IRewardTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellC1Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellC2Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellC3Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellC4Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellC5Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeC1Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeC2Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeC3Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeC4Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeC5Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setCompoundingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newTracker\",\"type\":\"address\"}],\"name\":\"setRewardTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"c1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"c2\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"c3\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"c4\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"c5\",\"type\":\"bool\"}],\"name\":\"setSwapChannels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTransferTaxEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapC1Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapC2Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapC3Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapC4Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapC5Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForC2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForC3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForC4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForC5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTaxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableC1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_c1Fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enableC2\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_c2Fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enableC3\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_c3Fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enableC4\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_c4Fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enableC5\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_c5Fee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableC1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_c1Fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enableC2\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_c2Fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enableC3\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_c3Fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enableC4\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_c4Fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enableC5\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_c5Fee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCollectedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCollectedNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawnRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AggregatedFinance", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f77d010c149c6bd02e88b843a6d6bbc01ffd386ddde250c77fa06b778ccf7d77"}]}