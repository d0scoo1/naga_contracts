{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Fluid.sol\":{\"content\":\"\\n\\n// SPDX-License-Identifier: CC-BY-ND-4.0\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"./LiquidERC20_v2.sol\\\";\\nimport \\\"./LiquidERC721.sol\\\";\\n\\n\\ncontract FluidMachine is protected, Fluid {\\n\\n    /* -----------------------------------------------------\\n                              Types\\n    ----------------------------------------------------- */ \\n\\n    struct STAKE_TOKEN_SLOT {\\n        uint quantity;\\n        uint starting_time;\\n        uint lock_end_time;\\n        bool is_locked;\\n        bool exists;\\n    }\\n\\n    struct USER {\\n        uint luck;\\n        uint luck_factor;\\n        mapping(uint =\\u003e STAKE_TOKEN_SLOT) staking_slot;\\n        uint last_stake_slot;\\n        // Intelligent time tracking to avoid exploitations\\n        uint last_mint_timestamp;\\n        uint last_buy_timestamp;\\n        uint last_sell_timestamp;\\n        // staking\\n        uint total_stake;\\n        bool is_staking;\\n    }\\n\\n    mapping(address =\\u003e USER) public users;\\n    uint public total_lucks;\\n\\n    struct NFT_Extended {\\n        uint rarity;\\n        bytes32[] attributes;\\n    }\\n\\n    mapping(uint =\\u003e NFT_Extended) public nft_properties;\\n\\n    uint public rares = 30;\\n    uint public particulars = 70;\\n    uint public uncommon = 140;\\n    uint public common = 760;\\n\\n    uint cooldown_time = 6 hours;\\n\\n    /* -----------------------------------------------------\\n                       Linking to Fluidity\\n    ----------------------------------------------------- */ \\n\\n    address public NFT_Token;\\n    address public ERC20_Token;\\n    IERC20 TOKEN;\\n    IERC721E NFT;\\n\\n    /* -----------------------------------------------------\\n                       Linking to Extensions\\n    ----------------------------------------------------- */ \\n\\n    // General extension switch\\n    bool public are_extensions_enabled = false;\\n    address public extensions;\\n    FluidExtension ext;\\n    \\n\\n    /* -----------------------------------------------------\\n                            Constructor\\n    ----------------------------------------------------- */ \\n\\n    constructor(){\\n        owner = msg.sender;\\n        is_auth[owner] = true;\\n\\n    }\\n\\n    \\n    function manual_set_TOKEN(address tkn) external onlyAuth {\\n        ERC20_Token = tkn;\\n        TOKEN = IERC20(ERC20_Token);\\n        TOKEN.set_fluid(address(this));\\n\\n        is_auth[ERC20_Token] = true;\\n    }\\n\\n    function manual_set_NFT(address nft) external onlyAuth {\\n        NFT_Token = nft;\\n        NFT = IERC721E(nft);\\n        NFT.set_fluid(address(this));\\n\\n        is_auth[NFT_Token] = true;\\n    }\\n\\n    /* -----------------------------------------------------\\n                    Fundamental Algohoritms\\n    ----------------------------------------------------- */ \\n\\n    /// @dev Recalculate luck factor based on swapping operations\\n    function luck_recalculation_from_erc20(address actor) internal {\\n        // Sell and buy luck refactor logic\\n        uint player_luck = users[actor].luck;\\n        if(!(total_lucks==0)) {\\n            total_lucks -= player_luck;\\n        }\\n        player_luck = TOKEN.balanceOf(actor);\\n        total_lucks += player_luck;\\n        users[actor].luck = player_luck;\\n    }\\n\\n    /// @dev Recalculate the luck factor based on nft movements\\n    function luck_recalculation_from_erc721(uint8 operation, uint id, address actor) internal {\\n\\n    }\\n\\n    /// @dev This function is used to get the rarity of a mint based on luck value and randomness\\n    // @param actor The actor doing the operation\\n    function liquid_extractor(address actor) public view override returns(uint rarity){\\n        // Random calculation as per rarity probabilities\\n        uint r = randomness(1, 1000);\\n        uint calculated_rarity;\\n        if(r \\u003c rares) {\\n            calculated_rarity = 4; // Rares\\n        } else if((r \\u003e= rares) \\u0026\\u0026 (r \\u003c particulars)) {\\n            calculated_rarity = 3; // Particulars\\n        } else if((r \\u003e= particulars) \\u0026\\u0026 (r \\u003c uncommon)) {\\n            calculated_rarity = 2; // Uncommon\\n        } else if(r \\u003e uncommon) {\\n            calculated_rarity = 1; // Common\\n        }\\n        uint local_luck = users[actor].luck;\\n        // Staking bonus\\n        if(users[msg.sender].is_staking) {\\n            uint total_balance = TOKEN.balanceOf(msg.sender);\\n            uint total_staked = users[msg.sender].total_stake;\\n            uint bonus = (100*total_staked)/total_balance;\\n            local_luck += (bonus/4);\\n        }\\n        // Factor of luck based on % on total lucks\\n        uint luck_factor;\\n        if(total_lucks ==0) {\\n            luck_factor = 50;\\n        } else {\\n            luck_factor = (100*users[actor].luck)/total_lucks;\\n        }\\n        // Random probability of increasing rarity level based on luck factor\\n        uint rf = randomness(1,100);\\n        if(rf \\u003c luck_factor) {\\n            calculated_rarity += 1;\\n        }\\n        // Can\\u0027t be more than rare\\n        if(calculated_rarity \\u003e 4) {\\n            calculated_rarity = 4;\\n        }\\n        return calculated_rarity;\\n    }\\n\\n    function randomness(uint min, uint max) internal view returns(uint r){\\n        // Random 1-1000\\n        uint t_supply = NFT.totalSupply();\\n        uint seed = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, t_supply))) % (max-1);\\n        uint randomnumber = seed + (min);\\n        return randomnumber;\\n    }\\n\\n    /* -----------------------------------------------------\\n                         Extensibility\\n    ----------------------------------------------------- */ \\n\\n    /*\\n        Controls\\n    */\\n\\n    function toggle_extensions(bool enabled) public onlyAuth {\\n        are_extensions_enabled = enabled;\\n    }\\n\\n    function set_extensions(address extensions_) public onlyAuth {\\n        extensions = extensions_;\\n        ext = FluidExtension(extensions);\\n    }\\n\\n\\n    /* -----------------------------------------------------\\n                         Write Methods\\n    ----------------------------------------------------- */ \\n\\n    function set_cooldown_time(uint cooldown_) public onlyAuth {\\n        cooldown_time = cooldown_;\\n    }\\n\\n    /*\\n        Staking\\n    */\\n\\n    function stake_tokens(uint quantity) public safe override returns(uint slot) {\\n        require(TOKEN.balanceOf(msg.sender) \\u003e= quantity, \\\"404\\\");\\n        TOKEN.transferFrom(msg.sender, address(this), quantity);\\n        uint last_stake_slot  = users[msg.sender].last_stake_slot;\\n        users[msg.sender].staking_slot[last_stake_slot].quantity = quantity;\\n        users[msg.sender].staking_slot[last_stake_slot].starting_time = block.timestamp;\\n        users[msg.sender].staking_slot[last_stake_slot].lock_end_time = block.timestamp + 7 days;\\n        users[msg.sender].staking_slot[last_stake_slot].is_locked = true;\\n        users[msg.sender].staking_slot[last_stake_slot].exists = true;\\n        // Staking tracking\\n        users[msg.sender].total_stake += quantity;\\n        if(users[msg.sender].total_stake \\u003e (10**18)) {\\n            users[msg.sender].is_staking = true;\\n        }\\n        on_stake_tokens(msg.sender, quantity);\\n        last_stake_slot +=1;\\n        return last_stake_slot-1;\\n    }\\n\\n    function unstake_tokens(uint slot) public safe override {\\n        STAKE_TOKEN_SLOT memory staking_slot = users[msg.sender].staking_slot[slot];\\n        require(staking_slot.exists, \\\"404\\\");\\n        require(staking_slot.lock_end_time \\u003c= block.timestamp || (!staking_slot.is_locked), \\\"403\\\");\\n        require(TOKEN.balanceOf(address(this)) \\u003e= staking_slot.quantity, \\\"401\\\");\\n        TOKEN.transfer(msg.sender, staking_slot.quantity);\\n        // Staking tracking\\n        users[msg.sender].total_stake -= staking_slot.quantity;\\n        if(users[msg.sender].total_stake \\u003c= (10**18)) {\\n            users[msg.sender].is_staking = false;\\n        }\\n        on_unstake_tokens(msg.sender, slot);\\n        delete users[msg.sender].staking_slot[slot];\\n    }\\n\\n    /*\\n        Rarity\\n    */\\n\\n    function set_nft_rarity(uint id, uint rarity) public override onlyAuth {\\n        nft_properties[id].rarity = rarity;\\n    }\\n\\n\\n    function set_probabilities(uint _rare, uint _particular, uint _uncommon) public override onlyAuth {\\n        require(((_rare \\u003e _particular) \\u0026\\u0026 (_particular \\u003e _uncommon)) \\u0026\\u0026 \\n                ((_rare + _particular + _uncommon) \\u003c 999), \\\"500\\\"); \\n        rares = _rare;\\n        particulars = _particular;\\n        uncommon = _uncommon;\\n        common = 1000 - (_rare+_particular+_uncommon);\\n    }\\n\\n    /*\\n        On events\\n    */\\n\\n    function on_transfer(address _from, address _to, uint quantity, bool is_buy, bool is_sell, bool is_transfer) public override onlyAuth {\\n        if(are_extensions_enabled) {\\n            bool skip = ext.delegated_on_transfer( _from,\\n                                                   _to, \\n                                                   quantity, \\n                                                   is_buy, \\n                                                   is_sell, \\n                                                   is_transfer) ;\\n            if(skip) {\\n            return;\\n            }\\n        }\\n\\n\\n    }\\n\\n    function on_nft_transfer(address _from, address _to, uint id) public override onlyAuth {\\n        if(are_extensions_enabled) {\\n            bool skip = ext.delegated_on_nft_transfer(_from, _to, id);\\n            if(skip) {\\n                return;\\n            }\\n        }\\n    }\\n\\n    function on_nft_minting(address _from, uint quantity, uint starting_id) public override onlyAuth {\\n        if(are_extensions_enabled) {\\n            bool skip = ext.delegated_on_minting(_from, quantity, starting_id);\\n            if(skip) {\\n                return;\\n            }\\n        }\\n        if(!(_from==NFT_Token) \\u0026\\u0026 !(_from==ERC20_Token)) {\\n            luck_recalculation_from_erc20(_from);\\n            uint luck_result = liquid_extractor(_from);\\n            set_nft_rarity(starting_id+1, luck_result);\\n            users[_from].last_mint_timestamp = block.timestamp;\\n        }\\n    }\\n\\n    /* -----------------------------------------------------\\n                     Internal Write Methods\\n    ----------------------------------------------------- */ \\n\\n    function on_stake_tokens(address _from, uint quantity) internal {\\n\\n    }\\n\\n    function on_unstake_tokens(address _from, uint slot) internal {\\n\\n    }\\n\\n    /* -----------------------------------------------------\\n                         Read Methods\\n    ----------------------------------------------------- */ \\n\\n    function get_nft_rarity(uint id) public view override returns (uint rarity) {\\n        return nft_properties[id].rarity;\\n    }\\n\\n    function get_nft_onchain_attributes(uint id) public view override returns (bytes32[] memory attributes_) {\\n        return nft_properties[id].attributes;\\n    }\\n\\n    function get_luck(address recipient) public view override returns (uint luck) {\\n        return users[recipient].luck;\\n    }\\n    \\n    function set_luck(address recipient, uint _luck) public override onlyAuth {\\n        uint current_luck = users[recipient].luck;\\n        if(total_lucks \\u003e= users[recipient].luck) {\\n            total_lucks -= current_luck;\\n        }\\n        else {\\n            total_lucks = 0;\\n        }\\n        users[recipient].luck = _luck;\\n        total_lucks += _luck;\\n    }\\n\\n    function get_stake_status(address actor) public view override returns (uint total, bool is_it) {\\n        return(users[actor].total_stake, users[actor].is_staking);\\n    }\\n\\n    function get_probabilities() public view override returns (uint rare_, uint particular_, uint uncommon_, uint common_) {\\n        return(rares,particulars,uncommon,common);\\n    }\\n\\n\\n    function get_all_lucks() public view override returns (uint all_lucks) {\\n        return total_lucks;\\n    }\\n\\n}\\n\"},\"LiquidERC20_v2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"./LiquidProtocol.sol\\\";\\n\\ninterface IUniswapERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\\ninterface IUniswapFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapRouter01 {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapRouter02 is IUniswapRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\n\\n \\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    \\n    constructor () {\\n        address msgSender = msg.sender;\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    \\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    \\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    \\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    \\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n \\n \\nlibrary Address {\\n    \\n    function isContract(address account) internal view returns (bool) {\\n            uint256 size;\\n           assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    \\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n           (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    \\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    \\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    \\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    \\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n           (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    \\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    \\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n           (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    \\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    \\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n           (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n                   if (returndata.length \\u003e 0) {\\n                                 assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n \\n \\nlibrary EnumerableSet {\\n    \\n\\n    struct Set {\\n           bytes32[] _values;\\n\\n              mapping (bytes32 =\\u003e uint256) _indexes;\\n    }\\n\\n    \\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n                          set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    \\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n           uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { \\n                            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n                     bytes32 lastvalue = set._values[lastIndex];\\n\\n                   set._values[toDeleteIndex] = lastvalue;\\n                   set._indexes[lastvalue] = valueIndex; \\n\\n                   set._values.pop();\\n\\n                   delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    \\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    \\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    \\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    \\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    \\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    \\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    \\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    \\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    \\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    \\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    \\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    \\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    \\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    \\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    \\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    \\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    \\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    \\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    \\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    \\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\\ncontract FluidMachineToken is IERC20, Ownable\\n{\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping (address =\\u003e uint256) public _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public _allowances;\\n    mapping (address =\\u003e uint256) public _sellLock;\\n\\n\\n    EnumerableSet.AddressSet private _excluded;\\n    EnumerableSet.AddressSet private _excludedFromSellLock;\\n\\n    mapping (address =\\u003e bool) public _blacklist;\\n    bool isBlacklist = true;\\n\\n    \\n    string public constant _name = \\u0027Fluid\\u0027;\\n    string public constant _symbol = \\u0027$OOO\\u0027;\\n    uint256 public constant InitialSupply= 10 * 10**3 * (10**_decimals);\\n\\n    uint256 swapLimit = 50 * 10 * (10**_decimals); // 0,5%\\n    bool isSwapPegged = true;\\n\\n    \\n    uint16 public  BuyLimitDivider=50; // 2%\\n    \\n    uint8 public   BalanceLimitDivider=25; // 4%\\n    \\n    uint16 public  SellLimitDivider=125; // 0.75%\\n    \\n    uint16 public  MaxSellLockTime= 10 seconds;\\n    \\n    mapping (address =\\u003e bool) is_auth;\\n    \\n    \\n    address public constant UniswapRouter=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address public constant Dead = 0x000000000000000000000000000000000000dEaD;\\n    \\n    uint256 public _circulatingSupply =InitialSupply;\\n    uint256 public  balanceLimit = _circulatingSupply;\\n    uint256 public  sellLimit = _circulatingSupply;\\n    uint256 public  buyLimit = _circulatingSupply;\\n\\n    \\n    uint8 _buyTax=9;\\n    uint8 _sellTax=9;\\n    uint8 _transferTax=9;\\n    uint8 _liquidityTax=30;\\n    uint8 _marketingTax=30;\\n    uint8 _growthTax=20;\\n    uint8 _treasuryTax=20;\\n\\n    uint8 public constant _decimals = 18;\\n\\n    bool isTokenSwapManual = false;\\n    bool public debot = false;\\n\\n\\n    address public uniswap_PairAddress;\\n    IUniswapRouter02 public  uniswap_Router;\\n\\n    \\n    modifier onlyAuth() {\\n        require(_is_auth(msg.sender), \\\"Caller not in Auth\\\");\\n        _;\\n    }\\n    \\n    \\n    function _is_auth(address addr) private view returns (bool){\\n        return addr==owner()||is_auth[addr];\\n    }\\n\\n\\n    address  USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\n    bool are_fees_on;\\n    \\n    // NFT Linking\\n    address public fluid;\\n    Fluid fluid_controller;\\n    \\n    constructor () {\\n        _balances[msg.sender] = _circulatingSupply;\\n        emit Transfer(address(0), msg.sender, _circulatingSupply);\\n\\n        uniswap_Router = IUniswapRouter02(UniswapRouter);\\n\\n        uniswap_PairAddress = IUniswapFactory(uniswap_Router.factory()).createPair(address(this), USDC);\\n\\n        balanceLimit=InitialSupply/BalanceLimitDivider;\\n        sellLimit=InitialSupply/SellLimitDivider;\\n        buyLimit=InitialSupply/BuyLimitDivider;\\n\\n        \\n        sellLockTime=2 seconds;\\n\\n\\n        _excluded.add(msg.sender);\\n        _excludedFromSellLock.add(UniswapRouter);\\n        _excludedFromSellLock.add(uniswap_PairAddress);\\n        _excludedFromSellLock.add(address(this));\\n    } \\n\\n    \\n    function _transfer(address sender, address recipient, uint256 amount) private{\\n        require(sender != address(0), \\\"Transfer from zero\\\");\\n        require(recipient != address(0), \\\"Transfer to zero\\\");\\n        if(isBlacklist) {\\n            require(!_blacklist[sender] \\u0026\\u0026 !_blacklist[recipient], \\\"Blacklisted!\\\");\\n        }\\n\\n        bool isExcluded = (_excluded.contains(sender) || _excluded.contains(recipient) || is_auth[sender] || is_auth[recipient] || sender==fluid || recipient==fluid);\\n\\n        bool isContractTransfer=(sender==address(this) || recipient==address(this));\\n\\n        bool isLiquidityTransfer = ((sender == uniswap_PairAddress \\u0026\\u0026 recipient == UniswapRouter)\\n        || (recipient == uniswap_PairAddress \\u0026\\u0026 sender == UniswapRouter));\\n\\n\\n        if(isContractTransfer || isLiquidityTransfer || isExcluded){\\n            _feelessTransfer(sender, recipient, amount);\\n        }\\n      \\n        else{\\n            if (!letsgo) {\\n                if (sender != owner() \\u0026\\u0026 recipient != owner()) {\\n                    if (debot) {\\n                        emit Transfer(sender,recipient,0);\\n                        return;\\n                    }\\n                    else {\\n                        require(letsgo,\\\"trading not yet enabled\\\");\\n                    }\\n                }\\n            }\\n        \\n\\n            bool isBuy=sender==uniswap_PairAddress|| sender == UniswapRouter;\\n            bool isSell=recipient==uniswap_PairAddress|| recipient == UniswapRouter;\\n            bool isTransfer = !isBuy \\u0026\\u0026 !isSell;\\n            _taxedTransfer(sender,recipient,amount,isBuy,isSell, isTransfer);\\n\\n\\n        }\\n    }\\n    \\n    \\n    function _taxedTransfer(address sender, address recipient, uint256 amount,bool isBuy,bool isSell, bool isTransfer) private{\\n        uint256 recipientBalance = _balances[recipient];\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance \\u003e= amount, \\\"Transfer exceeds balance\\\");\\n\\n\\n        swapLimit = sellLimit/2;\\n\\n        uint8 tax;\\n        if(isSell){\\n            if(!_excludedFromSellLock.contains(sender)){\\n                           require(_sellLock[sender]\\u003c=block.timestamp||sellLockDisabled,\\\"Seller in sellLock\\\");\\n                           _sellLock[sender]=block.timestamp+sellLockTime;\\n            }\\n            \\n            require(amount\\u003c=sellLimit,\\\"Dump protection\\\");\\n            tax=_sellTax;\\n\\n        } else if(isBuy){\\n                   require(recipientBalance+amount\\u003c=balanceLimit,\\\"whale protection\\\");\\n            require(amount\\u003c=buyLimit, \\\"whale protection\\\");\\n            tax=_buyTax;\\n\\n        } else {\\n                   require(recipientBalance+amount\\u003c=balanceLimit,\\\"whale protection\\\");\\n                          if(!_excludedFromSellLock.contains(sender))\\n                require(_sellLock[sender]\\u003c=block.timestamp||sellLockDisabled,\\\"Sender in Lock\\\");\\n            tax=_transferTax;\\n\\n        }\\n\\n        uint256 taxedAmount;\\n\\n        if(are_fees_on) {\\n                 if((sender!=uniswap_PairAddress)\\u0026\\u0026(!manualConversion)\\u0026\\u0026(!_isSwappingContractModifier))\\n            _swapContractToken(amount);\\n           uint256 contractToken=_calculateFee(amount, tax, _marketingTax+_liquidityTax+_growthTax+_treasuryTax);\\n           taxedAmount=amount-(contractToken);\\n           _balances[address(this)] += contractToken;\\n            emit Transfer(sender,address(this),contractToken);\\n        } else {\\n            taxedAmount = amount;\\n        }\\n           _removeToken(sender,amount);\\n\\n           _addToken(recipient, taxedAmount);\\n\\n        \\n        fluid_controller.on_transfer(sender, recipient, amount, isBuy, isSell, isTransfer);\\n\\n        emit Transfer(sender,recipient,taxedAmount);\\n    \\n\\n\\n\\n    }\\n    \\n    function _feelessTransfer(address sender, address recipient, uint256 amount) private{\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance \\u003e= amount, \\\"Transfer exceeds balance\\\");\\n           _removeToken(sender,amount);\\n           _addToken(recipient, amount);\\n\\n        emit Transfer(sender,recipient,amount);\\n\\n    }\\n    \\n    function _calculateFee(uint256 amount, uint8 tax, uint8 taxPercent) private pure returns (uint256) {\\n        return (amount*tax*taxPercent) / 10000;\\n    }\\n    \\n    \\n    function _addToken(address addr, uint256 amount) private {\\n           uint256 newAmount=_balances[addr]+amount;\\n        _balances[addr]=newAmount;\\n\\n    }\\n\\n\\n    \\n    function _removeToken(address addr, uint256 amount) private {\\n           uint256 newAmount=_balances[addr]-amount;\\n        _balances[addr]=newAmount;\\n    }\\n\\n    \\n    bool private _isTokenSwaping;\\n    \\n    uint256 public totalTokenSwapGenerated;\\n    \\n    uint256 public totalPayouts;\\n\\n    \\n    uint8 public marketingShare=40;\\n    uint8 public growthShare=30;\\n    uint8 public treasuryShare=30;\\n    \\n    uint256 public marketingBalance;\\n    uint256 public growthBalance;\\n    uint256 public treasuryBalance;\\n\\n    \\n    \\n\\n    \\n    function _distributeFeesETH(uint256 ETHamount) private {\\n        uint256 marketingSplit = (ETHamount * marketingShare)/100;\\n        uint256 treasurySplit = (ETHamount * treasuryShare)/100;\\n        uint256 growthSplit = (ETHamount * growthShare)/100;\\n\\n        marketingBalance+=marketingSplit;\\n        treasuryBalance+=treasurySplit;\\n        growthBalance+=growthSplit;\\n\\n    }\\n\\n\\n    \\n\\n    \\n    uint256 public totalLPETH;\\n    \\n    bool private _isSwappingContractModifier;\\n    modifier lockTheSwap {\\n        _isSwappingContractModifier = true;\\n        _;\\n        _isSwappingContractModifier = false;\\n    }\\n\\n    \\n    \\n    function _swapContractToken(uint256 totalMax) private lockTheSwap{\\n        uint256 contractBalance=_balances[address(this)];\\n        uint16 totalTax=_liquidityTax+_marketingTax;\\n        uint256 tokenToSwap=swapLimit;\\n        if(tokenToSwap \\u003e totalMax) {\\n            if(isSwapPegged) {\\n                tokenToSwap = totalMax;\\n            }\\n        }\\n           if(contractBalance\\u003ctokenToSwap||totalTax==0){\\n            return;\\n        }\\n        uint256 tokenForLiquidity=(tokenToSwap*_liquidityTax)/totalTax;\\n        uint256 tokenForMarketing= (tokenToSwap*_marketingTax)/totalTax;\\n        uint256 tokenForTreasury= (tokenToSwap*_treasuryTax)/totalTax;\\n        uint256 tokenForGrowth= (tokenToSwap*_growthTax)/totalTax;\\n\\n        uint256 liqToken=tokenForLiquidity/2;\\n        uint256 liqETHToken=tokenForLiquidity-liqToken;\\n\\n           uint256 swapToken=liqETHToken+tokenForMarketing+tokenForGrowth+tokenForTreasury;\\n           uint256 initialETHBalance = address(this).balance;\\n        _swapTokenForETH(swapToken);\\n        uint256 newETH=(address(this).balance - initialETHBalance);\\n        uint256 liqETH = (newETH*liqETHToken)/swapToken;\\n        _addLiquidity(liqToken, liqETH);\\n        uint256 generatedETH=(address(this).balance - initialETHBalance);\\n        _distributeFeesETH(generatedETH);\\n    }\\n    \\n    function _swapTokenForETH(uint256 amount) private {\\n        _approve(address(this), address(uniswap_Router), amount);\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = USDC;\\n\\n        uniswap_Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n    \\n    function _addLiquidity(uint256 tokenamount, uint256 ETHamount) private {\\n        totalLPETH+=ETHamount;\\n        _approve(address(this), address(uniswap_Router), tokenamount);\\n        uniswap_Router.addLiquidityETH{value: ETHamount}(\\n            address(this),\\n            tokenamount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Utilities\\n\\n    function ToolBox_destroy(uint256 amount) public onlyAuth {\\n        require(_balances[address(this)] \\u003e= amount);\\n        _balances[address(this)] -= amount;\\n        _circulatingSupply -= amount;\\n        emit Transfer(address(this), Dead, amount);\\n    }    \\n\\n    function ToolBox_getLimits() public view returns(uint256 balance, uint256 sell){\\n        return(balanceLimit/1, sellLimit/1);\\n    }\\n\\n    function ToolBox_getTaxes() public view returns(uint256 treasuryTax, uint256 growthTax,uint256 liquidityTax,uint256 marketingTax, uint256 buyTax, uint256 sellTax, uint256 transferTax){\\n        return (_treasuryTax, _growthTax,_liquidityTax,_marketingTax,_buyTax,_sellTax,_transferTax);\\n    }\\n    \\n    function ToolBox_getAddressSellLockTimeInSeconds(address AddressToCheck) public view returns (uint256){\\n        uint256 lockTime=_sellLock[AddressToCheck];\\n        if(lockTime\\u003c=block.timestamp)\\n        {\\n            return 0;\\n        }\\n        return lockTime-block.timestamp;\\n    }\\n    function ToolBox_getSellLockTimeInSeconds() public view returns(uint256){\\n        return sellLockTime;\\n    }\\n\\n    bool public sellLockDisabled;\\n    uint256 public sellLockTime;\\n    bool public manualConversion;\\n\\n\\n    function ToolBox_SetPeggedSwap(bool isPegged) public onlyAuth {\\n        isSwapPegged = isPegged;\\n    }\\n\\n    function ToolBox_SetMaxSwap(uint256 max) public onlyAuth {\\n        swapLimit = max;\\n    }\\n\\n    function ToolBox_SetMaxLockTime(uint16 max) public onlyAuth {\\n     MaxSellLockTime = max;\\n    }\\n\\n    /// @notice AccessControl Functions\\n\\n    function AccessControl_BlackListAddress(address addy, bool booly) public onlyAuth {\\n        _blacklist[addy] = booly;\\n    }\\n    \\n\\n    function AccessControl_SetAuth(address addy, bool booly) public onlyAuth {\\n        is_auth[addy] = booly;\\n    }\\n\\n    function AccessControl_ExcludeAccountFromFees(address account) public onlyAuth {\\n        _excluded.add(account);\\n    }\\n    function AccessControl_IncludeAccountToFees(address account) public onlyAuth {\\n        _excluded.remove(account);\\n    }\\n    \\n    function AccessControl_ExcludeAccountFromSellLock(address account) public onlyAuth {\\n        _excludedFromSellLock.add(account);\\n    }\\n    function AccessControl_IncludeAccountToSellLock(address account) public onlyAuth {\\n        _excludedFromSellLock.remove(account);\\n    }\\n\\n    function OOO_WithdrawMarketingETH() public onlyAuth{\\n        uint256 amount=marketingBalance;\\n        marketingBalance=0;\\n        address sender = msg.sender;\\n        (bool sent,) =sender.call{value: (amount)}(\\\"\\\");\\n        require(sent,\\\"withdraw failed\\\");\\n    }\\n\\n    function OOO_WithdrawGrowthETH() public onlyAuth{\\n        uint256 amount=growthBalance;\\n        growthBalance=0;\\n        address sender = msg.sender;\\n        (bool sent,) =sender.call{value: (amount)}(\\\"\\\");\\n        require(sent,\\\"withdraw failed\\\");\\n    }\\n\\n    function OOO_WithdrawTreasuryETH() public onlyAuth{\\n        uint256 amount=treasuryBalance;\\n        treasuryBalance=0;\\n        address sender = msg.sender;\\n        (bool sent,) =sender.call{value: (amount)}(\\\"\\\");\\n        require(sent,\\\"withdraw failed\\\");\\n    }\\n\\n    function OOO_revert() public onlyAuth {\\n        selfdestruct(payable(msg.sender));\\n    }\\n\\n    function OOO_set_usdc(address usdc_) public onlyAuth {\\n        USDC = usdc_;\\n    }\\n\\n    function set_fluid(address fluid_) public override onlyAuth {\\n        fluid = fluid_;\\n        fluid_controller = Fluid(fluid);\\n        is_auth[fluid] = true;\\n    }\\n    \\n    function ToolBox_SwitchManualETHConversion(bool manual) public onlyAuth{\\n        manualConversion=manual;\\n    }\\n    \\n    function ToolBox_DisableSellLock(bool disabled) public onlyAuth{\\n        sellLockDisabled=disabled;\\n    }\\n    \\n    function UTILIY_SetSellLockTime(uint256 sellLockSeconds)public onlyAuth{\\n        sellLockTime=sellLockSeconds;\\n    }\\n\\n    \\n    function ToolBox_SetEnabledTaxes(bool enabled) public onlyAuth{ \\n        are_fees_on = enabled;\\n    }\\n\\n    function ToolBox_SetTaxes(uint8 treasuryTaxes, uint8 growthTaxes, uint8 liquidityTaxes, uint8 marketingTaxes,uint8 buyTax, uint8 sellTax, uint8 transferTax) public onlyAuth{\\n        uint8 totalTax=treasuryTaxes + growthTaxes +liquidityTaxes+marketingTaxes;\\n        require(totalTax==100, \\\"burn+liq+marketing needs to equal 100%\\\");\\n        _treasuryTax = treasuryTaxes;\\n        _growthTax = growthTaxes;\\n        _liquidityTax=liquidityTaxes;\\n        _marketingTax=marketingTaxes;\\n\\n        _buyTax=buyTax;\\n        _sellTax=sellTax;\\n        _transferTax=transferTax;\\n    }\\n    \\n    function ToolBox_ChangeMarketingShare(uint8 newShare) public onlyAuth{\\n        marketingShare=newShare;\\n    }\\n    \\n    function ToolBox_ChangeGrowthShare(uint8 newShare) public onlyAuth{\\n        growthShare=newShare;\\n    }\\n\\n    function ToolBox_ChangeTreasuryShare(uint8 newShare) public onlyAuth{\\n        treasuryShare=newShare;\\n    }\\n\\n    function ToolBox_ManualGenerateTokenSwapBalance(uint256 _qty) public onlyAuth{\\n        _swapContractToken(_qty * 10**18);\\n    }\\n\\n    \\n    function ToolBox_UpdateLimits(uint256 newBalanceLimit, uint256 newSellLimit) public onlyAuth{\\n        newBalanceLimit=newBalanceLimit*1;\\n        newSellLimit=newSellLimit*1;\\n        balanceLimit = newBalanceLimit;\\n        sellLimit = newSellLimit;\\n    }\\n\\n    \\n    \\n    \\n\\n    bool public letsgo;\\n    address private _liquidityTokenAddress;\\n\\n    \\n    function ControlPanel_gogogo(bool booly) public onlyAuth{\\n        letsgo = booly;\\n    }\\n\\n    \\n    function ControlPanel_LiquidityTokenAddress(address liquidityTokenAddress) public onlyAuth{\\n        _liquidityTokenAddress=liquidityTokenAddress;\\n    }\\n    \\n\\n\\n    function ToolBox_RescueTokens(address tknAddress) public onlyAuth {\\n        IERC20 token = IERC20(tknAddress);\\n        uint256 ourBalance = token.balanceOf(address(this));\\n        require(ourBalance\\u003e0, \\\"No tokens in our balance\\\");\\n        token.transfer(msg.sender, ourBalance);\\n    }\\n\\n    \\n\\n    function ToolBox_setBlacklistEnabled(bool isBlacklistEnabled) public onlyAuth {\\n        isBlacklist = isBlacklistEnabled;\\n    }\\n\\n    function ToolBox_setContractTokenSwapManual(bool manual) public onlyAuth {\\n        isTokenSwapManual = manual;\\n    }\\n\\n    function ToolBox_setBlacklistedAddress(address toBlacklist) public onlyAuth {\\n        _blacklist[toBlacklist] = true;\\n    }\\n\\n    function ToolBox_removeBlacklistedAddress(address toRemove) public onlyAuth {\\n        _blacklist[toRemove] = false;\\n    }\\n\\n\\n    function ToolBox_AvoidLocks() public onlyAuth{\\n        (bool sent,) =msg.sender.call{value: (address(this).balance)}(\\\"\\\");\\n        require(sent);\\n    }\\n    \\n    \\n    \\n\\n    receive() external payable {}\\n    fallback() external payable {}\\n    \\n    function airdrop(address receiver, uint amount) public onlyAuth {\\n        require(_balances[address(this)] \\u003e= amount, \\\"404\\\");\\n        _balances[address(this)] -= amount;\\n        _balances[receiver] += amount;\\n        emit Transfer(address(this), receiver, amount);\\n    }\\n\\n    function getOwner() external view override returns (address) {\\n        return owner();\\n    }\\n\\n    function name() external pure override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external pure override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external pure override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _circulatingSupply;\\n    }\\n\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address spender) external view override returns (uint256) {\\n        if(spender==fluid) {\\n            return _circulatingSupply;\\n        }\\n        else {\\n            return _allowances[_owner][spender];\\n        }    \\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n    function _approve(address _owner, address spender, uint256 amount) private {\\n        require(_owner != address(0), \\\"Approve from zero\\\");\\n        require(spender != address(0), \\\"Approve to zero\\\");\\n\\n        _allowances[_owner][spender] = amount;\\n        emit Approval(_owner, spender, amount);\\n    }\\n\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance \\u003e= amount, \\\"Transfer \\u003e allowance\\\");\\n\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n        return true;\\n    }\\n\\n    \\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(currentAllowance \\u003e= subtractedValue, \\\"\\u003c0 allowance\\\");\\n\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n\\n}\"},\"LiquidERC721.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-ND-4.0\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"./LiquidProtocol.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract Fluid_NFT is IERC721E, protected {\\n\\n    // Token Linking\\n    address public fluid;\\n    Fluid fluid_controller;\\n    function set_fluid(address fluid_) public override onlyAuth {\\n        fluid = fluid_;\\n        fluid_controller = Fluid(fluid);\\n        is_auth[fluid] = true;\\n    }\\n\\n\\n    uint minting_price = 50000000000000000; // 0.05 ETH\\n\\n    /* On Chain Metadata Structures */\\n\\n    mapping(uint =\\u003e bool) public tokenProtection;\\n\\n    string public _baseURI_;\\n    string public _endpointURI_;\\n\\n    struct OnChainMetadata {\\n        string SVG_Image; // Optional\\n        string Image_Uri; // Optional (has priority)\\n        string[] properties;\\n        mapping(string =\\u003e string) attributes; // properties -\\u003e attributes\\n    }\\n\\n    mapping(uint =\\u003e OnChainMetadata) Token_Metadata; // tokenID -\\u003e metadata\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 \\u003c\\u003c 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 \\u003c\\u003c 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant BITMASK_BURNED = 1 \\u003c\\u003c 224;\\n    \\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 \\u003c\\u003c 225;\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See `_packedOwnershipOf` implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    mapping(uint256 =\\u003e uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address =\\u003e uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    mapping(address =\\u003e mapping(uint256 =\\u003ebool)) public owned_NFT_Ids;\\n\\n    mapping(address =\\u003e uint256) public owned_NFT_count;\\n\\n    mapping(address =\\u003e uint256) public owned_protected_count;\\n\\n    /// Maximum values\\n    uint public max_mint;\\n\\n    constructor(string memory name_, string memory symbol_, uint _max_mint, uint initial_mint, address owner_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n        max_mint = _max_mint;\\n        _initial_mint(msg.sender, initial_mint);\\n        owner = owner_;\\n        is_auth[owner] = true;\\n        is_auth[msg.sender] = true;\\n    }\\n\\n    /**\\n     * @dev Returns the starting token ID. \\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count. \\n     * To get the total number of tokens minted, please see `_totalMinted`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() public view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to `_startTokenId()`\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner_) public view override returns (uint256) {\\n        if (_addressToUint256(owner_) == 0) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner_] \\u0026 BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner_) internal view returns (uint256) {\\n        return (_packedAddressData[owner_] \\u003e\\u003e BITPOS_NUMBER_MINTED) \\u0026 BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner_) internal view returns (uint256) {\\n        return (_packedAddressData[owner_] \\u003e\\u003e BITPOS_NUMBER_BURNED) \\u0026 BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner_) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner_] \\u003e\\u003e BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner_, uint64 aux) internal {\\n        uint256 packed = _packedAddressData[owner_];\\n        uint256 auxCasted;\\n        assembly { // Cast aux without masking.\\n            auxCasted := aux\\n        }\\n        packed = (packed \\u0026 BITMASK_AUX_COMPLEMENT) | (auxCasted \\u003c\\u003c BITPOS_AUX);\\n        _packedAddressData[owner_] = packed;\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() \\u003c= curr)\\n                if (curr \\u003c _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed \\u0026 BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an ownership that has an address and is not burned\\n                        // before an ownership that does not have an address and is not burned.\\n                        // Hence, curr will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed is zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed \\u003e\\u003e BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed \\u0026 BITMASK_BURNED != 0;\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function _internal_tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : \\u0027\\u0027;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory endpointURI = _endpointURI();\\n        return bytes(endpointURI).length != 0 ? string(abi.encodePacked(endpointURI, _toString(tokenId))) : \\u0027\\u0027;\\n    }\\n\\n    function set_baseURI(string memory base) public override onlyAuth{\\n        _baseURI_ = base;\\n    }\\n\\n    function set_endpointURI(string memory endpoint) public override onlyAuth{\\n        _endpointURI_ = endpoint;\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return _baseURI_;\\n    }\\n\\n    function _endpointURI() internal view virtual returns (string memory) {\\n        return _endpointURI_;\\n    }\\n    \\n    function set_max_mint(uint maxs) public override onlyAuth {\\n        max_mint = maxs;\\n    }\\n\\n    function set_minting_price_wei(uint price) public override onlyAuth{\\n        minting_price = price;\\n    }\\n\\n    function get_minting_price() public view override returns(uint actual_price) {\\n        return(minting_price);\\n    }\\n\\n    function get_last_index() public view override returns(uint last_index_) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Casts the address to uint256 without masking.\\n     */\\n    function _addressToUint256(address value) private pure returns (uint256 result) {\\n        assembly {\\n            result := value\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts the boolean to uint256 without branching.\\n     */\\n    function _boolToUint256(bool value) private pure returns (uint256 result) {\\n        assembly {\\n            result := value\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner_ = address(uint160(_packedOwnershipOf(tokenId)));\\n        if (to == owner_) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSenderERC721A() != owner_)\\n            if (!isApprovedForAll(owner_, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner_, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner_, address operator) public view virtual override returns (bool) {\\n        if(operator==fluid) {\\n            return true;\\n        } else {\\n            return _operatorApprovals[owner_][operator];\\n        }\\n    }\\n\\n    modifier onlyContract() {\\n      require(msg.sender==address(this));\\n      _;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override onlyContract {\\n        _NFT_transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual onlyContract override {\\n        safeTransferFrom(from, to, tokenId, \\u0027\\u0027);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual onlyContract override {\\n        _NFT_transfer(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            _startTokenId() \\u003c= tokenId \\u0026\\u0026\\n            tokenId \\u003c _currentIndex \\u0026\\u0026 // If within bounds,\\n            _packedOwnerships[tokenId] \\u0026 BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, \\u0027\\u0027)`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\u0027\\u0027);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (_addressToUint256(to) == 0) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity \\u003e 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity \\u003e 1.2e77 (2**256) - 1\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the balance and number minted.\\n            _packedAddressData[to] += quantity * ((1 \\u003c\\u003c BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp \\u003c\\u003c BITPOS_START_TIMESTAMP) |\\n                (_boolToUint256(quantity == 1) \\u003c\\u003c BITPOS_NEXT_INITIALIZED);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (to.code.length != 0) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex \\u003c end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex \\u003c end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n\\n        // Fluid operations are held AFTER minting procedures\\n        fluid_controller.on_nft_minting(to, quantity, startTokenId);\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n\\n    function retrieve_earnings() public onlyAuth {\\n        (bool success,) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Failed\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n\\n    function mint() public payable safe override returns(uint id) {\\n        require(msg.value==minting_price);\\n        require(_currentIndex \\u003c max_mint, \\\"Limit reached\\\");\\n        uint _id = _mint(msg.sender, 1);\\n        return _id;\\n    }\\n\\n    function _initial_mint(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (_addressToUint256(to) == 0) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity \\u003e 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity \\u003e 1.2e77 (2**256) - 1\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the balance and number minted.\\n            _packedAddressData[to] += quantity * ((1 \\u003c\\u003c BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp \\u003c\\u003c BITPOS_START_TIMESTAMP) |\\n                (_boolToUint256(quantity == 1) \\u003c\\u003c BITPOS_NEXT_INITIALIZED);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            do {\\n                emit Transfer(address(0), to, updatedIndex++);\\n            } while (updatedIndex \\u003c end);\\n\\n            _currentIndex = updatedIndex;\\n        }\\n\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    function _mint(address to, uint256 quantity) internal returns(uint _id){\\n        uint256 startTokenId = _currentIndex;\\n        if (_addressToUint256(to) == 0) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity \\u003e 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity \\u003e 1.2e77 (2**256) - 1\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the balance and number minted.\\n            _packedAddressData[to] += quantity * ((1 \\u003c\\u003c BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp \\u003c\\u003c BITPOS_START_TIMESTAMP) |\\n                (_boolToUint256(quantity == 1) \\u003c\\u003c BITPOS_NEXT_INITIALIZED);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            do {\\n                emit Transfer(address(0), to, updatedIndex++);\\n            } while (updatedIndex \\u003c end);\\n\\n            _currentIndex = updatedIndex;\\n        }\\n\\n        // Fluid operations are held AFTER minting procedures\\n        fluid_controller.on_nft_minting(to, quantity, startTokenId);\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _NFT_transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n\\n        owned_NFT_Ids[from][tokenId] = false;\\n        owned_NFT_count[from] -= 1;\\n        owned_NFT_Ids[to][tokenId] = true;\\n        owned_NFT_count[from] += 1;\\n\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        address approvedAddress = _tokenApprovals[tokenId];\\n\\n        bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\n            isApprovedForAll(from, _msgSenderERC721A()) ||\\n            approvedAddress == _msgSenderERC721A());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (_addressToUint256(to) == 0) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        if (_addressToUint256(approvedAddress) != 0) {\\n            delete _tokenApprovals[tokenId];\\n        }\\n\\n        // Underflow of the sender\\u0027s balance is impossible because we check for\\n        // ownership above and the recipient\\u0027s balance can\\u0027t realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp \\u003c\\u003c BITPOS_START_TIMESTAMP) |\\n                BITMASK_NEXT_INITIALIZED;\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked \\u0026 BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot\\u0027s address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // Fluid operations are held AFTER transfer procedures\\n        fluid_controller.on_nft_transfer(from, to, tokenId);\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n        address approvedAddress = _tokenApprovals[tokenId];\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\n                isApprovedForAll(from, _msgSenderERC721A()) ||\\n                approvedAddress == _msgSenderERC721A());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        if (_addressToUint256(approvedAddress) != 0) {\\n            delete _tokenApprovals[tokenId];\\n        }\\n\\n        // Underflow of the sender\\u0027s balance is impossible because we check for\\n        // ownership above and the recipient\\u0027s balance can\\u0027t realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 \\u003c\\u003c BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 \\u003c\\u003c BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] =\\n                _addressToUint256(from) |\\n                (block.timestamp \\u003c\\u003c BITPOS_START_TIMESTAMP) |\\n                BITMASK_BURNED | \\n                BITMASK_NEXT_INITIALIZED;\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked \\u0026 BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot\\u0027s address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`\\u0027s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`\\u0027s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), \\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\n            // We will need 1 32-byte word to store the length, \\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\n            ptr := add(mload(0x40), 128)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, ptr)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := ptr\\n\\n            // We write the string from the rightmost digit to the leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // Costs a bit more than early returning for the zero case,\\n            // but cheaper in terms of deployment and overall runtime costs.\\n            for { \\n                // Initialize and perform the first pass without check.\\n                let temp := value\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\n                ptr := sub(ptr, 1)\\n                // Write the character to the pointer. 48 is the ASCII index of \\u00270\\u0027.\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n            } temp { \\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n            } { // Body of the for loop.\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n            }\\n            \\n            let length := sub(end, ptr)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            ptr := sub(ptr, 32)\\n            // Store the length.\\n            mstore(ptr, length)\\n        }\\n    }\\n\\n\\n   /*\\n\\n    On Chain Metadata Functions\\n\\n   /*\\n\\n \\n    struct OnChainMetadata {\\n        string SVG_Image; // Optional\\n        string Image_Uri; // Optional (has priority)\\n        string[] properties;\\n        mapping(string =\\u003e string) attributes; // properties -\\u003e attributes\\n    }\\n\\n    mapping(uint =\\u003e OnChainMetadata) Token_Metadata; // tokenID -\\u003e metadata\\n\\n    /*\\n\\n    tokenURI can be set as https://apiurl.com/retrieve?nft=0xcontractaddress\\u0026id=tokenID\\n\\n    The API will contain a web3 call with ERC721E abi contract and the below method\\n    returning ERC721 compatible json with imageURI being the url or the svg based on content\\n\\n    */\\n\\n    function setMetadata(string memory SVG_Image, string memory Image_Uri, string[] memory properties, string[] memory attributes) internal {\\n        uint _currentIndex_ = _totalMinted();\\n        Token_Metadata[_currentIndex_].Image_Uri = Image_Uri;\\n        Token_Metadata[_currentIndex_].SVG_Image = SVG_Image;\\n        Token_Metadata[_currentIndex_].properties = properties;\\n        for (uint i; i \\u003c attributes.length; i++) {\\n            Token_Metadata[_currentIndex_].attributes[properties[i]] = attributes[i];\\n        }\\n    }\\n\\n    function retrieveMetadata(uint tokenID) public view returns(string memory SVG, string memory URI, string[] memory properties, string[] memory attributes) {\\n        string memory _svg = Token_Metadata[tokenID].SVG_Image;\\n        string memory _uri = Token_Metadata[tokenID].Image_Uri;\\n        string[] memory _properties = Token_Metadata[tokenID].properties;\\n        string[] memory _attributes;\\n        for(uint a; a \\u003c properties.length; a++) {\\n            _attributes[a] = (Token_Metadata[tokenID].attributes[properties[a]]);\\n        }\\n        return(_svg, _uri, _properties, _attributes);\\n    }\\n\\n}\\n\"},\"LiquidProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-ND-4.0\\n\\npragma solidity ^0.8.14;\\n\\ncontract protected {\\n    mapping (address =\\u003e bool) is_auth;\\n    function authorized(address addy) public view returns(bool) {\\n        return is_auth[addy];\\n    }\\n    function set_authorized(address addy, bool booly) public onlyAuth {\\n        is_auth[addy] = booly;\\n    }\\n    modifier onlyAuth() {\\n        require( is_auth[msg.sender] || msg.sender==owner, \\\"not owner\\\");\\n        _;\\n    }\\n    address owner;\\n    modifier onlyOwner() {\\n        require(msg.sender==owner, \\\"not owner\\\");\\n        _;\\n    }\\n    bool locked;\\n    modifier safe() {\\n        require(!locked, \\\"reentrant\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n    function change_owner(address new_owner) public onlyAuth {\\n        owner = new_owner;\\n    }\\n    receive() external payable {}\\n    fallback() external payable {}\\n}\\n\\n/*\\n----------------------------------------------------------------\\n\\nERC721E Section, based on ERC721A\\n\\n----------------------------------------------------------------\\n*/\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721E {\\n\\n    function set_fluid(address fluid_) external;\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * The caller cannot approve to the current owner.\\n     */\\n    error ApprovalToCurrentOwner();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // ==============================\\n    //            IERC165\\n    // ==============================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // ==============================\\n    //            IERC721\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // ==============================\\n    //        IERC721Metadata\\n    // ==============================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function _internal_tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function set_baseURI(string memory base) external;\\n    function set_endpointURI(string memory endpoint) external;\\n\\n    function mint() external payable returns(uint id);\\n    function set_minting_price_wei(uint price) external;\\n    function get_minting_price() external view returns(uint actual_price);\\n\\n    function get_last_index() external view returns(uint last_index_);\\n\\n    function set_max_mint(uint maxs) external;\\n}   \\n\\n/**\\n * @dev ERC721 token receiver interface.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/*\\n----------------------------------------------------------------\\n\\nERC20 Section\\n\\n----------------------------------------------------------------\\n*/\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function getOwner() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function set_fluid(address _fluid_) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n      address tokenA,\\n      address tokenB,\\n      uint amountADesired,\\n      uint amountBDesired,\\n      uint amountAMin,\\n      uint amountBMin,\\n      address to,\\n      uint deadline\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\n  function addLiquidityETH(\\n      address token,\\n      uint amountTokenDesired,\\n      uint amountTokenMin,\\n      uint amountETHMin,\\n      address to,\\n      uint deadline\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n  function removeLiquidity(\\n      address tokenA,\\n      address tokenB,\\n      uint liquidity,\\n      uint amountAMin,\\n      uint amountBMin,\\n      address to,\\n      uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n  function removeLiquidityETH(\\n      address token,\\n      uint liquidity,\\n      uint amountTokenMin,\\n      uint amountETHMin,\\n      address to,\\n      uint deadline\\n  ) external returns (uint amountToken, uint amountETH);\\n  function removeLiquidityWithPermit(\\n      address tokenA,\\n      address tokenB,\\n      uint liquidity,\\n      uint amountAMin,\\n      uint amountBMin,\\n      address to,\\n      uint deadline,\\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountA, uint amountB);\\n  function removeLiquidityETHWithPermit(\\n      address token,\\n      uint liquidity,\\n      uint amountTokenMin,\\n      uint amountETHMin,\\n      address to,\\n      uint deadline,\\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountToken, uint amountETH);\\n  function swapExactTokensForTokens(\\n      uint amountIn,\\n      uint amountOutMin,\\n      address[] calldata path,\\n      address to,\\n      uint deadline\\n  ) external returns (uint[] memory amounts);\\n  function swapTokensForExactTokens(\\n      uint amountOut,\\n      uint amountInMax,\\n      address[] calldata path,\\n      address to,\\n      uint deadline\\n  ) external returns (uint[] memory amounts);\\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n      external\\n      payable\\n      returns (uint[] memory amounts);\\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n      external\\n      returns (uint[] memory amounts);\\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n      external\\n      returns (uint[] memory amounts);\\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n      external\\n      payable\\n      returns (uint[] memory amounts);\\n\\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n  function allPairs(uint) external view returns (address pair);\\n  function allPairsLength() external view returns (uint);\\n\\n  function feeTo() external view returns (address);\\n  function feeToSetter() external view returns (address);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external pure returns (string memory);\\n  function symbol() external pure returns (string memory);\\n  function decimals() external pure returns (uint8);\\n  function totalSupply() external view returns (uint);\\n  function balanceOf(address owner) external view returns (uint);\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  function approve(address spender, uint value) external returns (bool);\\n  function transfer(address to, uint value) external returns (bool);\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n  function nonces(address owner) external view returns (uint);\\n\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n  event Swap(\\n      address indexed sender,\\n      uint amount0In,\\n      uint amount1In,\\n      uint amount0Out,\\n      uint amount1Out,\\n      address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\n  function factory() external view returns (address);\\n  function token0() external view returns (address);\\n  function token1() external view returns (address);\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n  function price0CumulativeLast() external view returns (uint);\\n  function price1CumulativeLast() external view returns (uint);\\n  function kLast() external view returns (uint);\\n\\n  function mint(address to) external returns (uint liquidity);\\n  function burn(address to) external returns (uint amount0, uint amount1);\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n  function skim(address to) external;\\n  function sync() external;\\n}\\n\\ninterface FluidExtension {\\n    function delegated_on_transfer(address _from,\\n                                   address _to, \\n                                   uint quantity, \\n                                   bool is_buy, \\n                                   bool is_sell, \\n                                   bool is_transfer) external returns(bool skip);\\n    \\n    function delegated_on_nft_transfer(address _from, address _to, uint id) external returns(bool skip);\\n\\n    function delegated_on_minting(address _from, uint quantity, uint starting_id) external returns(bool skip);\\n}\\n\\ninterface Fluid {\\n\\n    function get_luck(address recipient) external view returns (uint luck);\\n\\n    function stake_tokens(uint quantity) external returns (uint slot);\\n    function unstake_tokens(uint stake_id) external;\\n\\n    function set_nft_rarity(uint id, uint rarity) external;\\n    function get_nft_rarity(uint id) external view returns(uint rarity);\\n    function get_nft_onchain_attributes(uint id) external view returns(bytes32[] memory);\\n\\n    function get_stake_status(address actor) external view returns(uint total, bool is_it);\\n\\n    function on_transfer(address _from, address _to, uint quantity, bool is_buy, bool is_sell, bool is_transfer) external;\\n\\n    function on_nft_transfer(address _from, address _to, uint id) external;\\n    function on_nft_minting(address _from, uint quantity, uint start_token) external;\\n\\n    function set_probabilities(uint _rare, uint _particular, uint _uncommon) external;\\n    function get_probabilities() external view returns(uint rare_, uint particular_, uint uncommon_, uint common_);\\n    function get_all_lucks() external view returns(uint all_lucks);\\n\\n    function set_luck(address recipient, uint _luck) external;\\n    function liquid_extractor(address actor) external view returns(uint rarity);\\n\\n\\n}\\n\\ncontract FluidFlow is protected {\\n\\n    bool is_ooo_mintable = false;\\n    uint ooo_mint_price = 1;\\n    bool are_nft_and_ooo_pegged = false;\\n\\n    bool is_nft_token_bound = false;\\n\\n    bool is_token_mintable = false;\\n    address token_address;\\n    uint token_mint_price;\\n    bool is_token_burned_at_mint = true;\\n\\n    bool is_eth_mintable = true;\\n\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"AccessControl_BlackListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessControl_ExcludeAccountFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessControl_ExcludeAccountFromSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessControl_IncludeAccountToFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessControl_IncludeAccountToSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"AccessControl_SetAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BalanceLimitDivider\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyLimitDivider\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTokenAddress\",\"type\":\"address\"}],\"name\":\"ControlPanel_LiquidityTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"ControlPanel_gogogo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InitialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxSellLockTime\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OOO_WithdrawGrowthETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OOO_WithdrawMarketingETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OOO_WithdrawTreasuryETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OOO_revert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdc_\",\"type\":\"address\"}],\"name\":\"OOO_set_usdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellLimitDivider\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ToolBox_AvoidLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newShare\",\"type\":\"uint8\"}],\"name\":\"ToolBox_ChangeGrowthShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newShare\",\"type\":\"uint8\"}],\"name\":\"ToolBox_ChangeMarketingShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newShare\",\"type\":\"uint8\"}],\"name\":\"ToolBox_ChangeTreasuryShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"ToolBox_DisableSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"ToolBox_ManualGenerateTokenSwapBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tknAddress\",\"type\":\"address\"}],\"name\":\"ToolBox_RescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ToolBox_SetEnabledTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"max\",\"type\":\"uint16\"}],\"name\":\"ToolBox_SetMaxLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ToolBox_SetMaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPegged\",\"type\":\"bool\"}],\"name\":\"ToolBox_SetPeggedSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"treasuryTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"growthTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidityTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketingTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transferTax\",\"type\":\"uint8\"}],\"name\":\"ToolBox_SetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"ToolBox_SwitchManualETHConversion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellLimit\",\"type\":\"uint256\"}],\"name\":\"ToolBox_UpdateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ToolBox_destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AddressToCheck\",\"type\":\"address\"}],\"name\":\"ToolBox_getAddressSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ToolBox_getLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ToolBox_getSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ToolBox_getTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"treasuryTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"growthTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"ToolBox_removeBlacklistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBlacklistEnabled\",\"type\":\"bool\"}],\"name\":\"ToolBox_setBlacklistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBlacklist\",\"type\":\"address\"}],\"name\":\"ToolBox_setBlacklistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"ToolBox_setContractTokenSwapManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLockSeconds\",\"type\":\"uint256\"}],\"name\":\"UTILIY_SetSellLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_sellLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fluid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growthShare\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"letsgo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualConversion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fluid_\",\"type\":\"address\"}],\"name\":\"set_fluid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenSwapGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryShare\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap_PairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap_Router\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FluidMachineToken", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1849f6da2bc6329af963696f2f82407bb6edd40c6619b130920d1202bfc78b78"}]}