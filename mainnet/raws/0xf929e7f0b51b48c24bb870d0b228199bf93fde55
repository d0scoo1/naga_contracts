{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: localhost/SetExchange/@openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: localhost/SetExchange/common/TokenRecipient.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\ncontract TokenRecipient{\r\n    event ReceivedEther(address indexed sender, uint amount);\r\n    event ReceivedTokens(address indexed from, uint256 value, address indexed token, bytes extraData);\r\n\r\n    function receiveApproval(address from, uint256 value, address token, bytes memory extraData) public {\r\n        IERC20 t = IERC20(token);\r\n        require(t.transferFrom(from, address(this), value), \"ERC20 token transfer failed\");\r\n        emit ReceivedTokens(from, value, token, extraData);\r\n    }\r\n   \r\n    fallback () payable external {\r\n        emit ReceivedEther(msg.sender, msg.value);\r\n    }\r\n    receive () payable external {\r\n        emit ReceivedEther(msg.sender, msg.value);\r\n    }\r\n}\r\n// File: localhost/SetExchange/registry/proxy/OwnedUpgradeabilityStorage.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\ncontract OwnedUpgradeabilityStorage {\r\n\r\n    address internal _implementation;\r\n    address private _upgradeabilityOwner;\r\n    \r\n    function upgradeabilityOwner() public view returns (address) {\r\n        return _upgradeabilityOwner;\r\n    }\r\n\r\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\r\n        _upgradeabilityOwner = newUpgradeabilityOwner;\r\n    }\r\n}\r\n\r\n// File: localhost/SetExchange/registry/proxy/Proxy.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\nabstract contract Proxy {\r\n  \r\n    function implementation() virtual public view returns (address);\r\n    function proxyType() virtual public pure returns (uint256 proxyTypeId);\r\n    \r\n    function _fallback() private{\r\n        \r\n        address _impl = implementation();\r\n        require(_impl != address(0), \"Proxy implementation required\");\r\n\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n    \r\n    \r\n    fallback () payable external{\r\n      _fallback();\r\n    }\r\n    \r\n    receive() payable external{\r\n        _fallback();\r\n    }\r\n    \r\n}\r\n\r\n// File: localhost/SetExchange/registry/proxy/OwnedUpgradeabilityProxy.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\n\r\ncontract OwnedUpgradeabilityProxy is Proxy, OwnedUpgradeabilityStorage {\r\n    \r\n    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\r\n    event Upgraded(address indexed implementation);\r\n    \r\n    function implementation() override public view returns (address) {\r\n        return _implementation;\r\n    }\r\n   \r\n    function proxyType() override public pure returns (uint256 proxyTypeId) {\r\n        return 2;\r\n    }\r\n    \r\n    function _upgradeTo(address implem) internal {\r\n        require(_implementation != implem, \"Proxy already uses this implementation\");\r\n        _implementation = implem;\r\n        emit Upgraded(implem);\r\n    }\r\n    \r\n    modifier onlyProxyOwner() {\r\n        require(msg.sender == proxyOwner(), \"Only the proxy owner can call this method\");\r\n        _;\r\n    }\r\n    \r\n    function proxyOwner() public view returns (address) {\r\n        return upgradeabilityOwner();\r\n    }\r\n   \r\n    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\r\n        require(newOwner != address(0), \"New owner cannot be the null address\");\r\n        emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\r\n        setUpgradeabilityOwner(newOwner);\r\n    }\r\n   \r\n    //\u91cd\u70b9\u662f\u4e0b\u9762\u7684 \r\n   \r\n    function upgradeTo(address implem) public onlyProxyOwner {\r\n        _upgradeTo(implem);\r\n    }\r\n   \r\n    function upgradeToAndCall(address implem, bytes memory data) payable public onlyProxyOwner {\r\n        upgradeTo(implem);\r\n        (bool success,) = address(this).delegatecall(data);\r\n        require(success, \"Call failed after proxy upgrade\");\r\n    }\r\n}\r\n\r\n// File: localhost/SetExchange/registry/OwnableDelegateProxy.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\ncontract OwnableDelegateProxy is OwnedUpgradeabilityProxy {\r\n\r\n\r\n    constructor(address owner, address initialImplementation, bytes memory data)  {\r\n        setUpgradeabilityOwner(owner);\r\n        _upgradeTo(initialImplementation);\r\n        (bool success,) = initialImplementation.delegatecall(data);\r\n        require(success, \"OwnableDelegateProxy failed implementation\");\r\n    }\r\n    \r\n\r\n}\r\n// File: localhost/SetExchange/registry/ProxyRegistryInterface.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\ninterface ProxyRegistryInterface {\r\n    function delegateProxyImplementation() external returns (address);\r\n    function proxies(address owner) external returns (OwnableDelegateProxy);\r\n}\r\n\r\n// File: localhost/SetExchange/@openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: localhost/SetExchange/@openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: localhost/SetExchange/registry/ProxyRegistry.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\n\r\n\r\ncontract ProxyRegistry is Ownable, ProxyRegistryInterface {\r\n    \r\n    address public override delegateProxyImplementation;\r\n    mapping(address => OwnableDelegateProxy) public override proxies;\r\n    //Contracts pending access. \r\n    mapping(address => uint) public pending;\r\n    //Contracts allowed to call those proxies. \r\n    mapping(address => bool) public contracts;\r\n    uint public DELAY_PERIOD = 2 weeks;\r\n\r\n    function startGrantAuthentication (address addr) public onlyOwner{\r\n        require(!contracts[addr] && pending[addr] == 0, \"Contract is already allowed in registry, or pending\");\r\n        pending[addr] = block.timestamp;\r\n    }\r\n\r\n    function endGrantAuthentication (address addr) public onlyOwner{\r\n        require(!contracts[addr] && pending[addr] != 0 && ((pending[addr] + DELAY_PERIOD) < block.timestamp), \"Contract is no longer pending or has already been approved by registry\");\r\n        pending[addr] = 0;\r\n        contracts[addr] = true;\r\n    }\r\n\r\n    function revokeAuthentication (address addr) public onlyOwner{\r\n        contracts[addr] = false;\r\n    }\r\n    \r\n     function grantAuthentication (address addr) public onlyOwner{\r\n        contracts[addr] = true;\r\n    }\r\n   \r\n    function registerProxyOverride() public returns (OwnableDelegateProxy proxy){\r\n        proxy = new OwnableDelegateProxy(msg.sender, delegateProxyImplementation, abi.encodeWithSignature(\"initialize(address,address)\", msg.sender, address(this)));\r\n        proxies[msg.sender] = proxy;\r\n        return proxy;\r\n    }\r\n    \r\n    function registerProxyFor(address user) public returns (OwnableDelegateProxy proxy){\r\n        require(address(proxies[user]) == address(0), \"User already has a proxy\");\r\n        proxy = new OwnableDelegateProxy(user, delegateProxyImplementation, abi.encodeWithSignature(\"initialize(address,address)\", user, address(this)));\r\n        proxies[user] = proxy;\r\n        return proxy;\r\n    }\r\n    \r\n     function registerProxy() public returns (OwnableDelegateProxy proxy){\r\n        return registerProxyFor(msg.sender);\r\n    }\r\n\r\n    function transferAccessTo(address from, address to) public{\r\n        OwnableDelegateProxy proxy = proxies[from];\r\n        /* CHECKS */\r\n        require(msg.sender == from, \"Proxy transfer can only be called by the proxy\");\r\n        require(address(proxies[to]) == address(0), \"Proxy transfer has existing proxy as destination\");\r\n        /* EFFECTS */\r\n        delete proxies[from];\r\n        proxies[to] = proxy;\r\n    }\r\n\r\n}\r\n// File: localhost/SetExchange/registry/AuthenticatedProxy.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\n\r\n\r\ncontract AuthenticatedProxy is TokenRecipient, OwnedUpgradeabilityStorage {\r\n\r\n    bool initialized = false;\r\n    address public user;\r\n    ProxyRegistry public registry;\r\n    bool public revoked;\r\n    enum HowToCall { Call, DelegateCall }\r\n    event Revoked(bool revoked);\r\n    function initialize (address addrUser, ProxyRegistry addrRegistry) public {\r\n        require(!initialized, \"Authenticated proxy already initialized\");\r\n        initialized = true;\r\n        user = addrUser;\r\n        registry = addrRegistry;\r\n    }\r\n   //Set the revoked flag (allows a user to revoke ProxyRegistry access)\r\n    function setRevoke(bool revoke) public{\r\n        require(msg.sender == user, \"Authenticated proxy can only be revoked by its user\");\r\n        revoked = revoke;\r\n        emit Revoked(revoke);\r\n    }\r\n    //Execute a message call from the proxy contract\r\n    function proxy(address dest, HowToCall howToCall, bytes memory data) public  returns (bool result){\r\n        require(msg.sender == user || (!revoked && registry.contracts(msg.sender)), \"Authenticated proxy can only be called by its user, or by a contract authorized by the registry as long as the user has not revoked access\");\r\n        bytes memory ret;\r\n        if (howToCall == HowToCall.Call) {\r\n            (result, ret) = dest.call(data);\r\n        } else if (howToCall == HowToCall.DelegateCall) {\r\n            (result, ret) = dest.delegatecall(data);\r\n        }\r\n        return result;\r\n    }\r\n    //Execute a message call and assert success\r\n    function proxyAssert(address dest, HowToCall howToCall, bytes memory data) public{\r\n        require(proxy(dest, howToCall, data), \"Proxy assertion failed\");\r\n    }\r\n\r\n}\r\n\r\n// File: localhost/SetExchange/WyvernRegistry.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\n\r\n/**\r\n * @title WyvernRegistry\r\n * @author Wyvern Protocol Developers\r\n */\r\ncontract WyvernRegistry is ProxyRegistry {\r\n\r\n    string public constant name = \"Wyvern Protocol Proxy Registry\";\r\n\r\n    /* Whether the initial auth address has been set. */\r\n    bool public initialAddressSet = false;\r\n\r\n    constructor (){   \r\n        AuthenticatedProxy impl = new AuthenticatedProxy();\r\n        impl.initialize(address(this), this);\r\n        impl.setRevoke(true);\r\n        delegateProxyImplementation = address(impl);\r\n    }\r\n\r\n    /** \r\n     * Grant authentication to the initial Exchange protocol contract\r\n     *\r\n     * @dev No delay, can only be called once - after that the standard registry process with a delay must be used\r\n     * @param authAddress Address of the contract to grant authentication\r\n     */\r\n    function grantInitialAuthentication (address authAddress)\r\n        onlyOwner\r\n        public\r\n    {   \r\n        require(!initialAddressSet, \"Wyvern Protocol Proxy Registry initial address already set\");\r\n        initialAddressSet = true;\r\n        contracts[authAddress] = true;\r\n    }   \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"endGrantAuthentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"grantAuthentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authAddress\",\"type\":\"address\"}],\"name\":\"grantInitialAuthentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialAddressSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxies\",\"outputs\":[{\"internalType\":\"contract OwnableDelegateProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerProxy\",\"outputs\":[{\"internalType\":\"contract OwnableDelegateProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"registerProxyFor\",\"outputs\":[{\"internalType\":\"contract OwnableDelegateProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerProxyOverride\",\"outputs\":[{\"internalType\":\"contract OwnableDelegateProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeAuthentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"startGrantAuthentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferAccessTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WyvernRegistry", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fd6f753a207fae9f0a2f79b41f72b86b525238d2b9ac2d553df67008aca32c7c"}]}