{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"NFTAuctionV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n// moved from https://github.com/museum-of-war/auction\\npragma solidity 0.8.14;\\n\\nimport \\\"IERC721.sol\\\";\\nimport \\\"Ownable.sol\\\";\\n\\n/// @title An Auction Contract for bidding single NFTs with more manual control (modified version of NFTAuctionV2)\\n/// @notice This contract can be used for auctioning any NFTs\\ncontract NFTAuctionV3 is Ownable {\\n    mapping(address => mapping(uint256 => Auction)) public nftContractAuctions;\\n    mapping(address => uint256) failedTransferCredits;\\n\\n    //Each Auction is unique to each NFT (contract + id pairing).\\n    struct Auction {\\n        //map token ID to\\n        uint32 bidIncreasePercentage;\\n        uint32 auctionBidPeriod; //Increments the length of time the auction is open in which a new bid can be made after each bid.\\n        uint64 auctionStart;\\n        uint64 auctionEnd;\\n        uint128 minPrice;\\n        uint128 nftHighestBid;\\n        address nftHighestBidder;\\n        address feeRecipient;\\n    }\\n\\n    uint32 public constant withdrawPeriod = 604800; //1 week\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551           EVENTS            \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    event NftAuctionCreated(\\n        address indexed nftContractAddress,\\n        uint256 indexed tokenId,\\n        uint128 minPrice,\\n        uint64 auctionStart,\\n        uint64 auctionEnd,\\n        uint32 auctionBidPeriod,\\n        uint32 bidIncreasePercentage,\\n        address feeRecipient\\n    );\\n\\n    event BidMade(\\n        address indexed nftContractAddress,\\n        uint256 indexed tokenId,\\n        address bidder,\\n        uint256 ethAmount\\n    );\\n\\n    event AuctionPeriodUpdated(\\n        address indexed nftContractAddress,\\n        uint256 indexed tokenId,\\n        uint64 auctionEndPeriod\\n    );\\n\\n    event NFTTransferredAndSellerPaid(\\n        address indexed nftContractAddress,\\n        uint256 indexed tokenId,\\n        uint128 nftHighestBid,\\n        address nftHighestBidder\\n    );\\n\\n    event AuctionSettled(\\n        address indexed nftContractAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    event AuctionWithdrawn(\\n        address indexed nftContractAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    event HighestBidTaken(\\n        address indexed nftContractAddress,\\n        uint256 indexed tokenId\\n    );\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END             \u2551\\n      \u2551            EVENTS           \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551          MODIFIERS          \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    modifier auctionOngoing(address _nftContractAddress, uint256 _tokenId) {\\n        require(_isAuctionStarted(_nftContractAddress, _tokenId), \\\"Auction has not started\\\");\\n        require(_isAuctionOngoing(_nftContractAddress, _tokenId), \\\"Auction has ended\\\");\\n        _;\\n    }\\n\\n    /*\\n     * The bid amount must be higher than the previous\\n     * bid by the specified bid increase percentage.\\n     */\\n    modifier bidAmountMeetsBidRequirements(address _nftContractAddress, uint256 _tokenId) {\\n        require(_doesBidMeetBidRequirements(_nftContractAddress, _tokenId), \\\"Not enough funds to bid on NFT\\\");\\n        _;\\n    }\\n\\n    modifier notZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Cannot specify 0 address\\\");\\n        _;\\n    }\\n\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END             \u2551\\n      \u2551          MODIFIERS          \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551    AUCTION CHECK FUNCTIONS   \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    function _isAuctionStarted(address _nftContractAddress, uint256 _tokenId) internal view returns (bool) {\\n        uint64 auctionStartTimestamp = nftContractAuctions[_nftContractAddress][\\n            _tokenId\\n        ].auctionStart;\\n        return (block.timestamp >= auctionStartTimestamp);\\n    }\\n\\n    function _isAuctionOngoing(address _nftContractAddress, uint256 _tokenId) internal view returns (bool) {\\n        uint64 auctionEndTimestamp = nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd;\\n        //if the auctionEnd is set to 0, the auction is technically on-going, however\\n        //the minimum bid price (minPrice) has not yet been met.\\n        return (auctionEndTimestamp == 0 || block.timestamp < auctionEndTimestamp);\\n    }\\n\\n    /*\\n     * Check that a bid is applicable for the purchase of the NFT.\\n     * The bid needs to be a % higher than the previous bid.\\n     */\\n    function _doesBidMeetBidRequirements(address _nftContractAddress, uint256 _tokenId) internal view returns (bool) {\\n        uint256 highestBid = nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid;\\n        if (highestBid > 0) {\\n            //if the NFT is up for auction, the bid needs to be a % higher than the previous bid\\n            uint256 bidIncreaseAmount = (highestBid *\\n                (10000 + nftContractAuctions[_nftContractAddress][_tokenId].bidIncreasePercentage)) / 10000;\\n            return msg.value >= bidIncreaseAmount;\\n        } else {\\n            return msg.value >= nftContractAuctions[_nftContractAddress][_tokenId].minPrice;\\n        }\\n    }\\n\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END              \u2551\\n      \u2551    AUCTION CHECK FUNCTIONS   \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551 AUCTION CREATION & UPDATING  \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    function createNewNftAuctions(\\n        address _nftContractAddress,\\n        uint256[] memory _tokenIds,\\n        uint32 _bidIncreasePercentage,\\n        uint32 _auctionBidPeriod,\\n        uint64 _auctionStart,\\n        uint64 _auctionEnd,\\n        uint128 _minPrice,\\n        address _feeRecipient\\n    )\\n        external\\n        onlyOwner\\n        notZeroAddress(_feeRecipient)\\n    {\\n        require(_auctionEnd >= _auctionStart, \\\"Auction end must be after the start\\\");\\n\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n\\n            require(\\n                nftContractAuctions[_nftContractAddress][_tokenId].feeRecipient == address(0),\\n                \\\"Auction is already created\\\"\\n            );\\n            { //Block scoping to prevent \\\"Stack too deep\\\"\\n                Auction memory auction;\\n                // creating auction\\n                auction.bidIncreasePercentage = _bidIncreasePercentage;\\n                auction.auctionBidPeriod = _auctionBidPeriod;\\n                auction.auctionStart = _auctionStart;\\n                auction.auctionEnd = _auctionEnd;\\n                auction.minPrice = _minPrice;\\n                auction.feeRecipient = _feeRecipient;\\n\\n                nftContractAuctions[_nftContractAddress][_tokenId] = auction;\\n            }\\n            // Sending the NFT to this contract\\n            if (IERC721(_nftContractAddress).ownerOf(_tokenId) == msg.sender) {\\n                IERC721(_nftContractAddress).transferFrom(msg.sender, address(this), _tokenId);\\n            }\\n            require( IERC721(_nftContractAddress).ownerOf(_tokenId) == address(this), \\\"NFT transfer failed\\\");\\n\\n            emit NftAuctionCreated(\\n                _nftContractAddress,\\n                _tokenId,\\n                _minPrice,\\n                _auctionStart,\\n                _auctionEnd,\\n                _auctionBidPeriod,\\n                _bidIncreasePercentage,\\n                _feeRecipient\\n            );\\n        }\\n    }\\n\\n    /*\\n     * Can be used for auction prolongation.\\n     * New end must be a moment in future.\\n     */\\n    function updateAuctionsEnd(address _nftContractAddress, uint256[] memory _tokenIds, uint64 _auctionEnd)\\n        external\\n        onlyOwner\\n    {\\n        require(block.timestamp < _auctionEnd, \\\"Auction end must be in the future\\\");\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            require(\\n                nftContractAuctions[_nftContractAddress][_tokenId].feeRecipient != address(0),\\n                \\\"Auction is not created\\\"\\n            );\\n            nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd = _auctionEnd;\\n            emit AuctionPeriodUpdated(_nftContractAddress, _tokenId, _auctionEnd);\\n        }\\n    }\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END              \u2551\\n      \u2551 AUCTION CREATION & UPDATING  \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551        BID FUNCTIONS        \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /*\\n     * Make bids with ETH.\\n     * The auction must exist and be ongoing. A bid must meet bid requirements.\\n     */\\n    function makeBid(address _nftContractAddress, uint256 _tokenId)\\n        external\\n        payable\\n        auctionOngoing(_nftContractAddress, _tokenId)\\n        bidAmountMeetsBidRequirements(_nftContractAddress, _tokenId)\\n    {\\n        require(msg.sender == tx.origin, \\\"Sender must be a wallet\\\");\\n        require(\\n            nftContractAuctions[_nftContractAddress][_tokenId].feeRecipient != address(0),\\n            \\\"Auction does not exist\\\"\\n        );\\n\\n        // Reverse previous bid and update highest bid:\\n        address prevNftHighestBidder = nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBidder;\\n        uint256 prevNftHighestBid = nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid;\\n\\n        // update highest bid\\n        nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid = uint128(msg.value);\\n        nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBidder = msg.sender;\\n\\n        if (prevNftHighestBidder != address(0)) { // payout if needed\\n            _payout(prevNftHighestBidder, prevNftHighestBid);\\n        }\\n\\n        emit BidMade(_nftContractAddress, _tokenId, msg.sender, msg.value);\\n\\n        // Update auction end if needed:\\n        if (nftContractAuctions[_nftContractAddress][_tokenId].auctionBidPeriod > 0) {\\n            //the auction end is set to now + the bid period (if it is greater than the previous one)\\n            uint64 newEnd = nftContractAuctions[_nftContractAddress][_tokenId].auctionBidPeriod +\\n                uint64(block.timestamp);\\n            if (newEnd > nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd) {\\n                nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd = newEnd;\\n                emit AuctionPeriodUpdated(\\n                    _nftContractAddress,\\n                    _tokenId,\\n                    nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd\\n                );\\n            }\\n        }\\n    }\\n\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END              \u2551\\n      \u2551        BID FUNCTIONS         \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551  TRANSFER NFT & PAY SELLER   \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /*\\n     * Transfer NFT to highest bidder and ETH to fee recipient.\\n     * Deletes auction information.\\n     */\\n    function _transferNftAndPayFeeRecipient(address _nftContractAddress, uint256 _tokenId) internal {\\n        address _feeRecipient = nftContractAuctions[_nftContractAddress][_tokenId].feeRecipient;\\n        address _nftHighestBidder = nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBidder;\\n        uint128 _nftHighestBid = nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid;\\n\\n        nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBidder = address(0);\\n        nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid = 0;\\n\\n        _payout(_feeRecipient, _nftHighestBid);\\n        IERC721(_nftContractAddress).transferFrom(address(this), _nftHighestBidder, _tokenId);\\n\\n        delete nftContractAuctions[_nftContractAddress][_tokenId];\\n        emit NFTTransferredAndSellerPaid(_nftContractAddress, _tokenId, _nftHighestBid, _nftHighestBidder);\\n    }\\n\\n    /*\\n     * Send ETH to recipient.\\n     * Increments failedTransferCredits on fail.\\n     */\\n    function _payout(address _recipient, uint256 _amount) internal {\\n        // attempt to send the funds to the recipient\\n        (bool success, ) = payable(_recipient).call{ value: _amount, gas: 20000 }(\\\"\\\");\\n        // if it failed, update their credit balance so they can pull it later\\n        if (!success) failedTransferCredits[_recipient] = failedTransferCredits[_recipient] + _amount;\\n    }\\n\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END              \u2551\\n      \u2551  TRANSFER NFT & PAY SELLER   \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551      SETTLE & WITHDRAW       \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /*\\n     * Transfer NFT to highest bidder and pay to fee recipient.\\n     * Only ended auctions with highest bidder can be settled.\\n     */\\n    function settleAuctions(address _nftContractAddress, uint256[] memory _tokenIds) external onlyOwner {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            address _nftHighestBidder = nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBidder;\\n            if (!_isAuctionOngoing(_nftContractAddress, _tokenId) && _nftHighestBidder != address(0)) {\\n                _transferNftAndPayFeeRecipient(_nftContractAddress, _tokenId);\\n                emit AuctionSettled(_nftContractAddress, _tokenId);\\n            }\\n        }\\n    }\\n\\n    /*\\n     * Transfer NFT to owner and return ETH to the highest bidder (if bid was made).\\n     * If withdrawPeriod passed, then anybody can withdraw an auction.\\n     */\\n    function withdrawAuctions(address _nftContractAddress, uint256[] memory _tokenIds) external {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            uint64 auctionEndTimestamp = nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd;\\n            // withdrawPeriod must pass or sender must be an owner\\n            require(block.timestamp >= (auctionEndTimestamp + withdrawPeriod) || msg.sender == owner(), \\\"Only owner can withdraw before delay\\\");\\n\\n            address _nftHighestBidder = nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBidder;\\n            if (_nftHighestBidder != address(0)) {\\n                uint128 _nftHighestBid = nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid;\\n                _payout(_nftHighestBidder, _nftHighestBid);\\n            }\\n            delete nftContractAuctions[_nftContractAddress][_tokenId];\\n            IERC721(_nftContractAddress).transferFrom(address(this), owner(), _tokenId);\\n            emit AuctionWithdrawn(_nftContractAddress, _tokenId);\\n        }\\n    }\\n\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END              \u2551\\n      \u2551      SETTLE & WITHDRAW       \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551       UPDATE AUCTION         \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /*\\n     * The owner (NFT seller) can opt to end an auction by taking the current highest bid.\\n     */\\n    function takeHighestBids(address _nftContractAddress, uint256[] memory _tokenIds) external onlyOwner {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            if (nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid > 0) {\\n                _transferNftAndPayFeeRecipient(_nftContractAddress, _tokenId);\\n                emit HighestBidTaken(_nftContractAddress, _tokenId);\\n            } else {\\n                IERC721(_nftContractAddress).transferFrom(address(this), msg.sender, _tokenId);\\n                delete nftContractAuctions[_nftContractAddress][_tokenId];\\n            }\\n        }\\n    }\\n\\n    /*\\n     * If the transfer of a bid has failed, allow to reclaim amount later.\\n     */\\n    function withdrawAllFailedCreditsOf(address recipient) external {\\n        uint256 amount = failedTransferCredits[recipient];\\n\\n        require(amount != 0, \\\"no credits to withdraw\\\");\\n\\n        failedTransferCredits[recipient] = 0;\\n\\n        (bool successfulWithdraw, ) = recipient.call{ value: amount, gas: 20000 }(\\\"\\\");\\n        require(successfulWithdraw, \\\"withdraw failed\\\");\\n    }\\n\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END              \u2551\\n      \u2551       UPDATE AUCTION         \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"NFTAuctionV3.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"auctionEndPeriod\",\"type\":\"uint64\"}],\"name\":\"AuctionPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"BidMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"HighestBidTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nftHighestBid\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftHighestBidder\",\"type\":\"address\"}],\"name\":\"NFTTransferredAndSellerPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"auctionStart\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"auctionEnd\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"auctionBidPeriod\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"bidIncreasePercentage\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"NftAuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32\",\"name\":\"_bidIncreasePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_auctionBidPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_auctionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_auctionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_minPrice\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"createNewNftAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContractAuctions\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bidIncreasePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"auctionBidPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"auctionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"auctionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nftHighestBid\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"nftHighestBidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"settleAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"takeHighestBids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"_auctionEnd\",\"type\":\"uint64\"}],\"name\":\"updateAuctionsEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAllFailedCreditsOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTAuctionV3", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}