{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.11;\\n\\ninterface IERC20 {\\n    function balanceOf(address _holder) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IWETHToken {\\n    function totalBalanceOf(address _holder) external view returns (uint256);\\n\\n    function transferAll(address _to) external;\\n\\n    function lockOf(address _holder) external view returns (uint256);\\n}\\n\\ninterface ILockedWETHOffer {\\n    function amountWanted() external view returns (uint256);\\n\\n    function tokenWanted() external view returns (address);\\n}\\n\\ninterface IOfferFactory {\\n    function offers() external view returns (ILockedWETHOffer[] memory);\\n\\n    function getActiveOffers() external view returns (ILockedWETHOffer[] memory);\\n}\\n\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\n\"},\"LockedWETHOffer.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.11;\\n\\nimport {IERC20, IWETHToken, IOwnable} from \\\"./Interfaces.sol\\\";\\n\\ncontract LockedWETHOffer {\\n    address public immutable factory;\\n    address public immutable seller;\\n    address public immutable tokenWanted;\\n    uint256 public immutable amountWanted;\\n    uint256 public immutable fee; // in bps\\n    bool public hasEnded = false;\\n\\n    IWETHToken WETH = IWETHToken(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    event OfferFilled(address buyer, uint256 WETHAmount, address token, uint256 tokenAmount);\\n    event OfferCanceled(address seller, uint256 WETHAmount);\\n\\n    constructor(\\n        address _seller,\\n        address _tokenWanted,\\n        uint256 _amountWanted,\\n        uint256 _fee\\n    ) {\\n        factory = msg.sender;\\n        seller = _seller;\\n        tokenWanted = _tokenWanted;\\n        amountWanted = _amountWanted;\\n        fee = _fee;\\n    }\\n\\n    // release trapped funds\\n    function withdrawTokens(address token) public {\\n        require(msg.sender == IOwnable(factory).owner());\\n        if (token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n            payable(IOwnable(factory).owner()).transfer(address(this).balance);\\n        } else {\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            safeTransfer(token, IOwnable(factory).owner(), balance);\\n        }\\n    }\\n\\n    function fill() public {\\n        require(hasWETH(), \\\"no WETH balance\\\");\\n        require(!hasEnded, \\\"sell has been previously cancelled\\\");\\n        uint256 balance = WETH.totalBalanceOf(address(this));\\n        uint256 txFee = mulDiv(amountWanted, fee, 10000);\\n\\n        // cap fee at 25k\\n        uint256 maxFee = 25000 * 10**IERC20(tokenWanted).decimals();\\n        txFee = txFee \\u003e maxFee ? maxFee : txFee;\\n\\n        uint256 amountAfterFee = amountWanted - txFee;\\n        // collect fee\\n        safeTransferFrom(tokenWanted, msg.sender, IOwnable(factory).owner(), txFee);\\n        // exchange assets\\n        safeTransferFrom(tokenWanted, msg.sender, seller, amountAfterFee);\\n        WETH.transferAll(msg.sender);\\n        hasEnded = true;\\n        emit OfferFilled(msg.sender, balance, tokenWanted, amountWanted);\\n    }\\n\\n    function cancel() public {\\n        require(hasWETH(), \\\"no WETH balance\\\");\\n        require(msg.sender == seller);\\n        uint256 balance = WETH.totalBalanceOf(address(this));\\n        WETH.transferAll(seller);\\n        hasEnded = true;\\n        emit OfferCanceled(seller, balance);\\n    }\\n\\n    function hasWETH() public view returns (bool) {\\n        return WETH.totalBalanceOf(address(this)) \\u003e 0;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) public pure returns (uint256) {\\n        return (x * y) / z;\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\\"safeTransfer: failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\\"safeTransferFrom: failed\\\");\\n    }\\n}\\n\"},\"OfferFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.11;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\nimport {LockedWETHOffer} from \\\"./LockedWETHOffer.sol\\\";\\n\\ncontract OfferFactory is Ownable {\\n    uint256 public fee = 30; // in bps\\n    LockedWETHOffer[] public offers;\\n\\n    event OfferCreated(address offerAddress, address tokenWanted, uint256 amountWanted);\\n\\n    function setFee(uint256 _fee) public onlyOwner {\\n        fee = _fee;\\n    }\\n\\n    function createOffer(address _tokenWanted, uint256 _amountWanted) public returns (LockedWETHOffer) {\\n        LockedWETHOffer offer = new LockedWETHOffer(msg.sender, _tokenWanted, _amountWanted, fee);\\n        offers.push(offer);\\n        emit OfferCreated(address(offer), _tokenWanted, _amountWanted);\\n        return offer;\\n    }\\n\\n    function getActiveOffersByOwner() public view returns (LockedWETHOffer[] memory, LockedWETHOffer[] memory) {\\n        LockedWETHOffer[] memory myBids = new LockedWETHOffer[](offers.length);\\n        LockedWETHOffer[] memory otherBids = new LockedWETHOffer[](offers.length);\\n\\n        uint256 myBidsCount;\\n        uint256 otherBidsCount;\\n        for (uint256 i; i \\u003c offers.length; i++) {\\n            LockedWETHOffer offer = LockedWETHOffer(offers[i]);\\n            if (offer.hasWETH() \\u0026\\u0026 !offer.hasEnded()) {\\n                if (offer.seller() == msg.sender) {\\n                    myBids[myBidsCount++] = offers[i];\\n                } else {\\n                    otherBids[otherBidsCount++] = offers[i];\\n                }\\n            }\\n        }\\n\\n        return (myBids, otherBids);\\n    }\\n\\n    function getActiveOffers() public view returns (LockedWETHOffer[] memory) {\\n        LockedWETHOffer[] memory activeOffers = new LockedWETHOffer[](offers.length);\\n        uint256 count;\\n        for (uint256 i; i \\u003c offers.length; i++) {\\n            LockedWETHOffer offer = LockedWETHOffer(offers[i]);\\n            if (offer.hasWETH() \\u0026\\u0026 !offer.hasEnded()) {\\n                activeOffers[count++] = offer;\\n            }\\n        }\\n\\n        return activeOffers;\\n    }\\n\\n    function getActiveOffersByRange(uint256 start, uint256 end) public view returns (LockedWETHOffer[] memory) {\\n        LockedWETHOffer[] memory activeOffers = new LockedWETHOffer[](end - start);\\n\\n        uint256 count;\\n        for (uint256 i = start; i \\u003c end; i++) {\\n            if (offers[i].hasWETH() \\u0026\\u0026 !offers[i].hasEnded()) {\\n                activeOffers[count++] = offers[i];\\n            }\\n        }\\n\\n        return activeOffers;\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"WETHLens.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.11;\\n\\nimport {IERC20, IWETHToken, ILockedWETHOffer, IOfferFactory, IOwnable} from \\\"./Interfaces.sol\\\";\\n\\ncontract WETHLens {\\n    // supported stablecoins\\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public constant FEI = 0x956F47F50A910163D8BF957Cf5846D573E7f87CA; \\n\\n    IWETHToken WETH = IWETHToken(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n      function getVolume(IOfferFactory factory) public view returns (uint256 sum) {\\n        address[4] memory stables = [USDC, USDT, DAI, FEI];\\n        address factoryOwner = IOwnable(address(factory)).owner();\\n\\n        uint256 volume;\\n        for (uint256 i; i \\u003c stables.length; i++) {\\n            volume += IERC20(stables[i]).balanceOf(factoryOwner) * (10**(18 - IERC20(stables[i]).decimals()));\\n        }\\n        sum = volume * 40;\\n    }\\n\\n    function getOfferInfo(ILockedWETHOffer offer)\\n        public\\n        view\\n        returns (\\n            uint256 WETHBalance,\\n            address tokenWanted,\\n            uint256 amountWanted\\n        )\\n    {\\n        return (WETH.totalBalanceOf(address(offer)), offer.tokenWanted(), offer.amountWanted());\\n    }\\n\\n    function getActiveOffersPruned(IOfferFactory factory) public view returns (ILockedWETHOffer[] memory) {\\n        ILockedWETHOffer[] memory activeOffers = factory.getActiveOffers();\\n        // determine size of memory array\\n        uint count;\\n        for (uint i; i \\u003c activeOffers.length; i++) {\\n            if (address(activeOffers[i]) != address(0)) {\\n                count++;\\n            }\\n        }\\n        ILockedWETHOffer[] memory pruned = new ILockedWETHOffer[](count);\\n        for (uint j; j \\u003c count; j++) {\\n            pruned[j] = activeOffers[j];\\n        }\\n        return pruned;\\n    }\\n\\n    function getAllActiveOfferInfo(IOfferFactory factory)\\n        public\\n        view\\n        returns (\\n            address[] memory offerAddresses,\\n            uint256[] memory WETHBalances,\\n            address[] memory tokenWanted,\\n            uint256[] memory amountWanted\\n        )\\n    {\\n        ILockedWETHOffer[] memory activeOffers = factory.getActiveOffers();\\n        uint256 offersLength = activeOffers.length;\\n        offerAddresses = new address[](offersLength);\\n        WETHBalances = new uint256[](offersLength);\\n        tokenWanted = new address[](offersLength);\\n        amountWanted = new uint256[](offersLength);\\n        uint256 count;\\n        for (uint256 i; i \\u003c activeOffers.length; i++) {\\n            uint256 bal = WETH.totalBalanceOf(address(activeOffers[i]));\\n            if (bal \\u003e 0) {\\n                WETHBalances[count] = bal;\\n                offerAddresses[count] = address(activeOffers[i]);\\n                tokenWanted[count] = activeOffers[i].tokenWanted();\\n                amountWanted[count] = activeOffers[i].amountWanted();\\n                count++;\\n            }\\n        }\\n    }\\n}\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"offerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenWanted\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWanted\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenWanted\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountWanted\",\"type\":\"uint256\"}],\"name\":\"createOffer\",\"outputs\":[{\"internalType\":\"contract LockedWETHOffer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveOffers\",\"outputs\":[{\"internalType\":\"contract LockedWETHOffer[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveOffersByOwner\",\"outputs\":[{\"internalType\":\"contract LockedWETHOffer[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"contract LockedWETHOffer[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getActiveOffersByRange\",\"outputs\":[{\"internalType\":\"contract LockedWETHOffer[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"contract LockedWETHOffer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OfferFactory", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab8473b9a67fdf4d3d592af2ff66c0f8a13456a42d5a8e95ab9e808cce1ccbe9"}]}