{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ChonkyAttributes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IChonkyAttributes} from \\\"./interface/IChonkyAttributes.sol\\\";\\n\\ncontract ChonkyAttributes is IChonkyAttributes {\\n    function _getBodyAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.WICKED, 10);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.CUTE, 9);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.POWER, 10);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 10) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 11) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 12) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 13) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 14) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 15) return (IChonkyAttributes.AttributeType.BRAIN, 6);\\n        if (_id == 16) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 17) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 18) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 19) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 20) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 21) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 22) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 23) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 24) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 25) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 26) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 27) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 28) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 29) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 30) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 31) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 32) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 33) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 34) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 35) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 36) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 37) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 38) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 39) return (IChonkyAttributes.AttributeType.POWER, 10);\\n        if (_id == 40) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 41) return (IChonkyAttributes.AttributeType.WICKED, 7);\\n        if (_id == 42) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 43) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 44) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 45) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 46) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 47) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 48) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 49) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 50) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 51) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 52) return (IChonkyAttributes.AttributeType.WICKED, 7);\\n        if (_id == 53) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 54) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 55) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 56) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 57) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 58) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 59) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 60) return (IChonkyAttributes.AttributeType.WICKED, 9);\\n        if (_id == 61) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 62) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 63) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 64) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 65) return (IChonkyAttributes.AttributeType.CUTE, 10);\\n        if (_id == 66) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 67) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 68) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 69) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 70) return (IChonkyAttributes.AttributeType.BRAIN, 10);\\n        if (_id == 71) return (IChonkyAttributes.AttributeType.BRAIN, 7);\\n        if (_id == 72) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 73) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 74) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 75) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 76) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 77) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 78) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 79) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 80) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 81) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 82) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 83) return (IChonkyAttributes.AttributeType.CUTE, 8);\\n        if (_id == 84) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 85) return (IChonkyAttributes.AttributeType.BRAIN, 7);\\n        if (_id == 86) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 87) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 88) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 89) return (IChonkyAttributes.AttributeType.BRAIN, 4);\\n        if (_id == 90) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 91) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _getEyesAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.WICKED, 7);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 10) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 11) return (IChonkyAttributes.AttributeType.WICKED, 10);\\n        if (_id == 12) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 13) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 14) return (IChonkyAttributes.AttributeType.CUTE, 8);\\n        if (_id == 15) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 16) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 17) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 18) return (IChonkyAttributes.AttributeType.BRAIN, 6);\\n        if (_id == 19) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 20) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 21) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 22) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 23) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 24) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 25) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 26) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 27) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 28) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 29) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 30) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 31) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 32) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 33) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 34) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 35) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 36) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 37) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 38) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 39) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 40) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 41) return (IChonkyAttributes.AttributeType.BRAIN, 7);\\n        if (_id == 42) return (IChonkyAttributes.AttributeType.WICKED, 10);\\n        if (_id == 43) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 44) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 45) return (IChonkyAttributes.AttributeType.WICKED, 9);\\n        if (_id == 46) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 47) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 48) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 49) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 50) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 51) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 52) return (IChonkyAttributes.AttributeType.BRAIN, 4);\\n        if (_id == 53) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 54) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 55) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 56) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 57) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 58) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 59) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 60) return (IChonkyAttributes.AttributeType.WICKED, 1);\\n        if (_id == 61) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _getMouthAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.CUTE, 8);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 10) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 11) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 12) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 13) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 14) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 15) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 16) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 17) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 18) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 19) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 20) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 21) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 22) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 23) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 24) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 25) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 26) return (IChonkyAttributes.AttributeType.BRAIN, 6);\\n        if (_id == 27) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 28) return (IChonkyAttributes.AttributeType.BRAIN, 4);\\n        if (_id == 29) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 30) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 31) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 32) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 33) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 34) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 35) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 36) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 37) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 38) return (IChonkyAttributes.AttributeType.WICKED, 7);\\n        if (_id == 39) return (IChonkyAttributes.AttributeType.BRAIN, 6);\\n        if (_id == 40) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 41) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 42) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 43) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 44) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 45) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 46) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 47) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 48) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 49) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 50) return (IChonkyAttributes.AttributeType.WICKED, 1);\\n        if (_id == 51) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 52) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 53) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 54) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _getHatAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.CUTE, 8);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.WICKED, 9);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 10) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 11) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 12) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 13) return (IChonkyAttributes.AttributeType.WICKED, 10);\\n        if (_id == 14) return (IChonkyAttributes.AttributeType.POWER, 10);\\n        if (_id == 15) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 16) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 17) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 18) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 19) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 20) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 21) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 22) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 23) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 24) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 25) return (IChonkyAttributes.AttributeType.WICKED, 7);\\n        if (_id == 26) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 27) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 28) return (IChonkyAttributes.AttributeType.POWER, 10);\\n        if (_id == 29) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 30) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 31) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 32) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 33) return (IChonkyAttributes.AttributeType.CUTE, 9);\\n        if (_id == 34) return (IChonkyAttributes.AttributeType.BRAIN, 7);\\n        if (_id == 35) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 36) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 37) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 38) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 39) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 40) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 41) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 42) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 43) return (IChonkyAttributes.AttributeType.BRAIN, 7);\\n        if (_id == 44) return (IChonkyAttributes.AttributeType.CUTE, 9);\\n        if (_id == 45) return (IChonkyAttributes.AttributeType.BRAIN, 4);\\n        if (_id == 46) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 47) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 48) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 49) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 50) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 51) return (IChonkyAttributes.AttributeType.WICKED, 1);\\n        if (_id == 52) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 53) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 54) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 55) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 56) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 57) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 58) return (IChonkyAttributes.AttributeType.CUTE, 8);\\n        if (_id == 59) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 60) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 61) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 62) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 63) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 64) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 65) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 66) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 67) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 68) return (IChonkyAttributes.AttributeType.BRAIN, 6);\\n        if (_id == 69) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 70) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 71) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 72) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 73) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 74) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 75) return (IChonkyAttributes.AttributeType.CUTE, 10);\\n        if (_id == 76) return (IChonkyAttributes.AttributeType.CUTE, 9);\\n        if (_id == 77) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 78) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 79) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 80) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 81) return (IChonkyAttributes.AttributeType.BRAIN, 10);\\n        if (_id == 82) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 83) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 84) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 85) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 86) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 87) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 88) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 89) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 90) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 91) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 92) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 93) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 94) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 95) return (IChonkyAttributes.AttributeType.CUTE, 10);\\n        if (_id == 96) return (IChonkyAttributes.AttributeType.POWER, 2);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _getWingsAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _getSetAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 10) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 11) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 12) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 13) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 14) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 15) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 16) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 17) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 18) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 19) return (IChonkyAttributes.AttributeType.WICKED, 1);\\n        if (_id == 20) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 21) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 22) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 23) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 24) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 25) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 26) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 27) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 28) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 29) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 30) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 31) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 32) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 33) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 34) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 35) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 36) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 37) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 38) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 39) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 40) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 41) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 42) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 43) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 44) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 45) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 46) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 47) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 48) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 49) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 50) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 51) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 52) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 53) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 54) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 55) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 56) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 57) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 58) return (IChonkyAttributes.AttributeType.CUTE, 0);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _addAttributeValue(\\n        uint256[4] memory _array,\\n        uint256 _value,\\n        IChonkyAttributes.AttributeType _valueType\\n    ) internal pure returns (uint256[4] memory) {\\n        if (_valueType != IChonkyAttributes.AttributeType.NONE) {\\n            _array[uint256(_valueType) - 1] += _value;\\n        }\\n\\n        return _array;\\n    }\\n\\n    function getAttributeValues(uint256[12] memory _attributes, uint256 _setId)\\n        public\\n        pure\\n        returns (uint256[4] memory result)\\n    {\\n        uint256 value;\\n        IChonkyAttributes.AttributeType valueType;\\n\\n        (valueType, value) = _getWingsAttribute(_attributes[2]);\\n        result = _addAttributeValue(result, value, valueType);\\n\\n        (valueType, value) = _getBodyAttribute(_attributes[6]);\\n        result = _addAttributeValue(result, value, valueType);\\n\\n        (valueType, value) = _getMouthAttribute(_attributes[7]);\\n        result = _addAttributeValue(result, value, valueType);\\n\\n        (valueType, value) = _getEyesAttribute(_attributes[8]);\\n        result = _addAttributeValue(result, value, valueType);\\n\\n        (valueType, value) = _getHatAttribute(_attributes[9]);\\n        result = _addAttributeValue(result, value, valueType);\\n\\n        (valueType, value) = _getSetAttribute(_setId);\\n        result = _addAttributeValue(result, value, valueType);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IChonkyAttributes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IChonkyAttributes {\\n    enum AttributeType {\\n        NONE,\\n        BRAIN,\\n        CUTE,\\n        POWER,\\n        WICKED\\n    }\\n\\n    function getAttributeValues(uint256[12] memory _attributes, uint256 _setId)\\n        external\\n        pure\\n        returns (uint256[4] memory result);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[12]\",\"name\":\"_attributes\",\"type\":\"uint256[12]\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"getAttributeValues\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"result\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "ChonkyAttributes", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}