{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ValidatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IValidatorRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IJMS.sol\\\";\\r\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\r\\n\\r\\n/// @title ValidatorRegistry\\r\\n/// @notice ValidatorRegistry is the main contract that manage validators\\r\\n/// @dev ValidatorRegistry is the main contract that manage validators.\\r\\ncontract ValidatorRegistry is\\r\\n    IValidatorRegistry,\\r\\n    Pausable,\\r\\n    Ownable,\\r\\n    ReentrancyGuard\\r\\n{\\r\\n    address private stakeManager;\\r\\n\\r\\n    uint256 public override preferredDepositValidatorId;\\r\\n    uint256 public override preferredWithdrawalValidatorId;\\r\\n    mapping(uint256 => bool) public override validatorIdExists;\\r\\n\\r\\n    uint256[] private validators;\\r\\n\\r\\n    constructor(address _stakeManager) {\\r\\n        stakeManager = _stakeManager;\\r\\n    }\\r\\n\\r\\n    /// ----------------------------- API --------------------------------------\\r\\n\\r\\n    /// @notice Allows a validator that was already staked on the polygon stake manager\\r\\n    /// to join the JMS protocol.\\r\\n    /// @param _validatorId id of the validator.\\r\\n    function addValidator(uint256 _validatorId)\\r\\n        external\\r\\n        override\\r\\n        whenNotPaused\\r\\n        whenValidatorIdDoesNotExist(_validatorId)\\r\\n        onlyOwner\\r\\n    {\\r\\n        IStakeManager.Validator memory smValidator = IStakeManager(stakeManager)\\r\\n            .validators(_validatorId);\\r\\n\\r\\n        require(\\r\\n            smValidator.contractAddress != address(0),\\r\\n            \\\"Validator has no ValidatorShare\\\"\\r\\n        );\\r\\n        require(\\r\\n            (smValidator.status == IStakeManager.Status.Active) &&\\r\\n                smValidator.deactivationEpoch == 0,\\r\\n            \\\"Validator isn't ACTIVE\\\"\\r\\n        );\\r\\n\\r\\n        validators.push(_validatorId);\\r\\n        validatorIdExists[_validatorId] = true;\\r\\n\\r\\n        emit AddValidator(_validatorId);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows to remove an validator from the registry.\\r\\n    /// @param _validatorId the validator id.\\r\\n    function removeValidator(uint256 _validatorId)\\r\\n        external\\r\\n        override\\r\\n        whenNotPaused\\r\\n        whenValidatorIdExists(_validatorId)\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            preferredDepositValidatorId != _validatorId,\\r\\n            \\\"Can't remove a preferred validator for deposits\\\"\\r\\n        );\\r\\n        require(\\r\\n            preferredWithdrawalValidatorId != _validatorId,\\r\\n            \\\"Can't remove a preferred validator for withdrawals\\\"\\r\\n        );\\r\\n\\r\\n        address validatorShare = IStakeManager(stakeManager)\\r\\n            .getValidatorContract(_validatorId);\\r\\n        (uint256 validatorBalance, ) = IValidatorShare(validatorShare)\\r\\n            .getTotalStake(address(this));\\r\\n        require(validatorBalance == 0, \\\"Validator has some shares left\\\");\\r\\n\\r\\n        // swap with the last item and pop it.\\r\\n        uint256 validatorsLength = validators.length;\\r\\n        for (uint256 idx = 0; idx < validatorsLength - 1; ++idx) {\\r\\n            if (_validatorId == validators[idx]) {\\r\\n                validators[idx] = validators[validatorsLength - 1];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        validators.pop();\\r\\n\\r\\n        delete validatorIdExists[_validatorId];\\r\\n\\r\\n        emit RemoveValidator(_validatorId);\\r\\n    }\\r\\n\\r\\n    /// -------------------------------Setters-----------------------------------\\r\\n\\r\\n    /// @notice Allows to set the preffered validator id for deposits\\r\\n    /// @param _validatorId the validator id.\\r\\n    function setPreferredDepositValidatorId(uint256 _validatorId)\\r\\n        external\\r\\n        override\\r\\n        whenNotPaused\\r\\n        whenValidatorIdExists(_validatorId)\\r\\n        onlyOwner\\r\\n    {\\r\\n        preferredDepositValidatorId = _validatorId;\\r\\n\\r\\n        emit SetPreferredDepositValidatorId(_validatorId);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows to set the preffered validator id for withdrawals\\r\\n    /// @param _validatorId the validator id.\\r\\n    function setPreferredWithdrawalValidatorId(uint256 _validatorId)\\r\\n        external\\r\\n        override\\r\\n        whenNotPaused\\r\\n        whenValidatorIdExists(_validatorId)\\r\\n        onlyOwner\\r\\n    {\\r\\n        preferredWithdrawalValidatorId = _validatorId;\\r\\n\\r\\n        emit SetPreferredWithdrawalValidatorId(_validatorId);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows to pause the contract.\\r\\n    function togglePause() external override onlyOwner {\\r\\n        paused() ? _unpause() : _pause();\\r\\n    }\\r\\n\\r\\n    /// -------------------------------Getters-----------------------------------\\r\\n\\r\\n    /// @notice Get the StakeManager contract addresses\\r\\n    function getStakeManager()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address _stakeManager)\\r\\n    {\\r\\n        _stakeManager = stakeManager;\\r\\n    }\\r\\n\\r\\n    /// @notice Get validator id by its index.\\r\\n    /// @param _index validator index\\r\\n    function getValidatorId(uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return validators[_index];\\r\\n    }\\r\\n\\r\\n    /// @notice Get validators.\\r\\n    function getValidators() external view override returns (uint256[] memory) {\\r\\n        return validators;\\r\\n    }\\r\\n\\r\\n    /// -------------------------------Modifiers-----------------------------------\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the validator id exists in our registry.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The validator id must exist in our registry.\\r\\n     */\\r\\n    modifier whenValidatorIdExists(uint256 _validatorId) {\\r\\n        require(\\r\\n            validatorIdExists[_validatorId] == true,\\r\\n            \\\"Validator id doesn't exist in our registry\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the validator id doesn't exist in our registry.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The validator id must not exist in our registry.\\r\\n     */\\r\\n    modifier whenValidatorIdDoesNotExist(uint256 _validatorId) {\\r\\n        require(\\r\\n            validatorIdExists[_validatorId] == false,\\r\\n            \\\"Validator id already exists in our registry\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/IStakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title polygon stake manager interface.\\r\\n/// @notice User to interact with the polygon stake manager.\\r\\ninterface IStakeManager {\\r\\n\\t/// @notice Request unstake a validator.\\r\\n\\t/// @param validatorId validator id.\\r\\n\\tfunction unstake(uint256 validatorId) external;\\r\\n\\r\\n\\t/// @notice Get the validator id using the user address.\\r\\n\\t/// @param user user that own the validator in our case the validator contract.\\r\\n\\t/// @return return the validator id\\r\\n\\tfunction getValidatorId(address user) external view returns (uint256);\\r\\n\\r\\n\\t/// @notice get the validator contract used for delegation.\\r\\n\\t/// @param validatorId validator id.\\r\\n\\t/// @return return the address of the validator contract.\\r\\n\\tfunction getValidatorContract(uint256 validatorId)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (address);\\r\\n\\r\\n\\t/// @notice Withdraw accumulated rewards\\r\\n\\t/// @param validatorId validator id.\\r\\n\\tfunction withdrawRewards(uint256 validatorId) external;\\r\\n\\r\\n\\t/// @notice Get validator total staked.\\r\\n\\t/// @param validatorId validator id.\\r\\n\\tfunction validatorStake(uint256 validatorId)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256);\\r\\n\\r\\n\\t/// @notice Allows to unstake the staked tokens on the stakeManager.\\r\\n\\t/// @param validatorId validator id.\\r\\n\\tfunction unstakeClaim(uint256 validatorId) external;\\r\\n\\r\\n\\t/// @notice Allows to migrate the staked tokens to another validator.\\r\\n\\t/// @param fromValidatorId From validator id.\\r\\n\\t/// @param toValidatorId To validator id.\\r\\n\\t/// @param amount amount in Matic.\\r\\n\\tfunction migrateDelegation(\\r\\n\\t\\tuint256 fromValidatorId,\\r\\n\\t\\tuint256 toValidatorId,\\r\\n\\t\\tuint256 amount\\r\\n\\t) external;\\r\\n\\r\\n\\t/// @notice Returns a withdrawal delay.\\r\\n\\tfunction withdrawalDelay() external view returns (uint256);\\r\\n\\r\\n\\t/// @notice Transfers amount from delegator\\r\\n\\tfunction delegationDeposit(\\r\\n\\t\\tuint256 validatorId,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\taddress delegator\\r\\n\\t) external returns (bool);\\r\\n\\r\\n\\tfunction epoch() external view returns (uint256);\\r\\n\\r\\n\\tenum Status {\\r\\n\\t\\tInactive,\\r\\n\\t\\tActive,\\r\\n\\t\\tLocked,\\r\\n\\t\\tUnstaked\\r\\n\\t}\\r\\n\\r\\n\\tstruct Validator {\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\tuint256 reward;\\r\\n\\t\\tuint256 activationEpoch;\\r\\n\\t\\tuint256 deactivationEpoch;\\r\\n\\t\\tuint256 jailTime;\\r\\n\\t\\taddress signer;\\r\\n\\t\\taddress contractAddress;\\r\\n\\t\\tStatus status;\\r\\n\\t\\tuint256 commissionRate;\\r\\n\\t\\tuint256 lastCommissionUpdate;\\r\\n\\t\\tuint256 delegatorsReward;\\r\\n\\t\\tuint256 delegatedAmount;\\r\\n\\t\\tuint256 initialRewardPerStake;\\r\\n\\t}\\r\\n\\r\\n\\tfunction validators(uint256 _index)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (Validator memory);\\r\\n\\r\\n\\t// TODO: Remove it and use stakeFor instead\\r\\n\\tfunction createValidator(uint256 _validatorId) external;\\r\\n}\"\r\n    },\r\n    \"interfaces/IJMS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./IValidatorShare.sol\\\";\\r\\nimport \\\"./IValidatorRegistry.sol\\\";\\r\\n\\r\\n/// @title JMS interface.\\r\\ninterface IJMS is IERC20 {\\r\\n\\tstruct WithdrawalRequest {\\r\\n\\t\\tuint256 validatorNonce;\\r\\n\\t\\tuint256 requestEpoch;\\r\\n\\t\\taddress validatorAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction treasury() external view returns (address);\\r\\n\\r\\n\\tfunction feePercent() external view returns (uint8);\\r\\n\\r\\n\\tfunction submit(uint256 _amount) external returns (uint256);\\r\\n\\r\\n\\tfunction requestWithdraw(uint256 _amount) external;\\r\\n\\r\\n\\tfunction claimWithdrawal(uint256 _idx) external;\\r\\n\\r\\n\\tfunction withdrawRewards(uint256 _validatorId) external returns (uint256);\\r\\n\\r\\n\\tfunction stakeRewardsAndDistributeFees(uint256 _validatorId) external;\\r\\n\\r\\n\\tfunction migrateDelegation(\\r\\n\\t\\tuint256 _fromValidatorId,\\r\\n\\t\\tuint256 _toValidatorId,\\r\\n\\t\\tuint256 _amount\\r\\n\\t) external;\\r\\n\\r\\n\\tfunction togglePause() external;\\r\\n\\r\\n\\tfunction convertJMSToMatic(uint256 _balance)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint256,\\r\\n\\t\\t\\tuint256,\\r\\n\\t\\t\\tuint256\\r\\n\\t\\t);\\r\\n\\r\\n\\tfunction convertMaticToJMS(uint256 _balance)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint256,\\r\\n\\t\\t\\tuint256,\\r\\n\\t\\t\\tuint256\\r\\n\\t\\t);\\r\\n\\r\\n\\tfunction setFeePercent(uint8 _feePercent) external;\\r\\n\\r\\n\\tfunction setValidatorRegistry(address _address) external;\\r\\n\\r\\n\\tfunction setTreasury(address _address) external;\\r\\n\\r\\n\\tfunction getUserWithdrawalRequests(address _address)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (WithdrawalRequest[] memory);\\r\\n\\r\\n\\tfunction getSharesAmountOfUserWithdrawalRequest(\\r\\n\\t\\taddress _address,\\r\\n\\t\\tuint256 _idx\\r\\n\\t) external view returns (uint256);\\r\\n\\r\\n\\tfunction getTotalStake(IValidatorShare _validatorShare)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256, uint256);\\r\\n\\r\\n\\tfunction getTotalStakeAcrossAllValidators() external view returns (uint256);\\r\\n\\r\\n\\tfunction getTotalPooledMatic() external view returns (uint256);\\r\\n\\r\\n\\tfunction getContracts()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\taddress _stakeManager,\\r\\n\\t\\t\\taddress _polygonERC20,\\r\\n\\t\\t\\taddress _validatorRegistry\\r\\n\\t\\t);\\r\\n\\r\\n\\tevent Submit(address indexed _from, uint256 _amount);\\r\\n\\tevent Delegate(uint256 indexed _validatorId, uint256 _amountDelegated);\\r\\n\\tevent RequestWithdraw(\\r\\n\\t\\taddress indexed _from,\\r\\n\\t\\tuint256 _amountJMS,\\r\\n\\t\\tuint256 _amountMatic\\r\\n\\t);\\r\\n\\tevent ClaimWithdrawal(\\r\\n\\t\\taddress indexed _from,\\r\\n\\t\\tuint256 indexed _idx,\\r\\n\\t\\tuint256 _amountClaimed\\r\\n\\t);\\r\\n\\tevent WithdrawRewards(uint256 indexed _validatorId, uint256 _rewards);\\r\\n\\tevent StakeRewards(uint256 indexed _validatorId, uint256 _amountStaked);\\r\\n\\tevent DistributeFees(address indexed _address, uint256 _amount);\\r\\n\\tevent MigrateDelegation(\\r\\n\\t\\tuint256 indexed _fromValidatorId,\\r\\n\\t\\tuint256 indexed _toValidatorId,\\r\\n\\t\\tuint256 _amount\\r\\n\\t);\\r\\n\\tevent SetFeePercent(uint8 _feePercent);\\r\\n\\tevent SetTreasury(address _address);\\r\\n\\tevent SetValidatorRegistry(address _address);\\r\\n}\"\r\n    },\r\n    \"interfaces/IValidatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title IValidatorRegistry\\r\\n/// @notice Node validator registry interface\\r\\ninterface IValidatorRegistry {\\r\\n    function addValidator(uint256 _validatorId) external;\\r\\n\\r\\n    function removeValidator(uint256 _validatorId) external;\\r\\n\\r\\n    function setPreferredDepositValidatorId(uint256 _validatorId) external;\\r\\n\\r\\n    function setPreferredWithdrawalValidatorId(uint256 _validatorId) external;\\r\\n\\r\\n    function togglePause() external;\\r\\n\\r\\n    function preferredDepositValidatorId() external view returns (uint256);\\r\\n\\r\\n    function preferredWithdrawalValidatorId() external view returns (uint256);\\r\\n\\r\\n    function validatorIdExists(uint256 _validatorId)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function getStakeManager() external view returns (address _stakeManager);\\r\\n\\r\\n    function getValidatorId(uint256 _index) external view returns (uint256);\\r\\n\\r\\n    function getValidators() external view returns (uint256[] memory);\\r\\n\\r\\n    event AddValidator(uint256 indexed _validatorId);\\r\\n    event RemoveValidator(uint256 indexed _validatorId);\\r\\n    event SetPreferredDepositValidatorId(uint256 indexed _validatorId);\\r\\n    event SetPreferredWithdrawalValidatorId(uint256 indexed _validatorId);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IValidatorShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IValidatorShare {\\r\\n    struct DelegatorUnbond {\\r\\n        uint256 shares;\\r\\n        uint256 withdrawEpoch;\\r\\n    }\\r\\n\\r\\n    function minAmount() external view returns (uint256);\\r\\n\\r\\n    function unbondNonces(address _address) external view returns (uint256);\\r\\n\\r\\n    function validatorId() external view returns (uint256);\\r\\n\\r\\n    function delegation() external view returns (bool);\\r\\n\\r\\n    function buyVoucher(uint256 _amount, uint256 _minSharesToMint)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function sellVoucher_new(uint256 claimAmount, uint256 maximumSharesToBurn)\\r\\n        external;\\r\\n\\r\\n    function unstakeClaimTokens_new(uint256 unbondNonce) external;\\r\\n\\r\\n    function restake() external returns (uint256, uint256);\\r\\n\\r\\n    function withdrawRewards() external;\\r\\n\\r\\n    function getTotalStake(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function getLiquidRewards(address user) external view returns (uint256);\\r\\n\\r\\n    function unbonds_new(address _address, uint256 _unbondNonce)\\r\\n        external\\r\\n        view\\r\\n        returns (DelegatorUnbond memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"AddValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"RemoveValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"SetPreferredDepositValidatorId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"SetPreferredWithdrawalValidatorId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_stakeManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getValidatorId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preferredDepositValidatorId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preferredWithdrawalValidatorId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"setPreferredDepositValidatorId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"setPreferredWithdrawalValidatorId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validatorIdExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ValidatorRegistry", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005e3ef299fddf15eaa0432e6e66473ace8c13d908", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}