{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: interfaces/IUniswapV2Factory.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n// File: interfaces/IUniswapV2Router01.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n// File: interfaces/IUniswapV2Router02.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// File: interfaces/IUniswapV2Pair.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n// File: libraries/SafeMathInt.sol\r\n\r\n\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n// File: libraries/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n// File: contracts/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: contracts/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: contracts/ERC20Detailed.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n// File: contracts/HinasanInuV5.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HinasanInuV5 is ERC20Detailed, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    uint8 public _decimals = 5;\r\n\r\n    IUniswapV2Pair public pairContract;\r\n    mapping(address => bool) _isFeeExempt;\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n    uint256 public constant DECIMALS = 18;\r\n\r\n    //buy fees\r\n    uint256 public buyTreasuryFee = 30;\r\n    uint256 public buyLiquidityFee = 30;\r\n    uint256 public buyBurnerTokenFee = 20;\r\n    uint256 public totalBuyFee = buyTreasuryFee.add(buyBurnerTokenFee).add(buyLiquidityFee); // 9%\r\n\r\n    //sell fees\r\n    uint256 public sellTreasuryFee = 30;\r\n    uint256 public sellLiquidityFee = 30;\r\n    uint256 public sellBurnerTokenFee = 20;\r\n    uint256 public totalSellFee = sellTreasuryFee.add(sellLiquidityFee).add(sellBurnerTokenFee); // 9%\r\n    uint256 public feeDenominator = 1000;\r\n\r\n    //counters\r\n    uint256 internal buyTreasuryFeeAmount = 0;\r\n    uint256 internal buyBurnerTokenFeeAmount = 0;\r\n    uint256 internal buyLiquidityFeeAmount = 0;\r\n    uint256 internal sellTreasuryFeeAmount = 0;\r\n    uint256 internal sellLiquidityFeeAmount = 0;\r\n    uint256 internal sellBurnerTokenFeeAmount = 0;\r\n\r\n    //burnerToken\r\n    address[] tokens;\r\n    address activeToken = DEAD;\r\n    IERC20 activeTokenContract;\r\n    mapping (address => uint256) tokensBoughtAndBurned;\r\n    mapping (address => uint256) ethSpentOnToken;\r\n    uint256 totalEthSpent = 0;\r\n\r\n    uint256 public startTime;\r\n    uint256 public sellLimit = 5;\r\n    uint256 public holdLimit = 10;\r\n    uint256 public limitDenominator = 1000;\r\n    uint256 public constant TIME_STEP = 1 days;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    address public treasuryReceiver;\r\n    address public pairAddress;\r\n    bool public swapBackEnabled = true;\r\n    IUniswapV2Router02 public router;\r\n    address public pair;\r\n    bool inSwap = false;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    uint256 public _totalSupply = 1 * 10**9 * 10**DECIMALS;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public blacklist;\r\n    mapping(address => mapping(uint256 => uint256)) public sold;\r\n    mapping(address => bool) public _excludeFromLimit;\r\n    mapping(address => bool) public authorized;\r\n\r\n    bool public transferEnabled = false;\r\n    bool public autoAddLiquidity = true;\r\n    bool public autoBuyAndBurnToken = true;\r\n\r\n    modifier checkLimit(address from, address to, uint256 value) {\r\n        if(!_excludeFromLimit[from]) {\r\n            require(sold[from][getCurrentDay()] + value <= getUserSellLimit(), \"Cannot sell or transfer more than limit.\");\r\n        }\r\n        _;\r\n        if(!_excludeFromLimit[to]) {\r\n            require(_balances[to] <= getUserHoldLimit(), \"Cannot buy more than limit.\");\r\n        }\r\n    }\r\n\r\n    constructor(address _treasury, address _router) \r\n        ERC20Detailed(\"Hinasan Inu\", \"HINU\", uint8(DECIMALS)) Ownable() \r\n    {\r\n        router = IUniswapV2Router02(_router); \r\n        pair = IUniswapV2Factory(router.factory()).createPair(\r\n            router.WETH(),\r\n            address(this)\r\n        );\r\n      \r\n        treasuryReceiver = _treasury;\r\n        \r\n        _allowances[address(this)][address(router)] = uint256(-1);\r\n        pairAddress = pair;\r\n        pairContract = IUniswapV2Pair(pair);\r\n\r\n        _excludeFromLimit[address(this)] = true;\r\n        _excludeFromLimit[pair] = true;\r\n        _excludeFromLimit[treasuryReceiver] = true;\r\n\r\n        _balances[treasuryReceiver] = _totalSupply;\r\n        _allowances[treasuryReceiver][address(router)] = _totalSupply;\r\n        _isFeeExempt[treasuryReceiver] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        authorized[address(this)] = true;\r\n        authorized[treasuryReceiver] = true;\r\n\r\n        //First token active is KIBA ETH\r\n        activeToken = 0x005D1123878Fc55fbd56b54C73963b234a64af3c;\r\n        tokens.push(activeToken);\r\n        activeTokenContract = IERC20(activeToken);\r\n\r\n        _transferOwnership(_treasury);\r\n        emit Transfer(address(0x0), treasuryReceiver, _totalSupply);\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n        \r\n        if (_allowances[from][msg.sender] != uint256(-1)) {\r\n            _allowances[from][msg.sender] = _allowances[from][\r\n                msg.sender\r\n            ].sub(value, \"Insufficient Allowance\");\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) \r\n        internal \r\n        checkLimit(sender, recipient, amount) \r\n        returns (bool)\r\n    {\r\n\r\n        require(!blacklist[sender] && !blacklist[recipient], \"in_blacklist\");\r\n        require(transferEnabled || authorized[sender] || authorized[recipient], \"Transfer not yet enabled\");\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount) internal  returns (uint256) {\r\n        uint256 feeAmount = 0;\r\n        if(sender==pair){   //buy\r\n            feeAmount = amount.mul(totalBuyFee).div(feeDenominator);\r\n            _balances[address(this)] = _balances[address(this)].add(amount.mul(totalBuyFee).div(feeDenominator));\r\n\r\n            buyBurnerTokenFeeAmount = buyBurnerTokenFeeAmount.add(feeAmount.mul(buyBurnerTokenFee).div(totalBuyFee));\r\n            buyTreasuryFeeAmount = buyTreasuryFeeAmount.add(feeAmount.mul(buyTreasuryFee).div(totalBuyFee));\r\n            buyLiquidityFeeAmount = buyLiquidityFeeAmount.add(feeAmount.mul(buyLiquidityFee).div(totalBuyFee));\r\n        } \r\n        else {  //sell\r\n            feeAmount = amount.mul(totalSellFee).div(feeDenominator);\r\n            _balances[address(this)] = _balances[address(this)].add(amount.mul(totalSellFee).div(feeDenominator));\r\n\r\n            sellBurnerTokenFeeAmount = sellBurnerTokenFeeAmount.add(feeAmount.mul(sellBurnerTokenFee).div(totalSellFee));\r\n            sellTreasuryFeeAmount = sellTreasuryFeeAmount.add(feeAmount.mul(sellTreasuryFee).div(totalSellFee));\r\n            sellLiquidityFeeAmount = sellLiquidityFeeAmount.add(feeAmount.mul(sellLiquidityFee).div(totalSellFee));\r\n        }\r\n        \r\n        emit Transfer(sender, address(this), feeAmount);\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 amount = _balances[address(this)];\r\n\r\n        uint256 totalCollectedAmount = \r\n            buyBurnerTokenFeeAmount\r\n            .add(buyTreasuryFeeAmount)\r\n            .add(buyLiquidityFeeAmount)\r\n            .add(sellBurnerTokenFeeAmount)\r\n            .add(sellTreasuryFeeAmount)\r\n            .add(sellLiquidityFeeAmount);\r\n\r\n        uint256 totalCollectedAmountToSwap = totalCollectedAmount.sub(sellLiquidityFeeAmount.add(buyLiquidityFeeAmount));\r\n\r\n        if( totalCollectedAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amountToLiq = amount.mul(sellLiquidityFeeAmount.add(buyLiquidityFeeAmount)).div(totalCollectedAmount);\r\n\r\n        //add liquidity\r\n        if(autoAddLiquidity){\r\n            addLiquidity(amountToLiq);\r\n        }\r\n\r\n        //Swap back\r\n        uint256 amountToSwap = _balances[address(this)];\r\n        uint256 balanceBefore = address(this).balance;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance.sub(\r\n            balanceBefore\r\n        );\r\n\r\n        //send taxed fee to treasury\r\n        (bool success, ) = payable(treasuryReceiver).call{\r\n            value: amountETH.mul(buyTreasuryFeeAmount.add(sellTreasuryFeeAmount)).div(totalCollectedAmountToSwap),\r\n            gas: 30000\r\n        }(\"\");\r\n\r\n        //buy and burn tokens\r\n        if(autoBuyAndBurnToken) {\r\n            _buyAndBurnTokens(amountETH.mul(buyBurnerTokenFeeAmount.add(sellBurnerTokenFeeAmount)).div(totalCollectedAmountToSwap));\r\n        }\r\n\r\n        //reset counters\r\n        buyBurnerTokenFeeAmount = 0;\r\n        buyTreasuryFeeAmount = 0;\r\n        buyLiquidityFeeAmount = 0;\r\n        sellBurnerTokenFeeAmount = 0;\r\n        sellTreasuryFeeAmount = 0;\r\n        sellLiquidityFeeAmount = 0;\r\n    }\r\n\r\n    function addLiquidity(uint256 _amount) internal {\r\n\r\n        uint256 amountToLiquify = _amount.div(2);\r\n        uint256 amountToSwap = _amount.sub(amountToLiquify);\r\n\r\n        if( amountToSwap == 0 ) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETHLiquidity = address(this).balance.sub(balanceBefore);\r\n\r\n        if (amountToLiquify > 0&&amountETHLiquidity > 0) {\r\n            router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                DEAD,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function _buyAndBurnTokens(uint256 amountEth) internal {\r\n\r\n        //set path variable\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = activeToken;\r\n\r\n        //buy tokens\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountEth}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        //update info\r\n        uint256 activeTokenBalance = activeTokenContract.balanceOf(address(this));\r\n        tokensBoughtAndBurned[activeToken] = tokensBoughtAndBurned[activeToken].add(activeTokenBalance);\r\n        ethSpentOnToken[activeToken] = ethSpentOnToken[activeToken].add(amountEth);\r\n        totalEthSpent = totalEthSpent.add(amountEth);\r\n\r\n        //burn tokens\r\n        activeTokenContract.approve(address(router), activeTokenBalance);\r\n        activeTokenContract.transfer(DEAD, activeTokenBalance);\r\n    }\r\n\r\n    function buyAndBurnTokens(uint256 amountEth) external onlyOwner() {\r\n        require(address(this).balance >= amountEth, \"Not enough balance\");\r\n        require(inSwap==false, \"Currently in swap\");\r\n        _buyAndBurnTokens(amountEth);\r\n    }\r\n\r\n    function setToken(address _token) external onlyOwner() {\r\n        activeToken = _token;\r\n\r\n        if(!findToken(_token)){\r\n            tokens.push(_token);\r\n        }\r\n\r\n        activeTokenContract = IERC20(_token);\r\n    }\r\n\r\n    function findToken(address _token) internal view returns(bool){\r\n        for(uint256 i=0; i<tokens.length; i++){\r\n            if(tokens[i]==_token){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getActiveToken() external view returns (address){\r\n        return activeToken;\r\n    }\r\n\r\n    //Testing purposes\r\n    function readBalance() external view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    //Testing purposes\r\n    function readTokenBalance(address _token) external view returns (uint256){\r\n        IERC20 _tokenContract = IERC20(_token);\r\n        return _tokenContract.balanceOf(address(this));\r\n    }\r\n\r\n    //Testing purposes\r\n    function readTokenBalanceDeadAddress(address _token) external view returns (uint256){\r\n        IERC20 _tokenContract = IERC20(_token);\r\n        return _tokenContract.balanceOf(DEAD);\r\n    }\r\n\r\n    function getTokensBoughtAddresses() external view onlyOwner() returns(address[] memory){\r\n        return tokens;\r\n    }\r\n\r\n    function getTokenAmountBought(address _token) external view returns(uint256){\r\n        return tokensBoughtAndBurned[_token];\r\n    }\r\n\r\n    function getEthAmountSpentOnToken(address _token) external view returns(uint256){\r\n        return ethSpentOnToken[_token];\r\n    }\r\n\r\n    function getTotalEthSpent() external view returns (uint256){\r\n        return totalEthSpent;\r\n    }\r\n\r\n    function getTokensAmountBought() external view onlyOwner() returns(uint256[] memory){\r\n        uint256[] memory _amounts = new uint256[](tokens.length);\r\n\r\n        for(uint256 i=0;i<tokens.length;i++){\r\n            _amounts[i] = tokensBoughtAndBurned[tokens[i]];\r\n        }\r\n\r\n        return _amounts;\r\n    }\r\n\r\n    function getEthAmountsSpentOnToken() external view onlyOwner() returns(uint256[] memory){\r\n        uint256[] memory _amounts = new uint256[](tokens.length);\r\n\r\n        for(uint256 i=0;i<tokens.length;i++){\r\n            _amounts[i] = ethSpentOnToken[tokens[i]];\r\n        }\r\n\r\n        return _amounts;\r\n    }\r\n\r\n    function minZero(uint a, uint b) private pure returns(uint) {\r\n        if (a > b) {\r\n           return a - b; \r\n        } else {\r\n           return 0;    \r\n        }    \r\n    }\r\n\r\n    function getCurrentDay() public view returns (uint256) {\r\n        return minZero(block.timestamp, startTime).div(TIME_STEP);\r\n    }\r\n\r\n    function getUserHoldLimit() public view returns (uint256) {\r\n        return getCirculatingSupply().mul(holdLimit).div(limitDenominator);\r\n    }\r\n\r\n    function getUserSellLimit() public view returns (uint256) {\r\n        return getCirculatingSupply().mul(sellLimit).div(limitDenominator);\r\n    }\r\n\r\n    function shouldTakeFee(address from, address to) internal view returns (bool){\r\n        return (pair == from || pair == to) && !_isFeeExempt[from];\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return \r\n            !inSwap &&\r\n            msg.sender != pair &&\r\n            transferEnabled &&\r\n            swapBackEnabled; \r\n    }\r\n\r\n    //Can only be activated, not deactivated\r\n    function setTransferEnabled() external onlyOwner{\r\n        authorized[pair] = true;\r\n        transferEnabled = true;\r\n    }\r\n\r\n    function setSwapBackEnabled(bool flag) external onlyOwner{\r\n        swapBackEnabled = flag;\r\n    }\r\n\r\n    function setAuthorized(address[] memory _addr, bool _flag) external onlyOwner() {\r\n        for(uint256 i=0; i<_addr.length; i++){\r\n            authorized[_addr[i]] = _flag;\r\n        }\r\n    }\r\n\r\n    function setAutoAddMechanisms(bool _autoAddLiq, bool _autoBuyAndBurnToken) external onlyOwner(){\r\n        autoAddLiquidity = _autoAddLiq;\r\n        autoBuyAndBurnToken = _autoBuyAndBurnToken;\r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        uint256 oldValue = _allowances[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowances[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowances[msg.sender][spender] = oldValue.sub(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _allowances[msg.sender][spender] = _allowances[msg.sender][\r\n            spender\r\n        ].add(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external override returns (bool) {\r\n        _allowances[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return\r\n            (_totalSupply.sub(_balances[DEAD]).sub(_balances[ZERO]));\r\n    }\r\n\r\n    function getPair() external view returns (address) {\r\n        return pair;\r\n    }\r\n\r\n    function isNotInSwap() external view returns (bool) {\r\n        return !inSwap;\r\n    }\r\n\r\n    function manualSync() external {\r\n        IUniswapV2Pair(pair).sync();\r\n    }\r\n\r\n    function setFees (uint256 buytreasf,uint256 buyburnertokenf, uint256 selltreasf, uint256 sellburnertokenf, uint256 sellliqf) external onlyOwner{\r\n        buyTreasuryFee = buytreasf;\r\n        buyBurnerTokenFee = buyburnertokenf;\r\n        totalBuyFee = buyTreasuryFee.add(buyBurnerTokenFee);\r\n        sellTreasuryFee = selltreasf;\r\n        sellBurnerTokenFee = sellburnertokenf;\r\n        sellLiquidityFee = sellliqf;\r\n        totalSellFee = sellTreasuryFee.add(sellBurnerTokenFee).add(sellLiquidityFee);\r\n        require(totalBuyFee.add(totalSellFee) <= 300, \"Total buy+sell fee can't ever be above 30%\");\r\n    }\r\n\r\n    function setWhitelist(address[] memory addr, bool flag) external onlyOwner {\r\n        for(uint256 i=0; i<addr.length; i++){\r\n            authorized[addr[i]] = flag;\r\n            _isFeeExempt[addr[i]] = flag;\r\n            _excludeFromLimit[addr[i]] = flag;\r\n        }\r\n    }\r\n\r\n    function setExcludeFromLimit(address _address, bool _bool) public onlyOwner {\r\n        _excludeFromLimit[_address] = _bool;\r\n    }\r\n\r\n    function setBotBlacklist(address _botAddress, bool _flag) external onlyOwner {\r\n        require(isContract(_botAddress), \"Only contract address, not allowed exteranlly owned account\");\r\n        blacklist[_botAddress] = _flag;    \r\n    }\r\n\r\n    function setPairAddress(address _pairAddress) public onlyOwner {\r\n        pairAddress = _pairAddress;\r\n    }\r\n\r\n    function setLP(address _address) external onlyOwner {\r\n        pairContract = IUniswapV2Pair(_address);\r\n    }\r\n    \r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n   \r\n    function balanceOf(address who) external view override returns (uint256) {\r\n        return _balances[who];\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludeFromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuyAndBurnToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"}],\"name\":\"buyAndBurnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnerTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getEthAmountSpentOnToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAmountsSpentOnToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenAmountBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensAmountBought\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensBoughtAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEthSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserHoldLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"readTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"readTokenBalanceDeadAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnerTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoAddLiq\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_autoBuyAndBurnToken\",\"type\":\"bool\"}],\"name\":\"setAutoAddMechanisms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBotBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setExcludeFromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buytreasf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyburnertokenf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selltreasf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellburnertokenf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellliqf\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setSwapBackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTransferEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HinasanInuV5", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003947045e49eadbef4a4c1bc27bff68434f7dc2fe0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8d9e1f7a44f999911c5ccc32e88afb1bddae97c8f265d669ddc6809d1e50cb89"}]}