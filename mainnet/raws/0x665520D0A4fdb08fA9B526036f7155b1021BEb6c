{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TreeMarket/Lottery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/*\\r\\n ______     __                            __           __                      __\\r\\n|_   _ \\\\   [  |                          |  ]         [  |                    |  ]\\r\\n  | |_) |   | |    .--.     .--.     .--.| |   .--.    | |--.    .---.    .--.| |\\r\\n  |  __'.   | |  / .'`\\\\ \\\\ / .'`\\\\ \\\\ / /'`\\\\' |  ( (`\\\\]   | .-. |  / /__\\\\\\\\ / /'`\\\\' |\\r\\n _| |__) |  | |  | \\\\__. | | \\\\__. | | \\\\__/  |   `'.'.   | | | |  | \\\\__., | \\\\__/  |\\r\\n|_______/  [___]  '.__.'   '.__.'   '.__.;__] [\\\\__) ) [___]|__]  '.__.'  '.__.;__]\\r\\n                      ________\\r\\n                      ___  __ )_____ ______ _________________\\r\\n                      __  __  |_  _ \\\\_  __ `/__  ___/__  ___/\\r\\n                      _  /_/ / /  __// /_/ / _  /    _(__  )\\r\\n                      /_____/  \\\\___/ \\\\__,_/  /_/     /____/\\r\\n*/\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\n\\r\\ninterface IBloodToken {\\r\\n  function spend(address wallet_, uint256 amount_) external;\\r\\n  function walletsBalances(address wallet_) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract Lottery is VRFConsumerBaseV2, Ownable {\\r\\n\\r\\n    uint256 private constant MAX_CHANCE = 1_000_000;\\r\\n    uint256 private constant MAX_UINT256 = type(uint256).max;\\r\\n\\r\\n    IBloodToken public bloodToken;\\r\\n\\r\\n    struct ListItem {\\r\\n        uint256 roundStart; // timestamp\\r\\n        uint8 status; // 0 = not listed, 1 = don't allow tickets, 2 = allow tickets\\r\\n        uint256 price; // price of ticket in BLD\\r\\n        uint32 chance; // number between 1 - MAX_CHANCE, if tickets are limited than 0, should be 1 of N (N = chance)\\r\\n        /* \\r\\n        100% chance = 1\\r\\n        50% chance = 2\\r\\n        33.3% chance = 3\\r\\n        10% chance = 10\\r\\n        5% chance = 20\\r\\n        1% chance = 100\\r\\n        0.1% chance = 1000\\r\\n        */\\r\\n        uint256 tickets; // max tickets available, 0 = unlimited\\r\\n        uint256 maxPerAddress; // max tickets per address, 0 = unlimited\\r\\n        address winner; // only gets set if user wins it with chance ticket\\r\\n        address winnerBLD; // only gets set if user wins it with chance ticket\\r\\n    }\\r\\n\\r\\n    struct InputItem {\\r\\n        /* InputItem only used as input parameter */\\r\\n        uint256 projectId;\\r\\n        uint8 status;\\r\\n        uint256 price;\\r\\n        uint32 chance;\\r\\n        uint256 tickets;\\r\\n        uint256 maxPerAddress;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => ListItem) public listDetails; // projectId => ListItem \\r\\n    mapping(uint256 => mapping(uint256 => address[])) public projectTickets;\\r\\n    mapping(bytes32 => uint256) public projectTicketsUser; // bytes32 = projectId + roundStart + address\\r\\n\\r\\n    mapping(uint256 => uint256[]) private vrfRequest; // requestId => projectIds\\r\\n\\r\\n    // VRF Settings\\r\\n    VRFCoordinatorV2Interface COORDINATOR;\\r\\n    uint64 s_subscriptionId;\\r\\n    address vrfCoordinator;\\r\\n    bytes32 s_keyHash;\\r\\n\\r\\n    uint32 callbackGasLimit = 200000;\\r\\n    uint16 requestConfirmations = 3;\\r\\n\\r\\n    event ChanceBought(address wallet, uint256 project, uint256 price, uint256 tickets);\\r\\n    event DrawComplete(uint256 project, address winner, address winnerBLD);\\r\\n    event ItemAdded(\\r\\n        uint256 project, \\r\\n        uint256 roundStart, \\r\\n        uint8 status, \\r\\n        uint256 price, \\r\\n        uint32 chance, \\r\\n        uint256 tickets, \\r\\n        uint256 maxPerAddress\\r\\n    );\\r\\n    event ItemUpdated(\\r\\n        uint256 project, \\r\\n        uint8 status, \\r\\n        uint256 price, \\r\\n        uint32 chance, \\r\\n        uint256 tickets, \\r\\n        uint256 maxPerAddress\\r\\n    );\\r\\n    event ItemRemoved(uint256 project);\\r\\n    event ItemRestarted(uint256 project, uint256 roundStart);\\r\\n\\r\\n    constructor(\\r\\n        address _bloodToken,\\r\\n        uint64 _subscriptionId,\\r\\n        address _vrfCoordinator,\\r\\n        bytes32 _sKeyHash\\r\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\r\\n        bloodToken = IBloodToken(_bloodToken);\\r\\n        vrfCoordinator = _vrfCoordinator;\\r\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\r\\n        s_subscriptionId = _subscriptionId;\\r\\n        s_keyHash = _sKeyHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Add items.\\r\\n    * @param _items: [InputItem, InputItem, ...]\\r\\n    */\\r\\n    function addItems(InputItem[] calldata _items) external onlyOwner {\\r\\n        for (uint8 i = 0; i < _items.length; i++) {\\r\\n            require(\\r\\n                listDetails[_items[i].projectId].status == 0, \\r\\n                \\\"Item already listed.\\\"\\r\\n            );\\r\\n            require(\\r\\n                _items[i].chance >= 0 && _items[i].chance < MAX_CHANCE, \\r\\n                \\\"Chance needs to be in range 0 - MAX_CHANCE.\\\"\\r\\n            );\\r\\n            require(\\r\\n                _items[i].status == 1 || _items[i].status == 2, \\r\\n                \\\"Status needs to be 1 or 2.\\\"\\r\\n            );\\r\\n\\r\\n            listDetails[_items[i].projectId] = ListItem({\\r\\n                roundStart: block.timestamp,\\r\\n                status: _items[i].status,\\r\\n                price: _items[i].price,\\r\\n                chance: _items[i].chance,\\r\\n                tickets: _items[i].tickets,\\r\\n                maxPerAddress: _items[i].maxPerAddress,\\r\\n                winner: address(0),\\r\\n                winnerBLD: address(0)\\r\\n            });\\r\\n\\r\\n            emit ItemAdded(\\r\\n                _items[i].projectId, \\r\\n                listDetails[_items[i].projectId].roundStart, \\r\\n                listDetails[_items[i].projectId].status, \\r\\n                listDetails[_items[i].projectId].price, \\r\\n                listDetails[_items[i].projectId].chance, \\r\\n                listDetails[_items[i].projectId].tickets,\\r\\n                listDetails[_items[i].projectId].maxPerAddress\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Remove items.\\r\\n    * @param _items: [projectId, projectId, projectId, ...]\\r\\n    */\\r\\n    function removeItems(uint256[] calldata _items) external onlyOwner {\\r\\n        for (uint8 i = 0; i < _items.length; i++) {\\r\\n            require(\\r\\n                listDetails[_items[i]].status != 0, \\r\\n                \\\"Item NOT listed.\\\"\\r\\n            );\\r\\n            require(\\r\\n                listDetails[_items[i]].winner == address(0), \\r\\n                \\\"Item already won.\\\"\\r\\n            );\\r\\n            delete listDetails[_items[i]];\\r\\n            emit ItemRemoved(_items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Update items.\\r\\n    * @param _items: [InputItem, InputItem, ...]\\r\\n    */\\r\\n    function updateItems(InputItem[] calldata _items) external onlyOwner {\\r\\n        for (uint8 i = 0; i < _items.length; i++) {\\r\\n            require(\\r\\n                listDetails[_items[i].projectId].status != 0, \\r\\n                \\\"Item NOT listed.\\\"\\r\\n            );\\r\\n            require(\\r\\n                listDetails[_items[i].projectId].winner == address(0), \\r\\n                \\\"Item already won.\\\"\\r\\n            );\\r\\n            require(\\r\\n                _items[i].chance >= 0 && _items[i].chance < MAX_CHANCE, \\r\\n                \\\"Chance needs to be in range 0 - MAX_CHANCE.\\\"\\r\\n            );\\r\\n            require(\\r\\n                _items[i].status == 1 || _items[i].status == 2, \\r\\n                \\\"Status needs to be 1 or 2.\\\"\\r\\n            );\\r\\n\\r\\n            listDetails[_items[i].projectId].status = _items[i].status;\\r\\n            listDetails[_items[i].projectId].price = _items[i].price;\\r\\n            listDetails[_items[i].projectId].chance = _items[i].chance;\\r\\n            listDetails[_items[i].projectId].tickets = _items[i].tickets;\\r\\n            listDetails[_items[i].projectId].maxPerAddress = _items[i].maxPerAddress;\\r\\n\\r\\n            emit ItemUpdated(\\r\\n                _items[i].projectId, \\r\\n                listDetails[_items[i].projectId].status, \\r\\n                listDetails[_items[i].projectId].price, \\r\\n                listDetails[_items[i].projectId].chance, \\r\\n                listDetails[_items[i].projectId].tickets,\\r\\n                listDetails[_items[i].projectId].maxPerAddress\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Restart items.\\r\\n    * @param _projectIds: [projectId, projectId, ...]\\r\\n    */\\r\\n    function restartItems(uint256[] calldata _projectIds) external onlyOwner {\\r\\n        for (uint8 i = 0; i < _projectIds.length; i++) {\\r\\n            require(\\r\\n                listDetails[_projectIds[i]].status == 1, \\r\\n                \\\"Item with incorrect status.\\\"\\r\\n            );\\r\\n            require(\\r\\n                listDetails[_projectIds[i]].winner == address(0), \\r\\n                \\\"Item already won.\\\"\\r\\n            );\\r\\n\\r\\n            listDetails[_projectIds[i]].status = 2;\\r\\n            listDetails[_projectIds[i]].roundStart = block.timestamp;\\r\\n            listDetails[_projectIds[i]].winnerBLD = address(0);\\r\\n\\r\\n            emit ItemRestarted(_projectIds[i], listDetails[_projectIds[i]].roundStart);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Buy chance to participate.\\r\\n    * @param _items: [[projectId, tickets], [projectId, tickets], ...]\\r\\n    */\\r\\n    function buyChance(uint256[][] calldata _items, address _user) external {\\r\\n        uint256 projectId;\\r\\n        uint256 tickets;\\r\\n        uint256 amtTotal;\\r\\n        for (uint8 i = 0; i < _items.length; i++) {\\r\\n            projectId = _items[i][0];\\r\\n            tickets = _items[i][1];\\r\\n\\r\\n            if (tickets > 0) {\\r\\n                require(listDetails[projectId].status == 2, \\\"Cannot buy item tickets.\\\");\\r\\n                require(\\r\\n                    listDetails[projectId].tickets == 0 || \\r\\n                    listDetails[projectId].tickets >= noProjTickets(projectId) + tickets, \\r\\n                    \\\"Not enough tickets available.\\\"\\r\\n                );\\r\\n\\r\\n                require(\\r\\n                    getAvailableTickets(projectId, _user) >= tickets,\\r\\n                    \\\"Too many tickets requested.\\\"\\r\\n                );\\r\\n\\r\\n                amtTotal += listDetails[projectId].price * tickets;\\r\\n\\r\\n                // add tickets for user\\r\\n                for (uint256 j = 0; j < tickets; j ++) {\\r\\n                    projectTickets[projectId][listDetails[projectId].roundStart].push(_user);\\r\\n                }\\r\\n                projectTicketsUser[getUserHash(projectId, _user)] += tickets;\\r\\n\\r\\n                emit ChanceBought(_user, projectId, listDetails[projectId].price, tickets);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (msg.sender != owner()) {\\r\\n            require(\\r\\n                bloodToken.walletsBalances(msg.sender) >= amtTotal, \\r\\n                \\\"Insufficient BLD on internal wallet.\\\"\\r\\n            );\\r\\n            bloodToken.spend(msg.sender, amtTotal);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Draw results to get winners.\\r\\n    * @param _items: [projectId, projectId, projectId, ...]\\r\\n    */\\r\\n    function draw(uint256[] calldata _items) external onlyOwner {\\r\\n        // Will revert if subscription is not set and funded.\\r\\n        uint256 _requestId = COORDINATOR.requestRandomWords(\\r\\n            s_keyHash,\\r\\n            s_subscriptionId,\\r\\n            requestConfirmations,\\r\\n            callbackGasLimit,\\r\\n            uint32(_items.length)\\r\\n        );\\r\\n\\r\\n        uint256 projectId;\\r\\n        for (uint8 i = 0; i < _items.length; i++) {\\r\\n            projectId = _items[i];\\r\\n\\r\\n            require(\\r\\n                listDetails[projectId].status != 0, \\r\\n                \\\"Item NOT listed.\\\"\\r\\n            );\\r\\n            require(\\r\\n                listDetails[projectId].winner == address(0), \\r\\n                \\\"Item already won.\\\"\\r\\n            );\\r\\n\\r\\n            vrfRequest[_requestId].push(projectId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function noProjTickets(uint256 _projectId) public view returns (uint256) {\\r\\n        return projectTickets[_projectId][listDetails[_projectId].roundStart].length;\\r\\n    }\\r\\n\\r\\n    function getProjTicket(uint256 _projectId, uint256 _idx) public view returns (address) {\\r\\n        return projectTickets[_projectId][listDetails[_projectId].roundStart][_idx];\\r\\n    }\\r\\n\\r\\n    function getUserHash(uint256 _projectId, address _user) public view returns (bytes32) {\\r\\n        return keccak256(\\r\\n            abi.encodePacked(_projectId, listDetails[_projectId].roundStart, _user)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getAvailableTickets(uint256 _projectId, address _user) public view returns (uint256) {\\r\\n        return listDetails[_projectId].maxPerAddress - projectTicketsUser[getUserHash(_projectId, _user)];\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\r\\n        uint256 projectId;\\r\\n        uint256 winnerIdx;\\r\\n        uint256 cntProjTickets;\\r\\n        for (uint256 i = 0; i < randomWords.length; i++) {\\r\\n            projectId = vrfRequest[requestId][i];\\r\\n\\r\\n            if (listDetails[projectId].status == 2) {\\r\\n                // fail safe in case of multiple draw events\\r\\n\\r\\n                cntProjTickets = noProjTickets(projectId);\\r\\n                listDetails[projectId].status = 1; // disable submitting tickets\\r\\n\\r\\n                if (listDetails[projectId].tickets > 0) {\\r\\n                    // guaranteed winner\\r\\n                    winnerIdx = randomWords[i] % cntProjTickets;\\r\\n\\r\\n                } else {\\r\\n                    // non-guaranteed winner\\r\\n                    winnerIdx = randomWords[i] % (listDetails[projectId].chance * cntProjTickets);\\r\\n                    if (winnerIdx > cntProjTickets - 1) {\\r\\n                        winnerIdx = MAX_UINT256;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (winnerIdx != MAX_UINT256) {\\r\\n                    listDetails[projectId].winner = getProjTicket(projectId, winnerIdx);\\r\\n                }\\r\\n\\r\\n                // get BLD winner\\r\\n                listDetails[projectId].winnerBLD = getProjTicket(\\r\\n                    projectId, (randomWords[i] + block.timestamp) % cntProjTickets\\r\\n                );\\r\\n                \\r\\n                emit DrawComplete(projectId, listDetails[projectId].winner, listDetails[projectId].winnerBLD);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bloodToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_sKeyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"project\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"}],\"name\":\"ChanceBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"project\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winnerBLD\",\"type\":\"address\"}],\"name\":\"DrawComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"project\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chance\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"}],\"name\":\"ItemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"project\",\"type\":\"uint256\"}],\"name\":\"ItemRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"project\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundStart\",\"type\":\"uint256\"}],\"name\":\"ItemRestarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"project\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chance\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"}],\"name\":\"ItemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"chance\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"}],\"internalType\":\"struct Lottery.InputItem[]\",\"name\":\"_items\",\"type\":\"tuple[]\"}],\"name\":\"addItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bloodToken\",\"outputs\":[{\"internalType\":\"contract IBloodToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"_items\",\"type\":\"uint256[][]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"buyChance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_items\",\"type\":\"uint256[]\"}],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAvailableTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getProjTicket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundStart\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"chance\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winnerBLD\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"noProjTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectTickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"projectTicketsUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_items\",\"type\":\"uint256[]\"}],\"name\":\"removeItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_projectIds\",\"type\":\"uint256[]\"}],\"name\":\"restartItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"chance\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"}],\"internalType\":\"struct Lottery.InputItem[]\",\"name\":\"_items\",\"type\":\"tuple[]\"}],\"name\":\"updateItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lottery", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006d9b6821ab5b9111c64828dc7445f8c5066f09990000000000000000000000000000000000000000000000000000000000000071000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e699098af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}