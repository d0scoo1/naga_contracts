{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ProtocolCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AccountCenterInterface {\\n    function owner() external view returns (address);\\n}\\n\\ncontract ProtocolCenter {\\n\\n    address public accountCenter;\\n\\n    mapping(string => address) public protocols;\\n\\n    modifier onlyOwner() {\\n        require(accountCenter != address(0), \\\"CHFRY: accountCenter not set\\\");\\n        require(\\n            msg.sender == AccountCenterInterface(accountCenter).owner(),\\n            \\\"CHFRY: only AccountCenter Owner\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor (address _accountCenter) {\\n        require(\\n            _accountCenter != address(0),\\n            \\\"CHFRY: accountCenter should not be 0\\\"\\n        );\\n        accountCenter = _accountCenter;\\n    }\\n\\n    function setAccountCenter(address _accountCenter) external onlyOwner{\\n        require(\\n            _accountCenter != address(0),\\n            \\\"CHFRY: accountCenter should not be 0\\\"\\n        );\\n        accountCenter = _accountCenter;\\n    }\\n\\n    function addProtocol(string calldata protocolName, address protocol)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            protocol != address(0),\\n            \\\"CHFRY addConnectors: protocol address not vaild\\\"\\n        );\\n        protocols[protocolName] = protocol;\\n    }\\n\\n    function updateProtocol(string calldata protocolName, address protocol)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            protocols[protocolName] != address(0),\\n            \\\"addConnectors: protocol not exist\\\"\\n        );\\n        require(\\n            protocol != address(0),\\n            \\\"CHFRY addConnectors: protocol address not vaild\\\"\\n        );\\n\\n        protocols[protocolName] = protocol;\\n    }\\n\\n    function removeProtocol(string calldata protocolName )\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            protocols[protocolName] != address(0),\\n            \\\"addConnectors: protocol not exist\\\"\\n        );\\n\\n        protocols[protocolName] = address(0);\\n    }\\n\\n    function getProtocol(string memory protocolName)\\n        external\\n        view\\n        returns (address protocol)\\n    {\\n        protocol = protocols[protocolName];\\n        require(protocol != address(0),\\\"CHFRY: protocol not exist\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountCenter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accountCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"addProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"}],\"name\":\"getProtocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"protocols\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"}],\"name\":\"removeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountCenter\",\"type\":\"address\"}],\"name\":\"setAccountCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"updateProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProtocolCenter", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9f31ee4c802cd670be2a58b8c3069db74b34f6a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}