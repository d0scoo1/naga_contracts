{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/interfaces/IMerkleDistributor.sol\r\n\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n// Allows anyone to claim a token if they exist in a merkle root.\r\n\r\ninterface IMerkleDistributor {\r\n\r\n    // Returns the address of the token distributed by this contract.\r\n\r\n    function token() external view returns (address);\r\n\r\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\r\n\r\n    function merkleRoot() external view returns (bytes32);\r\n\r\n    // Returns true if the index has been marked claimed.\r\n\r\n    function isClaimed(uint256 index) external view returns (bool);\r\n\r\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\r\n\r\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\r\n\r\n\r\n\r\n    // This event is triggered whenever a call to #claim succeeds.\r\n\r\n    event Claimed(uint256 index, address account, uint256 amount);\r\n\r\n}\r\n// File: contracts/interfaces/IMerkleExchanger.sol\r\n\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n\r\n// Allows anyone to claim a token if they exist in a merkle root.\r\n\r\ninterface IMerkleExchanger is IMerkleDistributor {\r\n\r\n    // Returns the address of the token distributed by this contract.\r\n\r\n    function oldToken() external view returns (address);\r\n\r\n}\r\n// File: contracts/interfaces/MerkleProof.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n\r\n *\r\n\r\n * The proofs can be generated using the JavaScript library\r\n\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n\r\n *\r\n\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n\r\n */\r\n\r\nlibrary MerkleProof {\r\n\r\n    /**\r\n\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n\r\n     */\r\n\r\n    function verify(\r\n\r\n        bytes32[] memory proof,\r\n\r\n        bytes32 root,\r\n\r\n        bytes32 leaf\r\n\r\n    ) internal pure returns (bool) {\r\n\r\n        return processProof(proof, leaf) == root;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\r\n\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n\r\n     * of leafs & pre-images are assumed to be sorted.\r\n\r\n     *\r\n\r\n     * _Available since v4.4._\r\n\r\n     */\r\n\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n\r\n                // Hash(current computed hash + current element of the proof)\r\n\r\n                computedHash = _efficientHash(computedHash, proofElement);\r\n\r\n            } else {\r\n\r\n                // Hash(current element of the proof + current computed hash)\r\n\r\n                computedHash = _efficientHash(proofElement, computedHash);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return computedHash;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n\r\n        assembly {\r\n\r\n            mstore(0x00, a)\r\n\r\n            mstore(0x20, b)\r\n\r\n            value := keccak256(0x00, 0x40)\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n\r\n */\r\n\r\ninterface IERC20 {\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens in existence.\r\n\r\n     */\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n\r\n     */\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\r\n     * zero by default.\r\n\r\n     *\r\n\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n\r\n     */\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n\r\n     * transaction ordering. One possible solution to mitigate this race\r\n\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n\r\n     * desired value afterwards:\r\n\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event.\r\n\r\n     */\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n\r\n     * allowance.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\r\n     * another (`to`).\r\n\r\n     *\r\n\r\n     * Note that `value` may be zero.\r\n\r\n     */\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\r\n     * a call to {approve}. `value` is the new allowance.\r\n\r\n     */\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n// File: contracts/MerkleExchanger.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MerkleExchanger is IMerkleExchanger {\r\n\r\n    address public immutable override token;\r\n\r\n    bytes32 public immutable override merkleRoot;\r\n\r\n    address public immutable override oldToken;\r\n\r\n\r\n\r\n    address private immutable holdingAccount;\r\n\r\n\r\n\r\n    // This is a packed array of booleans.\r\n\r\n    mapping(uint256 => uint256) private claimedBitMap;\r\n\r\n\r\n\r\n    constructor(address token_, bytes32 merkleRoot_, address oldToken_, address holdingAccount_) {\r\n\r\n        token = token_;\r\n\r\n        merkleRoot = merkleRoot_;\r\n\r\n        oldToken = oldToken_;\r\n\r\n        holdingAccount = holdingAccount_;\r\n\r\n    }\r\n\r\n\r\n\r\n    function isClaimed(uint256 index) public view override returns (bool) {\r\n\r\n        uint256 claimedWordIndex = index / 256;\r\n\r\n        uint256 claimedBitIndex = index % 256;\r\n\r\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\r\n\r\n        uint256 mask = (1 << claimedBitIndex);\r\n\r\n        return claimedWord & mask == mask;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _setClaimed(uint256 index) private {\r\n\r\n        uint256 claimedWordIndex = index / 256;\r\n\r\n        uint256 claimedBitIndex = index % 256;\r\n\r\n        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\r\n\r\n    }\r\n\r\n\r\n\r\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external override {\r\n\r\n        require(!isClaimed(index), \"MerkleExchanger: Drop already claimed.\");\r\n\r\n\r\n\r\n        // Verify the merkle proof.\r\n\r\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\r\n\r\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), \"MerkleExchanger: Invalid proof.\");\r\n\r\n\r\n\r\n        // Verify the account holds the required number of old tokens and has approved their use.\r\n\r\n        uint256 allowance = IERC20(oldToken).allowance(account, address(this));\r\n\r\n        \r\n\r\n        require(allowance >= amount, \"MerkleExchanger: Token allowance too small.\");\r\n\r\n\r\n\r\n        require(IERC20(oldToken).balanceOf(account) >= amount, \"MerkleExchanger: Account does not hold enough tokens.\");\r\n\r\n\r\n\r\n        // Mark it claimed and exchange the tokens.\r\n\r\n        _setClaimed(index);\r\n\r\n\r\n\r\n        uint256 oldTokenBalance = IERC20(oldToken).balanceOf(account);\r\n\r\n\r\n\r\n        if (oldTokenBalance > amount) {\r\n\r\n            require(IERC20(oldToken).transferFrom(account, holdingAccount, amount), \"MerkleExchanger: Transfer of old tokens failed.\");\r\n\r\n            require(IERC20(token).transfer(account, amount), \"MerkleExchanger: Transfer of new tokens failed.\");\r\n\r\n            emit Claimed(index, account, amount);\r\n\r\n        } else {\r\n\r\n            require(IERC20(oldToken).transferFrom(account, holdingAccount, oldTokenBalance), \"MerkleExchanger: Transfer of old tokens failed.\");\r\n\r\n            require(IERC20(token).transfer(account, oldTokenBalance), \"MerkleExchanger: Transfer of new tokens failed.\");\r\n\r\n            emit Claimed(index, account, oldTokenBalance);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function withdrawOld() public {\r\n\r\n      require(IERC20(oldToken).transfer(holdingAccount, IERC20(oldToken).balanceOf(address(this))), \"MerkleExchanger::withdrawOld: Withdraw failed.\");\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oldToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holdingAccount_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MerkleExchanger", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000080c24111d3f9e1ffecf3b41b9ca68e60a890866baea5f330ab855fb60644c174545b63cb71d1e13bf5120ccd0286de038438e44f0000000000000000000000000be4447860ddf283884bbaa3702749706750b09e0000000000000000000000003e822d55e79ea9f53c744bd9179d89ddec081556", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4e6635b0f9b018035e53b68b01466874162c36342d27bcb19e0bdc9b66f80c72"}]}