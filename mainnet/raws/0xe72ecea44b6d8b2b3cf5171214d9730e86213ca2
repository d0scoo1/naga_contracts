{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title ChainlinkConversionPath\r\n *\r\n * @notice ChainlinkConversionPath is a contract allowing to compute conversion rate from a Chainlink aggretators\r\n */\r\ninterface ChainlinkConversionPath {\r\n\r\n\r\n  /**\r\n  * @notice Computes the rate from a list of conversion\r\n  * @param _path List of addresses representing the currencies for the conversions\r\n  * @return rate the rate\r\n  * @return oldestRateTimestamp he oldest timestamp of the path\r\n  * @return decimals of the conversion rate\r\n  */\r\n  function getRate(\r\n    address[] calldata _path\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 rate, uint256 oldestRateTimestamp, uint256 decimals);\r\n}\r\n\r\ninterface IERC20FeeProxy {\r\n  event TransferWithReferenceAndFee(\r\n    address tokenAddress,\r\n    address to,\r\n    uint256 amount,\r\n    bytes indexed paymentReference,\r\n    uint256 feeAmount,\r\n    address feeAddress\r\n  );\r\n\r\n  function transferFromWithReferenceAndFee(\r\n    address _tokenAddress,\r\n    address _to,\r\n    uint256 _amount,\r\n    bytes calldata _paymentReference,\r\n    uint256 _feeAmount,\r\n    address _feeAddress\r\n    ) external;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20ConversionProxy\r\n */\r\ncontract ERC20ConversionProxy {\r\n  using SafeMath for uint256;\r\n\r\n  address public paymentProxy;\r\n  ChainlinkConversionPath public chainlinkConversionPath;\r\n\r\n  constructor(address _paymentProxyAddress, address _chainlinkConversionPathAddress) public {\r\n    paymentProxy = _paymentProxyAddress;\r\n    chainlinkConversionPath = ChainlinkConversionPath(_chainlinkConversionPathAddress);\r\n  }\r\n\r\n  // Event to declare a transfer with a reference\r\n  event TransferWithConversionAndReference(\r\n    uint256 amount,\r\n    address currency,\r\n    bytes indexed paymentReference,\r\n    uint256 feeAmount,\r\n    uint256 maxRateTimespan\r\n  );\r\n\r\n  /**\r\n   * @notice Performs an ERC20 token transfer with a reference computing the amount based on a fiat amount\r\n   * @param _to Transfer recipient\r\n   * @param _requestAmount request amount\r\n   * @param _path conversion path\r\n   * @param _paymentReference Reference of the payment related\r\n   * @param _feeAmount The amount of the payment fee\r\n   * @param _feeAddress The fee recipient\r\n   * @param _maxToSpend amount max that we can spend on the behalf of the user\r\n   * @param _maxRateTimespan max time span with the oldestrate, ignored if zero\r\n   */\r\n  function transferFromWithReferenceAndFee(\r\n    address _to,\r\n    uint256 _requestAmount,\r\n    address[] calldata _path,\r\n    bytes calldata _paymentReference,\r\n    uint256 _feeAmount,\r\n    address _feeAddress,\r\n    uint256 _maxToSpend,\r\n    uint256 _maxRateTimespan\r\n  ) external\r\n  {\r\n    (uint256 amountToPay, uint256 amountToPayInFees) = getConversions(_path, _requestAmount, _feeAmount, _maxRateTimespan);\r\n\r\n    require(amountToPay.add(amountToPayInFees) <= _maxToSpend, \"Amount to pay is over the user limit\");\r\n\r\n    // Pay the request and fees\r\n    (bool status, ) = paymentProxy.delegatecall(\r\n      abi.encodeWithSignature(\r\n        \"transferFromWithReferenceAndFee(address,address,uint256,bytes,uint256,address)\",\r\n        // payment currency\r\n        _path[_path.length - 1],\r\n        _to,\r\n        amountToPay,\r\n        _paymentReference,\r\n        amountToPayInFees,\r\n        _feeAddress\r\n      )\r\n    );\r\n    require(status, \"transferFromWithReferenceAndFee failed\");\r\n\r\n    // Event to declare a transfer with a reference\r\n    emit TransferWithConversionAndReference(\r\n      _requestAmount,\r\n      // request currency\r\n      _path[0],\r\n      _paymentReference,\r\n      _feeAmount,\r\n      _maxRateTimespan\r\n    );\r\n  }\r\n\r\n  function getConversions(\r\n    address[] memory _path,\r\n    uint256 _requestAmount,\r\n    uint256 _feeAmount,\r\n    uint256 _maxRateTimespan\r\n  ) internal\r\n    view\r\n    returns (uint256 amountToPay, uint256 amountToPayInFees)\r\n  {\r\n    (uint256 rate, uint256 oldestTimestampRate, uint256 decimals) = chainlinkConversionPath.getRate(_path);\r\n\r\n    // Check rate timespan\r\n    require(_maxRateTimespan == 0 || block.timestamp.sub(oldestTimestampRate) <= _maxRateTimespan, \"aggregator rate is outdated\");\r\n    \r\n    // Get the amount to pay in the crypto currency chosen\r\n    amountToPay = _requestAmount.mul(rate).div(decimals);\r\n    amountToPayInFees = _feeAmount.mul(rate).div(decimals);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkConversionPathAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRateTimespan\",\"type\":\"uint256\"}],\"name\":\"TransferWithConversionAndReference\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainlinkConversionPath\",\"outputs\":[{\"internalType\":\"contract ChainlinkConversionPath\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxToSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRateTimespan\",\"type\":\"uint256\"}],\"name\":\"transferFromWithReferenceAndFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20ConversionProxy", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200000", "ConstructorArguments": "000000000000000000000000370de27fdb7d1ff1e1baa7d11c5820a324cf623c000000000000000000000000c5519f3fcecc8ec85caaf8836563dee9a00080f9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5af51944cb4bfbdd89a537fa50514168d922ca9189defa604c3fd19bf0155405"}]}