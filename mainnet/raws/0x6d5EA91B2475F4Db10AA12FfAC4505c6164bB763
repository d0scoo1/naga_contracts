{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n\r\nWelcome to\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\r\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557   \u255a\u2588\u2588\u2588\u2554\u255d \r\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d   \u2588\u2588\u2554\u2588\u2588\u2557 \r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d \u2588\u2588\u2557\r\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\r\n                                                    \r\nPowerful and fastest Atomic Swap as a service provider\r\nPowered by xFox.io\r\n\r\n--------------\r\nGo to dApp : https://www.bridgex.app/\r\nDOcumentation : https://docs.bridgex.app/\r\n*/\r\n\r\npragma solidity ^0.8.4;\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    // function renounceOwnership() public virtual onlyOwner {\r\n    //     emit OwnershipTransferred(_owner, address(0));\r\n    //     _owner = address(0);\r\n    // }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n        token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract BridgeX is Ownable, Pausable, ReentrancyGuard {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    //Defining a Project\r\n    struct Project {\r\n        address tokenAddress;\r\n        uint balance;\r\n        bool active;\r\n        address owner;\r\n        uint max_amount;\r\n        uint swapCommissionPercent;\r\n        address swapCommissionReceiver;\r\n        uint minOracleFee;\r\n        bool ownerVerified;\r\n\r\n        mapping(uint => Chain) chains; //ChainID => chainData\r\n        mapping(bytes32 => Swap) swaps; //SwapID => swapData\r\n    }\r\n\r\n    struct Chain {\r\n        address tokenAddress;\r\n        bool active;\r\n        uint swapCount;\r\n        uint minOracleFee;\r\n    }\r\n\r\n    struct Swap {\r\n        uint swapCount;\r\n        uint chainID;\r\n        address from;\r\n        address to;\r\n        uint amount;\r\n        bool isCompleted;\r\n    }\r\n\r\n    mapping(bytes32 => Project) public projects; //UniquePRojectID => projectdata\r\n    uint public totalProjects = 0; //Total number of projects\r\n    uint public totalSwaps = 0; //Total number of swaps performed in this contract\r\n\r\n    //Oracle address \r\n    address payable public oracleAddress;\r\n\r\n    //SUDO Settings\r\n    uint public PROJECT_CREATION_COST;\r\n    address payable public SERVICE_PROVIDER_ADDRESS;\r\n\r\n    //Events\r\n    event SwapStart (\r\n        bytes32 indexed projectId,\r\n        bytes32 indexed swapId,\r\n        uint swapCount,\r\n        uint toChainID,\r\n        address indexed fromAddr, \r\n        address toAddr, \r\n        uint amount\r\n    );\r\n    \r\n    event SwapEnd (\r\n        bytes32 indexed projectId,\r\n        bytes32 indexed swapId,\r\n        uint swapCount,\r\n        uint fromChainID,\r\n        address indexed fromAddr, \r\n        address toAddr,\r\n        uint amount\r\n    );\r\n    \r\n    event SwapCompleted(\r\n        bytes32 indexed projectId,\r\n        bytes32 indexed swapId\r\n    );\r\n\r\n    event newProjectCreated(\r\n        bytes32 indexed projectId, \r\n        address indexed tokenAddress, \r\n        address indexed owner,\r\n        uint initialSupply\r\n    );\r\n\r\n    event newProjectChainCreated(\r\n        bytes32 indexed projectId, \r\n        uint chainId, \r\n        address tokenAddress\r\n    );\r\n\r\n    event commissionReceived(\r\n        bytes32 indexed projectId, \r\n        bytes32 indexed swapId,\r\n        uint amount\r\n    );\r\n\r\n    event projectStatusChanged(\r\n        bytes32 indexed projectId, \r\n        bool newStatus\r\n    );\r\n\r\n    //Modifiers\r\n    modifier onlyActiveChains(bytes32 projectId, uint chainID){\r\n        require(chainID != _getChainID(), \"BRIDGEX: Swap must be created to different chain ID\");\r\n        require(projects[projectId].chains[chainID].active == true, \"BRIDGEX: Only active chains\");\r\n        _;\r\n    }\r\n\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"contract not allowed\");\r\n        require(msg.sender == tx.origin, \"proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenOwner(bytes32 projectId) {\r\n        require(projects[projectId].owner == _msgSender(), \"ERROR: caller is not the Token Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier OnlyOracle() {\r\n        require(oracleAddress == _msgSender(), \"ERROR: caller is not the Oracle\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable _oracleAddress, address payable _serviceProvider, uint _projectCreationCost) {\r\n        oracleAddress = _oracleAddress;\r\n        SERVICE_PROVIDER_ADDRESS = _serviceProvider;\r\n        PROJECT_CREATION_COST = _projectCreationCost;\r\n    }\r\n\r\n    //Initite swap operation by users\r\n    function swapStart(bytes32 projectId, uint toChainID, address to, uint amount) public payable onlyActiveChains(projectId, toChainID) whenNotPaused notContract nonReentrant {\r\n        require(projects[projectId].active == true, \"BRIDGE: Bridge Pool is inactive\");\r\n        require(msg.value.mul(1 gwei) >= projects[projectId].minOracleFee.add(projects[projectId].chains[toChainID].minOracleFee), \"BRIDGE: Insufficient Oracle Fee\");\r\n        require(amount <= projects[projectId].max_amount, \"BRIDGEX: Amount must be within max range\");\r\n        require(to == msg.sender, \"BRIDGEX: Swaps allowed between same address only\");\r\n        require(IERC20(projects[projectId].tokenAddress).allowance(msg.sender, address(this)) >= amount, \"BRIDGEX: Not enough allowance\");\r\n        _depositToken(projectId, amount);\r\n\r\n        //Prepare commission to token owners\r\n        uint commission;\r\n        if(projects[projectId].swapCommissionPercent > 0 && msg.sender != projects[projectId].swapCommissionReceiver){\r\n            commission = calculateCommission(projectId, amount);\r\n            amount = amount.sub(commission);\r\n            _withdrawCommission(projectId, commission);\r\n            emit commissionReceived(projectId, projectId, commission);\r\n        }\r\n\r\n        //Increment swap count in chain\r\n        projects[projectId].chains[toChainID].swapCount = projects[projectId].chains[toChainID].swapCount.add(1);\r\n        uint _swapCount = projects[projectId].chains[toChainID].swapCount;\r\n        uint _chainID = _getChainID();\r\n        Swap memory swap = Swap({\r\n            swapCount: _swapCount,\r\n            chainID: _chainID,\r\n            from: msg.sender,\r\n            to: to,\r\n            amount: amount,\r\n            isCompleted: false\r\n        });\r\n\r\n        bytes32 swapId = keccak256(abi.encode(projectId, _swapCount, _chainID, toChainID, msg.sender, to, amount));\r\n        require(projects[projectId].swaps[swapId].swapCount == 0, \"BRIDGEX: It's available just 1 swap with same: projectId, chainID, swapCount, from, to, amount\");\r\n        projects[projectId].swaps[swapId] = swap;\r\n\r\n        //Send oracle fees to oracle address\r\n        if(msg.value > 0) {\r\n            if (!oracleAddress.send(msg.value)) {\r\n                oracleAddress.transfer(msg.value);\r\n            }\r\n        }\r\n\r\n        emit SwapStart(projectId, swapId, _swapCount, toChainID, msg.sender, to, amount);\r\n    }\r\n\r\n    //Intermediate swap operation by oracle\r\n    function swapEnd(bytes32 projectId, bytes32 swapId, uint swapCount, uint fromChainID, address from, address to, uint amount) public OnlyOracle onlyActiveChains(projectId, fromChainID) whenNotPaused {\r\n        require(amount > 0 && to != address(0), \"BRIDGEX: Primary Swap condition fail!\");\r\n        require(amount <= projects[projectId].balance, \"BRIDGEX: Not enough token balance in bridge contract\");\r\n        uint _chainID = _getChainID();\r\n\r\n        bytes32 processedSwapId = keccak256(abi.encode(projectId, swapCount, fromChainID, _chainID, from, to, amount));\r\n        require(processedSwapId == swapId, \"BRIDGEX: Swap ID Arguments do not match\");\r\n        require(projects[projectId].swaps[processedSwapId].isCompleted == false, \"BRIDGEX: Swap already completed!\");\r\n        \r\n        Swap memory swap = Swap({\r\n            swapCount: swapCount,\r\n            chainID: fromChainID,\r\n            from: from,\r\n            to: to,\r\n            amount: amount,\r\n            isCompleted: true\r\n        });\r\n        projects[projectId].swaps[processedSwapId] = swap;\r\n        totalSwaps = totalSwaps.add(1);\r\n\r\n        _transferToken(projectId, to, amount);\r\n        emit SwapEnd(projectId, processedSwapId, swapCount, fromChainID, from, to, amount);\r\n    }\r\n\r\n    function setSwapComplete(bytes32 projectId, bytes32 swapId) external OnlyOracle{\r\n        require(projects[projectId].swaps[swapId].isCompleted == false, \"BRIDGEX: Swap already completed!\");\r\n        require(projects[projectId].swaps[swapId].swapCount != 0, \"BRIDGEX: Event ID not found\");\r\n        require(projects[projectId].swaps[swapId].chainID == _getChainID(), \"BRIDGEX: Swap from another chain should be completed from swapEnd()\");\r\n        projects[projectId].swaps[swapId].isCompleted = true;\r\n        totalSwaps = totalSwaps.add(1);\r\n        emit SwapCompleted(projectId, swapId);\r\n    }\r\n\r\n    //Token owner functions\r\n    function configureAddSupply(bytes32 projectId, uint _supplyTokens) external onlyTokenOwner(projectId) {\r\n        //Deposit tokens to the bridge pool\r\n        require(IERC20(projects[projectId].tokenAddress).allowance(msg.sender, address(this)) >= _supplyTokens, \"BRIDGEX: Not enough allowance\");\r\n        IERC20(projects[projectId].tokenAddress).safeTransferFrom(msg.sender, address(this), _supplyTokens);\r\n        projects[projectId].balance = projects[projectId].balance.add(_supplyTokens);\r\n    }\r\n\r\n    function configureRemoveSupply(bytes32 projectId, uint _pullOutTokens) external onlyTokenOwner(projectId) {\r\n        require(projects[projectId].active == false, \"BRIDGEX: Project status must be inactive.\");\r\n        require(_pullOutTokens <= projects[projectId].balance,  \"BRIDGEX: Project not enough balance.\");\r\n        _transferToken(projectId, msg.sender, _pullOutTokens);\r\n    }\r\n    \r\n    function configureProjectSettings(bytes32 projectId, uint _maxAmount, bool _enableCommission, uint _swapCommissionPercent, address _swapCommissionReceiver) external onlyTokenOwner(projectId) {\r\n        require(_swapCommissionReceiver != address(0), \"BRIDGEX: Receiver address cannot be null\");\r\n        require(_swapCommissionPercent < 10000, \"BRIDGEX: Commission must be less than 10000\");        \r\n        require(projects[projectId].owner != address(0), \"BRIDGEX: Project Not Found!\");\r\n\r\n        projects[projectId].max_amount = _maxAmount;\r\n        if(_enableCommission) {\r\n            projects[projectId].swapCommissionPercent = _swapCommissionPercent;\r\n            projects[projectId].swapCommissionReceiver = _swapCommissionReceiver;\r\n        } else {\r\n            projects[projectId].swapCommissionPercent = 0;\r\n            projects[projectId].swapCommissionReceiver = address(0);\r\n        }\r\n    }\r\n\r\n    function configureProjectStatus(bytes32 projectId, bool _status) external onlyTokenOwner(projectId) {\r\n        require(projects[projectId].owner != address(0), \"BRIDGEX: Project Not Found!\");\r\n        projects[projectId].active = _status;\r\n        emit projectStatusChanged(projectId, _status);\r\n    }\r\n\r\n    function configureTransferProjectOwner(bytes32 projectId, address _newOwner) external onlyTokenOwner(projectId) {\r\n        require(projects[projectId].owner != address(0), \"BRIDGEX: Project Not Found!\");\r\n        projects[projectId].owner = _newOwner;\r\n    }\r\n\r\n    //Super Admin Functions\r\n    function sudoSetMultipleProjectsOracleFee(bytes32[] memory projectIds, uint[] memory chainIds, uint[] memory bridge_minOracleFee, uint[] memory chain_minOracleFee) external onlyOwner {\r\n        for(uint i = 0; i < projectIds.length; i++) {\r\n            if(projects[projectIds[i]].owner != address(0)) {\r\n                projects[projectIds[i]].minOracleFee = bridge_minOracleFee[i];\r\n            } else {\r\n                continue;\r\n            }\r\n\r\n            //Set chain ID oracle fees for this project\r\n            for(uint j = 0; j < chainIds.length; j++) {\r\n                if(projects[projectIds[i]].chains[chainIds[j]].tokenAddress != address(0)) {\r\n                    projects[projectIds[i]].chains[chainIds[j]].minOracleFee = chain_minOracleFee[j];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sudoSetMultipleProjectsStatus(bytes32[] memory projectIds, bool[] memory _status) external onlyOwner {\r\n        for(uint i = 0; i < projectIds.length; i++) {\r\n            if(projects[projectIds[i]].owner != address(0)) {\r\n                projects[projectIds[i]].active = _status[i];\r\n                emit projectStatusChanged(projectIds[i], _status[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function sudoConfigureTokenOwner(bytes32 projectId, address _owner) external onlyOwner {\r\n        projects[projectId].owner = _owner;\r\n    }\r\n\r\n    function sudoConfigureChain(bytes32 projectId, uint chainID, address token_address, bool status, uint minOracleFee) external onlyOwner {\r\n        require(chainID != _getChainID(), \"BRIDGEX: Can`t change chain to current Chain ID\");\r\n        require(projects[projectId].chains[chainID].tokenAddress != address(0), \"BRIDGEX: Chain is not registered\");\r\n        projects[projectId].chains[chainID].tokenAddress = token_address;\r\n        projects[projectId].chains[chainID].active = status;\r\n        projects[projectId].chains[chainID].minOracleFee = minOracleFee;\r\n    }\r\n\r\n    function sudoVerifyProjectWithOwner(bytes32 projectId) external onlyOwner {\r\n        projects[projectId].ownerVerified = true;\r\n    }\r\n\r\n    function sudoAdjustProjectBalance(bytes32 projectId, uint _correctedAmount) external onlyOwner {\r\n        projects[projectId].balance = _correctedAmount;\r\n    }\r\n\r\n    function sudoDeleteProject(bytes32 projectId) external onlyOwner {\r\n        delete projects[projectId]; \r\n        totalProjects--;\r\n    }\r\n\r\n    function sudoChangeProviderAddress(address payable _newAddress) external onlyOwner {\r\n        SERVICE_PROVIDER_ADDRESS = _newAddress;\r\n    }\r\n\r\n    function changeCreationCost(uint _newCost) public OnlyOracle {\r\n        PROJECT_CREATION_COST = _newCost;\r\n    }\r\n\r\n    //Creation Functions\r\n    function createNewProject(bytes32 projectId, bool firstTimeChain, address[] calldata addressArray, uint[] calldata uintArray, uint _addSupply) external payable returns(bytes32) {\r\n        \r\n        require(msg.sender == owner() || msg.value.mul(1 gwei) >= PROJECT_CREATION_COST, \"BRIDGEX: Insufficient amount sent to create project.\");\r\n        \r\n        bytes32 newProjectId;\r\n        if(firstTimeChain) {\r\n            newProjectId = keccak256(abi.encode(addressArray[0], addressArray[1]));\r\n        } else {\r\n            newProjectId = projectId;\r\n        }\r\n\r\n        require(projects[newProjectId].tokenAddress == address(0), \"BRIDGEX: Project already created!\");\r\n        \r\n        Project storage project = projects[newProjectId];\r\n        project.tokenAddress = addressArray[0];\r\n        project.active = true;\r\n        project.owner = addressArray[1];\r\n        project.max_amount = uintArray[0];\r\n        project.swapCommissionPercent = uintArray[1];\r\n        project.swapCommissionReceiver = addressArray[2];\r\n        project.minOracleFee = uintArray[2];\r\n\r\n        totalProjects++;\r\n\r\n        //Send creation cost to relay wallet\r\n        if(msg.value > 0) {\r\n            if (!SERVICE_PROVIDER_ADDRESS.send(msg.value)) {\r\n                SERVICE_PROVIDER_ADDRESS.transfer(msg.value);\r\n            }\r\n        }\r\n        \r\n        //Deposit tokens to the bridge pool\r\n        require(IERC20(projects[newProjectId].tokenAddress).allowance(msg.sender, address(this)) >= _addSupply, \"BRIDGEX: Not enough allowance\");\r\n        \r\n        IERC20(projects[newProjectId].tokenAddress).safeTransferFrom(msg.sender, address(this), _addSupply);\r\n        projects[newProjectId].balance = projects[newProjectId].balance.add(_addSupply);\r\n\r\n        //Emit event new project created\r\n        emit newProjectCreated(newProjectId, addressArray[0], addressArray[1], _addSupply);\r\n\r\n        return newProjectId;\r\n    }\r\n\r\n    //Token Owner Add New Chain\r\n    function addNewChainToProject(bytes32 projectId, uint _chainID, address _tokenAddress, uint _minOracleFee) public onlyTokenOwner(projectId) returns(bool){\r\n        require(_chainID != _getChainID(), \"ORACLE: Can`t add current chain ID\");\r\n        require(projects[projectId].chains[_chainID].tokenAddress == address(0), \"ORACLE: ChainID has already been registered\");\r\n\r\n        Chain memory chain = Chain({\r\n            tokenAddress: _tokenAddress,\r\n            active: true,\r\n            swapCount: 0,\r\n            minOracleFee: _minOracleFee\r\n        });\r\n        projects[projectId].chains[_chainID] = chain;\r\n\r\n        emit newProjectChainCreated(projectId, _chainID, _tokenAddress);\r\n        return true;\r\n    }\r\n\r\n    //Helper Functions\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _pause();\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() external onlyOwner whenPaused {\r\n        _unpause();\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    function _transferToken(bytes32 projectId, address to, uint amount) private {\r\n        IERC20(projects[projectId].tokenAddress).safeTransfer(to, amount);\r\n        projects[projectId].balance = projects[projectId].balance.sub(amount);\r\n    }\r\n\r\n    function _depositToken(bytes32 projectId, uint amount) private {\r\n        IERC20(projects[projectId].tokenAddress).safeTransferFrom(msg.sender, address(this), amount);\r\n        projects[projectId].balance = projects[projectId].balance.add(amount);\r\n    }\r\n\r\n    //Calculates Commission to be sent to token owner\r\n    function calculateCommission(bytes32 projectId, uint amount) public view returns(uint fee){\r\n        fee = projects[projectId].swapCommissionReceiver != address(0) ? amount.mul(projects[projectId].swapCommissionPercent).div(10000) : 0;\r\n    }\r\n\r\n    //Internal function to send commission\r\n    function _withdrawCommission(bytes32 projectId, uint commission) internal{\r\n        if(commission > 0 && projects[projectId].swapCommissionReceiver != address(0)){\r\n            _transferToken(projectId, projects[projectId].swapCommissionReceiver, commission);\r\n        }\r\n    }\r\n\r\n    function _getChainID() internal view returns (uint) {\r\n        uint id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function _isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    //DAPP helper functions\r\n    //Get token balance of a project\r\n    function seeProjectTokenBalance(bytes32 projectId) public view returns(uint balanceOf){\r\n        return projects[projectId].balance;\r\n    }\r\n\r\n    //Get Token balance by contract address\r\n    function seeAnyTokenBalance(address tokenAddress) public view returns(uint balanceOf){\r\n        return IERC20(tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    //Get swapData by Swapid\r\n    function seeSwapData(bytes32 projectId, bytes32 swapId) public view returns(uint counter, uint chainID, address from, uint amount, bool isCompleted){\r\n        return (\r\n            projects[projectId].swaps[swapId].swapCount,\r\n            projects[projectId].swaps[swapId].chainID,\r\n            projects[projectId].swaps[swapId].from,\r\n            projects[projectId].swaps[swapId].amount,\r\n            projects[projectId].swaps[swapId].isCompleted\r\n        );\r\n    }\r\n\r\n    //Get chainData by chainId\r\n    function seeChainData(bytes32 projectId, uint chainId) public view returns(address tokenAddress, bool active, uint swapCount, uint minOracleFee){\r\n        return (\r\n            projects[projectId].chains[chainId].tokenAddress,\r\n            projects[projectId].chains[chainId].active,\r\n            projects[projectId].chains[chainId].swapCount,\r\n            projects[projectId].chains[chainId].minOracleFee\r\n        );\r\n    }\r\n\r\n    //Emergency Functions\r\n    //Emergency Withdraw Tokens sent to contract\r\n    function emergencyWithdrawTokens(address _tokenAddress, address _toAddress, uint256 _amount) external onlyOwner {\r\n        IERC20(_tokenAddress).safeTransfer(_toAddress, _amount);\r\n    }\r\n\r\n    //Emergency withdraw Primary Coin sent to contract\r\n    function emergencyWithdrawAsset(address payable toAddress) external onlyOwner {\r\n        if(!toAddress.send(address(this).balance)) {\r\n            return toAddress.transfer(address(this).balance);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_serviceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectCreationCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"SwapCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"commissionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"newProjectChainCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"newProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"projectStatusChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROJECT_CREATION_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERVICE_PROVIDER_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOracleFee\",\"type\":\"uint256\"}],\"name\":\"addNewChainToProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"changeCreationCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_supplyTokens\",\"type\":\"uint256\"}],\"name\":\"configureAddSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enableCommission\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapCommissionPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapCommissionReceiver\",\"type\":\"address\"}],\"name\":\"configureProjectSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"configureProjectStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_pullOutTokens\",\"type\":\"uint256\"}],\"name\":\"configureRemoveSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"configureTransferProjectOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"firstTimeChain\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"addressArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"uintArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_addSupply\",\"type\":\"uint256\"}],\"name\":\"createNewProject\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"max_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapCommissionPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapCommissionReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOracleFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ownerVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"seeAnyTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"seeChainData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"swapCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOracleFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"seeProjectTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"seeSwapData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"setSwapComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_correctedAmount\",\"type\":\"uint256\"}],\"name\":\"sudoAdjustProjectBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"sudoChangeProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minOracleFee\",\"type\":\"uint256\"}],\"name\":\"sudoConfigureChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"sudoConfigureTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"sudoDeleteProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"projectIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bridge_minOracleFee\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chain_minOracleFee\",\"type\":\"uint256[]\"}],\"name\":\"sudoSetMultipleProjectsOracleFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"projectIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"}],\"name\":\"sudoSetMultipleProjectsStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"sudoVerifyProjectWithOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"swapCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapStart\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProjects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BridgeX", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005b38ea778160b9d187cc9a08887e674ab99f27d9000000000000000000000000c7b0becb6e49cb9ec61c27d7fe784d9d7235cb8a00000000000000000000000000000000000000000000000000000000000186a0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f235058d7d085f556d8d1aa7df9777f5737b167d809b2dff888caf9fd1842bfd"}]}