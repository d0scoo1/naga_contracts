{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.7.5;\r\n\r\ncontract AMBFlashbotHelper {\r\n  address public constant bridge = 0x4C36d2919e407f0Cc2Ee3c993ccF8ac26d9CE64e;\r\n\r\n  /**\r\n   * @dev Flashbot wrapper for calling AMB executeSignatures method.\r\n     * Recommended use case:\r\n     * set tx.maxPriorityFeePerGas to 0\r\n     * set tx.maxFeePerGas to pending block baseFee\r\n     * set tx.value to some flat fee (e.g. 0.01 eth) paid directly to the block miner to incentivise inclusion of success-only transactions\r\n     */\r\n  function execute(bytes calldata _data) external payable {\r\n    // approximate transaction gas_limit\r\n    uint256 gas = 30000 + gasleft(); // maybe we can subtract approximated gas refunds here as well (~60k gas)\r\n    // tx.origin balance after subtraction of msg.value and gasLimit * tx.gasprice\r\n    uint256 oldBalance = tx.origin.balance;\r\n    // execute AMB message, fails if message was already executed\r\n    // we expect that underlying message execution flow will contain some tx.origin.tranfer(fee)\r\n    (bool status, ) = address(bridge).call(_data);\r\n    require(status);\r\n    // fee received via underlying tx.origin.tranfer(fee)\r\n    uint256 receivedFee = tx.origin.balance - oldBalance;\r\n    // pay block miner tip\r\n    block.coinbase.transfer(msg.value);\r\n    // approximate gas used for overall transaction\r\n    uint256 gasUsed = gas - gasleft();\r\n    // we revert the whole transaction in case paid tx.origin fee is not enough to cover tx expenses\r\n    // note that block.coinbase tip will not be paid in case of the transaction revert, so miners are not incentivised to include such transactions\r\n    require(receivedFee >= msg.value + gasUsed * tx.gasprice);\r\n  }\r\n\r\n  function estimateProfit(uint256 gasPrice, bytes calldata _data) external payable returns (uint256) {\r\n    // approximate transaction gas_limit\r\n    uint256 gas = 30000 + gasleft(); // maybe we can subtract approximated gas refunds here as well (~60k gas)\r\n    // tx.origin balance after subtraction of msg.value and gasLimit * tx.gasprice\r\n    uint256 oldBalance = tx.origin.balance;\r\n    // execute AMB message, fails if message was already executed\r\n    // we expect that underlying message execution flow will contain some tx.origin.tranfer(fee)\r\n    (bool status, ) = address(bridge).call(_data);\r\n    require(status);\r\n    // fee received via underlying tx.origin.tranfer(fee)\r\n    uint256 receivedFee = tx.origin.balance - oldBalance;\r\n    // pay block miner tip\r\n    block.coinbase.transfer(msg.value);\r\n    // approximate gas used for overall transaction\r\n    uint256 gasUsed = gas - gasleft();\r\n    // we revert the whole transaction in case paid tx.origin fee is not enough to cover tx expenses\r\n    // note that block.coinbase tip will not be paid in case of the transaction revert, so miners are not incentivised to include such transactions\r\n    require(receivedFee >= msg.value + gasUsed * gasPrice);\r\n    return receivedFee - (msg.value + gasUsed * gasPrice);\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"estimateProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "AMBFlashbotHelper", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://79077a099fd1606800c4dd72ed86bc0ffd622c2c85759f8e8f2b64b442ebb0f9"}]}