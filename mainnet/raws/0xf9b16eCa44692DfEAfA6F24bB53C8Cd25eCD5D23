{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n* Kuma Space Shop - Where the end if just the beginning.\r\n* 12% buy taxes / 15% sell taxes\r\n* Website: https://kumaspaceshop.com\r\n* Telegram: https://t.me/KumaSpaceShop\r\n* Twitter: https://twitter.com/ERC20ssKuma\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ssKuma is Ownable, IERC20 {\r\n    bool private _swapping;\r\n    uint256 public _launched;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply = 222222222222 * 10**9;\r\n    uint256 public _txLimit = _totalSupply / 200;\r\n    string private _name = \"ssKuma\";\r\n    string private _symbol = \"ssKuma\";\r\n    uint8 private _decimals = 9;\r\n    uint8 private _buyTax = 12;\r\n    uint8 private _sellTax = 15;\r\n    mapping (address => bool) private _blacklist;\r\n    mapping (address => bool) private _excludedAddress;\r\n    mapping (address => uint) private _cooldown;\r\n    mapping (address => bool) private _cooldownWallet;\r\n    bool public _cooldownEnabled = false;\r\n    address private _uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private _uniswapV2Pair;\r\n    address private _dev;\r\n    IUniswapV2Router02 private UniV2Router;\r\n\r\n    constructor(address dev) {\r\n        _dev = dev;\r\n        _balances[owner()] = _totalSupply;\r\n        _excludedAddress[owner()] = true;\r\n        _excludedAddress[_dev] = true;\r\n        _excludedAddress[address(this)] = true;\r\n        UniV2Router = IUniswapV2Router02(_uniRouter);\r\n    }\r\n\r\n    modifier devOrOwner() {\r\n        require(owner() == _msgSender() || _dev == _msgSender(), \"Caller is not the owner or dev\");\r\n        _;\r\n    }\r\n\r\n    modifier lockSwap {\r\n        _swapping = true;\r\n        _;\r\n        _swapping = false;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function isBuy(address sender) private view returns (bool) {\r\n        return sender == _uniswapV2Pair;\r\n    }\r\n\r\n    function trader(address sender, address recipient) private view returns (bool) {\r\n        return !(_excludedAddress[sender] ||  _excludedAddress[recipient]);\r\n    }\r\n\r\n    function txRestricted(address sender, address recipient) private view returns (bool) {\r\n        return sender == _uniswapV2Pair && recipient != address(_uniRouter) && !_excludedAddress[recipient];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require (_allowances[sender][_msgSender()] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_balances[sender] >= amount, \"ERC20: transfer exceeds balance\");\r\n        require(amount > 0, \"ERC20: cannot transfer zero\");\r\n        require(!_cooldownWallet[sender] && !_cooldownWallet[recipient] && !_cooldownWallet[tx.origin]);\r\n\r\n        uint256 taxedAmount = amount;\r\n        uint256 tax = 0;\r\n\r\n        if (trader(sender, recipient)) {\r\n             require (_launched != 0);\r\n            if (txRestricted(sender, recipient)){\r\n                require(amount <= _txLimit);\r\n                 if (_cooldownEnabled) {\r\n                    require(_cooldown[recipient] < block.timestamp);\r\n                    _cooldown[recipient] = block.timestamp + 30 seconds;\r\n                }\r\n            }\r\n            tax = amount * _buyTax / 100;\r\n            taxedAmount = amount - tax;\r\n            if (!isBuy(sender)){\r\n                tax = amount * _sellTax / 100;\r\n                taxedAmount = amount - tax;\r\n                if (_balances[address(this)] > 100 * 10**9 && !_swapping) {\r\n                    uint256 _swapAmount = _balances[address(this)];\r\n                    if (_swapAmount > amount * 40 / 100) _swapAmount = amount * 40 / 100;\r\n                    _tokensToETH(_swapAmount);\r\n                }\r\n            }\r\n        }\r\n\r\n        _balances[address(this)] += tax;\r\n        _balances[recipient] += taxedAmount;\r\n        _balances[sender] -= amount;\r\n        \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function launch() external onlyOwner {\r\n        require (_launched <= block.number);\r\n        _cooldownEnabled = true;\r\n        _launched = block.number;\r\n    }\r\n\r\n    function reduceBuyTax(uint8 newTax) external onlyOwner {\r\n        require (newTax < _buyTax);\r\n        _buyTax = newTax;\r\n    }\r\n\r\n    function setPair(address pairAddress) external onlyOwner {\r\n        _uniswapV2Pair = pairAddress;\r\n    }\r\n\r\n    function setCooldownEnabled(bool cooldownEnabled) external onlyOwner {\r\n        _cooldownEnabled = cooldownEnabled;\r\n    }\r\n\r\n    function setCooldown(address[] memory wallet) external onlyOwner {\r\n        for (uint i = 0; i < wallet.length; i++) {\r\n            _cooldownWallet[wallet[i]] = true;\r\n        }\r\n    }\r\n\r\n    function stopCooldown(address wallet) external onlyOwner {\r\n        _cooldownWallet[wallet] = false;\r\n    }\r\n\r\n    function checkCooldown(address wallet) public view returns (bool) {\r\n        return _cooldownWallet[wallet];\r\n    }\r\n\r\n    function reduceSellTax(uint8 newTax) external onlyOwner {\r\n        require (newTax < _sellTax);\r\n        _sellTax = newTax;\r\n    }\r\n\r\n    function _transferETH(uint256 amount, address payable _to) private {\r\n        (bool sent, ) = payable(_to).call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    function _tokensToETH(uint256 amount) private lockSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = UniV2Router.WETH();\r\n        _approve(address(this), _uniRouter, amount);\r\n        UniV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount, 0, path, address(this), block.timestamp);\r\n        if (address(this).balance > 0) \r\n        {\r\n            _transferETH(address(this).balance, payable(_dev));\r\n        }\r\n    }\r\n\r\n    function rmBlacklist(address wallet) external onlyOwner {\r\n        _blacklist[wallet] = false;\r\n    }\r\n\r\n    function checkIfBlacklist(address wallet) public view returns (bool) {\r\n        return _blacklist[wallet];\r\n    }\r\n\r\n    function _setTxLimit(uint256 txLimit) external devOrOwner {\r\n        require(txLimit >= _txLimit);\r\n        _txLimit = txLimit;\r\n    }\r\n\r\n    function changeDev(address dev) external devOrOwner {\r\n        _dev = dev;\r\n    }\r\n\r\n    function failsafeTokenSwap() external devOrOwner {\r\n        _tokensToETH(_balances[address(this)]);\r\n    }\r\n\r\n    function failsafeETHtransfer() external devOrOwner {\r\n        (bool sent, ) = payable(_msgSender()).call{value: address(this).balance}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_launched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txLimit\",\"type\":\"uint256\"}],\"name\":\"_setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"checkCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"checkIfBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failsafeETHtransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failsafeTokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newTax\",\"type\":\"uint8\"}],\"name\":\"reduceBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newTax\",\"type\":\"uint8\"}],\"name\":\"reduceSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"rmBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallet\",\"type\":\"address[]\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"cooldownEnabled\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"stopCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ssKuma", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006c37605c3e888e8f52587da98ff527288cf1fdee", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bbe722f86472ae628c1559b9f3494e8fbd7d34fef5f0f4cffc55264f4c4bcd3a"}]}