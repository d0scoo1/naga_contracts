{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Colors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nlibrary Colors {\\r\\n  using Strings for uint256;\\r\\n\\r\\n  struct Color {\\r\\n    uint256 hue;\\r\\n    uint256 saturation;\\r\\n    uint256 lightness;\\r\\n  }\\r\\n\\r\\n  function fromSeedWithMinMax(string memory seed, uint256 hMin, uint256 hMax, uint256 sMin, uint256 sMax, uint256 lMin, uint256 lMax) public pure returns (Color memory) {\\r\\n    return\\r\\n      Color(\\r\\n        valueFromSeed(string(abi.encodePacked(\\\"H\\\", seed)), hMin, hMax),\\r\\n        valueFromSeed(string(abi.encodePacked(\\\"S\\\", seed)), sMin, sMax),\\r\\n        valueFromSeed(string(abi.encodePacked(\\\"L\\\", seed)), lMin, lMax)\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function toHSLString(Color memory color) public pure returns (string memory) {\\r\\n    return\\r\\n      string(\\r\\n        abi.encodePacked(\\r\\n          \\\"hsl(\\\",\\r\\n          color.hue.toString(),\\r\\n          \\\",\\\",\\r\\n          color.saturation.toString(),\\r\\n          \\\"%,\\\",\\r\\n          color.lightness.toString(),\\r\\n          \\\"%)\\\"\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function valueFromSeed(string memory seed, uint256 from, uint256 to) public pure returns (uint256) {\\r\\n    if (to <= from) return from;\\r\\n    return (uint256(keccak256(abi.encodePacked(seed))) % (to - from)) + from;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lMax\",\"type\":\"uint256\"}],\"name\":\"fromSeedWithMinMax\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saturation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lightness\",\"type\":\"uint256\"}],\"internalType\":\"struct Colors.Color\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saturation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lightness\",\"type\":\"uint256\"}],\"internalType\":\"struct Colors.Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"name\":\"toHSLString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"valueFromSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Colors", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}