{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *     WRAPPED BEAR               BEARBUCKS.FINANCE                T.ME/BEARBUCKS\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * SAFEMATH LIBRARY\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function claimDividend(\r\n        address rewardAddress\r\n    ) external;\r\n}\r\n\r\ncontract wBEAR is IERC20, Auth, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MASK = type(uint128).max;\r\n    address BASE = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    address DEAD_NON_CHECKSUM = 0x000000000000000000000000000000000000dEaD;\r\n    address BURN = 0x000000000000000000000000000000000000dEaD;\r\n    address BEAR = 0xFd1Ce765af87Ac647059323f29a560E386A65492;\r\n    address TRACKER = 0xb80e2D2bfA134dA5bDDC69667Ff057dB4be293A5;\r\n    address TREASURY = 0xdbc85dF60C8E6cF056FF418EdCA44Be368da85D5;\r\n    address REWARD = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    IERC20 bear = IERC20(BEAR);\r\n    IDividendDistributor tracker = IDividendDistributor(tracker);\r\n\r\n    string constant _name = \"Wrapped Bear Bucks\";\r\n    string constant _symbol = \"wBEAR\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint256 constant public maxSupply = 1000000000 * (10 ** _decimals);\r\n    uint256 _totalSupply = 0;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    bool public tradingEnabled = true;\r\n\r\n    bool public canEmergencySweep = true;\r\n    bool public hasEmergencySweeped = false;\r\n    bool public paused = false;\r\n\r\n    uint8 public mode = 0;\r\n\r\n    constructor () Auth(msg.sender) {\r\n        approve(BEAR, maxSupply);\r\n        _balances[msg.sender] = 0;\r\n        emit Transfer(address(0), msg.sender, 0);\r\n    }\r\n\r\n    function isTreasury(address account) public view returns (bool) {\r\n        return account == TREASURY;\r\n    }\r\n\r\n    modifier onlyTreasury() {\r\n        require(isTreasury(msg.sender), \"!TREASURY\"); _;\r\n    }\r\n\r\n    modifier onlyOwnerOrTreasury() {\r\n        require(isOwner(msg.sender) || isTreasury(msg.sender), \"!OWNER && !TREASURY\"); _;\r\n    }\r\n\r\n    function mint(\r\n        uint256 _amount\r\n    ) external nonReentrant {\r\n        require(!hasEmergencySweeped, \"This contract is no longer in use\");\r\n        require(!paused, \"This contract is paused\");\r\n        require(bear.allowance(msg.sender, address(this)) >= _amount, \"wBEAR allowance is too low\");\r\n        require(maxSupply >= _amount, \"The amount exceeds the supply\");\r\n        bool _transfer = bear.transferFrom(msg.sender, address(this), _amount);\r\n        require(_transfer, \"Failed to receive tokens\");\r\n        _totalSupply += _amount;\r\n        _balances[msg.sender] += _amount;\r\n        emit Transfer(address(this), msg.sender, _amount);\r\n        if (mode != 0) {\r\n            _autoClaim();\r\n        }\r\n    }\r\n\r\n    function redeem(\r\n        uint256 _amount\r\n    ) external nonReentrant {\r\n        require(!hasEmergencySweeped, \"This contract is no longer in use\");\r\n        require(!paused, \"This contract is paused\");\r\n        require(_balances[msg.sender] >= _amount, \"Your wBEAR balance is too low\");\r\n        require(_totalSupply >= _amount, \"The contract BEAR balance is too low\");\r\n        bool _transfer = bear.transfer(msg.sender, _amount);\r\n        require(_transfer, \"Failed to send tokens\");\r\n        _balances[msg.sender] -= _amount;\r\n        _totalSupply -= _amount;\r\n        emit Transfer(msg.sender, address(this), _amount);\r\n        if (mode != 0) {\r\n            _autoClaim();\r\n        }\r\n    }\r\n\r\n    function burn(\r\n        uint256 _amount\r\n    ) external nonReentrant {\r\n        require(!hasEmergencySweeped, \"This contract is no longer in use\");\r\n        require(!paused, \"This contract is paused\");\r\n        require(_balances[msg.sender] >= _amount, \"Your wBEAR balance is too low\");\r\n        require(_totalSupply >= _amount, \"The contract BEAR balance is too low\");\r\n        bool _transfer = bear.transferFrom(address(this), BURN, _amount);\r\n        require(_transfer, \"Failed to send tokens\");\r\n        _balances[msg.sender] -= _amount;\r\n        _totalSupply -= _amount;\r\n        emit Transfer(msg.sender, address(this), _amount);\r\n        if (mode != 0) {\r\n            _autoClaim();\r\n        }\r\n    }\r\n\r\n    function _autoClaim() private {\r\n        if (mode == 1) {\r\n            _claimDividend(REWARD);\r\n        } else if (mode == 2) {\r\n            _claimAndSendDividend(REWARD);\r\n        }\r\n    }\r\n\r\n    function _claimDividend(\r\n        address _rewardAddress\r\n    ) private {\r\n        tracker.claimDividend(_rewardAddress);\r\n    }\r\n\r\n    function _claimAndSendDividend(\r\n        address _rewardAddress\r\n    ) private {\r\n        tracker.claimDividend(_rewardAddress);\r\n        IERC20(_rewardAddress).transferFrom(address(this), TREASURY, IERC20(_rewardAddress).balanceOf(address(this)));\r\n    }\r\n\r\n    function claimDividend(\r\n        address _rewardAddress\r\n    ) external onlyTreasury {\r\n        tracker.claimDividend(_rewardAddress);\r\n    }\r\n\r\n    function claimAndSendDividend(\r\n        address _rewardAddress\r\n    ) external onlyTreasury {\r\n        tracker.claimDividend(_rewardAddress);\r\n        IERC20(_rewardAddress).transferFrom(address(this), TREASURY, IERC20(_rewardAddress).balanceOf(address(this)));\r\n    }\r\n\r\n    function disableEmergencySweeping() external onlyOwner {\r\n        require(!hasEmergencySweeped, \"This contract is no longer in use\");\r\n        canEmergencySweep = false;\r\n    }\r\n\r\n    function emergencySweepCustom(\r\n        address _to,\r\n        uint256 _amount,\r\n        bool _disable\r\n    ) external onlyOwner {\r\n        require(!hasEmergencySweeped, \"This contract is no longer in use\");\r\n        require(canEmergencySweep, \"Emergency sweeping has been disabled\");\r\n        bear.transfer(_to, _amount);\r\n        if (_disable) {\r\n            hasEmergencySweeped = true;\r\n        }\r\n    }\r\n\r\n    function emergencySweepFull(\r\n        address _to\r\n    ) external onlyOwner {\r\n        require(!hasEmergencySweeped, \"This contract is no longer in use\");\r\n        require(canEmergencySweep, \"Emergency sweeping has been disabled\");\r\n        bear.transfer(_to, bear.balanceOf(address(this)));\r\n        hasEmergencySweeped = true;\r\n    }\r\n\r\n    function togglePaused(\r\n        bool _paused\r\n    ) external onlyOwner {\r\n        paused = _paused;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(\r\n        address spender\r\n    ) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(tradingEnabled, \"Trading is currently disabled\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function Sweep() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function changeBASE(\r\n        address _BASE\r\n    ) external onlyOwner {\r\n        BASE = _BASE;\r\n    }\r\n\r\n    function changeWETH(\r\n        address _WETH\r\n    ) external onlyOwner {\r\n        WETH = _WETH;\r\n    }\r\n\r\n    function changeBURN(\r\n        address _BURN\r\n    ) external onlyOwner {\r\n        BURN = _BURN;\r\n    }\r\n\r\n    function changeBEAR(\r\n        address _BEAR,\r\n        bool _approve\r\n    ) external onlyOwner {\r\n        BEAR = _BEAR;\r\n        bear = IERC20(_BEAR);\r\n        if (_approve) {\r\n            approve(BEAR, maxSupply);\r\n        }\r\n    }\r\n\r\n    function changeTRACKER(\r\n        address _TRACKER\r\n    ) external onlyOwner {\r\n        TRACKER = _TRACKER;\r\n        tracker = IDividendDistributor(_TRACKER);\r\n    }\r\n\r\n    function changeTREASURY(\r\n        address _TREASURY\r\n    ) external onlyOwnerOrTreasury {\r\n        TREASURY = _TREASURY;\r\n    }\r\n\r\n    function changeREWARD(\r\n        address _REWARD\r\n    ) external onlyOwnerOrTreasury {\r\n        REWARD = _REWARD;\r\n    }\r\n\r\n    function setMode(\r\n        uint8 _mode\r\n    ) external onlyOwner {\r\n        require(_mode == 0 || _mode == 1 || _mode == 2, \"Invalid mode\");\r\n        mode = _mode;\r\n    }\r\n\r\n    function transferForeignToken(\r\n        address _token,\r\n        address _to\r\n    ) external onlyOwner returns (bool _sent) {\r\n        if (_token == BEAR) {\r\n            require(canEmergencySweep, \"Emergency sweeping has been disabled\");\r\n        }\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n\r\n    function enableTrading() external authorized {\r\n        if (!tradingEnabled) {\r\n            tradingEnabled = true;\r\n        }\r\n    }\r\n\r\n    function toggleTrading(\r\n        bool _enabled\r\n    ) external authorized {\r\n        tradingEnabled = _enabled;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canEmergencySweep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BASE\",\"type\":\"address\"}],\"name\":\"changeBASE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BEAR\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"changeBEAR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BURN\",\"type\":\"address\"}],\"name\":\"changeBURN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_REWARD\",\"type\":\"address\"}],\"name\":\"changeREWARD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TRACKER\",\"type\":\"address\"}],\"name\":\"changeTRACKER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TREASURY\",\"type\":\"address\"}],\"name\":\"changeTREASURY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"name\":\"changeWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"claimAndSendDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableEmergencySweeping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_disable\",\"type\":\"bool\"}],\"name\":\"emergencySweepCustom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencySweepFull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEmergencySweeped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"setMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"toggleTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "wBEAR", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://61dea46461da252981dae7e5fbcc0a2ddaa00bdf9ced30050187e3a80d4e8650"}]}