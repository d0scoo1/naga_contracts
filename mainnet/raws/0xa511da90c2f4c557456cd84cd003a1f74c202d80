{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.12;\r\n\r\ninterface ib {\r\n    function acceptGov() external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function burn(uint amount) external;\r\n    function deposit() external;\r\n    function mint(uint amount) external;\r\n    function profit() external;\r\n    function setGov(address gov) external;\r\n    function transfer(address dst, uint amount) external returns (bool);\r\n    function withdraw(uint amount) external;\r\n}\r\n\r\ncontract ib_controller {\r\n\r\n    address public burner; // contract to normalize profit into ibEUR and distribute to ve_dist\r\n    address public msig;\r\n    address public next_msig;\r\n    uint public commit_msig;\r\n    uint public constant delay = 1 days;\r\n\r\n    address[] public tokens; // list of tokens (simplifies profit calls)\r\n\r\n    modifier is_msig() {\r\n        require(msg.sender == msig);\r\n        _;\r\n    }\r\n\r\n    constructor(address _msig, address _burner) {\r\n        msig = _msig;\r\n        burner = _burner;\r\n    }\r\n\r\n    // set the burner contract that normalizes tokens\r\n    function set_burner(address _burner) is_msig external {\r\n        burner = _burner;\r\n    }\r\n\r\n    // set the new msig with 1 day delay\r\n    function set_msig(address _msig) is_msig external {\r\n        next_msig = _msig;\r\n        commit_msig = block.timestamp + delay;\r\n    }\r\n\r\n    // accept msig for the new controller\r\n    function accept_msig() external {\r\n        require(msg.sender == next_msig && commit_msig < block.timestamp);\r\n        msig = next_msig;\r\n    }\r\n\r\n    // used to accept gov on underlying ib tokens for this contract\r\n    function accept_gov(address token) is_msig external {\r\n        ib(token).acceptGov();\r\n        tokens.push(token);\r\n    }\r\n\r\n    // set the governance for a token to a new governance\r\n    function set_gov(address token, address nextgov) is_msig external {\r\n        ib(token).setGov(nextgov);\r\n    }\r\n\r\n    // mint new ib tokens and deposit into the Iron Bank\r\n    function mint_and_deposit(address token, uint amount) is_msig external {\r\n        ib(token).mint(amount);\r\n        ib(token).deposit();\r\n    }\r\n\r\n    // withdraw ib tokens from Iron Bank and burn\r\n    function withdraw_and_burn(address token, uint amount) is_msig external {\r\n        ib(token).withdraw(amount);\r\n    }\r\n\r\n    // claim profits and distribute to ve_dist\r\n    function profit() external {\r\n        profit(tokens);\r\n    }\r\n\r\n    // fallback incase tokens are changed to a new governance\r\n    function profit(address[] memory _tokens) public {\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            ib _token = ib(_tokens[i]);\r\n            _token.profit();\r\n            _token.transfer(burner, _token.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_msig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"accept_gov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accept_msig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commit_msig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint_and_deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"next_msig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"profit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"}],\"name\":\"set_burner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nextgov\",\"type\":\"address\"}],\"name\":\"set_gov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_msig\",\"type\":\"address\"}],\"name\":\"set_msig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_and_burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ib_controller", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d5dc686d0a2abbfdafdfb4d0533e886517d4e830000000000000000000000004bcd0d9bdc8f28664987b99cc73dc368c7dee1bd", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3da7bdb21ba05b6f2c5bc589bb61600dc8400db27c58c97ca2f6619d88856935"}]}