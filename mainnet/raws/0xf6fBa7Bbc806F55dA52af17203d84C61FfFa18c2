{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/stevenkhong/Code/workspaces/workspace/eth-contracts/contracts/SwapForMe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Copyright (c) 2021 0xdev0 - All rights reserved\\n// https://twitter.com/0xdev0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapRouter {\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function getAmountsOut(\\n    uint amountIn,\\n    address[] memory path\\n  ) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IWETH {\\n  function withdraw(uint wad) external;\\n  function balanceOf(address account) external view returns (uint);\\n  function transfer(address recipient, uint amount) external returns (bool);\\n  function approve(address spender, uint amount) external returns (bool);\\n}\\n\\ninterface IERC20 {\\n  function balanceOf(address account) external view returns (uint);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  function approve(address spender, uint amount) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\\ncontract SwapForMe {\\n\\n  event LogInt(uint _index, uint _value);\\n\\n  // Mainnet\\n  IWETH public constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n  uint MAX_INT = 2**256 - 1;\\n\\n  IUniswapRouter public uniswap;\\n\\n  mapping(address => bool) public operators;\\n\\n  receive() external payable {}\\n\\n  constructor(IUniswapRouter _uniswap) {\\n    uniswap = _uniswap;\\n\\n    operators[msg.sender] = true;\\n  }\\n\\n  function swap(\\n    uint256[] memory amounts,\\n    address[] memory path,\\n    uint256 deadline\\n  ) public {\\n\\n    require(operators[msg.sender], \\\"Helper: please register first\\\");\\n    require(amounts.length == path.length, \\\"Helper: input lengths mismatch\\\");\\n\\n    address[] memory swapPath = new address[](2);\\n\\n    uint256 amountIn = amounts[0];\\n    address tokenIn = path[0];\\n\\n    IERC20 iTokenIn = IERC20(tokenIn);\\n    iTokenIn.transferFrom(msg.sender, address(this), amountIn);\\n    \\n\\n    for (uint i=1; i < amounts.length; i++) {\\n      emit LogInt(i, amountIn);\\n      uint256 amountOutMin = amounts[i];\\n      address tokenOut = path[i];\\n\\n      swapPath[0] = tokenIn;\\n      swapPath[1] = tokenOut;\\n\\n      IERC20(tokenIn).approve(address(uniswap), MAX_INT);\\n      uniswap.swapExactTokensForTokens(amountIn, amountOutMin, swapPath, address(this), deadline);\\n\\n      IERC20 iTokenOut = IERC20(tokenOut);\\n      amountIn = iTokenOut.balanceOf(msg.sender);\\n      tokenIn = tokenOut;\\n    }\\n\\n    \\n    IERC20 finalTokenOut = IERC20(tokenIn);\\n    uint finalBalance = finalTokenOut.balanceOf(address(this));\\n    finalTokenOut.transfer(msg.sender, finalBalance);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"_uniswap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogInt\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SwapForMe", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}