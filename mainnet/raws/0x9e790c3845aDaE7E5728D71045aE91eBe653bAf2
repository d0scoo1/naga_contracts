{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Nodes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"./ERC721A.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./AnonymiceLibrary.sol\\\";\\r\\n\\r\\n/// @custom:security-contact nodesnft@gmail.com\\r\\ncontract Nodes is ERC721A, Ownable {\\r\\n    using AnonymiceLibrary for uint8;\\r\\n\\r\\n    struct Trait {\\r\\n        string traitName;\\r\\n        string traitType;\\r\\n    }\\r\\n\\r\\n    // Mint enable\\r\\n    bool public MINT_ENABLE = false;\\r\\n    bool public PUBLIC_ENABLE = false;\\r\\n    uint256 public START_BLOCK = 0;\\r\\n\\r\\n    // Should be set with functions.\\r\\n    string private p5Url;\\r\\n    string private p5Integrity;\\r\\n    string private pakoUrl;\\r\\n    string private pakoIntegrity;\\r\\n    string private imageUrl;\\r\\n    string private imageUrlExtension;\\r\\n    string private animationUrl;\\r\\n    string private gzip;\\r\\n    string private description;\\r\\n    string private c;\\r\\n    string private meta;\\r\\n\\r\\n    string private constant traitType = \\\"{\\\\\\\"trait_type\\\\\\\":\\\\\\\"\\\";\\r\\n    string private constant traitValue = \\\"\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\";\\r\\n    string private constant terminator = \\\"\\\\\\\"}\\\";\\r\\n    uint8[11] private seq = [1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1];\\r\\n    uint8[9] private costs = [0,3,4,0,5,3,4,0,5];\\r\\n    uint8 private constant fuseCost = 2;\\r\\n    uint private constant ONE_DAY = 86400; // in secs\\r\\n    uint8 private constant TRAIT_COUNT = 5;\\r\\n    uint8 private constant PADDED_TRAIT_COUNT = 2;\\r\\n    uint256 private constant mult = 16807;\\r\\n    uint256 private constant mod = 2147483647;\\r\\n\\r\\n    uint private immutable TRAIT_TOKEN_EPOCH = ONE_DAY;\\r\\n    uint private immutable FUSE_COOLDOWN = ONE_DAY * 3;\\r\\n    uint private immutable PRICE;\\r\\n    uint16 public immutable GENISIS_CAP;\\r\\n    bytes32 public generalMerkleRoot;\\r\\n    bytes32 public devMerkleRoot;\\r\\n    uint16 public immutable FUSED_CAP;\\r\\n    \\r\\n    // n options per trait.\\r\\n    uint16[][TRAIT_COUNT] private rarityTree;\\r\\n\\r\\n    mapping(address => uint) private addrToMintedQ;\\r\\n    mapping(address => uint) private addrToMintedP;\\r\\n    mapping(string => bool) private hashToMinted;\\r\\n    mapping(uint => string) private tokenIdToHash;\\r\\n    mapping(uint => uint) private tokenIdToTimestamp;\\r\\n    mapping(uint => uint) private tokenIdToCooldown;\\r\\n    mapping(uint => uint) private tokenIdToSpent;\\r\\n    mapping(uint => uint16) private tokenIdToSizeX;\\r\\n    mapping(uint => uint16) private tokenIdToSizeY;\\r\\n    mapping(uint256 => Trait[]) private traitTypes;\\r\\n    mapping(address => uint) private lastWrite;\\r\\n\\r\\n    // team mints\\r\\n    uint8 public teamMints = 0;\\r\\n\\r\\n\\r\\n    constructor(bytes32 _generalMerkleRoot, bytes32 _devMerkleRoot, uint16 genesisCap) ERC721A(\\\"NODES\\\", \\\"NODE\\\", 12, genesisCap) {\\r\\n        // Palette\\r\\n        rarityTree[0] = [630, 450, 360, 270, 270, 100, 450, 360, 450, 450, 360, 270, 270, 360, 270, 360, 270, 360, 270, 540, 180, 270, 270, 270, 360, 360, 270, 450, 450];\\r\\n        // Connectivity (N/R) - 1&2\\r\\n        rarityTree[1] = [195, 388, 388, 388, 1553, 777, 777, 1942, 1165, 485, 388, 777, 777];\\r\\n        // Node Size - 1&2\\r\\n        rarityTree[2] = [2500, 2500, 5000];\\r\\n        // Symmetry\\r\\n        rarityTree[3] = [3334, 3333, 3333];\\r\\n        // Node Type - 1&2\\r\\n        rarityTree[4] = [1613, 645, 968, 1613, 1290, 968, 1290, 645, 645, 323];\\r\\n        generalMerkleRoot = _generalMerkleRoot;\\r\\n        devMerkleRoot = _devMerkleRoot;\\r\\n        // price in Wei, this is 0.05 ETH.\\r\\n        PRICE = 50000000000000000;\\r\\n        GENISIS_CAP = genesisCap;\\r\\n        FUSED_CAP = genesisCap * 2;\\r\\n        imageUrlExtension = \\\".gif\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier noContract() {\\r\\n        require(!AnonymiceLibrary.isContract(msg.sender), \\\"c0\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier disallowIfStateIsChanging() {\\r\\n        // Do what you want in your own house, but guests should be nice\\r\\n        require(owner() == msg.sender || lastWrite[msg.sender] < block.number, \\\"no.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    ______  ___ _____ ___      ___   _______ _____    \\r\\n    |  _  \\\\/ _ \\\\_   _/ _ \\\\    / / | | | ___ \\\\_   _|   \\r\\n    | | | / /_\\\\ \\\\| |/ /_\\\\ \\\\  / /| | | | |_/ / | | ___ \\r\\n    | | | |  _  || ||  _  | / / | | | |    /  | |/ __|\\r\\n    | |/ /| | | || || | | |/ /  | |_| | |\\\\ \\\\ _| |\\\\__ \\\\\\r\\n    |___/ \\\\_| |_/\\\\_/\\\\_| |_/_/    \\\\___/\\\\_| \\\\_|\\\\___/___/                                           \\r\\n    */\\r\\n\\r\\n    /**\\r\\n     * @dev Hash to HTML function\\r\\n     */\\r\\n    function tokenHTML(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        disallowIfStateIsChanging\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId),\\\"e0\\\");\\r\\n        return string(\\r\\n            abi.encodePacked(\\r\\n                headData(),\\r\\n                tokenIdToHash[tokenId],\\r\\n                \\\"%27%3B%20const%20size%20%3D%20%5B\\\",\\r\\n                tokenIdToSizeX[tokenId] > 0 ? AnonymiceLibrary.toString(tokenIdToSizeX[tokenId]) : \\\"500\\\",\\r\\n                \\\"%2C\\\",\\r\\n                tokenIdToSizeY[tokenId] > 0 ? AnonymiceLibrary.toString(tokenIdToSizeY[tokenId]) : \\\"500\\\",\\r\\n                \\\"%5D%3B%20const%20g%20%3D%20%27\\\",\\r\\n                gzip,\\r\\n                \\\"%27%3B%20const%20e%20%3D%20Function(%27%22use%20strict%22%3Breturn%20(%27%20%2B%20pako.inflate(new%20Uint8Array(atob(g).split(%27%27).map(function(x)%7Breturn%20x.charCodeAt(0)%3B%20%7D))%2C%20%7B%20to%3A%20%27string%27%20%7D)%2B%20%27)%27)()%3B%20new%20p5(e.nodes%2C%20%27nodes%27)%3B%20%3C%2Fscript%3E%3Cdiv%20id%3D%22nodes%22%20name%3D%22nodes%22%3E%3C%2Fdiv%3E%3C%2Fbody%3E%3C%2Fhtml%3E\\\"\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function headData() private view returns (bytes memory) {\\r\\n        return abi.encodePacked(\\r\\n             \\\"data:text/html,%3Chtml%3E%3Chead%3E\\\",\\r\\n                meta,\\r\\n                \\\"%3Cscript%20src%3D%22\\\",\\r\\n                p5Url,\\r\\n                \\\"%22%20integrity%3D%22\\\",\\r\\n                p5Integrity,\\r\\n                \\\"%22%20crossorigin%3D%22anonymous%22%20referrerpolicy%3D%22no-referrer%22%3E%3C%2Fscript%3E%3Cscript%20src%3D%22\\\",\\r\\n                pakoUrl,\\r\\n                \\\"%22%20integrity%3D%22\\\",\\r\\n                pakoIntegrity,\\r\\n                \\\"%22%20crossorigin%3D%22anonymous%22%20referrerpolicy%3D%22no-referrer%22%3E%3C%2Fscript%3E%3C%2Fhead%3E%3C%2Fbody%3E%3Cscript%3Econst%20h%20%3D%20%27\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the SVG and metadata for a token Id\\r\\n     * @param _tokenId The tokenId to return the SVG and metadata for.\\r\\n     */\\r\\n    function tokenURI(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        disallowIfStateIsChanging\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(_tokenId), \\\"e0\\\");\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    AnonymiceLibrary.encode(\\r\\n                        bytes(\\r\\n                            string(\\r\\n                                abi.encodePacked(\\r\\n                                    \\\"{\\\\\\\"name\\\\\\\": \\\\\\\"NODES #\\\",\\r\\n                                    AnonymiceLibrary.toString(_tokenId),\\r\\n                                    \\\"\\\\\\\",\\\\\\\"description\\\\\\\": \\\\\\\"\\\",\\r\\n                                    description,\\r\\n                                    \\\"\\\\\\\",\\\\\\\"animation_url\\\\\\\": \\\\\\\"\\\",\\r\\n                                    bytes(animationUrl).length > 0 ? animationUrl : tokenHTML(_tokenId),\\r\\n                                    bytes(animationUrl).length > 0 ? AnonymiceLibrary.toString(_tokenId) : \\\"\\\",\\r\\n                                    \\\"\\\\\\\",\\\\\\\"external_url\\\\\\\": \\\\\\\"\\\",\\r\\n                                    tokenHTML(_tokenId),\\r\\n                                    \\\"\\\\\\\",\\\\\\\"image\\\\\\\": \\\\\\\"\\\",\\r\\n                                    imageUrl,\\r\\n                                    AnonymiceLibrary.toString(_tokenId),\\r\\n                                    imageUrlExtension,\\r\\n                                    \\\"\\\\\\\",\\\\\\\"attributes\\\\\\\": \\\",\\r\\n                                    hashToMetadata(getTokenHash(_tokenId)),\\r\\n                                    \\\"}\\\"\\r\\n                                )\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    ___  ________ _   _ _____ _____ _   _ _____ \\r\\n    |  \\\\/  |_   _| \\\\ | |_   _|_   _| \\\\ | |  __ \\\\\\r\\n    | .  . | | | |  \\\\| | | |   | | |  \\\\| | |  \\\\/\\r\\n    | |\\\\/| | | | | . ` | | |   | | | . ` | | __ \\r\\n    | |  | |_| |_| |\\\\  | | |  _| |_| |\\\\  | |_\\\\ \\\\\\r\\n    \\\\_|  |_/\\\\___/\\\\_| \\\\_/ \\\\_/  \\\\___/\\\\_| \\\\_/\\\\____/                                          \\r\\n    */\\r\\n    function mintNodes(uint256 quantity, bytes32[] calldata merkleProof) public payable noContract {\\r\\n        require(msg.value >= PRICE * quantity,\\\"m1\\\");\\r\\n        lastWrite[msg.sender] = block.number;\\r\\n        mint(quantity, merkleProof, false); \\r\\n    }\\r\\n\\r\\n    function mintNodesTeam(uint256 quantity, bytes32[] calldata merkleProof) public noContract {\\r\\n        mint(quantity, merkleProof, true);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 quantity, bytes32[] calldata merkleProof, bool isTeamMint) private {\\r\\n        uint256 limit = isTeamMint ? 12 : 2;\\r\\n        require((PUBLIC_ENABLE ? addrToMintedP[msg.sender] : addrToMintedQ[msg.sender]) + quantity <= limit, \\\"m2\\\");\\r\\n        require((totalGenesisSupply() + quantity) <= GENISIS_CAP, \\\"m3\\\");\\r\\n        require(MerkleProof.verify(merkleProof, isTeamMint ? devMerkleRoot : generalMerkleRoot, keccak256(abi.encodePacked(msg.sender))), \\\"m4\\\");\\r\\n        _safeMint(msg.sender, quantity);\\r\\n        if(isTeamMint) {\\r\\n            // accountability is good.\\r\\n            teamMints += uint8(quantity);\\r\\n            // make sure team can't mint more than our allotment during public mint.\\r\\n            require(addrToMintedQ[msg.sender] + addrToMintedP[msg.sender] + quantity <= limit, \\\"m6\\\");\\r\\n        } else {\\r\\n            require(MINT_ENABLE == true, \\\"m0\\\");\\r\\n            // Require that you have not minted before for further protection against flash bots.\\r\\n            require((PUBLIC_ENABLE ? addrToMintedP[msg.sender] : addrToMintedQ[msg.sender]) == 0, \\\"m5\\\");\\r\\n        }\\r\\n        if(PUBLIC_ENABLE) {\\r\\n            addrToMintedP[msg.sender] += quantity;\\r\\n        } else {\\r\\n            addrToMintedQ[msg.sender] += quantity;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity,\\r\\n        bytes memory data\\r\\n    ) internal override {\\r\\n        if(from == address(0)) {\\r\\n            if(data.length > 0) {\\r\\n                // THIS IS NOT A BATCH CAPABLE FUNCTION BECAUSE FUSING DOES NOT SUPPORT THIS\\r\\n                require(quantity == 1, \\\"btt0\\\");\\r\\n                tokenIdToHash[startTokenId] = string(data);\\r\\n            } else {\\r\\n                // This is batch capabable.\\r\\n                string memory hashi = hash(startTokenId, to, uint8(quantity));\\r\\n                for(uint i = 0; i < quantity; i++) {\\r\\n                    tokenIdToHash[startTokenId + i] = string(abi.encodePacked(\\\"00\\\", AnonymiceLibrary.substring(hashi, 0 + i*12, 12 + i*12)));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal override {\\r\\n      // Nuke token counters\\r\\n      for(uint i = 0; i < quantity; i++) {\\r\\n          tokenIdToTimestamp[startTokenId + i] = block.timestamp;\\r\\n          tokenIdToCooldown[startTokenId + i] = block.timestamp + FUSE_COOLDOWN;\\r\\n          delete tokenIdToSpent[startTokenId + i];\\r\\n          delete tokenIdToSizeX[startTokenId + i];\\r\\n          delete tokenIdToSizeY[startTokenId + i];\\r\\n      }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    ______ _   _ _____ _____ _   _ _____ \\r\\n    |  ___| | | /  ___|_   _| \\\\ | |  __ \\\\\\r\\n    | |_  | | | \\\\ `--.  | | |  \\\\| | |  \\\\/\\r\\n    |  _| | | | |`--. \\\\ | | | . ` | | __ \\r\\n    | |   | |_| /\\\\__/ /_| |_| |\\\\  | |_\\\\ \\\\\\r\\n    \\\\_|    \\\\___/\\\\____/ \\\\___/\\\\_| \\\\_/\\\\____/\\r\\n    */\\r\\n    function fuse(\\r\\n        uint256 tokenId0,\\r\\n        uint256 tokenId1,\\r\\n        int8[9] memory phenotype,\\r\\n        uint256 tokenCostPreference\\r\\n    ) public noContract {\\r\\n        require(MINT_ENABLE);\\r\\n        require(ownerOf(tokenId0) == msg.sender && ownerOf(tokenId1) == msg.sender, \\\"f1\\\");\\r\\n        require(tokenId0 != tokenId1, \\\"f2\\\");\\r\\n        require(getRemainingCooldown(tokenId0) == 0 && getRemainingCooldown(tokenId1) == 0, \\\"f3\\\");\\r\\n        string memory h1 = getTokenHash(tokenId0);\\r\\n        string memory h2 = getTokenHash(tokenId1);\\r\\n\\r\\n        // Phenotype = [0,1,0,...,1]\\r\\n        //           = [p1,p2,p1,...,p2]]\\r\\n        string memory out;\\r\\n        uint8 curr = 2;\\r\\n        uint8 cost = fuseCost;\\r\\n\\r\\n        for(uint8 i = 0; i < phenotype.length; i++) { \\r\\n            if(phenotype[i] == -2) {\\r\\n                out = string(abi.encodePacked(out, AnonymiceLibrary.substring(h1, curr, curr + seq[i + 2])));\\r\\n            } else if(phenotype[i] == -1) {\\r\\n                out = string(abi.encodePacked(out, AnonymiceLibrary.substring(h2, curr, curr + seq[i + 2])));\\r\\n            } else {\\r\\n                // you cannot set 0 color, 3 sym1, 7 sym2\\r\\n                require(phenotype[i] >= 0 && i != 0 && i != 3 && i != 7, \\\"f4\\\");\\r\\n                // 0, 1, 2, 3, 4, 1, 2, 3, 4\\r\\n                // safe to convert to unsigned type as we already checked bounds above.\\r\\n                require(uint8(phenotype[i]) < rarityTree[i < 5 ? i : i - 4].length, \\\"f5\\\");\\r\\n                cost += costs[i];\\r\\n                uint8 rar = uint8(phenotype[i]);\\r\\n                out = string(\\r\\n                    abi.encodePacked(out, string(abi.encodePacked((rar <= 9 && seq[i+2] == 2) ? \\\"0\\\" : \\\"\\\", rar.toString())))\\r\\n                );\\r\\n            }\\r\\n            curr += seq[i+2];\\r\\n        }\\r\\n\\r\\n        uint256 bal0 = getTraitTokenBalance(tokenId0);\\r\\n        uint256 bal1 = getTraitTokenBalance(tokenId1);\\r\\n        uint256 t0spend;\\r\\n        uint256 t1spend;\\r\\n        require(bal0 + bal1 >= uint256(cost), \\\"f6\\\");\\r\\n        if(tokenCostPreference == tokenId0) {\\r\\n            t0spend = cost > bal0 ? bal0 : cost;\\r\\n            t1spend = cost > t0spend ? cost - t0spend : 0;\\r\\n        } else {\\r\\n            t1spend = cost > bal1 ? bal1 : cost;\\r\\n            t0spend = cost > t1spend ? cost - t1spend : 0;\\r\\n        }\\r\\n        tokenIdToSpent[tokenId0] += t0spend;\\r\\n        tokenIdToSpent[tokenId1] += t1spend;\\r\\n        _safeMint(msg.sender, 1, abi.encodePacked(\\\"01\\\", out));\\r\\n        burnIfFused(tokenId0, h1);\\r\\n        burnIfFused(tokenId1, h2);\\r\\n        // It would be much better if this could fail fast.\\r\\n        require(totalChildSupply() <= FUSED_CAP, \\\"f7\\\");\\r\\n    }\\r\\n\\r\\n    function burnIfFused(uint256 tokenId, string memory h1) private {\\r\\n        if(AnonymiceLibrary.parseInt(AnonymiceLibrary.substring(h1, 1, 2)) != 0) {\\r\\n            safeTransferFrom(msg.sender, address(0xdead), tokenId);\\r\\n            // Pieces that are sacrificed through fusing will have their art updated.\\r\\n            tokenIdToHash[tokenId] = string(abi.encodePacked(\\\"1\\\",AnonymiceLibrary.substring(h1, 1, bytes(h1).length)));\\r\\n            burn();\\r\\n            // cooldown happens via transfer, also it doesn't matter since its dead.\\r\\n        } else {\\r\\n            tokenIdToCooldown[tokenId] = block.timestamp + FUSE_COOLDOWN;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    ______           _ _       _____             \\r\\n    | ___ \\\\         (_) |     |_   _|            \\r\\n    | |_/ /__ _ _ __ _| |_ _   _| |_ __ ___  ___ \\r\\n    |    // _` | '__| | __| | | | | '__/ _ \\\\/ _ \\\\\\r\\n    | |\\\\ \\\\ (_| | |  | | |_| |_| | | | |  __/  __/\\r\\n    \\\\_| \\\\_\\\\__,_|_|  |_|\\\\__|\\\\__, \\\\_/_|  \\\\___|\\\\___|\\r\\n                            __/ |                \\r\\n                            |___/                    \\r\\n    */\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a digit from 0 - 10000 into its corresponding rarity based on the given rarity tier.\\r\\n     * @param _randinput The input from 0 - 10000 to use for rarity gen.\\r\\n     * @param _rarityTier The tier to use.\\r\\n     */\\r\\n    function rarityGen(uint256 _randinput, uint8 _rarityTier)\\r\\n        private\\r\\n        view\\r\\n        returns (uint8)\\r\\n    {\\r\\n        uint16 currentLowerBound = 0;\\r\\n        for (uint8 i = 0; i < rarityTree[_rarityTier].length; i++) {\\r\\n            uint16 thisPercentage = rarityTree[_rarityTier][i];\\r\\n            if (\\r\\n                _randinput >= currentLowerBound &&\\r\\n                _randinput < currentLowerBound + thisPercentage\\r\\n            ) return i;\\r\\n            currentLowerBound = currentLowerBound + thisPercentage;\\r\\n        }\\r\\n        revert(\\\"r1\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Generates a 12*q digit hash from a tokenId, address, and random number.\\r\\n     * @param _t The token id to be used within the hash.\\r\\n     * @param _a The address to be used within the hash.\\r\\n     */\\r\\n    function hash(\\r\\n        uint256 _t,\\r\\n        address _a,\\r\\n        uint8 q\\r\\n    ) private returns (string memory) {\\r\\n        string memory currentHash;\\r\\n        string memory out;\\r\\n        uint8 draws = 0;\\r\\n        uint8 selected = 0;\\r\\n        // You MUST NOT hash changing attributes like block.timestamp if you haven't thought about flash bot protection.\\r\\n        uint256 seed =\\r\\n                uint256(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            block.timestamp,\\r\\n                            block.difficulty,\\r\\n                            _t,\\r\\n                            _a,\\r\\n                            c\\r\\n                        )\\r\\n                    )\\r\\n                ) % 123456789;\\r\\n        // This is a robust uniform random algo which is only slightly less random than Math.random().\\r\\n        uint256 x = (seed * mult + 1) % mod;\\r\\n        do {\\r\\n            for (uint8 i = 0; i < TRAIT_COUNT; i++) {\\r\\n                uint16 _randinput = uint16(x % 10000);\\r\\n                x = (x * mult + 1) % mod;\\r\\n                uint8 rar = rarityGen(_randinput, i);\\r\\n                currentHash = string(\\r\\n                    abi.encodePacked(currentHash, string(abi.encodePacked((rar <= 9 && i <= 1) ? \\\"0\\\" : \\\"\\\", rar.toString())))\\r\\n                );\\r\\n            }\\r\\n\\r\\n            if(!hashToMinted[currentHash]) {\\r\\n                selected++;\\r\\n                hashToMinted[currentHash] = true;\\r\\n                // Set the secondary hash for fusing.\\r\\n                uint8 offset = 2;\\r\\n                out = string(\\r\\n                    abi.encodePacked(out, currentHash, AnonymiceLibrary.substring(currentHash, offset, TRAIT_COUNT + offset))\\r\\n                );\\r\\n            }\\r\\n            currentHash = \\\"\\\";\\r\\n            draws++;\\r\\n            if(draws >= q*2) {\\r\\n                revert(\\\"h1\\\");\\r\\n            }\\r\\n        } while (selected < q);\\r\\n\\r\\n        return out;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hash to metadata function\\r\\n     */\\r\\n    function hashToMetadata(string memory _hash)\\r\\n        private\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint8 curr = 0;\\r\\n        uint8 idx = 0;\\r\\n        string memory metadataString;\\r\\n        for(uint8 i = 0; i < seq.length; i++) {\\r\\n            idx = AnonymiceLibrary.parseInt(\\r\\n                AnonymiceLibrary.substring(_hash, curr, curr + seq[i])\\r\\n            );\\r\\n            metadataString = string(\\r\\n                abi.encodePacked(\\r\\n                    metadataString,\\r\\n                    traitType,\\r\\n                    abi.encodePacked(traitTypes[i > 6 ? i - 4 : i][idx].traitType, i > 6 ? \\\"2\\\" : \\\"\\\"),\\r\\n                    traitValue,\\r\\n                    traitTypes[i > 6 ? i - 4 : i][idx].traitName,\\r\\n                    terminator,\\r\\n                    i < seq.length-1 ? \\\",\\\" : \\\"\\\"\\r\\n                )\\r\\n            );\\r\\n            curr += seq[i];\\r\\n        }\\r\\n        return string(abi.encodePacked(\\\"[\\\", metadataString, \\\"]\\\"));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     _____      _   _              _______      _   _            \\r\\n    |  __ \\\\    | | | |            / /  ___|    | | | |           \\r\\n    | |  \\\\/ ___| |_| |_ ___ _ __ / /\\\\ `--.  ___| |_| |_ ___ _ __ \\r\\n    | | __ / _ \\\\ __| __/ _ \\\\ '__/ /  `--. \\\\/ _ \\\\ __| __/ _ \\\\ '__|\\r\\n    | |_\\\\ \\\\  __/ |_| ||  __/ | / /  /\\\\__/ /  __/ |_| ||  __/ |   \\r\\n    \\\\____/\\\\___|\\\\__|\\\\__\\\\___|_|/_/   \\\\____/ \\\\___|\\\\__|\\\\__\\\\___|_|                                                        \\r\\n    */\\r\\n\\r\\n    /**\\r\\n     * @dev Toggles minting, so it can be start/stopped by the contract owner.\\r\\n     */\\r\\n    function toggleMint() public onlyOwner {\\r\\n        MINT_ENABLE = !MINT_ENABLE;\\r\\n        if(START_BLOCK == 0) {\\r\\n            START_BLOCK = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Toggles minting, so it can be start/stopped by the contract owner.\\r\\n     */\\r\\n    function togglePublic() public onlyOwner {\\r\\n        PUBLIC_ENABLE = !PUBLIC_ENABLE;\\r\\n    }\\r\\n\\r\\n    function getTraitTokenBalance(uint256 tokenId) public view returns(uint) {\\r\\n        require(_exists(tokenId), \\\"e0\\\");\\r\\n        return ((block.timestamp - tokenIdToTimestamp[tokenId]) / TRAIT_TOKEN_EPOCH) - tokenIdToSpent[tokenId];\\r\\n    }\\r\\n\\r\\n    function getRemainingCooldown(uint256 tokenId) public view returns (uint) {\\r\\n        require(_exists(tokenId), \\\"e0\\\");\\r\\n        return block.timestamp > tokenIdToCooldown[tokenId] ? 0 : tokenIdToCooldown[tokenId] - block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the hash for an existing token.\\r\\n     */\\r\\n    function getTokenHash(uint256 tokenId) public view disallowIfStateIsChanging returns (string memory)  {\\r\\n        require(_exists(tokenId), \\\"e0\\\");\\r\\n        return tokenIdToHash[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns the size of the token as javscript list.\\r\\n     */ \\r\\n    function getTokenSize(uint tokenId) public view disallowIfStateIsChanging returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"e0\\\");\\r\\n        return string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"[\\\",\\r\\n                    tokenIdToSizeX[tokenId],\\r\\n                    \\\",\\\",\\r\\n                    tokenIdToSizeY[tokenId],\\r\\n                    \\\"]\\\"\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a trait type\\r\\n     * @param _traitTypeIndex The trait type index\\r\\n     * @param traits Array of traits to add\\r\\n     */\\r\\n    function addTraitType(uint256 _traitTypeIndex, Trait[] memory traits)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        delete traitTypes[_traitTypeIndex];\\r\\n        for (uint256 i = 0; i < traits.length; i++) {\\r\\n            traitTypes[_traitTypeIndex].push(\\r\\n                Trait(\\r\\n                    traits[i].traitName,\\r\\n                    traits[i].traitType\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    function setSizeForTokenId(uint256 tokenId, uint16 xInPixels, uint16 yInPixels) public {\\r\\n        require(ownerOf(tokenId) == msg.sender, \\\"s0\\\");\\r\\n        if(xInPixels > 0 && xInPixels <= 5000 && yInPixels > 0 && yInPixels <= 5000) {\\r\\n            tokenIdToSizeX[tokenId] = xInPixels;\\r\\n            tokenIdToSizeY[tokenId] = yInPixels;\\r\\n        } else {\\r\\n            revert(\\\"s1\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the meta tag for the page.\\r\\n     * @param _meta the meta tag contents.\\r\\n     */\\r\\n    function setMeta(string memory _meta) public onlyOwner {\\r\\n        meta = _meta;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the p5.js mirroring URL - this can be changed if cloudflare ever disappears.\\r\\n     * @param _p5Url The address of the p5.js file hosted on CDN (URL encoded).\\r\\n     */\\r\\n\\r\\n    function setp5Address(string memory _p5Url) public onlyOwner {\\r\\n        p5Url = _p5Url;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the SHA-512 hash of the p5.js library hosted on the CDN.\\r\\n     * @param _p5Integrity The SHA-512 Hash of the p5.js library.\\r\\n     */\\r\\n    function setp5Integrity(string memory _p5Integrity) public onlyOwner {\\r\\n        p5Integrity = _p5Integrity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the pako.js mirroring URL - this can be changed if cloudflare ever disappears.\\r\\n     * @param _pakoUrl The address of the p5.js file hosted on CDN (URL encoded).\\r\\n     */\\r\\n\\r\\n    function setPakoAddress(string memory _pakoUrl) public onlyOwner {\\r\\n        pakoUrl = _pakoUrl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the SHA-512 hash of the p5.js library hosted on the CDN.\\r\\n     * @param _pakoIntegrity The SHA-512 Hash of the p5.js library.\\r\\n     */\\r\\n    function setPakoIntegrity(string memory _pakoIntegrity) public onlyOwner {\\r\\n        pakoIntegrity = _pakoIntegrity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the B64 encoded Gzipped source string for HTML mirroring.\\r\\n     * @param _b64Gzip the B64 encoded Gzipped source string for HTML mirroring.\\r\\n     */\\r\\n    function setGzipSource(string memory _b64Gzip) public onlyOwner {\\r\\n        gzip = _b64Gzip;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Sets the base image url, this will be the Nodes API, and can be replaced by a static IPFS resource\\r\\n     * after mint, so the API can be retired.\\r\\n     * @param _imageUrl The URL of the image API or the IPFS static resource (URL encoded).\\r\\n     */\\r\\n    function setImageUrl(string memory _imageUrl) public onlyOwner {\\r\\n        imageUrl = _imageUrl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Set the image type extension on the base image url. We'd like to use webp if openSea will let us.\\r\\n    */\\r\\n    function setImageUrlExtension(string memory _imageUrlExtension) public onlyOwner {\\r\\n        imageUrlExtension = _imageUrlExtension;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Sets the base animation url, this will be an IPFS hosted version of the API to render the Nodes\\r\\n     * artwork without needing to hit the mirrored HTML endpoint which OpenSea can't do yet.\\r\\n     * @param _animationUrl The URL of the Nodes viewer hosted on IPFS.\\r\\n     */\\r\\n    function setAnimationUrl(string memory _animationUrl) public onlyOwner {\\r\\n        animationUrl = _animationUrl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the description returned in the tokenURI.\\r\\n     */\\r\\n    function setDescription(string memory _description) public onlyOwner {\\r\\n        description = _description;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Clears all set traits. Note these can also just be overwritten since its tied to a mapping.\\r\\n     */\\r\\n    function clearTraits() public onlyOwner {\\r\\n        for (uint8 i = 0; i < TRAIT_COUNT+2; i++) {\\r\\n            delete traitTypes[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the general and team merkle roots.\\r\\n     */\\r\\n    function setMerkelRoots(bytes32 _generalMerkleRoot, bytes32 _devMerkleRoot) public onlyOwner {\\r\\n        generalMerkleRoot = _generalMerkleRoot;\\r\\n        devMerkleRoot = _devMerkleRoot;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lever.\\r\\n     */\\r\\n    function setC(string memory _c) public onlyOwner {\\r\\n        c = _c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Pays the team for their hard work.\\r\\n     */\\r\\n    function payTheDevs() public onlyOwner {\\r\\n        (bool success, ) = owner().call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/AnonymiceLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nlibrary AnonymiceLibrary {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function parseInt(string memory _a)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint8 _parsedInt)\\r\\n    {\\r\\n        bytes memory bresult = bytes(_a);\\r\\n        uint8 mint = 0;\\r\\n        for (uint8 i = 0; i < bresult.length; i++) {\\r\\n            if (\\r\\n                (uint8(uint8(bresult[i])) >= 48) &&\\r\\n                (uint8(uint8(bresult[i])) <= 57)\\r\\n            ) {\\r\\n                mint *= 10;\\r\\n                mint += uint8(bresult[i]) - 48;\\r\\n            }\\r\\n        }\\r\\n        return mint;\\r\\n    }\\r\\n\\r\\n    function substring(\\r\\n        string memory str,\\r\\n        uint256 startIndex,\\r\\n        uint256 endIndex\\r\\n    ) internal pure returns (string memory) {\\r\\n        bytes memory strBytes = bytes(str);\\r\\n        bytes memory result = new bytes(endIndex - startIndex);\\r\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\r\\n            result[i - startIndex] = strBytes[i];\\r\\n        }\\r\\n        return string(result);\\r\\n    }\\r\\n\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Creators: locationtba.eth, 2pmflow.eth\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Does not support burning tokens to address(0).\\r\\n */\\r\\ncontract ERC721A is\\r\\n  Context,\\r\\n  ERC165,\\r\\n  IERC721,\\r\\n  IERC721Metadata,\\r\\n  IERC721Enumerable\\r\\n{\\r\\n  using Address for address;\\r\\n  using Strings for uint256;\\r\\n\\r\\n  struct TokenOwnership {\\r\\n    address addr;\\r\\n    uint64 startTimestamp;\\r\\n  }\\r\\n\\r\\n  struct AddressData {\\r\\n    uint128 balance;\\r\\n    uint128 numberMinted;\\r\\n  }\\r\\n\\r\\n  uint256 private currentIndex = 0;\\r\\n  uint256 private burnedCount = 0;\\r\\n  uint256 private immutable startChildIndex;\\r\\n  uint256 private currentChildIndex;\\r\\n  uint256 internal immutable maxBatchSize;\\r\\n\\r\\n  // Token name\\r\\n  string private _name;\\r\\n\\r\\n  // Token symbol\\r\\n  string private _symbol;\\r\\n\\r\\n  // Mapping from token ID to ownership details\\r\\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\r\\n  mapping(uint256 => TokenOwnership) private _ownerships;\\r\\n\\r\\n  // Mapping owner address to address data\\r\\n  mapping(address => AddressData) private _addressData;\\r\\n\\r\\n  // Mapping from token ID to approved address\\r\\n  mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n  // Mapping from owner to operator approvals\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  /**\\r\\n   * @dev\\r\\n   * `maxBatchSize` refers to how much a minter can mint at a time.\\r\\n   */\\r\\n  constructor(\\r\\n    string memory name_,\\r\\n    string memory symbol_,\\r\\n    uint256 maxBatchSize_,\\r\\n    uint256 maxGenesisCap_\\r\\n  ) {\\r\\n    require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n    maxBatchSize = maxBatchSize_;\\r\\n    startChildIndex = maxGenesisCap_;\\r\\n    currentChildIndex = maxGenesisCap_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return totalGenesisSupply() + totalChildSupply();\\r\\n  }\\r\\n\\r\\n  function totalGenesisSupply() public view returns (uint256) {\\r\\n    return currentIndex;\\r\\n  }\\r\\n\\r\\n  function totalChildSupply() public view returns (uint256) {\\r\\n    return currentChildIndex - startChildIndex - burnedCount;\\r\\n  }\\r\\n\\r\\n  function burn() internal {\\r\\n    burnedCount++;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n   */\\r\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\r\\n    require(index < totalGenesisSupply() || (index >= startChildIndex && index < totalChildSupply() + startChildIndex) , \\\"ERC721A: global index out of bounds\\\");\\r\\n    return index;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n   * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\r\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\r\\n   */\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\r\\n    address currOwnershipAddr = address(0);\\r\\n    uint256 tokenIdsIdx = 0;\\r\\n    for(uint8 j = 0; j < 2; j++) {\\r\\n      uint256 numMintedSoFar = j < 1 ? totalGenesisSupply() : totalChildSupply() + startChildIndex + burnedCount;\\r\\n      for (uint256 i = j < 1 ? 0 : startChildIndex; i < numMintedSoFar; i++) {\\r\\n        TokenOwnership memory ownership = _ownerships[i];\\r\\n        if (ownership.addr != address(0)) {\\r\\n          currOwnershipAddr = ownership.addr;\\r\\n        }\\r\\n        if (currOwnershipAddr == owner) {\\r\\n          if (tokenIdsIdx == index) {\\r\\n            return i;\\r\\n          }\\r\\n          tokenIdsIdx++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    revert(\\\"ERC721A: unable to get token of owner by index\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(ERC165, IERC165)\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IERC721).interfaceId ||\\r\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address owner) public view override returns (uint256) {\\r\\n    require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\r\\n    return uint256(_addressData[owner].balance);\\r\\n  }\\r\\n\\r\\n  function _numberMinted(address owner) internal view returns (uint256) {\\r\\n    require(\\r\\n      owner != address(0),\\r\\n      \\\"ERC721A: number minted query for the zero address\\\"\\r\\n    );\\r\\n    return uint256(_addressData[owner].numberMinted);\\r\\n  }\\r\\n\\r\\n  function ownershipOf(uint256 tokenId)\\r\\n    internal\\r\\n    view\\r\\n    returns (TokenOwnership memory)\\r\\n  {\\r\\n    require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\r\\n\\r\\n    uint256 lowestTokenToCheck;\\r\\n    if (tokenId >= maxBatchSize) {\\r\\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\\r\\n    }\\r\\n\\r\\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\r\\n      TokenOwnership memory ownership = _ownerships[curr];\\r\\n      if (ownership.addr != address(0)) {\\r\\n        return ownership;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    revert(\\\"ERC721A: unable to determine the owner of token\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-ownerOf}.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n    return ownershipOf(tokenId).addr;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-name}.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-symbol}.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-tokenURI}.\\r\\n   */\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (string memory)\\r\\n  {\\r\\n    require(\\r\\n      _exists(tokenId),\\r\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n    );\\r\\n\\r\\n    string memory baseURI = _baseURI();\\r\\n    return\\r\\n      bytes(baseURI).length > 0\\r\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n        : \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n   * by default, can be overriden in child contracts.\\r\\n   */\\r\\n  function _baseURI() internal view virtual returns (string memory) {\\r\\n    return \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-approve}.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) public override {\\r\\n    address owner = ERC721A.ownerOf(tokenId);\\r\\n    require(to != owner, \\\"ERC721A: approval to current owner\\\");\\r\\n\\r\\n    require(\\r\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n      \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\r\\n    );\\r\\n\\r\\n    _approve(to, tokenId, owner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-getApproved}.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\r\\n    require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\r\\n\\r\\n    return _tokenApprovals[tokenId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-setApprovalForAll}.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool approved) public override {\\r\\n    require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\r\\n\\r\\n    _operatorApprovals[_msgSender()][operator] = approved;\\r\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-isApprovedForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _operatorApprovals[owner][operator];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-transferFrom}.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n    require(\\r\\n      _checkOnERC721Received(from, to, tokenId, _data),\\r\\n      \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `tokenId` exists.\\r\\n   *\\r\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Tokens start existing when they are minted (`_mint`),\\r\\n   */\\r\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n    return tokenId < currentIndex || tokenId >= startChildIndex && tokenId < currentChildIndex;\\r\\n  }\\r\\n\\r\\n  function _safeMint(address to, uint256 quantity) internal {\\r\\n    _safeMint(to, quantity, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `quantity` cannot be larger than the max batch size.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _safeMint(\\r\\n    address to,\\r\\n    uint256 quantity,\\r\\n    bytes memory _data\\r\\n  ) internal {\\r\\n    bool child = _data.length > 0;\\r\\n    uint256 startTokenId = child ? currentChildIndex : currentIndex;\\r\\n    require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\r\\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\r\\n    require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\r\\n    require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\r\\n\\r\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity, _data);\\r\\n\\r\\n    AddressData memory addressData = _addressData[to];\\r\\n    _addressData[to] = AddressData(\\r\\n      addressData.balance + uint128(quantity),\\r\\n      addressData.numberMinted + uint128(quantity)\\r\\n    );\\r\\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    uint256 updatedIndex = startTokenId;\\r\\n\\r\\n    for (uint256 i = 0; i < quantity; i++) {\\r\\n      emit Transfer(address(0), to, updatedIndex);\\r\\n      require(\\r\\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\r\\n        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n      );\\r\\n      updatedIndex++;\\r\\n    }\\r\\n\\r\\n    currentIndex = child ? currentIndex : updatedIndex;\\r\\n    currentChildIndex = child ? updatedIndex : currentChildIndex;\\r\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) private {\\r\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\r\\n\\r\\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\r\\n      getApproved(tokenId) == _msgSender() ||\\r\\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\\r\\n\\r\\n    require(\\r\\n      isApprovedOrOwner,\\r\\n      \\\"ERC721A: transfer caller is not owner nor approved\\\"\\r\\n    );\\r\\n\\r\\n    require(\\r\\n      prevOwnership.addr == from,\\r\\n      \\\"ERC721A: transfer from incorrect owner\\\"\\r\\n    );\\r\\n    require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfers(from, to, tokenId, 1, \\\"\\\");\\r\\n\\r\\n    // Clear approvals from the previous owner\\r\\n    _approve(address(0), tokenId, prevOwnership.addr);\\r\\n\\r\\n    _addressData[from].balance -= 1;\\r\\n    _addressData[to].balance += 1;\\r\\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n    uint256 nextTokenId = tokenId + 1;\\r\\n    if (_ownerships[nextTokenId].addr == address(0)) {\\r\\n      if (_exists(nextTokenId)) {\\r\\n        _ownerships[nextTokenId] = TokenOwnership(\\r\\n          prevOwnership.addr,\\r\\n          prevOwnership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, to, tokenId);\\r\\n    _afterTokenTransfers(from, to, tokenId, 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve `to` to operate on `tokenId`\\r\\n   *\\r\\n   * Emits a {Approval} event.\\r\\n   */\\r\\n  function _approve(\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    address owner\\r\\n  ) private {\\r\\n    _tokenApprovals[tokenId] = to;\\r\\n    emit Approval(owner, to, tokenId);\\r\\n  }\\r\\n\\r\\n  uint256 public nextOwnerToExplicitlySet = 0;\\r\\n\\r\\n  /**\\r\\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\r\\n   */\\r\\n  function _setOwnersExplicit(uint256 quantity) internal {\\r\\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\r\\n    require(quantity > 0, \\\"quantity must be nonzero\\\");\\r\\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\r\\n    if (endIndex > currentIndex - 1) {\\r\\n      endIndex = currentIndex - 1;\\r\\n    }\\r\\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\r\\n    require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\r\\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\r\\n      if (_ownerships[i].addr == address(0)) {\\r\\n        TokenOwnership memory ownership = ownershipOf(i);\\r\\n        _ownerships[i] = TokenOwnership(\\r\\n          ownership.addr,\\r\\n          ownership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n    nextOwnerToExplicitlySet = endIndex + 1;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n   * The call is not executed if the target address is not a contract.\\r\\n   *\\r\\n   * @param from address representing the previous owner of the given token ID\\r\\n   * @param to target address that will receive the tokens\\r\\n   * @param tokenId uint256 ID of the token to be transferred\\r\\n   * @param _data bytes optional data to send along with the call\\r\\n   * @return bool whether the call correctly returned the expected magic value\\r\\n   */\\r\\n  function _checkOnERC721Received(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) private returns (bool) {\\r\\n    if (to.isContract()) {\\r\\n      try\\r\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\r\\n      returns (bytes4 retval) {\\r\\n        return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n      } catch (bytes memory reason) {\\r\\n        if (reason.length == 0) {\\r\\n          revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\r\\n        } else {\\r\\n          assembly {\\r\\n            revert(add(32, reason), mload(reason))\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n   * transferred to `to`.\\r\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n   */\\r\\n  function _beforeTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity,\\r\\n    bytes memory data\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n   * minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   */\\r\\n  function _afterTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_generalMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_devMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"genesisCap\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUSED_CAP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENISIS_CAP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ENABLE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ENABLE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitTypeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traitType\",\"type\":\"string\"}],\"internalType\":\"struct Nodes.Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"}],\"name\":\"addTraitType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"int8[9]\",\"name\":\"phenotype\",\"type\":\"int8[9]\"},{\"internalType\":\"uint256\",\"name\":\"tokenCostPreference\",\"type\":\"uint256\"}],\"name\":\"fuse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generalMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenSize\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintNodes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintNodesTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payTheDevs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_animationUrl\",\"type\":\"string\"}],\"name\":\"setAnimationUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_c\",\"type\":\"string\"}],\"name\":\"setC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_b64Gzip\",\"type\":\"string\"}],\"name\":\"setGzipSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"}],\"name\":\"setImageUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageUrlExtension\",\"type\":\"string\"}],\"name\":\"setImageUrlExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_generalMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_devMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkelRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_meta\",\"type\":\"string\"}],\"name\":\"setMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pakoUrl\",\"type\":\"string\"}],\"name\":\"setPakoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pakoIntegrity\",\"type\":\"string\"}],\"name\":\"setPakoIntegrity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"xInPixels\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"yInPixels\",\"type\":\"uint16\"}],\"name\":\"setSizeForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_p5Url\",\"type\":\"string\"}],\"name\":\"setp5Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_p5Integrity\",\"type\":\"string\"}],\"name\":\"setp5Integrity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMints\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenHTML\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChildSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGenesisSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Nodes", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "3e968949270a223de87fff5fae90c6b8a3597d92f2e8dc43eb1be8c20294cc0ee1c7ba2af1fe9f0c396266ec87232215190bb8eaf5a8b46328fa04854c9e5e8b0000000000000000000000000000000000000000000000000000000000000400", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}