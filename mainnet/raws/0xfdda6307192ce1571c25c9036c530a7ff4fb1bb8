{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/core/Raid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport {IConfetti} from \\\"../interfaces/IConfetti.sol\\\";\\r\\nimport {IParty} from \\\"../interfaces/IParty.sol\\\";\\r\\nimport {IRaid} from \\\"../interfaces/IRaid.sol\\\";\\r\\nimport {ISeeder} from \\\"../interfaces/ISeeder.sol\\\";\\r\\n\\r\\n/// @title RaidParty Raid Contract\\r\\n/// @author Hasan Gondal <hasan@afraidlabs.com>\\r\\n\\r\\n/**\\r\\n *   ___      _    _ ___          _\\r\\n *  | _ \\\\__ _(_)__| | _ \\\\__ _ _ _| |_ _  _\\r\\n *  |   / _` | / _` |  _/ _` | '_|  _| || |\\r\\n *  |_|_\\\\__,_|_\\\\__,_|_| \\\\__,_|_|  \\\\__|\\\\_, |\\r\\n *                                    |__/\\r\\n */\\r\\n\\r\\n/// @notice Raid is currently halted.\\r\\nerror RaidHalted();\\r\\n\\r\\n/// @notice Raid has started yet.\\r\\nerror RaidStarted();\\r\\n\\r\\n/// @notice Raid has not started yet.\\r\\nerror RaidNotStarted();\\r\\n\\r\\n/// @notice Raid has not been seeded.\\r\\nerror RaidNotSeeded();\\r\\n\\r\\n/// @notice Bosses have not yet been created.\\r\\nerror MissingBosses();\\r\\n\\r\\n/// @notice User's local state is invalid, requires them to run `fixInternalState(address user)`.\\r\\nerror InvalidState();\\r\\n\\r\\n/// @notice The weightTotal should always be above zero when the raid is live.\\r\\nerror InvalidWeightTotal();\\r\\n\\r\\n/// @notice Invalid boss selected, required `bossId` to be less than `amount`.\\r\\n/// @param bossId selected bossId.\\r\\n/// @param amount current amount of bosses.\\r\\nerror InvalidBoss(uint32 bossId, uint32 amount);\\r\\n\\r\\n/// @notice Invalid caller on current function, requires `expected` caller but current caller is `caller`.\\r\\n/// @param caller current caller\\r\\n/// @param expected expected caller\\r\\nerror InvalidCaller(address caller, address expected);\\r\\n\\r\\n/// @notice Snapshot is being taken too recently, `currentTime` is before `earliestTime`.\\r\\n/// @param currentTime current timestamp.\\r\\n/// @param earliestTime next available snapshot time.\\r\\nerror SnapshotTooRecent(uint64 currentTime, uint64 earliestTime);\\r\\n\\r\\ncontract Raid is IRaid, Initializable, AccessControlUpgradeable {\\r\\n    bool public started;\\r\\n    bool public halted;\\r\\n    bool public bossesCreated;\\r\\n\\r\\n    uint32 private roundId;\\r\\n    uint32 public weightTotal;\\r\\n    uint64 public lastSnapshotTime;\\r\\n    /// @dev DEPRECATED BUT DO NOT REMOVE, THIS WILL BREAK STORAGE;\\r\\n    uint64 private constant PRECISION = 1e18;\\r\\n\\r\\n    uint256 public seed;\\r\\n    uint256 public seedId;\\r\\n\\r\\n    IParty public party;\\r\\n    ISeeder public seeder;\\r\\n    IConfetti public confetti;\\r\\n\\r\\n    Boss[] public bosses;\\r\\n    Snapshot[] public snapshots;\\r\\n\\r\\n    mapping(uint32 => Round) public rounds;\\r\\n    mapping(address => Raider) public raiders;\\r\\n\\r\\n    event HaltUpdated(bool isHalted);\\r\\n\\r\\n    modifier notHalted() {\\r\\n        if (halted) revert RaidHalted();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier raidActive() {\\r\\n        if (!started) revert RaidNotStarted();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier partyCaller() {\\r\\n        address partyAddress = address(party);\\r\\n        if (msg.sender != partyAddress)\\r\\n            revert InvalidCaller({caller: msg.sender, expected: partyAddress});\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address admin,\\r\\n        IParty _party,\\r\\n        ISeeder _seeder,\\r\\n        IConfetti _confetti\\r\\n    ) external initializer {\\r\\n        __AccessControl_init();\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n\\r\\n        party = _party;\\r\\n        seeder = _seeder;\\r\\n        confetti = _confetti;\\r\\n    }\\r\\n\\r\\n    function setParty(IParty _party) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        party = _party;\\r\\n    }\\r\\n\\r\\n    function setSeeder(ISeeder _seeder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        seeder = _seeder;\\r\\n    }\\r\\n\\r\\n    function setHalted(bool _halted) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        halted = _halted;\\r\\n\\r\\n        emit HaltUpdated(_halted);\\r\\n    }\\r\\n\\r\\n    function updateSeed() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        if (started) {\\r\\n            _syncRounds(uint32(block.number));\\r\\n        }\\r\\n\\r\\n        seed = seeder.getSeedSafe(address(this), seedId);\\r\\n    }\\r\\n\\r\\n    function requestSeed() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        seedId += 1;\\r\\n        seeder.requestSeed(seedId);\\r\\n    }\\r\\n\\r\\n    function createBosses(Boss[] calldata _bosses)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        delete bosses;\\r\\n        delete weightTotal;\\r\\n\\r\\n        for (uint256 i; i < _bosses.length; i++) {\\r\\n            Boss calldata boss = _bosses[i];\\r\\n            weightTotal += boss.weight;\\r\\n            bosses.push(boss);\\r\\n        }\\r\\n\\r\\n        bossesCreated = true;\\r\\n    }\\r\\n\\r\\n    function updateBoss(uint32 id, Boss calldata boss)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        if (!(bosses.length > id)) {\\r\\n            revert InvalidBoss({bossId: id, amount: uint32(bosses.length)});\\r\\n        }\\r\\n\\r\\n        if (started) {\\r\\n            _syncRounds(uint32(block.number));\\r\\n        }\\r\\n\\r\\n        weightTotal -= bosses[id].weight;\\r\\n        weightTotal += boss.weight;\\r\\n        bosses[id] = boss;\\r\\n\\r\\n        if (weightTotal == 0) revert InvalidWeightTotal();\\r\\n    }\\r\\n\\r\\n    function appendBoss(Boss calldata boss)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        if (started) {\\r\\n            _syncRounds(uint32(block.number));\\r\\n        }\\r\\n\\r\\n        weightTotal += boss.weight;\\r\\n        bosses.push(boss);\\r\\n    }\\r\\n\\r\\n    function manualSync() external {\\r\\n        _syncRounds(uint32(block.number));\\r\\n    }\\r\\n\\r\\n    function start() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        if (started) revert RaidStarted();\\r\\n        if (!bossesCreated) revert MissingBosses();\\r\\n        if (weightTotal == 0) revert InvalidWeightTotal();\\r\\n        if (seedId == 0) revert RaidNotSeeded();\\r\\n\\r\\n        seed = seeder.getSeedSafe(address(this), seedId);\\r\\n        rounds[roundId] = _rollRound(seed, uint32(block.number));\\r\\n\\r\\n        started = true;\\r\\n        lastSnapshotTime = uint64(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function commitSnapshot() external raidActive {\\r\\n        if (lastSnapshotTime + 23 hours > block.timestamp) {\\r\\n            revert SnapshotTooRecent({\\r\\n                currentTime: uint64(block.timestamp),\\r\\n                earliestTime: lastSnapshotTime + 23 hours\\r\\n            });\\r\\n        }\\r\\n\\r\\n        _syncRounds(uint32(block.number));\\r\\n\\r\\n        Snapshot memory snapshot = _createSnapshot();\\r\\n        snapshots.push(snapshot);\\r\\n\\r\\n        lastSnapshotTime = uint64(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function getRaidData() external view returns (RaidData memory data) {\\r\\n        uint256 _seed = seed;\\r\\n        uint32 _roundId = roundId;\\r\\n        Round memory round = rounds[_roundId];\\r\\n        while (block.number > round.finalBlock) {\\r\\n            _roundId += 1;\\r\\n            _seed = _rollSeed(_seed);\\r\\n            round = _rollRound(_seed, round.finalBlock + 1);\\r\\n        }\\r\\n\\r\\n        data.boss = round.boss;\\r\\n        data.roundId = _roundId;\\r\\n        data.health = uint32(round.finalBlock - block.number);\\r\\n        data.maxHealth = bosses[round.boss].blockHealth;\\r\\n        data.seed = _seed;\\r\\n    }\\r\\n\\r\\n    function getPendingRewards(address user) external view returns (uint256) {\\r\\n        Raider memory raider = raiders[user];\\r\\n        (, uint256 rewards) = _fetchRewards(raider);\\r\\n        return rewards + raider.pendingRewards;\\r\\n    }\\r\\n\\r\\n    function updateDamage(address user, uint32 _dpb)\\r\\n        external\\r\\n        notHalted\\r\\n        raidActive\\r\\n        partyCaller\\r\\n    {\\r\\n        Raider storage raider = raiders[user];\\r\\n        uint32 blockNumber = uint32(block.number);\\r\\n\\r\\n        if (raider.startedAt > 0) {\\r\\n            (uint32 _roundId, uint256 rewards) = _fetchRewards(raider);\\r\\n            raider.startRound = _roundId;\\r\\n            raider.pendingRewards += rewards;\\r\\n        } else {\\r\\n            raider.startedAt = blockNumber;\\r\\n            raider.startRound = _lazyFetchRoundId();\\r\\n        }\\r\\n\\r\\n        raider.dpb = _dpb;\\r\\n        raider.startBlock = blockNumber;\\r\\n        raider.startSnapshot = uint32(snapshots.length + 1);\\r\\n    }\\r\\n\\r\\n    function claimRewards(address user) external notHalted {\\r\\n        Raider storage raider = raiders[user];\\r\\n\\r\\n        (uint32 _roundId, uint256 rewards) = _fetchRewards(raider);\\r\\n        rewards += raider.pendingRewards;\\r\\n\\r\\n        raider.startRound = _roundId;\\r\\n        raider.pendingRewards = 0;\\r\\n        raider.startBlock = uint32(block.number);\\r\\n        raider.startSnapshot = uint32(snapshots.length + 1);\\r\\n\\r\\n        if (rewards > 0) {\\r\\n            confetti.mint(user, rewards);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function fixInternalState(address user) external {\\r\\n        uint32 _roundId = roundId;\\r\\n        uint256 _seed = seed;\\r\\n        Round memory round = rounds[_roundId];\\r\\n        Raider storage raider = raiders[user];\\r\\n\\r\\n        unchecked {\\r\\n            if (raider.startBlock > round.finalBlock) {\\r\\n                while (raider.startBlock > round.finalBlock) {\\r\\n                    _roundId += 1;\\r\\n                    _seed = _rollSeed(_seed);\\r\\n                    round = _rollRound(_seed, round.finalBlock + 1);\\r\\n                }\\r\\n            } else if (raider.startBlock < round.startBlock) {\\r\\n                while (raider.startBlock < round.startBlock) {\\r\\n                    _roundId -= 1;\\r\\n                    round = rounds[_roundId];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        raider.startRound = _roundId;\\r\\n    }\\r\\n\\r\\n    /** Internal */\\r\\n\\r\\n    function _rollSeed(uint256 oldSeed) internal pure returns (uint256 rolled) {\\r\\n        assembly {\\r\\n            mstore(0x00, oldSeed)\\r\\n            rolled := keccak256(0x00, 0x20)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _rollRound(uint256 _seed, uint32 startBlock)\\r\\n        internal\\r\\n        view\\r\\n        returns (Round memory round)\\r\\n    {\\r\\n        unchecked {\\r\\n            uint32 roll = uint32(_seed % weightTotal);\\r\\n            uint256 weight = 0;\\r\\n            uint32 _bossWeight;\\r\\n\\r\\n            for (uint16 bossId; bossId < bosses.length; bossId++) {\\r\\n                _bossWeight = bosses[bossId].weight;\\r\\n\\r\\n                if (roll <= weight + _bossWeight) {\\r\\n                    round.boss = bossId;\\r\\n                    round.roll = roll;\\r\\n                    round.startBlock = startBlock;\\r\\n                    round.finalBlock = startBlock + bosses[bossId].blockHealth;\\r\\n\\r\\n                    return round;\\r\\n                }\\r\\n\\r\\n                weight += _bossWeight;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _syncRounds(uint32 maxBlock) internal {\\r\\n        unchecked {\\r\\n            Round memory round = rounds[roundId];\\r\\n\\r\\n            while (maxBlock > round.finalBlock) {\\r\\n                roundId += 1;\\r\\n                seed = _rollSeed(seed);\\r\\n                round = _rollRound(seed, round.finalBlock + 1);\\r\\n                rounds[roundId] = round;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _createSnapshot()\\r\\n        internal\\r\\n        view\\r\\n        returns (Snapshot memory snapshot)\\r\\n    {\\r\\n        uint32 _roundId;\\r\\n\\r\\n        if (snapshots.length > 0) {\\r\\n            _roundId = snapshots[snapshots.length - 1].finalRound + 1;\\r\\n        }\\r\\n\\r\\n        snapshot.initialRound = _roundId;\\r\\n        snapshot.initialBlock = rounds[_roundId].startBlock;\\r\\n\\r\\n        while (_roundId < roundId) {\\r\\n            Round memory round = rounds[_roundId];\\r\\n            Boss memory boss = bosses[round.boss];\\r\\n\\r\\n            snapshot.attackDealt +=\\r\\n                uint256(boss.blockHealth) *\\r\\n                uint256(boss.multiplier);\\r\\n\\r\\n            _roundId += 1;\\r\\n        }\\r\\n\\r\\n        snapshot.finalRound = _roundId - 1;\\r\\n        snapshot.finalBlock = rounds[_roundId - 1].finalBlock;\\r\\n    }\\r\\n\\r\\n    function _fetchRewards(Raider memory raider)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint32 _roundId, uint256 rewards)\\r\\n    {\\r\\n        if (raider.dpb > 0) {\\r\\n            if (snapshots.length > raider.startSnapshot) {\\r\\n                (_roundId, rewards) = _fetchNewRewardsWithSnapshot(raider);\\r\\n                return (_roundId, rewards);\\r\\n            } else {\\r\\n                (_roundId, rewards) = _fetchNewRewards(raider);\\r\\n                return (_roundId, rewards);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (_lazyFetchRoundId(), 0);\\r\\n    }\\r\\n\\r\\n    function _fetchNewRewards(Raider memory raider)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint32 _roundId, uint256 rewards)\\r\\n    {\\r\\n        unchecked {\\r\\n            Boss memory boss;\\r\\n            Round memory round;\\r\\n\\r\\n            uint256 _seed = seed;\\r\\n\\r\\n            if (raider.startRound <= roundId) {\\r\\n                _roundId = raider.startRound;\\r\\n                for (_roundId; _roundId <= roundId; _roundId++) {\\r\\n                    round = rounds[_roundId];\\r\\n                    boss = bosses[round.boss];\\r\\n                    rewards += _rewardCalculation(\\r\\n                        raider,\\r\\n                        round,\\r\\n                        boss.multiplier\\r\\n                    );\\r\\n                }\\r\\n                _roundId -= 1;\\r\\n            } else {\\r\\n                _roundId = roundId;\\r\\n                round = rounds[_roundId];\\r\\n            }\\r\\n\\r\\n            while (block.number > round.finalBlock) {\\r\\n                _roundId += 1;\\r\\n                _seed = _rollSeed(_seed);\\r\\n                round = _rollRound(_seed, round.finalBlock + 1);\\r\\n                boss = bosses[round.boss];\\r\\n\\r\\n                if (_roundId >= raider.startRound) {\\r\\n                    rewards += _rewardCalculation(\\r\\n                        raider,\\r\\n                        round,\\r\\n                        boss.multiplier\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _fetchNewRewardsWithSnapshot(Raider memory raider)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint32 _roundId, uint256 rewards)\\r\\n    {\\r\\n        unchecked {\\r\\n            Boss memory boss;\\r\\n            Round memory round;\\r\\n\\r\\n            _roundId = raider.startRound;\\r\\n            uint256 _snapshotId = raider.startSnapshot;\\r\\n            uint32 _lastRound = snapshots[_snapshotId].initialRound;\\r\\n\\r\\n            for (_roundId; _roundId < _lastRound; _roundId++) {\\r\\n                round = rounds[_roundId];\\r\\n                boss = bosses[round.boss];\\r\\n                rewards += _rewardCalculation(raider, round, boss.multiplier);\\r\\n            }\\r\\n\\r\\n            for (_snapshotId; _snapshotId < snapshots.length; _snapshotId++) {\\r\\n                rewards += snapshots[_snapshotId].attackDealt * raider.dpb;\\r\\n                _roundId = snapshots[_snapshotId].finalRound;\\r\\n            }\\r\\n\\r\\n            round = rounds[_roundId];\\r\\n\\r\\n            while (_roundId < roundId) {\\r\\n                _roundId += 1;\\r\\n                round = rounds[_roundId];\\r\\n                boss = bosses[round.boss];\\r\\n                rewards += _rewardCalculation(raider, round, boss.multiplier);\\r\\n            }\\r\\n\\r\\n            uint256 _seed = seed;\\r\\n            while (block.number > round.finalBlock) {\\r\\n                _roundId += 1;\\r\\n                _seed = _rollSeed(_seed);\\r\\n                round = _rollRound(_seed, round.finalBlock + 1);\\r\\n                boss = bosses[round.boss];\\r\\n                rewards += _rewardCalculation(raider, round, boss.multiplier);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _lazyFetchRoundId() internal view returns (uint32 _roundId) {\\r\\n        unchecked {\\r\\n            _roundId = roundId;\\r\\n            Round memory round = rounds[_roundId];\\r\\n            uint256 _seed = seed;\\r\\n            while (block.number > round.finalBlock) {\\r\\n                _roundId += 1;\\r\\n                _seed = _rollSeed(_seed);\\r\\n                round = _rollRound(_seed, round.finalBlock + 1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _rewardCalculation(\\r\\n        Raider memory raider,\\r\\n        Round memory round,\\r\\n        uint256 bossMultiplier\\r\\n    ) internal view returns (uint256 reward) {\\r\\n        if (raider.startBlock > round.finalBlock) revert InvalidState();\\r\\n\\r\\n        unchecked {\\r\\n            uint256 blocksDefeated;\\r\\n\\r\\n            if (\\r\\n                round.startBlock >= raider.startBlock &&\\r\\n                block.number >= round.finalBlock\\r\\n            ) {\\r\\n                blocksDefeated = round.finalBlock - round.startBlock;\\r\\n            } else if (\\r\\n                raider.startBlock > round.startBlock &&\\r\\n                block.number >= round.finalBlock\\r\\n            ) {\\r\\n                blocksDefeated = round.finalBlock - raider.startBlock;\\r\\n            } else if (\\r\\n                round.finalBlock > raider.startBlock &&\\r\\n                round.startBlock >= raider.startBlock\\r\\n            ) {\\r\\n                blocksDefeated = block.number - round.startBlock;\\r\\n            } else if (\\r\\n                raider.startBlock > round.startBlock &&\\r\\n                round.finalBlock > block.number\\r\\n            ) {\\r\\n                blocksDefeated = block.number - raider.startBlock;\\r\\n            }\\r\\n\\r\\n            // Inline Assembly replaces the following code\\r\\n            // reward =\\r\\n            //     (1e18 *\\r\\n            //         uint256(blocksDefeated) *\\r\\n            //         uint256(bossMultiplier) *\\r\\n            //         uint256(raider.dpb)) /\\r\\n            //     PRECISION;\\r\\n\\r\\n            assembly {\\r\\n                reward := div(\\r\\n                    mul(\\r\\n                        mul(\\r\\n                            mul(1000000000000000000, blocksDefeated),\\r\\n                            bossMultiplier\\r\\n                        ),\\r\\n                        and(\\r\\n                            mload(raider),\\r\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\r\\n                        )\\r\\n                    ),\\r\\n                    1000000000000000000\\r\\n                )\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     * @custom:oz-retyped-from bool\\r\\n     */\\r\\n    uint8 private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint8 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        bool isTopLevelCall = _setInitializedVersion(1);\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\r\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\r\\n     * initialization.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     */\\r\\n    modifier reinitializer(uint8 version) {\\r\\n        bool isTopLevelCall = _setInitializedVersion(version);\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n            emit Initialized(version);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        _setInitializedVersion(type(uint8).max);\\r\\n    }\\r\\n\\r\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\r\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\r\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\r\\n        // of initializers, because in other contexts the contract may have been reentered.\\r\\n        if (_initializing) {\\r\\n            require(\\r\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\r\\n                \\\"Initializable: contract is already initialized\\\"\\r\\n            );\\r\\n            return false;\\r\\n        } else {\\r\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\r\\n            _initialized = version;\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\r\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\r\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\r\\n    function __AccessControl_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    struct RoleData {\\r\\n        mapping(address => bool) members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\r\\n     * with a standardized message including the required role.\\r\\n     *\\r\\n     * The format of the revert reason is given by the following regular expression:\\r\\n     *\\r\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n     *\\r\\n     * _Available since v4.1._\\r\\n     */\\r\\n    modifier onlyRole(bytes32 role) {\\r\\n        _checkRole(role);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\r\\n        return _roles[role].members[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\r\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\r\\n     *\\r\\n     * Format of the revert message is described in {_checkRole}.\\r\\n     *\\r\\n     * _Available since v4.6._\\r\\n     */\\r\\n    function _checkRole(bytes32 role) internal view virtual {\\r\\n        _checkRole(role, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with a standard message if `account` is missing `role`.\\r\\n     *\\r\\n     * The format of the revert reason is given by the following regular expression:\\r\\n     *\\r\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n     */\\r\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\r\\n        if (!hasRole(role, account)) {\\r\\n            revert(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"AccessControl: account \\\",\\r\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\r\\n                        \\\" is missing role \\\",\\r\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual override {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     *\\r\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _grantRole(bytes32 role, address account) internal virtual {\\r\\n        if (!hasRole(role, account)) {\\r\\n            _roles[role].members[account] = true;\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\r\\n        if (hasRole(role, account)) {\\r\\n            _roles[role].members[account] = false;\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/interfaces/IConfetti.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IConfetti is IERC20 {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/interfaces/IParty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../lib/Stats.sol\\\";\\r\\n\\r\\ninterface IParty {\\r\\n    event Equipped(address indexed user, uint8 item, uint8 slot, uint256 id);\\r\\n\\r\\n    event Unequipped(address indexed user, uint8 item, uint8 slot, uint256 id);\\r\\n\\r\\n    event DamageUpdated(address indexed user, uint32 damageCurr);\\r\\n\\r\\n    struct PartyData {\\r\\n        uint256 hero;\\r\\n        mapping(uint256 => uint256) fighters;\\r\\n    }\\r\\n\\r\\n    struct Action {\\r\\n        ActionType action;\\r\\n        uint256 id;\\r\\n        uint8 slot;\\r\\n    }\\r\\n\\r\\n    enum Property {\\r\\n        HERO,\\r\\n        FIGHTER\\r\\n    }\\r\\n\\r\\n    enum ActionType {\\r\\n        UNEQUIP,\\r\\n        EQUIP\\r\\n    }\\r\\n\\r\\n    function act(\\r\\n        Action[] calldata heroActions,\\r\\n        Action[] calldata fighterActions\\r\\n    ) external;\\r\\n\\r\\n    function equip(\\r\\n        Property item,\\r\\n        uint256 id,\\r\\n        uint8 slot\\r\\n    ) external;\\r\\n\\r\\n    function unequip(Property item, uint8 slot) external;\\r\\n\\r\\n    function enhance(\\r\\n        Property item,\\r\\n        uint8 slot,\\r\\n        uint256 burnTokenId\\r\\n    ) external;\\r\\n\\r\\n    function getUserHero(address user) external view returns (uint256);\\r\\n\\r\\n    function getUserFighters(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function getDamage(address user) external view returns (uint32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/interfaces/IRaid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRaid {\\r\\n    struct Round {\\r\\n        uint16 boss;\\r\\n        uint32 roll;\\r\\n        uint32 startBlock;\\r\\n        uint32 finalBlock;\\r\\n    }\\r\\n\\r\\n    struct Raider {\\r\\n        uint32 dpb;\\r\\n        uint32 startedAt;\\r\\n        uint32 startBlock;\\r\\n        uint32 startRound;\\r\\n        uint32 startSnapshot;\\r\\n        uint256 pendingRewards;\\r\\n    }\\r\\n\\r\\n    struct Boss {\\r\\n        uint32 weight;\\r\\n        uint32 blockHealth;\\r\\n        uint128 multiplier;\\r\\n    }\\r\\n\\r\\n    struct Snapshot {\\r\\n        uint32 initialBlock;\\r\\n        uint32 initialRound;\\r\\n        uint32 finalBlock;\\r\\n        uint32 finalRound;\\r\\n        uint256 attackDealt;\\r\\n    }\\r\\n\\r\\n    struct RaidData {\\r\\n        uint16 boss;\\r\\n        uint32 roundId;\\r\\n        uint32 health;\\r\\n        uint32 maxHealth;\\r\\n        uint256 seed;\\r\\n    }\\r\\n\\r\\n    function updateDamage(address user, uint32 _dpb) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/interfaces/ISeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../lib/Randomness.sol\\\";\\r\\n\\r\\ninterface ISeeder {\\r\\n    event Requested(address indexed origin, uint256 indexed identifier);\\r\\n\\r\\n    event Seeded(bytes32 identifier, uint256 randomness);\\r\\n\\r\\n    function getIdReferenceCount(\\r\\n        bytes32 randomnessId,\\r\\n        address origin,\\r\\n        uint256 startIdx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getIdentifiers(\\r\\n        bytes32 randomnessId,\\r\\n        address origin,\\r\\n        uint256 startIdx,\\r\\n        uint256 count\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function requestSeed(uint256 identifier) external;\\r\\n\\r\\n    function getSeed(address origin, uint256 identifier)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getSeedSafe(address origin, uint256 identifier)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function executeRequestMulti() external;\\r\\n\\r\\n    function isSeeded(address origin, uint256 identifier)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function setFee(uint256 fee) external;\\r\\n\\r\\n    function getFee() external view returns (uint256);\\r\\n\\r\\n    function getData(address origin, uint256 identifier)\\r\\n        external\\r\\n        view\\r\\n        returns (Randomness.SeedData memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControlUpgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {AccessControl-_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n    function __Context_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary StringsUpgradeable {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp >>= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165Upgradeable.sol\\\";\\r\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\r\\n    function __ERC165_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __ERC165_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/lib/Stats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Stats {\\r\\n    struct HeroStats {\\r\\n        uint8 dmgMultiplier;\\r\\n        uint8 partySize;\\r\\n        uint8 enhancement;\\r\\n    }\\r\\n\\r\\n    struct FighterStats {\\r\\n        uint32 dmg;\\r\\n        uint8 enhancement;\\r\\n    }\\r\\n\\r\\n    struct EquipmentStats {\\r\\n        uint32 dmg;\\r\\n        uint8 dmgMultiplier;\\r\\n        uint8 slot;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/lib/Randomness.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Randomness {\\r\\n    struct SeedData {\\r\\n        uint256 batch;\\r\\n        bytes32 randomnessId;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/=lib/chainlink/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"chainlink/=lib\\\\chainlink/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib\\\\openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib\\\\openzeppelin-contracts/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bossId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"InvalidBoss\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWeightTotal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingBosses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaidHalted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaidNotSeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaidNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaidStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"currentTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"earliestTime\",\"type\":\"uint64\"}],\"name\":\"SnapshotTooRecent\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isHalted\",\"type\":\"bool\"}],\"name\":\"HaltUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockHealth\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"multiplier\",\"type\":\"uint128\"}],\"internalType\":\"struct IRaid.Boss\",\"name\":\"boss\",\"type\":\"tuple\"}],\"name\":\"appendBoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bosses\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockHealth\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"multiplier\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bossesCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confetti\",\"outputs\":[{\"internalType\":\"contract IConfetti\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockHealth\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"multiplier\",\"type\":\"uint128\"}],\"internalType\":\"struct IRaid.Boss[]\",\"name\":\"_bosses\",\"type\":\"tuple[]\"}],\"name\":\"createBosses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"fixInternalState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaidData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"boss\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"roundId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"health\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxHealth\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"internalType\":\"struct IRaid.RaidData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract IParty\",\"name\":\"_party\",\"type\":\"address\"},{\"internalType\":\"contract ISeeder\",\"name\":\"_seeder\",\"type\":\"address\"},{\"internalType\":\"contract IConfetti\",\"name\":\"_confetti\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSnapshotTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"party\",\"outputs\":[{\"internalType\":\"contract IParty\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"raiders\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"dpb\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startRound\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startSnapshot\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"boss\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"roll\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalBlock\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seeder\",\"outputs\":[{\"internalType\":\"contract ISeeder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_halted\",\"type\":\"bool\"}],\"name\":\"setHalted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IParty\",\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"setParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISeeder\",\"name\":\"_seeder\",\"type\":\"address\"}],\"name\":\"setSeeder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snapshots\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"initialBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initialRound\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalRound\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"attackDealt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockHealth\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"multiplier\",\"type\":\"uint128\"}],\"internalType\":\"struct IRaid.Boss\",\"name\":\"boss\",\"type\":\"tuple\"}],\"name\":\"updateBoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dpb\",\"type\":\"uint32\"}],\"name\":\"updateDamage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightTotal\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Raid", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}