{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n  /**\r\n   * @dev Returns true if this contract implements the interface defined by\r\n   * `interfaceId`. See the corresponding\r\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n   * to learn more about how these ids are created.\r\n   *\r\n   * This function call must use less than 30 000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n  /**\r\n   * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n   * by `operator` from `from`, this function is called.\r\n   *\r\n   * It must return its Solidity selector to confirm the token transfer.\r\n   * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n   *\r\n   * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n   */\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n  /**\r\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n   */\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n   */\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n   */\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  /**\r\n   * @dev Returns the number of tokens in ``owner``'s account.\r\n   */\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  /**\r\n   * @dev Returns the owner of the `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Transfers `tokenId` token from `from` to `to`.\r\n   *\r\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n   * The approval is cleared when the token is transferred.\r\n   *\r\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The caller must own the token or be an approved operator.\r\n   * - `tokenId` must exist.\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address to, uint256 tokenId) external;\r\n\r\n  /**\r\n   * @dev Returns the account approved for `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function getApproved(uint256 tokenId)\r\n    external\r\n    view\r\n    returns (address operator);\r\n\r\n  /**\r\n   * @dev Approve or remove `operator` as an operator for the caller.\r\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The `operator` cannot be the caller.\r\n   *\r\n   * Emits an {ApprovalForAll} event.\r\n   */\r\n  function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n  /**\r\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n   *\r\n   * See {setApprovalForAll}\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n  /**\r\n   * @dev Returns the token collection name.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the token collection symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n   */\r\n  function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return interfaceId == type(IERC165).interfaceId;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n  bytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n   */\r\n  function toString(uint256 value) internal pure returns (string memory) {\r\n    // Inspired by OraclizeAPI's implementation - MIT licence\r\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n    if (value == 0) {\r\n      return '0';\r\n    }\r\n    uint256 temp = value;\r\n    uint256 digits;\r\n    while (temp != 0) {\r\n      digits++;\r\n      temp /= 10;\r\n    }\r\n    bytes memory buffer = new bytes(digits);\r\n    while (value != 0) {\r\n      digits -= 1;\r\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n      value /= 10;\r\n    }\r\n    return string(buffer);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n   */\r\n  function toHexString(uint256 value) internal pure returns (string memory) {\r\n    if (value == 0) {\r\n      return '0x00';\r\n    }\r\n    uint256 temp = value;\r\n    uint256 length = 0;\r\n    while (temp != 0) {\r\n      length++;\r\n      temp >>= 8;\r\n    }\r\n    return toHexString(value, length);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n   */\r\n  function toHexString(uint256 value, uint256 length)\r\n    internal\r\n    pure\r\n    returns (string memory)\r\n  {\r\n    bytes memory buffer = new bytes(2 * length + 2);\r\n    buffer[0] = '0';\r\n    buffer[1] = 'x';\r\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n      value >>= 4;\r\n    }\r\n    require(value == 0, 'Strings: ERROR');\r\n    return string(buffer);\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  string private constant ERR = 'Ownable: ERROR';\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    _transferOwnership(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), ERR);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _transferOwnership(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), ERR);\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize/address.code.length, which returns 0\r\n    // for contracts in construction, since the code is only stored at the end\r\n    // of the constructor execution.\r\n\r\n    return account.code.length > 0;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, Ownable, ERC165, IERC721, IERC721Metadata {\r\n  using Strings for uint256;\r\n  using Address for address;\r\n\r\n  string private constant ERR = 'ERC721: ERROR';\r\n\r\n  // Token name\r\n  string internal _name;\r\n\r\n  // Token symbol\r\n  string internal _symbol;\r\n\r\n  // Base URI\r\n  string private _baseURI;\r\n\r\n  // Current owner address index\r\n  uint256 _ownerCounter = 0;\r\n\r\n  // Mapping from token ID to 16 owner addresses\r\n  mapping(uint256 => uint256) private _owners;\r\n\r\n  // Mapping owner address to internal owner id + balances\r\n  mapping(address => uint256) private _extToIntMap;\r\n\r\n  // Mapping internal address to external address\r\n  mapping(uint256 => address) private _intToExtMap;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping(uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n  /**\r\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n   */\r\n  function _initialize(string memory name_, string memory symbol_) internal {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC165, IERC165)\r\n    returns (bool)\r\n  {\r\n    return\r\n      interfaceId == type(IERC721).interfaceId ||\r\n      interfaceId == type(IERC721Metadata).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-balanceOf}.\r\n   */\r\n  function balanceOf(address owner)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    require(owner != address(0), ERR);\r\n    return _extToIntMap[owner] >> 128;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-ownerOf}.\r\n   */\r\n  function ownerOf(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    uint256 internalOwner = _getInternalOwner(tokenId);\r\n    require(internalOwner != 0, ERR);\r\n    return _intToExtMap[internalOwner];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-name}.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-symbol}.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-tokenURI}.\r\n   */\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    require(_getInternalOwner(tokenId) != 0, ERR);\r\n\r\n    bytes memory bytesURI = bytes(_baseURI);\r\n    if (bytesURI.length == 0 || bytesURI[bytesURI.length - 1] == '/')\r\n      return string(abi.encodePacked(_baseURI, tokenId.toString(), '.json'));\r\n    else return _baseURI;\r\n  }\r\n\r\n  function setBaseURI(string memory newBaseURI) external onlyOwner {\r\n    _baseURI = newBaseURI;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-approve}.\r\n   */\r\n  function approve(address to, uint256 tokenId) public virtual override {\r\n    address owner = ERC721.ownerOf(tokenId);\r\n    require(to != owner, ERR);\r\n\r\n    require(\r\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n      ERR\r\n    );\r\n    _approve(to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-getApproved}.\r\n   */\r\n  function getApproved(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    require(_getInternalOwner(tokenId) != 0, ERR);\r\n\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-setApprovalForAll}.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved)\r\n    public\r\n    virtual\r\n    override\r\n  {\r\n    _setApprovalForAll(_msgSender(), operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-isApprovedForAll}.\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-transferFrom}.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public virtual override {\r\n    //solhint-disable-next-line max-line-length\r\n    require(_isApprovedOrOwner(_msgSender(), tokenId), ERR);\r\n\r\n    _transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public virtual override {\r\n    safeTransferFrom(from, to, tokenId, '');\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) public virtual override {\r\n    require(_isApprovedOrOwner(_msgSender(), tokenId), ERR);\r\n    _safeTransfer(from, to, tokenId, _data);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n   *\r\n   * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n   *\r\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _safeTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) internal virtual {\r\n    _transfer(from, to, tokenId);\r\n    require(_checkOnERC721Received(from, to, tokenId, _data), ERR);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n    internal\r\n    view\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    require(_getInternalOwner(tokenId) != 0, ERR);\r\n    address owner = ERC721.ownerOf(tokenId);\r\n    return (spender == owner ||\r\n      getApproved(tokenId) == spender ||\r\n      isApprovedForAll(owner, spender));\r\n  }\r\n\r\n  /**\r\n   * @dev Mints `tokenId` and transfers it to `to`.\r\n   *\r\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must not exist.\r\n   * - `to` cannot be the zero address.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _mint(\r\n    address to,\r\n    uint256 tokenId,\r\n    uint256 num\r\n  ) internal virtual {\r\n    require(to != address(0), ERR);\r\n\r\n    uint256 toInt = _getInternalOwnerFromAddress(to);\r\n    uint256 tokenIdEnd = tokenId + num;\r\n    uint256 curBase = tokenId >> 4;\r\n    uint256 mask = _owners[curBase];\r\n\r\n    for (; tokenId < tokenIdEnd; ++tokenId) {\r\n      // Update storage balance of previous bin\r\n      uint256 base = tokenId >> 4;\r\n      uint256 idBits = (tokenId & 0xF) << 4;\r\n      if (base != curBase) {\r\n        _owners[curBase] = mask;\r\n        curBase = base;\r\n        mask = _owners[curBase];\r\n      }\r\n      require(((mask >> idBits) & 0xFFFF) == 0, ERR);\r\n      mask |= (toInt << idBits);\r\n\r\n      emit Transfer(address(0), to, tokenId);\r\n    }\r\n    _owners[curBase] = mask;\r\n    _extToIntMap[to] += num << 128;\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `tokenId`.\r\n   * The approval is cleared when the token is burned.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _burn(uint256 tokenId) internal virtual {\r\n    // Clear approvals\r\n    _approve(address(0), tokenId);\r\n\r\n    uint256 intOwner = _getInternalOwner(tokenId);\r\n    require(intOwner != 0, ERR);\r\n    _setInternalOwner(tokenId, 0);\r\n\r\n    address owner = _intToExtMap[intOwner];\r\n    _extToIntMap[owner] -= 1 << 128;\r\n\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers `tokenId` from `from` to `to`.\r\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must be owned by `from`.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) internal virtual {\r\n    uint256 intOwner = _getInternalOwner(tokenId);\r\n    require(_intToExtMap[intOwner] == from, ERR);\r\n    require(to != address(0), ERR);\r\n\r\n    // Clear approvals from the previous owner\r\n    _approve(address(0), tokenId);\r\n\r\n    uint256 toInt = _getInternalOwnerFromAddress(to);\r\n    _setInternalOwner(tokenId, toInt);\r\n\r\n    _extToIntMap[from] -= 1 << 128;\r\n    _extToIntMap[to] += 1 << 128;\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n   * The call is not executed if the target address is not a contract.\r\n   *\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return bool whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) private returns (bool) {\r\n    if (to.isContract()) {\r\n      try\r\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n      returns (bytes4 retval) {\r\n        return retval == IERC721Receiver.onERC721Received.selector;\r\n      } catch (bytes memory reason) {\r\n        if (reason.length == 0) {\r\n          revert(ERR);\r\n        } else {\r\n          assembly {\r\n            revert(add(32, reason), mload(reason))\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Approve `to` to operate on `tokenId`\r\n   *\r\n   * Emits a {Approval} event.\r\n   */\r\n  function _approve(address to, uint256 tokenId) internal virtual {\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve `operator` to operate on all of `owner` tokens\r\n   *\r\n   * Emits a {ApprovalForAll} event.\r\n   */\r\n  function _setApprovalForAll(\r\n    address owner,\r\n    address operator,\r\n    bool approved\r\n  ) internal virtual {\r\n    require(owner != operator, ERR);\r\n    _operatorApprovals[owner][operator] = approved;\r\n    emit ApprovalForAll(owner, operator, approved);\r\n  }\r\n\r\n  function _getInternalOwner(uint256 tokenId) internal view returns (uint256) {\r\n    return (_owners[tokenId >> 4] >> ((tokenId & 0xF) << 4)) & 0xFFFF;\r\n  }\r\n\r\n  function _getInternalOwnerFromAddress(address externalOwner)\r\n    internal\r\n    returns (uint256)\r\n  {\r\n    uint256 intOwner = _extToIntMap[externalOwner];\r\n    if (intOwner == 0) {\r\n      require(_ownerCounter < 0xFFFF, ERR);\r\n      _extToIntMap[externalOwner] = intOwner = ++_ownerCounter;\r\n      _intToExtMap[intOwner] = externalOwner;\r\n    }\r\n    return uint256(uint128(intOwner));\r\n  }\r\n\r\n  function _setInternalOwner(uint256 tokenId, uint256 newOwner) internal {\r\n    uint256 mask = _owners[tokenId >> 4] & ~(0xFFFF << ((tokenId & 0xF) << 4));\r\n    _owners[tokenId >> 4] = mask | (newOwner << ((tokenId & 0xF) << 4));\r\n  }\r\n}\r\n\r\n/**\r\n * @dev OpenSea proxy registry to prevent gas spend for approvals\r\n */\r\ncontract ProxyRegistry {\r\n  mapping(address => address) public proxies;\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n  // Booleans are more expensive than uint256 or any type that takes up a full\r\n  // word because each write operation emits an extra SLOAD to first read the\r\n  // slot's contents, replace the bits taken up by the boolean, and then write\r\n  // back. This is the compiler's defense against contract upgrades and\r\n  // pointer aliasing, and it cannot be disabled.\r\n\r\n  // The values being non-zero value makes deployment a bit more expensive,\r\n  // but in exchange the refund on every call to nonReentrant will be lower in\r\n  // amount. Since refunds are capped to a percentage of the total\r\n  // transaction's gas, it is best to keep them low in cases like this one, to\r\n  // increase the likelihood of the full refund coming into effect.\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n\r\n  uint256 private _status;\r\n\r\n  constructor() {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and making it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    // On the first call to nonReentrant, _notEntered will be true\r\n    require(_status != _ENTERED, 'ReentrancyGuard: ERROR');\r\n\r\n    // Any calls to nonReentrant after this point will fail\r\n    _status = _ENTERED;\r\n\r\n    _;\r\n\r\n    // By storing the original value once again, a refund is triggered (see\r\n    // https://eips.ethereum.org/EIPS/eip-2200)\r\n    _status = _NOT_ENTERED;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Implementation of Opt ERC721 contract\r\n */\r\ncontract ERC721Opt is ERC721, ReentrancyGuard {\r\n  string private constant ERR = 'ERC721Opt: Error';\r\n\r\n  // OpenSea proxy registry\r\n  address private immutable _osProxyRegistryAddress;\r\n  // Address allowed to initialize contract\r\n  address private immutable _initializer;\r\n\r\n  // Max mints per transaction\r\n  uint256 private _maxTxMint;\r\n\r\n  // The CAP of mintable tokenIds\r\n  uint256 private _cap;\r\n\r\n  // The CAP of free mintable tokenIds\r\n  uint256 private _freeCap;\r\n\r\n  // ETH price of one tokenIds\r\n  uint256 private _tokenPrice;\r\n\r\n  // TokenId counter, 1 minted in ctor\r\n  uint256 private _currentTokenId;\r\n\r\n  // Advertise mints\r\n  uint256 private _advertised;\r\n\r\n  // Mint Running\r\n  uint256 public mintRunning;\r\n\r\n  // Whitelist minters\r\n  mapping(address=>uint256) private _wlMinted;\r\n\r\n  // Fired when funds are distributed\r\n  event Withdraw(address indexed receiver, uint256 amount);\r\n\r\n\r\n  // Whitelist address check\r\n  modifier onlyValidAddress(\r\n    uint256 _salt,\r\n    bytes32 _r,\r\n    bytes32 _s,\r\n    uint8 _v\r\n  ) {\r\n    bytes32 hash = keccak256(abi.encode(address(this), _salt, _msgSender()));\r\n    bytes32 message = keccak256(\r\n      abi.encodePacked('\\x19Ethereum Signed Message:\\n32', hash)\r\n    );\r\n    address sig = ecrecover(message, _v, _r, _s);\r\n\r\n    require(owner() == sig, ERR);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Initialization.\r\n   */\r\n  constructor(address initializer_, address osProxyRegistry_) {\r\n    _osProxyRegistryAddress = osProxyRegistry_;\r\n    _initializer = initializer_;\r\n  }\r\n\r\n  /**\r\n   * @dev Clone Initialization.\r\n   */\r\n  function initialize(\r\n    address owner_,\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint256 cap_,\r\n    uint256 freeCap_,\r\n    uint256 maxPerTx_,\r\n    uint256 price_\r\n  ) external {\r\n    require(_msgSender() == _initializer, ERR);\r\n\r\n    _transferOwnership(owner_);\r\n\r\n    ERC721._initialize(name_, symbol_);\r\n    _cap = cap_;\r\n    _freeCap = freeCap_ + 1;\r\n    _maxTxMint = maxPerTx_;\r\n    _tokenPrice = price_;\r\n    _currentTokenId = 1;\r\n\r\n    emit Transfer(address(0), address(0), 0);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-isApprovedForAll}.\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    // Whitelist OpenSea proxy contract for easy trading.\r\n    ProxyRegistry proxyRegistry = ProxyRegistry(_osProxyRegistryAddress);\r\n    if (address(proxyRegistry.proxies(owner)) == operator) {\r\n      return true;\r\n    }\r\n    return super.isApprovedForAll(owner, operator);\r\n  }\r\n\r\n  /**\r\n   * @dev mint\r\n   */\r\n  function mint(address to, uint256 numMint) external payable nonReentrant {\r\n    require((mintRunning & 2) != 0, ERR);\r\n\r\n    uint256 tidEnd = _currentTokenId + numMint;\r\n\r\n    uint256 numPayMint = tidEnd > _freeCap ? tidEnd - _freeCap : 0;\r\n    if (numPayMint > numMint) numPayMint = numMint;\r\n\r\n    require(\r\n      numMint > 0 &&\r\n        numMint <= _maxTxMint &&\r\n        tidEnd <= _cap - _advertised &&\r\n        msg.value >= numPayMint * _tokenPrice,\r\n      ERR\r\n    );\r\n\r\n    _mint(to, _currentTokenId, numMint);\r\n    _currentTokenId += numMint;\r\n\r\n    {\r\n      uint256 dust = msg.value - (numPayMint * _tokenPrice);\r\n      if (dust > 0) payable(_msgSender()).transfer(dust);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Whitelist mint a set of tokenIds for caller\r\n   */\r\n  function whitelistMint(\r\n    uint256 numMint,\r\n    bytes32 r,\r\n    bytes32 s,\r\n    uint8 v\r\n  ) external nonReentrant onlyValidAddress(numMint, r, s, v) {\r\n    // Only once per wallet\r\n    require(_currentTokenId + numMint <= _cap - _advertised &&\r\n      (mintRunning & 1) != 0 &&\r\n      _wlMinted[_msgSender()] == 0, ERR);\r\n\r\n    _wlMinted[_msgSender()] = 1;\r\n    _mint(_msgSender(), _currentTokenId, numMint);\r\n    _currentTokenId += numMint;\r\n  }\r\n\r\n  /**\r\n   * @dev advertise\r\n   */\r\n  function advertise(address[] memory to, uint256[] memory numMints)\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(to.length == numMints.length, ERR);\r\n\r\n    uint256 curTokenId = _cap;\r\n    uint256 maxAdvertised = _advertised;\r\n    for (uint256 i = 0; i < to.length; ++i) {\r\n      for (uint256 j = 0; j < numMints[i]; ++j) {\r\n        emit Transfer(address(0), to[i], curTokenId - j);\r\n      }\r\n      if (numMints[i] > maxAdvertised) maxAdvertised = numMints[i];\r\n    }\r\n    if (maxAdvertised > _advertised) _advertised = maxAdvertised;\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw rewards\r\n   */\r\n  function withdraw(address account) external onlyOwner {\r\n    uint256 amount = address(this).balance;\r\n    payable(account).transfer(amount);\r\n    emit Withdraw(account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev return max number token mintable\r\n   */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev return number of minted token\r\n   */\r\n  function tokenMinted() external view returns (uint256) {\r\n    return _currentTokenId - 1;\r\n  }\r\n\r\n  /**\r\n   * @dev return number of remaining free token\r\n   */\r\n  function freeMintLeft() external view returns (uint256) {\r\n    return _currentTokenId < _freeCap ? _freeCap - _currentTokenId : 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Set free mintable token cap\r\n   */\r\n  function setFreeTokenCap(uint256 newCap) external onlyOwner {\r\n    _freeCap = newCap + 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Set token price\r\n   */\r\n  function setTokenPrice(uint256 newPrice) external onlyOwner {\r\n    _tokenPrice = newPrice;\r\n  }\r\n\r\n  /**\r\n   * @dev See Start / Stop minting.\r\n   */\r\n  function setMintRunning(uint256 newMintRunning) external onlyOwner {\r\n    mintRunning = newMintRunning;\r\n  }\r\n\r\n  /**\r\n   * @dev Reset whitlelist address\r\n   */\r\n  function resetWhitelist(address whitelister) external onlyOwner {\r\n    delete(_wlMinted[whitelister]);\r\n  }\r\n\r\n  /**\r\n   * @dev we don't allow ether receive()\r\n   */\r\n  receive() external payable {\r\n    revert(ERR);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initializer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"osProxyRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numMints\",\"type\":\"uint256[]\"}],\"name\":\"advertise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeMintLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeCap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerTx_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numMint\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRunning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"}],\"name\":\"resetWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setFreeTokenCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintRunning\",\"type\":\"uint256\"}],\"name\":\"setMintRunning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numMint\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC721Opt", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009bbd7ac2f05d09cdd7b0fa38ba6ead0e5dc15b2f000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a131ac8ed28ab46e19678922175fbaefcae8aad8f37b177e31a3cc565ac6d10d"}]}