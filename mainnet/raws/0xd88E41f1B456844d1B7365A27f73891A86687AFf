{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Arrays.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n   /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Multiex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"contracts/interfaces/IMultiex.sol\\\";\\nimport \\\"contracts/OndoRegistryClient.sol\\\";\\n\\n/*\\n * @title Multiex call\\n * @notice Send all fee directly to creator\\n */\\nabstract contract Multiex is OndoRegistryClient, IMultiex {\\n  function multiexcall(Call[] calldata calls)\\n    external\\n    override\\n    isAuthorized(OLib.GUARDIAN_ROLE)\\n    returns (bytes[] memory returnData)\\n  {\\n    returnData = new bytes[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      (bool success, bytes memory ret) = calls[i].target.call(calls[i].data);\\n      require(success, \\\"Multicall aggregate: call failed\\\");\\n      returnData[i] = ret;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/OndoRegistryClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"./OndoRegistryClientInitializable.sol\\\";\\n\\nabstract contract OndoRegistryClient is OndoRegistryClientInitializable {\\n  constructor(address _registry) {\\n    __OndoRegistryClient__initialize(_registry);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/OndoRegistryClientInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"contracts/interfaces/IRegistry.sol\\\";\\nimport \\\"contracts/libraries/OndoLibrary.sol\\\";\\n\\nabstract contract OndoRegistryClientInitializable is\\n  Initializable,\\n  ReentrancyGuard,\\n  Pausable\\n{\\n  using SafeERC20 for IERC20;\\n\\n  IRegistry public registry;\\n  uint256 public denominator;\\n\\n  function __OndoRegistryClient__initialize(address _registry)\\n    internal\\n    initializer\\n  {\\n    require(_registry != address(0), \\\"Invalid registry address\\\");\\n    registry = IRegistry(_registry);\\n    denominator = registry.denominator();\\n  }\\n\\n  /**\\n   * @notice General ACL checker\\n   * @param _role Role as defined in OndoLibrary\\n   */\\n  modifier isAuthorized(bytes32 _role) {\\n    require(registry.authorized(_role, msg.sender), \\\"Unauthorized\\\");\\n    _;\\n  }\\n\\n  /*\\n   * @notice Helper to expose a Pausable interface to tools\\n   */\\n  function paused() public view virtual override returns (bool) {\\n    return registry.paused() || super.paused();\\n  }\\n\\n  function pause() external virtual isAuthorized(OLib.PANIC_ROLE) {\\n    super._pause();\\n  }\\n\\n  function unpause() external virtual isAuthorized(OLib.GUARDIAN_ROLE) {\\n    super._unpause();\\n  }\\n\\n  /**\\n   * @notice Grab tokens and send to caller\\n   * @dev If the _amount[i] is 0, then transfer all the tokens\\n   * @param _tokens List of tokens\\n   * @param _amounts Amount of each token to send\\n   */\\n  function _rescueTokens(address[] calldata _tokens, uint256[] memory _amounts)\\n    internal\\n    virtual\\n  {\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      uint256 amount = _amounts[i];\\n      if (amount == 0) {\\n        amount = IERC20(_tokens[i]).balanceOf(address(this));\\n      }\\n      IERC20(_tokens[i]).safeTransfer(msg.sender, amount);\\n    }\\n  }\\n\\n  function rescueTokens(address[] calldata _tokens, uint256[] memory _amounts)\\n    public\\n    whenPaused\\n    isAuthorized(OLib.GUARDIAN_ROLE)\\n  {\\n    require(_tokens.length == _amounts.length, \\\"Invalid array sizes\\\");\\n    _rescueTokens(_tokens, _amounts);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"contracts/interfaces/ITrancheToken.sol\\\";\\nimport \\\"contracts/interfaces/IRegistry.sol\\\";\\nimport \\\"contracts/libraries/OndoLibrary.sol\\\";\\nimport \\\"contracts/interfaces/IWETH.sol\\\";\\n\\n/**\\n * @title Global values used by many contracts\\n * @notice This is mostly used for access control\\n */\\ncontract Registry is IRegistry, AccessControl {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  bool private _paused;\\n  mapping(bytes32 => bool) private featureFlags;\\n\\n  uint256 public constant override denominator = 10000;\\n\\n  IWETH public immutable override weth;\\n\\n  address payable public fallbackRecipient;\\n\\n  mapping(address => string) public strategistNames;\\n\\n  modifier onlyRole(bytes32 _role) {\\n    require(hasRole(_role, msg.sender), \\\"Unauthorized: Invalid role\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    address _governance,\\n    address payable _fallbackRecipient,\\n    address _weth\\n  ) {\\n    require(\\n      _fallbackRecipient != address(0) && _fallbackRecipient != address(this),\\n      \\\"Invalid address\\\"\\n    );\\n    require(_governance != address(0), \\\"Invalid governance address\\\");\\n    require(_weth != address(0), \\\"Invalid weth address\\\");\\n    _setupRole(DEFAULT_ADMIN_ROLE, _governance);\\n    _setupRole(OLib.GOVERNANCE_ROLE, _governance);\\n    _setRoleAdmin(OLib.VAULT_ROLE, OLib.DEPLOYER_ROLE);\\n    _setRoleAdmin(OLib.ROLLOVER_ROLE, OLib.DEPLOYER_ROLE);\\n    _setRoleAdmin(OLib.STRATEGY_ROLE, OLib.DEPLOYER_ROLE);\\n    fallbackRecipient = _fallbackRecipient;\\n    weth = IWETH(_weth);\\n  }\\n\\n  /**\\n   * @notice General ACL check\\n   * @param _role One of the predefined roles\\n   * @param _account Address to check\\n   * @return Access/Denied\\n   */\\n  function authorized(bytes32 _role, address _account)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return hasRole(_role, _account);\\n  }\\n\\n  /**\\n   * @dev Emitted when a feature flag is enabled or disabled.\\n   */\\n  event FeatureFlagUpdated(bytes32 indexed featureFlag, bool enabled);\\n\\n  /**\\n   * Enables a feature flag.\\n   */\\n  function enableFeatureFlag(bytes32 _featureFlag)\\n    external\\n    override\\n    onlyRole(OLib.GOVERNANCE_ROLE)\\n  {\\n    featureFlags[_featureFlag] = true;\\n    emit FeatureFlagUpdated(_featureFlag, true);\\n  }\\n\\n  /**\\n   * Disables a feature flag.\\n   */\\n  function disableFeatureFlag(bytes32 _featureFlag)\\n    external\\n    override\\n    onlyRole(OLib.GOVERNANCE_ROLE)\\n  {\\n    featureFlags[_featureFlag] = false;\\n    emit FeatureFlagUpdated(_featureFlag, false);\\n  }\\n\\n  /**\\n   * Returns a feature flag value.\\n   */\\n  function getFeatureFlag(bytes32 _featureFlag)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return featureFlags[_featureFlag];\\n  }\\n\\n  /**\\n   * @dev Emitted when the pause is triggered by `account`.\\n   */\\n  event Paused(address account);\\n\\n  /**\\n   * @dev Emitted when the pause is lifted by `account`.\\n   */\\n  event Unpaused(address account);\\n\\n  /*\\n   * @notice Helper to expose a Pausable interface to tools\\n   */\\n  function paused() public view override returns (bool) {\\n    return _paused;\\n  }\\n\\n  /**\\n   * @notice Turn on paused variable. Everything stops!\\n   */\\n  function pause() external override onlyRole(OLib.PANIC_ROLE) {\\n    _paused = true;\\n    emit Paused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Turn off paused variable. Everything resumes.\\n   */\\n  function unpause() external override onlyRole(OLib.GUARDIAN_ROLE) {\\n    _paused = false;\\n    emit Unpaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Who will get any random eth from dead tranchetokens\\n   * @param _target Receipient of ETH\\n   */\\n  function setFallbackRecipient(address payable _target)\\n    external\\n    onlyRole(OLib.GOVERNANCE_ROLE)\\n  {\\n    fallbackRecipient = _target;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMultiex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\ninterface IMultiex {\\n  struct Call {\\n    address target;\\n    bytes data;\\n  }\\n\\n  function multiexcall(Call[] calldata calls)\\n    external\\n    returns (bytes[] memory returnData);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPairVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"contracts/libraries/OndoLibrary.sol\\\";\\nimport \\\"contracts/interfaces/ITrancheToken.sol\\\";\\nimport \\\"contracts/interfaces/IStrategy.sol\\\";\\n\\ninterface IPairVault {\\n  // Container to return Vault info to caller\\n  struct VaultView {\\n    uint256 id;\\n    Asset[] assets;\\n    IStrategy strategy; // Shared contract that interacts with AMMs\\n    address creator; // Account that calls createVault\\n    address strategist; // Has the right to call invest() and redeem(), and harvest() if strategy supports it\\n    address rollover;\\n    uint256 hurdleRate; // Return offered to senior tranche\\n    OLib.State state; // Current state of Vault\\n    uint256 startAt; // Time when the Vault is unpaused to begin accepting deposits\\n    uint256 investAt; // Time when investors can't move funds, strategist can invest\\n    uint256 redeemAt; // Time when strategist can redeem LP tokens, investors can withdraw\\n  }\\n\\n  // Track the asset type and amount in different stages\\n  struct Asset {\\n    IERC20 token;\\n    ITrancheToken trancheToken;\\n    uint256 trancheCap;\\n    uint256 userCap;\\n    uint256 deposited;\\n    uint256 originalInvested;\\n    uint256 totalInvested; // not literal 1:1, originalInvested + proportional lp from mid-term\\n    uint256 received;\\n    uint256 rolloverDeposited;\\n  }\\n\\n  function getState(uint256 _vaultId) external view returns (OLib.State);\\n\\n  function createVault(OLib.VaultParams calldata _params)\\n    external\\n    returns (uint256 vaultId);\\n\\n  function deposit(\\n    uint256 _vaultId,\\n    OLib.Tranche _tranche,\\n    uint256 _amount\\n  ) external;\\n\\n  function depositETH(uint256 _vaultId, OLib.Tranche _tranche) external payable;\\n\\n  function depositLp(uint256 _vaultId, uint256 _amount)\\n    external\\n    returns (uint256 seniorTokensOwed, uint256 juniorTokensOwed);\\n\\n  function invest(\\n    uint256 _vaultId,\\n    uint256 _seniorMinOut,\\n    uint256 _juniorMinOut\\n  ) external returns (uint256, uint256);\\n\\n  function redeem(\\n    uint256 _vaultId,\\n    uint256 _seniorMinOut,\\n    uint256 _juniorMinOut\\n  ) external returns (uint256, uint256);\\n\\n  function withdraw(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    returns (uint256);\\n\\n  function withdrawETH(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    returns (uint256);\\n\\n  function withdrawLp(uint256 _vaultId, uint256 _amount)\\n    external\\n    returns (uint256, uint256);\\n\\n  function claim(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    returns (uint256, uint256);\\n\\n  function claimETH(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    returns (uint256, uint256);\\n\\n  function depositFromRollover(\\n    uint256 _vaultId,\\n    uint256 _rolloverId,\\n    uint256 _seniorAmount,\\n    uint256 _juniorAmount\\n  ) external;\\n\\n  function rolloverClaim(uint256 _vaultId, uint256 _rolloverId)\\n    external\\n    returns (uint256, uint256);\\n\\n  function setRollover(\\n    uint256 _vaultId,\\n    address _rollover,\\n    uint256 _rolloverId\\n  ) external;\\n\\n  function canDeposit(uint256 _vaultId) external view returns (bool);\\n\\n  function getVaultById(uint256 _vaultId)\\n    external\\n    view\\n    returns (VaultView memory);\\n\\n  function vaultInvestor(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    view\\n    returns (\\n      uint256 position,\\n      uint256 claimableBalance,\\n      uint256 withdrawableExcess,\\n      uint256 withdrawableBalance\\n    );\\n\\n  function seniorExpected(uint256 _vaultId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"contracts/interfaces/IWETH.sol\\\";\\n\\n/**\\n * @title Global values used by many contracts\\n * @notice This is mostly used for access control\\n */\\ninterface IRegistry is IAccessControl {\\n  function paused() external view returns (bool);\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function enableFeatureFlag(bytes32 _featureFlag) external;\\n\\n  function disableFeatureFlag(bytes32 _featureFlag) external;\\n\\n  function getFeatureFlag(bytes32 _featureFlag) external view returns (bool);\\n\\n  function denominator() external view returns (uint256);\\n\\n  function weth() external view returns (IWETH);\\n\\n  function authorized(bytes32 _role, address _account)\\n    external\\n    view\\n    returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"contracts/libraries/OndoLibrary.sol\\\";\\nimport \\\"contracts/interfaces/IPairVault.sol\\\";\\n\\ninterface IStrategy {\\n  // Additional info stored for each Vault\\n  struct Vault {\\n    IPairVault origin; // who created this Vault\\n    IERC20 pool; // the DEX pool\\n    IERC20 senior; // senior asset in pool\\n    IERC20 junior; // junior asset in pool\\n    uint256 shares; // number of shares for ETF-style mid-duration entry/exit\\n    uint256 seniorExcess; // unused senior deposits\\n    uint256 juniorExcess; // unused junior deposits\\n  }\\n\\n  function vaults(uint256 vaultId)\\n    external\\n    view\\n    returns (\\n      IPairVault origin,\\n      IERC20 pool,\\n      IERC20 senior,\\n      IERC20 junior,\\n      uint256 shares,\\n      uint256 seniorExcess,\\n      uint256 juniorExcess\\n    );\\n\\n  function addVault(\\n    uint256 _vaultId,\\n    IERC20 _senior,\\n    IERC20 _junior\\n  ) external;\\n\\n  function addLp(uint256 _vaultId, uint256 _lpTokens) external;\\n\\n  function removeLp(\\n    uint256 _vaultId,\\n    uint256 _shares,\\n    address to\\n  ) external;\\n\\n  function getVaultInfo(uint256 _vaultId)\\n    external\\n    view\\n    returns (IERC20, uint256);\\n\\n  function invest(\\n    uint256 _vaultId,\\n    uint256 _totalSenior,\\n    uint256 _totalJunior,\\n    uint256 _extraSenior,\\n    uint256 _extraJunior,\\n    uint256 _seniorMinOut,\\n    uint256 _juniorMinOut\\n  ) external returns (uint256 seniorInvested, uint256 juniorInvested);\\n\\n  function sharesFromLp(uint256 vaultId, uint256 lpTokens)\\n    external\\n    view\\n    returns (\\n      uint256 shares,\\n      uint256 vaultShares,\\n      IERC20 pool\\n    );\\n\\n  function lpFromShares(uint256 vaultId, uint256 shares)\\n    external\\n    view\\n    returns (uint256 lpTokens, uint256 vaultShares);\\n\\n  function redeem(\\n    uint256 _vaultId,\\n    uint256 _seniorExpected,\\n    uint256 _seniorMinOut,\\n    uint256 _juniorMinOut\\n  ) external returns (uint256, uint256);\\n\\n  function withdrawExcess(\\n    uint256 _vaultId,\\n    OLib.Tranche tranche,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrancheToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITrancheToken is IERC20Upgradeable {\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OndoLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Helper functions\\n */\\nlibrary OLib {\\n  using Arrays for uint256[];\\n\\n  // State transition per Vault. Just linear transitions.\\n  enum State {Inactive, Deposit, Live, Withdraw}\\n\\n  // Only supports 2 tranches for now\\n  enum Tranche {Senior, Junior}\\n\\n  struct VaultParams {\\n    address seniorAsset;\\n    address juniorAsset;\\n    address strategist;\\n    address strategy;\\n    uint256 hurdleRate;\\n    uint256 startTime;\\n    uint256 enrollment;\\n    uint256 duration;\\n    string seniorName;\\n    string seniorSym;\\n    string juniorName;\\n    string juniorSym;\\n    uint256 seniorTrancheCap;\\n    uint256 seniorUserCap;\\n    uint256 juniorTrancheCap;\\n    uint256 juniorUserCap;\\n  }\\n\\n  struct RolloverParams {\\n    address strategist;\\n    string seniorName;\\n    string seniorSym;\\n    string juniorName;\\n    string juniorSym;\\n  }\\n\\n  bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\n  bytes32 public constant PANIC_ROLE = keccak256(\\\"PANIC_ROLE\\\");\\n  bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n  bytes32 public constant DEPLOYER_ROLE = keccak256(\\\"DEPLOYER_ROLE\\\");\\n  bytes32 public constant CREATOR_ROLE = keccak256(\\\"CREATOR_ROLE\\\");\\n  bytes32 public constant STRATEGIST_ROLE = keccak256(\\\"STRATEGIST_ROLE\\\");\\n  bytes32 public constant VAULT_ROLE = keccak256(\\\"VAULT_ROLE\\\");\\n  bytes32 public constant ROLLOVER_ROLE = keccak256(\\\"ROLLOVER_ROLE\\\");\\n  bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n\\n  // Both sums are running sums. If a user deposits [$1, $5, $3], then\\n  // userSums would be [$1, $6, $9]. You can figure out the deposit\\n  // amount be subtracting userSums[i]-userSum[i-1].\\n\\n  // prefixSums is the total deposited for all investors + this\\n  // investors deposit at the time this deposit is made. So at\\n  // prefixSum[0], it would be $1 + totalDeposits, where totalDeposits\\n  // could be $1000 because other investors have put in money.\\n  struct Investor {\\n    uint256[] userSums;\\n    uint256[] prefixSums;\\n    bool claimed;\\n    bool withdrawn;\\n  }\\n\\n  /**\\n   * @dev Given the total amount invested by the Vault, we want to find\\n   *   out how many of this investor's deposits were actually\\n   *   used. Use findUpperBound on the prefixSum to find the point\\n   *   where total deposits were accepted. For example, if $2000 was\\n   *   deposited by all investors and $1000 was invested, then some\\n   *   position in the prefixSum splits the array into deposits that\\n   *   got in, and deposits that didn't get in. That same position\\n   *   maps to userSums. This is the user's deposits that got\\n   *   in. Since we are keeping track of the sums, we know at that\\n   *   position the total deposits for a user was $15, even if it was\\n   *   15 $1 deposits. And we know the amount that didn't get in is\\n   *   the last value in userSum - the amount that got it.\\n\\n   * @param investor A specific investor\\n   * @param invested The total amount invested by this Vault\\n   */\\n  function getInvestedAndExcess(Investor storage investor, uint256 invested)\\n    internal\\n    view\\n    returns (uint256 userInvested, uint256 excess)\\n  {\\n    uint256[] storage prefixSums_ = investor.prefixSums;\\n    uint256 length = prefixSums_.length;\\n    if (length == 0) {\\n      // There were no deposits. Return 0, 0.\\n      return (userInvested, excess);\\n    }\\n    uint256 leastUpperBound = prefixSums_.findUpperBound(invested);\\n    if (length == leastUpperBound) {\\n      // All deposits got in, no excess. Return total deposits, 0\\n      userInvested = investor.userSums[length - 1];\\n      return (userInvested, excess);\\n    }\\n    uint256 prefixSum = prefixSums_[leastUpperBound];\\n    if (prefixSum == invested) {\\n      // Not all deposits got in, but there are no partial deposits\\n      userInvested = investor.userSums[leastUpperBound];\\n      excess = investor.userSums[length - 1] - userInvested;\\n    } else {\\n      // Let's say some of my deposits got in. The last deposit,\\n      // however, was $100 and only $30 got in. Need to split that\\n      // deposit so $30 got in, $70 is excess.\\n      userInvested = leastUpperBound > 0\\n        ? investor.userSums[leastUpperBound - 1]\\n        : 0;\\n      uint256 depositAmount = investor.userSums[leastUpperBound] - userInvested;\\n      if (prefixSum - depositAmount < invested) {\\n        userInvested += (depositAmount + invested - prefixSum);\\n        excess = investor.userSums[length - 1] - userInvested;\\n      } else {\\n        excess = investor.userSums[length - 1] - userInvested;\\n      }\\n    }\\n  }\\n\\n  /*\\n   Used to avoid phantom overflow issues that can arise during this calculation:\\n   @notice Calculates floor(x*y\u00f7denominator) with full precision.\\n   @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n   @dec Credit to prb-math for refactoring for solidity ^0.8 https://github.com/paulrberg/prb-math/blob/main/contracts/PRBMath.sol\\n  */\\n  function safeMulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      unchecked {\\n        result = prod0 / denominator;\\n      }\\n      return result;\\n    }\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    if (prod1 >= denominator) {\\n      revert(\\\"OLib__MulDivOverflow(prod1, denominator)\\\");\\n    }\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n      // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n      // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n    unchecked {\\n      // Does not overflow because the denominator cannot be zero at this stage in the function.\\n      uint256 lpotdod = denominator & (~denominator + 1);\\n      assembly {\\n        // Divide denominator by lpotdod.\\n        denominator := div(denominator, lpotdod)\\n        // Divide [prod1 prod0] by lpotdod.\\n        prod0 := div(prod0, lpotdod)\\n        // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n        lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n      }\\n      // Shift in bits from prod1 into prod0.\\n      prod0 |= prod1 * lpotdod;\\n      // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n      // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n      // four bits. That is, denominator * inv = 1 mod 2^4.\\n      uint256 inverse = (3 * denominator) ^ 2;\\n      // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\u2019s lifting lemma, this also works\\n      // in modular arithmetic, doubling the correct bits in each step.\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n      // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n      // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n      // less than 2^256, this is the final result. We don\u2019t need to compute the high bits of the result and prod1\\n      // is no longer required.\\n      result = prod0 * inverse;\\n      return result;\\n    }\\n  }\\n}\\n\\n/**\\n * @title Subset of SafeERC20 from openZeppelin\\n *\\n * @dev Some non-standard ERC20 contracts (e.g. Tether) break\\n * `approve` by forcing it to behave like `safeApprove`. This means\\n * `safeIncreaseAllowance` will fail when it tries to adjust the\\n * allowance. The code below simply adds an extra call to\\n * `approve(spender, 0)`.\\n */\\nlibrary OndoSaferERC20 {\\n  using SafeERC20 for IERC20;\\n\\n  function ondoSafeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    token.safeApprove(spender, 0);\\n    token.safeApprove(spender, newAllowance);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/AConvexAutocompounder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"contracts/vendor/curve/ICurve_2.sol\\\";\\nimport \\\"contracts/vendor/curve/ICurve_3.sol\\\";\\nimport \\\"contracts/vendor/convex/IConvexBooster.sol\\\";\\nimport \\\"contracts/vendor/convex/IBaseRewardPool.sol\\\";\\nimport \\\"contracts/interfaces/IPairVault.sol\\\";\\nimport \\\"contracts/OndoRegistryClient.sol\\\";\\nimport \\\"contracts/Multiex.sol\\\";\\nimport \\\"contracts/libraries/OndoLibrary.sol\\\";\\n\\nabstract contract AConvexAutocompounder is Multiex {\\n  using OndoSaferERC20 for IERC20;\\n\\n  struct SwapPath {\\n    address router;\\n    address[] path;\\n  }\\n  struct LPSetting {\\n    IERC20 lpAddress;\\n    address lpMinterAddress;\\n    IBaseRewardPool cvxReward;\\n    uint256 cvxPID;\\n    uint256 allocPoints;\\n  }\\n\\n  // constants\\n  // Curve settings\\n  IERC20 public constant THREE_CRV_LP =\\n    IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\n  ICurve_3 public constant THREE_CRV_MINTER =\\n    ICurve_3(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n  // Convex Settings\\n  IConvexBooster public constant CONVEX_BOOSTER =\\n    IConvexBooster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n  address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n  address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n  address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n  IERC20 public immutable stableAsset; // DAI/USDC/USDT\\n  int128 public immutable stableAssetCurveIndex; // asset index of 3Crv pool\\n\\n  mapping(uint256 => uint256) public balanceOf; // Shares of each vaultId\\n  uint256 public totalSupply;\\n\\n  LPSetting[] public lpSettings;\\n  uint256 public totalAllocPoints;\\n  address[] public rewardTokens;\\n  mapping(address => SwapPath) public swapPaths;\\n  mapping(address => int128) public stableToIndex;\\n\\n  /**\\n   * @dev Setup contract dependencies here\\n   * @param _stableAsset single asset\\n   * @param _lpSettings The array of lp Setting structs for the tokens which we\\n   * Wish to farm on CVX\\n   * @param _rewardTokens An array of tokens that we will reveive as rewards for providing\\n   * the LP tokens to CVX\\n   */\\n  constructor(\\n    address _stableAsset,\\n    LPSetting[] memory _lpSettings,\\n    address[] memory _rewardTokens\\n  ) {\\n    require(\\n      _stableAsset == DAI || _stableAsset == USDT || _stableAsset == USDC,\\n      \\\"Invalid Stable Asset\\\"\\n    );\\n    stableAsset = IERC20(_stableAsset);\\n    stableToIndex[DAI] = int128(0);\\n    stableToIndex[USDC] = int128(1);\\n    stableToIndex[USDT] = int128(2);\\n\\n    stableAssetCurveIndex = stableToIndex[_stableAsset];\\n    // calc stable asset index of 3pool\\n    uint256 _totalAllocPoints;\\n    uint256 __length = _lpSettings.length;\\n    for (uint256 i = 0; i < __length; ++i) {\\n      lpSettings.push(_lpSettings[i]);\\n      _totalAllocPoints += _lpSettings[i].allocPoints;\\n    }\\n    totalAllocPoints = _totalAllocPoints;\\n    rewardTokens = _rewardTokens;\\n  }\\n\\n  /**\\n   * @dev Set swap path of assets\\n   * @param _assets asset array\\n   * @param _paths path array\\n   */\\n  function setSwapPaths(address[] calldata _assets, SwapPath[] calldata _paths)\\n    external\\n    isAuthorized(OLib.STRATEGIST_ROLE)\\n  {\\n    require(_assets.length == _paths.length, \\\"Invalid Inputs\\\");\\n    for (uint256 i = 0; i < _assets.length; i++) {\\n      swapPaths[_assets[i]] = _paths[i];\\n    }\\n  }\\n\\n  /**\\n   * @dev Set reward tokens\\n   * @param _rewardTokens reward tokens array\\n   */\\n  function setRewardTokens(address[] calldata _rewardTokens)\\n    external\\n    isAuthorized(OLib.STRATEGIST_ROLE)\\n  {\\n    rewardTokens = _rewardTokens;\\n  }\\n\\n  /**\\n   * @dev Get all lp amounts in array format\\n   */\\n  function getLPAmounts() public view returns (uint256[] memory lpAmounts) {\\n    uint256 __length = lpSettings.length;\\n    lpAmounts = new uint256[](__length);\\n    for (uint256 i = 0; i < __length; ++i) {\\n      lpAmounts[i] = lpSettings[i].cvxReward.balanceOf(address(this));\\n    }\\n  }\\n\\n  /**\\n   * @dev Get total 3CRV lp amounts\\n   */\\n  function get3CRVAmount() public view returns (uint256 total3CRVAmount) {\\n    uint256 __length = lpSettings.length;\\n    for (uint256 i = 0; i < __length; ++i) {\\n      uint256 lpAmount = lpSettings[i].cvxReward.balanceOf(address(this));\\n      ICurve_2 minter = ICurve_2(lpSettings[i].lpMinterAddress);\\n      if (lpAmount > 0 && address(minter) != address(THREE_CRV_LP)) {\\n        if (minter.coins(0) == address(THREE_CRV_LP)) {\\n          lpAmount = minter.calc_withdraw_one_coin(lpAmount, 0);\\n        } else if (minter.coins(1) == address(THREE_CRV_LP)) {\\n          lpAmount = minter.calc_withdraw_one_coin(lpAmount, 1);\\n        } else {\\n          revert();\\n        }\\n      }\\n\\n      total3CRVAmount += lpAmount;\\n    }\\n  }\\n\\n  /**\\n   * @dev compound: claim -> swap -> invest\\n   */\\n  function compound() external isAuthorized(OLib.STRATEGIST_ROLE) {\\n    _claim();\\n\\n    _swapRewardTokensToStableAsset();\\n\\n    _splitAndDepositConvex();\\n  }\\n\\n  // compound can use much gas - suggest to have separate functions for compound as well\\n\\n  /**\\n   * @dev claim rewards from convex\\n   */\\n  function _claim() internal {\\n    // claim rewards\\n    uint256 __length = lpSettings.length;\\n    for (uint256 i = 0; i < __length; ++i) {\\n      lpSettings[i].cvxReward.getReward();\\n    }\\n  }\\n\\n  /**\\n   * @dev swap reward tokens to stable asset\\n   */\\n  function _swapRewardTokensToStableAsset() internal {\\n    // swap rewards tokens to DAI/USDC/USDT\\n    uint256 __length = rewardTokens.length;\\n    for (uint256 i = 0; i < rewardTokens.length; ++i) {\\n      _swap(rewardTokens[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev split stable asset based on alloc points and deposit into convex\\n   */\\n\\n  function _splitAndDepositConvex() internal {\\n    uint256 total3CRVAmount = _mint3CRV();\\n    uint256 __length = lpSettings.length;\\n\\n    if (total3CRVAmount > 10000) {\\n      for (uint256 i = 0; i < __length; ++i) {\\n        LPSetting memory setting = lpSettings[i];\\n\\n        // mint curve lp based on alloc points\\n        uint256 newLpAmount =\\n          _mintLPFrom3CRV(\\n            setting.lpAddress,\\n            setting.lpMinterAddress,\\n            OLib.safeMulDiv(\\n              total3CRVAmount,\\n              setting.allocPoints,\\n              totalAllocPoints\\n            )\\n          );\\n\\n        IERC20(setting.lpAddress).ondoSafeIncreaseAllowance(\\n          address(CONVEX_BOOSTER),\\n          newLpAmount\\n        );\\n        // deposit into convex\\n        CONVEX_BOOSTER.deposit(setting.cvxPID, newLpAmount, true); //_stake=true: stake LP into convex rewards contract\\n      }\\n    }\\n  }\\n\\n  // Internal Functions\\n\\n  function _swap(address rewardAsset) internal {\\n    uint256 amount = IERC20(rewardAsset).balanceOf(address(this));\\n    if (amount > 10000) {\\n      SwapPath memory data = swapPaths[rewardAsset];\\n\\n      IERC20(rewardAsset).ondoSafeIncreaseAllowance(data.router, amount);\\n      IUniswapV2Router02(data.router).swapExactTokensForTokens(\\n        amount,\\n        0, // minimum output amount\\n        data.path,\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n  }\\n\\n  function _mint3CRV() internal returns (uint256 lpAmount) {\\n    uint256[3] memory amounts;\\n    amounts[0] = IERC20(DAI).balanceOf(address(this));\\n    amounts[1] = IERC20(USDC).balanceOf(address(this));\\n    amounts[2] = IERC20(USDT).balanceOf(address(this));\\n\\n    if (amounts[0] + amounts[1] + amounts[2] > 10000) {\\n      IERC20(DAI).ondoSafeIncreaseAllowance(\\n        address(THREE_CRV_MINTER),\\n        amounts[0]\\n      );\\n      IERC20(USDC).ondoSafeIncreaseAllowance(\\n        address(THREE_CRV_MINTER),\\n        amounts[1]\\n      );\\n      IERC20(USDT).ondoSafeIncreaseAllowance(\\n        address(THREE_CRV_MINTER),\\n        amounts[2]\\n      );\\n\\n      uint256 balanceBefore = THREE_CRV_LP.balanceOf(address(this));\\n      THREE_CRV_MINTER.add_liquidity(\\n        amounts,\\n        0 // minimum mint amount\\n      );\\n      lpAmount = THREE_CRV_LP.balanceOf(address(this)) - balanceBefore;\\n    }\\n  }\\n\\n  function _mintLPFrom3CRV(\\n    IERC20 lp,\\n    address minter,\\n    uint256 threeCRVAmount\\n  ) internal returns (uint256 lpAmount) {\\n    if (lp == THREE_CRV_LP) {\\n      return threeCRVAmount;\\n    }\\n\\n    uint256[2] memory amounts;\\n    if (ICurve_2(minter).coins(0) == address(THREE_CRV_LP)) {\\n      amounts[0] = threeCRVAmount;\\n    } else if (ICurve_2(minter).coins(1) == address(THREE_CRV_LP)) {\\n      amounts[1] = threeCRVAmount;\\n    } else {\\n      revert();\\n    }\\n\\n    THREE_CRV_LP.ondoSafeIncreaseAllowance(minter, threeCRVAmount);\\n\\n    uint256 balanceBefore = lp.balanceOf(address(this));\\n    ICurve_2(minter).add_liquidity(\\n      amounts,\\n      0 // minimum mint amount\\n    );\\n    return lp.balanceOf(address(this)) - balanceBefore;\\n  }\\n\\n  function getLpLength() public view returns (uint256) {\\n    return lpSettings.length;\\n  }\\n\\n  function _mint(uint256 poolId, uint256 amount) internal {\\n    balanceOf[poolId] += amount;\\n    totalSupply += amount;\\n  }\\n\\n  function _burn(uint256 poolId, uint256 amount) internal {\\n    require(balanceOf[poolId] >= amount, \\\"Insufficient Balance\\\");\\n    balanceOf[poolId] -= amount;\\n    totalSupply -= amount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/BasePairLPStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"contracts/interfaces/IStrategy.sol\\\";\\nimport \\\"contracts/Registry.sol\\\";\\nimport \\\"contracts/libraries/OndoLibrary.sol\\\";\\nimport \\\"contracts/OndoRegistryClient.sol\\\";\\nimport \\\"contracts/interfaces/IPairVault.sol\\\";\\n\\n/**\\n * @title  Basic LP strategy\\n * @notice All LP strategies should inherit from this\\n */\\nabstract contract BasePairLPStrategy is OndoRegistryClient, IStrategy {\\n  using SafeERC20 for IERC20;\\n\\n  modifier onlyOrigin(uint256 _vaultId) {\\n    require(\\n      msg.sender == address(vaults[_vaultId].origin),\\n      \\\"Unauthorized: Only Vault contract\\\"\\n    );\\n    _;\\n  }\\n\\n  event Invest(uint256 indexed vault, uint256 lpTokens);\\n  event Redeem(uint256 indexed vault);\\n  event Harvest(address indexed pool, uint256 lpTokens);\\n\\n  mapping(uint256 => Vault) public override vaults;\\n\\n  constructor(address _registry) OndoRegistryClient(_registry) {}\\n\\n  /**\\n   * @notice Deposit more LP tokens while Vault is invested\\n   */\\n  function addLp(uint256 _vaultId, uint256 _amount)\\n    external\\n    virtual\\n    override\\n    whenNotPaused\\n    onlyOrigin(_vaultId)\\n  {\\n    Vault storage vault_ = vaults[_vaultId];\\n    vault_.shares += _amount;\\n  }\\n\\n  /**\\n   * @notice Remove LP tokens while Vault is invested\\n   */\\n  function removeLp(\\n    uint256 _vaultId,\\n    uint256 _amount,\\n    address to\\n  ) external virtual override whenNotPaused onlyOrigin(_vaultId) {\\n    Vault storage vault_ = vaults[_vaultId];\\n    vault_.shares -= _amount;\\n    IERC20(vault_.pool).safeTransfer(to, _amount);\\n  }\\n\\n  /**\\n   * @notice Return the DEX pool and the amount of LP tokens\\n   */\\n  function getVaultInfo(uint256 _vaultId)\\n    external\\n    view\\n    override\\n    returns (IERC20, uint256)\\n  {\\n    Vault storage c = vaults[_vaultId];\\n    return (c.pool, c.shares);\\n  }\\n\\n  /**\\n   * @notice Send excess tokens to investor\\n   */\\n  function withdrawExcess(\\n    uint256 _vaultId,\\n    OLib.Tranche tranche,\\n    address to,\\n    uint256 amount\\n  ) external override onlyOrigin(_vaultId) {\\n    Vault storage _vault = vaults[_vaultId];\\n    if (tranche == OLib.Tranche.Senior) {\\n      uint256 excess = _vault.seniorExcess;\\n      require(amount <= excess, \\\"Withdrawing too much\\\");\\n      _vault.seniorExcess -= amount;\\n      _vault.senior.safeTransfer(to, amount);\\n    } else {\\n      uint256 excess = _vault.juniorExcess;\\n      require(amount <= excess, \\\"Withdrawing too much\\\");\\n      _vault.juniorExcess -= amount;\\n      _vault.junior.safeTransfer(to, amount);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/ConvexAutocompounderStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"contracts/strategies/AConvexAutocompounder.sol\\\";\\nimport \\\"contracts/strategies/BasePairLPStrategy.sol\\\";\\nimport \\\"contracts/vendor/uniswap/UniswapV2Library.sol\\\";\\n\\ncontract ConvexAutocompounder is AConvexAutocompounder, BasePairLPStrategy {\\n  using SafeERC20 for IERC20;\\n  using OndoSaferERC20 for IERC20;\\n\\n  string public constant name = \\\"Convex Autocompounder Strategy\\\";\\n  address public immutable uniFactory;\\n  IUniswapV2Router02 public immutable uniRouter02;\\n  uint256 threeCrvLPAmount;\\n  int128 seniorCrvIndex;\\n  int128 juniorCrvIndex;\\n\\n  /**\\n   * @dev Setup contract dependencies here\\n   * @param _stableAsset single asset\\n   * @param _registry Pointer to Registry\\n   * @param _lpSettings The array of lp Setting structs for the tokens which we\\n   * Wish to farm on CVX\\n   * @param _rewardTokens An array of tokens that we will reveive as rewards for providing\\n   * the LP tokens to CVX\\n   * @param _factory The uniswap factory.\\n   * @param _router The uniswap Router that we will be swapping through for the rebalance\\n   */\\n  constructor(\\n    address _stableAsset,\\n    address _registry,\\n    LPSetting[] memory _lpSettings,\\n    address[] memory _rewardTokens,\\n    address _factory,\\n    address _router\\n  )\\n    AConvexAutocompounder(_stableAsset, _lpSettings, _rewardTokens)\\n    BasePairLPStrategy(_registry)\\n  {\\n    uniFactory = _factory;\\n    uniRouter02 = IUniswapV2Router02(_router);\\n  }\\n\\n  /**\\n   * @notice Register a Vault with the strategy\\n   * @param _vaultId Vault\\n   * @param _senior Asset for senior tranche\\n   * @param _junior Asset for junior tranche\\n   */\\n  function addVault(\\n    uint256 _vaultId,\\n    IERC20 _senior,\\n    IERC20 _junior\\n  ) external override whenNotPaused nonReentrant isAuthorized(OLib.VAULT_ROLE) {\\n    require(\\n      address(vaults[_vaultId].origin) == address(0),\\n      \\\"Vault id already registered\\\"\\n    );\\n\\n    vaults[_vaultId].origin = IPairVault(msg.sender);\\n    vaults[_vaultId].senior = _senior;\\n    vaults[_vaultId].junior = _junior;\\n\\n    seniorCrvIndex = stableToIndex[address(_senior)];\\n    juniorCrvIndex = stableToIndex[address(_junior)];\\n  }\\n\\n  /**\\n   * @notice invest stable asset\\n   * @dev we assume that all senior and junior will be invested, hence returning the same input values to AllPair\\n   * @return _totalSenior senior stable asset invested\\n   * @return _totalJunior junior stable asset invested\\n   */\\n  function invest(\\n    uint256 _vaultId,\\n    uint256 _totalSenior,\\n    uint256 _totalJunior,\\n    uint256 _extraSenior,\\n    uint256 _extraJunior,\\n    uint256 _seniorMinOut,\\n    uint256 _juniorMinOut\\n  )\\n    external\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    onlyOrigin(_vaultId)\\n    returns (uint256, uint256)\\n  {\\n    Vault storage vault_ = vaults[_vaultId];\\n\\n    uint256 prev3CRVAmount = get3CRVAmount();\\n    _splitAndDepositConvex();\\n    uint256 new3CRVAmount = get3CRVAmount() - prev3CRVAmount;\\n    // calculate shares\\n    uint256 shares;\\n    if (totalSupply == 0) {\\n      shares = new3CRVAmount;\\n    } else {\\n      shares = OLib.safeMulDiv(new3CRVAmount, totalSupply, prev3CRVAmount);\\n    }\\n\\n    // Assume everything was invested.\\n    vault_.seniorExcess = 0;\\n    vault_.juniorExcess = 0;\\n    _mint(_vaultId, shares);\\n    emit Invest(_vaultId, shares);\\n    return (_totalSenior, _totalJunior);\\n  }\\n\\n  /**\\n   * @dev redeem stable asset\\n   */\\n  function redeem(\\n    uint256 _vaultId,\\n    uint256 _seniorExpected,\\n    uint256 _seniorMinOut,\\n    uint256 _juniorMinOut\\n  )\\n    external\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    onlyOrigin(_vaultId)\\n    returns (uint256 seniorReceived, uint256 juniorReceived)\\n  {\\n    uint256 amountOfLp;\\n\\n    uint256 shares = balanceOf[_vaultId];\\n    require(shares > 0, \\\"No invest\\\");\\n    Vault storage vault_ = vaults[_vaultId];\\n\\n    uint256[] memory lpAmounts = getLPAmounts();\\n    for (uint256 i = 0; i < lpAmounts.length; ++i) {\\n      _withdraw3CrvLP(i, OLib.safeMulDiv(lpAmounts[i], shares, totalSupply));\\n    }\\n    amountOfLp = THREE_CRV_LP.balanceOf(address(this));\\n    _swapLpToStablesVault(_seniorMinOut, _juniorMinOut, amountOfLp);\\n\\n    seniorReceived = vault_.senior.balanceOf(address(this));\\n    juniorReceived = vault_.junior.balanceOf(address(this));\\n\\n    if (address(vault_.senior) != address(vault_.junior)) {\\n      if (seniorReceived < _seniorExpected) {\\n        (seniorReceived, juniorReceived) = _swapForSr(\\n          _vaultId,\\n          address(vault_.senior),\\n          address(vault_.junior),\\n          _seniorExpected,\\n          seniorReceived,\\n          juniorReceived\\n        );\\n      } else {\\n        if (seniorReceived > _seniorExpected) {\\n          address[] memory path = new address[](2);\\n          path[0] = address(vault_.senior);\\n          path[1] = address(vault_.junior);\\n\\n          juniorReceived += _swapExactIn(\\n            seniorReceived - _seniorExpected,\\n            0,\\n            path\\n          );\\n        }\\n        seniorReceived = _seniorExpected;\\n      }\\n    } else {\\n      // Divide the sr & jr received by 2, because they are same asset.\\n      // Call to balanceOf() on line 145 will report double value for both variables.\\n      seniorReceived = seniorReceived / 2;\\n      juniorReceived = juniorReceived / 2;\\n\\n      if (_seniorExpected > seniorReceived) {\\n        uint256 seniorNeeded = _seniorExpected - seniorReceived;\\n        if (seniorNeeded > juniorReceived) {\\n          seniorReceived += juniorReceived;\\n          juniorReceived = 0;\\n        } else {\\n          seniorReceived = _seniorExpected;\\n          juniorReceived -= seniorNeeded;\\n        }\\n      } else if (seniorReceived > _seniorExpected) {\\n        juniorReceived += seniorReceived - _seniorExpected;\\n        seniorReceived = _seniorExpected;\\n      }\\n    }\\n    require(\\n      _seniorMinOut <= seniorReceived && _juniorMinOut <= juniorReceived,\\n      \\\"Too Much Slippage\\\"\\n    );\\n\\n    vault_.senior.ondoSafeIncreaseAllowance(msg.sender, seniorReceived);\\n    vault_.junior.ondoSafeIncreaseAllowance(msg.sender, juniorReceived);\\n\\n    _burn(_vaultId, shares);\\n    emit Redeem(_vaultId);\\n    return (seniorReceived, juniorReceived);\\n  }\\n\\n  function _withdraw3CrvLP(uint256 pId, uint256 lpAmountToWithdraw) internal {\\n    LPSetting memory setting = lpSettings[pId];\\n    setting.cvxReward.withdrawAndUnwrap(lpAmountToWithdraw, false);\\n\\n    // unwrap if not 3CRV\\n    if (setting.lpAddress == THREE_CRV_LP) {\\n      threeCrvLPAmount = lpAmountToWithdraw;\\n    } else {\\n      if (ICurve_2(setting.lpMinterAddress).coins(0) == address(THREE_CRV_LP)) {\\n        threeCrvLPAmount = ICurve_2(setting.lpMinterAddress)\\n          .remove_liquidity_one_coin(lpAmountToWithdraw, 0, 0);\\n      } else {\\n        threeCrvLPAmount = ICurve_2(setting.lpMinterAddress)\\n          .remove_liquidity_one_coin(lpAmountToWithdraw, 1, 0);\\n      }\\n    }\\n  }\\n\\n  function _swapLpToStablesVault(\\n    uint256 srMinAsset,\\n    uint256 jrMinAsset,\\n    uint256 amountOfLp\\n  ) internal {\\n    THREE_CRV_MINTER.remove_liquidity_one_coin(\\n      (amountOfLp * 50) / 100,\\n      seniorCrvIndex,\\n      srMinAsset\\n    );\\n\\n    THREE_CRV_MINTER.remove_liquidity_one_coin(\\n      (amountOfLp * 50) / 100,\\n      juniorCrvIndex,\\n      jrMinAsset\\n    );\\n  }\\n\\n  function _swapForSr(\\n    uint256 _vaultId,\\n    address _senior,\\n    address _junior,\\n    uint256 _seniorExpected,\\n    uint256 seniorReceived,\\n    uint256 juniorReceived\\n  ) internal returns (uint256, uint256) {\\n    uint256 seniorNeeded = _seniorExpected - seniorReceived;\\n    Vault storage vault_ = vaults[_vaultId];\\n    address[] memory jr2Sr = new address[](2);\\n    jr2Sr[0] = address(vault_.junior);\\n    jr2Sr[1] = address(vault_.senior);\\n    if (\\n      seniorNeeded >\\n      UniswapV2Library.getAmountsOut(uniFactory, juniorReceived, jr2Sr)[1]\\n    ) {\\n      seniorReceived += _swapExactIn(juniorReceived, 0, jr2Sr);\\n      return (seniorReceived, 0);\\n    } else {\\n      juniorReceived -= _swapExactOut(seniorNeeded, juniorReceived, jr2Sr);\\n      return (_seniorExpected, juniorReceived);\\n    }\\n  }\\n\\n  function _swapExactIn(\\n    uint256 amtIn,\\n    uint256 minOut,\\n    address[] memory path\\n  ) internal returns (uint256) {\\n    IERC20(path[0]).ondoSafeIncreaseAllowance(address(uniRouter02), amtIn);\\n    return\\n      uniRouter02.swapExactTokensForTokens(\\n        amtIn,\\n        minOut,\\n        path,\\n        address(this),\\n        block.timestamp\\n      )[path.length - 1];\\n  }\\n\\n  /**\\n   * @notice Simple wrapper around uniswap\\n   * @param amtOut Amount out\\n   * @param maxIn Maximum tokens offered as input\\n   * @param path Router path\\n   */\\n  function _swapExactOut(\\n    uint256 amtOut,\\n    uint256 maxIn,\\n    address[] memory path\\n  ) internal returns (uint256) {\\n    IERC20(path[0]).ondoSafeIncreaseAllowance(address(uniRouter02), maxIn);\\n    return\\n      uniRouter02.swapTokensForExactTokens(\\n        amtOut,\\n        maxIn,\\n        path,\\n        address(this),\\n        block.timestamp\\n      )[0];\\n  }\\n\\n  function sharesFromLp(uint256 vaultId, uint256 lpTokens)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 shares,\\n      uint256 vaultShares,\\n      IERC20 pool\\n    )\\n  {\\n    revert();\\n  }\\n\\n  function lpFromShares(uint256 vaultId, uint256 shares)\\n    external\\n    view\\n    override\\n    returns (uint256 lpTokens, uint256 vaultShares)\\n  {\\n    revert();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/convex/IBaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\ninterface IBaseRewardPool {\\n  function getReward() external returns (bool);\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function withdrawAndUnwrap(uint256, bool) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/convex/IConvexBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\ninterface IConvexBooster {\\n  function deposit(\\n    uint256,\\n    uint256,\\n    bool\\n  ) external returns (bool);\\n\\n  function withdraw(uint256, uint256) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/curve/ICurve_2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\ninterface ICurve_2 {\\n  function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\\n    external;\\n\\n  function remove_liquidity_one_coin(\\n    uint256 burn_amount,\\n    int128 i,\\n    uint256 mim_received\\n  ) external returns (uint256);\\n\\n  function coins(uint256) external view returns (address);\\n\\n  function calc_withdraw_one_coin(uint256, int128)\\n    external\\n    view\\n    returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/curve/ICurve_3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\ninterface ICurve_3 {\\n  function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\\n    external;\\n\\n  function remove_liquidity_one_coin(\\n    uint256 burn_amount,\\n    int128 i,\\n    uint256 mim_received\\n  ) external;\\n\\n  function coins(uint256) external view returns (address);\\n\\n  function calc_withdraw_one_coin(uint256, int128)\\n    external\\n    view\\n    returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/uniswap/UniswapV2Library.sol\": {\r\n      \"content\": \"pragma solidity 0.8.3;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n  using SafeMath for uint256;\\n\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB)\\n    internal\\n    pure\\n    returns (address token0, address token1)\\n  {\\n    require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal pure returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = address(\\n      uint160(\\n        uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              hex\\\"ff\\\",\\n              factory,\\n              keccak256(abi.encodePacked(token0, token1)),\\n              hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n            )\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) =\\n      IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n    (reserveA, reserveB) = tokenA == token0\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) internal pure returns (uint256 amountB) {\\n    require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n    require(\\n      reserveA > 0 && reserveB > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    amountB = amountA.mul(reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 amountInWithFee = amountIn.mul(997);\\n    uint256 numerator = amountInWithFee.mul(reserveOut);\\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountIn) {\\n    require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n    uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n    amountIn = (numerator / denominator).add(1);\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint256 amountIn,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint256 i; i < path.length - 1; i++) {\\n      (uint256 reserveIn, uint256 reserveOut) =\\n        getReserves(factory, path[i], path[i + 1]);\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) =\\n        getReserves(factory, path[i - 1], path[i]);\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpMinterAddress\",\"type\":\"address\"},{\"internalType\":\"contract IBaseRewardPool\",\"name\":\"cvxReward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cvxPID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct AConvexAutocompounder.LPSetting[]\",\"name\":\"_lpSettings\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONVEX_BOOSTER\",\"outputs\":[{\"internalType\":\"contract IConvexBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THREE_CRV_LP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THREE_CRV_MINTER\",\"outputs\":[{\"internalType\":\"contract ICurve_3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_senior\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_junior\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get3CRVAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total3CRVAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lpAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSenior\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalJunior\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extraSenior\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extraJunior\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seniorMinOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_juniorMinOut\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"lpFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpSettings\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpMinterAddress\",\"type\":\"address\"},{\"internalType\":\"contract IBaseRewardPool\",\"name\":\"cvxReward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cvxPID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IMultiex.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multiexcall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seniorExpected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seniorMinOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_juniorMinOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct AConvexAutocompounder.SwapPath[]\",\"name\":\"_paths\",\"type\":\"tuple[]\"}],\"name\":\"setSwapPaths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"}],\"name\":\"sharesFromLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultShares\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableAssetCurveIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableToIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter02\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"contract IPairVault\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"senior\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"junior\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorExcess\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorExcess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"enum OLib.Tranche\",\"name\":\"tranche\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawExcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConvexAutocompounder", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000032ef5c9b4be1462b9e459a64f0a52f6e42f70f4200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002200000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000000000000000000000000000000000000000000020000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b0000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b000000000000000000000000fd5abf66b003881b88567eb9ed9c651f14dc47710000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000006400000000000000000000000094e131324b6054c0d789b190b2dac504e4361b53000000000000000000000000890f4e345b1daed0367a877a1612f86a1f86985f000000000000000000000000d4be1911f8a0df178d6e7ff5ce39919c273e2b7b000000000000000000000000000000000000000000000000000000000000001500000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000003000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd520000000000000000000000004e3fbd56cd56c3e72c1403e103b45db9da5b9d2b000000000000000000000000090185f2135308bad17527004364ebcc2d37e5f6", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}