{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = _allowances[owner][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n        }\\r\\n        _balances[to] += amount;\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance \\u003e= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ZillaToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n    \u2584\u2584\u2588\u2588\u2588\u2584\u2584\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557\\r\\n    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\\r\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\\r\\n    \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2588\u2554\u255d  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\\r\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\\r\\n    \u255a\u2550\u2580\u2580\u2580\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\\r\\n\\r\\n     Special thanks to the developer of the Banana contract (Owl of Moistness)\\r\\n     which granted us the usage of their code.\\r\\n*/\\r\\n\\r\\n// Interface to the Zilla migration contract\\r\\ninterface IZilla {\\r\\n    function zillaBalance(address _user) external view returns(uint256);\\r\\n}\\r\\n\\r\\ncontract ZillaToken is ERC20, Ownable {\\r\\n    bool public isLastUpdateFixed = false;\\r\\n\\r\\n    uint256 constant public DAILY_RATE = 5 ether;\\r\\n    uint256 constant public ARISE_ISSUANCE = 150 ether;\\r\\n    uint256 constant public END_YIELD = 1955833200; // 24 december 2031, unix timestamp\\r\\n\\r\\n    mapping(address =\\u003e uint256) public rewards;\\r\\n    mapping(address =\\u003e uint256) public lastUpdate;\\r\\n    mapping(address =\\u003e bool) public grantedContracts;\\r\\n\\r\\n    IZilla public zillaContract;\\r\\n\\r\\n    event RewardPaid(address indexed user, uint256 reward);\\r\\n\\r\\n    // Constructor expects the address of the zilla contract, where the function balanceOG is implemented\\r\\n    constructor(address _zilla, address[] memory _addresses, uint256[] memory _timestamps) ERC20(\\\"ZillaToken\\\", \\\"$ZILLA\\\"){\\r\\n        zillaContract = IZilla(_zilla);\\r\\n        for(uint256 i=0; i \\u003c _addresses.length; i++){\\r\\n            lastUpdate[_addresses[i]] = _timestamps[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //we can call this function only one time\\r\\n    function setLastUpdateOnlyOnce(address[] memory _addresses, uint256[] memory _timestamps) external onlyOwner {\\r\\n        require(isLastUpdateFixed == false, \\\"lastUpdate already set\\\");\\r\\n        for(uint256 i=0; i \\u003c _addresses.length; i++){\\r\\n            require(_timestamps[i] != 0, \\\"timestamp is zero\\\");\\r\\n            lastUpdate[_addresses[i]] = _timestamps[i];\\r\\n        }\\r\\n        isLastUpdateFixed = true;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003c b ? a : b;\\r\\n    }\\r\\n\\r\\n    // Update the rewards for the given user when one or more Zillas arise\\r\\n    function updateRewardOnArise(address _user, uint256 _amount) external {\\r\\n        require(msg.sender == address(zillaContract), \\\"Not the Zilla contract\\\");\\r\\n\\r\\n        // Check the timestamp of the block against the end yield date\\r\\n        uint256 time = min(block.timestamp, END_YIELD);\\r\\n        uint256 timerUser = lastUpdate[_user];\\r\\n\\r\\n        // If one or more Zillas of the user were already minted, update the rewards to the new yield\\r\\n        if (timerUser \\u003e 0) {\\r\\n            rewards[_user] += getPendingRewards(_user, time, _amount) + (_amount * ARISE_ISSUANCE);\\r\\n        }\\r\\n        else {\\r\\n            rewards[_user] += (_amount * ARISE_ISSUANCE);\\r\\n        }\\r\\n        // Update the mapping to the newest update\\r\\n        lastUpdate[_user] = time;\\r\\n    }\\r\\n\\r\\n    // Called on transfers / update rewards in the Zilla contract, allowing the new owner to get $ZILLA tokens\\r\\n    function updateReward(address _from, address _to) external {\\r\\n        require(msg.sender == address(zillaContract), \\\"Not the Zilla contract\\\");\\r\\n\\r\\n        uint256 time = min(block.timestamp, END_YIELD);\\r\\n        uint256 timerFrom = lastUpdate[_from];\\r\\n        if (timerFrom \\u003e 0) {\\r\\n            rewards[_from] += getPendingRewards(_from, time, 0);\\r\\n        }\\r\\n        if (timerFrom != END_YIELD) {\\r\\n            lastUpdate[_from] = time;\\r\\n        }\\r\\n        if (_to != address(0)) {\\r\\n            uint256 timerTo = lastUpdate[_to];\\r\\n            if (timerTo \\u003e 0) {\\r\\n                rewards[_to] += getPendingRewards(_to, time, 0);\\r\\n            }\\r\\n            if (timerTo != END_YIELD) {\\r\\n                lastUpdate[_to] = time;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Mint $ZILLA tokens and send them to the user\\r\\n    function getReward(address _to) external {\\r\\n        require(msg.sender == address(zillaContract), \\\"Not the Zilla contract\\\");\\r\\n        uint256 reward = rewards[_to];\\r\\n        if (reward \\u003e 0) {\\r\\n            rewards[_to] = 0;\\r\\n            _mint(_to, reward);\\r\\n            emit RewardPaid(_to, reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Burn a given amount of $ZILLA for utility\\r\\n    function burn(address _from, uint256 _amount) external {\\r\\n        require(grantedContracts[msg.sender] || msg.sender == address(zillaContract), \\\"Contract is not granted to burn\\\");\\r\\n        _burn(_from, _amount);\\r\\n    }\\r\\n\\r\\n    // Returns the amount of claimable $ZILLA tokens for the user (existing + pending)\\r\\n    function getTotalClaimable(address _user) external view returns(uint256) {\\r\\n        uint256 time = min(block.timestamp, END_YIELD);\\r\\n        return rewards[_user] + getPendingRewards(_user, time, 0);\\r\\n    }\\r\\n\\r\\n    // Set contracts allowed to perform operations on the contract (for future utility)\\r\\n    function setGrantedContracts(address _address, bool _isGranted) public onlyOwner {\\r\\n        grantedContracts[_address] = _isGranted;\\r\\n    }\\r\\n\\r\\n    // Get the pending rewards for the given user\\r\\n    // @dev make sure that lastUpdate[user] is greater than 0\\r\\n    function getPendingRewards(address _user, uint256 timeStamp, uint256 _amount) internal view returns(uint256) {\\r\\n        require(lastUpdate[_user] \\u003e 0 \\u0026\\u0026 lastUpdate[_user] \\u003c= timeStamp);\\r\\n        return (zillaContract.zillaBalance(_user) - _amount)  * (DAILY_RATE * (timeStamp - lastUpdate[_user])) / 86400;  //86400 = 3600s * 24h = 1 day in seconds\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zilla\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARISE_ISSUANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAILY_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"END_YIELD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"grantedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLastUpdateFixed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isGranted\",\"type\":\"bool\"}],\"name\":\"setGrantedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"name\":\"setLastUpdateOnlyOnce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateRewardOnArise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zillaContract\",\"outputs\":[{\"internalType\":\"contract IZilla\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZillaToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005a7869db28eb513945167293638d59a336a8919000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000001a6000000000000000000000000000000000000000000000000000000000000000cf00000000000000000000000096236adb640ec620a85898378375cedf03ca21ff00000000000000000000000061c2ef52beb76c3165068d469f4bde8646bf4ffa00000000000000000000000089c03ee669e720ac1a44efc84555ce3fd4b3a7a7000000000000000000000000a19de6dec591d1793b438eca85fbd01a759421ea000000000000000000000000592234c63ac3c816b0485761bc00fc1b932d18fd00000000000000000000000080d1265186dc2849eed3b467c98563beb64eb52f000000000000000000000000a81eac3009bd6e6cce36602d6851fda789ddc3bb000000000000000000000000442d9282f4babf805023697188f54614e46aac8900000000000000000000000002b31016fb9054d6fb622d214a77e568f2d723c500000000000000000000000040b4bafd43359393f8b73008b0ef914e7d4ed91b0000000000000000000000008c8ddf9a1390886525866f651ad0ef1947d108970000000000000000000000008a97e0c4f2f5c74c6e995649a0d5c3be167eb394000000000000000000000000e136c0d0039afae187f022a5e2f37b8bf5d176a90000000000000000000000008fb15c2edc9a15c5c56a94e779a39b4cc6f3000f00000000000000000000000076ee4cc690276c6fd3315dd4eed41ebbe39a2a730000000000000000000000000c16d08cdd114f9830d3cbb1045df4e8da6bae8c0000000000000000000000005c716bedae1ce71794f39a2055cbae235723524f0000000000000000000000001a95fc83a6237276b462b18f1cd99c5ce668e77d000000000000000000000000572aa01c9ccc5b8dafb38caee6540cfd1696c6d2000000000000000000000000c0c51f164f403b34040f276220249ad3832b7b0a000000000000000000000000ed9862379d70e8b1e1e88c13439a3d90db45a1bc0000000000000000000000002b31fb197135fb23aa1d44de47eade6507e3cc880000000000000000000000004e10b980073d5db98a10352a70c7bddc78cca0a6000000000000000000000000b46782e99cddc4ef6e235ad84b16ddfe9b807d410000000000000000000000007747e718cce4053acf2279b80fe899ada3a271bc00000000000000000000000040ebf8a762801d1706d9d16a8abfec4c452d15e500000000000000000000000020178eb14b550fae1c5439e188d5474f523dd8ed0000000000000000000000003734df97c998853384b654d0d38ad5bf51ed99b1000000000000000000000000b4374bd294601a2b69dc6c0de1243f047ebe6e29000000000000000000000000b1d4792f43098535da6b589afdd762df94490c66000000000000000000000000022d861f369a3c6202b44901933047592e6f60e20000000000000000000000004f4de140e8fe383101d6f9073e718ccceed6fb57000000000000000000000000961651bf13116f56d4383fa36f9ee3240cd40bc8000000000000000000000000d7ed008295e7ddd477a557e7646525e2cdfbb9be000000000000000000000000a13f828b6266eb627c01a16bf3fcdfd4c40176ab0000000000000000000000002f3a54bf279d3cdc31dd363e380c69346efd2d9d0000000000000000000000007cb1fa27a7f5fabc055e1cdbda3821f249300159000000000000000000000000b77f661fdf4f5908b37db4536a150e549c934c5b000000000000000000000000bce914db8317789b5b24da3293bdff8966472d630000000000000000000000009d408add896e37e66c90732c2fb69a3f232a11b2000000000000000000000000ca3dff8c740dee29528916eb049cea48f500d387000000000000000000000000f7c92bd13897875548718dccc3c7e797e19ef8cb00000000000000000000000047a34adbec20ef723d5aa96fc662b2ac9a11fd3f0000000000000000000000004994e58813dcccb6cc27261b7627e400a99be1e9000000000000000000000000ffa1f0f91340043b36baaa89a0af2027c35e3d880000000000000000000000004a276742ff9314eb99512c5c2ca616360b39b1aa00000000000000000000000093c8c816ad9ff9e6f03534e5180f743c66ab595400000000000000000000000007d7d7127b3dc08b727a5e64e77228be2970f175000000000000000000000000a69814485958fd719b08c196bd6c18cdb4ca16f5000000000000000000000000026e1ef925b894386ec17a65fb7ea08edc2c4b7c000000000000000000000000d185ceed9f87e5cc54c16e9b3f4947a1c6daad93000000000000000000000000ab0763815f1d2df957526e18edc062469ae05b1400000000000000000000000064319cba4599ee2e75e9e2f97cde627e7ed7069b00000000000000000000000084099ed1dccee843de67f2fc54c6c4cc004c9be3000000000000000000000000ffa247bf482e4407972aac04c0ab737aabf411a40000000000000000000000005318dfe99a20d2b5e6fe26c416b8ec832fd71bd10000000000000000000000001b6284b63ad8e0b0e254500869896153a2260d1c000000000000000000000000624bba98c41b0f5ca5044b570580b7bddd78ad54000000000000000000000000650b0e3864afa96877a2493b495fe2436f725adb0000000000000000000000006a6743b85899cc2571c8034e209f74f5a92a0e9b000000000000000000000000e729ccf01db7df463f304279fc14ab585fb668b100000000000000000000000045568768647e3c0195d955443d4e70e5b94ed2750000000000000000000000007800b59697b9fa8f87d248dfa7634e1ec7b5bf4c0000000000000000000000000b0f1188926eadba3a848d66fb3dfc447bc2cf80000000000000000000000000662b13e0cf54e5062984a2120f68cd6d84851f0a0000000000000000000000004a86514e1289ca33def6c532f48237f6f5a37c1900000000000000000000000058a385c1a18bf73ff263f530f00cee4edd886e2b000000000000000000000000115ff71b91d2679ccea6aa55ac8e6721e4417d3500000000000000000000000055fe0c55359f02292e95b67763d41d01813991880000000000000000000000008f791f061d7f36dc07de081ad88f87d71be1585e000000000000000000000000fdcf2e28941e797217d113c47deb6227ada337dd000000000000000000000000a97b197ba266fce09b004bc8884c1aef5d30b983000000000000000000000000a683c1b815997a7fa38f6178c84675fc4c79ac2b000000000000000000000000110137b312d08a8216e55da1995bab7972d16030000000000000000000000000a5fe8f281da9c360ee81d1e75208edeb26d9e5ab00000000000000000000000046c6889c937f81d8e49144296ff9ee6449ea6567000000000000000000000000b1c288f13681f6913772e7fc90e3757bca74f072000000000000000000000000e6bfdfa6c1c262aa1d2989dfbe59e5a8419ab5eb000000000000000000000000d764524e391d8e8b9b46799fa32855331b43a2b8000000000000000000000000614448f53b6e611cb59ea46a0261dedd1d54e77400000000000000000000000089244834b6defbfa8698cf52d4143c84f35a6c2000000000000000000000000014413512e7aabc4a523ef3bfdbdaaa166557f33200000000000000000000000072eba299088937ceaab3d7bde6234aee81a8bf76000000000000000000000000ba0f8493cf26ebc23a15daf89759fe518df7809a00000000000000000000000097eda3c9f1e4c7ef743b552ab687aa49fca804c00000000000000000000000007dcc089e5a74517b770876bb1a503ece7c66a12e00000000000000000000000062ab2e32743007526fea398d03b42c75d2d4de6c000000000000000000000000365b94ab73ab228544a66e46b90be4deb946a6de00000000000000000000000079ff87356787e9ef76ebc15e47cab074c2326a890000000000000000000000008f83eb7abb2bcf57347298d9bf09a2d2841906430000000000000000000000008b73704918df1e5bcfd4d0ea2a04a7b534a06f800000000000000000000000002be0628ca4cd0105de98c8cc6f8e4ebbf222783a000000000000000000000000b1e436ff825f116d390356f606f059ddadec96a6000000000000000000000000fc4acbc937653de7814d0abdf9f7ec320122d18e0000000000000000000000000076e5443162c4eacdb38fffafc678f70730cfd70000000000000000000000006da3d343e73480e51434372a8550f3de8a8f9d610000000000000000000000004edc5e546633f22357841b2d23a100a461160e80000000000000000000000000bd2e0db33a588178ef11869c002bd5c9392246340000000000000000000000008163cceec5de6b788762051a175fdbd4b2a4466d0000000000000000000000002f0128b40c374a9312bf4a35cccf7b272947208900000000000000000000000023a35f4a77c84c7dd86ec26cee235927f222f1300000000000000000000000008f46bef3174ca471b29c28cf84b127be27b0d07800000000000000000000000059aba0fe636e62afb713395eaf57bbc60333cc1e0000000000000000000000008ff51d4a456dced3480bfdaeabf0469c4646b5160000000000000000000000009b5f95ffb5cb01723bbd1e8e76f310358351f4830000000000000000000000005261851f6024a62dfc804e672d68bcfae59b0c84000000000000000000000000d88709ab5e70736de88d0af5bbd0b4aa913cd16e00000000000000000000000024c589954a62cbc60e9e8e3820a80a4949805942000000000000000000000000386b56d6d1c06711e50cbfb89837615b67ae552e0000000000000000000000003055d970653a2d1785a989d2699ea50c0c96f15900000000000000000000000050002a9b8e9938d509de84dc3eb3aabfbec1451e00000000000000000000000062580db084197ca7fd79e8d68b065ac6848c14c7000000000000000000000000cff292a153b7bb79d9d91d35a737d65b4ad534b3000000000000000000000000787ccb43496076b9e726c7ebc07aeea679c78d0d000000000000000000000000a3aaf59806b4dd3a08769d07c93bf62470b8db0200000000000000000000000074db20cdfe40ff8d9a5db34f176a45e747d168c000000000000000000000000028d604a4205549ea2510d03f2addc673ded2187f00000000000000000000000026e7709c399f866fc4f1cc8a86120511566616a60000000000000000000000003d4e362042881f83a6b49abf8f24c35680bfa043000000000000000000000000c84dc786868894803b77866d94e504428425e0f30000000000000000000000006ea6229bdde4379a397f4feea1f60b79af699db80000000000000000000000007309e1582d611d3ef9dba6fce709f177240e0fd9000000000000000000000000064953dce96ea74651264ba0dce1ad6bab6209770000000000000000000000009b180d1401e35652a82c7bb37c7a754e48310d9300000000000000000000000006ea4ddfb6b3195657d02ff93a91ab73fa168678000000000000000000000000b6bd3a43e28fc804ef8f560b99e61b0c7656a28f000000000000000000000000fbc419b6abcc77a6b376e711b3f0f51932ef36d0000000000000000000000000cb6327ccdbee89f709ff104efd736f801e4279ed000000000000000000000000da37896e56f12d640230a9e5115756a5cda9a58100000000000000000000000035e937251c564aeb8813f8d3de8578106918f9090000000000000000000000001d297a7ee129b04ea957de8269e78cc76587705500000000000000000000000085b55d9bd4a067488528c400be0cb2c52164ad32000000000000000000000000dcddfdb72af4be4b2270ed29c855f7cf9691d9700000000000000000000000001e85e37e236b4cee54ad24af03a02687c4493466000000000000000000000000550cfb8eb4d96d519de53459c2b9ed590560aa1f000000000000000000000000f424dd28154ad4461d075e3374649a85b8362ed0000000000000000000000000d0fc3e28a14436cd6707bfc0e28e0c5bf3d780ab00000000000000000000000012597670e281c6c7ec3461a659e1a124b43226c0000000000000000000000000b18ec35495748904279dcce0c4eddb49bf4ef2700000000000000000000000002d7e41ca9358c06c6c1098a0968a440e0947e15e000000000000000000000000abe5e08ea53aa36f3c20a2ad5e2a00effaa38ff50000000000000000000000006164e51d5469ce0225c0054ecf6fd98db1e8ecdd00000000000000000000000045db28b2d4878ad124c037d4558acf5db3bba6a5000000000000000000000000936244ee57e2be5bad5f4eae3bbfabd79e43ceaf000000000000000000000000ef11030761f02e47274b47c005f6b2ef3603eaae0000000000000000000000002ad72ce36e99b13f611944484719b4ed8780ba19000000000000000000000000d97e1ae149259a5ccfb23395e1ab8810acd114a800000000000000000000000070af8f0b836448799844b062f489b02a47d93fcd000000000000000000000000cb8ae1ec0f07fac6455450b3826046411ec9dfb4000000000000000000000000661d3005506aea3def4422606b1a31be9cef1d80000000000000000000000000afc1473f4203c9cc91a0aa403806e9adb00225720000000000000000000000008e2fe9250f97d8ba2d59aac671f03ff667b011e100000000000000000000000091be053f5b16bad5ec5021d4ca0c9dc9faedfc160000000000000000000000004917ad2caf5c30462bcfba6c2baa91cc46cd1f100000000000000000000000000fa8a9bbda0676156a255ac461dc63787951d69a0000000000000000000000000cf29c333a84064723b3c8d4630a5af539f18e3c00000000000000000000000077e62fb482027eca49b160e6f7b699fd3621f68f00000000000000000000000036b2b845a0c2fd77f4a42dfb84fe868fa245481f000000000000000000000000d64a1e1064a93693cb4399840f5b5f2ff66be3b30000000000000000000000003b5beb1a8180f3c2b61be4f921a362a41588b26a000000000000000000000000b0c2bac688bb62ecec22043c3da2a424f013453e000000000000000000000000e013df7bed2c8d4e1642e8cd71cbe4fb2585633600000000000000000000000020ce68b0a875023d1ce516a928a082ac5627fa7f00000000000000000000000089abf6673de7e578e3c3cdecc4cc18c0b9adcc700000000000000000000000007b84c20dc1a4ebc5308f10ae861047671ffd3024000000000000000000000000df0968243fe7f6b09a6d7e2d0167d201ad5a343a000000000000000000000000049c3e528a719e9bf8c7791a1bb5ee72e2a40566000000000000000000000000b6bddb7f4309a99e56053976f492d8ea86185af1000000000000000000000000609e1de29d5e543a6eba15b73d9ed335e90004b3000000000000000000000000ef7df990491bfb633a0817d7ea65b3fe22ad9eca00000000000000000000000046438fa5c98adcd6042dbd5d40404b0dc770f573000000000000000000000000e143cf6c5dd98d83a3b87e96b490861c22e4fd640000000000000000000000004c7e3daa6771f1085a726b3c07a0bbab607fe6250000000000000000000000009f5c28da8f8622d36dc0f596142d66bb1512bab5000000000000000000000000e2a835ca86dcfea83c93a6c636192a730c0b56510000000000000000000000003643420ae82819edd3f8bf99bb4543ccce478757000000000000000000000000375982f25c7a3a6d2b07d219147ffa4da55972050000000000000000000000008854a7308477808db425a19697e4f8143f97ec6000000000000000000000000056e66a54cc82654b4c12bc607b428dcfd4a67d21000000000000000000000000794b4fb5af3076a6a9a01250cc23592c75c90fed000000000000000000000000cefbdcfb977b1f40f0ce434831705705a072e69a000000000000000000000000e3618bd1297577fb99f1b830a2398c57e6b6783c0000000000000000000000007cf67a1a486d5716517a989f180112ba26d1afcf0000000000000000000000005b0f253aa56085c180cdc5f08b5eeb63530e5daa000000000000000000000000ec95db83d50e19316eb35d53db41f069be49e1760000000000000000000000008f70ab33b86fe746d5287c2934d6968cf8cd225e000000000000000000000000a8d4b86c98c847c59b0c263a15254fe4a2d1558b0000000000000000000000000f853e0871eb8960fb837774d09162a601313b3a00000000000000000000000004490fb053a8ff110bea35f22d955c0092aae5f8000000000000000000000000dd62ad243355bf2cb3f27c292382d1914978c6450000000000000000000000001783cfc786977144012d2752819542f563832e3f000000000000000000000000b7a71161f0dbd4bce61a56e33001a673f3b0933b0000000000000000000000004ebb8d641a2f28b78538c33414628abffdd04a2f000000000000000000000000828e08e545d16d5b3aee56bff3e173c99fcb3b4c0000000000000000000000009887e32f34c1cae7890cd79f516852ef52c01e0d000000000000000000000000005ff202c271d2419fb03ec873dedfe163a5ce36000000000000000000000000e9a788dacd3de5cf4bee7ec2fb3cd361108254640000000000000000000000003790277699ee7653839c4fb85b4875f0c5b6439f000000000000000000000000c85f9734ebe0dd391cab0b6af188a57bb7c32638000000000000000000000000072b4b0810badcc50a4d469b27619ea8b0b8f064000000000000000000000000df834389c99ae101c5b7ce7a43897b9e86d14508000000000000000000000000a6f95ffa23ca53d33390f3ad6d1da06f8a456ccf000000000000000000000000ed7d193a767fb9ee5c076bf4f9fb1647d76853e300000000000000000000000064072ae2095677ab7e8df63e1fbae89b6366d6b400000000000000000000000010792b889f699d10573cd47851a37fb47737ac1300000000000000000000000001495ea04866cca4271fb77d0f04985f1e4b82f0000000000000000000000000002b87138a6d4351ac3877b59e2ad953fed9999800000000000000000000000000000000000000000000000000000000000000cf0000000000000000000000000000000000000000000000000000000061a3eaa600000000000000000000000000000000000000000000000000000000619979a60000000000000000000000000000000000000000000000000000000061a60b260000000000000000000000000000000000000000000000000000000061d8d4660000000000000000000000000000000000000000000000000000000061a4f6b80000000000000000000000000000000000000000000000000000000061bb2f43000000000000000000000000000000000000000000000000000000006196ad8f0000000000000000000000000000000000000000000000000000000061abb2dc0000000000000000000000000000000000000000000000000000000061a0b9e60000000000000000000000000000000000000000000000000000000061a513a60000000000000000000000000000000000000000000000000000000061a42e260000000000000000000000000000000000000000000000000000000061a20b660000000000000000000000000000000000000000000000000000000061a52a260000000000000000000000000000000000000000000000000000000061a0dba6000000000000000000000000000000000000000000000000000000006197e4a60000000000000000000000000000000000000000000000000000000061a5a5e600000000000000000000000000000000000000000000000000000000619fef660000000000000000000000000000000000000000000000000000000061a432a60000000000000000000000000000000000000000000000000000000061cae9e60000000000000000000000000000000000000000000000000000000061db1b8600000000000000000000000000000000000000000000000000000000619ebfa60000000000000000000000000000000000000000000000000000000061986ba60000000000000000000000000000000000000000000000000000000061ab24260000000000000000000000000000000000000000000000000000000061a7d1a60000000000000000000000000000000000000000000000000000000061a0dba60000000000000000000000000000000000000000000000000000000061a20b660000000000000000000000000000000000000000000000000000000061adb6460000000000000000000000000000000000000000000000000000000061bc5e260000000000000000000000000000000000000000000000000000000061a312a600000000000000000000000000000000000000000000000000000000619828260000000000000000000000000000000000000000000000000000000061a3cfa60000000000000000000000000000000000000000000000000000000061a22d260000000000000000000000000000000000000000000000000000000061cc4fa60000000000000000000000000000000000000000000000000000000061a054a60000000000000000000000000000000000000000000000000000000061a37ea60000000000000000000000000000000000000000000000000000000061e1266600000000000000000000000000000000000000000000000000000000619a87a6000000000000000000000000000000000000000000000000000000006198af260000000000000000000000000000000000000000000000000000000061a108a60000000000000000000000000000000000000000000000000000000061ae0aa600000000000000000000000000000000000000000000000000000000619ca3a60000000000000000000000000000000000000000000000000000000061a11f26000000000000000000000000000000000000000000000000000000006199bd260000000000000000000000000000000000000000000000000000000061bcfba60000000000000000000000000000000000000000000000000000000061bc042600000000000000000000000000000000000000000000000000000000619ebfa60000000000000000000000000000000000000000000000000000000061d051a600000000000000000000000000000000000000000000000000000000619c1ca60000000000000000000000000000000000000000000000000000000061a513a60000000000000000000000000000000000000000000000000000000061a0fd66000000000000000000000000000000000000000000000000000000006198af26000000000000000000000000000000000000000000000000000000006198af260000000000000000000000000000000000000000000000000000000061adc72600000000000000000000000000000000000000000000000000000000619bd9260000000000000000000000000000000000000000000000000000000061c7e1a60000000000000000000000000000000000000000000000000000000061b242a600000000000000000000000000000000000000000000000000000000618650a60000000000000000000000000000000000000000000000000000000061aa74a600000000000000000000000000000000000000000000000000000000619a44260000000000000000000000000000000000000000000000000000000061a405a60000000000000000000000000000000000000000000000000000000061986ba600000000000000000000000000000000000000000000000000000000619a442600000000000000000000000000000000000000000000000000000000619ebfa600000000000000000000000000000000000000000000000000000000619ebfa60000000000000000000000000000000000000000000000000000000061a7516600000000000000000000000000000000000000000000000000000000619979a60000000000000000000000000000000000000000000000000000000061c8ac26000000000000000000000000000000000000000000000000000000006198f2a60000000000000000000000000000000000000000000000000000000061cbc8a60000000000000000000000000000000000000000000000000000000061aa6a8600000000000000000000000000000000000000000000000000000000619ebfa600000000000000000000000000000000000000000000000000000000619ce7260000000000000000000000000000000000000000000000000000000061a1fa860000000000000000000000000000000000000000000000000000000061b7fec6000000000000000000000000000000000000000000000000000000006198af260000000000000000000000000000000000000000000000000000000061a5ffe60000000000000000000000000000000000000000000000000000000061c2690600000000000000000000000000000000000000000000000000000000619a442600000000000000000000000000000000000000000000000000000000619f03260000000000000000000000000000000000000000000000000000000061986ba60000000000000000000000000000000000000000000000000000000061a881260000000000000000000000000000000000000000000000000000000061aae0a60000000000000000000000000000000000000000000000000000000061b4a2260000000000000000000000000000000000000000000000000000000061a24ee600000000000000000000000000000000000000000000000000000000619a00a600000000000000000000000000000000000000000000000000000000619ce72600000000000000000000000000000000000000000000000000000000619d2aa6000000000000000000000000000000000000000000000000000000006199bd260000000000000000000000000000000000000000000000000000000061a773260000000000000000000000000000000000000000000000000000000061a3cfa600000000000000000000000000000000000000000000000000000000619ca3a60000000000000000000000000000000000000000000000000000000061b30d260000000000000000000000000000000000000000000000000000000061c976a600000000000000000000000000000000000000000000000000000000619d6e260000000000000000000000000000000000000000000000000000000061c36626000000000000000000000000000000000000000000000000000000006198af260000000000000000000000000000000000000000000000000000000061a0dba60000000000000000000000000000000000000000000000000000000061a032e60000000000000000000000000000000000000000000000000000000061a36b5c00000000000000000000000000000000000000000000000000000000619f46a60000000000000000000000000000000000000000000000000000000061b43ce60000000000000000000000000000000000000000000000000000000061a37ea60000000000000000000000000000000000000000000000000000000061a054a600000000000000000000000000000000000000000000000000000000619979a60000000000000000000000000000000000000000000000000000000061a108a60000000000000000000000000000000000000000000000000000000061cca0a60000000000000000000000000000000000000000000000000000000061c45da600000000000000000000000000000000000000000000000000000000619979a60000000000000000000000000000000000000000000000000000000061a1e9a600000000000000000000000000000000000000000000000000000000619a44260000000000000000000000000000000000000000000000000000000061b60a260000000000000000000000000000000000000000000000000000000061b30d26000000000000000000000000000000000000000000000000000000006198af260000000000000000000000000000000000000000000000000000000061bb39a60000000000000000000000000000000000000000000000000000000061b1bba600000000000000000000000000000000000000000000000000000000619e9de60000000000000000000000000000000000000000000000000000000061a098260000000000000000000000000000000000000000000000000000000061986ba60000000000000000000000000000000000000000000000000000000061a8e66600000000000000000000000000000000000000000000000000000000619d6e26000000000000000000000000000000000000000000000000000000006198f2a60000000000000000000000000000000000000000000000000000000061c0572600000000000000000000000000000000000000000000000000000000619acb2600000000000000000000000000000000000000000000000000000000619d2aa60000000000000000000000000000000000000000000000000000000061a054a6000000000000000000000000000000000000000000000000000000006198af2600000000000000000000000000000000000000000000000000000000619a44260000000000000000000000000000000000000000000000000000000061a37ea60000000000000000000000000000000000000000000000000000000061a2ea260000000000000000000000000000000000000000000000000000000061a9d2a60000000000000000000000000000000000000000000000000000000061b28626000000000000000000000000000000000000000000000000000000006199bd260000000000000000000000000000000000000000000000000000000061a3e3e60000000000000000000000000000000000000000000000000000000061c106a60000000000000000000000000000000000000000000000000000000061c3a9a60000000000000000000000000000000000000000000000000000000061ad9a2600000000000000000000000000000000000000000000000000000000619fabe60000000000000000000000000000000000000000000000000000000061a1a62600000000000000000000000000000000000000000000000000000000619828260000000000000000000000000000000000000000000000000000000061ad40260000000000000000000000000000000000000000000000000000000061a0dba6000000000000000000000000000000000000000000000000000000006198f2a60000000000000000000000000000000000000000000000000000000061db21260000000000000000000000000000000000000000000000000000000061bd1226000000000000000000000000000000000000000000000000000000006199bd260000000000000000000000000000000000000000000000000000000061b0ada6000000000000000000000000000000000000000000000000000000006199bd2600000000000000000000000000000000000000000000000000000000619d2aa600000000000000000000000000000000000000000000000000000000619a44260000000000000000000000000000000000000000000000000000000061bc8b2600000000000000000000000000000000000000000000000000000000619df52600000000000000000000000000000000000000000000000000000000619e7c2600000000000000000000000000000000000000000000000000000000619a00a60000000000000000000000000000000000000000000000000000000061f18aa600000000000000000000000000000000000000000000000000000000619a442600000000000000000000000000000000000000000000000000000000619f46a60000000000000000000000000000000000000000000000000000000061a11f260000000000000000000000000000000000000000000000000000000061986ba6000000000000000000000000000000000000000000000000000000006198282600000000000000000000000000000000000000000000000000000000619828260000000000000000000000000000000000000000000000000000000061a22d2600000000000000000000000000000000000000000000000000000000619e9de6000000000000000000000000000000000000000000000000000000006199bd260000000000000000000000000000000000000000000000000000000061a270a60000000000000000000000000000000000000000000000000000000061a24ee60000000000000000000000000000000000000000000000000000000061b8ad260000000000000000000000000000000000000000000000000000000061c07fa60000000000000000000000000000000000000000000000000000000061a37ea600000000000000000000000000000000000000000000000000000000619ca3a60000000000000000000000000000000000000000000000000000000061a98f2600000000000000000000000000000000000000000000000000000000619a87a600000000000000000000000000000000000000000000000000000000619a4426000000000000000000000000000000000000000000000000000000006198af260000000000000000000000000000000000000000000000000000000061a3aba60000000000000000000000000000000000000000000000000000000061b4a2260000000000000000000000000000000000000000000000000000000061a881260000000000000000000000000000000000000000000000000000000061b529260000000000000000000000000000000000000000000000000000000061b3d7a600000000000000000000000000000000000000000000000000000000619ebfa600000000000000000000000000000000000000000000000000000000619a87a6000000000000000000000000000000000000000000000000000000006198f2a600000000000000000000000000000000000000000000000000000000619b95a600000000000000000000000000000000000000000000000000000000619bd92600000000000000000000000000000000000000000000000000000000619a44260000000000000000000000000000000000000000000000000000000061bc04260000000000000000000000000000000000000000000000000000000061af18a600000000000000000000000000000000000000000000000000000000615923a600000000000000000000000000000000000000000000000000000000619e7c26000000000000000000000000000000000000000000000000000000006199bd260000000000000000000000000000000000000000000000000000000061a8c4a6000000000000000000000000000000000000000000000000000000006198f2a6000000000000000000000000000000000000000000000000000000006198f2a600000000000000000000000000000000000000000000000000000000615248a600000000000000000000000000000000000000000000000000000000619a00a6000000000000000000000000000000000000000000000000000000006198af260000000000000000000000000000000000000000000000000000000061bb39a60000000000000000000000000000000000000000000000000000000061eff5a60000000000000000000000000000000000000000000000000000000061986ba600000000000000000000000000000000000000000000000000000000619e7c26000000000000000000000000000000000000000000000000000000006109c6260000000000000000000000000000000000000000000000000000000061b961260000000000000000000000000000000000000000000000000000000061a440380000000000000000000000000000000000000000000000000000000061c3aa5d0000000000000000000000000000000000000000000000000000000061d88fbd0000000000000000000000000000000000000000000000000000000061b94b5d0000000000000000000000000000000000000000000000000000000061ca6edd0000000000000000000000000000000000000000000000000000000061707a1d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://98d6a93520d63a06aa934f9c34a4310ad47ff02fa1ea451d8f998beec6e28775"}]}