{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.11;\r\n\r\n/** \r\n * @title Simple vote system\r\n * @dev Implements voting process.\r\n */\r\ncontract SimpleVote {\r\n\r\n    struct Voter {\r\n        bool voted;  // if true, that person already voted\r\n        uint vote;   // index of the voted proposal\r\n    }\r\n\r\n    struct Proposal {\r\n        string name;   // short name\r\n        uint voteCount; // number of accumulated votes\r\n    }\r\n\r\n    mapping(address => Voter) public voters;\r\n\r\n    Proposal[] public proposals;\r\n    \r\n    address[] public votersAddress;\r\n\r\n    /** \r\n     * @dev Create a new vote to choose one of 'proposalNames'.\r\n     * @param proposalNames names of proposals\r\n     */\r\n    constructor(string[] memory proposalNames) {\r\n        for (uint i = 0; i < proposalNames.length; i++) {\r\n            proposals.push(Proposal({\r\n                name: proposalNames[i],\r\n                voteCount: 0\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns all voters addresses.\r\n     * @return voters addresses.\r\n     */\r\n    function votersAddresses() external view returns (address[] memory) {\r\n        return votersAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Give your vote to proposal 'proposals[proposal].name'.\r\n     * @param proposal index of proposal in the proposals array\r\n     */\r\n    function vote(uint proposal) public {\r\n        Voter storage sender = voters[msg.sender];\r\n        require(!sender.voted, \"Already voted.\");\r\n        sender.voted = true;\r\n        sender.vote = proposal;\r\n        votersAddress.push(msg.sender);\r\n        proposals[proposal].voteCount += 1;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"proposalNames\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votersAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SimpleVote", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000014506f7374706f6e6520746865206c697374696e67000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a506f7374706f6e6520746865206c697374696e67202b204f544300000000000000000000000000000000000000000000000000000000000000000000000000124c697374696e67206d61696e7461696e65640000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d0b7477e7bed81e3d25a13fd0450b651a66128d5bc0c9be9bb4eb818013b87f"}]}