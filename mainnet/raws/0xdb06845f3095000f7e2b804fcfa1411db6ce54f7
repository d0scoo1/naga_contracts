{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract HamsterTigerHype {\r\n\r\n    // \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u0443\u0434\u0430 \u0437\u0430\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0435\u0433\u043e \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0432 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435\r\n    struct User {\r\n        uint256 deposit;\r\n        uint256 time;\r\n        uint256 timeDeposit;\r\n        uint256 round;\r\n        uint idx;\r\n    }\r\n\r\n    //\u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u0445 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435\r\n    mapping(address => User) users;\r\n    //\u041c\u0430\u0441\u0441\u0438\u0432 \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u0435\u043f\u043e\u0437\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e (minValueInvest - \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430)\r\n    address payable[] investors = new address payable[](5);\r\n    //\u0410\u0434\u0440\u0435\u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u0430\u0444\r\n    address payable lastInvestor;\r\n    //\u0420\u0435\u043a\u043b\u0430\u043c\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441\r\n    address payable advertising;\r\n    //\u0411\u0430\u043b\u0430\u043d\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\r\n    uint256 totalBalance;\r\n    //\u0412\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430 \u043d\u0430 \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441\r\n    uint256 advertisingLast;\r\n    //\u0412\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0438\u043d\u0432\u0435\u0441\u0442\u0430\r\n    uint256 lastInvest;\r\n    //\u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043c\u0430\u044f \u043d\u0430 \u0432\u044b\u0432\u043e\u0434\r\n    uint256 withdrawSum;\r\n    //\u0412\u0440\u0435\u043c\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0439\u0442\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043b\u0430\u0442\u044b\r\n    uint256 withdrawTime = 1 days;\r\n    //\u0412\u0440\u0435\u043c\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0439\u0442\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043d\u0430 \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u044b\u0439 \u0441\u0447\u0451\u0442\r\n    uint256 advertisingTime = 1 days;\r\n    //\u0412\u0440\u0435\u043c\u044f \u0438\u0433\u0440\u044b \u0442\u0438\u0433\u0440\u043e\u0432\r\n    uint256 tigerGameTime = 1 hours;\r\n    // \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0434\u043b\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0422\u0438\u0433\u0440\u043e\u0432\r\n    uint256 minValueInvest = 0.05 ether;\r\n    // \u0420\u0430\u0443\u043d\u0434\r\n    uint256 round = 1;\r\n    //\u0422\u0438\u043f \u0438\u0433\u0440\u044b \u0425\u043e\u043c\u044f\u043a\u0438/\u0422\u0438\u0433\u0440\u044b\r\n    enum GameType {Hamster, Tiger}\r\n    GameType game = GameType.Hamster;\r\n    // \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432\r\n    uint index = 0;\r\n    // \u041f\u043e\u0434\u0441\u0447\u0451\u0442 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432\r\n    uint8 investedCount = 0;\r\n    // \u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u0441\u0442\u0430\u0440\u0442\u0430 \u0438\u0433\u0440\u044b \u0425\u043e\u043c\u044f\u043a\u043e\u0432\r\n    event StartHamsterGame();\r\n    // \u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u0441\u0442\u0430\u0440\u0442\u0430 \u0438\u0433\u0440\u044b \u0422\u0438\u0433\u0440\u043e\u0432\r\n    event StartTigerGame();\r\n\r\n    constructor() {\r\n        advertising = payable(msg.sender);\r\n        advertisingLast = block.timestamp;\r\n        lastInvest = block.timestamp;\r\n    }\r\n\r\n    //\u0412\u044b\u0432\u043e\u0434 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438\u043b\u0438 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u0432\u043e\u0430\u043d\u0438\u0435\r\n    receive() external payable {\r\n        withdrawDividends();\r\n        if (msg.value > 0) {\r\n            invest();\r\n        } else {\r\n            withdraw();\r\n        }\r\n    }\r\n\r\n    //\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432(\u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 0 eth)\r\n    function withdraw() internal {\r\n        User storage user = users[msg.sender];\r\n        if (user.round != round) {\r\n            user.round = round;\r\n            user.deposit = 0;\r\n            user.timeDeposit = 0;\r\n            user.time = 0;\r\n        }\r\n        uint256 payout = user.deposit / 5;\r\n        uint256 period = block.timestamp - user.time;\r\n        // \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0440\u0435\u0436\u0438\u043c\u0430 \u0442\u0438\u0433\u0440\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\r\n        require(game == GameType.Hamster, \"Invest only in Tiger Game\");\r\n        // \u0435\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u044b, \u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432\u044b\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0443\u043c\u043c\u0430 \u0435\u0433\u043e \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u044b\u0445 \u0432\u044b\u043f\u043b\u0430\u0442\r\n        require(period > withdrawTime, \"Very early to withdraw\");\r\n        require(payout > 0, \"The deposit is empty\");\r\n        if (payable(msg.sender).send(payout)) {\r\n            user.time = block.timestamp;\r\n        }\r\n        if (withdrawSum > address(this).balance && investedCount >= 5) {\r\n            game = GameType.Tiger;\r\n            emit StartTigerGame();\r\n            lastInvest = block.timestamp;\r\n        }\r\n    }\r\n\r\n    //\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u043d\u0432\u0435\u0441\u0442 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\r\n    function invest() internal {\r\n        uint balance = address(this).balance;\r\n        investmentOperations();\r\n        if (game == GameType.Hamster) { // \u0420\u0435\u0436\u0438\u043c \u0425\u043e\u043c\u044f\u043a\u043e\u0432\r\n            //\u0435\u0441\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 5 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0441 \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0435 (\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438-minValueInvest), \u0442\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0436\u0438\u043c \u0442\u0438\u0433\u0440\u043e\u0432\r\n            if (withdrawSum > balance && investedCount >= 5) {\r\n                game = GameType.Tiger;\r\n                emit StartTigerGame();\r\n            }\r\n        } else { // \u0420\u0435\u0436\u0438\u043c \u0422\u0438\u0433\u0440\u043e\u0432\r\n            // \u0435\u0441\u043b\u0438 \u0441\u0443\u043c\u043c\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0443\u043c\u043c\u044b \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0432 2 \u0440\u0430\u0437\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0436\u0438\u043c \u0445\u043e\u043c\u044f\u043a\u043e\u0432\r\n            if ((withdrawSum * 2) < balance) {\r\n                game = GameType.Hamster;\r\n                emit StartHamsterGame();\r\n            } else {\r\n                if (msg.value >= minValueInvest && block.timestamp - lastInvest > tigerGameTime) {\r\n                    multiplier();\r\n                    game = GameType.Hamster;\r\n                    emit StartHamsterGame();\r\n                }\r\n            }\r\n        }\r\n        if(msg.value >= minValueInvest){\r\n            lastInvest = block.timestamp;\r\n        }\r\n    }\r\n\r\n    //\u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044f\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043d\u0432\u0435\u0441\u0442\r\n    function investmentOperations() internal {\r\n        User storage user = users[msg.sender];\r\n        if (user.round != round) {\r\n            user.round = round;\r\n            user.deposit = 0;\r\n            user.timeDeposit = 0;\r\n            user.time = 0;\r\n        }\r\n        // \u0415\u0441\u043b\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440 \u043d\u0435 \u043c\u044b \u0437\u0430\u043d\u043e\u0441\u0438\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432\r\n        if (lastInvestor != msg.sender) {\r\n            if (msg.value >= minValueInvest) {\r\n                if (investors[user.idx] != msg.sender) {\r\n                    investedCount++;\r\n                    uint idx = addInvestor(payable(msg.sender));\r\n                    user.idx = idx;\r\n                }\r\n                lastInvestor = payable(msg.sender);\r\n            }\r\n        }\r\n        //\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\r\n        user.deposit += msg.value;\r\n        user.timeDeposit = block.timestamp;\r\n        if(user.time == 0){\r\n            user.time = block.timestamp;\r\n        }\r\n\r\n        totalBalance += msg.value / 10;\r\n        withdrawSum += msg.value / 5;\r\n    }\r\n\r\n    // \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043b\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438\u043d\u0432\u0435\u0442\u043e\u0440\u043e\u0432\r\n    function getIndex(uint num) internal view returns (uint){\r\n        return (index + num) % 5;\r\n    }\r\n\r\n    //\u0414\u043e\u0431\u043e\u0432\u043b\u044f\u0435\u043c \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\r\n    function addInvestor(address payable investor) internal returns (uint) {\r\n        index = getIndex(1);\r\n        investors[index] = investor;\r\n        return index;\r\n    }\r\n\r\n    //\u0412\u044b\u043f\u043b\u0430\u0442\u0430 \u043f\u0440\u0438\u0437\u043e\u0432\u044b\u0445 \u043f\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044e \u0440\u0430\u0443\u043d\u0434\u0430\r\n    function multiplier() internal {\r\n        uint256 one = address(this).balance / 100;\r\n        uint256 fifty = one * 50;\r\n        uint256 seven = one * 7;\r\n        address payable[] memory sorted = sort();\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            address payable to = sorted[i];\r\n            if (i == 0) {\r\n                to.transfer(fifty);\r\n            } else if (i >= 1 && i <= 4) {\r\n                to.transfer(seven);\r\n            }\r\n        }\r\n        advertising.transfer(one * 22);\r\n        investors = new address payable[](5);\r\n        lastInvestor = payable(this);\r\n        withdrawSum = 0;\r\n        totalBalance = 0;\r\n        investedCount = 0;\r\n        round++;\r\n    }\r\n\r\n    //\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043d\u0430 \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441(\u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438)\r\n    function withdrawDividends() internal {\r\n        if (totalBalance > 0 && address(this).balance > totalBalance && block.timestamp - advertisingLast > advertisingTime) {\r\n            advertising.transfer(totalBalance);\r\n            totalBalance = 0;\r\n            advertisingLast = block.timestamp;\r\n        }\r\n    }\r\n\r\n    // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\r\n    function sort() internal view returns (address payable[] memory) {\r\n        address payable[] memory sorting = investors;\r\n        uint256 l = 5;\r\n        for(uint i = 0; i < l; i++) {\r\n            for(uint j = i+1; j < l ;j++) {\r\n                uint us1 = 0;\r\n                uint us2 = 0;\r\n                if(investors[i] != address(0)){\r\n                    us1 = users[sorting[i]].timeDeposit;\r\n                }\r\n                if(investors[j] != address(0)){\r\n                    us2 = users[sorting[j]].timeDeposit;\r\n                }\r\n                if(us1 < us2) {\r\n                    address payable temp = sorting[i];\r\n                    sorting[i] = sorting[j];\r\n                    sorting[j] = temp;\r\n                }\r\n            }\r\n        }\r\n        return sorting;\r\n    }\r\n\r\n    function getInvestors() public view returns (address payable [] memory) {\r\n        return investors;\r\n    }\r\n\r\n    function getDeposit(address _address) public view returns (uint256) {\r\n        return users[_address].round != round ? 0 : users[_address].deposit;\r\n    }\r\n\r\n    function getWithdrawSum() public view returns (uint256) {\r\n        return withdrawSum;\r\n    }\r\n\r\n    function getRound() public view returns (uint256) {\r\n        return round;\r\n    }\r\n\r\n    function getLastInvestor() public view returns (address payable) {\r\n        return lastInvestor;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getGame() public view returns (GameType) {\r\n        return game;\r\n    }\r\n}\r\n////////////////////////////////////////////////////////////////////\r\n//                                              ......            //\r\n//        .#########.   .###############################.         //\r\n//      .#############.  .###############################.        //\r\n//     .###############.  .###############################.       //\r\n//    .#################.   .##############################.      //\r\n//    .#################.               .##################.      //\r\n//    .################.                  .###############.       //\r\n//     .##############.                    .#############.        //\r\n//       .###########.                       .#########.          //\r\n//         .#########.                                            //\r\n//          .########.                      .########.            //\r\n//           .#######.                      .#######.             //\r\n//            .#######.                    .#######.              //\r\n//             .#######.                  .#######.               //\r\n//              .########.              .#######.                 //\r\n//               .#######.            .########.                  //\r\n//                 .####.   .#################.                   //\r\n//                  .##.  .##################.                    //\r\n//                   ..  .##################.                     //\r\n//                      .##################.                      //\r\n//                      .#################.                       //\r\n//                      .#################.                       //\r\n//                       .###############.                        //\r\n//                        .############.                          //\r\n//                          .########.                            //\r\n//                                                                //\r\n////////////////////////////////////////////////////////////////////\r\n///  Contract developed by Hamster Tiger Hype team, 2021, v.1.0  ///\r\n////////////////////////////////////////////////////////////////////\r\n//\r\n// -----BEGIN PGP MESSAGE-----\r\n//\r\n// jA0EBwMCQW6yY/xrvcLC0sCqAZy5Lr+tMdR0XQuyEL6qX/h+dkjeQZYq4xCVoDgs\r\n// bTGv0k2d4hmq220GytehNYXGSdxcxy32Bmd6ZMfa4BkYV3zogkZS76xfMLRA3tlS\r\n// 2sAB/k/Vo3FlqB+h6mu4bz+5/d9sjR6GLd9o0OyUxEbMGXQlBrGJx/PiZ8DMPdhk\r\n// 65HR+6oWuSabKGHHnM/ym1nooC2W3MoTD4QmvCAC5i77AOOepjJR7/AY/QKmu5Wd\r\n// JfGEa7Him0Fopuloiwa/lYrh0NhheaZIyqMc9p8SGppJUwh097+91T5Gr6yxNhyp\r\n// vFlc0kOLOTlwSgigPAzsxdSIIeEJF4HxAsjVFQpsOpzqCjgdwzhlzC85pJ53qWU6\r\n// 0AEY7A+yBbbeJLfc6hFmfopDDRZRbtZD0ihKeoSW5LNuHl5rirlv5qb87ujnoOc2\r\n// iouiKgv+WfkXsUalcyiahOdfdPuc+phTtali1K8ZnEljo1p2TmezD7BALPA=\r\n// =Vw53\r\n//\r\n// -----END PGP MESSAGE-----", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartHamsterGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartTigerGame\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGame\",\"outputs\":[{\"internalType\":\"enum HamsterTigerHype.GameType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestors\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastInvestor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HamsterTigerHype", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ceb1dcecf9ec56af0100314c9472c5de089cfc0f0c7b252f35369bdc9de81e89"}]}