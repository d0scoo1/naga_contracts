{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/evm/interfaces/ICORE.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ICORE {\r\n    function deposit() external payable;\r\n    function withdraw(uint amount) external;\r\n}\r\n\r\n// File: contracts/evm/interfaces/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function mint(address _to, uint256 _amount) external;\r\n    function burnFrom(address account, uint256 amount) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/lib/ChainId.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary ChainId {\r\n    int256 public constant zyxChainId = 55;\r\n\r\n\r\n    function getChainId() internal view returns (int256 chainId) {\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/lib/Pausable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Pausable is OwnableUpgradeable {\r\n    bool public pause;\r\n\r\n    modifier isPause() {\r\n        require(!pause, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    function togglePause() public virtual onlyOwner {\r\n        pause = !pause;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Signature.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Signature {\r\n    function getMessageHash(\r\n        address token,\r\n        address user,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        int256 chainIdTo,\r\n        bytes32 hash,\r\n        uint256 deadline\r\n    ) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(token, user, amount, fee, chainIdTo, hash, deadline));\r\n    }\r\n\r\n    function getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32){\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\r\n    }\r\n\r\n    function verify(\r\n        address _token,\r\n        address _user,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        int256 _chainId,\r\n        bytes32 _hash,\r\n        uint256 _deadline,\r\n        address _signer,\r\n        bytes memory _signature\r\n    ) internal pure returns (bool) {\r\n        bytes32 messageHash = getMessageHash(_token, _user, _amount, _fee,_chainId, _hash, _deadline);\r\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\r\n\r\n        return recoverSigner(ethSignedMessageHash, _signature) == _signer;\r\n    }\r\n\r\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) internal pure returns (address){\r\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\r\n        return ecrecover(_ethSignedMessageHash, v, r, s);\r\n    }\r\n\r\n    function splitSignature(bytes memory sig) internal pure returns (bytes32 r, bytes32 s, uint8 v){\r\n        require(sig.length == 65, \"invalid signature length\");\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/evm/PandorumMainPeriphery.sol\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract PandorumMainPeriphery is OwnableUpgradeable, Pausable {\r\n    struct Token {\r\n        bool isSupported;\r\n        uint256 minLimit;\r\n        uint256 balance;\r\n    }\r\n\r\n    int256 public chainId;\r\n\r\n    /*** Stable Tokens ***/\r\n    address public wzyx;\r\n    address public icore;\r\n\r\n    /*** Managing Accounts ***/\r\n    address public oracle;\r\n    address public migrator;\r\n    address public feeTo;\r\n\r\n    /*** map of tokenInfo ****/\r\n    mapping(address => Token) public tokenInfo;\r\n    /*** map of used hashes from zyx to chain ***/\r\n    mapping(bytes32 => bool) public checkedHashes;\r\n\r\n    function initialize(\r\n        address _icore,\r\n        address _wzyx,\r\n        address _oracle,\r\n        address[] calldata _tokens\r\n    ) public initializer {\r\n        OwnableUpgradeable.__Ownable_init();\r\n        chainId = ChainId.getChainId();\r\n        icore = _icore;\r\n        wzyx = _wzyx;\r\n\r\n        addCoin(_icore, 10000000000000000, 0);\r\n        addCoin(_wzyx, 10000000000000000000, 0);\r\n\r\n        // setting system\r\n        oracle = _oracle;\r\n\r\n        for(uint i = 0; i < _tokens.length;i++){\r\n            addCoin(_tokens[i],10000000000000000000,0);\r\n        }\r\n    }\r\n\r\n\r\n    /**** Modifiers ****/\r\n    modifier notZeroMigrator() {\r\n        require(migrator != address(0), \"PandorumMainPeriphery: Zero Migrator\");\r\n        _;\r\n    }\r\n\r\n    modifier supportedToken(address token) {\r\n        require(tokenInfo[token].isSupported, \"PandorumMainPeriphery: Not supported token\");\r\n        _;\r\n    }\r\n\r\n    modifier newHash(bytes32 hash) {\r\n        require(!checkedHashes[hash], \"PandorumMainPeriphery: Duplicated hash\");\r\n        _;\r\n        checkedHashes[hash] = true;\r\n    }\r\n\r\n    /*** Events ****/\r\n    event NewDeposit(\r\n        address token,\r\n        address indexed user,\r\n        uint256 amount,\r\n        int256 chainIdFrom,\r\n        int256 chainIdTo\r\n    );\r\n\r\n    event NewTransfer(\r\n        address token,\r\n        address indexed user,\r\n        address oracle,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        int256 chainIdFrom,\r\n        int256 chainIdTo,\r\n        bytes32 indexed hash,\r\n        uint256 deadline\r\n    );\r\n\r\n\r\n    function redeemToken(\r\n        address _token,\r\n        address _user,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        int256 _chainId,\r\n        bytes32 _hash,\r\n        uint256 _deadline,\r\n        bytes memory _signature\r\n    ) external supportedToken(_token) newHash(_hash) isPause {\r\n        require(chainId == _chainId, \"PandorumMainPeriphery: not target network\");\r\n        require(Signature.verify(_token, _user, _amount, _fee, _chainId, _hash, _deadline, oracle, _signature), \"PandorumMainPeriphery: Bad signature\");\r\n        require(_deadline >= block.timestamp, \"PandorumMainPeriphery: Expired\");\r\n        require(msg.sender == _user, \"PandorumMainPeriphery: not sender\");\r\n\r\n\r\n        if (_token == wzyx) {\r\n            IERC20(_token).mint(_user, _amount);\r\n            IERC20(_token).mint(feeTo, _fee);\r\n        } else {\r\n            require(tokenInfo[_token].balance >= (_amount + _fee));\r\n            IERC20(_token).transfer(_user, _amount);\r\n            IERC20(_token).transfer(feeTo, _fee);\r\n            tokenInfo[_token].balance = tokenInfo[_token].balance - _amount;\r\n            tokenInfo[_token].balance = tokenInfo[_token].balance - _fee;\r\n        }\r\n\r\n        emit NewTransfer(\r\n            _token,\r\n            _user,\r\n            oracle,\r\n            _amount,\r\n            _fee,\r\n            ChainId.zyxChainId,\r\n            _chainId,\r\n            _hash,\r\n            _deadline\r\n        );\r\n    }\r\n\r\n    function deposit() external payable isPause {\r\n        address token = icore;\r\n        // gas savings (copy use less gas)\r\n        uint256 amount = msg.value;\r\n        // gas savings (copy use less gas)\r\n        Token storage currentBalance = tokenInfo[token];\r\n        // for saving gas\r\n        require(amount >= currentBalance.minLimit, \"PandorumMainPeriphery: amount is too small\");\r\n        ICORE(token).deposit{value : amount}();\r\n        currentBalance.balance = currentBalance.balance + amount;\r\n        emit NewDeposit(token, msg.sender, amount, chainId, ChainId.zyxChainId);\r\n    }\r\n\r\n    function depositToken(address token, uint256 amount) external supportedToken(token) isPause {\r\n        Token storage currentBalance = tokenInfo[token];\r\n        require(amount >= currentBalance.minLimit, \"PandorumMainPeriphery: amount is too small\");\r\n        if (token == wzyx) {\r\n            IERC20(token).burnFrom(msg.sender, amount);\r\n        } else {\r\n            IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n            currentBalance.balance = currentBalance.balance + amount;\r\n        }\r\n        emit NewDeposit(token, msg.sender, amount, chainId, ChainId.zyxChainId);\r\n    }\r\n\r\n\r\n    /***** Managing coins *****/\r\n    function addCoin(address _token, uint256 _minSwap, uint256 _balance) public onlyOwner {\r\n        Token storage token = tokenInfo[_token];\r\n        token.isSupported = true;\r\n        token.balance = _balance;\r\n        updateCoin(_token, _minSwap);\r\n    }\r\n\r\n    function updateCoin(address _token, uint256 _minSwap) public onlyOwner supportedToken(_token) {\r\n        tokenInfo[_token].minLimit = _minSwap;\r\n    }\r\n\r\n    function removeCoin(address _token) public onlyOwner {\r\n        delete tokenInfo[_token];\r\n    }\r\n\r\n    /***** Managing contract operator *****/\r\n    function setOracle(address _oracle) public onlyOwner {\r\n        oracle = _oracle;\r\n    }\r\n\r\n    function setMigrator(address _migrator) public onlyOwner {\r\n        migrator = _migrator;\r\n    }\r\n\r\n    function setFeeTo(address _feeTo) public onlyOwner {\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    /**** Setting Wrapped ZYX contract ****/\r\n    function setWzyx(address _wzyx) public onlyOwner {\r\n        wzyx = _wzyx;\r\n    }\r\n\r\n    /**** Setting Main Wrapped token such as WETH,WBNB ****/\r\n    function setIcore(address _icore) public onlyOwner {\r\n        icore = _icore;\r\n    }\r\n\r\n    /*** Admin function ***/\r\n    function checkHash(bytes32 hash) public onlyOwner {\r\n        checkedHashes[hash] = true;\r\n    }\r\n\r\n    function migrate(address _token) public onlyOwner notZeroMigrator {\r\n        uint256 currentBalance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(migrator, currentBalance);\r\n        delete tokenInfo[_token];\r\n    }\r\n\r\n    function migrateETH() public onlyOwner notZeroMigrator {\r\n        payable(migrator).transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"chainIdFrom\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"chainIdTo\",\"type\":\"int256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"chainIdFrom\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"chainIdTo\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"NewTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"addCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"checkHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"checkedHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"icore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_icore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wzyx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_chainId\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"redeemToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_icore\",\"type\":\"address\"}],\"name\":\"setIcore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wzyx\",\"type\":\"address\"}],\"name\":\"setWzyx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minSwap\",\"type\":\"uint256\"}],\"name\":\"updateCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wzyx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PandorumMainPeriphery", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c0de5b95226b9aac99dff144e559e0565e53c85252a38e7d3e7463ff5a079df5"}]}