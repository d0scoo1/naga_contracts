{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\n/**\\n * @author InsureDAO\\n * @title InsureDAO vault contract\\n * @notice\\n * SPDX-License-Identifier: GPL-3.0\\n */\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IOwnership.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\n\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\ncontract Vault is IVault {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * Storage\\n     */\\n\\n    address public override token;\\n    IController public controller;\\n    IRegistry public registry;\\n    IOwnership public immutable ownership;\\n\\n    mapping(address => uint256) public override debts;\\n    mapping(address => uint256) public attributions;\\n    uint256 public totalAttributions;\\n\\n    address public keeper; //keeper can operate utilize(), if address zero, anyone can operate.\\n    uint256 public balance; //balance of underlying token\\n    uint256 public totalDebt; //total debt balance. 1debt:1token\\n\\n    uint256 private constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation\\n\\n\\n\\n    event ControllerSet(address controller);\\n    event KeeperChanged(address keeper);\\n\\n    modifier onlyOwner() {\\n        require(\\n            ownership.owner() == msg.sender,\\n            \\\"Caller is not allowed to operate\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMarket() {\\n        require(\\n            IRegistry(registry).isListed(msg.sender),\\n            \\\"ERROR_ONLY_MARKET\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _token,\\n        address _registry,\\n        address _controller,\\n        address _ownership\\n    ) {\\n        require(_token != address(0), \\\"ERROR_ZERO_ADDRESS\\\");\\n        require(_registry != address(0), \\\"ERROR_ZERO_ADDRESS\\\");\\n        require(_ownership != address(0), \\\"ERROR_ZERO_ADDRESS\\\");\\n        //controller can be zero\\n\\n        token = _token;\\n        registry = IRegistry(_registry);\\n        controller = IController(_controller);\\n        ownership = IOwnership(_ownership);\\n    }\\n\\n    /**\\n     * Vault Functions\\n     */\\n\\n    /**\\n     * @notice A market contract can deposit collateral and get attribution point in return\\n     * @param  _amount amount of tokens to deposit\\n     * @param _from sender's address\\n     * @param _beneficiaries beneficiary's address array\\n     * @param _shares funds share within beneficiaries (100% = 1e6)\\n     * @return _allocations attribution amount generated from the transaction\\n     */\\n    function addValueBatch(\\n        uint256 _amount,\\n        address _from,\\n        address[2] calldata _beneficiaries,\\n        uint256[2] calldata _shares\\n    ) external override onlyMarket returns (uint256[2] memory _allocations) {\\n        \\n        require(_shares[0] + _shares[1] == 1000000, \\\"ERROR_INCORRECT_SHARE\\\");\\n\\n        uint256 _attributions;\\n        uint256 _pool = valueAll();\\n        if (totalAttributions == 0) {\\n            _attributions = _amount;\\n        } else {\\n            require(_pool != 0, \\\"ERROR_VALUE_ALL_IS_ZERO\\\"); //should never triggered\\n            _attributions = (_amount * totalAttributions) / _pool;\\n        }\\n        IERC20(token).safeTransferFrom(_from, address(this), _amount);\\n\\n        balance += _amount;\\n        totalAttributions += _attributions;\\n\\n        uint256 _allocation = (_shares[0] * _attributions) / MAGIC_SCALE_1E6;\\n        attributions[_beneficiaries[0]] += _allocation;\\n        _allocations[0] = _allocation;\\n\\n        _allocation = (_shares[1] * _attributions) / MAGIC_SCALE_1E6;\\n        attributions[_beneficiaries[1]] += _allocation;\\n        _allocations[1] = _allocation;\\n    }\\n\\n    /**\\n     * @notice A market contract can deposit collateral and get attribution point in return\\n     * @param  _amount amount of tokens to deposit\\n     * @param _from sender's address\\n     * @param _beneficiary beneficiary's address\\n     * @return _attributions attribution amount generated from the transaction\\n     */\\n\\n    function addValue(\\n        uint256 _amount,\\n        address _from,\\n        address _beneficiary\\n    ) external override onlyMarket returns (uint256 _attributions) {\\n\\n        if (totalAttributions == 0) {\\n            _attributions = _amount;\\n        } else {\\n            uint256 _pool = valueAll();\\n            _attributions = (_amount * totalAttributions) / _pool;\\n        }\\n        IERC20(token).safeTransferFrom(_from, address(this), _amount);\\n        balance += _amount;\\n        totalAttributions += _attributions;\\n        attributions[_beneficiary] += _attributions;\\n    }\\n\\n    /**\\n     * @notice an address that has balance in the vault can withdraw underlying value\\n     * @param _amount amount of tokens to withdraw\\n     * @param _to address to get underlying tokens\\n     * @return _attributions amount of attributions burnet\\n     */\\n    function withdrawValue(uint256 _amount, address _to)\\n        external\\n        override\\n        returns (uint256 _attributions)\\n    {\\n        require(_to != address(0), \\\"ERROR_ZERO_ADDRESS\\\");\\n        \\n        uint256 _valueAll = valueAll();\\n        require(\\n            attributions[msg.sender] != 0 &&\\n                underlyingValue(msg.sender, _valueAll) >= _amount,\\n            \\\"WITHDRAW-VALUE_BADCONDITIONS\\\"\\n        );\\n\\n        _attributions = _divRoundUp(totalAttributions * _amount, valueAll());\\n        uint256 _available = available();\\n\\n        require(\\n            attributions[msg.sender] >= _attributions,\\n            \\\"WITHDRAW-VALUE_BADCONDITIONS\\\"\\n        );\\n        attributions[msg.sender] -= _attributions;\\n\\n        totalAttributions -= _attributions;\\n\\n        if (_available < _amount) {\\n            //when USDC in this contract isn't enough\\n            uint256 _shortage;\\n            unchecked {\\n                _shortage = _amount - _available;\\n            }\\n            _unutilize(_shortage);\\n\\n            require(available() >= _amount, \\\"Withdraw amount > Available\\\");\\n        }\\n\\n        balance -= _amount;\\n        IERC20(token).safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice an address that has balance in the vault can transfer underlying value\\n     * @param _amount sender of value\\n     * @param _destination reciepient of value\\n     */\\n\\n    function transferValue(uint256 _amount, address _destination)\\n        external\\n        override\\n        returns (uint256 _attributions)\\n    {\\n        require(_destination != address(0), \\\"ERROR_ZERO_ADDRESS\\\");\\n        \\n        uint256 _valueAll = valueAll();\\n        \\n        require(\\n            attributions[msg.sender] != 0 &&\\n                underlyingValue(msg.sender, _valueAll) >= _amount,\\n            \\\"TRANSFER-VALUE_BADCONDITIONS\\\"\\n        );\\n        _attributions = _divRoundUp(totalAttributions * _amount, valueAll());\\n        attributions[msg.sender] -= _attributions;\\n        attributions[_destination] += _attributions;\\n    }\\n\\n    /**\\n     * @notice a registered contract can borrow balance from the vault\\n     * @param _amount borrow amount\\n     * @param _to borrower's address\\n     */\\n    function borrowValue(uint256 _amount, address _to) external onlyMarket override {\\n        if (_amount != 0) {\\n            debts[msg.sender] += _amount;\\n            totalDebt += _amount;\\n\\n            IERC20(token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice an address that has balance in the vault can offset an address's debt\\n     * @param _amount debt amount to offset\\n     * @param _target borrower's address\\n     */\\n\\n    function offsetDebt(uint256 _amount, address _target)\\n        external\\n        override\\n        returns (uint256 _attributions)\\n    {\\n        uint256 _valueAll = valueAll();\\n        require(\\n            attributions[msg.sender] != 0 &&\\n                underlyingValue(msg.sender, _valueAll) >= _amount,\\n            \\\"ERROR_REPAY_DEBT_BADCONDITIONS\\\"\\n        );\\n         _attributions = _divRoundUp(totalAttributions * _amount, valueAll());\\n        attributions[msg.sender] -= _attributions;\\n        totalAttributions -= _attributions;\\n        balance -= _amount;\\n        debts[_target] -= _amount;\\n        totalDebt -= _amount;\\n    }\\n\\n    /**\\n     * @notice a registerd market can transfer their debt to system debt\\n     * @param _amount debt amount to transfer\\n     * @dev will be called when CDS could not afford when resume the market.\\n     */\\n    function transferDebt(uint256 _amount) external onlyMarket override {\\n\\n        if(_amount != 0){\\n            debts[msg.sender] -= _amount;\\n            debts[address(0)] += _amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice anyone can repay the system debt by sending tokens to this contract\\n     * @param _amount debt amount to repay\\n     * @param _target borrower's address\\n     */\\n    function repayDebt(uint256 _amount, address _target) external override {\\n        uint256 _debt = debts[_target];\\n\\n        if (_debt > _amount) {\\n            unchecked {\\n                debts[_target] = _debt - _amount;\\n            }\\n        } else {\\n            debts[_target] = 0;\\n            _amount = _debt;\\n        }\\n        totalDebt -= _amount;\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @notice an address that has balance in the vault can withdraw value denominated in attribution\\n     * @param _attribution amount of attribution to burn\\n     * @param _to beneficiary's address\\n     * @return _retVal number of tokens withdrawn from the transaction\\n     */\\n    function withdrawAttribution(uint256 _attribution, address _to)\\n        external\\n        override\\n        returns (uint256 _retVal)\\n    {\\n        require(_to != address(0), \\\"ERROR_ZERO_ADDRESS\\\");\\n\\n        _retVal = _withdrawAttribution(_attribution, _to);\\n    }\\n\\n    /**\\n     * @notice an address that has balance in the vault can withdraw all value\\n     * @param _to beneficiary's address\\n     * @return _retVal number of tokens withdrawn from the transaction\\n     */\\n    function withdrawAllAttribution(address _to)\\n        external\\n        override\\n        returns (uint256 _retVal)\\n    {\\n        require(_to != address(0), \\\"ERROR_ZERO_ADDRESS\\\");\\n        \\n        _retVal = _withdrawAttribution(attributions[msg.sender], _to);\\n    }\\n\\n    /**\\n     * @notice an address that has balance in the vault can withdraw all value\\n     * @param _attribution amount of attribution to burn\\n     * @param _to beneficiary's address\\n     * @return _retVal number of tokens withdrawn from the transaction\\n     */\\n    function _withdrawAttribution(uint256 _attribution, address _to)\\n        internal\\n        returns (uint256 _retVal)\\n    {\\n        require(\\n            attributions[msg.sender] >= _attribution,\\n            \\\"WITHDRAW-ATTRIBUTION_BADCONS\\\"\\n        );\\n        uint256 _available = available();\\n        _retVal = (_attribution * valueAll()) / totalAttributions;\\n\\n        unchecked {\\n            attributions[msg.sender] -= _attribution;\\n        }\\n        totalAttributions -= _attribution;\\n\\n        if (_available < _retVal) {\\n            uint256 _shortage;\\n            unchecked {\\n                _shortage = _retVal - _available;\\n            }\\n            _unutilize(_shortage);\\n        }\\n\\n        balance -= _retVal;\\n        IERC20(token).safeTransfer(_to, _retVal);\\n    }\\n\\n    /**\\n     * @notice an address that has balance in the vault can transfer value denominated in attribution\\n     * @param _amount amount of attribution to transfer\\n     * @param _destination reciepient of attribution\\n     */\\n    function transferAttribution(uint256 _amount, address _destination)\\n        external\\n        override\\n    {\\n        require(_destination != address(0), \\\"ERROR_ZERO_ADDRESS\\\");\\n\\n        require(\\n            _amount != 0 && attributions[msg.sender] >= _amount,\\n            \\\"TRANSFER-ATTRIBUTION_BADCONS\\\"\\n        );\\n\\n        unchecked {\\n            attributions[msg.sender] -= _amount;\\n        }\\n        attributions[_destination] += _amount;\\n    }\\n\\n    /**\\n     * @notice utilize all available underwritten funds into the set controller.\\n     * @return _amount amount of tokens utilized\\n     */\\n    function utilize() external override returns (uint256) {\\n        require(address(controller) != address(0), \\\"ERROR_CONTROLLER_NOT_SET\\\");\\n        \\n        address _token = token;\\n        if (keeper != address(0)) {\\n            require(msg.sender == keeper, \\\"ERROR_NOT_KEEPER\\\");\\n        }\\n\\n        uint256 _amount = controller.utilizeAmount(); //balance\\n        require(_amount <= available(), \\\"EXCEED_AVAILABLE\\\");\\n\\n        if (_amount != 0) {\\n            IERC20(_token).safeTransfer(address(controller), _amount);\\n            balance -= _amount;\\n            controller.earn(_token, _amount);\\n        }\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice get attribution number for the specified address\\n     * @param _target target address\\n     * @return amount of attritbution\\n     */\\n\\n    function attributionOf(address _target)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return attributions[_target];\\n    }\\n\\n    /**\\n     * @notice get all attribution number for this contract\\n     * @return amount of all attribution\\n     */\\n    function attributionAll() external view returns (uint256) {\\n        return totalAttributions;\\n    }\\n\\n    /**\\n     * @notice Convert attribution number into underlying assset value\\n     * @param _attribution amount of attribution\\n     * @return token value of input attribution\\n     */\\n    function attributionValue(uint256 _attribution)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 _totalAttributions = totalAttributions;\\n\\n        if (_totalAttributions != 0 && _attribution != 0) {\\n            return (_attribution * valueAll()) / _totalAttributions;\\n        }\\n    }\\n\\n    /**\\n     * @notice return underlying value of the specified address\\n     * @param _target target address\\n     * @return token value of target address\\n     */\\n    function underlyingValue(address _target)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 _valueAll = valueAll();\\n        uint256 attribution = attributions[_target];\\n\\n        if (_valueAll != 0 && attribution != 0) {\\n            return (_valueAll * attribution) / totalAttributions;\\n        }\\n    }\\n    \\n    function underlyingValue(address _target, uint256 _valueAll)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 attribution = attributions[_target];\\n        if (_valueAll != 0 && attribution != 0) {\\n            return (_valueAll * attribution) / totalAttributions;\\n        }\\n    }\\n\\n    /**\\n     * @notice return underlying value of this contract\\n     * @return all token value of the vault\\n     */\\n    function valueAll() public view returns (uint256) {\\n        if (address(controller) != address(0)) {\\n            return balance + controller.valueAll();\\n        } else {\\n            return balance;\\n        }\\n    }\\n\\n    /**\\n     * @notice internal function to unutilize the funds and keep utilization rate\\n     * @param _amount amount to withdraw from controller\\n     */\\n    function _unutilize(uint256 _amount) internal {\\n        require(address(controller) != address(0), \\\"ERROR_CONTROLLER_NOT_SET\\\");\\n\\n        uint256 beforeBalance = IERC20(token).balanceOf(address(this));\\n        controller.withdraw(address(this), _amount);\\n        uint256 received = IERC20(token).balanceOf(address(this)) - beforeBalance;\\n        require(received >= _amount, \\\"ERROR_INSUFFICIENT_RETURN_VALUE\\\");\\n        balance += received;\\n    }\\n\\n    /**\\n     * @notice return how much funds in this contract is available to be utilized\\n     * @return available balance to utilize\\n     */\\n    function available() public view returns (uint256) {\\n        return balance - totalDebt;\\n    }\\n\\n    /**\\n     * @notice return how much price for each attribution\\n     * @return value of one share of attribution\\n     */\\n    function getPricePerFullShare() external view returns (uint256) {\\n        return (valueAll() * MAGIC_SCALE_1E6) / totalAttributions;\\n    }\\n\\n    /**\\n     * onlyOwner\\n     */\\n\\n    /**\\n     * @notice withdraw redundant token stored in this contract\\n     * @param _token token address\\n     * @param _to beneficiary's address\\n     */\\n    function withdrawRedundant(address _token, address _to)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        uint256 _balance = balance;\\n        uint256 _tokenBalance = IERC20(_token).balanceOf(address(this));\\n        if (\\n            _token == token &&\\n            _balance < _tokenBalance\\n        ) {\\n            uint256 _utilized = controller.valueAll();\\n            uint256 _actualValue = IERC20(token).balanceOf(address(this)) + _utilized;\\n            uint256 _virtualValue = balance + _utilized;\\n            if(_actualValue > _virtualValue){\\n                uint256 _redundant;\\n                unchecked{\\n                    _redundant = _tokenBalance - _balance;\\n                }\\n                IERC20(token).safeTransfer(_to, _redundant);\\n            }\\n        } else if (_token != address(token) && _tokenBalance != 0) {\\n            IERC20(_token).safeTransfer(\\n                _to,\\n                _tokenBalance\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice admin function to set controller address\\n     * @param _controller address of the controller\\n     */\\n    function setController(address _controller) external override onlyOwner {\\n        require(_controller != address(0), \\\"ERROR_ZERO_ADDRESS\\\");\\n\\n        if (address(controller) != address(0)) {\\n            uint256 beforeUnderlying = controller.valueAll();\\n            controller.migrate(address(_controller));\\n            require(IController(_controller).valueAll() >= beforeUnderlying, \\\"ERROR_VALUE_ALL_DECREASED\\\");\\n        }\\n        controller = IController(_controller);\\n\\n        emit ControllerSet(_controller);\\n    }\\n\\n    /**\\n     * @notice set keeper to incentivize calling utilize()\\n     * @param _keeper keeper address\\n     */\\n    function setKeeper(address _keeper) external override onlyOwner {\\n        if (keeper != _keeper) {\\n            keeper = _keeper;\\n        }\\n\\n        emit KeeperChanged(_keeper);\\n    }\\n\\n    /**\\n     * @notice internal division function to prevent underflow\\n     * @param _a number to get divided by _b\\n     * @param _b number to divide _a\\n     */\\n    function _divRoundUp(uint _a, uint _b) internal pure returns (uint256) {\\n        require(_a >= _b, \\\"ERROR_NUMERATOR_TOO_SMALL\\\");\\n        uint _c = _a/ _b;\\n        if(_c * _b != _a){\\n            _c += 1;\\n        }\\n        return _c;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOwnership.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\n//SPDX-License-Identifier: MIT\\n\\ninterface IOwnership {\\n    function owner() external view returns (address);\\n\\n    function futureOwner() external view returns (address);\\n\\n    function commitTransferOwnership(address newOwner) external;\\n\\n    function acceptTransferOwnership() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\ninterface IVault {\\n    function addValueBatch(\\n        uint256 _amount,\\n        address _from,\\n        address[2] memory _beneficiaries,\\n        uint256[2] memory _shares\\n    ) external returns (uint256[2] memory _allocations);\\n\\n    function addValue(\\n        uint256 _amount,\\n        address _from,\\n        address _attribution\\n    ) external returns (uint256 _attributions);\\n\\n    function withdrawValue(uint256 _amount, address _to)\\n        external\\n        returns (uint256 _attributions);\\n\\n    function transferValue(uint256 _amount, address _destination)\\n        external\\n        returns (uint256 _attributions);\\n\\n    function withdrawAttribution(uint256 _attribution, address _to)\\n        external\\n        returns (uint256 _retVal);\\n\\n    function withdrawAllAttribution(address _to)\\n        external\\n        returns (uint256 _retVal);\\n\\n    function transferAttribution(uint256 _amount, address _destination)\\n        external;\\n\\n    function attributionOf(address _target) external view returns (uint256);\\n\\n    function underlyingValue(address _target) external view returns (uint256);\\n\\n    function attributionValue(uint256 _attribution)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function utilize() external returns (uint256 _amount);\\n    function valueAll() external view returns (uint256);\\n\\n\\n    function token() external returns (address);\\n\\n    function borrowValue(uint256 _amount, address _to) external;\\n\\n    /*\\n    function borrowAndTransfer(uint256 _amount, address _to)\\n        external\\n        returns (uint256 _attributions);\\n    */\\n\\n    function offsetDebt(uint256 _amount, address _target)\\n        external\\n        returns (uint256 _attributions);\\n\\n    function repayDebt(uint256 _amount, address _target) external;\\n\\n    function debts(address _debtor) external view returns (uint256);\\n\\n    function transferDebt(uint256 _amount) external;\\n\\n    //onlyOwner\\n    function withdrawRedundant(address _token, address _to) external;\\n\\n    function setController(address _controller) external;\\n\\n    function setKeeper(address _keeper) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\ninterface IController {\\n    function withdraw(address, uint256) external;\\n\\n    function valueAll() external view returns (uint256);\\n\\n    function utilizeAmount() external returns (uint256);\\n\\n    function earn(address, uint256) external;\\n\\n    function migrate(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\ninterface IRegistry {\\n    function isListed(address _market) external view returns (bool);\\n\\n    function getCDS(address _address) external view returns (address);\\n\\n    function confirmExistence(address _template, address _target)\\n        external\\n        view\\n        returns (bool);\\n\\n    //onlyOwner\\n    function setFactory(address _factory) external;\\n\\n    function supportMarket(address _market) external;\\n\\n    function setExistence(address _template, address _target) external;\\n\\n    function setCDS(address _address, address _cds) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ownership\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"KeeperChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_attributions\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address[2]\",\"name\":\"_beneficiaries\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_shares\",\"type\":\"uint256[2]\"}],\"name\":\"addValueBatch\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_allocations\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attributionAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"attributionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_attribution\",\"type\":\"uint256\"}],\"name\":\"attributionValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"attributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"borrowValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"offsetDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_attributions\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownership\",\"outputs\":[{\"internalType\":\"contract IOwnership\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"repayDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAttributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"transferAttribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"transferValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_attributions\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_valueAll\",\"type\":\"uint256\"}],\"name\":\"underlyingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"underlyingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAllAttribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_retVal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_attribution\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAttribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_retVal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawRedundant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_attributions\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000a035dfd0d16f238493b374a1743b77448d9c85240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4db9926ae02469d730a25ad7422764bbd45d36f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}