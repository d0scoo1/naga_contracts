{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\npragma solidity 0.6.11;\r\n\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    string                  public description;\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        require(eta != 0, \"DssExec/spell-not-scheduled\");\r\n        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\r\n\r\n        if (SpellAction(action).officeHours()) {\r\n            uint256 day    = (castTime / 1 days + 3) % 7;\r\n            uint256 hour   = castTime / 1 hours % 24;\r\n            uint256 minute = castTime / 1 minutes % 60;\r\n            uint256 second = castTime % 60;\r\n\r\n            if (day >= 5) {\r\n                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\r\n                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\r\n                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\r\n            } else {\r\n                if (hour >= 21) {\r\n                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\r\n                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                } else if (hour < 14) {\r\n                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        description = _description;\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\nlibrary DssExecLib {\r\n    function vat()        public view returns (address) {}\r\n    function jug()        public view returns (address) {}\r\n    function spotter()    public view returns (address) {}\r\n    function getChangelogAddress(bytes32) public view returns (address) {}\r\n    function setChangelogAddress(bytes32, address) public {}\r\n    function setChangelogVersion(string memory) public {}\r\n    function authorize(address, address) public {}\r\n    function updateCollateralPrice(bytes32) public {}\r\n    function setContract(address, bytes32, bytes32, address) public {}\r\n    function increaseGlobalDebtCeiling(uint256) public {}\r\n    function setMaxTotalDAILiquidationAmount(uint256) public {}\r\n    function setIlkDebtCeiling(bytes32, uint256) public {}\r\n    function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}\r\n    function setIlkMinVaultAmount(bytes32, uint256) public {}\r\n    function setIlkLiquidationRatio(bytes32, uint256) public {}\r\n    function setIlkMinAuctionBidIncrease(bytes32, uint256) public {}\r\n    function setIlkBidDuration(bytes32, uint256) public {}\r\n    function setIlkAuctionDuration(bytes32, uint256) public {}\r\n    function setIlkStabilityFee(bytes32, uint256, bool) public {}\r\n}\r\n\r\ninterface OracleLike {\r\n    function src() external view returns (address);\r\n}\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    // Office Hours defaults to true by default.\r\n    //   To disable office hours, override this function and\r\n    //    return false in the inherited action.\r\n    function officeHours() public virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Modifier required to\r\n    modifier limited {\r\n        if (officeHours()) {\r\n            uint day = (block.timestamp / 1 days + 3) % 7;\r\n            require(day < 5, \"Can only be cast on a weekday\");\r\n            uint hour = block.timestamp / 1 hours % 24;\r\n            require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n        }\r\n        _;\r\n    }\r\n}\r\n\r\ninterface GemJoinAbstract {\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n}\r\n\r\ninterface DSTokenAbstract {\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\ninterface Initializable {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Hopeable {\r\n    function hope(address) external;\r\n}\r\n\r\ninterface Kissable {\r\n    function kiss(address) external;\r\n}\r\n\r\ninterface RwaLiquidationLike {\r\n    function ilks(bytes32) external returns (bytes32,address,uint48,uint48);\r\n    function init(bytes32, uint256, string calldata, uint48) external;\r\n}\r\n\r\ncontract DssSpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/5925c52da6f8d485447228ca5acd435997522de6/governance/votes/Executive%20vote%20-%20March%205%2C%202021.md -q -O - 2>/dev/null)\"\r\n    string public constant description =\r\n        \"2021-03-05 MakerDAO Executive Spell | Hash: 0xb9829a5159cc2270de0592c8fcb9f7cbcc79491e26ad7ded78afb7994227f18b\";\r\n\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n    uint256 constant THREE_PCT_RATE  = 1000000000937303470807876289;\r\n\r\n    uint256 constant MILLION    = 10**6;\r\n    uint256 constant WAD        = 10**18;\r\n    uint256 constant RAD        = 10**45;\r\n\r\n    address constant RWA001_OPERATOR           = 0x7709f0840097170E5cB1F8c890AcB8601d73b35f;\r\n    address constant RWA001_GEM                = 0x10b2aA5D77Aa6484886d8e244f0686aB319a270d;\r\n    address constant MCD_JOIN_RWA001_A         = 0x476b81c12Dc71EDfad1F64B9E07CaA60F4b156E2;\r\n    address constant RWA001_A_URN              = 0xa3342059BcDcFA57a13b12a35eD4BBE59B873005;\r\n    address constant RWA001_A_INPUT_CONDUIT    = 0x486C85e2bb9801d14f6A8fdb78F5108a0fd932f2;\r\n    address constant RWA001_A_OUTPUT_CONDUIT   = 0xb3eFb912e1cbC0B26FC17388Dd433Cecd2206C3d;\r\n    address constant MIP21_LIQUIDATION_ORACLE  = 0x88f88Bb9E66241B73B84f3A6E197FbBa487b1E30;\r\n    address constant SC_DOMAIN_DEPLOYER_07     = 0xDA0FaB0700A4389F6E6679aBAb1692B4601ce9bf;\r\n\r\n    function actions() public override {\r\n\r\n        // Increase ETH-A target available debt (gap) from 30M to 80M\r\n        DssExecLib.setIlkAutoLineParameters(\"ETH-A\", 2_500 * MILLION, 80 * MILLION, 12 hours);\r\n\r\n        // Decrease the bid duration (ttl) and max auction duration (tau) from 6 to 4 hours to all the ilks with liquidation on\r\n        DssExecLib.setIlkBidDuration(\"ETH-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"ETH-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"ETH-B\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"ETH-B\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"BAT-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"BAT-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"WBTC-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"WBTC-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"KNC-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"KNC-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"ZRX-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"ZRX-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"MANA-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"MANA-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"USDT-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"USDT-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"COMP-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"COMP-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"LRC-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"LRC-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"LINK-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"LINK-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"BAL-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"BAL-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"YFI-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"YFI-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"UNI-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"UNI-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"RENBTC-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"RENBTC-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"AAVE-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"AAVE-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"UNIV2DAIETH-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"UNIV2DAIETH-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"UNIV2WBTCETH-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"UNIV2WBTCETH-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"UNIV2USDCETH-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"UNIV2USDCETH-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"UNIV2ETHUSDT-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"UNIV2ETHUSDT-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"UNIV2LINKETH-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"UNIV2LINKETH-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"UNIV2UNIETH-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"UNIV2UNIETH-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"UNIV2WBTCDAI-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"UNIV2WBTCDAI-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"UNIV2AAVEETH-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"UNIV2AAVEETH-A\", 4 hours);\r\n        DssExecLib.setIlkBidDuration(\"UNIV2DAIUSDT-A\", 4 hours);\r\n        DssExecLib.setIlkAuctionDuration(\"UNIV2DAIUSDT-A\", 4 hours);\r\n\r\n        // Increase the box parameter from 15M to 20M\r\n        DssExecLib.setMaxTotalDAILiquidationAmount(20 * MILLION);\r\n\r\n        // Increase the minimum bid increment (beg) from 3% to 5% for the following collaterals\r\n        DssExecLib.setIlkMinAuctionBidIncrease(\"ETH-B\", 500);\r\n        DssExecLib.setIlkMinAuctionBidIncrease(\"UNIV2USDCETH-A\", 500);\r\n        DssExecLib.setIlkMinAuctionBidIncrease(\"UNIV2WBTCETH-A\", 500);\r\n        DssExecLib.setIlkMinAuctionBidIncrease(\"UNIV2DAIETH-A\", 500);\r\n        DssExecLib.setIlkMinAuctionBidIncrease(\"UNIV2UNIETH-A\", 500);\r\n        DssExecLib.setIlkMinAuctionBidIncrease(\"UNIV2ETHUSDT-A\", 500);\r\n        DssExecLib.setIlkMinAuctionBidIncrease(\"UNIV2LINKETH-A\", 500);\r\n        DssExecLib.setIlkMinAuctionBidIncrease(\"UNIV2WBTCDAI-A\", 500);\r\n        DssExecLib.setIlkMinAuctionBidIncrease(\"UNIV2AAVEETH-A\", 500);\r\n        DssExecLib.setIlkMinAuctionBidIncrease(\"UNIV2DAIUSDT-A\", 500);\r\n\r\n        // RWA001-A collateral deploy\r\n        bytes32 ilk = \"RWA001-A\";\r\n\r\n        address vat = DssExecLib.vat();\r\n\r\n        // Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_RWA001_A).vat() == vat, \"join-vat-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_RWA001_A).ilk() == ilk, \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_RWA001_A).gem() == RWA001_GEM, \"join-gem-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_RWA001_A).dec() == DSTokenAbstract(RWA001_GEM).decimals(), \"join-dec-not-match\");\r\n\r\n        // init the RwaLiquidationOracle\r\n        // Oracle initial price: 1060\r\n        // doc: \"https://ipfs.io/ipfs/QmdmAUTU3sd9VkdfTZNQM6krc9jsKgF2pz7W1qvvfJo1xk\"\r\n        //   MIP13c3-SP4 Declaration of Intent & Commercial Points -\r\n        //   Off-Chain Asset Backed Lender to onboard Real World Assets\r\n        //   as Collateral for a DAI loan\r\n        // tau: 30 days\r\n        RwaLiquidationLike(MIP21_LIQUIDATION_ORACLE).init(\r\n            ilk, 1060 * WAD, \"QmdmAUTU3sd9VkdfTZNQM6krc9jsKgF2pz7W1qvvfJo1xk\", 30 days\r\n        );\r\n        (,address pip,,) = RwaLiquidationLike(MIP21_LIQUIDATION_ORACLE).ilks(ilk);\r\n\r\n        // Set price feed for RWA001\r\n        DssExecLib.setContract(DssExecLib.spotter(), ilk, \"pip\", pip);\r\n\r\n        // Init RWA-001 in Vat\r\n        Initializable(vat).init(ilk);\r\n        // Init RWA-001 in Jug\r\n        Initializable(DssExecLib.jug()).init(ilk);\r\n\r\n        // Allow RWA-001 Join to modify Vat registry\r\n        DssExecLib.authorize(vat, MCD_JOIN_RWA001_A);\r\n\r\n        // Allow RwaLiquidationOracle to modify Vat registry\r\n        DssExecLib.authorize(vat, MIP21_LIQUIDATION_ORACLE);\r\n\r\n        // Increase the global debt ceiling by the ilk ceiling\r\n        DssExecLib.increaseGlobalDebtCeiling(1_000);\r\n        // Set the ilk debt ceiling\r\n        DssExecLib.setIlkDebtCeiling(ilk, 1_000);\r\n\r\n        // No dust\r\n        // DssExecLib.setIlkMinVaultAmount(ilk, 0);\r\n\r\n        // 3% stability fee\r\n        DssExecLib.setIlkStabilityFee(ilk, THREE_PCT_RATE, false);\r\n\r\n        // collateralization ratio 100%\r\n        DssExecLib.setIlkLiquidationRatio(ilk, 10_000);\r\n\r\n        // poke the spotter to pull in a price\r\n        DssExecLib.updateCollateralPrice(ilk);\r\n\r\n        // give the urn permissions on the join adapter\r\n        DssExecLib.authorize(MCD_JOIN_RWA001_A, RWA001_A_URN);\r\n\r\n        // set up the urn\r\n        Hopeable(RWA001_A_URN).hope(RWA001_OPERATOR);\r\n\r\n        // set up output conduit\r\n        Hopeable(RWA001_A_OUTPUT_CONDUIT).hope(RWA001_OPERATOR);\r\n\r\n        // Authorize the SC Domain team deployer address on the output conduit during introductory phase.\r\n        //  This allows the SC team to assist in the testing of a complete circuit.\r\n        //  Once a broker dealer arrangement is established the deployer address should be `deny`ed on the conduit.\r\n        Kissable(RWA001_A_OUTPUT_CONDUIT).kiss(SC_DOMAIN_DEPLOYER_07);\r\n\r\n        // add RWA-001 contract to the changelog\r\n        DssExecLib.setChangelogAddress(\"RWA001\", RWA001_GEM);\r\n        DssExecLib.setChangelogAddress(\"PIP_RWA001\", pip);\r\n        DssExecLib.setChangelogAddress(\"MCD_JOIN_RWA001_A\", MCD_JOIN_RWA001_A);\r\n        DssExecLib.setChangelogAddress(\"MIP21_LIQUIDATION_ORACLE\", MIP21_LIQUIDATION_ORACLE);\r\n        DssExecLib.setChangelogAddress(\"RWA001_A_URN\", RWA001_A_URN);\r\n        DssExecLib.setChangelogAddress(\"RWA001_A_INPUT_CONDUIT\", RWA001_A_INPUT_CONDUIT);\r\n        DssExecLib.setChangelogAddress(\"RWA001_A_OUTPUT_CONDUIT\", RWA001_A_OUTPUT_CONDUIT);\r\n\r\n        // bump changelog version\r\n        DssExecLib.setChangelogVersion(\"1.2.9\");\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    DssSpellAction internal action_ = new DssSpellAction();\r\n    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssSpell", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "DssExecLib:9a6c490ba30507e732d61235eff94c26aea234ef", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b2f6a2b7b8fcea717ae5615db259299ead6601e98f6421f4a6b6975dce51fcc"}]}