{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////\r\n//     __  ___         __  _             __  ___         __       __   //\r\n//    /  |/  /__ _____/ /_(_)__ ____    /  |/  /__ _____/ /_____ / /_  //\r\n//   / /|_/ / _ `/ __/ __/ / _ `/ _ \\  / /|_/ / _ `/ __/  '_/ -_) __/  //\r\n//  /_/  /_/\\_,_/_/  \\__/_/\\_,_/_//_/ /_/  /_/\\_,_/_/ /_/\\_\\\\__/\\__/   //\r\n//                                                by 0xInuarashi.eth   //\r\n/////////////////////////////////////////////////////////////////////////\r\n\r\n/*\r\n    Martian Market by 0xInuarashi for Message to Martians (Martians)\r\n    A Fully functioning on-chain CMS system that can be tapped into front-ends\r\n    and create a responsive website based on contract-specific databases.\r\n\r\n    ** THIS IS A DECENTRALIZED AND TRUSTLESS WHITELIST MARKETPLACE CREATION SYSTEM **\r\n\r\n    We chose not to use a proxy contract as multiple approvals have to be done\r\n    for this contract. In this case, we chose the most decentralized approach\r\n    which is to create an immutable contract with minimal owner access and \r\n    allow full control of contract owners' functions over their own database, \r\n    which is not editable or tamperable even by the Ownable owner themself.\r\n\r\n    >>>> Governance Model <<<<\r\n\r\n        Ownable Owner \r\n            - Set Super Governor Address\r\n            - Renounce Super Governor Address (1-way)\r\n            - Set Governor Address\r\n            - Set $MES Address \r\n\r\n        Super Governor\r\n            - Enable / Disable Projects\r\n            - Set Project Infos \r\n            - Unstuck Owners (On Super Governor Enabled Projects Only)\r\n\r\n        Governor\r\n            - Set Registry Price\r\n            - Set Registry Treasury Address\r\n            - Withdraw $MES from Contract\r\n\r\n        Contract Owner\r\n            - Register Their Contract with $MES\r\n            - Set Project Info\r\n            - Set Treasury Address\r\n            - Set Contract Controllers\r\n            - Add Items \r\n            - Modify Items\r\n            - Remove Items\r\n\r\n        Contract Controller\r\n            - Add Items \r\n            - Modify Items\r\n            - Remove Items\r\n\r\n    >>>> Interfacing <<<<<\r\n\r\n    To draw a front-end interface:\r\n    \r\n        getAllEnabledContracts() - Enumerate all available contracts for selection\r\n        (for contract-specific front-end interfaces, just pull data from your \r\n        contract only)\r\n    \r\n        getWLVendingItemsAll(address contract_) - Enumerate all vending items\r\n        available for the contract. Supports over 1000 items in 1 call but\r\n        if you get gas errors, use a pagination method instead.\r\n\r\n        Pagination method: \r\n        getWLVendingItemsPaginated(address contract_, uint256 start_, uint256 end_)\r\n        for the start_, generally you can use 0, and for end_, inquire from function\r\n        getWLVendingItemsLength(address contract_)\r\n\r\n    For interaction of users:\r\n\r\n        purchaseWLVendingItem(address contract_, uint256 index_) can be used\r\n        and automatically populated to the correct buttons for each WLVendingItem\r\n        for that, an ethers.js call is invoked for the user to call the function\r\n        which will transfer their ERC20 token and add them to the purchasers list\r\n\r\n    For administration:\r\n\r\n        setTreasuryAddress(address contract_, address treasury_) can only be set\r\n        by the contract owner. For this, they are able to set where the ERC20 tokens\r\n        from the whitelist marketplace sales go to. By default, this is 0x...dead\r\n        effectively burning the tokens\r\n\r\n        addWLVendingItem(address contract_, string calldata title_, \r\n        string calldata imageUri_, string calldata projectUri_,\r\n        string calldata description_, uint32 amountAvailable_, uint32 deadline_,\r\n        uint256 price_) is used to create a new WLVendingItem for your contract\r\n        with the details as the input arguments stated.\r\n\r\n        modifyWLVendingItem(address contract_, uint256 index_, \r\n        WLVendingItem memory WLVendingItem_) lets you modify a WLVendingItem.\r\n        You have to pass in a tuple instead. Only use when necessary. Not\r\n        recommended to use.\r\n\r\n        deleteMostRecentWLVendingItem(address contract_) we use a .pop() for this so\r\n        it can only delete the most recent item. For some mistakes that you made and\r\n        want to erase them.\r\n\r\n        manageController(address contract_, address operator_, bool bool_) is a special\r\n        governance function which allows you to add controllers to the contract\r\n        to do actions on your behalf. \r\n*/\r\n\r\nabstract contract Ownable {\r\n    address public owner; \r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner { require(owner == msg.sender, \"Not Owner!\"); _; }\r\n    function transferOwnership(address new_) external onlyOwner { owner = new_; }\r\n}\r\n\r\ninterface IMartianMarket {\r\n    // For Access Control\r\n    function isAuthorized(address contract_, address operator_) external \r\n    view returns (bool);\r\n\r\n    // For Price Controller\r\n    function getFixedPriceOfItem(address contract_, uint256 index_) external \r\n    view returns (uint256);\r\n\r\n    // For Token Controller\r\n    function getDefaultTokenOfContract(address contract_) external \r\n    view returns (address);\r\n    function getDefaultTokenNameOfContract(address contract_) external\r\n    view returns (string memory);\r\n    function getDefaultTokenImageOfContract(address contract_) external \r\n    view returns (string memory);\r\n}\r\n\r\ncontract MartianMarketTokenController is Ownable {\r\n\r\n    // Events\r\n    event OverrideToken(address indexed contract_, address indexed operator_,\r\n        uint256 index_, address token_);\r\n    event SetOverride(address indexed operator_, bool bool_);\r\n    event TokenEnabled(address indexed tokenAddress_, address indexed operator_,\r\n        string tokenName_, string tokenImageUri_);\r\n    event TokenDisabled(address indexed tokenAddress, address indexed operator_);\r\n\r\n    // Interface of MM\r\n    IMartianMarket public MM = \r\n        IMartianMarket(0xFD8f4aC172457FD30Df92395BC69d4eF6d92eDd4);\r\n    function setMM(address address_) external onlyOwner {\r\n        MM = IMartianMarket(address_);\r\n    }\r\n\r\n    // Ownable Override Permissions\r\n    bool public overrideEnabled; // default as false\r\n\r\n    function setOverrideEnabled(bool bool_) external onlyOwner {\r\n        \r\n        overrideEnabled = bool_; \r\n\r\n        emit SetOverride(msg.sender, bool_);\r\n    }\r\n    modifier onlyOverrideEnabled {\r\n        require(overrideEnabled,\r\n            \"Token Overrides are not enabled!\");\r\n        _;\r\n    }\r\n\r\n    // This is access of token address through controllers\r\n    modifier onlyAuthorized(address contract_, address operator_) {\r\n        require(MM.isAuthorized(contract_, operator_),\r\n            \"You are not authorized!\");\r\n        _;\r\n    }\r\n\r\n    // This is the lookup for token overrides\r\n    struct TokenInfo {\r\n        string tokenName;\r\n        string tokenImageUri;\r\n        address tokenAddress;\r\n    }\r\n\r\n    mapping(address => TokenInfo) public contractToTokenInfo;\r\n    mapping(address => mapping(uint256 => address)) public contractToIndexToToken;\r\n\r\n    // Enabling Tokens\r\n    function enableToken(address tokenAddress_, string calldata tokenName_, \r\n    string calldata tokenImageUri_) external onlyOwner {\r\n        \r\n        contractToTokenInfo[tokenAddress_] = TokenInfo(\r\n            tokenName_,\r\n            tokenImageUri_,\r\n            tokenAddress_\r\n        );\r\n\r\n        emit TokenEnabled(tokenAddress_, msg.sender, tokenName_, tokenImageUri_);\r\n    }\r\n    function disableToken(address tokenAddress_) external onlyOwner {\r\n        \r\n        delete contractToTokenInfo[tokenAddress_];\r\n        \r\n        emit TokenDisabled(tokenAddress_, msg.sender);\r\n    }\r\n\r\n    // Override Token Info\r\n    function overrideIndexToToken(address contract_, uint256 index_, \r\n    address tokenAddress_) external onlyAuthorized(contract_, msg.sender) \r\n    onlyOverrideEnabled {\r\n        require(contractToTokenInfo[tokenAddress_].tokenAddress != address(0),\r\n            \"Token has not been enabled!\");\r\n        \r\n        contractToIndexToToken[contract_][index_] = tokenAddress_;\r\n\r\n        emit OverrideToken(contract_, msg.sender, index_, tokenAddress_);\r\n    }\r\n\r\n    // Read Token Info for Interfacing and Controlling\r\n    function getTokenNameOfItem(address contract_, uint256 index_) public view\r\n    returns (string memory) {\r\n        address _token = contractToIndexToToken[contract_][index_];\r\n        return _token == address(0) ? \r\n            MM.getDefaultTokenNameOfContract(contract_) :\r\n            contractToTokenInfo[_token].tokenName;\r\n    }\r\n    function getTokenImageOfItem(address contract_, uint256 index_) public view\r\n    returns (string memory) {\r\n        address _token = contractToIndexToToken[contract_][index_];\r\n        return _token == address(0) ? \r\n            MM.getDefaultTokenImageOfContract(contract_) :\r\n            contractToTokenInfo[_token].tokenImageUri;\r\n    }\r\n    function getTokenOfItem(address contract_, uint256 index_) public view \r\n    returns (address) {\r\n        address _token = contractToIndexToToken[contract_][index_];\r\n        return _token == address(0) ? \r\n            MM.getDefaultTokenOfContract(contract_) :\r\n            contractToTokenInfo[_token].tokenAddress;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"OverrideToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"SetOverride\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"TokenDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName_\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenImageUri_\",\"type\":\"string\"}],\"name\":\"TokenEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MM\",\"outputs\":[{\"internalType\":\"contract IMartianMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractToIndexToToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractToTokenInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenImageUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"name\":\"disableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenImageUri_\",\"type\":\"string\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getTokenImageOfItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getTokenNameOfItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getTokenOfItem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overrideEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"name\":\"overrideIndexToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setOverrideEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MartianMarketTokenController", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7cdb646dbd1190f73393be69b71b7924803a7cbc8dbc2e24978ae4d1f86ec50a"}]}