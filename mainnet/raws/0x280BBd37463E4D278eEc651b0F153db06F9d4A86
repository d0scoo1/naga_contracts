{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IGasBank.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IGasBank {\r\n    event Deposit(address indexed account, uint256 value);\r\n    event Withdraw(address indexed account, address indexed receiver, uint256 value);\r\n\r\n    function depositFor(address account) external payable;\r\n\r\n    function withdrawUnused(address account) external;\r\n\r\n    function withdrawFrom(address account, uint256 amount) external;\r\n\r\n    function withdrawFrom(\r\n        address account,\r\n        address payable to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/IVaultReserve.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IVaultReserve {\r\n    event Deposit(address indexed vault, address indexed token, uint256 amount);\r\n    event Withdraw(address indexed vault, address indexed token, uint256 amount);\r\n    event VaultListed(address indexed vault);\r\n\r\n    function deposit(address token, uint256 amount) external payable returns (bool);\r\n\r\n    function withdraw(address token, uint256 amount) external returns (bool);\r\n\r\n    function getBalance(address vault, address token) external view returns (uint256);\r\n\r\n    function canWithdraw(address vault) external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/oracles/IOracleProvider.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IOracleProvider {\r\n    /// @notice Quotes the USD price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the USD price of the asset\r\n    function getPriceUSD(address baseAsset) external view returns (uint256);\r\n\r\n    /// @notice Quotes the ETH price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the ETH price of the asset\r\n    function getPriceETH(address baseAsset) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/IPreparable.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IPreparable {\r\n    event ConfigPreparedAddress(bytes32 indexed key, address value, uint256 delay);\r\n    event ConfigPreparedNumber(bytes32 indexed key, uint256 value, uint256 delay);\r\n\r\n    event ConfigUpdatedAddress(bytes32 indexed key, address oldValue, address newValue);\r\n    event ConfigUpdatedNumber(bytes32 indexed key, uint256 oldValue, uint256 newValue);\r\n\r\n    event ConfigReset(bytes32 indexed key);\r\n}\r\n\r\n\r\n// File interfaces/IStrategy.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IStrategy {\r\n    function name() external view returns (string memory);\r\n\r\n    function deposit() external payable returns (bool);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function harvestable() external view returns (uint256);\r\n\r\n    function harvest() external returns (uint256);\r\n\r\n    function strategist() external view returns (address);\r\n\r\n    function shutdown() external returns (bool);\r\n\r\n    function hasPendingFunds() external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IVault.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @title Interface for a Vault\r\n */\r\n\r\ninterface IVault is IPreparable {\r\n    event StrategyActivated(address indexed strategy);\r\n\r\n    event StrategyDeactivated(address indexed strategy);\r\n\r\n    /**\r\n     * @dev 'netProfit' is the profit after all fees have been deducted\r\n     */\r\n    event Harvest(uint256 indexed netProfit, uint256 indexed loss);\r\n\r\n    function initialize(\r\n        address _pool,\r\n        uint256 _debtLimit,\r\n        uint256 _targetAllocation,\r\n        uint256 _bound\r\n    ) external;\r\n\r\n    function withdrawFromStrategyWaitingForRemoval(address strategy) external returns (uint256);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function initializeStrategy(address strategy_) external returns (bool);\r\n\r\n    function withdrawAll() external;\r\n\r\n    function withdrawFromReserve(uint256 amount) external;\r\n\r\n    function getStrategy() external view returns (IStrategy);\r\n\r\n    function getStrategiesWaitingForRemoval() external view returns (address[] memory);\r\n\r\n    function getAllocatedToStrategyWaitingForRemoval(address strategy)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTotalUnderlying() external view returns (uint256);\r\n\r\n    function getUnderlying() external view returns (address);\r\n}\r\n\r\n\r\n// File interfaces/pool/ILiquidityPool.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\ninterface ILiquidityPool is IPreparable {\r\n    event Deposit(address indexed minter, uint256 depositAmount, uint256 mintedLpTokens);\r\n\r\n    event DepositFor(\r\n        address indexed minter,\r\n        address indexed mintee,\r\n        uint256 depositAmount,\r\n        uint256 mintedLpTokens\r\n    );\r\n\r\n    event Redeem(address indexed redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n    event LpTokenSet(address indexed lpToken);\r\n\r\n    event StakerVaultSet(address indexed stakerVault);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens, uint256 minRedeemAmount) external returns (uint256);\r\n\r\n    function calcRedeem(address account, uint256 underlyingAmount) external returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount) external payable returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount, uint256 minTokenAmount) external payable returns (uint256);\r\n\r\n    function depositAndStake(uint256 depositAmount, uint256 minTokenAmount)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function depositFor(address account, uint256 depositAmount) external payable returns (uint256);\r\n\r\n    function depositFor(\r\n        address account,\r\n        uint256 depositAmount,\r\n        uint256 minTokenAmount\r\n    ) external payable returns (uint256);\r\n\r\n    function unstakeAndRedeem(uint256 redeemLpTokens, uint256 minRedeemAmount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function handleLpTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function executeNewVault() external returns (address);\r\n\r\n    function executeNewMaxWithdrawalFee() external returns (uint256);\r\n\r\n    function executeNewRequiredReserves() external returns (uint256);\r\n\r\n    function executeNewReserveDeviation() external returns (uint256);\r\n\r\n    function setLpToken(address _lpToken) external returns (bool);\r\n\r\n    function setStaker() external returns (bool);\r\n\r\n    function isCapped() external returns (bool);\r\n\r\n    function uncap() external returns (bool);\r\n\r\n    function updateDepositCap(uint256 _depositCap) external returns (bool);\r\n\r\n    function getUnderlying() external view returns (address);\r\n\r\n    function getLpToken() external view returns (address);\r\n\r\n    function getWithdrawalFee(address account, uint256 amount) external view returns (uint256);\r\n\r\n    function getVault() external view returns (IVault);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n}\r\n\r\n\r\n// File libraries/AddressProviderMeta.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\nlibrary AddressProviderMeta {\r\n    struct Meta {\r\n        bool freezable;\r\n        bool frozen;\r\n    }\r\n\r\n    function fromUInt(uint256 value) internal pure returns (Meta memory) {\r\n        Meta memory meta;\r\n        meta.freezable = (value & 1) == 1;\r\n        meta.frozen = ((value >> 1) & 1) == 1;\r\n        return meta;\r\n    }\r\n\r\n    function toUInt(Meta memory meta) internal pure returns (uint256) {\r\n        uint256 value;\r\n        value |= meta.freezable ? 1 : 0;\r\n        value |= meta.frozen ? 1 << 1 : 0;\r\n        return value;\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IAddressProvider.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n// solhint-disable ordering\r\n\r\ninterface IAddressProvider is IPreparable {\r\n    event KnownAddressKeyAdded(bytes32 indexed key);\r\n    event StakerVaultListed(address indexed stakerVault);\r\n    event StakerVaultDelisted(address indexed stakerVault);\r\n    event ActionListed(address indexed action);\r\n    event PoolListed(address indexed pool);\r\n    event PoolDelisted(address indexed pool);\r\n    event VaultUpdated(address indexed previousVault, address indexed newVault);\r\n\r\n    /** Key functions */\r\n    function getKnownAddressKeys() external view returns (bytes32[] memory);\r\n\r\n    function freezeAddress(bytes32 key) external;\r\n\r\n    /** Pool functions */\r\n\r\n    function allPools() external view returns (address[] memory);\r\n\r\n    function addPool(address pool) external;\r\n\r\n    function poolsCount() external view returns (uint256);\r\n\r\n    function getPoolAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isPool(address pool) external view returns (bool);\r\n\r\n    function removePool(address pool) external returns (bool);\r\n\r\n    function getPoolForToken(address token) external view returns (ILiquidityPool);\r\n\r\n    function safeGetPoolForToken(address token) external view returns (address);\r\n\r\n    /** Vault functions  */\r\n\r\n    function updateVault(address previousVault, address newVault) external;\r\n\r\n    function allVaults() external view returns (address[] memory);\r\n\r\n    function vaultsCount() external view returns (uint256);\r\n\r\n    function getVaultAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isVault(address vault) external view returns (bool);\r\n\r\n    /** Action functions */\r\n\r\n    function allActions() external view returns (address[] memory);\r\n\r\n    function addAction(address action) external returns (bool);\r\n\r\n    function isAction(address action) external view returns (bool);\r\n\r\n    /** Address functions */\r\n    function initializeAddress(\r\n        bytes32 key,\r\n        address initialAddress,\r\n        bool frezable\r\n    ) external;\r\n\r\n    function initializeAndFreezeAddress(bytes32 key, address initialAddress) external;\r\n\r\n    function getAddress(bytes32 key) external view returns (address);\r\n\r\n    function getAddress(bytes32 key, bool checkExists) external view returns (address);\r\n\r\n    function getAddressMeta(bytes32 key) external view returns (AddressProviderMeta.Meta memory);\r\n\r\n    function prepareAddress(bytes32 key, address newAddress) external returns (bool);\r\n\r\n    function executeAddress(bytes32 key) external returns (address);\r\n\r\n    function resetAddress(bytes32 key) external returns (bool);\r\n\r\n    /** Staker vault functions */\r\n    function allStakerVaults() external view returns (address[] memory);\r\n\r\n    function tryGetStakerVault(address token) external view returns (bool, address);\r\n\r\n    function getStakerVault(address token) external view returns (address);\r\n\r\n    function addStakerVault(address stakerVault) external returns (bool);\r\n\r\n    function isStakerVault(address stakerVault, address token) external view returns (bool);\r\n\r\n    function isStakerVaultRegistered(address stakerVault) external view returns (bool);\r\n\r\n    function isWhiteListedFeeHandler(address feeHandler) external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IRoleManager.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IRoleManager {\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(bytes32[] memory roles, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n}\r\n\r\n\r\n// File interfaces/tokenomics/IBkdToken.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IBkdToken is IERC20 {\r\n    function mint(address account, uint256 amount) external;\r\n}\r\n\r\n\r\n// File interfaces/tokenomics/IInflationManager.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IInflationManager {\r\n    event KeeperGaugeListed(address indexed pool, address indexed keeperGauge);\r\n    event AmmGaugeListed(address indexed token, address indexed ammGauge);\r\n    event KeeperGaugeDelisted(address indexed pool, address indexed keeperGauge);\r\n    event AmmGaugeDelisted(address indexed token, address indexed ammGauge);\r\n\r\n    /** Pool functions */\r\n\r\n    function setKeeperGauge(address pool, address _keeperGauge) external returns (bool);\r\n\r\n    function setAmmGauge(address token, address _ammGauge) external returns (bool);\r\n\r\n    function getAllAmmGauges() external view returns (address[] memory);\r\n\r\n    function getLpRateForStakerVault(address stakerVault) external view returns (uint256);\r\n\r\n    function getKeeperRateForPool(address pool) external view returns (uint256);\r\n\r\n    function getAmmRateForToken(address token) external view returns (uint256);\r\n\r\n    function getKeeperWeightForPool(address pool) external view returns (uint256);\r\n\r\n    function getAmmWeightForToken(address pool) external view returns (uint256);\r\n\r\n    function getLpPoolWeight(address pool) external view returns (uint256);\r\n\r\n    function getKeeperGaugeForPool(address pool) external view returns (address);\r\n\r\n    function getAmmGaugeForToken(address token) external view returns (address);\r\n\r\n    function isInflationWeightManager(address account) external view returns (bool);\r\n\r\n    function removeStakerVaultFromInflation(address stakerVault, address lpToken) external;\r\n\r\n    function addGaugeForVault(address lpToken) external returns (bool);\r\n\r\n    function whitelistGauge(address gauge) external;\r\n\r\n    function checkpointAllGauges() external returns (bool);\r\n\r\n    function mintRewards(address beneficiary, uint256 amount) external;\r\n\r\n    function addStrategyToDepositStakerVault(address depositStakerVault, address strategyPool)\r\n        external\r\n        returns (bool);\r\n\r\n    /** Weight setter functions **/\r\n\r\n    function prepareLpPoolWeight(address lpToken, uint256 newPoolWeight) external returns (bool);\r\n\r\n    function prepareAmmTokenWeight(address token, uint256 newTokenWeight) external returns (bool);\r\n\r\n    function prepareKeeperPoolWeight(address pool, uint256 newPoolWeight) external returns (bool);\r\n\r\n    function executeLpPoolWeight(address lpToken) external returns (uint256);\r\n\r\n    function executeAmmTokenWeight(address token) external returns (uint256);\r\n\r\n    function executeKeeperPoolWeight(address pool) external returns (uint256);\r\n\r\n    function batchPrepareLpPoolWeights(address[] calldata lpTokens, uint256[] calldata weights)\r\n        external\r\n        returns (bool);\r\n\r\n    function batchPrepareAmmTokenWeights(address[] calldata tokens, uint256[] calldata weights)\r\n        external\r\n        returns (bool);\r\n\r\n    function batchPrepareKeeperPoolWeights(address[] calldata pools, uint256[] calldata weights)\r\n        external\r\n        returns (bool);\r\n\r\n    function batchExecuteLpPoolWeights(address[] calldata lpTokens) external returns (bool);\r\n\r\n    function batchExecuteAmmTokenWeights(address[] calldata tokens) external returns (bool);\r\n\r\n    function batchExecuteKeeperPoolWeights(address[] calldata pools) external returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IController.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n// solhint-disable ordering\r\n\r\ninterface IController is IPreparable {\r\n    function addressProvider() external view returns (IAddressProvider);\r\n\r\n    function inflationManager() external view returns (IInflationManager);\r\n\r\n    function addStakerVault(address stakerVault) external returns (bool);\r\n\r\n    function removePool(address pool) external returns (bool);\r\n\r\n    /** Keeper functions */\r\n    function prepareKeeperRequiredStakedBKD(uint256 amount) external;\r\n\r\n    function executeKeeperRequiredStakedBKD() external;\r\n\r\n    function getKeeperRequiredStakedBKD() external view returns (uint256);\r\n\r\n    function canKeeperExecuteAction(address keeper) external view returns (bool);\r\n\r\n    /** Miscellaneous functions */\r\n\r\n    function getTotalEthRequiredForGas(address payer) external view returns (uint256);\r\n}\r\n\r\n\r\n// File libraries/AddressProviderKeys.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\nlibrary AddressProviderKeys {\r\n    bytes32 internal constant _TREASURY_KEY = \"treasury\";\r\n    bytes32 internal constant _GAS_BANK_KEY = \"gasBank\";\r\n    bytes32 internal constant _VAULT_RESERVE_KEY = \"vaultReserve\";\r\n    bytes32 internal constant _SWAPPER_REGISTRY_KEY = \"swapperRegistry\";\r\n    bytes32 internal constant _ORACLE_PROVIDER_KEY = \"oracleProvider\";\r\n    bytes32 internal constant _POOL_FACTORY_KEY = \"poolFactory\";\r\n    bytes32 internal constant _CONTROLLER_KEY = \"controller\";\r\n    bytes32 internal constant _BKD_LOCKER_KEY = \"bkdLocker\";\r\n    bytes32 internal constant _ROLE_MANAGER_KEY = \"roleManager\";\r\n}\r\n\r\n\r\n// File libraries/AddressProviderHelpers.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary AddressProviderHelpers {\r\n    /**\r\n     * @return The address of the treasury.\r\n     */\r\n    function getTreasury(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._TREASURY_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return The gas bank.\r\n     */\r\n    function getGasBank(IAddressProvider provider) internal view returns (IGasBank) {\r\n        return IGasBank(provider.getAddress(AddressProviderKeys._GAS_BANK_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The address of the vault reserve.\r\n     */\r\n    function getVaultReserve(IAddressProvider provider) internal view returns (IVaultReserve) {\r\n        return IVaultReserve(provider.getAddress(AddressProviderKeys._VAULT_RESERVE_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The address of the swapperRegistry.\r\n     */\r\n    function getSwapperRegistry(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._SWAPPER_REGISTRY_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return The oracleProvider.\r\n     */\r\n    function getOracleProvider(IAddressProvider provider) internal view returns (IOracleProvider) {\r\n        return IOracleProvider(provider.getAddress(AddressProviderKeys._ORACLE_PROVIDER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the address of the BKD locker\r\n     */\r\n    function getBKDLocker(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._BKD_LOCKER_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the BKD locker\r\n     */\r\n    function getRoleManager(IAddressProvider provider) internal view returns (IRoleManager) {\r\n        return IRoleManager(provider.getAddress(AddressProviderKeys._ROLE_MANAGER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the controller\r\n     */\r\n    function getController(IAddressProvider provider) internal view returns (IController) {\r\n        return IController(provider.getAddress(AddressProviderKeys._CONTROLLER_KEY));\r\n    }\r\n}\r\n\r\n\r\n// File libraries/ScaledMath.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n/*\r\n * @dev To use functions of this contract, at least one of the numbers must\r\n * be scaled to `DECIMAL_SCALE`. The result will scaled to `DECIMAL_SCALE`\r\n * if both numbers are scaled to `DECIMAL_SCALE`, otherwise to the scale\r\n * of the number not scaled by `DECIMAL_SCALE`\r\n */\r\nlibrary ScaledMath {\r\n    // solhint-disable-next-line private-vars-leading-underscore\r\n    uint256 internal constant DECIMAL_SCALE = 1e18;\r\n    // solhint-disable-next-line private-vars-leading-underscore\r\n    uint256 internal constant ONE = 1e18;\r\n\r\n    /**\r\n     * @notice Performs a multiplication between two scaled numbers\r\n     */\r\n    function scaledMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * b) / DECIMAL_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two scaled numbers\r\n     */\r\n    function scaledDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * DECIMAL_SCALE) / b;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two numbers, rounding up the result\r\n     */\r\n    function scaledDivRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * DECIMAL_SCALE + b - 1) / b;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two numbers, ignoring any scaling and rounding up the result\r\n     */\r\n    function divRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a + b - 1) / b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/CvxMintAmount.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\nabstract contract CvxMintAmount {\r\n    uint256 private constant _CLIFF_SIZE = 100000 * 1e18; //new cliff every 100,000 tokens\r\n    uint256 private constant _CLIFF_COUNT = 1000; // 1,000 cliffs\r\n    uint256 private constant _MAX_SUPPLY = 100000000 * 1e18; //100 mil max supply\r\n    IERC20 private constant _CVX_TOKEN =\r\n        IERC20(address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B)); // CVX Token\r\n\r\n    function getCvxMintAmount(uint256 crvEarned) public view returns (uint256) {\r\n        //first get total supply\r\n        uint256 cvxTotalSupply = _CVX_TOKEN.totalSupply();\r\n\r\n        //get current cliff\r\n        uint256 currentCliff = cvxTotalSupply / _CLIFF_SIZE;\r\n\r\n        //if current cliff is under the max\r\n        if (currentCliff >= _CLIFF_COUNT) return 0;\r\n\r\n        //get remaining cliffs\r\n        uint256 remaining = _CLIFF_COUNT - currentCliff;\r\n\r\n        //multiply ratio of remaining cliffs to total cliffs against amount CRV received\r\n        uint256 cvxEarned = (crvEarned * remaining) / _CLIFF_COUNT;\r\n\r\n        //double check we have not gone over the max supply\r\n        uint256 amountTillMax = _MAX_SUPPLY - cvxTotalSupply;\r\n        if (cvxEarned > amountTillMax) cvxEarned = amountTillMax;\r\n        return cvxEarned;\r\n    }\r\n}\r\n\r\n\r\n// File libraries/Errors.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Error {\r\n    string internal constant ADDRESS_WHITELISTED = \"address already whitelisted\";\r\n    string internal constant ADMIN_ALREADY_SET = \"admin has already been set once\";\r\n    string internal constant ADDRESS_NOT_WHITELISTED = \"address not whitelisted\";\r\n    string internal constant ADDRESS_NOT_FOUND = \"address not found\";\r\n    string internal constant CONTRACT_INITIALIZED = \"contract can only be initialized once\";\r\n    string internal constant CONTRACT_PAUSED = \"contract is paused\";\r\n    string internal constant INVALID_AMOUNT = \"invalid amount\";\r\n    string internal constant INVALID_INDEX = \"invalid index\";\r\n    string internal constant INVALID_VALUE = \"invalid msg.value\";\r\n    string internal constant INVALID_SENDER = \"invalid msg.sender\";\r\n    string internal constant INVALID_TOKEN = \"token address does not match pool's LP token address\";\r\n    string internal constant INVALID_DECIMALS = \"incorrect number of decimals\";\r\n    string internal constant INVALID_ARGUMENT = \"invalid argument\";\r\n    string internal constant INVALID_PARAMETER_VALUE = \"invalid parameter value attempted\";\r\n    string internal constant INVALID_IMPLEMENTATION = \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_POOL_IMPLEMENTATION =\r\n        \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_LP_TOKEN_IMPLEMENTATION =\r\n        \"invalid LP Token implementation for given coin\";\r\n    string internal constant INVALID_VAULT_IMPLEMENTATION =\r\n        \"invalid vault implementation for given coin\";\r\n    string internal constant INVALID_STAKER_VAULT_IMPLEMENTATION =\r\n        \"invalid stakerVault implementation for given coin\";\r\n    string internal constant INSUFFICIENT_BALANCE = \"insufficient balance\";\r\n    string internal constant ADDRESS_ALREADY_SET = \"Address is already set\";\r\n    string internal constant INSUFFICIENT_STRATEGY_BALANCE = \"insufficient strategy balance\";\r\n    string internal constant INSUFFICIENT_FUNDS_RECEIVED = \"insufficient funds received\";\r\n    string internal constant ADDRESS_DOES_NOT_EXIST = \"address does not exist\";\r\n    string internal constant ADDRESS_FROZEN = \"address is frozen\";\r\n    string internal constant ROLE_EXISTS = \"role already exists\";\r\n    string internal constant CANNOT_REVOKE_ROLE = \"cannot revoke role\";\r\n    string internal constant UNAUTHORIZED_ACCESS = \"unauthorized access\";\r\n    string internal constant SAME_ADDRESS_NOT_ALLOWED = \"same address not allowed\";\r\n    string internal constant SELF_TRANSFER_NOT_ALLOWED = \"self-transfer not allowed\";\r\n    string internal constant ZERO_ADDRESS_NOT_ALLOWED = \"zero address not allowed\";\r\n    string internal constant ZERO_TRANSFER_NOT_ALLOWED = \"zero transfer not allowed\";\r\n    string internal constant THRESHOLD_TOO_HIGH = \"threshold is too high, must be under 10\";\r\n    string internal constant INSUFFICIENT_THRESHOLD = \"insufficient threshold\";\r\n    string internal constant NO_POSITION_EXISTS = \"no position exists\";\r\n    string internal constant POSITION_ALREADY_EXISTS = \"position already exists\";\r\n    string internal constant PROTOCOL_NOT_FOUND = \"protocol not found\";\r\n    string internal constant TOP_UP_FAILED = \"top up failed\";\r\n    string internal constant SWAP_PATH_NOT_FOUND = \"swap path not found\";\r\n    string internal constant UNDERLYING_NOT_SUPPORTED = \"underlying token not supported\";\r\n    string internal constant NOT_ENOUGH_FUNDS_WITHDRAWN =\r\n        \"not enough funds were withdrawn from the pool\";\r\n    string internal constant FAILED_TRANSFER = \"transfer failed\";\r\n    string internal constant FAILED_MINT = \"mint failed\";\r\n    string internal constant FAILED_REPAY_BORROW = \"repay borrow failed\";\r\n    string internal constant FAILED_METHOD_CALL = \"method call failed\";\r\n    string internal constant NOTHING_TO_CLAIM = \"there is no claimable balance\";\r\n    string internal constant ERC20_BALANCE_EXCEEDED = \"ERC20: transfer amount exceeds balance\";\r\n    string internal constant INVALID_MINTER =\r\n        \"the minter address of the LP token and the pool address do not match\";\r\n    string internal constant STAKER_VAULT_EXISTS = \"a staker vault already exists for the token\";\r\n    string internal constant DEADLINE_NOT_ZERO = \"deadline must be 0\";\r\n    string internal constant DEADLINE_NOT_SET = \"deadline is 0\";\r\n    string internal constant DEADLINE_NOT_REACHED = \"deadline has not been reached yet\";\r\n    string internal constant DELAY_TOO_SHORT = \"delay be at least 3 days\";\r\n    string internal constant INSUFFICIENT_UPDATE_BALANCE =\r\n        \"insufficient funds for updating the position\";\r\n    string internal constant SAME_AS_CURRENT = \"value must be different to existing value\";\r\n    string internal constant NOT_CAPPED = \"the pool is not currently capped\";\r\n    string internal constant ALREADY_CAPPED = \"the pool is already capped\";\r\n    string internal constant EXCEEDS_DEPOSIT_CAP = \"deposit exceeds deposit cap\";\r\n    string internal constant VALUE_TOO_LOW_FOR_GAS = \"value too low to cover gas\";\r\n    string internal constant NOT_ENOUGH_FUNDS = \"not enough funds to withdraw\";\r\n    string internal constant ESTIMATED_GAS_TOO_HIGH = \"too much ETH will be used for gas\";\r\n    string internal constant DEPOSIT_FAILED = \"deposit failed\";\r\n    string internal constant GAS_TOO_HIGH = \"too much ETH used for gas\";\r\n    string internal constant GAS_BANK_BALANCE_TOO_LOW = \"not enough ETH in gas bank to cover gas\";\r\n    string internal constant INVALID_TOKEN_TO_ADD = \"Invalid token to add\";\r\n    string internal constant INVALID_TOKEN_TO_REMOVE = \"token can not be removed\";\r\n    string internal constant TIME_DELAY_NOT_EXPIRED = \"time delay not expired yet\";\r\n    string internal constant UNDERLYING_NOT_WITHDRAWABLE =\r\n        \"pool does not support additional underlying coins to be withdrawn\";\r\n    string internal constant STRATEGY_SHUT_DOWN = \"Strategy is shut down\";\r\n    string internal constant STRATEGY_DOES_NOT_EXIST = \"Strategy does not exist\";\r\n    string internal constant UNSUPPORTED_UNDERLYING = \"Underlying not supported\";\r\n    string internal constant NO_DEX_SET = \"no dex has been set for token\";\r\n    string internal constant INVALID_TOKEN_PAIR = \"invalid token pair\";\r\n    string internal constant TOKEN_NOT_USABLE = \"token not usable for the specific action\";\r\n    string internal constant ADDRESS_NOT_ACTION = \"address is not registered action\";\r\n    string internal constant INVALID_SLIPPAGE_TOLERANCE = \"Invalid slippage tolerance\";\r\n    string internal constant POOL_NOT_PAUSED = \"Pool must be paused to withdraw from reserve\";\r\n    string internal constant INTERACTION_LIMIT = \"Max of one deposit and withdraw per block\";\r\n    string internal constant GAUGE_EXISTS = \"Gauge already exists\";\r\n    string internal constant GAUGE_DOES_NOT_EXIST = \"Gauge does not exist\";\r\n    string internal constant EXCEEDS_MAX_BOOST = \"Not allowed to exceed maximum boost on Convex\";\r\n    string internal constant PREPARED_WITHDRAWAL =\r\n        \"Cannot relock funds when withdrawal is being prepared\";\r\n    string internal constant ASSET_NOT_SUPPORTED = \"Asset not supported\";\r\n    string internal constant STALE_PRICE = \"Price is stale\";\r\n    string internal constant NEGATIVE_PRICE = \"Price is negative\";\r\n    string internal constant NOT_ENOUGH_BKD_STAKED = \"Not enough BKD tokens staked\";\r\n    string internal constant RESERVE_ACCESS_EXCEEDED = \"Reserve access exceeded\";\r\n}\r\n\r\n\r\n// File libraries/Roles.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Roles {\r\n    bytes32 internal constant GOVERNANCE = \"governance\";\r\n    bytes32 internal constant ADDRESS_PROVIDER = \"address_provider\";\r\n    bytes32 internal constant POOL_FACTORY = \"pool_factory\";\r\n    bytes32 internal constant CONTROLLER = \"controller\";\r\n    bytes32 internal constant GAUGE_ZAP = \"gauge_zap\";\r\n    bytes32 internal constant MAINTENANCE = \"maintenance\";\r\n    bytes32 internal constant INFLATION_MANAGER = \"inflation_manager\";\r\n    bytes32 internal constant POOL = \"pool\";\r\n    bytes32 internal constant VAULT = \"vault\";\r\n}\r\n\r\n\r\n// File contracts/access/AuthorizationBase.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @notice Provides modifiers for authorization\r\n */\r\nabstract contract AuthorizationBase {\r\n    /**\r\n     * @notice Only allows a sender with `role` to perform the given action\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        require(_roleManager().hasRole(role, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with GOVERNANCE role to perform the given action\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_roleManager().hasRole(Roles.GOVERNANCE, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles2(bytes32 role1, bytes32 role2) {\r\n        require(_roleManager().hasAnyRole(role1, role2, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles3(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3\r\n    ) {\r\n        require(\r\n            _roleManager().hasAnyRole(role1, role2, role3, msg.sender),\r\n            Error.UNAUTHORIZED_ACCESS\r\n        );\r\n        _;\r\n    }\r\n\r\n    function roleManager() external view virtual returns (IRoleManager) {\r\n        return _roleManager();\r\n    }\r\n\r\n    function _roleManager() internal view virtual returns (IRoleManager);\r\n}\r\n\r\n\r\n// File contracts/access/Authorization.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ncontract Authorization is AuthorizationBase {\r\n    IRoleManager internal immutable __roleManager;\r\n\r\n    constructor(IRoleManager roleManager) {\r\n        __roleManager = roleManager;\r\n    }\r\n\r\n    function _roleManager() internal view override returns (IRoleManager) {\r\n        return __roleManager;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/SlippageTolerance.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\ncontract SlippageTolerance is Authorization {\r\n    using ScaledMath for uint256;\r\n\r\n    uint256 public slippageTolerance;\r\n\r\n    event SetSlippageTolerance(uint256 value); // Emitted after a succuessful setting of slippage tolerance\r\n\r\n    constructor(IRoleManager roleManager) Authorization(roleManager) {\r\n        slippageTolerance = 0.97e18;\r\n    }\r\n\r\n    /**\r\n     * @notice Set slippage tolerance for reward token swaps.\r\n     * @dev Stored as a multiplier, e.g. 2% would be set as 0.98.\r\n     * @param _slippageTolerance New imbalance tolarance out.\r\n     * @return True if successfully set.\r\n     */\r\n    function setSlippageTolerance(uint256 _slippageTolerance)\r\n        external\r\n        onlyGovernance\r\n        returns (bool)\r\n    {\r\n        require(_slippageTolerance <= ScaledMath.ONE, Error.INVALID_SLIPPAGE_TOLERANCE);\r\n        require(_slippageTolerance > 0.8e18, Error.INVALID_SLIPPAGE_TOLERANCE);\r\n        slippageTolerance = _slippageTolerance;\r\n        emit SetSlippageTolerance(_slippageTolerance);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IERC20Full.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n/// @notice This is the ERC20 interface including optional getter functions\r\n/// The interface is used in the frontend through the generated typechain wrapper\r\ninterface IERC20Full is IERC20 {\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File interfaces/vendor/IBooster.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IBooster {\r\n    function poolInfo(uint256 pid)\r\n        external\r\n        returns (\r\n            address lpToken,\r\n            address token,\r\n            address gauge,\r\n            address crvRewards,\r\n            address stash,\r\n            bool shutdown\r\n        );\r\n\r\n    /**\r\n     * @dev `_pid` is the ID of the Convex for a specific Curve LP token.\r\n     */\r\n    function deposit(\r\n        uint256 _pid,\r\n        uint256 _amount,\r\n        bool _stake\r\n    ) external returns (bool);\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\r\n\r\n    function withdrawAll(uint256 _pid) external returns (bool);\r\n\r\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/vendor/ICurveSwap.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface ICurveSwap {\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\r\n\r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\r\n\r\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount)\r\n        external;\r\n\r\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount)\r\n        external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts) external;\r\n\r\n    function exchange(\r\n        int128 from,\r\n        int128 to,\r\n        uint256 _from_amount,\r\n        uint256 _min_to_amount\r\n    ) external;\r\n\r\n    function coins(uint256 i) external view returns (address);\r\n\r\n    function get_dy(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 _dx\r\n    ) external view returns (uint256);\r\n\r\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_amount\r\n    ) external;\r\n}\r\n\r\n\r\n// File interfaces/vendor/ICurveSwapEth.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface ICurveSwapEth {\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external payable;\r\n\r\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount)\r\n        external;\r\n\r\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount)\r\n        external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts) external;\r\n\r\n    function exchange(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external payable;\r\n\r\n    function coins(uint256 i) external view returns (address);\r\n\r\n    function get_dy(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_amount\r\n    ) external;\r\n}\r\n\r\n\r\n// File interfaces/vendor/IRewardStaking.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IRewardStaking {\r\n    function stakeFor(address, uint256) external;\r\n\r\n    function stake(uint256) external;\r\n\r\n    function stakeAll() external returns (bool);\r\n\r\n    function withdraw(uint256 amount, bool claim) external returns (bool);\r\n\r\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function getReward() external;\r\n\r\n    function getReward(address _account, bool _claimExtras) external;\r\n\r\n    function extraRewardsLength() external view returns (uint256);\r\n\r\n    function extraRewards(uint256 _pid) external view returns (address);\r\n\r\n    function rewardToken() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/vendor/UniswapRouter02.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface UniswapRouter02 {\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external returns (uint256 amountIn);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (uint256 reserveA, uint256 reserveB);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface UniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        );\r\n}\r\n\r\ninterface UniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n\r\n// File interfaces/vendor/ICurveRegistry.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface ICurveRegistry {\r\n    function get_pool_from_lp_token(address lpToken) external returns (address);\r\n}\r\n\r\n\r\n// File contracts/strategies/BkdTriHopCvx.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * This is the BkdTriHopCvx strategy, which is designed to be used by a Backd ERC20 Vault.\r\n * The strategy holds a given ERC20 underlying and allocates liquidity to Convex via a given Curve Pool.\r\n * The Curve Pools used are Meta Pools which first require getting an LP Token from another Curve Pool.\r\n * The strategy does a 'Hop' when depositing and withdrawing, by first getting the required LP Token, and then the final LP Token for Convex.\r\n * Rewards received on Convex (CVX, CRV), are sold in part for the underlying.\r\n * A share of earned CVX & CRV are retained on behalf of the Backd community to participate in governance.\r\n */\r\ncontract BkdTriHopCvx is IStrategy, CvxMintAmount, SlippageTolerance {\r\n    using ScaledMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using AddressProviderHelpers for IAddressProvider;\r\n\r\n    uint256 private constant _CURVE_CVX_INDEX = 1;\r\n    uint256 private constant _CURVE_ETH_INDEX = 0;\r\n\r\n    IBooster internal constant _BOOSTER = IBooster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31); // Convex Booster Contract\r\n    ICurveRegistry internal constant _CURVE_REGISTRY =\r\n        ICurveRegistry(0x90E00ACe148ca3b23Ac1bC8C240C2a7Dd9c2d7f5); // Curve Registry Contract\r\n    IERC20 internal constant _CVX = IERC20(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B); // CVX\r\n    IERC20 internal constant _WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH\r\n    IERC20 internal constant _CRV = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52); // CRV\r\n    UniswapRouter02 internal constant _SUSHISWAP =\r\n        UniswapRouter02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // Sushiswap Router for swaps\r\n    UniswapRouter02 internal constant _UNISWAP =\r\n        UniswapRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // Uniswap Router for swaps\r\n    ICurveSwapEth internal constant _CVX_ETH_CURVE_POOL =\r\n        ICurveSwapEth(0xB576491F1E6e5E62f1d8F26062Ee822B40B0E0d4); // CVX/ETH Curve Pool\r\n\r\n    IAddressProvider internal immutable _addressProvider; // Address provider used for getting oracle provider\r\n    address public immutable vault; // Backd Vault\r\n    IERC20 public immutable underlying; // Strategy Underlying\r\n    ICurveSwap public immutable curveHopPool; // Curve Pool to use for Hops\r\n    IERC20 public immutable hopLp; // Curve Hop Pool LP Token\r\n    uint256 public immutable curveHopIndex; // Underlying index in Curve Pool\r\n    uint256 public immutable decimalMultiplier; // Used for converting between underlying and LP\r\n\r\n    ICurveSwap public curvePool; // Curve Pool\r\n    uint256 public convexPid; // Index of Convex Pool in Booster Contract\r\n    uint256 public curveIndex; // Underlying index in Curve Pool\r\n    IERC20 public lp; // Curve Pool LP Token\r\n    IRewardStaking public rewards; // Rewards Contract for claiming Convex Rewards\r\n    uint256 public imbalanceToleranceIn; // Maximum allowed slippage from Curve Pool Imbalance for depositing\r\n    uint256 public imbalanceToleranceOut; // Maximum allowed slippage from Curve Pool Imbalance for withdrawing\r\n    uint256 public hopImbalanceToleranceIn; // Maximum allowed slippage from Curve Hop Pool Imbalance for depositing\r\n    uint256 public hopImbalanceToleranceOut; // Maximum allowed slippage from Curve Hop Pool Imbalance for withdrawing\r\n    address public communityReserve; // Address for sending CVX & CRV Community Reserve share\r\n    uint256 public cvxCommunityReserveShare; // Share of CVX sent to Community Reserve\r\n    uint256 public crvCommunityReserveShare; // Share of CRV sent to Community Reserve\r\n    address public override strategist; // The strategist for the strategy\r\n    bool public isShutdown; // If the strategy is shutdown, stops all deposits\r\n    mapping(address => UniswapRouter02) public tokenDex; // Dex to use for swapping for a given token\r\n\r\n    EnumerableSet.AddressSet private _rewardTokens; // List of additional reward tokens when claiming rewards on Convex\r\n\r\n    event Deposit(uint256 amount); // Emitted after a successfull deposit\r\n    event Withdraw(uint256 amount); // Emitted after a successful withdrawal\r\n    event WithdrawAll(uint256 amount); // Emitted after successfully withdrwaing all\r\n    event Harvest(uint256 amount); // Emitted after a successful harvest\r\n    event Shutdown(); // Emitted after a successful shutdown\r\n    event SetCommunityReserve(address reserve); // Emitted after a succuessful setting of reserve\r\n    event SetCrvCommunityReserveShare(uint256 value); // Emitted after a succuessful setting of CRV Community Reserve Share\r\n    event SetCvxCommunityReserveShare(uint256 value); // Emitted after a succuessful setting of CVX Community Reserve Share\r\n    event SetImbalanceToleranceIn(uint256 value); // Emitted after a succuessful setting of imbalance tolerance in\r\n    event SetImbalanceToleranceOut(uint256 value); // Emitted after a succuessful setting of imbalance tolerance out\r\n    event SetHopImbalanceToleranceIn(uint256 value); // Emitted after a succuessful setting of hop imbalance tolerance in\r\n    event SetHopImbalanceToleranceOut(uint256 value); // Emitted after a succuessful setting of hop imbalance tolerance out\r\n    event SetStrategist(address strategist); // Emitted after a succuessful setting of strategist\r\n    event AddRewardToken(address token); // Emitted after successfully adding a new reward token\r\n    event RemoveRewardToken(address token); // Emitted after successfully removing a reward token\r\n    event SwapDex(address token, address newDex); // Emitted after successfully swapping a tokens dex\r\n\r\n    modifier onlyVault() {\r\n        require(msg.sender == vault, Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address vault_,\r\n        address strategist_,\r\n        uint256 convexPid_,\r\n        uint256 curveIndex_,\r\n        uint256 curveHopIndex_,\r\n        IAddressProvider addressProvider_\r\n    ) SlippageTolerance(addressProvider_.getRoleManager()) {\r\n        // Getting data from supporting contracts\r\n        (address lp_, , , address rewards_, , ) = _BOOSTER.poolInfo(convexPid_);\r\n        lp = IERC20(lp_);\r\n        rewards = IRewardStaking(rewards_);\r\n        address curvePool_ = _CURVE_REGISTRY.get_pool_from_lp_token(lp_);\r\n        curvePool = ICurveSwap(curvePool_);\r\n        address hopLp_ = ICurveSwap(curvePool_).coins(curveIndex_);\r\n        hopLp = IERC20(hopLp_);\r\n        address curveHopPool_ = _CURVE_REGISTRY.get_pool_from_lp_token(hopLp_);\r\n        curveHopPool = ICurveSwap(curveHopPool_);\r\n        address underlying_ = ICurveSwap(curveHopPool_).coins(curveHopIndex_);\r\n        underlying = IERC20(underlying_);\r\n        decimalMultiplier = 10**(18 - IERC20Full(underlying_).decimals());\r\n\r\n        // Setting inputs\r\n        vault = vault_;\r\n        strategist = strategist_;\r\n        convexPid = convexPid_;\r\n        curveIndex = curveIndex_;\r\n        curveHopIndex = curveHopIndex_;\r\n        _addressProvider = IAddressProvider(addressProvider_);\r\n\r\n        // Setting default values\r\n        imbalanceToleranceIn = 0.001e18;\r\n        imbalanceToleranceOut = 0.048e18;\r\n        hopImbalanceToleranceIn = 0.001e18;\r\n        hopImbalanceToleranceOut = 0.0015e18;\r\n\r\n        // Setting dexes\r\n        _setDex(address(_CRV), _SUSHISWAP);\r\n        _setDex(address(_CVX), _SUSHISWAP);\r\n        _setDex(address(underlying_), _SUSHISWAP);\r\n\r\n        // Approvals\r\n        IERC20(underlying_).safeApprove(curveHopPool_, type(uint256).max);\r\n        IERC20(hopLp_).safeApprove(curvePool_, type(uint256).max);\r\n        IERC20(lp_).safeApprove(address(_BOOSTER), type(uint256).max);\r\n        IERC20(underlying_).safeApprove(address(_SUSHISWAP), type(uint256).max);\r\n        _CVX.safeApprove(address(_CVX_ETH_CURVE_POOL), type(uint256).max);\r\n        _CRV.safeApprove(address(_SUSHISWAP), type(uint256).max);\r\n        _WETH.safeApprove(address(_SUSHISWAP), type(uint256).max);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw an amount of underlying to the vault.\r\n     * @dev This can only be called by the vault.\r\n     *      If the amount is not available, it will be made liquid.\r\n     * @param amount Amount of underlying to withdraw.\r\n     * @return True if successful withdrawal.\r\n     */\r\n    function withdraw(uint256 amount) external override onlyVault returns (bool) {\r\n        if (amount == 0) return false;\r\n\r\n        // Transferring from idle balance if enough\r\n        uint256 underlyingBalance = _underlyingBalance();\r\n        if (underlyingBalance >= amount) {\r\n            underlying.safeTransfer(vault, amount);\r\n            emit Withdraw(amount);\r\n            return true;\r\n        }\r\n\r\n        // Calculating needed amount of LP to withdraw\r\n        uint256 requiredUnderlyingAmount = amount - underlyingBalance;\r\n        uint256 maxHopLpBurned = _maxHopLpBurned(requiredUnderlyingAmount);\r\n        uint256 requiredHopLpAmount = maxHopLpBurned - _hopLpBalance();\r\n        uint256 maxLpBurned = _maxLpBurned(requiredHopLpAmount);\r\n        uint256 requiredLpAmount = maxLpBurned - _lpBalance();\r\n\r\n        // Unstaking needed LP Tokens from Convex\r\n        if (!rewards.withdrawAndUnwrap(requiredLpAmount, false)) return false;\r\n\r\n        // Removing needed liquidity from Curve Pool\r\n        uint256[2] memory amounts;\r\n        amounts[curveIndex] = requiredHopLpAmount;\r\n        curvePool.remove_liquidity_imbalance(amounts, maxLpBurned);\r\n\r\n        // Removing needed liquidity from Curve Hop Pool\r\n        uint256[3] memory hopAmounts;\r\n        hopAmounts[curveHopIndex] = requiredUnderlyingAmount;\r\n        curveHopPool.remove_liquidity_imbalance(hopAmounts, maxHopLpBurned);\r\n\r\n        // Sending underlying to vault\r\n        underlying.safeTransfer(vault, amount);\r\n        emit Withdraw(amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Shuts down the strategy, disabling deposits.\r\n     * @return True if reserve was successfully set.\r\n     */\r\n    function shutdown() external override onlyVault returns (bool) {\r\n        if (isShutdown) return false;\r\n        isShutdown = true;\r\n        emit Shutdown();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address of the communit reserve.\r\n     * @dev CRV & CVX will be taxed and allocated to the reserve,\r\n     *      such that Backd can participate in governance.\r\n     * @param _communityReserve Address of the community reserve.\r\n     * @return True if successfully set.\r\n     */\r\n    function setCommunityReserve(address _communityReserve) external onlyGovernance returns (bool) {\r\n        communityReserve = _communityReserve;\r\n        emit SetCommunityReserve(_communityReserve);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the share of CRV to send to the Community Reserve.\r\n     * @param crvCommunityReserveShare_ New fee charged on CRV rewards for governance.\r\n     * @return True if successfully set.\r\n     */\r\n    function setCrvCommunityReserveShare(uint256 crvCommunityReserveShare_)\r\n        external\r\n        onlyGovernance\r\n        returns (bool)\r\n    {\r\n        require(crvCommunityReserveShare_ <= ScaledMath.ONE, Error.INVALID_AMOUNT);\r\n        require(communityReserve != address(0), \"Community reserve must be set\");\r\n        crvCommunityReserveShare = crvCommunityReserveShare_;\r\n        emit SetCrvCommunityReserveShare(crvCommunityReserveShare_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the share of CVX to send to the Community Reserve.\r\n     * @param cvxCommunityReserveShare_ New fee charged on CVX rewards for governance.\r\n     * @return True if successfully set.\r\n     */\r\n    function setCvxCommunityReserveShare(uint256 cvxCommunityReserveShare_)\r\n        external\r\n        onlyGovernance\r\n        returns (bool)\r\n    {\r\n        require(cvxCommunityReserveShare_ <= ScaledMath.ONE, Error.INVALID_AMOUNT);\r\n        require(communityReserve != address(0), \"Community reserve must be set\");\r\n        cvxCommunityReserveShare = cvxCommunityReserveShare_;\r\n        emit SetCvxCommunityReserveShare(cvxCommunityReserveShare_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set imbalance tolerance for Curve Pool deposits.\r\n     * @dev Stored as a percent, e.g. 1% would be set as 0.01\r\n     * @param _imbalanceToleranceIn New imbalance tolarance in.\r\n     * @return True if successfully set.\r\n     */\r\n    function setImbalanceToleranceIn(uint256 _imbalanceToleranceIn)\r\n        external\r\n        onlyGovernance\r\n        returns (bool)\r\n    {\r\n        imbalanceToleranceIn = _imbalanceToleranceIn;\r\n        emit SetImbalanceToleranceIn(_imbalanceToleranceIn);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set imbalance tolerance for Curve Pool withdrawals.\r\n     * @dev Stored as a percent, e.g. 1% would be set as 0.01\r\n     * @param _imbalanceToleranceOut New imbalance tolarance out.\r\n     * @return True if successfully set.\r\n     */\r\n    function setImbalanceToleranceOut(uint256 _imbalanceToleranceOut)\r\n        external\r\n        onlyGovernance\r\n        returns (bool)\r\n    {\r\n        imbalanceToleranceOut = _imbalanceToleranceOut;\r\n        emit SetImbalanceToleranceOut(_imbalanceToleranceOut);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set hop imbalance tolerance for Curve Hop Pool deposits.\r\n     * @dev Stored as a percent, e.g. 1% would be set as 0.01\r\n     * @param _hopImbalanceToleranceIn New hop imbalance tolarance in.\r\n     * @return True if successfully set.\r\n     */\r\n    function setHopImbalanceToleranceIn(uint256 _hopImbalanceToleranceIn)\r\n        external\r\n        onlyGovernance\r\n        returns (bool)\r\n    {\r\n        hopImbalanceToleranceIn = _hopImbalanceToleranceIn;\r\n        emit SetHopImbalanceToleranceIn(_hopImbalanceToleranceIn);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set hop imbalance tolerance for Curve Hop Pool withdrawals.\r\n     * @dev Stored as a percent, e.g. 1% would be set as 0.01\r\n     * @param _hopImbalanceToleranceOut New hop imbalance tolarance out.\r\n     * @return True if successfully set.\r\n     */\r\n    function setHopImbalanceToleranceOut(uint256 _hopImbalanceToleranceOut)\r\n        external\r\n        onlyGovernance\r\n        returns (bool)\r\n    {\r\n        hopImbalanceToleranceOut = _hopImbalanceToleranceOut;\r\n        emit SetHopImbalanceToleranceOut(_hopImbalanceToleranceOut);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set strategist.\r\n     * @dev Can only be set by current strategist.\r\n     * @param _strategist Address of new strategist.\r\n     * @return True if successfully set.\r\n     */\r\n    function setStrategist(address _strategist) external returns (bool) {\r\n        require(msg.sender == strategist, Error.UNAUTHORIZED_ACCESS);\r\n        strategist = _strategist;\r\n        emit SetStrategist(_strategist);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Add a reward token to list of extra reward tokens.\r\n     * @dev These are tokens that are not the main assets of the strategy. For instance, temporary incentives.\r\n     * @param token Address of token to add to reward token list.\r\n     * @return True if successfully added.\r\n     */\r\n    function addRewardToken(address token) external onlyGovernance returns (bool) {\r\n        require(\r\n            token != address(_CVX) &&\r\n                token != address(underlying) &&\r\n                token != address(_CRV) &&\r\n                token != address(_WETH),\r\n            Error.INVALID_TOKEN_TO_ADD\r\n        );\r\n        if (_rewardTokens.contains(token)) return false;\r\n        _rewardTokens.add(token);\r\n        _setDex(token, _SUSHISWAP);\r\n        IERC20(token).safeApprove(address(_SUSHISWAP), 0);\r\n        IERC20(token).safeApprove(address(_SUSHISWAP), type(uint256).max);\r\n        emit AddRewardToken(token);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove a reward token.\r\n     * @param token Address of token to remove from reward token list.\r\n     * @return True if successfully removed.\r\n     */\r\n    function removeRewardToken(address token) external onlyGovernance returns (bool) {\r\n        if (!_rewardTokens.remove(token)) return false;\r\n        emit RemoveRewardToken(token);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the DEX that should be used for swapping for a specific coin.\r\n     *         If Uniswap is active, it will switch to SushiSwap and vice versa.\r\n     * @dev Only SushiSwap and Uniswap are supported.\r\n     * @param token Address of token for which the DEX should be updated.\r\n     */\r\n    function swapDex(address token) external onlyGovernance returns (bool) {\r\n        UniswapRouter02 currentDex = tokenDex[token];\r\n        require(address(currentDex) != address(0), Error.NO_DEX_SET);\r\n        UniswapRouter02 newDex = currentDex == _SUSHISWAP ? _UNISWAP : _SUSHISWAP;\r\n        _setDex(token, newDex);\r\n        IERC20(token).safeApprove(address(newDex), 0);\r\n        IERC20(token).safeApprove(address(newDex), type(uint256).max);\r\n        emit SwapDex(token, address(newDex));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the Convex Pool used for farming yield, e.g. from FRAX to MIM.\r\n     * @dev First withdraws all funds, then harvests any rewards, then changes pool, then deposits again.\r\n     * @param convexPid_ The PID for the new Convex Pool.\r\n     * @param curveIndex_ The index of the new Convex Pool Token in the new Curve Pool.\r\n     */\r\n    function changeConvexPool(uint256 convexPid_, uint256 curveIndex_) external onlyGovernance {\r\n        _harvest();\r\n        _withdrawAllToHopLp();\r\n        convexPid = convexPid_;\r\n        curveIndex = curveIndex_;\r\n        (address lp_, , , address rewards_, , ) = _BOOSTER.poolInfo(convexPid_);\r\n        lp = IERC20(lp_);\r\n        rewards = IRewardStaking(rewards_);\r\n        address curvePool_ = _CURVE_REGISTRY.get_pool_from_lp_token(lp_);\r\n        curvePool = ICurveSwap(curvePool_);\r\n        IERC20(hopLp).safeApprove(curvePool_, 0);\r\n        IERC20(hopLp).safeApprove(curvePool_, type(uint256).max);\r\n        IERC20(lp_).safeApprove(address(_BOOSTER), 0);\r\n        IERC20(lp_).safeApprove(address(_BOOSTER), type(uint256).max);\r\n        require(_deposit(), Error.DEPOSIT_FAILED);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the name of the strategy.\r\n     * @return The name of the strategy.\r\n     */\r\n    function name() external view override returns (string memory) {\r\n        return \"BkdTriHopCvx\";\r\n    }\r\n\r\n    /**\r\n     * @notice Amount of rewards that can be harvested in the underlying.\r\n     * @dev Includes rewards for CRV & CVX.\r\n     * @return Estimated amount of underlying available to harvest.\r\n     */\r\n    function harvestable() external view override returns (uint256) {\r\n        uint256 crvAmount_ = rewards.earned(address(this));\r\n        if (crvAmount_ == 0) return 0;\r\n        return\r\n            _underlyingAmountOut(\r\n                _CRV,\r\n                crvAmount_.scaledMul(ScaledMath.ONE - crvCommunityReserveShare)\r\n            ) +\r\n            _underlyingAmountOut(\r\n                _CVX,\r\n                getCvxMintAmount(crvAmount_).scaledMul(ScaledMath.ONE - cvxCommunityReserveShare)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Contract does not stash tokens.\r\n     */\r\n    function hasPendingFunds() external pure override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit all available underlying into Convex pool.\r\n     * @dev Liquidity is added to Curve Pool then Curve LP tokens are deposited\r\n     * \t\tinto Convex and Convex LP tokens are staked for rewards by default.\r\n     * @return True if successful deposit.\r\n     */\r\n    function deposit() public payable override onlyVault returns (bool) {\r\n        return _deposit();\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw all underlying.\r\n     * @dev This does not liquidate reward tokens and only considers\r\n     *      idle underlying, idle lp tokens and staked lp tokens.\r\n     * @return Amount of underlying withdrawn\r\n     */\r\n    function withdrawAll() public override returns (uint256) {\r\n        require(\r\n            msg.sender == vault || _roleManager().hasRole(Roles.GOVERNANCE, msg.sender),\r\n            Error.UNAUTHORIZED_ACCESS\r\n        );\r\n\r\n        // Withdrawing all from Convex and converting to Hop LP Token\r\n        _withdrawAllToHopLp();\r\n\r\n        // Removing liquidity from Curve Hop Pool\r\n        uint256 hopLpBalance = _hopLpBalance();\r\n        if (hopLpBalance > 0) {\r\n            curveHopPool.remove_liquidity_one_coin(\r\n                hopLpBalance,\r\n                int128(uint128(curveHopIndex)),\r\n                _minUnderlyingAccepted(hopLpBalance)\r\n            );\r\n        }\r\n\r\n        // Transferring underlying to vault\r\n        uint256 underlyingBalance = _underlyingBalance();\r\n        if (underlyingBalance == 0) return 0;\r\n        underlying.safeTransfer(vault, underlyingBalance);\r\n        emit WithdrawAll(underlyingBalance);\r\n        return underlyingBalance;\r\n    }\r\n\r\n    /**\r\n     * @notice Harvests reward tokens and sells these for the underlying.\r\n     * @dev Any underlying harvested is not redeposited by this method.\r\n     * @return Amount of underlying harvested.\r\n     */\r\n    function harvest() public override onlyVault returns (uint256) {\r\n        return _harvest();\r\n    }\r\n\r\n    /**\r\n     * @notice Get the total underlying balance of the strategy.\r\n     * @dev This includes idle underlying, idle LP and LP deposited on Convex.\r\n     * @return Underlying balance of strategy.\r\n     */\r\n    function balance() public view override returns (uint256) {\r\n        return\r\n            _underlyingBalance() +\r\n            _hopLpToUnderlying(_lpToHopLp(_stakedBalance() + _lpBalance()) + _hopLpBalance());\r\n    }\r\n\r\n    /**\r\n     * @dev Set the dex to use for a token.\r\n     * @param token Address of token to set the dex for.\r\n     * @param dex Dex to use for swaps with that token.\r\n     */\r\n    function _setDex(address token, UniswapRouter02 dex) internal {\r\n        tokenDex[token] = dex;\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps all balance of a token for WETH.\r\n     * @param token Address of the token to swap for WETH.\r\n     */\r\n    function _swapAllForWeth(IERC20 token) internal {\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return _swapForWeth(token, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps a token for WETH.\r\n     * @param token Address of the token to swap for WETH.\r\n     * @param amount Amount of the token to swap for WETH.\r\n     */\r\n    function _swapForWeth(IERC20 token, uint256 amount) internal {\r\n        if (amount == 0) return;\r\n\r\n        // Handling CVX Swaps\r\n        if (address(token) == address(_CVX)) {\r\n            _CVX_ETH_CURVE_POOL.exchange(\r\n                _CURVE_CVX_INDEX,\r\n                _CURVE_ETH_INDEX,\r\n                amount,\r\n                amount\r\n                    .scaledMul(_addressProvider.getOracleProvider().getPriceETH(address(_CVX)))\r\n                    .scaledMul(slippageTolerance)\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Handling other swaps\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(token);\r\n        path[1] = address(_WETH);\r\n        tokenDex[address(token)].swapExactTokensForTokens(\r\n            amount,\r\n            amount\r\n                .scaledMul(_addressProvider.getOracleProvider().getPriceETH(address(token)))\r\n                .scaledMul(slippageTolerance),\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps all available WETH for underlying.\r\n     */\r\n    function _swapWethForUnderlying() internal {\r\n        uint256 wethBalance = _WETH.balanceOf(address(this));\r\n        if (wethBalance == 0) return;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(_WETH);\r\n        path[1] = address(underlying);\r\n        tokenDex[address(underlying)].swapExactTokensForTokens(\r\n            wethBalance,\r\n            wethBalance\r\n                .scaledDiv(_addressProvider.getOracleProvider().getPriceETH(address(underlying)))\r\n                .scaledMul(slippageTolerance) / decimalMultiplier,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Sends a share of the current balance of CRV and CVX to the Community Reserve.\r\n     */\r\n    function _sendCommunityReserveShare() internal {\r\n        address communityReserve_ = communityReserve;\r\n        if (communityReserve_ == address(0)) return;\r\n        uint256 cvxCommunityReserveShare_ = cvxCommunityReserveShare;\r\n        if (cvxCommunityReserveShare_ > 0) {\r\n            uint256 cvxBalance_ = _CVX.balanceOf(address(this));\r\n            if (cvxBalance_ > 0) {\r\n                _CVX.safeTransfer(\r\n                    communityReserve_,\r\n                    cvxBalance_.scaledMul(cvxCommunityReserveShare_)\r\n                );\r\n            }\r\n        }\r\n        uint256 crvCommunityReserveShare_ = crvCommunityReserveShare;\r\n        if (crvCommunityReserveShare_ > 0) {\r\n            uint256 crvBalance_ = _CRV.balanceOf(address(this));\r\n            if (crvBalance_ > 0) {\r\n                _CRV.safeTransfer(\r\n                    communityReserve_,\r\n                    crvBalance_.scaledMul(crvCommunityReserveShare_)\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balance of the underlying.\r\n     */\r\n    function _underlyingBalance() internal view returns (uint256) {\r\n        return underlying.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balance of the hop lp.\r\n     */\r\n    function _hopLpBalance() internal view returns (uint256) {\r\n        return hopLp.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balance of the lp.\r\n     */\r\n    function _lpBalance() internal view returns (uint256) {\r\n        return lp.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balance of the underlying staked in the Curve pool.\r\n     */\r\n    function _stakedBalance() internal view returns (uint256) {\r\n        return rewards.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of underlying that would be received by selling the token.\r\n     * @dev Uses WETH as intermediate in swap path.\r\n     * @return Underlying amount that would be received.\r\n     */\r\n    function _underlyingAmountOut(IERC20 token, uint256 amountIn) internal view returns (uint256) {\r\n        if (amountIn == 0) return 0;\r\n        address[] memory path;\r\n        if (token == _CVX) {\r\n            IERC20 underlying_ = underlying;\r\n            path = new address[](2);\r\n            path[0] = address(_WETH);\r\n            path[1] = address(underlying_);\r\n            return\r\n                tokenDex[address(underlying_)].getAmountsOut(\r\n                    _CVX_ETH_CURVE_POOL.get_dy(_CURVE_CVX_INDEX, _CURVE_ETH_INDEX, amountIn),\r\n                    path\r\n                )[1];\r\n        }\r\n        path = new address[](3);\r\n        path[0] = address(token);\r\n        path[1] = address(_WETH);\r\n        path[2] = address(underlying);\r\n        return tokenDex[address(token)].getAmountsOut(amountIn, path)[2];\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the minimum LP to accept when depositing underlying into Curve Pool.\r\n     * @param _hopLpAmount Amount of Hop LP that is being deposited into Curve Pool.\r\n     * @return The minimum LP balance to accept.\r\n     */\r\n    function _minLpAccepted(uint256 _hopLpAmount) internal view returns (uint256) {\r\n        return _hopLpToLp(_hopLpAmount).scaledMul(ScaledMath.ONE - imbalanceToleranceIn);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the maximum LP to accept burning when withdrawing amount from Curve Pool.\r\n     * @param _hopLpAmount Amount of Hop LP that is being widthdrawn from Curve Pool.\r\n     * @return The maximum LP balance to accept burning.\r\n     */\r\n    function _maxLpBurned(uint256 _hopLpAmount) internal view returns (uint256) {\r\n        return _hopLpToLp(_hopLpAmount).scaledMul(ScaledMath.ONE + imbalanceToleranceOut);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the minimum Hop LP to accept when burning LP tokens to withdraw from Curve Pool.\r\n     * @param _lpAmount Amount of LP tokens being burned to withdraw from Curve Pool.\r\n     * @return The mininum Hop LP balance to accept.\r\n     */\r\n    function _minHopLpAcceptedFromWithdraw(uint256 _lpAmount) internal view returns (uint256) {\r\n        return _lpToHopLp(_lpAmount).scaledMul(ScaledMath.ONE - imbalanceToleranceOut);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the minimum Hop LP to accept when depositing underlying into Curve Hop Pool.\r\n     * @param _underlyingAmount Amount of underlying that is being deposited into Curve Hop Pool.\r\n     * @return The minimum Hop LP balance to accept.\r\n     */\r\n    function _minHopLpAcceptedFromDeposit(uint256 _underlyingAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            _underlyingToHopLp(_underlyingAmount).scaledMul(\r\n                ScaledMath.ONE - hopImbalanceToleranceIn\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the maximum Hop LP to accept burning when withdrawing amount from Curve Hop Pool.\r\n     * @param _underlyingAmount Amount of underlying that is being widthdrawn from Curve Hop Pool.\r\n     * @return The maximum Hop LP balance to accept burning.\r\n     */\r\n    function _maxHopLpBurned(uint256 _underlyingAmount) internal view returns (uint256) {\r\n        return\r\n            _underlyingToHopLp(_underlyingAmount).scaledMul(\r\n                ScaledMath.ONE + hopImbalanceToleranceOut\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the minimum underlying to accept when burning Hop LP tokens to withdraw from Curve Hop Pool.\r\n     * @param _hopLpAmount Amount of Hop LP tokens being burned to withdraw from Curve Hop Pool.\r\n     * @return The mininum underlying balance to accept.\r\n     */\r\n    function _minUnderlyingAccepted(uint256 _hopLpAmount) internal view returns (uint256) {\r\n        return\r\n            _hopLpToUnderlying(_hopLpAmount).scaledMul(ScaledMath.ONE - hopImbalanceToleranceOut);\r\n    }\r\n\r\n    /**\r\n     * @notice Converts an amount of underlying into their estimated Hop LP value.\r\n     * @dev Uses get_virtual_price which is less suceptible to manipulation.\r\n     *  But is also less accurate to how much could be withdrawn.\r\n     * @param _underlyingAmount Amount of underlying to convert.\r\n     * @return The estimated value in the Hop LP.\r\n     */\r\n    function _underlyingToHopLp(uint256 _underlyingAmount) internal view returns (uint256) {\r\n        return (_underlyingAmount * decimalMultiplier).scaledDiv(curveHopPool.get_virtual_price());\r\n    }\r\n\r\n    /**\r\n     * @notice Converts an amount of Hop LP into their estimated underlying value.\r\n     * @dev Uses get_virtual_price which is less suceptible to manipulation.\r\n     *  But is also less accurate to how much could be withdrawn.\r\n     * @param _hopLpAmount Amount of Hop LP to convert.\r\n     * @return The estimated value in the underlying.\r\n     */\r\n    function _hopLpToUnderlying(uint256 _hopLpAmount) internal view returns (uint256) {\r\n        return (_hopLpAmount / decimalMultiplier).scaledMul(curveHopPool.get_virtual_price());\r\n    }\r\n\r\n    /**\r\n     * @notice Converts an amount of LP into their estimated Hop LP value.\r\n     * @dev Uses get_virtual_price which is less suceptible to manipulation.\r\n     *  But is also less accurate to how much could be withdrawn.\r\n     * @param _lpAmount Amount of underlying to convert.\r\n     * @return The estimated value in the Hop LP.\r\n     */\r\n    function _lpToHopLp(uint256 _lpAmount) internal view returns (uint256) {\r\n        return\r\n            _lpAmount.scaledMul(curvePool.get_virtual_price()).scaledDiv(\r\n                curveHopPool.get_virtual_price()\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Converts an amount of Hop LP into their estimated LP value.\r\n     * @dev Uses get_virtual_price which is less suceptible to manipulation.\r\n     *  But is also less accurate to how much could be withdrawn.\r\n     * @param _hopLpAmount Amount of Hop LP to convert.\r\n     * @return The estimated value in the LP.\r\n     */\r\n    function _hopLpToLp(uint256 _hopLpAmount) internal view returns (uint256) {\r\n        return\r\n            _hopLpAmount.scaledMul(curveHopPool.get_virtual_price()).scaledDiv(\r\n                curvePool.get_virtual_price()\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit all available underlying into Convex pool.\r\n     * @return True if successful deposit.\r\n     */\r\n    function _deposit() private returns (bool) {\r\n        require(msg.value == 0, Error.INVALID_VALUE);\r\n        require(!isShutdown, Error.STRATEGY_SHUT_DOWN);\r\n\r\n        // Depositing into Curve Hop Pool\r\n        uint256 underlyingBalance = _underlyingBalance();\r\n        if (underlyingBalance > 0) {\r\n            uint256[3] memory hopAmounts;\r\n            hopAmounts[curveHopIndex] = underlyingBalance;\r\n            curveHopPool.add_liquidity(hopAmounts, _minHopLpAcceptedFromDeposit(underlyingBalance));\r\n        }\r\n\r\n        // Depositing into Curve Pool\r\n        uint256 hopLpBalance = _hopLpBalance();\r\n        if (hopLpBalance > 0) {\r\n            uint256[2] memory amounts;\r\n            amounts[curveIndex] = hopLpBalance;\r\n            curvePool.add_liquidity(amounts, _minLpAccepted(hopLpBalance));\r\n        }\r\n\r\n        // Depositing into Convex and Staking\r\n        if (_lpBalance() == 0) return false;\r\n        if (!_BOOSTER.depositAll(convexPid, true)) return false;\r\n        emit Deposit(underlyingBalance);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all underlying and convert to the Hop LP Token.\r\n     */\r\n    function _withdrawAllToHopLp() private {\r\n        // Unstaking and withdrawing from Convex pool\r\n        uint256 stakedBalance = _stakedBalance();\r\n        if (stakedBalance > 0) {\r\n            rewards.withdrawAndUnwrap(stakedBalance, false);\r\n        }\r\n\r\n        // Removing liquidity from Curve Pool\r\n        uint256 lpBalance = _lpBalance();\r\n        if (lpBalance > 0) {\r\n            curvePool.remove_liquidity_one_coin(\r\n                lpBalance,\r\n                int128(uint128(curveIndex)),\r\n                _minHopLpAcceptedFromWithdraw(lpBalance)\r\n            );\r\n        }\r\n    }\r\n\r\n    function _harvest() private returns (uint256) {\r\n        uint256 initialBalance = _underlyingBalance();\r\n\r\n        // Claim Convex rewards\r\n        rewards.getReward();\r\n\r\n        // Sending share to Community Reserve\r\n        _sendCommunityReserveShare();\r\n\r\n        // Swap CVX for WETH\r\n        _swapAllForWeth(_CVX);\r\n\r\n        // Swap CRV for WETH\r\n        _swapAllForWeth(_CRV);\r\n\r\n        // Swap Extra Rewards for WETH\r\n        for (uint256 i = 0; i < _rewardTokens.length(); i++) {\r\n            _swapAllForWeth(IERC20(_rewardTokens.at(i)));\r\n        }\r\n\r\n        // Swap WETH for underlying\r\n        _swapWethForUnderlying();\r\n\r\n        uint256 harvested = _underlyingBalance() - initialBalance;\r\n        emit Harvest(harvested);\r\n        return harvested;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategist_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"convexPid_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curveIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curveHopIndex_\",\"type\":\"uint256\"},{\"internalType\":\"contract IAddressProvider\",\"name\":\"addressProvider_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"SetCommunityReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetCrvCommunityReserveShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetCvxCommunityReserveShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetHopImbalanceToleranceIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetHopImbalanceToleranceOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetImbalanceToleranceIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetImbalanceToleranceOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetSlippageTolerance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"}],\"name\":\"SetStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDex\",\"type\":\"address\"}],\"name\":\"SwapDex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"convexPid_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curveIndex_\",\"type\":\"uint256\"}],\"name\":\"changeConvexPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvCommunityReserveShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveHopIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveHopPool\",\"outputs\":[{\"internalType\":\"contract ICurveSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"contract ICurveSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCommunityReserveShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"crvEarned\",\"type\":\"uint256\"}],\"name\":\"getCvxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPendingFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hopImbalanceToleranceIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hopImbalanceToleranceOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hopLp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imbalanceToleranceIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imbalanceToleranceOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"contract IRewardStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityReserve\",\"type\":\"address\"}],\"name\":\"setCommunityReserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"crvCommunityReserveShare_\",\"type\":\"uint256\"}],\"name\":\"setCrvCommunityReserveShare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cvxCommunityReserveShare_\",\"type\":\"uint256\"}],\"name\":\"setCvxCommunityReserveShare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hopImbalanceToleranceIn\",\"type\":\"uint256\"}],\"name\":\"setHopImbalanceToleranceIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hopImbalanceToleranceOut\",\"type\":\"uint256\"}],\"name\":\"setHopImbalanceToleranceOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_imbalanceToleranceIn\",\"type\":\"uint256\"}],\"name\":\"setImbalanceToleranceIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_imbalanceToleranceOut\",\"type\":\"uint256\"}],\"name\":\"setImbalanceToleranceOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippageTolerance\",\"type\":\"uint256\"}],\"name\":\"setSlippageTolerance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"swapDex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDex\",\"outputs\":[{\"internalType\":\"contract UniswapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BkdTriHopCvx", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ab8de9ff63632a6ae8e99fe0cc13279862329c2c000000000000000000000000d24f0164aedbe5676536deb4867cd3d58b4f5405000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000139c15e21b0f6e43fc397face5de5b7d5ae6874a", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://79467b4db15d304df6317edaf636f38a2999706f1e5ab95ae3642e6b33a6f332"}]}