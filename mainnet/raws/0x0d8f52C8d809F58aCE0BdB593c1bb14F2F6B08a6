{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"HarvestResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\npragma solidity 0.8.12;\\n\\nimport \\\"Ownable.sol\\\";\\nimport { IResolver } from \\\"IResolver.sol\\\";\\nimport { IVaultMK2 } from \\\"IVaultMK2.sol\\\";\\n\\n//  ________  ________  ________\\n//  |\\\\   ____\\\\|\\\\   __  \\\\|\\\\   __  \\\\\\n//  \\\\ \\\\  \\\\___|\\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\\\n//   \\\\ \\\\  \\\\  __\\\\ \\\\   _  _\\\\ \\\\  \\\\\\\\\\\\  \\\\\\n//    \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\\\\\  \\\\\\\\ \\\\  \\\\\\\\\\\\  \\\\\\n//     \\\\ \\\\_______\\\\ \\\\__\\\\\\\\ _\\\\\\\\ \\\\_______\\\\\\n//      \\\\|_______|\\\\|__|\\\\|__|\\\\|_______|\\n// Harvest Resolver\\n// To work with Gelato Ops to automate strategy harvests\\n\\n// gro protocol: https://github.com/groLabs\\n\\n// Primary Author(s)\\n// Farhaan Ali: https://github.com/farhaan-ali\\n\\n// Reviewer(s) / Contributor(s)\\n// Kristian Domanski: https://github.com/kristian-gro\\n\\ncontract HarvestResolver is IResolver, Ownable {\\n    // address for DAI Vault\\n    address public immutable DAIVAULT;\\n    // mapping of (strategy index => gas cost) to harvest each strategy\\n    mapping(uint256 => uint256) public daiStrategyCosts;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n    constructor(address _daiVault) {\\n        DAIVAULT = _daiVault;\\n    }\\n\\n    /** set gas cost for dai strategy */\\n    function setDaiStrategyCost(uint256 index, uint256 gascost) external onlyOwner {\\n        daiStrategyCosts[index] = gascost;\\n    }\\n\\n    /** check for gelato keeper */\\n    function checker()\\n        external\\n        view\\n        override\\n        returns (bool canExec, bytes memory execPayload) {\\n            //check strategy length\\n            uint256 daiStrategyLength = IVaultMK2(DAIVAULT).getStrategiesLength();\\n\\n            for (uint256 i = 0; i < daiStrategyLength; i++) {\\n                uint256 callCost = block.basefee * daiStrategyCosts[i];\\n\\n                if (IVaultMK2(DAIVAULT).strategyHarvestTrigger(i, callCost)) {\\n                    canExec = true;\\n                    execPayload = abi.encodeWithSelector(\\n                        IVaultMK2.strategyHarvest.selector,\\n                        uint256(i)\\n                    );\\n                }\\n\\n                if (canExec) break;\\n            }\\n\\n        }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface IResolver {\\n    function checker()\\n        external\\n        view\\n        returns (bool canExec, bytes memory execPayload);\\n}\\n\"\r\n    },\r\n    \"IVaultMK2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\n\\npragma solidity 0.8.12;\\n\\ninterface IVaultMK2 {\\n    function withdraw(uint256 amount) external;\\n\\n    function withdraw(uint256 amount, address recipient) external;\\n\\n    function withdrawByStrategyOrder(\\n        uint256 amount,\\n        address recipient,\\n        bool reversed\\n    ) external;\\n\\n    function withdrawByStrategyIndex(\\n        uint256 amount,\\n        address recipient,\\n        uint256 strategyIndex\\n    ) external;\\n\\n    function deposit(uint256 amount) external;\\n\\n    function setStrategyDebtRatio(uint256[] calldata strategyRetios) external;\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function getStrategiesLength() external view returns (uint256);\\n\\n    function strategyHarvestTrigger(uint256 index, uint256 callCost) external view returns (bool);\\n\\n    function strategyHarvest(uint256 index) external returns (bool);\\n\\n    function getStrategyAssets(uint256 index) external view returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function updateStrategyDebtRatio(address strategy, uint256 _debtRatio) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"HarvestResolver.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daiVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAIVAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daiStrategyCosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gascost\",\"type\":\"uint256\"}],\"name\":\"setDaiStrategyCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HarvestResolver", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000277947d84a2ec370a636683799351acef97fec60", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}