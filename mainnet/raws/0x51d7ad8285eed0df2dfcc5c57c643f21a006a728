{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\n    abstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract NFTAuction is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    // uint256 public royaltyPercentage= 200; // 2%\r\n    // uint256 public ownerPercentage= 0; // 0%\r\n    uint256 public settlePenalty= 5;    // 5%\r\n\r\n    mapping(address => mapping(uint256 => Auction)) public nftContractAuctions;\r\n    mapping(address => mapping(uint256 => Sale)) public nftContractSale;\r\n    mapping(address => mapping(uint256 => address)) public nftOwner;\r\n    mapping(address => uint256) failedTransferCredits;\r\n    mapping(address => mapping(uint256 => Royalty)) public nftRoyalty;\r\n\r\n \r\n    struct Auction {\r\n        //map token ID to\r\n        uint256 minPrice;\r\n        uint256 auctionBidPeriod; //Increments the length of time the auction is open in which a new bid can be made after each bid.\r\n        uint256 auctionEnd;\r\n        uint256 nftHighestBid;\r\n        uint256 bidIncreasePercentage;\r\n        uint256 ownerPercentage;\r\n        uint256 auctionStartTime;\r\n        address nftHighestBidder;\r\n        address nftSeller;\r\n        address nftRecipient; //The bidder can specify a recipient for the NFT if their bid is successful.\r\n        address ERC20Token; // The seller can specify an ERC20 token that can be used to bid or purchase the NFT\r\n    }\r\n\r\n    struct Sale{\r\n        address nftSeller;\r\n        address ERC20Token;\r\n        uint256 buyNowPrice;\r\n    }\r\n\r\n    struct Royalty{\r\n        address royaltyOwner;\r\n        uint256 royaltyPercentage;\r\n    }\r\n\r\n    modifier minimumBidNotMade(address _nftContractAddress, uint256 _tokenId) {\r\n        require(\r\n            !_isMinimumBidMade(_nftContractAddress, _tokenId),\r\n            \"The auction has a valid bid made\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier auctionOngoing(address _nftContractAddress, uint256 _tokenId) {\r\n        require(\r\n            _isAuctionOngoing(_nftContractAddress, _tokenId),\r\n            \"Auction has ended\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isAuctionOver(address _nftContractAddress, uint256 _tokenId) {\r\n        require(\r\n            !_isAuctionOngoing(_nftContractAddress, _tokenId),\r\n            \"Auction is not yet over\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier priceGreaterThanZero(uint256 _price) {\r\n        require(_price > 0, \"Price cannot be 0\");\r\n        _;\r\n    }\r\n    \r\n    modifier paymentAccepted(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _tokenAmount\r\n    ) {\r\n        require(\r\n            _isPaymentAccepted(\r\n                _nftContractAddress,\r\n                _tokenId,\r\n                _erc20Token,\r\n                _tokenAmount\r\n            ),\r\n            \"Bid to be made in quantities of specified token or eth\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notZeroAddress(address _address) {\r\n        require(_address != address(0), \"cannot specify 0 address\");\r\n        _;\r\n    }\r\n\r\n    modifier increasePercentageAboveMinimum(uint256 _bidIncreasePercentage) {\r\n        require(\r\n            _bidIncreasePercentage >= 0,\r\n            \"Bid increase percentage must be greater than minimum settable increase percentage\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notNftSeller(address _nftContractAddress, uint256 _tokenId) {\r\n        require(\r\n            msg.sender !=\r\n                nftContractAuctions[_nftContractAddress][_tokenId].nftSeller,\r\n            \"Owner cannot bid on own NFT\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier biddingPeriodMinimum(\r\n        uint256 _auctionBidPeriod\r\n    ){\r\n        require(_auctionBidPeriod> 600,\"Minimum bidding beriod is 10 minutes\");\r\n        _;\r\n    }\r\n\r\n    modifier bidAmountMeetsBidRequirements(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint256 _tokenAmount\r\n    ) {\r\n        require(\r\n            _doesBidMeetBidRequirements(\r\n                _nftContractAddress,\r\n                _tokenId,\r\n                _tokenAmount\r\n            ),\r\n            \"Not enough funds to bid on NFT\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyNftSeller(address _nftContractAddress, uint256 _tokenId) {\r\n        require(\r\n            msg.sender ==\r\n                nftContractAuctions[_nftContractAddress][_tokenId].nftSeller,\r\n            \"Only the owner can call this function\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    // constructor(address _royaltyOwner) {\r\n    //     royaltyOwner= _royaltyOwner;\r\n    // }\r\n\r\n    function _isPaymentAccepted(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _bidERC20Token,\r\n        uint256 _tokenAmount\r\n    ) internal view returns (bool) {\r\n        address auctionERC20Token = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].ERC20Token;\r\n        if (_isERC20Auction(auctionERC20Token)) {\r\n            return\r\n                msg.value == 0 &&\r\n                auctionERC20Token == _bidERC20Token &&\r\n                _tokenAmount > 0;\r\n        } else {\r\n            return\r\n                msg.value != 0 &&\r\n                _bidERC20Token == address(0) &&\r\n                _tokenAmount == 0;\r\n        }\r\n    }\r\n\r\n    function _isERC20Auction(address _auctionERC20Token)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return _auctionERC20Token != address(0);\r\n    }\r\n\r\n    function _getBidIncreasePercentage(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId\r\n    ) internal view returns (uint256) {\r\n        uint256 bidIncreasePercentage = nftContractAuctions[\r\n            _nftContractAddress\r\n        ][_tokenId].bidIncreasePercentage;\r\n        return bidIncreasePercentage;\r\n    }\r\n\r\n    function _doesBidMeetBidRequirements(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint256 _tokenAmount\r\n    ) internal view returns (bool) {\r\n        //if the NFT is up for auction, the bid needs to be a % higher than the previous bid\r\n        uint256 bidIncreaseAmount= (nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBid).mul(100 +_getBidIncreasePercentage(_nftContractAddress, _tokenId))/100;\r\n        return (msg.value >= bidIncreaseAmount ||\r\n            _tokenAmount >= bidIncreaseAmount);\r\n    }\r\n\r\n    /*\r\n     * NFTs in a batch must contain between 2 and 100 NFTs\r\n    */\r\n    modifier batchWithinLimits(uint256 _batchTokenIdsLength) {\r\n        require(\r\n            _batchTokenIdsLength > 1 && _batchTokenIdsLength <= 10000,\r\n            \"Number of NFTs not applicable for batch sale/auction\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function _isAuctionOngoing(address _nftContractAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 auctionEndTimestamp = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].auctionEnd;\r\n        //if the auctionEnd is set to 0, the auction is technically on-going, however\r\n        //the minimum bid price (minPrice) has not yet been met.\r\n        return (auctionEndTimestamp == 0 ||\r\n            block.timestamp < auctionEndTimestamp);\r\n    }\r\n\r\n    function createBatchNftAuction(\r\n        address _nftContractAddress,\r\n        uint256[] memory _batchTokenIds,\r\n        uint256[] memory _batchTokenPrices,\r\n        uint256[] memory _royaltyPercentage,\r\n        address _erc20Token,\r\n        uint256 _auctionStartTime,\r\n        uint256 _ownerPercentage,\r\n        uint256 _auctionBidPeriod, \r\n        uint256 _bidIncreasePercentage\r\n    )\r\n        external\r\n        batchWithinLimits(_batchTokenIds.length)\r\n        biddingPeriodMinimum(_auctionBidPeriod)\r\n        increasePercentageAboveMinimum(_bidIncreasePercentage)\r\n    {\r\n        _auctionStartTime=_auctionStartTime + block.timestamp;\r\n        require((_batchTokenIds.length == _batchTokenPrices.length) && \r\n        (_batchTokenIds.length == _royaltyPercentage.length),\r\n            \"Number of tokens and prices don't match\"\r\n        );\r\n        require(_auctionStartTime > block.timestamp, \"start time cannot be in past\");\r\n        \r\n        for(uint i=0; i<_batchTokenIds.length; i++){\r\n            require(_batchTokenPrices[i]>0, \"Price must be greater than 0\");\r\n            nftContractAuctions[_nftContractAddress][_batchTokenIds[i]]\r\n                .auctionBidPeriod = _auctionBidPeriod;\r\n            \r\n            nftContractAuctions[_nftContractAddress][_batchTokenIds[i]]\r\n                .bidIncreasePercentage = _bidIncreasePercentage;\r\n            \r\n            nftContractAuctions[_nftContractAddress][_batchTokenIds[i]]\r\n                .ownerPercentage = _ownerPercentage;\r\n            \r\n            if(nftRoyalty[_nftContractAddress][_batchTokenIds[i]]\r\n            .royaltyOwner==address(0)){\r\n                nftRoyalty[_nftContractAddress][_batchTokenIds[i]]\r\n                .royaltyOwner= msg.sender;\r\n                nftRoyalty[_nftContractAddress][_batchTokenIds[i]]\r\n                .royaltyPercentage= _royaltyPercentage[i];\r\n            }\r\n            _createNewNftAuction(\r\n                _nftContractAddress,\r\n                _batchTokenIds[i],\r\n                _erc20Token,\r\n                _ownerPercentage,\r\n                _batchTokenPrices[i],\r\n                _auctionStartTime\r\n            );\r\n        }\r\n    }\r\n    \r\n    function createNewNFTAuction(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _minPrice,\r\n        uint256 _royaltyPercentage,\r\n        uint256 _ownerPercentage,\r\n        uint256 _auctionBidPeriod, \r\n        uint256 _bidIncreasePercentage,\r\n        uint256 _auctionStartTime\r\n    ) external\r\n        priceGreaterThanZero(_minPrice)\r\n        biddingPeriodMinimum(_auctionBidPeriod)\r\n        increasePercentageAboveMinimum(_bidIncreasePercentage)\r\n    {\r\n        _auctionStartTime=_auctionStartTime + block.timestamp;\r\n        require(_auctionStartTime > block.timestamp, \"start time cannot be in past\");\r\n\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .auctionBidPeriod = _auctionBidPeriod;\r\n        \r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .bidIncreasePercentage = _bidIncreasePercentage;\r\n\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .ownerPercentage = _ownerPercentage;\r\n        \r\n        if(nftRoyalty[_nftContractAddress][_tokenId]\r\n            .royaltyOwner==address(0)){\r\n                nftRoyalty[_nftContractAddress][_tokenId]\r\n                .royaltyOwner= msg.sender;\r\n                nftRoyalty[_nftContractAddress][_tokenId]\r\n                .royaltyPercentage= _royaltyPercentage;\r\n        }\r\n\r\n        _createNewNftAuction(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _erc20Token,\r\n            _ownerPercentage,\r\n            _minPrice,\r\n            _auctionStartTime\r\n        );\r\n    }  \r\n\r\n    function _setupAuction(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _ownerPercentage,\r\n        uint256 _minPrice,\r\n        uint256 _auctionStartTime\r\n    )\r\n        internal\r\n    { \r\n        // _auctionStartTime=_auctionStartTime + block.timestamp;\r\n        if (_erc20Token != address(0)) {\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .ERC20Token = _erc20Token;\r\n        }\r\n        nftContractAuctions[_nftContractAddress][_tokenId].minPrice = _minPrice;\r\n        nftContractAuctions[_nftContractAddress][_tokenId].nftSeller = msg\r\n            .sender;\r\n        nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd= \r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n        .auctionBidPeriod.add(block.timestamp);  \r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n        .auctionStartTime= _auctionStartTime;\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n        .ownerPercentage= _ownerPercentage;\r\n    }\r\n\r\n    function _createNewNftAuction(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _ownerPercentage,\r\n        uint256 _minPrice,\r\n        uint256 _auctionStartTime\r\n    ) internal{\r\n        // Sending the NFT to this contract\r\n        // _auctionStartTime=_auctionStartTime + block.timestamp;\r\n        IERC721(_nftContractAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _tokenId\r\n        );\r\n        _setupAuction(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _erc20Token,\r\n            _ownerPercentage,\r\n            _minPrice,\r\n            _auctionStartTime\r\n        );\r\n    }\r\n\r\n    function _reverseAndResetPreviousBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        address nftHighestBidder = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBidder;\r\n\r\n        uint256 nftHighestBid = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBid;\r\n        _resetBids(_nftContractAddress, _tokenId);\r\n\r\n        _payout(_nftContractAddress, _tokenId, nftHighestBidder, nftHighestBid);\r\n    }\r\n\r\n    function updateMinimumPrice(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint256 _newMinPrice\r\n    )\r\n        external\r\n        onlyNftSeller(_nftContractAddress, _tokenId)\r\n        minimumBidNotMade(_nftContractAddress, _tokenId)\r\n        priceGreaterThanZero(_newMinPrice)\r\n    {\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .minPrice = _newMinPrice;\r\n    }\r\n\r\n    function _updateHighestBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint256 _tokenAmount\r\n    ) internal {\r\n        address auctionERC20Token = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].ERC20Token;\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .nftHighestBidder = msg.sender;\r\n\r\n        if (_isERC20Auction(auctionERC20Token)) {\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .nftHighestBid = _tokenAmount;\r\n            IERC20(auctionERC20Token).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _tokenAmount\r\n            );\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .nftHighestBid = _tokenAmount;\r\n        } else {\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .nftHighestBid = msg.value;\r\n        }\r\n    }\r\n\r\n    function _reversePreviousBidAndUpdateHighestBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint256 _tokenAmount\r\n    ) internal {\r\n        address prevNftHighestBidder = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBidder;\r\n\r\n        uint256 prevNftHighestBid = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBid;\r\n        _updateHighestBid(_nftContractAddress, _tokenId, _tokenAmount);\r\n\r\n        if (prevNftHighestBidder != address(0)) {\r\n            _payout(\r\n                _nftContractAddress,\r\n                _tokenId,\r\n                prevNftHighestBidder,\r\n                prevNftHighestBid\r\n            );\r\n        }\r\n    }\r\n    \r\n    function _isMinimumBidMade(address _nftContractAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 minPrice = nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .minPrice;\r\n        return\r\n            minPrice > 0 &&\r\n            (nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid >=\r\n                minPrice);\r\n    }\r\n\r\n    function _setupSale(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _buyNowPrice\r\n    )\r\n        internal\r\n    {\r\n        if (_erc20Token != address(0)) {\r\n            nftContractSale[_nftContractAddress][_tokenId]\r\n                .ERC20Token = _erc20Token;\r\n        }\r\n        nftContractSale[_nftContractAddress][_tokenId]\r\n            .buyNowPrice = _buyNowPrice;\r\n        nftContractSale[_nftContractAddress][_tokenId].nftSeller = msg\r\n            .sender;\r\n    }\r\n\r\n    function createSale(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _buyNowPrice\r\n    ) external priceGreaterThanZero(_buyNowPrice) {\r\n        IERC721(_nftContractAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _tokenId\r\n        );\r\n        _setupSale(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _erc20Token,\r\n            _buyNowPrice\r\n        );\r\n    }\r\n\r\n    function createBatchSale(\r\n        address _nftContractAddress,\r\n        uint256[] memory _batchTokenIds,\r\n        uint256[] memory _batchTokenPrice,\r\n        address _erc20Token\r\n    )\r\n        external\r\n        batchWithinLimits(_batchTokenIds.length)\r\n    {\r\n        require(_batchTokenIds.length == _batchTokenPrice.length, \"Number of tokens and prices do not match\"); \r\n        for(uint i=0; i< _batchTokenIds.length; i++){\r\n            require(_batchTokenPrice[i]>0, \"price cannot be 0 or less\");\r\n            IERC721(_nftContractAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _batchTokenIds[i]\r\n        );\r\n            _setupSale(\r\n                _nftContractAddress,\r\n                _batchTokenIds[i],\r\n                _erc20Token,\r\n                _batchTokenPrice[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function buyNFT(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint256 _ownerPercentage\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n    {\r\n        address seller= nftContractSale[_nftContractAddress][_tokenId].nftSeller;\r\n        require(msg.sender!=seller, \"Seller cannot buy own NFT\");\r\n        uint256 buyNowPrice= nftContractSale[_nftContractAddress][_tokenId].buyNowPrice;\r\n        address erc20Token= nftContractSale[_nftContractAddress][_tokenId].ERC20Token;\r\n        if(_isERC20Auction(erc20Token)){\r\n            require(\r\n                IERC20(erc20Token).balanceOf(msg.sender) >= buyNowPrice, \r\n                \"Must be greater than NFT cost\"\r\n            );\r\n        }\r\n        else{\r\n            require(\r\n                msg.value >= buyNowPrice, \r\n                \"Must be greater than NFT cost\"\r\n            );\r\n        }\r\n        _buyNFT(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _ownerPercentage                             \r\n        );\r\n    }\r\n    \r\n    function _buyNFT(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint256 _ownerPercentage\r\n    )\r\n        internal\r\n    {   \r\n        address seller= nftContractSale[_nftContractAddress][_tokenId].nftSeller;\r\n        address erc20Token= nftContractSale[_nftContractAddress][_tokenId].ERC20Token;\r\n        if(_isERC20Auction(erc20Token)){    // if sale is ERC20\r\n            uint totalAmount= nftContractSale[_nftContractAddress][_tokenId].buyNowPrice;\r\n            uint256 ownerAmount= totalAmount.mul(_ownerPercentage).div(10000);\r\n            uint royaltyAmount;\r\n            // Reset Sale Data\r\n            _resetSale(_nftContractAddress, _tokenId);\r\n            if(nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner != address(0)){\r\n                address royaltyOwner= nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner;\r\n                uint _royaltyPercentage= nftRoyalty[_nftContractAddress][_tokenId].royaltyPercentage;\r\n                royaltyAmount= totalAmount.mul(_royaltyPercentage).div(10000);\r\n                IERC20(erc20Token).transferFrom(msg.sender, royaltyOwner, royaltyAmount);\r\n            }\r\n            uint sellerAmount= totalAmount.sub(royaltyAmount.add(ownerAmount));\r\n            address owner= owner();\r\n\r\n            IERC20(erc20Token).transferFrom(msg.sender, owner, ownerAmount);\r\n            IERC20(erc20Token).transferFrom(msg.sender, seller, sellerAmount);\r\n        }\r\n        else{\r\n            uint totalAmount= msg.value;\r\n            uint256 ownerAmount= totalAmount.mul(_ownerPercentage).div(10000);\r\n            // Reset Sale Data\r\n            _resetSale(_nftContractAddress, _tokenId);\r\n            uint royaltyAmount;\r\n            if(nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner != address(0)){\r\n                address royaltyOwner= nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner;\r\n                uint _royaltyPercentage= nftRoyalty[_nftContractAddress][_tokenId].royaltyPercentage;\r\n                royaltyAmount= totalAmount.mul(_royaltyPercentage).div(10000);\r\n                payable(royaltyOwner).transfer(royaltyAmount);\r\n            }\r\n            uint sellerAmount= totalAmount.sub(royaltyAmount.add(ownerAmount));\r\n            address owner= owner();\r\n            payable(owner).transfer(ownerAmount);\r\n            (bool success, ) = payable(seller).call{value: sellerAmount}(\"\");\r\n            // if it failed, update their credit balance so they can pull it later\r\n            if (!success) {\r\n                failedTransferCredits[seller] =\r\n                    failedTransferCredits[seller].add(sellerAmount);\r\n            }\r\n        }\r\n        IERC721(_nftContractAddress).transferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                _tokenId\r\n        );\r\n    }\r\n\r\n    function _resetSale(address _nftContractAddress, uint256 _tokenId)\r\n        internal\r\n    {\r\n        nftContractSale[_nftContractAddress][_tokenId]\r\n            .buyNowPrice = 0;\r\n        nftContractSale[_nftContractAddress][_tokenId]\r\n            .nftSeller = address(\r\n            0\r\n        );\r\n        nftContractSale[_nftContractAddress][_tokenId]\r\n            .ERC20Token = address(\r\n            0\r\n        );\r\n    }\r\n\r\n    function _makeBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _tokenAmount\r\n    )\r\n        internal\r\n        notNftSeller(_nftContractAddress, _tokenId)\r\n        paymentAccepted(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _erc20Token,\r\n            _tokenAmount\r\n        )\r\n        bidAmountMeetsBidRequirements(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _tokenAmount\r\n        )\r\n    {\r\n        _reversePreviousBidAndUpdateHighestBid(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _tokenAmount\r\n        );\r\n    }\r\n\r\n    function _isABidMade(address _nftContractAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .nftHighestBid > 0);\r\n    }\r\n\r\n    function makeBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _tokenAmount\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        auctionOngoing(_nftContractAddress, _tokenId)\r\n    {\r\n        // if the auction has started\r\n        require(\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .auctionStartTime < block.timestamp,\r\n            \"Auction hasn't begun yet\"\r\n        );\r\n        // bid more than minimum price\r\n        require(\r\n            (_tokenAmount>=\r\n            nftContractAuctions[_nftContractAddress][_tokenId].minPrice)            \r\n            || \r\n            (msg.value >= nftContractAuctions[_nftContractAddress][_tokenId].minPrice)\r\n            ,\r\n            \"Must be greater than minimum amount\"\r\n        );\r\n        _makeBid(_nftContractAddress, _tokenId, _erc20Token, _tokenAmount);\r\n    }\r\n\r\n    /*\r\n     * Reset all auction related parameters for an NFT.\r\n     * This effectively removes an EFT as an item up for auction\r\n    */\r\n    function _resetAuction(address _nftContractAddress, uint256 _tokenId)\r\n        internal\r\n    {\r\n        nftContractAuctions[_nftContractAddress][_tokenId].minPrice = 0;\r\n        nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd = 0;\r\n        nftContractAuctions[_nftContractAddress][_tokenId].auctionBidPeriod = 0;\r\n        nftContractAuctions[_nftContractAddress][_tokenId].ownerPercentage = 0;\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .bidIncreasePercentage = 0;\r\n        nftContractAuctions[_nftContractAddress][_tokenId].nftSeller = address(\r\n            0\r\n        );\r\n        nftContractAuctions[_nftContractAddress][_tokenId].ERC20Token = address(\r\n            0\r\n        );\r\n    }\r\n\r\n    function _payout(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) internal{\r\n        address auctionERC20Token = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].ERC20Token;\r\n        if (_isERC20Auction(auctionERC20Token)) {\r\n            // pay royalty owner\r\n            IERC20(auctionERC20Token).transfer(_recipient, _amount);\r\n        } else {\r\n            // attempt to send the funds to the recipient\r\n            (bool success, ) = payable(_recipient).call{value: _amount}(\"\");\r\n            // if it failed, update their credit balance so they can pull it later\r\n            if (!success) {\r\n                failedTransferCredits[_recipient] =\r\n                    failedTransferCredits[_recipient].add(_amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * If the transfer of a bid has failed, allow the recipient to reclaim their amount later.\r\n    */\r\n    function withdrawAllFailedCredits() external {\r\n        uint256 amount = failedTransferCredits[msg.sender];\r\n\r\n        require(amount != 0, \"no credits to withdraw\");\r\n\r\n        failedTransferCredits[msg.sender] = 0;\r\n\r\n        (bool successfulWithdraw, ) = msg.sender.call{value: amount}(\"\");\r\n        require(successfulWithdraw, \"withdraw failed\");\r\n    }\r\n\r\n\r\n    function _resetBids(address _nftContractAddress, uint256 _tokenId)\r\n        internal\r\n    {\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .nftHighestBidder = address(0);\r\n        nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid = 0;\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .nftRecipient = address(0);\r\n    }\r\n\r\n    /*\r\n     * The default value for the NFT recipient is the highest bidder\r\n     */\r\n    function _getNftRecipient(address _nftContractAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        address nftRecipient = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftRecipient;\r\n\r\n        if (nftRecipient == address(0)) {\r\n            return\r\n                nftContractAuctions[_nftContractAddress][_tokenId]\r\n                    .nftHighestBidder;\r\n        } else {\r\n            return nftRecipient;\r\n        }\r\n    }\r\n    \r\n    function _payFeesAndSeller(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _nftSeller,\r\n        uint256 _highestBid\r\n    ) internal {\r\n        // pay royalty and owner\r\n        address erc20Token= nftContractAuctions[_nftContractAddress][_tokenId].ERC20Token;\r\n        uint256 _ownerPercentage = nftContractAuctions[_nftContractAddress][_tokenId].ownerPercentage;\r\n        uint256 ownerAmount= _highestBid.mul(_ownerPercentage).div(10000);\r\n        uint256 sellerAmount= _highestBid.sub(ownerAmount);\r\n        // Reset Sale Data\r\n        _resetAuction(_nftContractAddress, _tokenId);\r\n        if(_isERC20Auction(erc20Token)){    // if sale is ERC20 \r\n            if(nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner != address(0)){\r\n                address royaltyOwner= nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner;\r\n                uint _royaltyPercentage= nftRoyalty[_nftContractAddress][_tokenId].royaltyPercentage;\r\n                uint royaltyAmount= _highestBid.mul(_royaltyPercentage).div(10000);\r\n                sellerAmount= sellerAmount.sub(royaltyAmount);\r\n                IERC20(erc20Token).transfer(royaltyOwner, royaltyAmount);\r\n            }\r\n            address owner= owner();\r\n            IERC20(erc20Token).transfer(owner, ownerAmount);\r\n        }\r\n        else{\r\n            \r\n            if(nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner != address(0)){\r\n                address royaltyOwner= nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner;\r\n                uint _royaltyPercentage= nftRoyalty[_nftContractAddress][_tokenId].royaltyPercentage;\r\n                uint royaltyAmount= _highestBid.mul(_royaltyPercentage).div(10000);\r\n                sellerAmount= sellerAmount.sub(royaltyAmount);\r\n                payable(royaltyOwner).transfer(royaltyAmount);\r\n            }\r\n            address owner= owner();\r\n            payable(owner).transfer(ownerAmount);\r\n        }\r\n\r\n        _payout(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _nftSeller,\r\n            sellerAmount\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Query the owner of an NFT deposited for auction\r\n     */\r\n    function ownerOfNFT(address _nftContractAddress, uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        address nftSeller = nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .nftSeller;\r\n        if (nftSeller != address(0)) {\r\n            return nftSeller;\r\n        }\r\n        address owner = nftOwner[_nftContractAddress][_tokenId];\r\n\r\n        require(owner != address(0), \"NFT not deposited\");\r\n        return owner;\r\n    }\r\n\r\n    function _transferNftAndPaySeller(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        address _nftSeller = nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .nftSeller;\r\n        address _nftRecipient = _getNftRecipient(_nftContractAddress, _tokenId);\r\n        uint256 _nftHighestBid = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBid;\r\n        _resetBids(_nftContractAddress, _tokenId);\r\n        _payFeesAndSeller(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _nftSeller,\r\n            _nftHighestBid\r\n        );\r\n        \r\n        IERC721(_nftContractAddress).transferFrom(\r\n            address(this),\r\n            _nftRecipient,\r\n            _tokenId\r\n        );\r\n    }\r\n\r\n    function takeHighestBid(address _nftContractAddress, uint256 _tokenId)\r\n        external\r\n        onlyNftSeller(_nftContractAddress, _tokenId)\r\n    {\r\n        require(\r\n            _isABidMade(_nftContractAddress, _tokenId),\r\n            \"cannot payout 0 bid\"\r\n        );\r\n        _transferNftAndPaySeller(_nftContractAddress, _tokenId);\r\n    }\r\n\r\n    function settleAuction(address _nftContractAddress, uint256 _tokenId)\r\n        external\r\n        nonReentrant\r\n        isAuctionOver(_nftContractAddress, _tokenId)\r\n    {\r\n        uint256 _nftHighestBid = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBid;\r\n        require(_nftHighestBid > 0, \"No bid has been made\");\r\n\r\n        _transferNftAndPaySeller(_nftContractAddress, _tokenId);\r\n    }\r\n\r\n\r\n    function settleAuctionOnlyOwner(address _nftContractAddress, uint256 _tokenId)\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n        isAuctionOver(_nftContractAddress, _tokenId)\r\n    {\r\n        require(block.timestamp> (nftContractAuctions[_nftContractAddress][_tokenId]\r\n        .auctionEnd.add(\r\n            86400)), \r\n            \"Can't settle before 1 day of grace period has passed\"\r\n        );\r\n        // 10% is cut as a penalty.\r\n        uint totalAmt= nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid;\r\n        address erc20Token= nftContractAuctions[_nftContractAddress][_tokenId].ERC20Token;\r\n        nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid=\r\n            totalAmt.mul(100-settlePenalty).div(100);\r\n        uint penaltyAmt= totalAmt.mul(settlePenalty).div(100);\r\n        address owner = owner();\r\n        if(_isERC20Auction(erc20Token)){\r\n            IERC20(erc20Token).transfer(owner, penaltyAmt);\r\n        }\r\n        else{\r\n            (bool success, ) = payable(owner).call{value: penaltyAmt}(\"\");\r\n            // if it failed, update their credit balance so they can pull it later\r\n            if (!success) {\r\n                failedTransferCredits[owner] =\r\n                    failedTransferCredits[owner].add(penaltyAmt);\r\n            }\r\n        }\r\n        \r\n        _transferNftAndPaySeller(_nftContractAddress, _tokenId);\r\n    }\r\n\r\n    function withdrawSale(address _nftContractAddress, uint256 _tokenId)\r\n        external\r\n        nonReentrant\r\n    {\r\n        address nftSeller= nftContractSale[_nftContractAddress][_tokenId].nftSeller;\r\n        require(nftSeller== msg.sender, \"Only the owner can call this function\");\r\n        // reset sale\r\n        _resetSale(_nftContractAddress, _tokenId);\r\n        // transfer the NFT back to the Seller\r\n        IERC721(_nftContractAddress).transferFrom(\r\n            address(this),\r\n            nftSeller,\r\n            _tokenId\r\n        );\r\n    }\r\n\r\n    function withdrawAuction(address _nftContractAddress, uint256 _tokenId)\r\n        external\r\n        nonReentrant\r\n        onlyNftSeller(_nftContractAddress, _tokenId)\r\n    {\r\n        address _nftRecipient= nftContractAuctions[_nftContractAddress][_tokenId].nftSeller;\r\n        address prevNftHighestBidder = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBidder;\r\n        uint256 prevNftHighestBid = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBid;\r\n\r\n        // Reset values of this Auction\r\n        _resetBids(_nftContractAddress, _tokenId);\r\n        _resetAuction(_nftContractAddress, _tokenId);\r\n        IERC721(_nftContractAddress).transferFrom(\r\n            address(this),\r\n            _nftRecipient,\r\n            _tokenId\r\n        );\r\n        \r\n        // Pay any bidder if present\r\n        if (prevNftHighestBidder != address(0)) {\r\n            _payout(\r\n                _nftContractAddress,\r\n                _tokenId,\r\n                prevNftHighestBidder,\r\n                prevNftHighestBid\r\n            );\r\n        }\r\n    }\r\n\r\n    function setSettlePenalty(uint256 _settlePenalty) external onlyOwner{\r\n        settlePenalty= _settlePenalty;\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerPercentage\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_batchTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_batchTokenPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_royaltyPercentage\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionBidPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidIncreasePercentage\",\"type\":\"uint256\"}],\"name\":\"createBatchNftAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_batchTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_batchTokenPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"}],\"name\":\"createBatchSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionBidPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidIncreasePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"}],\"name\":\"createNewNFTAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContractAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionBidPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftHighestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidIncreasePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftHighestBidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContractSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"royaltyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOfNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlePenalty\",\"type\":\"uint256\"}],\"name\":\"setSettlePenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleAuctionOnlyOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlePenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeHighestBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMinPrice\",\"type\":\"uint256\"}],\"name\":\"updateMinimumPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllFailedCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTAuction", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://24c5bf5019ed6325d09298192a31f3cd5312ffad4a66587c7a55fb655d1df477"}]}