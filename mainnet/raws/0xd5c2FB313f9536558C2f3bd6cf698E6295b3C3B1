{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v0.8/common/RoninValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../interfaces/IWeightedValidator.sol\\\";\\nimport \\\"../extensions/HasProxyAdmin.sol\\\";\\n\\ncontract RoninValidator is Initializable, IWeightedValidator, HasProxyAdmin {\\n  uint256 internal _num;\\n  uint256 internal _denom;\\n  uint256 internal _totalWeights;\\n\\n  /// @dev Mapping from validator address => weight\\n  mapping(address => uint256) internal _validatorWeight;\\n  /// @dev Mapping from governor address => weight\\n  mapping(address => uint256) internal _governorWeight;\\n  /// @dev Validators array\\n  address[] internal _validators;\\n  /// @dev Governors array\\n  address[] internal _governors;\\n\\n  uint256 public nonce;\\n\\n  /**\\n   * @dev Initializes contract storage.\\n   */\\n  function initialize(\\n    WeightedValidator[] calldata _initValidators,\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external virtual initializer {\\n    _addValidators(_initValidators);\\n    _setThreshold(_numerator, _denominator);\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-getValidatorWeight}.\\n   */\\n  function getValidatorWeight(address _validator) external view virtual returns (uint256) {\\n    return _validatorWeight[_validator];\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-getGovernorWeight}.\\n   */\\n  function getGovernorWeight(address _governor) external view virtual returns (uint256) {\\n    return _governorWeight[_governor];\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-sumValidatorWeights}.\\n   */\\n  function sumValidatorWeights(address[] calldata _addrList) external view virtual returns (uint256 _weight) {\\n    for (uint256 _i; _i < _addrList.length; _i++) {\\n      _weight += _validatorWeight[_addrList[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-sumGovernorWeights}.\\n   */\\n  function sumGovernorWeights(address[] calldata _addrList) external view virtual returns (uint256 _weight) {\\n    for (uint256 _i; _i < _addrList.length; _i++) {\\n      _weight += _governorWeight[_addrList[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-getValidatorInfo}.\\n   */\\n  function getValidatorInfo() external view virtual returns (WeightedValidator[] memory _list) {\\n    _list = new WeightedValidator[](_validators.length);\\n    address _validator;\\n    for (uint256 _i; _i < _list.length; _i++) {\\n      _validator = _validators[_i];\\n      _list[_i].validator = _validator;\\n      _list[_i].governor = _governors[_i];\\n      _list[_i].weight = _validatorWeight[_validator];\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-getValidators}.\\n   */\\n  function getValidators() external view virtual returns (address[] memory) {\\n    return _validators;\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-getGovernors}.\\n   */\\n  function getGovernors() external view virtual returns (address[] memory) {\\n    return _governors;\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-validators}.\\n   */\\n  function validators(uint256 _index) external view virtual returns (WeightedValidator memory) {\\n    address _validator = _validators[_index];\\n    return WeightedValidator(_validator, _governors[_index], _validatorWeight[_validator]);\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-totalWeights}.\\n   */\\n  function totalWeights() external view virtual returns (uint256) {\\n    return _totalWeights;\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-totalValidators}.\\n   */\\n  function totalValidators() external view virtual returns (uint256) {\\n    return _validators.length;\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-addValidators}.\\n   */\\n  function addValidators(WeightedValidator[] calldata _validatorList) external virtual onlyAdmin {\\n    return _addValidators(_validatorList);\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-updateValidators}.\\n   */\\n  function updateValidators(WeightedValidator[] calldata _validatorList) external virtual onlyAdmin {\\n    for (uint256 _i; _i < _validatorList.length; _i++) {\\n      _updateValidator(_validatorList[_i]);\\n    }\\n    emit ValidatorsUpdated(nonce++, _validatorList);\\n  }\\n\\n  /**\\n   * @dev See {IWeightedValidator-removeValidators}.\\n   */\\n  function removeValidators(address[] calldata _validatorList) external virtual onlyAdmin {\\n    for (uint256 _i; _i < _validatorList.length; _i++) {\\n      _removeValidator(_validatorList[_i]);\\n    }\\n    emit ValidatorsRemoved(nonce++, _validatorList);\\n  }\\n\\n  /**\\n   * @dev See {IQuorum-getThreshold}.\\n   */\\n  function getThreshold() external view virtual returns (uint256, uint256) {\\n    return (_num, _denom);\\n  }\\n\\n  /**\\n   * @dev See {IQuorum-checkThreshold}.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view virtual returns (bool) {\\n    return _voteWeight * _denom >= _num * _totalWeights;\\n  }\\n\\n  /**\\n   * @dev See {IQuorum-minimumVoteWeight}.\\n   */\\n  function minimumVoteWeight() external view virtual returns (uint256) {\\n    return (_num * _totalWeights + _denom - 1) / _denom;\\n  }\\n\\n  /**\\n   * @dev See {IQuorum-setThreshold}.\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    virtual\\n    onlyAdmin\\n    returns (uint256 _previousNum, uint256 _previousDenom)\\n  {\\n    return _setThreshold(_numerator, _denominator);\\n  }\\n\\n  /**\\n   * @dev Sets threshold and return the old one.\\n   */\\n  function _setThreshold(uint256 _numerator, uint256 _denominator)\\n    internal\\n    virtual\\n    returns (uint256 _previousNum, uint256 _previousDenom)\\n  {\\n    require(_numerator <= _denominator, \\\"RoninValidator: invalid threshold\\\");\\n    _previousNum = _num;\\n    _previousDenom = _denom;\\n    _num = _numerator;\\n    _denom = _denominator;\\n    emit ThresholdUpdated(nonce++, _numerator, _denominator, _previousNum, _previousDenom);\\n  }\\n\\n  /**\\n   * @dev Adds multiple validators.\\n   */\\n  function _addValidators(WeightedValidator[] calldata _validatorList) internal virtual {\\n    for (uint256 _i; _i < _validatorList.length; _i++) {\\n      _addValidator(_validatorList[_i]);\\n    }\\n    emit ValidatorsAdded(nonce++, _validatorList);\\n  }\\n\\n  /**\\n   * @dev Adds the address list as validators.\\n   *\\n   * Requirements:\\n   * - The weight is larger than 0.\\n   * - The validator is not added.\\n   *\\n   */\\n  function _addValidator(WeightedValidator memory _v) internal virtual {\\n    require(_v.weight > 0, \\\"RoninValidator: invalid weight\\\");\\n\\n    if (_validatorWeight[_v.validator] > 0) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"RoninValidator: \\\",\\n            Strings.toHexString(uint160(_v.validator), 20),\\n            \\\" is a validator already\\\"\\n          )\\n        )\\n      );\\n    }\\n\\n    if (_governorWeight[_v.governor] > 0) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\\"RoninValidator: \\\", Strings.toHexString(uint160(_v.validator), 20), \\\" is a governor already\\\")\\n        )\\n      );\\n    }\\n\\n    _validators.push(_v.validator);\\n    _governors.push(_v.governor);\\n    _validatorWeight[_v.validator] = _v.weight;\\n    _governorWeight[_v.governor] = _v.weight;\\n    _totalWeights += _v.weight;\\n  }\\n\\n  /**\\n   * @dev Removes the address list as validators.\\n   *\\n   * Requirements:\\n   * - The weight is larger than 0.\\n   * - The validator is added.\\n   *\\n   */\\n  function _updateValidator(WeightedValidator memory _v) internal virtual {\\n    require(_v.weight > 0, \\\"RoninValidator: invalid weight\\\");\\n\\n    uint256 _weight = _validatorWeight[_v.validator];\\n    if (_weight == 0) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\\"RoninValidator: \\\", Strings.toHexString(uint160(_v.validator), 20), \\\" is not a validator\\\")\\n        )\\n      );\\n    }\\n\\n    uint256 _count = _validators.length;\\n    for (uint256 _i = 0; _i < _count; _i++) {\\n      if (_validators[_i] == _v.validator) {\\n        _totalWeights -= _weight;\\n        _totalWeights += _v.weight;\\n\\n        if (_governors[_i] != _v.governor) {\\n          require(_governorWeight[_v.governor] == 0, \\\"RoninValidator: query for duplicated governor\\\");\\n          delete _governorWeight[_governors[_i]];\\n          _governors[_i] = _v.governor;\\n        }\\n\\n        _validatorWeight[_v.validator] = _v.weight;\\n        _governorWeight[_v.governor] = _v.weight;\\n        return;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes the address list as validators.\\n   *\\n   * Requirements:\\n   * - The validator is added.\\n   *\\n   */\\n  function _removeValidator(address _addr) internal virtual {\\n    uint256 _weight = _validatorWeight[_addr];\\n    if (_weight == 0) {\\n      revert(\\n        string(abi.encodePacked(\\\"RoninValidator: \\\", Strings.toHexString(uint160(_addr), 20), \\\" is not a validator\\\"))\\n      );\\n    }\\n\\n    uint256 _index;\\n    uint256 _count = _validators.length;\\n    for (uint256 _i = 0; _i < _count; _i++) {\\n      if (_validators[_i] == _addr) {\\n        _index = _i;\\n        break;\\n      }\\n    }\\n\\n    _totalWeights -= _weight;\\n    delete _validatorWeight[_addr];\\n    _validators[_index] = _validators[_count - 1];\\n    _validators.pop();\\n\\n    delete _governorWeight[_governors[_index]];\\n    _governors[_index] = _governors[_count - 1];\\n    _governors.pop();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/v0.8/extensions/HasProxyAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/v0.8/interfaces/IQuorum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\"\r\n    },\r\n    \"contracts/v0.8/interfaces/IWeightedValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IWeightedValidator is IQuorum {\\n  struct WeightedValidator {\\n    address validator;\\n    address governor;\\n    uint256 weight;\\n  }\\n\\n  /// @dev Emitted when the validators are added\\n  event ValidatorsAdded(uint256 indexed nonce, WeightedValidator[] validators);\\n  /// @dev Emitted when the validators are updated\\n  event ValidatorsUpdated(uint256 indexed nonce, WeightedValidator[] validators);\\n  /// @dev Emitted when the validators are removed\\n  event ValidatorsRemoved(uint256 indexed nonce, address[] validators);\\n\\n  /**\\n   * @dev Returns validator weight of the validator.\\n   */\\n  function getValidatorWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns governor weight of the governor.\\n   */\\n  function getGovernorWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns total validator weights of the address list.\\n   */\\n  function sumValidatorWeights(address[] calldata _addrList) external view returns (uint256 _weight);\\n\\n  /**\\n   * @dev Returns total governor weights of the address list.\\n   */\\n  function sumGovernorWeights(address[] calldata _addrList) external view returns (uint256 _weight);\\n\\n  /**\\n   * @dev Returns the validator list attached with governor address and weight.\\n   */\\n  function getValidatorInfo() external view returns (WeightedValidator[] memory _list);\\n\\n  /**\\n   * @dev Returns the validator list.\\n   */\\n  function getValidators() external view returns (address[] memory _validators);\\n\\n  /**\\n   * @dev Returns the validator at `_index` position.\\n   */\\n  function validators(uint256 _index) external view returns (WeightedValidator memory);\\n\\n  /**\\n   * @dev Returns total of validators.\\n   */\\n  function totalValidators() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Adds validators.\\n   *\\n   * Requirements:\\n   * - The weights are larger than 0.\\n   * - The validators are not added.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ValidatorsAdded` event.\\n   *\\n   */\\n  function addValidators(WeightedValidator[] calldata _validators) external;\\n\\n  /**\\n   * @dev Updates validators.\\n   *\\n   * Requirements:\\n   * - The weights are larger than 0.\\n   * - The validators are added.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ValidatorsUpdated` event.\\n   *\\n   */\\n  function updateValidators(WeightedValidator[] calldata _validators) external;\\n\\n  /**\\n   * @dev Removes validators.\\n   *\\n   * Requirements:\\n   * - The validators are added.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ValidatorsRemoved` event.\\n   *\\n   */\\n  function removeValidators(address[] calldata _validators) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IWeightedValidator.WeightedValidator[]\",\"name\":\"validators\",\"type\":\"tuple[]\"}],\"name\":\"ValidatorsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"ValidatorsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IWeightedValidator.WeightedValidator[]\",\"name\":\"validators\",\"type\":\"tuple[]\"}],\"name\":\"ValidatorsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeightedValidator.WeightedValidator[]\",\"name\":\"_validatorList\",\"type\":\"tuple[]\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"}],\"name\":\"checkThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"getGovernorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeightedValidator.WeightedValidator[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeightedValidator.WeightedValidator[]\",\"name\":\"_initValidators\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validatorList\",\"type\":\"address[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_previousNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_previousDenom\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrList\",\"type\":\"address[]\"}],\"name\":\"sumGovernorWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrList\",\"type\":\"address[]\"}],\"name\":\"sumValidatorWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeightedValidator.WeightedValidator[]\",\"name\":\"_validatorList\",\"type\":\"tuple[]\"}],\"name\":\"updateValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"validators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeightedValidator.WeightedValidator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RoninValidator", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}