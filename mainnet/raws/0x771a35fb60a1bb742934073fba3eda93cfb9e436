{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/KWWUtils.sol\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nlibrary KWWUtils{\r\n\r\n  uint constant DAY_IN_SECONDS = 86400;\r\n  uint constant HOUR_IN_SECONDS = 3600;\r\n  uint constant WEEK_IN_SECONDS = DAY_IN_SECONDS * 7;\r\n\r\n  function pack(uint32 a, uint32 b) external pure returns(uint64) {\r\n        return (uint64(a) << 32) | uint64(b);\r\n  }\r\n\r\n  function unpack(uint64 c) external pure returns(uint32 a, uint32 b) {\r\n        a = uint32(c >> 32);\r\n        b = uint32(c);\r\n  }\r\n\r\n  function random(uint256 seed) external view returns (uint256) {\r\n    return uint256(keccak256(abi.encodePacked(\r\n        tx.origin,\r\n        blockhash(block.number - 1),\r\n        block.difficulty,\r\n        block.timestamp,\r\n        seed\r\n    )));\r\n  }\r\n\r\n\r\n  function getWeekday(uint256 timestamp) public pure returns (uint8) {\r\n      //https://github.com/pipermerriam/ethereum-datetime\r\n      return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\r\n  }\r\n}\r\n// File: contracts/IKWWData.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IKWWData { \r\n    struct KangarooDetails{\r\n        //Timestamp of the date the kangaroo is born\r\n        uint64 birthTime;\r\n        //Dad token id \r\n        uint32 dadId;\r\n        //Mom token id\r\n        uint32 momId;\r\n        //Couple token id \r\n        uint32 coupleId;\r\n        //If the kangaroo is on boat, the boatId will be set here\r\n        uint16 boatId;\r\n        //If the kangaroo moved to another land, the new landId will be set here\r\n\t    uint16 landId;\r\n        //The generation of the kangaroo (genesis - gen0) NOT CHANGING\r\n\t\tuint8 gen;\r\n        //Status of the kangaroo in the game\r\n        // 0 - Australian\r\n        // 1 - Sailing\r\n        // 2 - Kangaroo Island\r\n        // 3 - Pregnant\r\n\t\tuint8 status;\r\n        //Type of the kangaroo (Pirate, Native, etc.)\r\n        uint8 bornState;\r\n    }\r\n\r\n    struct CoupleDetails{\r\n        //Timestamp when the pregnancy started\r\n        uint64 pregnancyStarted;\r\n        uint8 babiesCounter;\r\n        //false - wild world, true - hospital\r\n        bool paidHospital;\r\n        bool activePregnant;\r\n    }\r\n\r\n    function initKangaroo(uint32 tokenId, uint32 dadId, uint32 momId) external;\r\n    function setCouple(uint32 male, uint32 female) external ;\r\n    function kangarooMoveLand(uint32 tokenId, uint16 landId) external ;\r\n    function kangarooTookBoat(uint32 tokenId, uint16 boatId) external ;\r\n    function kangarooReachedIsland(uint32 tokenId) external ;\r\n    function kangarooStartPregnancy(uint32 dadId, uint32 momId, bool hospital) external ;\r\n    function birthKangaroos(uint32 dadId, uint32 momId) external ;\r\n    function updateBirthTime(uint32 tokenId, uint64 _time) external;\r\n    function updateDadId(uint32 tokenId, uint32 dadId) external;\r\n    function updateMomId(uint32 tokenId, uint32 momId) external;\r\n    function updateCoupleId(uint32 tokenId, uint32 coupleId) external;\r\n    function updateBoatId(uint32 tokenId, uint16 boatId) external;\r\n    function updateLandId(uint32 tokenId, uint16 landId) external;\r\n    function updateStatus(uint32 tokenId, uint8 status) external;\r\n    function updateBornState(uint32 tokenId, uint8 bornState) external;\r\n    function updateGen(uint32 tokenId, uint8 gen) external;\r\n    function getKangaroo(uint32 tokenId) external view returns(KangarooDetails memory);\r\n    function getPregnancyPeriod() external view returns(uint8);\r\n    function getBabyPeriod() external view returns(uint8);\r\n    function isCouples(uint32 male, uint32 female) external view returns(bool);\r\n    function getCouple(uint32 tokenId) external view returns(uint32);\r\n    function getKangarooGender(uint32 tokenId) external pure returns(string memory);\r\n    function kangarooIsMale(uint32 tokenId) external pure returns(bool);\r\n    function getKangarooGen(uint32 tokenId) external view returns(uint8);\r\n    function isGen0(uint32 tokenId) external view returns(bool);\r\n    function baseMaxBabiesAllowed(uint32 token) external view returns(uint8);\r\n    function getBabyPeriod(uint32 tokenId) external view returns(uint64) ;\r\n    function getStatus(uint32 tokenId) external view returns(uint8);\r\n    function isBaby(uint32 tokenId) external view returns(bool);\r\n    function getBornState(uint32 tokenId) external view returns(uint8);\r\n    function getNumBabies(uint32 dadId, uint32 momId) external view returns(uint8);\r\n    function pregnancyEndTimestamp(uint64 coupleEncoded) external view returns(uint64);\r\n    function getCoupleEncoded(uint32 male, uint32 female) external pure returns(uint64);\r\n    function setPregnancyPeriod(uint8 _pregnancyPeriod) external;\r\n    function setDaysBabyPeriod(uint8 _daysBabyPeriod) external;\r\n    function setPossibleMintStates(uint8[] calldata _states) external;\r\n    function setKangarooContract(address _addr) external;\r\n    function setGameManager(address _addr) external;\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IKangarooNFT {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function totalSupply() external view returns (uint256);\r\n    function birth(uint32 dadId, uint32 momId, address to, uint8 numBabies) external;\r\n}\r\n\r\n// File: contracts/KWWData.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract KWWDataWrapper is Ownable { \r\n    mapping(uint64 => IKWWData.CoupleDetails) public couplesData;\r\n\r\n    address gameManager;\r\n    IKangarooNFT kangarooContract;\r\n    IKWWData dataContract;\r\n\r\n    uint8 defaultBabyStatus = 0;\r\n    uint8 maxBabiesGen0 = 2;\r\n    uint8 maxBabiesOtherGens = 1;\r\n\r\n    /*\r\n       EXECUTABLE FUNCTIONS\r\n    */\r\n\r\n    function initKangaroo(uint32 tokenId, uint32 dadId, uint32 momId) public onlyKangarooContract{\r\n        dataContract.initKangaroo(tokenId, dadId, momId);\r\n        updateStatus(tokenId, defaultBabyStatus);\r\n    }\r\n\r\n    function setCouple(uint32 male, uint32 female) public onlyGameManager {\r\n        dataContract.setCouple(male, female);\r\n    }\r\n\r\n    //Bonus Step - Kangaroo moved from one area to another\r\n    function kangarooMoveLand(uint32 tokenId, uint16 landId) public onlyGameManager {\r\n        dataContract.kangarooMoveLand(tokenId, landId);\r\n    }\r\n\r\n    //Step 1 - Kangaroo took boat to kangaroo island\r\n    function kangarooTookBoat(uint32 tokenId, uint16 boatId) public onlyGameManager {\r\n        dataContract.kangarooTookBoat(tokenId, boatId);\r\n    }\r\n\r\n    //Step 2 - kangaroo reached the kangaroo island, leaving the boat\r\n    function kangarooReachedIsland(uint32 tokenId) public onlyGameManager {\r\n        dataContract.kangarooReachedIsland(tokenId);\r\n    }\r\n\r\n    //step 3 - kangaroo start the pregnancy process\r\n    function kangarooStartPregnancy(uint32 dadId, uint32 momId, bool hospital) public onlyGameManager {\r\n      require(kangarooIsMale(dadId) && !kangarooIsMale(momId), \"Genders not match\");\r\n\r\n      uint64 coupleEncoded = getCoupleEncoded(dadId, momId);\r\n      uint8 baseMaxBabies = baseMaxBabiesAllowed(dadId);\r\n      require(couplesData[coupleEncoded].babiesCounter < baseMaxBabies, \"Max babies already born\");\r\n      updateStatus(dadId, 3);\r\n      updateStatus(momId, 3);\r\n\r\n      couplesData[coupleEncoded].pregnancyStarted = uint64(block.timestamp);\r\n      couplesData[coupleEncoded].paidHospital = hospital;\r\n      couplesData[coupleEncoded].activePregnant = true;\r\n    }\r\n\r\n    //Step 4a - birth the babies\r\n    function birthKangaroos(uint32 dadId, uint32 momId, address ownerAddress) public onlyGameManager {\r\n      require(couplesData[getCoupleEncoded(dadId, momId)].activePregnant == true, \"Pregnancy not active\");\r\n      require(pregnancyEndTimestamp(getCoupleEncoded(dadId, momId)) <= block.timestamp, \"Mom still in pregnancy period\");\r\n\r\n      uint8 numBabies = getNumBabies(dadId, momId);\r\n      kangarooContract.birth(dadId, momId, ownerAddress, numBabies);\r\n\r\n      updateStatus(dadId, 2);\r\n      updateStatus(momId, 2);\r\n\r\n      updateCouplesDataAfterBirth(dadId, momId, numBabies);\r\n    }\r\n\r\n    //Step 4b - Pregnancy done - Reset details and update the born babies counter\r\n    function updateCouplesDataAfterBirth(uint32 dadId, uint32 momId, uint8 numBabies) public onlyGameManager {\r\n       uint64 coupleEncoded = getCoupleEncoded(dadId, momId);\r\n\r\n      couplesData[coupleEncoded].pregnancyStarted = 0;\r\n      couplesData[coupleEncoded].babiesCounter += numBabies;\r\n      couplesData[coupleEncoded].paidHospital = false;\r\n      couplesData[coupleEncoded].activePregnant = false;\r\n    }\r\n\r\n    //Step 5 - Get Back to Australian\r\n    function getBackAustralian(uint32 dadId, uint32 momId, uint16 boatId) public onlyGameManager{\r\n        updateStatus(dadId, 1);\r\n        updateStatus(momId, 1);\r\n        updateBoatId(dadId, boatId);\r\n        updateBoatId(momId, boatId);\r\n    }\r\n\r\n    //Step 5 - Get Back to Australian\r\n    function kangaroosArrivedContinent(uint32 dadId, uint32 momId) public onlyGameManager{\r\n        updateStatus(dadId, 0);\r\n        updateStatus(momId, 0);\r\n        updateBoatId(dadId, 0);\r\n        updateBoatId(momId, 0);\r\n    }\r\n    \r\n    function updateBirthTime(uint32 tokenId, uint64 _time) public onlyGameManager{\r\n        dataContract.updateBirthTime(tokenId, _time);\r\n    }\r\n    \r\n    function updateDadId(uint32 tokenId, uint32 dadId) public onlyGameManager{\r\n        dataContract.updateDadId(tokenId, dadId);\r\n    }\r\n    \r\n    function updateMomId(uint32 tokenId, uint32 momId) public onlyGameManager{\r\n        dataContract.updateMomId(tokenId, momId);\r\n    }\r\n\r\n    function updateCoupleId(uint32 tokenId, uint32 coupleId) public onlyGameManager{\r\n        dataContract.updateCoupleId(tokenId, coupleId);\r\n    }\r\n\r\n    function updateBoatId(uint32 tokenId, uint16 boatId) public onlyGameManager{\r\n        dataContract.updateBoatId(tokenId, boatId);\r\n    }\r\n    function updateLandId(uint32 tokenId, uint16 landId) public onlyGameManager{\r\n        dataContract.updateLandId(tokenId, landId);\r\n    }\r\n\r\n    function updateStatus(uint32 tokenId, uint8 status) public{\r\n        require(msg.sender == owner() || msg.sender == gameManager || msg.sender == address(kangarooContract), \"caller don't have permissions\");\r\n        dataContract.updateStatus(tokenId, status);\r\n    }\r\n\r\n    function updateBornState(uint32 tokenId, uint8 bornState) public onlyGameManager{\r\n        dataContract.updateBornState(tokenId, bornState);\r\n    }\r\n\r\n    function updateGen(uint32 tokenId, uint8 gen) public onlyGameManager{\r\n        dataContract.updateGen(tokenId, gen);\r\n    }\r\n\r\n    function updateCouple(uint32 male, uint32 female, uint64 pregnancyStartTime, uint8 babiesCounter, bool paidHospital, bool activePregnant) public onlyGameManager{\r\n        uint64 coupleEncoded = getCoupleEncoded(male, female);\r\n\r\n        couplesData[coupleEncoded].pregnancyStarted = pregnancyStartTime;\r\n        couplesData[coupleEncoded].babiesCounter = babiesCounter;\r\n        couplesData[coupleEncoded].paidHospital = paidHospital;\r\n        couplesData[coupleEncoded].activePregnant = activePregnant;\r\n    }\r\n\r\n    function updatePregnancyStartTime(uint32 male, uint32 female, uint64 pregnancyStartTime) public onlyGameManager {\r\n        uint64 coupleEncoded = getCoupleEncoded(male, female);\r\n        couplesData[coupleEncoded].pregnancyStarted = pregnancyStartTime;\r\n    }\r\n\r\n    function updateBabiesCounter(uint32 male, uint32 female, uint8 babiesCounter) public onlyGameManager {\r\n        uint64 coupleEncoded = getCoupleEncoded(male, female);\r\n        couplesData[coupleEncoded].babiesCounter = babiesCounter;\r\n    }\r\n\r\n    function updatePaidHospital(uint32 male, uint32 female, bool paidHospital) public onlyGameManager {\r\n        uint64 coupleEncoded = getCoupleEncoded(male, female);\r\n        couplesData[coupleEncoded].paidHospital = paidHospital;\r\n    }\r\n\r\n    function updateActivePregnant(uint32 male, uint32 female, bool activePregnant) public onlyGameManager {\r\n        uint64 coupleEncoded = getCoupleEncoded(male, female);\r\n        couplesData[coupleEncoded].activePregnant = activePregnant;\r\n    }\r\n\r\n    /*\r\n       GETTERS\r\n    */\r\n\r\n    function ownerOf(uint256 tokenId) public view returns (address owner){\r\n        return kangarooContract.ownerOf(tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256){\r\n        return kangarooContract.totalSupply();\r\n    }\r\n\r\n\r\n    function getKangaroo(uint32 tokenId) public view returns(IKWWData.KangarooDetails memory){\r\n        return dataContract.getKangaroo(tokenId);\r\n    }\r\n\r\n    function getCouplesData(uint32 male, uint32 female) public view returns(IKWWData.CoupleDetails memory){\r\n        uint64 coupleEncoded = getCoupleEncoded(male, female);\r\n        return couplesData[coupleEncoded];\r\n    }\r\n\r\n    function getPregnancyStartTime(uint32 male, uint32 female) public view returns(uint64){\r\n        uint64 coupleEncoded = getCoupleEncoded(male, female);\r\n        return couplesData[coupleEncoded].pregnancyStarted;\r\n    }\r\n\r\n    function getBabiesCounter(uint32 male, uint32 female) public view returns(uint8){\r\n        uint64 coupleEncoded = getCoupleEncoded(male, female);\r\n        return couplesData[coupleEncoded].babiesCounter;\r\n    }\r\n\r\n    function getPaidHospital(uint32 male, uint32 female) public view returns(bool){\r\n        uint64 coupleEncoded = getCoupleEncoded(male, female);\r\n        return couplesData[coupleEncoded].paidHospital;\r\n    }\r\n\r\n    function getActivePregnant(uint32 male, uint32 female) public view returns(bool){\r\n        uint64 coupleEncoded = getCoupleEncoded(male, female);\r\n        return couplesData[coupleEncoded].activePregnant;\r\n    }\r\n\r\n    function getPregnancyPeriod() public view returns(uint8){\r\n        return dataContract.getPregnancyPeriod();\r\n    }\r\n    function getBabyPeriod() public view returns(uint8){\r\n        return dataContract.getBabyPeriod();\r\n    }\r\n\r\n    function isCouples(uint32 male, uint32 female) public view returns(bool){\r\n      return dataContract.isCouples(male, female);\r\n    }\r\n\r\n    function getCouple(uint32 tokenId) public view returns(uint32){\r\n      return dataContract.getCouple(tokenId);\r\n    }\r\n\r\n    function getKangarooGender(uint32 tokenId) public pure returns(string memory){\r\n      return kangarooIsMale(tokenId) ? \"Male\" : \"Female\";\r\n    }\r\n\r\n    function kangarooIsMale(uint32 tokenId) public pure returns(bool){\r\n      return tokenId % 2 == 0;\r\n    }\r\n\r\n    function getKangarooGen(uint32 tokenId) public view returns(uint8){\r\n        return dataContract.getKangarooGen(tokenId);\r\n    }\r\n\r\n    function isGen0(uint32 tokenId) public view returns(bool){\r\n        return dataContract.isGen0(tokenId);\r\n    }\r\n\r\n    function baseMaxBabiesAllowed(uint32 token) public view returns(uint8){\r\n      return isGen0(token) ? maxBabiesGen0 : maxBabiesOtherGens;\r\n    }\r\n\r\n    function doneMaxBabies(uint32 male, uint32 female) public view returns(bool){\r\n        return baseMaxBabiesAllowed(male) == getBabiesCounter(male, female);\r\n    }\r\n\r\n    function getBabyPeriod(uint32 tokenId) public view returns(uint64) {\r\n        return dataContract.getBabyPeriod(tokenId);\r\n    }\r\n\r\n    function getStatus(uint32 tokenId) public view returns(uint8){\r\n        return dataContract.getStatus(tokenId);\r\n    }\r\n\r\n    function isBaby(uint32 tokenId) public view returns(bool){\r\n        return dataContract.isBaby(tokenId);\r\n    }\r\n\r\n    function getBornState(uint32 tokenId) public view returns(uint8){\r\n        return dataContract.getBornState(tokenId);\r\n    }\r\n\r\n    function getNumBabies(uint32 dadId, uint32 momId) public view returns(uint8){\r\n      uint64 coupleEncoded = getCoupleEncoded(dadId, momId);\r\n      uint8 baseMaxBabies = baseMaxBabiesAllowed(dadId);\r\n      require(couplesData[coupleEncoded].babiesCounter < baseMaxBabies, \"Max babies already born\");\r\n\r\n      uint8 babiesAmount = 0;\r\n      if(couplesData[coupleEncoded].paidHospital == true){\r\n        babiesAmount = baseMaxBabies;\r\n      }\r\n      else{\r\n        uint256 rand = KWWUtils.random(random()) % 10000;\r\n        if(isGen0(dadId)){\r\n          //Base Max 2 Babies\r\n          // 0-3500 -> 1 Baby (35%)\r\n          // 3501-6000 -> 2 Babies (25%)\r\n          // 6001-10000 -> 0 Babies (40%)\r\n          babiesAmount =  rand > 6000 ? 0 : (rand <= 3500 ? 1 : 2);\r\n        }\r\n        else{\r\n          //Base Max 1 Baby\r\n          // 0-6500 -> 0 Babies (65%)\r\n          // 6500-10000 -> 1 Baby (35%)\r\n          babiesAmount =  rand > 6500 ? 0 : 1;\r\n        }\r\n      }\r\n\r\n      uint8 maxBabiesLeft = baseMaxBabies - couplesData[coupleEncoded].babiesCounter;\r\n\r\n      return maxBabiesLeft < babiesAmount ? maxBabiesLeft : babiesAmount;\r\n    }\r\n\r\n    function random() internal view returns(uint256){\r\n      return KWWUtils.random(kangarooContract.totalSupply());\r\n    }\r\n\r\n    function pregnancyEndTimestamp(uint64 coupleEncoded) public view returns(uint64){\r\n      require(couplesData[coupleEncoded].activePregnant == true, \"Pregnancy is not active\");\r\n      return couplesData[coupleEncoded].pregnancyStarted + (getPregnancyPeriod() * 1 days);\r\n    }\r\n\r\n    function getCoupleEncoded(uint32 male, uint32 female) public pure returns(uint64){\r\n      return KWWUtils.pack(male, female);\r\n    }\r\n\r\n    /*\r\n        MODIFIERS\r\n    */\r\n    modifier onlyGameManager() {\r\n        require(gameManager != address(0), \"Game manager not exists\");\r\n        require(msg.sender == owner() || msg.sender == gameManager, \"caller is not the game manager\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKangarooContract() {\r\n        require(address(kangarooContract) != address(0), \"kangaroo contract not exists\");\r\n        require(msg.sender == owner() || msg.sender == address(kangarooContract), \"caller is not the Kangaroo contract\");\r\n        _;\r\n    }  \r\n\r\n    /*\r\n        ONLY OWNER\r\n    */\r\n\r\n    function setPregnancyPeriod(uint8 _pregnancyPeriod) public onlyOwner{\r\n        dataContract.setPregnancyPeriod(_pregnancyPeriod);\r\n    }\r\n\r\n    function setDaysBabyPeriod(uint8 _daysBabyPeriod) public onlyOwner{\r\n        dataContract.setDaysBabyPeriod(_daysBabyPeriod);\r\n    }\r\n\r\n    function setPossibleMintStates(uint8[] calldata _states) public onlyOwner{\r\n        dataContract.setPossibleMintStates(_states);\r\n    }\r\n\r\n    function setKangarooContract(address _addr) public onlyOwner{\r\n      kangarooContract = IKangarooNFT(_addr);\r\n    }\r\n\r\n    function setGameManager(address _addr) public onlyOwner{\r\n      gameManager = _addr;\r\n    }\r\n\r\n    function setDataContract(address _addr) public onlyOwner{\r\n      dataContract = IKWWData(_addr);\r\n    }\r\n\r\n    function setDataOwner(address _addr) public onlyOwner{\r\n        dataContract.transferOwnership(_addr);\r\n    }\r\n\r\n    function setDefaultBabyStatus(uint8 status) public onlyOwner{\r\n        defaultBabyStatus = status;\r\n    }\r\n\r\n    function setMaxBabies(uint8 gen0, uint8 otherGen) public onlyOwner{\r\n        maxBabiesGen0 = gen0;\r\n        maxBabiesOtherGens = otherGen;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"token\",\"type\":\"uint32\"}],\"name\":\"baseMaxBabiesAllowed\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"birthKangaroos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"couplesData\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"pregnancyStarted\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"babiesCounter\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"paidHospital\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"activePregnant\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"doneMaxBabies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"getActivePregnant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"getBabiesCounter\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"getBabyPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBabyPeriod\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"boatId\",\"type\":\"uint16\"}],\"name\":\"getBackAustralian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"getBornState\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"getCouple\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"getCoupleEncoded\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"getCouplesData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"pregnancyStarted\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"babiesCounter\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"paidHospital\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"activePregnant\",\"type\":\"bool\"}],\"internalType\":\"struct IKWWData.CoupleDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"getKangaroo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"birthTime\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"coupleId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"boatId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"gen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bornState\",\"type\":\"uint8\"}],\"internalType\":\"struct IKWWData.KangarooDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"getKangarooGen\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"getKangarooGender\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"}],\"name\":\"getNumBabies\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"getPaidHospital\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPregnancyPeriod\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"getPregnancyStartTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"}],\"name\":\"initKangaroo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"isBaby\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"isCouples\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"isGen0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"kangarooIsMale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"}],\"name\":\"kangarooMoveLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"kangarooReachedIsland\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"hospital\",\"type\":\"bool\"}],\"name\":\"kangarooStartPregnancy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"boatId\",\"type\":\"uint16\"}],\"name\":\"kangarooTookBoat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"}],\"name\":\"kangaroosArrivedContinent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"coupleEncoded\",\"type\":\"uint64\"}],\"name\":\"pregnancyEndTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"setCouple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setDataContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setDataOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_daysBabyPeriod\",\"type\":\"uint8\"}],\"name\":\"setDaysBabyPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setDefaultBabyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setGameManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setKangarooContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"gen0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"otherGen\",\"type\":\"uint8\"}],\"name\":\"setMaxBabies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_states\",\"type\":\"uint8[]\"}],\"name\":\"setPossibleMintStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pregnancyPeriod\",\"type\":\"uint8\"}],\"name\":\"setPregnancyPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"activePregnant\",\"type\":\"bool\"}],\"name\":\"updateActivePregnant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"babiesCounter\",\"type\":\"uint8\"}],\"name\":\"updateBabiesCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"}],\"name\":\"updateBirthTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"boatId\",\"type\":\"uint16\"}],\"name\":\"updateBoatId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"bornState\",\"type\":\"uint8\"}],\"name\":\"updateBornState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"pregnancyStartTime\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"babiesCounter\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"paidHospital\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"activePregnant\",\"type\":\"bool\"}],\"name\":\"updateCouple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"coupleId\",\"type\":\"uint32\"}],\"name\":\"updateCoupleId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numBabies\",\"type\":\"uint8\"}],\"name\":\"updateCouplesDataAfterBirth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"}],\"name\":\"updateDadId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"gen\",\"type\":\"uint8\"}],\"name\":\"updateGen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"}],\"name\":\"updateLandId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"}],\"name\":\"updateMomId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"paidHospital\",\"type\":\"bool\"}],\"name\":\"updatePaidHospital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"pregnancyStartTime\",\"type\":\"uint64\"}],\"name\":\"updatePregnancyStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KWWDataWrapper", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "KWWUtils:a69c26e751af52a7ab717fa1efd3b176738e2068", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://679d5beb00998ec5d92c7f7436b62f01635e5bd4d9667191ec5028a25a15965a"}]}