{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts_cart/CartPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\n/**\\n * @title CART Pool Factory\\n *\\n * @notice CART Pool Factory manages CART Yield farming pools, provides a single\\n *      public interface to access the pools, provides an interface for the pools\\n *      to mint yield rewards, access pool-related info, update weights, etc.\\n *\\n * @notice The factory is authorized (via its owner) to register new pools, change weights\\n *      of the existing pools, removing the pools (by changing their weights to zero)\\n *\\n * @dev The factory requires ROLE_TOKEN_CREATOR permission on the CART token to mint yield\\n *      (see `mintYieldTo` function)\\n *\\n */\\ncontract CartPoolFactory is Ownable, ReentrancyGuard {\\n    /**\\n     * @dev Smart contract unique identifier, a random number\\n     * @dev Should be regenerated each time smart contact source code is changed\\n     *      and changes smart contract itself is to be redeployed\\n     * @dev Generated using https://www.random.org/bytes/\\n     */\\n    uint256 public constant FACTORY_UID = 0xb77099a6d99df5887a6108e413b3c6dfe0c11a1583c9d9b3cd08bfb8ca996aef;\\n\\n    /// @dev Link to CART STREET ERC20 Token instance\\n    address public immutable CART;\\n\\n    /// @dev Auxiliary data structure used only in getPoolData() view function\\n    struct PoolData {\\n        // @dev pool token address (like CART)\\n        address poolToken;\\n        // @dev pool address (like deployed core pool instance)\\n        address poolAddress;\\n        // @dev pool weight (200 for CART pools, 800 for CART/ETH pools - set during deployment)\\n        uint256 weight;\\n        // @dev flash pool flag\\n        bool isFlashPool;\\n    }\\n\\n    /**\\n     * @dev CART/block determines yield farming reward base\\n     *      used by the yield pools controlled by the factory\\n     */\\n    uint256 public cartPerBlock;\\n\\n    /**\\n     * @dev The yield is distributed proportionally to pool weights;\\n     *      total weight is here to help in determining the proportion\\n     */\\n    uint256 public totalWeight;\\n\\n    /**\\n     * @dev End block is the last block when CART/block can be decreased;\\n     *      it is implied that yield farming stops after that block\\n     */\\n    uint256 public endBlock;\\n\\n    /// @dev Maps pool token address (like CART) -> pool address (like core pool instance)\\n    mapping(address => address) public pools;\\n\\n    /// @dev Keeps track of registered pool addresses, maps pool address -> exists flag\\n    mapping(address => bool) public poolExists;\\n\\n    /**\\n     * @dev Fired in createPool() and registerPool()\\n     *\\n     * @param _by an address which executed an action\\n     * @param poolToken pool token address (like CART)\\n     * @param poolAddress deployed pool instance address\\n     * @param weight pool weight\\n     * @param isFlashPool flag indicating if pool is a flash pool\\n     */\\n    event PoolRegistered(\\n        address indexed _by,\\n        address indexed poolToken,\\n        address indexed poolAddress,\\n        uint256 weight,\\n        bool isFlashPool\\n    );\\n\\n    /**\\n     * @dev Fired in changePoolWeight()\\n     *\\n     * @param _by an address which executed an action\\n     * @param poolAddress deployed pool instance address\\n     * @param weight new pool weight\\n     */\\n    event WeightUpdated(address indexed _by, address indexed poolAddress, uint256 weight);\\n\\n    /**\\n     * @dev Fired in updateCartPerBlock()\\n     *\\n     * @param _by an address which executed an action\\n     * @param newCartPerBlock new CART/block value\\n     */\\n    event CartRatioUpdated(address indexed _by, uint256 newCartPerBlock);\\n\\n    /**\\n     * @dev Fired in mintYieldTo()\\n     *\\n     * @param _to an address to mint tokens to\\n     * @param amount amount of CART tokens to mint\\n     */\\n    event MintYield(address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Creates/deploys a factory instance\\n     *\\n     * @param _cart CART ERC20 token address\\n     * @param _cartPerBlock initial CART/block value for rewards\\n     * @param _endBlock block number when farming stops and rewards cannot be updated anymore\\n     */\\n    constructor(\\n        address _cart,\\n        uint256 _cartPerBlock,\\n        uint256 _endBlock\\n    ) {\\n        // verify the inputs are set\\n        require(_cart != address(0) , \\\"CART is invalid\\\");\\n        require(_cartPerBlock > 0, \\\"CART/block not set\\\");\\n\\n        // save the inputs into internal state variables\\n        CART = _cart;\\n        cartPerBlock = _cartPerBlock;\\n        endBlock = _endBlock;\\n    }\\n\\n    /**\\n     * @notice Given a pool token retrieves corresponding pool address\\n     *\\n     * @dev A shortcut for `pools` mapping\\n     *\\n     * @param poolToken pool token address (like CART) to query pool address for\\n     * @return pool address for the token specified\\n     */\\n    function getPoolAddress(address poolToken) external view returns (address) {\\n        // read the mapping and return\\n        return pools[poolToken];\\n    }\\n\\n    /**\\n     * @notice Reads pool information for the pool defined by its pool token address,\\n     *      designed to simplify integration with the front ends\\n     *\\n     * @param _poolToken pool token address to query pool information for\\n     * @return pool information packed in a PoolData struct\\n     */\\n    function getPoolData(address _poolToken) external view returns (PoolData memory) {\\n        // get the pool address from the mapping\\n        address poolAddr = pools[_poolToken];\\n\\n        // throw if there is no pool registered for the token specified\\n        require(poolAddr != address(0), \\\"pool not found\\\");\\n\\n        // read pool information from the pool smart contract\\n        // via the pool interface (IPool)\\n        bool isFlashPool = IPool(poolAddr).isFlashPool();\\n        uint256 weight = IPool(poolAddr).weight();\\n\\n        // create the in-memory structure and return it\\n        return PoolData({ poolToken: _poolToken, poolAddress: poolAddr, weight: weight, isFlashPool: isFlashPool });\\n    }\\n\\n    /**\\n     * @dev Registers an already deployed pool instance within the factory\\n     *\\n     * @dev Can be executed by the pool factory owner only\\n     *\\n     * @param poolAddr address of the already deployed pool instance\\n     */\\n    function registerPool(address poolAddr) external onlyOwner {\\n        // read pool information from the pool smart contract\\n        // via the pool interface (IPool)\\n        address poolToken = IPool(poolAddr).poolToken();\\n        bool isFlashPool = IPool(poolAddr).isFlashPool();\\n        uint256 weight = IPool(poolAddr).weight();\\n\\n        // ensure that the pool is not already registered within the factory\\n        require(pools[poolToken] == address(0), \\\"this pool is already registered\\\");\\n\\n        // create pool structure, register it within the factory\\n        pools[poolToken] = poolAddr;\\n        poolExists[poolAddr] = true;\\n        // update total pool weight of the factory\\n        totalWeight += weight;\\n\\n        // emit an event\\n        emit PoolRegistered(msg.sender, poolToken, poolAddr, weight, isFlashPool);\\n    }\\n\\n    /**\\n     * @dev Mints CART tokens; executed by CART Pool only\\n     *\\n     * @dev Requires factory to have ROLE_TOKEN_CREATOR permission\\n     *      on the CART ERC20 token instance\\n     *\\n     * @param _to an address to mint tokens to\\n     * @param _amount amount of CART tokens to mint\\n     */\\n    function mintYieldTo(address _to, uint256 _amount) external {\\n        // verify that sender is a pool registered withing the factory\\n        require(poolExists[msg.sender], \\\"access denied\\\");\\n\\n        // transfer CART tokens as required\\n        transferCartToken(_to, _amount);\\n\\n        emit MintYield(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Changes the weight of the pool;\\n     *      executed by the pool itself or by the factory owner\\n     *\\n     * @param poolAddr address of the pool to change weight for\\n     * @param weight new weight value to set to\\n     */\\n    function changePoolWeight(address poolAddr, uint256 weight) external {\\n        // verify function is executed either by factory owner or by the pool itself\\n        require(msg.sender == owner() || poolExists[msg.sender]);\\n\\n        // recalculate total weight\\n        totalWeight = totalWeight + weight - IPool(poolAddr).weight();\\n\\n        // set the new pool weight\\n        IPool(poolAddr).setWeight(weight);\\n\\n        // emit an event\\n        emit WeightUpdated(msg.sender, poolAddr, weight);\\n    }\\n\\n    /**\\n     * @dev set NFT Info of the pool;\\n     *      executed by the pool itself or by the factory owner\\n     *\\n     * @param poolAddr address of the pool to change NFT Info\\n     * @param nftAddress address of NFT\\n     * @param nftWeight weight of NFT\\n     */\\n    function setNFTWeight(address poolAddr, address nftAddress, uint256 nftWeight) external {\\n        // verify function is executed either by factory owner or by the pool itself\\n        require(msg.sender == owner() || poolExists[msg.sender]);\\n\\n        // set the new NFT Info\\n        IPool(poolAddr).NFTWeightUpdated(nftAddress, nftWeight);\\n    }\\n\\n    /**\\n     * @dev set new stake weight multiplier\\n     *      executed by the factory owner\\n\\n     ** @param poolAddr address of the pool to change weight multiplier\\n     * @param _newWeightMultiplier  new stake weight multiplier\\n     */\\n    function setWeightMultiplier(address poolAddr, uint256 _newWeightMultiplier) external {\\n        // verify function is executed either by factory owner\\n        require(msg.sender == owner());\\n        // set the new weight multiplier\\n        IPool(poolAddr).setWeightMultiplierbyFactory(_newWeightMultiplier);\\n    }\\n\\n    /**\\n     * @dev set new cartPerBlock\\n     *      executed by the factory owner\\n     *\\n     * @param _cartPerBlock  new CART/block value for rewards\\n     */\\n    function setCartPerBlock(uint256 _cartPerBlock) external {\\n        // verify function is executed either by factory owner\\n        require(msg.sender == owner());\\n        // set new CART/block value for rewards\\n        cartPerBlock = _cartPerBlock;\\n    }\\n\\n    /**\\n     * @dev set new endBlock\\n     *      executed by the factory owner\\n     *\\n     * @param _endBlock  new endblock number, this number means when farming stops and rewards cannot be updated anymore\\n     */\\n    function setEndBlock(uint256 _endBlock) external {\\n        // verify function is executed either by factory owner\\n        require(msg.sender == owner());\\n        // verify block number\\n        require(_endBlock > block.number, \\\"invalid end block: must be greater than current block\\\");\\n        // set new endblock number\\n        endBlock = _endBlock;\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override block number in helper test smart contracts\\n     *\\n     * @return `block.number` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function blockNumber() public view virtual returns (uint256) {\\n        // return current block number\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev Keeps track of registered pool addresses\\n     *\\n     * @param _pool pool address\\n     * @return bool  whether is pool Exists\\n     */\\n    function isPoolExists(address _pool) external view returns (bool) {\\n        return poolExists[_pool];\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransfer on a CART token\\n     *\\n     */\\n    function transferCartToken(address _to, uint256 _value) internal {\\n        // just delegate call to the target\\n        SafeERC20.safeTransfer(IERC20(CART), _to, _value);\\n    }\\n\\n    /**\\n     * @notice Emergency withdraw specified amount of tokens, call only by owner\\n     *\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        require(msg.sender == owner(), 'Access denied!');\\n        SafeERC20.safeTransfer(IERC20(CART), msg.sender, IERC20(CART).balanceOf(address(this)));\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts_cart/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n* @dev Data structure representing token holder using a pool\\n*/\\nstruct User {\\n    // @dev Total staked amount\\n    uint256 tokenAmount;\\n    // @dev Total reward amount\\n    uint256 rewardAmount;\\n    // @dev Total weight\\n    uint256 totalWeight;\\n    // @dev Auxiliary variable for yield calculation\\n    uint256 subYieldRewards;\\n    // @dev An array of holder's deposits\\n    Deposit[] deposits;\\n}\\n\\n/**\\n* @dev Deposit is a key data structure used in staking,\\n*      it represents a unit of stake with its amount, weight and term (time interval)\\n*/\\nstruct Deposit {\\n    // @dev token amount staked\\n    uint256 tokenAmount;\\n    // @dev stake weight\\n    uint256 weight;\\n    // @dev locking period - from\\n    uint64 lockedFrom;\\n    // @dev locking period - until\\n    uint64 lockedUntil;\\n    // @dev indicates if the stake was created as a yield reward\\n    bool isYield;\\n}\\n\\n/**\\n * @title Cart Pool\\n *\\n * @notice An abstraction representing a pool, see CARTPoolBase for details\\n *\\n */\\ninterface IPool {\\n    \\n    // for the rest of the functions see Soldoc in CARTPoolBase\\n    function CART() external view returns (address);\\n\\n    function poolToken() external view returns (address);\\n\\n    function isFlashPool() external view returns (bool);\\n\\n    function weight() external view returns (uint256);\\n\\n    function lastYieldDistribution() external view returns (uint256);\\n\\n    function yieldRewardsPerWeight() external view returns (uint256);\\n\\n    function usersLockingWeight() external view returns (uint256);\\n\\n    function weightMultiplier() external view returns (uint256);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function getDepositsLength(address _user) external view returns (uint256);\\n\\n    function getOriginDeposit(address _user, uint256 _depositId) external view returns (Deposit memory);\\n\\n    function getUser(address _user) external view returns (User memory);\\n\\n    function stake(\\n        uint256 _amount,\\n        uint64 _lockedUntil,\\n        address _nftAddress,\\n        uint256 _nftTokenId\\n    ) external;\\n\\n    function unstake(\\n        uint256 _depositId,\\n        uint256 _amount\\n    ) external;\\n\\n    function sync() external;\\n\\n    function processRewards() external;\\n\\n    function setWeight(uint256 _weight) external;\\n\\n    function NFTWeightUpdated(address _nftAddress, uint256 _nftWeight) external;\\n\\n    function setWeightMultiplierbyFactory(uint256 _newWeightMultiplier) external;\\n\\n    function getNFTWeight(address _nftAddress) external view returns (uint256);\\n\\n    function weightToReward(uint256 _weight, uint256 rewardPerWeight) external pure returns (uint256);\\n\\n    function rewardToWeight(uint256 reward, uint256 rewardPerWeight) external pure returns (uint256);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cart\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cartPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCartPerBlock\",\"type\":\"uint256\"}],\"name\":\"CartRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintYield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFlashPool\",\"type\":\"bool\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"WeightUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CART\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY_UID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cartPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"changePoolWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFlashPool\",\"type\":\"bool\"}],\"internalType\":\"struct CartPoolFactory.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isPoolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintYieldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cartPerBlock\",\"type\":\"uint256\"}],\"name\":\"setCartPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftWeight\",\"type\":\"uint256\"}],\"name\":\"setNFTWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newWeightMultiplier\",\"type\":\"uint256\"}],\"name\":\"setWeightMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CartPoolFactory", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000005c8c8d560048f34e5f7f8ad71f2f81a89dbd273e00000000000000000000000000000000000000000000000013465315f6b58de00000000000000000000000000000000000000000000000000000000000e0d3cc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}