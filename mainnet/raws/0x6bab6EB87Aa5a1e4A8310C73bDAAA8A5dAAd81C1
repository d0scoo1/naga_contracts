{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/test/SlowWallet.sol\": {\r\n      \"content\": \"// solhint-disable-file\\n// SPDX-License-Identifier: BlueOak-1.0.0\\n\\npragma solidity ^0.5.8;\\n\\n/**\\n * @title The standard ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 {\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed holder, address indexed spender, uint256 value);\\n}\\n\\n/// @title Time-delayed ERC-20 wallet contract.\\n/// Can only transfer tokens after publicly recording the intention to do so\\n/// at least two weeks in advance.\\ncontract SlowWallet {\\n    // TYPES\\n\\n    struct TransferProposal {\\n        address destination;\\n        uint256 value;\\n        uint256 time;\\n        string notes;\\n        bool closed;\\n    }\\n\\n    // DATA\\n\\n    IERC20 public token;\\n    uint256 public constant delay = 4 weeks;\\n    address public owner;\\n\\n    // PROPOSALS\\n\\n    mapping(uint256 => TransferProposal) public proposals;\\n    uint256 public proposalsLength;\\n\\n    // EVENTS\\n\\n    event TransferProposed(\\n        uint256 index,\\n        address indexed destination,\\n        uint256 value,\\n        uint256 delayUntil,\\n        string notes\\n    );\\n    event TransferConfirmed(\\n        uint256 index,\\n        address indexed destination,\\n        uint256 value,\\n        string notes\\n    );\\n    event TransferCancelled(\\n        uint256 index,\\n        address indexed destination,\\n        uint256 value,\\n        string notes\\n    );\\n    event AllTransfersCancelled();\\n\\n    // FUNCTIONALITY\\n\\n    constructor(address tokenAddress, address owner_) public {\\n        token = IERC20(tokenAddress);\\n        owner = owner_;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"must be owner\\\");\\n        _;\\n    }\\n\\n    /// Propose a new transfer, which can be confirmed after two weeks.\\n    function propose(\\n        address destination,\\n        uint256 value,\\n        string calldata notes\\n    ) external onlyOwner {\\n        // Delay by at least two weeks.\\n        // We are relying on block.timestamp for this, and aware of the possibility of its\\n        // manipulation by miners. But we are working at a timescale that is already much\\n        // longer than the variance in timestamps we have observed and expect in the future,\\n        // so we are satisfied with this choice.\\n        // solium-disable-next-line security/no-block-members\\n        uint256 delayUntil = now + delay;\\n        require(delayUntil >= now, \\\"delay overflowed\\\");\\n\\n        proposals[proposalsLength] = TransferProposal({\\n            destination: destination,\\n            value: value,\\n            time: delayUntil,\\n            notes: notes,\\n            closed: false\\n        });\\n        proposalsLength++;\\n\\n        emit TransferProposed(proposalsLength - 1, destination, value, delayUntil, notes);\\n    }\\n\\n    /// Cancel a proposed transfer.\\n    function cancel(\\n        uint256 index,\\n        address addr,\\n        uint256 value\\n    ) external onlyOwner {\\n        // Check authorization.\\n        requireMatchingOpenProposal(index, addr, value);\\n\\n        // Cancel transfer.\\n        proposals[index].closed = true;\\n        emit TransferCancelled(index, addr, value, proposals[index].notes);\\n    }\\n\\n    /// Mark all proposals \\\"void\\\", in O(1).\\n    function voidAll() external onlyOwner {\\n        proposalsLength = 0;\\n        emit AllTransfersCancelled();\\n    }\\n\\n    /// Confirm and execute a proposed transfer, if enough time has passed since it was proposed.\\n    function confirm(\\n        uint256 index,\\n        address destination,\\n        uint256 value\\n    ) external onlyOwner {\\n        // Check authorization.\\n        requireMatchingOpenProposal(index, destination, value);\\n\\n        // See commentary above about using `now`.\\n        // solium-disable-next-line security/no-block-members\\n        require(proposals[index].time < now, \\\"too early\\\");\\n\\n        // Record execution of transfer.\\n        proposals[index].closed = true;\\n        emit TransferConfirmed(index, destination, value, proposals[index].notes);\\n\\n        // Proceed with execution of transfer.\\n        require(token.transfer(destination, value));\\n    }\\n\\n    /// Throw unless the given transfer proposal exists and matches `destination` and `value`.\\n    function requireMatchingOpenProposal(\\n        uint256 index,\\n        address destination,\\n        uint256 value\\n    ) private view {\\n        require(index < proposalsLength, \\\"index too high, or transfer voided\\\");\\n        require(!proposals[index].closed, \\\"transfer already closed\\\");\\n\\n        // Slither reports \\\"dangerous strict equality\\\" for each of these, but it's OK.\\n        // These equalities are to confirm that the transfer entered is equal to the\\n        // matching previous transfer. We're vetting data entry; strict equality is appropriate.\\n        require(proposals[index].destination == destination, \\\"destination mismatched\\\");\\n        require(proposals[index].value == value, \\\"value mismatched\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"notes\",\"type\":\"string\"},{\"name\":\"closed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voidAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"confirm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"owner_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"delayUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"TransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"TransferConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"TransferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllTransfersCancelled\",\"type\":\"event\"}]", "ContractName": "SlowWallet", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "000000000000000000000000320623b8e4ff03373931769a31fc52a4e78b5d70000000000000000000000000a7b123d54bcec14b4206dab796982a6d5aaa6770", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}