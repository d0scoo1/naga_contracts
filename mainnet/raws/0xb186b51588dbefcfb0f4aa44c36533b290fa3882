{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n * \r\n *    \r\n *   the_coin \"Issuance\" Bitcoin Halving Clock Updater by Takens Theorem\r\n * \r\n *   Terms, conditions: Experimental, use at your own risk. Contract and tokens are\r\n *   as-is and as-available without any and all warranty. By using this contract \r\n *   you accept sole responsibility for any and all transactions involving \r\n *   the_coin, including this updater contract. \r\n *\r\n *   NB: Make sure you setApprovalForAll() for this contract on the_coin contract\r\n * \r\n * \r\n */\r\n\r\ncontract the_coin {\r\n    function changeStyleMode(uint256 tokenId, string memory styleMode) public returns (string memory) {}\r\n    function ownerOf(uint256 tokenId) external view returns (address owner) {}\r\n}\r\n\r\ncontract TCTTMOD1 {\r\n    \r\n    address coin_address = 0xf76c5d925b27a63a3745A6b787664A7f38fA79bd;\r\n\r\n    string part1 = \"path{fill:none;}circle{fill:\";\r\n    string part2 = \"}text{fill:var(--f);}rect{fill:var(--b);}circle:nth-child(-3n+\";\r\n    string part3 = \"){stroke-width:2pt;stroke:var(--f);}\";\r\n\r\n    /**\r\n     * @notice Updates Bitcoin Halving Clock on the_coin\r\n     * @param tokenId The tokenId must point to \"Issuance\" token on the_coin (1, 2, 3, 4, 17, ...)\r\n     * @param btcBlockHeight The current BTC block height in integer form (no commas)\r\n     * @param htmlColor Leave htmlColor blank for default BTC orange + alpha (#f2a90033). Otherwise, use an HTML color with hash character.\r\n     * @param colorMode Set colorMode = 1 for light mode; 2 for dark mode\r\n     * @return Success of style modification\r\n    **/ \r\n    function setHalvingClock(uint256 tokenId, uint256 btcBlockHeight, string memory htmlColor, uint256 colorMode) public returns (string memory) {         \r\n        require(colorMode==1 || colorMode==2, \"Color mode must be 1 or 2\");\r\n        require(the_coin(coin_address).ownerOf(tokenId)==msg.sender,\"You do not own this token\");\r\n\r\n        string memory rootStyle;\r\n        if (colorMode==1) {\r\n            rootStyle = \":root{--f:black;--b:white;}\";\r\n        } else {\r\n            rootStyle = \":root{--f:white;--b:black;}\";\r\n        }\r\n\r\n        if (keccak256(abi.encodePacked(htmlColor)) == keccak256(abi.encodePacked(\"\"))) {\r\n            htmlColor = \"#f2a90033\";\r\n        }\r\n\r\n        uint256 halvingRing = (btcBlockHeight / 210000) * 3;\r\n        string memory cssString = string(abi.encodePacked(rootStyle,part1,htmlColor,part2,\r\n                                            toString(halvingRing),part3));\r\n\r\n        return the_coin(coin_address).changeStyleMode(tokenId,cssString); \r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // cf. OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    constructor() {}    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"btcBlockHeight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"htmlColor\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorMode\",\"type\":\"uint256\"}],\"name\":\"setHalvingClock\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TCTTMOD1", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7d99b2a30fe357c0cbc56def907b7cc196c3368f10df1ea4ad228ebec9dc24b1"}]}