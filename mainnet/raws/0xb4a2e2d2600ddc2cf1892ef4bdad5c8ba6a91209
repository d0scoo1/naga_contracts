{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n/**** \r\n***** this code and any deployments of this code are strictly provided as-is; no guarantee, representation or warranty is being made, express or implied, as to the safety or correctness of the code \r\n***** or any smart contracts or other software deployed from these files, in accordance with the disclosures and licenses found here: https://github.com/V4R14/firm_utils/blob/main/LICENSE\r\n***** this code is not audited, and users, developers, or adapters of these files should proceed with caution and use at their own risk.\r\n****/\r\n\r\npragma solidity >=0.8.4;\r\n\r\n/// @title Pay In ETH to GUSD\r\n/// @dev uses Uniswap router to swap incoming ETH for GUSD tokens, then sends to receiver address (initially, the deployer)\r\n/// @notice permits payment for services denominated in ETH but receiving GUSD\r\ninterface IUniswapV2Router02 {\r\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ncontract PayInETHtoGUSD {\r\n\r\n    address constant GUSD_ADDR = 0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd; // GUSD mainnet token contract address\r\n    address constant UNI_ROUTER_ADDR = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap v2 router contract address\r\n    address constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH mainnet token address, alteratively could call uniRouter.WETH() for the path\r\n    address receiver; \r\n\r\n    IUniswapV2Router02 public uniRouter;\r\n\r\n    error CallerNotCurrentReceiver();\r\n\r\n    constructor() payable {\r\n        uniRouter = IUniswapV2Router02(UNI_ROUTER_ADDR);\r\n        receiver = msg.sender;\r\n    }\r\n\r\n    /// @notice receives ETH payment and swaps to GUSD via Uniswap router, which is then sent to receiver\r\n    receive() external payable {\r\n        uniRouter.swapExactETHForTokens{ value: msg.value }(0, _getPathForETHtoGUSD(), receiver, block.timestamp);\r\n    }\r\n\r\n    /// @return the router path for ETH/GUSD swap\r\n    function _getPathForETHtoGUSD() internal pure returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH_ADDR;\r\n        path[1] = GUSD_ADDR;\r\n        return path;\r\n    }\r\n    \r\n    /// @notice allows current receiver address to change the receiver address for payments\r\n    /// @param _newReceiver new address to receive GUSD tokens\r\n    /// @return the receiver address\r\n    function changeReceiver(address _newReceiver) external returns (address) {\r\n        if (msg.sender != receiver) revert CallerNotCurrentReceiver();\r\n        receiver = _newReceiver;\r\n        return (receiver);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotCurrentReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newReceiver\",\"type\":\"address\"}],\"name\":\"changeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PayInETHtoGUSD", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://197e6819916395aa408bd0db59b652e0db43479d9921a479ff2b9317b1ad6d20"}]}