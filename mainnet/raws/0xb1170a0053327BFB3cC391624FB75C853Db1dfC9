{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"abc.sol\":{\"content\":\"//SPDX-License-Identifier:UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20{\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract abc{\\r\\n\\r\\n    mapping(address =\\u003e bool) public isAdmin;\\r\\n\\r\\n    address public ownerAddress;\\r\\n    address public creatorAddress;\\r\\n\\r\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) public signatures;\\r\\n    // signatures[address][processID]=sha1hash\\r\\n\\r\\n    modifier adminOnly{\\r\\n        require(isAdmin[msg.sender]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier ownerOnly{\\r\\n        require(msg.sender==ownerAddress);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setOriginalOwner(address _ownerAddress) internal { // call in constructor\\r\\n        ownerAddress=_ownerAddress;\\r\\n        isAdmin[ownerAddress]=true;\\r\\n        \\r\\n        creatorAddress=msg.sender;\\r\\n        isAdmin[msg.sender]=true;\\r\\n    }\\r\\n\\r\\n    function makeAdmin(address _newAdminAddress) external ownerOnly {\\r\\n        isAdmin[_newAdminAddress]=true;\\r\\n    }\\r\\n\\r\\n    function removeAdmin(address _admin) external ownerOnly {\\r\\n        isAdmin[_admin]=false;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address _newOwnerAddress) external ownerOnly {\\r\\n        ownerAddress=_newOwnerAddress;      \\r\\n    }\\r\\n\\r\\n    function signProcess(uint256 _processID,uint256 _sha1) external {\\r\\n        signatures[msg.sender][_processID]=_sha1;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary math{\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n      assert(b \\u003c= a);\\r\\n      return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n      uint256 c = a + b;\\r\\n      assert(c \\u003e= a);\\r\\n      return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if(a==0){\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n}\"},\"safesend.sol\":{\"content\":\"//SPDX-License-Identifier:UNLICENSED\\r\\n/*\\r\\nSafeSend V2\\r\\nDecentralized Simple Payment Service\\r\\nCompiler Version: 0.8.14\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"abc.sol\\\";\\r\\n\\r\\ncontract safesend is abc {\\r\\n\\r\\n    uint256 public mode=2; // 0:disabled; 1:claim only; 2:create and claim;\\r\\n    \\r\\n    uint256 public fee=0.0006 ether; // to be split between owner and maintainer (creator)\\r\\n\\r\\n    uint256 public minParentBal=1000000000; // 100,000 +4 decimals; for zero fees\\r\\n\\r\\n    mapping(address =\\u003e uint256) public balances; // for revenue only\\r\\n\\r\\n    uint256 public totalRevenue=0; // BNB\\r\\n\\r\\n    address public PARENT_CA=0xa5Ea2F2578D03333cb49e5e06238e2B04a9776c3; // specified by owner\\r\\n\\r\\n    struct envelope{\\r\\n        uint256 status; // 0:cancelled; 1:holding; 2:claimed/released;\\r\\n        address sender;\\r\\n        address receiver;\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n        uint256 claimableAmount;\\r\\n        uint256 created;\\r\\n        uint256 holdTimeSec;\\r\\n        uint256 closed;\\r\\n    }\\r\\n\\r\\n    uint256 public txcount=1000;\\r\\n\\r\\n    mapping(address =\\u003e bool) public feeWhitelisted;\\r\\n\\r\\n    mapping(address =\\u003e uint256[]) public userTxns;\\r\\n\\r\\n    mapping(uint256 =\\u003e envelope) public envelopes;\\r\\n\\r\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) public frontendStatus;\\r\\n\\r\\n    constructor() {\\r\\n        address _owner=0x1884377d1FeB3d3089884cE0947C2bf1675bf052; // owner specified\\r\\n        setOriginalOwner(_owner);\\r\\n        feeWhitelisted[_owner]=true;\\r\\n        feeWhitelisted[msg.sender]=true;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    // ADMIN FUNCTIONS\\r\\n\\r\\n    function setMode(uint256 _mode) external adminOnly {\\r\\n        mode=_mode;\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 _fee) external adminOnly {\\r\\n        fee=_fee;\\r\\n    }\\r\\n\\r\\n    function setMinParentBal(uint256 _minParentBal) external adminOnly {\\r\\n        minParentBal=_minParentBal;\\r\\n    }\\r\\n\\r\\n    function setPARENT_CA(address _PARENT_CA) external adminOnly {\\r\\n        PARENT_CA=_PARENT_CA;\\r\\n    }\\r\\n\\r\\n    function addToFeeWhitelist(address _account) external adminOnly {\\r\\n        feeWhitelisted[_account]=true;\\r\\n    }\\r\\n\\r\\n    function removeFromFeeWhitelist(address _account) external adminOnly {\\r\\n        feeWhitelisted[_account]=false;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    // CORE FUNCTIONS\\r\\n\\r\\n    function sendEnvelope(address receiver,address token,uint256 amount,uint256 holdTimeSec,uint256 frontendID) external payable{\\r\\n        // check mode\\r\\n        require(mode==2,\\\"System is paused.\\\");\\r\\n\\r\\n        // get a new txid\\r\\n        txcount=math.add(txcount,1);\\r\\n        uint256 txid=txcount;\\r\\n\\r\\n        // re-entrancy guard\\r\\n        require(frontendStatus[msg.sender][frontendID]==0,\\\"Transaction already executed once.\\\");\\r\\n        frontendStatus[msg.sender][frontendID]=txid; // after this line re-entry will fail at previous line\\r\\n\\r\\n        // determine fee\\r\\n        uint256 finalFee=fee;\\r\\n        if(PARENT_CA!=address(0x0)){\\r\\n            if(IERC20(PARENT_CA).balanceOf(msg.sender)\\u003e=minParentBal){\\r\\n                finalFee=math.div(fee,2);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(feeWhitelisted[msg.sender]){\\r\\n            finalFee=0;\\r\\n        }\\r\\n\\r\\n        if(finalFee\\u003e0){\\r\\n            uint256 feeShare=math.div(finalFee,2);\\r\\n            balances[ownerAddress]=math.add(balances[ownerAddress],feeShare);\\r\\n            balances[creatorAddress]=math.add(balances[creatorAddress],feeShare);\\r\\n            totalRevenue=math.add(totalRevenue,finalFee);\\r\\n        }\\r\\n\\r\\n        // to send ETH supply the contract\\u0027s own address as token\\r\\n        bool isETH=token==address(this)?true:false;\\r\\n\\r\\n        // Sending ETH\\r\\n        if(isETH){\\r\\n            require(msg.value==amount+finalFee,\\\"Insufficient value\\\"); // fee and amount must be paid\\r\\n        }\\r\\n\\r\\n        // Sending Tokens\\r\\n        if(!isETH){\\r\\n            require(msg.value==finalFee,\\\"Insufficient fee\\\"); // fee must be paid\\r\\n            require(IERC20(token).allowance(msg.sender,address(this))\\u003e=amount,\\\"Insufficient allowance\\\"); // must have sufficient allowance\\r\\n            require(IERC20(token).balanceOf(msg.sender)\\u003e=amount,\\\"Insufficient balance\\\"); // must have sufficient token balance\\r\\n        }\\r\\n\\r\\n        // transfer the token amount to this contract\\r\\n        if(!isETH){\\r\\n            require(IERC20(token).transferFrom(msg.sender,address(this),amount),\\\"Transfer failed.\\\");\\r\\n        }\\r\\n       \\r\\n        // create the envelope\\r\\n        /*\\r\\n            IMPORTANT AUDIT NOTE REGARDING block.timestamp:\\r\\n            Developers are aware of the variability of block.timestamp.\\r\\n            The DApp interface allows users to set the time period in seconds,\\r\\n            hours, days, months, and years. Users are informed that using longer time\\r\\n            periods make the variability of block.timestamp negligible.\\r\\n        */\\r\\n        envelopes[txid]=envelope(1,msg.sender,receiver,token,amount,amount,block.timestamp,holdTimeSec,0);\\r\\n\\r\\n        // add txid to user\\u0027s transaction list\\r\\n        userTxns[msg.sender].push(txid);\\r\\n        if(msg.sender!=receiver)\\r\\n            userTxns[receiver].push(txid);\\r\\n    }\\r\\n\\r\\n    function openEnvelope(uint256 txid,uint256 returnToSender) external {    \\r\\n        // check mode\\r\\n        require(mode\\u003e0,\\\"System is paused.\\\");\\r\\n\\r\\n        // check valid parties\\r\\n        require(msg.sender==envelopes[txid].sender || msg.sender==envelopes[txid].receiver,\\\"Not allowed\\\");\\r\\n\\r\\n        // check if already claimed or cancelled\\r\\n        require(envelopes[txid].claimableAmount==envelopes[txid].amount \\u0026\\u0026 envelopes[txid].status==1,\\\"Claimed, cancelled, or expired\\\");\\r\\n\\r\\n        // check if ready for claiming; otherwise sender can still release it\\r\\n        /*\\r\\n            IMPORTANT AUDIT NOTE REGARDING block.timestamp:\\r\\n            Developers are aware of the variability of block.timestamp.\\r\\n            The DApp interface allows users to set the time period in seconds,\\r\\n            hours, days, months, and years. Users are informed that using longer time\\r\\n            periods make the variability of block.timestamp negligible.\\r\\n        */\\r\\n        require((block.timestamp\\u003eenvelopes[txid].created+envelopes[txid].holdTimeSec)||(msg.sender==envelopes[txid].sender),\\\"Still in holding period\\\");\\r\\n\\r\\n        // ensure contract has balance\\r\\n        bool isETH=envelopes[txid].token==address(this)?true:false;\\r\\n        if(isETH)\\r\\n            require(address(this).balance\\u003e=envelopes[txid].amount,\\\"Insufficient contract balance\\\");\\r\\n        if(!isETH)\\r\\n            require(IERC20(envelopes[txid].token).balanceOf(address(this))\\u003e=envelopes[txid].amount,\\\"Insufficient token balance in contract\\\");\\r\\n\\r\\n        // re-entrancy guard\\r\\n        // AUDIT NOTE: see third require statment in this function\\r\\n        envelopes[txid].claimableAmount=0; // zero-out claimable\\r\\n        if(returnToSender==1)\\r\\n            envelopes[txid].status=0; // set cancelled status\\r\\n        else\\r\\n            envelopes[txid].status=2; // set sent status\\r\\n\\r\\n        // release/return the funds\\r\\n        if(isETH){\\r\\n            address payable pDest=payable(envelopes[txid].receiver);\\r\\n            if(returnToSender==1) pDest=payable(envelopes[txid].sender);\\r\\n            pDest.transfer(envelopes[txid].amount);\\r\\n        }\\r\\n        if(!isETH){\\r\\n            if(returnToSender==1)\\r\\n                require(IERC20(envelopes[txid].token).transfer(envelopes[txid].sender,envelopes[txid].amount),\\\"Transfer failed.\\\");            \\r\\n            else\\r\\n                require(IERC20(envelopes[txid].token).transfer(envelopes[txid].receiver,envelopes[txid].amount),\\\"Transfer failed.\\\");            \\r\\n        }\\r\\n        \\r\\n        // set date closed\\r\\n        envelopes[txid].closed=block.timestamp;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function withdraw() external adminOnly{\\r\\n        require(balances[msg.sender]\\u003e0,\\\"No balance\\\");\\r\\n        uint256 bal=balances[msg.sender];\\r\\n        balances[msg.sender]=0; // re-entrancy guard: zero-out variable before transferring\\r\\n        address payable pAddress=payable(msg.sender);\\r\\n        pAddress.transfer(bal);\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function getFee(address account) external view returns (uint256){\\r\\n        uint256 finalFee=fee;\\r\\n        if(PARENT_CA!=address(0x0)){\\r\\n            if(IERC20(PARENT_CA).balanceOf(account)\\u003e=minParentBal){\\r\\n                finalFee=math.div(fee,2);\\r\\n            }\\r\\n        }\\r\\n        if(feeWhitelisted[account]){\\r\\n            finalFee=0;\\r\\n        }\\r\\n\\r\\n        return finalFee;\\r\\n    }\\r\\n\\r\\n    function countRecords(address account) external view returns (uint256){\\r\\n        return userTxns[account].length;\\r\\n    }\\r\\n\\r\\n    function getRecordByIndex(address account,uint256 index) external view returns (uint256 _txid,address sender,address receiver,uint256 status,address token,uint256 amount,uint256 claimableAmount,uint256 created,uint256 holdTimeSec,uint256 closed,bool isClaimable){\\r\\n        uint256 txid=userTxns[account][index];\\r\\n        return getRecordByTxid(txid);\\r\\n    }\\r\\n\\r\\n    function getRecordByTxid(uint256 txid) public view returns (uint256 _txid,address sender,address receiver,uint256 status,address token,uint256 amount,uint256 claimableAmount,uint256 created,uint256 holdTimeSec,uint256 closed,bool isClaimable){\\r\\n        envelope memory e=envelopes[txid];\\r\\n        isClaimable=(block.timestamp\\u003ee.created+e.holdTimeSec)\\u0026\\u0026(e.status==1)?true:false;\\r\\n        return(txid,e.sender,e.receiver,e.status,e.token,e.amount,e.claimableAmount,e.created,e.holdTimeSec,e.closed,isClaimable);\\r\\n    }\\r\\n\\r\\n    function allowance(address token,address owner) external view returns (uint256){\\r\\n        return IERC20(token).allowance(owner,address(this));\\r\\n    }\\r\\n\\r\\n    function contractBalance(address token) external view returns (uint256){\\r\\n        if(token==address(this)){\\r\\n            return address(this).balance;\\r\\n        }\\r\\n        else{\\r\\n            return IERC20(token).balanceOf(address(this));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PARENT_CA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addToFeeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"countRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"envelopes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdTimeSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frontendStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRecordByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_txid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdTimeSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txid\",\"type\":\"uint256\"}],\"name\":\"getRecordByTxid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_txid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdTimeSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdminAddress\",\"type\":\"address\"}],\"name\":\"makeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minParentBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnToSender\",\"type\":\"uint256\"}],\"name\":\"openEnvelope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeFromFeeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdTimeSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frontendID\",\"type\":\"uint256\"}],\"name\":\"sendEnvelope\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minParentBal\",\"type\":\"uint256\"}],\"name\":\"setMinParentBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"setMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PARENT_CA\",\"type\":\"address\"}],\"name\":\"setPARENT_CA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_processID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sha1\",\"type\":\"uint256\"}],\"name\":\"signProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnerAddress\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTxns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "safesend", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3b976cbfa2d8afbb50ad5128aaacf9ab53740aa5afa90e38ca5ce2b4121515b4"}]}