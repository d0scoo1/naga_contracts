{"status": "1", "message": "OK", "result": [{"SourceCode": "// File contracts/interfaces/IERC20.sol\r\n\r\npragma solidity >=0.7.5;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity >=0.7.5;\r\n\r\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\r\n/// Taken from Solmate\r\nlibrary SafeERC20 {\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        (bool success, ) = to.call{value: amount}(new bytes(0));\r\n\r\n        require(success, \"ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITreasury.sol\r\n\r\npragma solidity >=0.7.5;\r\n\r\ninterface ITreasury {\r\n    function deposit(\r\n        uint256 _amount,\r\n        address _token,\r\n        uint256 _profit\r\n    ) external returns (uint256);\r\n\r\n    function withdraw(uint256 _amount, address _token) external;\r\n\r\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\r\n\r\n    function mint(address _recipient, uint256 _amount) external;\r\n\r\n    function manage(address _token, uint256 _amount) external;\r\n\r\n    function incurDebt(uint256 amount_, address token_) external;\r\n\r\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\r\n\r\n    function excessReserves() external view returns (uint256);\r\n\r\n    function baseSupply() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUniswapV2Router.sol\r\n\r\npragma solidity >=0.7.5;\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IOlympusAuthority.sol\r\n\r\npragma solidity >=0.7.5;\r\n\r\ninterface IOlympusAuthority {\r\n    /* ========== EVENTS ========== */\r\n\r\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n\r\n    event GovernorPulled(address indexed from, address indexed to);\r\n    event GuardianPulled(address indexed from, address indexed to);\r\n    event PolicyPulled(address indexed from, address indexed to);\r\n    event VaultPulled(address indexed from, address indexed to);\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function guardian() external view returns (address);\r\n\r\n    function policy() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/types/OlympusAccessControlled.sol\r\n\r\npragma solidity >=0.7.5;\r\n\r\nabstract contract OlympusAccessControlled {\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\r\n\r\n    string UNAUTHORIZED = \"UNAUTHORIZED\"; // save gas\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IOlympusAuthority public authority;\r\n\r\n    /* ========== Constructor ========== */\r\n\r\n    constructor(IOlympusAuthority _authority) {\r\n        authority = _authority;\r\n        emit AuthorityUpdated(_authority);\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyGuardian() {\r\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyVault() {\r\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    /* ========== GOV ONLY ========== */\r\n\r\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\r\n        authority = _newAuthority;\r\n        emit AuthorityUpdated(_newAuthority);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/migration/BalancerLiquidityMigrator.sol\r\n\r\n// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity ^0.8.10;\r\npragma abicoder v2;\r\n\r\n\r\n\r\n\r\ninterface IBalancerVault {\r\n    /**\r\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\r\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\r\n     * Pool shares.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\r\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\r\n     * these maximums.\r\n     *\r\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\r\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\r\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\r\n     * back to the caller (not the sender, which is important for relayers).\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\r\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\r\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\r\n     *\r\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\r\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\r\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\r\n     * directly to the Pool's contract, as is `recipient`.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n    function joinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        JoinPoolRequest memory request\r\n    ) external payable;\r\n\r\n    struct JoinPoolRequest {\r\n        address[] assets;\r\n        uint256[] maxAmountsIn;\r\n        bytes userData;\r\n        bool fromInternalBalance;\r\n    }\r\n}\r\n\r\ncontract BalancerLiquidityMigrator is OlympusAccessControlled {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Balancer Vault\r\n    IBalancerVault internal immutable balancerVault = IBalancerVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\r\n\r\n    // Olympus Treasury\r\n    ITreasury internal immutable treasury = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef);\r\n\r\n    // Sushiswap Router\r\n    IUniswapV2Router internal immutable router = IUniswapV2Router(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n\r\n    // Balancer 50OHM-25DAI-25WETH poolID\r\n    bytes32 internal immutable balancerPoolID = 0xc45d42f801105e861e86658648e3678ad7aa70f900010000000000000000011e;\r\n\r\n    address internal immutable OHMETHSLP = 0x69b81152c5A8d35A67B32A4D3772795d96CaE4da;\r\n    address internal immutable OHMDAISLP = 0x055475920a8c93CfFb64d039A8205F7AcC7722d3;\r\n    address internal immutable OHM = 0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5;\r\n    address internal immutable WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address internal immutable DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    constructor(IOlympusAuthority _authority) OlympusAccessControlled(_authority) {}\r\n\r\n    /**\r\n     * @notice Removes liquidity from OHM/ETH SLP and OHM/DAI SLP, then adds liquidty to\r\n     * 50OHM-25DAI-25WETH Balancer pool.\r\n     */\r\n    function moveLiquidity(\r\n        uint256 _amountOHMETH,\r\n        uint256 _amountOHMDAI,\r\n        uint256[2] memory _minOHMETH,\r\n        uint256[2] memory _minOHMDAI,\r\n        uint256 _deadline,\r\n        bytes memory _userData\r\n    ) external onlyGuardian {\r\n        // Manage LPs from treasury\r\n        treasury.manage(OHMETHSLP, _amountOHMETH);\r\n        treasury.manage(OHMDAISLP, _amountOHMDAI);\r\n\r\n        // Approve LPs to be spent by the Sushiswap router\r\n        IERC20(OHMETHSLP).approve(address(router), _amountOHMETH);\r\n        IERC20(OHMDAISLP).approve(address(router), _amountOHMDAI);\r\n\r\n        // Remove specified liquidity from OHM/ETH SLP\r\n        (uint256 amountETH, uint256 amountOHM1) = router.removeLiquidity(\r\n            WETH,\r\n            OHM,\r\n            _amountOHMETH,\r\n            _minOHMETH[0],\r\n            _minOHMETH[1],\r\n            address(this),\r\n            _deadline\r\n        );\r\n\r\n        // Remove specified liquidity from OHM/DAI SLP\r\n        (uint256 amountDAI, uint256 amountOHM2) = router.removeLiquidity(\r\n            DAI,\r\n            OHM,\r\n            _amountOHMDAI,\r\n            _minOHMDAI[0],\r\n            _minOHMDAI[1],\r\n            address(this),\r\n            _deadline\r\n        );\r\n\r\n        // Amount of OHM removed from liquidity\r\n        uint256 amountOHM = amountOHM1 + amountOHM2;\r\n\r\n        // Approve Balancer vault to spend tokens\r\n        IERC20(OHM).approve(address(balancerVault), amountOHM);\r\n        IERC20(WETH).approve(address(balancerVault), amountETH);\r\n        IERC20(DAI).approve(address(balancerVault), amountDAI);\r\n\r\n        // Array of tokens that liquidty will be added for\r\n        address[] memory tokens = new address[](3);\r\n        tokens[0] = OHM;\r\n        tokens[1] = DAI;\r\n        tokens[2] = WETH;\r\n\r\n        // Max amount of each token that liquidity will be added for\r\n        uint256[] memory amounts = new uint256[](3);\r\n        amounts[0] = amountOHM;\r\n        amounts[1] = amountDAI;\r\n        amounts[2] = amountETH;\r\n\r\n        // Struct that is passed in when adding to the pool\r\n        IBalancerVault.JoinPoolRequest memory poolRequest = IBalancerVault.JoinPoolRequest(\r\n            tokens,\r\n            amounts,\r\n            _userData,\r\n            false\r\n        );\r\n\r\n        // Add liquidity to the Balancer pool\r\n        balancerVault.joinPool(balancerPoolID, address(this), address(treasury), poolRequest);\r\n\r\n        // Send any leftover OHM back to guardian and WETH and DAI to treasury\r\n        IERC20(OHM).safeTransfer(authority.guardian(), IERC20(OHM).balanceOf(address(this)));\r\n        IERC20(WETH).safeTransfer(address(treasury), IERC20(WETH).balanceOf(address(this)));\r\n        IERC20(DAI).safeTransfer(address(treasury), IERC20(DAI).balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOHMETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOHMDAI\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_minOHMETH\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_minOHMDAI\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_userData\",\"type\":\"bytes\"}],\"name\":\"moveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BalancerLiquidityMigrator", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001c21f8ea7e39e2ba00bc12d2968d63f4acb38b7a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6410c9464de00168466d5853f2aab6ce760f83985b0b385cd6463ec6bbf9af70"}]}