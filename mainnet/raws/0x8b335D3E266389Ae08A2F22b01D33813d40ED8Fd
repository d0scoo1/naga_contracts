{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT AND GPL-3.0 AND AGPLv3\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/BaseStrategy.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\nstruct StrategyParams {\r\n    uint256 activation;\r\n    uint256 debtRatio;\r\n    uint256 minDebtPerHarvest;\r\n    uint256 maxDebtPerHarvest;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\ninterface VaultAPI {\r\n    function decimals() external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function vaultAdapter() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    /**\r\n     * View how much the Vault would increase this Strategy's borrow limit,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault expect this Strategy to return at the current\r\n     * block, based on its present performance (since its last report). Can be\r\n     * used to determine expectedReturn in your Strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /**\r\n     * This is the main contact point where the Strategy interacts with the\r\n     * Vault. It is critical that this call is handled as intended by the\r\n     * Strategy. Therefore, this function will be called by BaseStrategy to\r\n     * make sure the integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * This function should only be used in the scenario where the Strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits its position as fast as possible, such as a sudden change in\r\n     * market conditions leading to losses, or an imminent failure in an\r\n     * external dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    function governance() external view returns (address);\r\n}\r\n\r\n/**\r\n * This interface is here for the keeper bot to use.\r\n */\r\ninterface StrategyAPI {\r\n    function name() external view returns (string memory);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function want() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function isActive() external view returns (bool);\r\n\r\n    function estimatedTotalAssets() external view returns (uint256);\r\n\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    function tendTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function tend() external;\r\n\r\n    function harvestTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function harvest() external;\r\n\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n}\r\n\r\n/**\r\n * @title Yearn Base Strategy\r\n * @author orig. yearn.finance, modified by gro-protocol\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to interoperate\r\n *  closely with the Vault contract. This contract should be inherited and the\r\n *  abstract methods implemented to adapt the Strategy to the particular needs\r\n *  it has to create a return.\r\n *\r\n *  Of special interest is the relationship between `harvest()` and\r\n *  `vault.report()'. `harvest()` may be called simply because enough time has\r\n *  elapsed since the last report, and not because any funds need to be moved\r\n *  or positions adjusted. This is critical so that the Vault may maintain an\r\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\r\n *  `harvest()`, and `harvestTrigger()` for further details.\r\n */\r\nabstract contract BaseStrategy {\r\n    using SafeERC20 for IERC20;\r\n\r\n    VaultAPI public vault;\r\n    address public rewards;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n    event UpdatedKeeper(address newKeeper);\r\n    event UpdatedRewards(address rewards);\r\n    event UpdatedMinReportDelay(uint256 delay);\r\n    event UpdatedMaxReportDelay(uint256 delay);\r\n    event UpdatedProfitFactor(uint256 profitFactor);\r\n    event UpdatedDebtThreshold(uint256 debtThreshold);\r\n    event EmergencyExitEnabled();\r\n\r\n    // The minimum number of seconds between harvest calls. See\r\n    // `setMinReportDelay()` for more details.\r\n    uint256 public minReportDelay;\r\n\r\n    // The maximum number of seconds between harvest calls. See\r\n    // `setMaxReportDelay()` for more details.\r\n    uint256 public maxReportDelay;\r\n\r\n    // The minimum multiple that `callCost` must be above the credit/profit to\r\n    // be \"justifiable\". See `setProfitFactor()` for more details.\r\n    uint256 public profitFactor;\r\n\r\n    // Use this to adjust the threshold at which running a debt causes a\r\n    // harvest trigger. See `setDebtThreshold()` for more details.\r\n    uint256 public debtThreshold;\r\n\r\n    // See note on `setEmergencyExit()`.\r\n    bool public emergencyExit;\r\n\r\n    // modifiers\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == keeper || msg.sender == owner(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _vault) {\r\n        _initialize(_vault, msg.sender, msg.sender);\r\n    }\r\n\r\n    function name() external view virtual returns (string memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  Initializes the Strategy, this is called only once, when the\r\n     *  contract is deployed.\r\n     * @param _vault The address of the Vault responsible for this Strategy.\r\n     */\r\n    function _initialize(\r\n        address _vault,\r\n        address _rewards,\r\n        address _keeper\r\n    ) internal {\r\n        require(address(want) == address(0), \"Strategy already initialized\");\r\n\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.safeApprove(_vault, type(uint256).max); // Give Vault unlimited access (might save gas)\r\n        rewards = _rewards;\r\n        keeper = _keeper;\r\n\r\n        // initialize variables\r\n        minReportDelay = 0;\r\n        maxReportDelay = 86400;\r\n        profitFactor = 100;\r\n        debtThreshold = 0;\r\n    }\r\n\r\n    function setKeeper(address _keeper) external onlyOwner {\r\n        require(_keeper != address(0));\r\n        keeper = _keeper;\r\n        emit UpdatedKeeper(_keeper);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the minimum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     * @param _delay The minimum number of seconds to wait between harvests.\r\n     */\r\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\r\n        minReportDelay = _delay;\r\n        emit UpdatedMinReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the maximum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     * @param _delay The maximum number of seconds to wait between harvests.\r\n     */\r\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\r\n        maxReportDelay = _delay;\r\n        emit UpdatedMaxReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\r\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     * @param _profitFactor A ratio to multiply anticipated\r\n     * `harvest()` gas cost against.\r\n     */\r\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\r\n        profitFactor = _profitFactor;\r\n        emit UpdatedProfitFactor(_profitFactor);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Sets how far the Strategy can go into loss without a harvest and report\r\n     *  being required.\r\n     *\r\n     *  By default this is 0, meaning any losses would cause a harvest which\r\n     *  will subsequently report the loss to the Vault for tracking. (See\r\n     *  `harvestTrigger()` for more details.)\r\n     *\r\n     * @param _debtThreshold How big of a loss this Strategy may carry without\r\n     * being required to report to the Vault.\r\n     */\r\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\r\n        debtThreshold = _debtThreshold;\r\n        emit UpdatedDebtThreshold(_debtThreshold);\r\n    }\r\n\r\n    /**\r\n     * Resolve owner address from Vault contract, used to make assertions\r\n     * on protected functions in the Strategy.\r\n     */\r\n    function owner() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate estimate for the total amount of assets\r\n     *  (principle + return) that this Strategy is currently managing,\r\n     *  denominated in terms of `want` tokens.\r\n     *\r\n     *  This total should be \"realizable\" e.g. the total value that could\r\n     *  *actually* be obtained from this Strategy if it were to divest its\r\n     *  entire position based on current on-chain conditions.\r\n     * @dev\r\n     *  Care must be taken in using this function, since it relies on external\r\n     *  systems, which could be manipulated by the attacker to give an inflated\r\n     *  (or reduced) value produced by this function, based on current on-chain\r\n     *  conditions (e.g. this function is possible to influence through\r\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\r\n     *  mechanisms).\r\n     *\r\n     *  It is up to owner to use this function to correctly order this\r\n     *  Strategy relative to its peers in the withdrawal queue to minimize\r\n     *  losses for the Vault based on sudden withdrawals. This value should be\r\n     *  higher than the total debt of the Strategy and higher than its expected\r\n     *  value to be \"safe\".\r\n     * @return The estimated total assets in this Strategy.\r\n     */\r\n    function estimatedTotalAssets() public view virtual returns (uint256);\r\n\r\n    /*\r\n     * @notice\r\n     *  Provide an indication of whether this strategy is currently \"active\"\r\n     *  in that it is managing an active position, or will manage a position in\r\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\r\n     *  events can be tracked externally by indexing agents.\r\n     * @return True if the strategy is actively managing a position.\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\r\n    }\r\n\r\n    /**\r\n     * Perform any Strategy unwinding or other calls necessary to capture the\r\n     * \"free return\" this Strategy has generated since the last time its core\r\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and\r\n     * should be optimized to minimize losses as much as possible.\r\n     *\r\n     * This method returns any realized profits and/or realized losses\r\n     * incurred, and should return the total amounts of profits/losses/debt\r\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\r\n     * `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\r\n     *\r\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\r\n     * debt limit, otherwise its value will be how far past the debt limit\r\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\r\n     *\r\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\r\n     *       It is okay for it to be less than `_debtOutstanding`, as that\r\n     *       should only used as a guide for how much is left to pay back.\r\n     *       Payments should be made to minimize loss from slippage, debt,\r\n     *       withdrawal fees, etc.\r\n     *\r\n     * See `vault.debtOutstanding()`.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /**\r\n     * Perform any adjustments to the core position(s) of this Strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\r\n     * was made is available for reinvestment. Also note that this number\r\n     * could be 0, and you should handle that scenario accordingly.\r\n     *\r\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\r\n\r\n    /**\r\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\r\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\r\n     * This function should return the amount of `want` tokens made available by the\r\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\r\n     * difference is due to a realized loss, or if there is some other sitution at play\r\n     * (e.g. locked funds) where the amount made available is less than what is needed.\r\n     * This function is used during emergency exit instead of `prepareReturn()` to\r\n     * liquidate all of the Strategy's positions back to the Vault.\r\n     *\r\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded)\r\n        internal\r\n        virtual\r\n        returns (uint256 _liquidatedAmount, uint256 _loss);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `tend()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `tend()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `tend()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be\r\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCost` must be priced in terms of `want`.\r\n     *\r\n     *  This call and `harvestTrigger()` should never return `true` at the same\r\n     *  time.\r\n     * @param callCost The keeper's estimated cast cost to call `tend()`.\r\n     * @return `true` if `tend()` should be called, `false` otherwise.\r\n     */\r\n    function tendTrigger(uint256 callCost) public view virtual returns (bool);\r\n\r\n    /**\r\n     * @notice\r\n     *  Adjust the Strategy's position. The purpose of tending isn't to\r\n     *  realize gains, but to maximize yield by reinvesting any returns.\r\n     *\r\n     *  See comments on `adjustPosition()`.\r\n     *\r\n     */\r\n    function tend() external onlyAuthorized {\r\n        // Don't take profits with this call, but adjust for better gains\r\n        adjustPosition(vault.debtOutstanding());\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `harvest()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `harvest()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `harvest()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be \"at a\r\n     *  loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCost` must be priced in terms of `want`.\r\n     *\r\n     *  This call and `tendTrigger` should never return `true` at the\r\n     *  same time.\r\n     *\r\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold`\r\n     *  -controlled parameters that will influence whether this call\r\n     *  returns `true` or not. These parameters will be used in conjunction\r\n     *  with the parameters reported to the Vault (see `params`) to determine\r\n     *  if calling `harvest()` is merited.\r\n     *\r\n     *  It is expected that an external system will check `harvestTrigger()`.\r\n     *  This could be a script run off a desktop or cloud bot (e.g.\r\n     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\r\n     *  or via an integration with the Keep3r network (e.g.\r\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\r\n     * @param callCost The keeper's estimated cast cost to call `harvest()`.\r\n     * @return `true` if `harvest()` should be called, `false` otherwise.\r\n     */\r\n    function harvestTrigger(uint256 callCost) public view virtual returns (bool) {\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if Strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should not trigger if we haven't waited long enough since previous harvest\r\n        if (block.timestamp - params.lastReport < minReportDelay) return false;\r\n\r\n        // Should trigger if hasn't been called in a while\r\n        if (block.timestamp - params.lastReport >= maxReportDelay) return true;\r\n\r\n        // If some amount is owed, pay it back\r\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\r\n        //       changes to the value from triggering a harvest directly through user\r\n        //       behavior. This should ensure reasonable resistance to manipulation\r\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > debtThreshold) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n        // Trigger if we have a loss to report\r\n        if (total + debtThreshold < params.totalDebt) return true;\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total - params.totalDebt; // We've earned a profit!\r\n\r\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\r\n        // is <N% of value moved)\r\n        uint256 credit = vault.creditAvailable();\r\n        return (profitFactor * callCost < credit + profit);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\r\n     *  the Strategy's position.\r\n     *\r\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\r\n     *  the Strategy's position.\r\n     *\r\n     * @dev\r\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\r\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\r\n     *  to take in profits, to borrow newly available funds from the Vault, or\r\n     *  otherwise adjust its position. In other cases `harvest()` must be\r\n     *  called to report to the Vault on the Strategy's position, especially if\r\n     *  any losses have occurred.\r\n     */\r\n    function harvest() external {\r\n        require(msg.sender == vault.vaultAdapter(), \"harvest: Call from vault\");\r\n        uint256 profit = 0;\r\n        uint256 loss = 0;\r\n        uint256 debtOutstanding = vault.debtOutstanding();\r\n        uint256 debtPayment = 0;\r\n        if (emergencyExit) {\r\n            // Free up as much capital as possible\r\n            uint256 totalAssets = estimatedTotalAssets();\r\n            // NOTE: use the larger of total assets or debt outstanding to book losses properly\r\n            (debtPayment, loss) = liquidatePosition(totalAssets > debtOutstanding ? totalAssets : debtOutstanding);\r\n            // NOTE: take up any remainder here as profit\r\n            if (debtPayment > debtOutstanding) {\r\n                profit = debtPayment - debtOutstanding;\r\n                debtPayment = debtOutstanding;\r\n            }\r\n        } else {\r\n            // Free up returns for Vault to pull\r\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\r\n        }\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\r\n        // which is the amount it has earned since the last time it reported to\r\n        // the Vault.\r\n        debtOutstanding = vault.report(profit, loss, debtPayment);\r\n\r\n        // Check if free returns are left, and re-invest them\r\n        adjustPosition(debtOutstanding);\r\n\r\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Withdraws `_amountNeeded` to `vault`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @param _amountNeeded How much `want` to withdraw.\r\n     * @return _loss Any realized losses\r\n     */\r\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\r\n        uint256 amountFreed;\r\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\r\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\r\n        want.safeTransfer(msg.sender, amountFreed);\r\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\r\n    }\r\n\r\n    /**\r\n     * Do anything necessary to prepare this Strategy for migration, such as\r\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\r\n     * value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    /**\r\n     * @notice\r\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\r\n     *\r\n     *  This may only be called by owner or the Vault.\r\n     * @dev\r\n     *  The new Strategy's Vault must be the same as this Strategy's Vault.\r\n     * @param _newStrategy The Strategy to migrate to.\r\n     */\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault));\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Activates emergency exit. Once activated, the Strategy will exit its\r\n     *  position upon the next harvest, depositing all funds into the Vault as\r\n     *  quickly as is reasonable given on-chain conditions.\r\n     *\r\n     * @dev\r\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\r\n     */\r\n    function setEmergencyExit() external onlyAuthorized {\r\n        emergencyExit = true;\r\n        vault.revokeStrategy();\r\n\r\n        emit EmergencyExitEnabled();\r\n    }\r\n\r\n    /**\r\n     * Override this to add all tokens/tokenized positions this contract\r\n     * manages on a *persistent* basis (e.g. not just for swapping back to\r\n     * want ephemerally).\r\n     *\r\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\r\n     *\r\n     * Example:\r\n     *\r\n     *    function protectedTokens() internal override view returns (address[] memory) {\r\n     *      address[] memory protected = new address[](3);\r\n     *      protected[0] = tokenA;\r\n     *      protected[1] = tokenB;\r\n     *      protected[2] = tokenC;\r\n     *      return protected;\r\n     *    }\r\n     */\r\n    function protectedTokens() internal view virtual returns (address[] memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  Removes tokens from this Strategy that are not the type of tokens\r\n     *  managed by this Strategy. This may be used in case of accidentally\r\n     *  sending the wrong kind of token to this Strategy.\r\n     *\r\n     *  Tokens will be sent to `owner()`.\r\n     *\r\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\r\n     *  that are protected by this Strategy.\r\n     *\r\n     *  This may only be called by owner.\r\n     * @dev\r\n     *  Implement `protectedTokens()` to specify any additional tokens that\r\n     *  should be protected from sweeping in addition to `want`.\r\n     * @param _token The token to transfer out of this vault.\r\n     */\r\n    function sweep(address _token) external onlyOwner {\r\n        require(_token != address(want), \"!want\");\r\n        require(_token != address(vault), \"!shares\");\r\n\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).safeTransfer(owner(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20Detailed.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20Detailed {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/interfaces/ICurve.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface ICurve3Pool {\r\n    function coins(uint256 i) external view returns (address);\r\n\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function get_dy(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\r\n\r\n    function calc_token_amount(uint256[3] calldata inAmounts, bool deposit) external view returns (uint256);\r\n\r\n    function balances(uint256 i) external view returns (uint256);\r\n}\r\n\r\ninterface ICurve3Deposit {\r\n    function exchange(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external;\r\n\r\n    function add_liquidity(uint256[3] calldata uamounts, uint256 min_mint_amount) external;\r\n\r\n    function remove_liquidity(uint256 amount, uint256[3] calldata min_uamounts) external;\r\n\r\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount) external;\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_uamount\r\n    ) external;\r\n\r\n    function get_dy(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n}\r\n\r\ninterface ICurveMetaPool {\r\n    function coins(uint256 i) external view returns (address);\r\n\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function get_dy_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\r\n\r\n    function calc_token_amount(uint256[2] calldata inAmounts, bool deposit) external view returns (uint256);\r\n\r\n    function exchange(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external;\r\n\r\n    function add_liquidity(uint256[2] calldata uamounts, uint256 min_mint_amount) external;\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_uamount\r\n    ) external;\r\n}\r\n\r\ninterface ICurveZap {\r\n    function add_liquidity(uint256[4] calldata uamounts, uint256 min_mint_amount) external;\r\n\r\n    function remove_liquidity(uint256 amount, uint256[4] calldata min_uamounts) external;\r\n\r\n    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount) external;\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_uamount\r\n    ) external;\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\r\n\r\n    function calc_token_amount(uint256[4] calldata inAmounts, bool deposit) external view returns (uint256);\r\n\r\n    function pool() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/UniSwap/IUni.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IUni {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n// File: contracts/strategies/StableConvexXPool.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// Convex booster interface\r\ninterface Booster {\r\n    struct PoolInfo {\r\n        address lptoken;\r\n        address token;\r\n        address gauge;\r\n        address crvRewards;\r\n        address stash;\r\n        bool shutdown;\r\n    }\r\n\r\n    function poolInfo(uint256)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            address,\r\n            address,\r\n            address,\r\n            address,\r\n            bool\r\n        );\r\n\r\n    // deposit lp tokens and stake\r\n    function deposit(\r\n        uint256 _pid,\r\n        uint256 _amount,\r\n        bool _stake\r\n    ) external returns (bool);\r\n}\r\n\r\n/// Convex rewards interface\r\ninterface Rewards {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\r\n\r\n    function withdrawAllAndUnwrap(bool claim) external;\r\n\r\n    function getReward() external returns (bool);\r\n}\r\n\r\n/** @title StableConvexXPool\r\n*   @notice Convex strategy based of yearns convex contract that allows usage of one of the 3 pool\r\n*       stables as want, rather than a metapool lp token. This strategy can swap between meta pool\r\n*       and convex strategies to opimize yield/risk, and routes all assets through the following flow:\r\n*           3crv => metaLp => convex.\r\n*/\r\ncontract StableConvexXPool is BaseStrategy {\r\n    using SafeERC20 for IERC20;\r\n    /*///////////////////////////////////////////////////////////////\r\n                            CONTRACT VARIABLES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    // Contract addresses\r\n    address public constant BOOSTER = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\r\n\r\n    address public constant CVX = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\r\n    address public constant CRV = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address public constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address public constant USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    address public constant USDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n    address public constant CRV_3POOL = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\r\n    IERC20 public constant CRV_3POOL_TOKEN = IERC20(address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490));\r\n\r\n    // Dexes for selling reward tokens\r\n    address public constant UNISWAP = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public constant SUSHISWAP = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n\r\n    // meta pool token layout: [minor stable, 3Crv]\r\n    int128 public constant CRV3_INDEX = 1;\r\n    uint256 public constant CRV_METAPOOL_LEN = 2;\r\n    // 3pool token layout: [dai, usdc, usdt]\r\n    uint256 public constant CRV_3POOL_LEN = 3;\r\n\r\n    uint256 public constant TO_ETH = 0;\r\n    uint256 public constant TO_WANT = 1;\r\n\r\n    // Want tokens index in 3 pool\r\n    int128 public immutable WANT_INDEX;\r\n\r\n    address public curve; // meta pool\r\n    IERC20 public lpToken; // meta pool lp token\r\n    uint256 public pId; // convex lp token pid\r\n    address public rewardContract; // convex reward contract for lp token\r\n\r\n    uint256 public newPId;\r\n    address public newCurve;\r\n    IERC20 public newLPToken;\r\n    address public newRewardContract;\r\n\r\n    address[] public dex;\r\n    uint256 constant totalCliffs = 1000;\r\n    uint256 constant maxSupply = 1e8 * 1e18;\r\n    uint256 constant reductionPerCliff = 1e5 * 1e18;\r\n\r\n    // when withdrawing we try to withdraw an additional x BP to cover withdrawal fees etc\r\n    uint256 public slippageRecover = 4; \r\n    uint256 public slippage = 10; // how much slippage to we accept\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n    event LogSetNewPool(uint256 indexed newPId, address newLPToken, address newRewardContract, address newCurve);\r\n    event LogSwitchDex(uint256 indexed id, address newDex);\r\n    event LogSetNewDex(uint256 indexed id, address newDex);\r\n    event LogChangePool(uint256 indexed newPId, address newLPToken, address newRewardContract, address newCurve);\r\n    event LogSetNewSlippageRecover(uint256 slippage);\r\n    event LogSetNewSlippage(uint256 slippage);\r\n\r\n    constructor(address _vault, int128 wantIndex) BaseStrategy(_vault) {\r\n        profitFactor = 1000;\r\n        uint8 decimals = IERC20Detailed(address(want)).decimals();\r\n        debtThreshold = 1_00_000 * (uint256(10)**decimals);\r\n        dex = new address[](2);\r\n        _switchDex(0, UNISWAP);\r\n        _switchDex(1, SUSHISWAP);\r\n\r\n        require(\r\n            (address(want) == DAI && wantIndex == 0) ||\r\n                (address(want) == USDC && wantIndex == 1) ||\r\n                (address(want) == USDT && wantIndex == 2),\r\n            \"want and wantIndex does not match\"\r\n        );\r\n        WANT_INDEX = wantIndex;\r\n\r\n        want.safeApprove(CRV_3POOL, type(uint256).max);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            SETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /** @notice Set a new curve meta pool and convex target for the strategy\r\n    *   @dev The migration will take place during the next harvest cycle (see prepareReturn)\r\n    */\r\n    function setNewPool(uint256 _newPId, address _newCurve) external onlyAuthorized {\r\n        require(_newPId != pId, \"setMetaPool: same id\");\r\n        (address lp, , , address reward, , bool shutdown) = Booster(BOOSTER).poolInfo(_newPId);\r\n        require(!shutdown, \"setMetaPool: pool is shutdown\");\r\n        IERC20 _newLPToken = IERC20(lp);\r\n        newLPToken = _newLPToken;\r\n        newRewardContract = reward;\r\n        newPId = _newPId;\r\n        newCurve = _newCurve;\r\n        if (CRV_3POOL_TOKEN.allowance(address(this), newCurve) == 0) {\r\n            CRV_3POOL_TOKEN.safeApprove(newCurve, type(uint256).max);\r\n        }\r\n        if (_newLPToken.allowance(address(this), BOOSTER) == 0) {\r\n            _newLPToken.safeApprove(BOOSTER, type(uint256).max);\r\n        }\r\n\r\n        emit LogSetNewPool(_newPId, lp, reward, _newCurve);\r\n    }\r\n\r\n    /** @notice Set how much to lp tokens to withdraw in excess \r\n    *   @dev curve estimates for calc token amounts are slightly off, correct them by x BP\r\n    */\r\n    function setSlippageRecover(uint256 _slippage) external onlyAuthorized {\r\n        slippageRecover = _slippage;\r\n        emit LogSetNewSlippageRecover(_slippage);\r\n    }\r\n\r\n    /** @notice Amount of slippage we accept\r\n    *   @dev Since slippage isnt usefull when calculated on chain against an amm, we use\r\n    *       a straight forward heuristic - assume stable coin price of 1 usd and apply\r\n    *       slippage against virtual price of lp token\r\n    */\r\n    function setSlippage(uint256 _slippage) external onlyAuthorized {\r\n        slippage = _slippage;\r\n        emit LogSetNewSlippage(_slippage);\r\n    }\r\n\r\n    /** @notice Swap which dex is traded against\r\n    */\r\n    function switchDex(uint256 id, address newDex) external onlyAuthorized {\r\n        _switchDex(id, newDex);\r\n        emit LogSetNewDex(id, newDex);\r\n    }\r\n\r\n    /** @notice Internal switch dex logic\r\n    */\r\n    function _switchDex(uint256 id, address newDex) private {\r\n        dex[id] = newDex;\r\n\r\n        IERC20 token;\r\n        if (id == 0) {\r\n            token = IERC20(CRV);\r\n        } else {\r\n            token = IERC20(CVX);\r\n        }\r\n\r\n        if (token.allowance(address(this), newDex) == 0) {\r\n            token.approve(newDex, type(uint256).max);\r\n        }\r\n        emit LogSwitchDex(id, newDex);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            GETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return \"StrategyConvexXPool\";\r\n    }\r\n\r\n    function estimatedTotalAssets() public view override returns (uint256 estimated) {\r\n        estimated = _estimatedTotalAssets(true);\r\n    }\r\n\r\n    /** @notice Get total estimated assets in strategy\r\n    *   @dev If no curve/convex target is set return balance of strategy\r\n    *   @param includeReward Include convex rewards in total assets\r\n    */\r\n    function _estimatedTotalAssets(bool includeReward) private view returns (uint256 estimated) {\r\n        if (rewardContract != address(0)) {\r\n            uint256 lpAmount = Rewards(rewardContract).balanceOf(address(this));\r\n            if (lpAmount > 0) {\r\n                uint256 crv3Amount = ICurveMetaPool(curve).calc_withdraw_one_coin(lpAmount, CRV3_INDEX);\r\n                estimated = ICurve3Pool(CRV_3POOL).calc_withdraw_one_coin(crv3Amount, WANT_INDEX);\r\n            }\r\n            if (includeReward) {\r\n                estimated += _claimableBasic(TO_WANT);\r\n            }\r\n        }\r\n        estimated += want.balanceOf(address(this));\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                        EMERGENCY                \r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n\r\n    /** @notice Forcefully withdraw and sell rewards from convex and curve pools\r\n    *   @dev Should only be used post emergency state being triggered to ensure all assets are withdrawn\r\n    */\r\n    function forceWithdraw() external onlyAuthorized {\r\n        _withdrawAll();\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                        CURVE/CONVEX\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /** @notice Interal change pool Logic\r\n    */\r\n    function _changePool() private {\r\n        uint256 _newPId = newPId;\r\n        address _newCurve = newCurve;\r\n        IERC20 _newLPToken = newLPToken;\r\n        address _newReward = newRewardContract;\r\n\r\n        pId = _newPId;\r\n        curve = _newCurve;\r\n        lpToken = _newLPToken;\r\n        rewardContract = _newReward;\r\n\r\n        newCurve = address(0);\r\n        newPId = 0;\r\n        newLPToken = IERC20(address(0));\r\n        newRewardContract = address(0);\r\n\r\n        emit LogChangePool(_newPId, address(_newLPToken), _newReward, _newCurve);\r\n    }\r\n\r\n    /** @notice Remove all assets into want and sell of rewards\r\n    */\r\n    function _withdrawAll() private {\r\n        Rewards(rewardContract).withdrawAllAndUnwrap(true);\r\n        _sellBasic();\r\n\r\n        // remove liquidity from metapool\r\n        uint256 lpAmount = lpToken.balanceOf(address(this));\r\n        ICurveMetaPool _meta = ICurveMetaPool(curve);\r\n        uint256 vp = _meta.get_virtual_price();\r\n        _meta.remove_liquidity_one_coin(lpAmount, CRV3_INDEX, 0);\r\n\r\n        // calc min amounts\r\n        uint256 minAmount = (lpAmount * vp) / 1E18;\r\n        minAmount =\r\n            (minAmount - (minAmount * slippage) / 10000) /\r\n            (1E18 / 10**IERC20Detailed(address(want)).decimals());\r\n\r\n        // remove liquidity from 3pool\r\n        lpAmount = CRV_3POOL_TOKEN.balanceOf(address(this));\r\n        ICurve3Deposit(CRV_3POOL).remove_liquidity_one_coin(lpAmount, WANT_INDEX, minAmount);\r\n    }\r\n\r\n    /** @notice Calculate meta pool token value of want\r\n    */\r\n    function wantToLp(uint256 amount) private view returns (uint256 lpAmount) {\r\n        uint256[CRV_3POOL_LEN] memory amountsCRV3;\r\n        amountsCRV3[uint256(int256(WANT_INDEX))] = amount;\r\n\r\n        uint256 crv3Amount = ICurve3Pool(CRV_3POOL).calc_token_amount(amountsCRV3, false);\r\n\r\n        uint256[CRV_METAPOOL_LEN] memory amountsMP;\r\n        amountsMP[uint256(int256(CRV3_INDEX))] = crv3Amount;\r\n\r\n        lpAmount = ICurveMetaPool(curve).calc_token_amount(amountsMP, false);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            DEX\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /** @notice Sell reward tokens (crv + cvx)\r\n    */\r\n    function _sellBasic() private {\r\n        uint256 crv = IERC20(CRV).balanceOf(address(this));\r\n        if (crv > 0) {\r\n            IUni(dex[0]).swapExactTokensForTokens(\r\n                crv,\r\n                uint256(0),\r\n                _getPath(CRV, TO_WANT),\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n        uint256 cvx = IERC20(CVX).balanceOf(address(this));\r\n        if (cvx > 0) {\r\n            IUni(dex[1]).swapExactTokensForTokens(\r\n                cvx,\r\n                uint256(0),\r\n                _getPath(CVX, TO_WANT),\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    /** @notice Calculate values of rewards tokens (crv + cvx)\r\n    */\r\n    function _claimableBasic(uint256 toIndex) private view returns (uint256) {\r\n        uint256 crv = Rewards(rewardContract).earned(address(this));\r\n\r\n        // calculations pulled directly from CVX's contract for minting CVX per CRV claimed\r\n        uint256 supply = IERC20(CVX).totalSupply();\r\n        uint256 cvx;\r\n\r\n        uint256 cliff = supply / reductionPerCliff;\r\n        // mint if below total cliffs\r\n        if (cliff < totalCliffs) {\r\n            // for reduction% take inverse of current cliff\r\n            uint256 reduction = totalCliffs - cliff;\r\n            // reduce\r\n            cvx = (crv * reduction) / totalCliffs;\r\n\r\n            // supply cap check\r\n            uint256 amtTillMax = maxSupply - supply;\r\n            if (cvx > amtTillMax) {\r\n                cvx = amtTillMax;\r\n            }\r\n        }\r\n\r\n        uint256 crvValue;\r\n        if (crv > 0) {\r\n            uint256[] memory crvSwap = IUni(dex[0]).getAmountsOut(crv, _getPath(CRV, toIndex));\r\n            crvValue = crvSwap[crvSwap.length - 1];\r\n        }\r\n\r\n        uint256 cvxValue;\r\n        if (cvx > 0) {\r\n            uint256[] memory cvxSwap = IUni(dex[1]).getAmountsOut(cvx, _getPath(CVX, toIndex));\r\n            cvxValue = cvxSwap[cvxSwap.length - 1];\r\n        }\r\n\r\n        return crvValue + cvxValue;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            CORE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /** @notice Add available assets to the curve/convex pool\r\n    *   @param _debtOutstanding any debt that is owed to the vault,\r\n    *       should be 0 at this point\r\n    */\r\n    function adjustPosition(uint256 _debtOutstanding) internal override {\r\n        if (emergencyExit) return;\r\n        uint256 wantBal = want.balanceOf(address(this));\r\n        if (wantBal > 0) {\r\n            uint256[CRV_3POOL_LEN] memory amountsCRV3;\r\n            amountsCRV3[uint256(int256(WANT_INDEX))] = wantBal;\r\n\r\n            ICurve3Deposit(CRV_3POOL).add_liquidity(amountsCRV3, 0);\r\n\r\n            uint256 crv3Bal = CRV_3POOL_TOKEN.balanceOf(address(this));\r\n            if (crv3Bal > 0) {\r\n                uint256[CRV_METAPOOL_LEN] memory amountsMP;\r\n                amountsMP[uint256(int256(CRV3_INDEX))] = crv3Bal;\r\n                ICurveMetaPool _meta = ICurveMetaPool(curve);\r\n\r\n                uint256 vp = _meta.get_virtual_price();\r\n                uint256 minAmount = (wantBal * (1E36 / 10**IERC20Detailed(address(want)).decimals())) / vp;\r\n\r\n                minAmount = minAmount - (minAmount * slippage) / 10000;\r\n                _meta.add_liquidity(amountsMP, minAmount);\r\n\r\n                uint256 lpBal = lpToken.balanceOf(address(this));\r\n                if (lpBal > 0) {\r\n                    Booster(BOOSTER).deposit(pId, lpBal, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @notice Atempt to remove assets from the curve/convex pool,\r\n    *       reports a loss is we withdraw less than the required amount\r\n    *   @param _amountNeeded Amount to remove\r\n    */\r\n    function liquidatePosition(uint256 _amountNeeded)\r\n        internal\r\n        override\r\n        returns (uint256 _liquidatedAmount, uint256 _loss)\r\n    {\r\n        uint256 _wantBal = want.balanceOf(address(this));\r\n        if (_wantBal < _amountNeeded) {\r\n            _liquidatedAmount = _withdrawSome(_amountNeeded - _wantBal);\r\n            _liquidatedAmount = _liquidatedAmount + _wantBal;\r\n            _liquidatedAmount = Math.min(_liquidatedAmount, _amountNeeded);\r\n            if (_liquidatedAmount < _amountNeeded) {\r\n                _loss = _amountNeeded - _liquidatedAmount;\r\n            }\r\n        } else {\r\n            _liquidatedAmount = _amountNeeded;\r\n        }\r\n    }\r\n\r\n    /** @notice Withdraw assets from curve/convex pool\r\n    *   @param _amount Amount to withdraw\r\n    */\r\n    function _withdrawSome(uint256 _amount) private returns (uint256) {\r\n        uint256 lpAmount = wantToLp(_amount);\r\n        lpAmount = lpAmount + (lpAmount * slippageRecover) / 10000;\r\n        uint256 poolBal = Rewards(rewardContract).balanceOf(address(this));\r\n\r\n        if (poolBal < lpAmount) {\r\n            lpAmount = poolBal;\r\n        }\r\n\r\n        if (poolBal == 0) return 0;\r\n\r\n        uint256 before = want.balanceOf(address(this));\r\n\r\n        // withdraw from convex\r\n        Rewards(rewardContract).withdrawAndUnwrap(lpAmount, false);\r\n\r\n        // remove liquidity from metapool\r\n        lpAmount = lpToken.balanceOf(address(this));\r\n        ICurveMetaPool _meta = ICurveMetaPool(curve);\r\n        uint256 vp = _meta.get_virtual_price();\r\n        _meta.remove_liquidity_one_coin(lpAmount, CRV3_INDEX, 0);\r\n\r\n        // calc min amounts using the metaLp token as the basis\r\n        uint256 minAmount = (lpAmount * vp) / 1E18;\r\n        minAmount =\r\n            (minAmount - (minAmount * slippage) / 10000) /\r\n            (1E18 / 10**IERC20Detailed(address(want)).decimals());\r\n\r\n        // remove liquidity from 3pool\r\n        lpAmount = CRV_3POOL_TOKEN.balanceOf(address(this));\r\n\r\n        ICurve3Deposit(CRV_3POOL).remove_liquidity_one_coin(lpAmount, WANT_INDEX, minAmount);\r\n\r\n        return want.balanceOf(address(this)) - before;\r\n    }\r\n\r\n    /** @notice Do strategy accounting to determine potential gains/losses and\r\n    *       pay back any outstanding debt to the vault.\r\n    *   @dev If a new curve/convex pair has been set, the the strategy will remove\r\n    *       all assets from the old pair, sell of all rewards and prepare the migration\r\n    *       to the new pair in this function.\r\n    *   @param _debtOutstanding Amount of debt owed to the vault\r\n    */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        )\r\n    {\r\n        uint256 total;\r\n        uint256 wantBal;\r\n        uint256 beforeTotal;\r\n        uint256 debt = vault.strategies(address(this)).totalDebt;\r\n        if (curve == address(0)) {\r\n            // invest into strategy first time\r\n            _changePool();\r\n            return (0, 0, 0);\r\n        } else if (newCurve != address(0)) {\r\n            // swap the pool\r\n            beforeTotal = _estimatedTotalAssets(true);\r\n            _withdrawAll();\r\n            _changePool();\r\n            wantBal = want.balanceOf(address(this));\r\n            total = wantBal;\r\n\r\n            if (beforeTotal < debt) {\r\n                total = Math.max(beforeTotal, total);\r\n            } else if (beforeTotal > debt && total < debt) {\r\n                total = debt;\r\n            }\r\n        } else {\r\n            Rewards(rewardContract).getReward();\r\n            _sellBasic();\r\n            total = _estimatedTotalAssets(false);\r\n            wantBal = want.balanceOf(address(this));\r\n        }\r\n        _debtPayment = _debtOutstanding;\r\n        if (total > debt) {\r\n            _profit = total - debt;\r\n            uint256 amountToFree = _profit + _debtPayment;\r\n            if (amountToFree > 0 && wantBal < amountToFree) {\r\n                _withdrawSome(amountToFree - wantBal);\r\n                total = _estimatedTotalAssets(false);\r\n                wantBal = want.balanceOf(address(this));\r\n                if (total <= debt) {\r\n                    _profit = 0;\r\n                    _loss = debt - total;\r\n                } else {\r\n                    _profit = total - debt;\r\n                }\r\n                amountToFree = _profit + _debtPayment;\r\n                if (wantBal < amountToFree) {\r\n                    if (_profit > wantBal) {\r\n                        _profit = wantBal;\r\n                        _debtPayment = 0;\r\n                    } else {\r\n                        _debtPayment = Math.min(wantBal - _profit, _debtPayment);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            _loss = debt - total;\r\n            uint256 amountToFree = _debtPayment;\r\n            if (amountToFree > 0 && wantBal < amountToFree) {\r\n                _withdrawSome(amountToFree - wantBal);\r\n                wantBal = want.balanceOf(address(this));\r\n                if (wantBal < amountToFree) {\r\n                    _debtPayment = wantBal;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function tendTrigger(uint256 callCost) public pure override returns (bool) {\r\n        callCost;\r\n        return false;\r\n    }\r\n\r\n    /** @notice Check if strategy need to be harvested\r\n    *   @param callCost Estimated cost of calling harvest in ETH\r\n    */\r\n    function harvestTrigger(uint256 callCost) public view override returns (bool) {\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        if (params.activation == 0) return false;\r\n\r\n        if (block.timestamp - params.lastReport < minReportDelay) return false;\r\n\r\n        if (block.timestamp - params.lastReport >= maxReportDelay) return true;\r\n\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > debtThreshold) return true;\r\n\r\n        uint256 total = estimatedTotalAssets();\r\n        if (total + debtThreshold < params.totalDebt) return true;\r\n\r\n        uint256 profit;\r\n        if (total > params.totalDebt) {\r\n            profit = total - params.totalDebt;\r\n        }\r\n\r\n        return (profitFactor * callCost < _wantToETH(profit));\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    UTILITY\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /** @notice Get path for uni style pool swap\r\n    */\r\n    function _getPath(address from, uint256 toIndex) private view returns (address[] memory path) {\r\n        if (toIndex == TO_ETH) {\r\n            path = new address[](2);\r\n            path[0] = from;\r\n            path[1] = WETH;\r\n        }\r\n\r\n        if (toIndex == TO_WANT) {\r\n            path = new address[](3);\r\n            path[0] = from;\r\n            path[1] = WETH;\r\n            path[2] = address(want);\r\n        }\r\n    }\r\n\r\n    function prepareMigration(address _newStrategy) internal override {\r\n        _newStrategy;\r\n        _withdrawAll();\r\n    }\r\n\r\n    function protectedTokens() internal pure override returns (address[] memory) {\r\n        address[] memory protected = new address[](2);\r\n        protected[0] = CRV;\r\n        protected[1] = CVX;\r\n        return protected;\r\n    }\r\n\r\n    function _wantToETH(uint256 wantAmount) private view returns (uint256) {\r\n        if (wantAmount > 0) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(want);\r\n            path[1] = WETH;\r\n            uint256[] memory amounts = IUni(dex[0]).getAmountsOut(wantAmount, path);\r\n            return amounts[1];\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"wantIndex\",\"type\":\"int128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newPId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLPToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCurve\",\"type\":\"address\"}],\"name\":\"LogChangePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDex\",\"type\":\"address\"}],\"name\":\"LogSetNewDex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newPId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLPToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCurve\",\"type\":\"address\"}],\"name\":\"LogSetNewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"LogSetNewSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"LogSetNewSlippageRecover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDex\",\"type\":\"address\"}],\"name\":\"LogSwitchDex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedProfitFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOSTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV3_INDEX\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_3POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_3POOL_LEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_3POOL_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_METAPOOL_LEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSHISWAP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TO_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TO_WANT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WANT_INDEX\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newCurve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newPId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newRewardContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMaxReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newCurve\",\"type\":\"address\"}],\"name\":\"setNewPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippageRecover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageRecover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newDex\",\"type\":\"address\"}],\"name\":\"switchDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StableConvexXPool", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000003b298d27b0426758cb70c4add6523927bd7cc8e0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8ea9fedf13d33b2dbd68cf166bbc14a21a1bfa63fde33af99a910c0c25349b93"}]}