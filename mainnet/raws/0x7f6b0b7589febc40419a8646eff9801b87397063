{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File contracts/MVM/iMVM_DiscountOracle.sol\r\n\r\n// SPDX-License-Identifier : MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface iMVM_DiscountOracle{\r\n\r\n    function setDiscount(\r\n        uint256 _discount\r\n    ) external;\r\n    \r\n    function setMinL2Gas(\r\n        uint256 _minL2Gas\r\n    ) external;\r\n    \r\n    function setWhitelistedXDomainSender(\r\n        address _sender,\r\n        bool _isWhitelisted\r\n    ) external;\r\n    \r\n    function isXDomainSenderAllowed(\r\n        address _sender\r\n    ) view external returns(bool);\r\n    \r\n    function setAllowAllXDomainSenders(\r\n        bool _allowAllXDomainSenders\r\n    ) external;\r\n    \r\n    function getMinL2Gas() view external returns(uint256);\r\n    function getDiscount() view external returns(uint256);\r\n    function processL2SeqGas(address sender, uint256 _chainId) external payable;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n\r\n//  : MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.2\r\n\r\n//  : MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/resolver/Lib_AddressManager.sol\r\n\r\n//  : MIT\r\npragma solidity ^0.8.9;\r\n\r\n/* External Imports */\r\n\r\n/**\r\n * @title Lib_AddressManager\r\n */\r\ncontract Lib_AddressManager is Ownable {\r\n    /**********\r\n     * Events *\r\n     **********/\r\n\r\n    event AddressSet(string indexed _name, address _newAddress, address _oldAddress);\r\n\r\n    /*************\r\n     * Variables *\r\n     *************/\r\n\r\n    mapping(bytes32 => address) private addresses;\r\n\r\n    /********************\r\n     * Public Functions *\r\n     ********************/\r\n\r\n    /**\r\n     * Changes the address associated with a particular name.\r\n     * @param _name String name to associate an address with.\r\n     * @param _address Address to associate with the name.\r\n     */\r\n    function setAddress(string memory _name, address _address) external onlyOwner {\r\n        bytes32 nameHash = _getNameHash(_name);\r\n        address oldAddress = addresses[nameHash];\r\n        addresses[nameHash] = _address;\r\n\r\n        emit AddressSet(_name, _address, oldAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the address associated with a given name.\r\n     * @param _name Name to retrieve an address for.\r\n     * @return Address associated with the given name.\r\n     */\r\n    function getAddress(string memory _name) external view returns (address) {\r\n        return addresses[_getNameHash(_name)];\r\n    }\r\n\r\n    /**********************\r\n     * Internal Functions *\r\n     **********************/\r\n\r\n    /**\r\n     * Computes the hash of a name.\r\n     * @param _name Name to compute a hash for.\r\n     * @return Hash of the given name.\r\n     */\r\n    function _getNameHash(string memory _name) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_name));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/resolver/Lib_AddressResolver.sol\r\n\r\n//  : MIT\r\npragma solidity ^0.8.9;\r\n\r\n/* Library Imports */\r\n\r\n/**\r\n * @title Lib_AddressResolver\r\n */\r\nabstract contract Lib_AddressResolver {\r\n    /*************\r\n     * Variables *\r\n     *************/\r\n\r\n    Lib_AddressManager public libAddressManager;\r\n\r\n    /***************\r\n     * Constructor *\r\n     ***************/\r\n\r\n    /**\r\n     * @param _libAddressManager Address of the Lib_AddressManager.\r\n     */\r\n    constructor(address _libAddressManager) {\r\n        libAddressManager = Lib_AddressManager(_libAddressManager);\r\n    }\r\n\r\n    /********************\r\n     * Public Functions *\r\n     ********************/\r\n\r\n    /**\r\n     * Resolves the address associated with a given name.\r\n     * @param _name Name to resolve an address for.\r\n     * @return Address associated with the given name.\r\n     */\r\n    function resolve(string memory _name) public view returns (address) {\r\n        return libAddressManager.getAddress(_name);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/MVM/MVM_DiscountOracle.sol\r\n\r\n//  : MIT\r\npragma solidity ^0.8.9;\r\n/* Contract Imports */\r\n/* External Imports */\r\n\r\n\r\ncontract MVM_DiscountOracle is iMVM_DiscountOracle, Lib_AddressResolver{\r\n    // Current l2 gas price\r\n    uint256 public discount;\r\n    uint256 public minL2Gas;\r\n    mapping (address => bool) public xDomainWL;\r\n    bool allowAllXDomainSenders;\r\n    string constant public CONFIG_OWNER_KEY = \"METIS_MANAGER\";\r\n\r\n    /**********************\r\n     * Function Modifiers *\r\n     **********************/\r\n\r\n    modifier onlyManager() {\r\n        require(\r\n            msg.sender == resolve(CONFIG_OWNER_KEY),\r\n            \"MVM_DiscountOracle: Function can only be called by the METIS_MANAGER.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n\r\n    constructor(\r\n      address _addressManager,\r\n      uint256 _initialDiscount\r\n    )\r\n      Lib_AddressResolver(_addressManager)\r\n    {\r\n      discount = _initialDiscount;\r\n      minL2Gas = 200_000;\r\n      allowAllXDomainSenders = false;\r\n    }\r\n\r\n\r\n    function getMinL2Gas() view public override returns (uint256){\r\n      return minL2Gas;\r\n    }\r\n\r\n    function getDiscount() view public override returns (uint256){\r\n      return discount;\r\n    }\r\n\r\n    function setDiscount(\r\n        uint256 _discount\r\n    )\r\n        public\r\n        override\r\n        onlyManager\r\n    {\r\n        discount = _discount;\r\n    }\r\n\r\n    function setMinL2Gas(\r\n        uint256 _minL2Gas\r\n    )\r\n        public\r\n        override\r\n        onlyManager\r\n    {\r\n        minL2Gas = _minL2Gas;\r\n    }\r\n\r\n    function setWhitelistedXDomainSender(\r\n        address _sender,\r\n        bool _isWhitelisted\r\n    )\r\n        external\r\n        override\r\n        onlyManager\r\n    {\r\n        xDomainWL[_sender] = _isWhitelisted;\r\n    }\r\n\r\n    function isXDomainSenderAllowed(\r\n        address _sender\r\n    )\r\n        view\r\n        override\r\n        public\r\n        returns (\r\n            bool\r\n        )\r\n    {\r\n        return (\r\n            allowAllXDomainSenders == true\r\n            || xDomainWL[_sender]\r\n        );\r\n    }\r\n\r\n    function setAllowAllXDomainSenders(\r\n        bool _allowAllXDomainSenders\r\n    )\r\n        public\r\n        override\r\n        onlyManager\r\n    {\r\n        allowAllXDomainSenders = _allowAllXDomainSenders;\r\n    }\r\n\r\n    function processL2SeqGas(address sender, uint256 _chainId)\r\n    public payable override {\r\n        require(isXDomainSenderAllowed(sender), \"sender is not whitelisted\");\r\n    }\r\n\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len;\r\n        while (_i != 0) {\r\n            k = k-1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialDiscount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CONFIG_OWNER_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinL2Gas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isXDomainSenderAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libAddressManager\",\"outputs\":[{\"internalType\":\"contract Lib_AddressManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minL2Gas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"processL2SeqGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowAllXDomainSenders\",\"type\":\"bool\"}],\"name\":\"setAllowAllXDomainSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"}],\"name\":\"setDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minL2Gas\",\"type\":\"uint256\"}],\"name\":\"setMinL2Gas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedXDomainSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"xDomainWL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MVM_DiscountOracle", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000918778e825747a892b17c66fe7d24c618262867d0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c14ed75f25cd267277fd4b37adf2ee5af177aeb74346e4a19f53f306d6b34fe"}]}