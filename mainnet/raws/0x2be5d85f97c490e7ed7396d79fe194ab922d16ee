{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: contracts\\interfaces\\IWitnetRequestBoardEvents.sol\r\n/// @title Witnet Request Board emitting events interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardEvents {\r\n    /// Emitted when a Witnet Data Request is posted to the WRB.\r\n    event PostedRequest(uint256 queryId, address from);\r\n\r\n    /// Emitted when a Witnet-solved result is reported to the WRB.\r\n    event PostedResult(uint256 queryId, address from);\r\n\r\n    /// Emitted when all data related to given query is deleted from the WRB.\r\n    event DeletedQuery(uint256 queryId, address from);\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequestBoardReporter.sol\r\n/// @title The Witnet Request Board Reporter interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardReporter {\r\n    /// Reports the Witnet-provided result to a previously posted request. \r\n    /// @dev Will assume `block.timestamp` as the timestamp at which the request was solved.\r\n    /// @dev Fails if:\r\n    /// @dev - the `_queryId` is not in 'Posted' status.\r\n    /// @dev - provided `_drTxHash` is zero;\r\n    /// @dev - length of provided `_result` is zero.\r\n    /// @param _queryId The unique identifier of the data request.\r\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\r\n    /// @param _result The result itself as bytes.\r\n    function reportResult(uint256 _queryId, bytes32 _drTxHash, bytes calldata _result) external;\r\n\r\n    /// Reports the Witnet-provided result to a previously posted request.\r\n    /// @dev Fails if:\r\n    /// @dev - called from unauthorized address;\r\n    /// @dev - the `_queryId` is not in 'Posted' status.\r\n    /// @dev - provided `_drTxHash` is zero;\r\n    /// @dev - length of provided `_result` is zero.\r\n    /// @param _queryId The unique query identifier\r\n    /// @param _timestamp The timestamp of the solving tally transaction in Witnet.\r\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\r\n    /// @param _result The result itself as bytes.\r\n    function reportResult(uint256 _queryId, uint256 _timestamp, bytes32 _drTxHash, bytes calldata _result) external;\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequest.sol\r\n/// @title The Witnet Data Request basic interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequest {\r\n    /// A `IWitnetRequest` is constructed around a `bytes` value containing \r\n    /// a well-formed Witnet Data Request using Protocol Buffers.\r\n    function bytecode() external view returns (bytes memory);\r\n\r\n    /// Returns SHA256 hash of Witnet Data Request as CBOR-encoded bytes.\r\n    function hash() external view returns (bytes32);\r\n}\r\n// File: contracts\\libs\\Witnet.sol\r\nlibrary Witnet {\r\n\r\n    /// @notice Witnet function that computes the hash of a CBOR-encoded Data Request.\r\n    /// @param _bytecode CBOR-encoded RADON.\r\n    function hash(bytes memory _bytecode) internal pure returns (bytes32) {\r\n        return sha256(_bytecode);\r\n    }\r\n\r\n    /// Struct containing both request and response data related to every query posted to the Witnet Request Board\r\n    struct Query {\r\n        Request request;\r\n        Response response;\r\n        address from;      // Address from which the request was posted.\r\n    }\r\n\r\n    /// Possible status of a Witnet query.\r\n    enum QueryStatus {\r\n        Unknown,\r\n        Posted,\r\n        Reported,\r\n        Deleted\r\n    }\r\n\r\n    /// Data kept in EVM-storage for every Request posted to the Witnet Request Board.\r\n    struct Request {\r\n        IWitnetRequest addr;    // The contract containing the Data Request which execution has been requested.\r\n        address requester;      // Address from which the request was posted.\r\n        bytes32 hash;           // Hash of the Data Request whose execution has been requested.\r\n        uint256 gasprice;       // Minimum gas price the DR resolver should pay on the solving tx.\r\n        uint256 reward;         // Escrowed reward to be paid to the DR resolver.\r\n    }\r\n\r\n    /// Data kept in EVM-storage containing Witnet-provided response metadata and result.\r\n    struct Response {\r\n        address reporter;       // Address from which the result was reported.\r\n        uint256 timestamp;      // Timestamp of the Witnet-provided result.\r\n        bytes32 drTxHash;       // Hash of the Witnet transaction that solved the queried Data Request.\r\n        bytes   cborBytes;      // Witnet-provided result CBOR-bytes to the queried Data Request.\r\n    }\r\n\r\n    /// Data struct containing the Witnet-provided result to a Data Request.\r\n    struct Result {\r\n        bool success;           // Flag stating whether the request could get solved successfully, or not.\r\n        CBOR value;             // Resulting value, in CBOR-serialized bytes.\r\n    }\r\n\r\n    /// Data struct following the RFC-7049 standard: Concise Binary Object Representation.\r\n    struct CBOR {\r\n        Buffer buffer;\r\n        uint8 initialByte;\r\n        uint8 majorType;\r\n        uint8 additionalInformation;\r\n        uint64 len;\r\n        uint64 tag;\r\n    }\r\n\r\n    /// Iterable bytes buffer.\r\n    struct Buffer {\r\n        bytes data;\r\n        uint32 cursor;\r\n    }\r\n\r\n    /// Witnet error codes table.\r\n    enum ErrorCodes {\r\n        // 0x00: Unknown error. Something went really bad!\r\n        Unknown,\r\n        // Script format errors\r\n        /// 0x01: At least one of the source scripts is not a valid CBOR-encoded value.\r\n        SourceScriptNotCBOR,\r\n        /// 0x02: The CBOR value decoded from a source script is not an Array.\r\n        SourceScriptNotArray,\r\n        /// 0x03: The Array value decoded form a source script is not a valid Data Request.\r\n        SourceScriptNotRADON,\r\n        /// Unallocated\r\n        ScriptFormat0x04,\r\n        ScriptFormat0x05,\r\n        ScriptFormat0x06,\r\n        ScriptFormat0x07,\r\n        ScriptFormat0x08,\r\n        ScriptFormat0x09,\r\n        ScriptFormat0x0A,\r\n        ScriptFormat0x0B,\r\n        ScriptFormat0x0C,\r\n        ScriptFormat0x0D,\r\n        ScriptFormat0x0E,\r\n        ScriptFormat0x0F,\r\n        // Complexity errors\r\n        /// 0x10: The request contains too many sources.\r\n        RequestTooManySources,\r\n        /// 0x11: The script contains too many calls.\r\n        ScriptTooManyCalls,\r\n        /// Unallocated\r\n        Complexity0x12,\r\n        Complexity0x13,\r\n        Complexity0x14,\r\n        Complexity0x15,\r\n        Complexity0x16,\r\n        Complexity0x17,\r\n        Complexity0x18,\r\n        Complexity0x19,\r\n        Complexity0x1A,\r\n        Complexity0x1B,\r\n        Complexity0x1C,\r\n        Complexity0x1D,\r\n        Complexity0x1E,\r\n        Complexity0x1F,\r\n        // Operator errors\r\n        /// 0x20: The operator does not exist.\r\n        UnsupportedOperator,\r\n        /// Unallocated\r\n        Operator0x21,\r\n        Operator0x22,\r\n        Operator0x23,\r\n        Operator0x24,\r\n        Operator0x25,\r\n        Operator0x26,\r\n        Operator0x27,\r\n        Operator0x28,\r\n        Operator0x29,\r\n        Operator0x2A,\r\n        Operator0x2B,\r\n        Operator0x2C,\r\n        Operator0x2D,\r\n        Operator0x2E,\r\n        Operator0x2F,\r\n        // Retrieval-specific errors\r\n        /// 0x30: At least one of the sources could not be retrieved, but returned HTTP error.\r\n        HTTP,\r\n        /// 0x31: Retrieval of at least one of the sources timed out.\r\n        RetrievalTimeout,\r\n        /// Unallocated\r\n        Retrieval0x32,\r\n        Retrieval0x33,\r\n        Retrieval0x34,\r\n        Retrieval0x35,\r\n        Retrieval0x36,\r\n        Retrieval0x37,\r\n        Retrieval0x38,\r\n        Retrieval0x39,\r\n        Retrieval0x3A,\r\n        Retrieval0x3B,\r\n        Retrieval0x3C,\r\n        Retrieval0x3D,\r\n        Retrieval0x3E,\r\n        Retrieval0x3F,\r\n        // Math errors\r\n        /// 0x40: Math operator caused an underflow.\r\n        Underflow,\r\n        /// 0x41: Math operator caused an overflow.\r\n        Overflow,\r\n        /// 0x42: Tried to divide by zero.\r\n        DivisionByZero,\r\n        /// Unallocated\r\n        Math0x43,\r\n        Math0x44,\r\n        Math0x45,\r\n        Math0x46,\r\n        Math0x47,\r\n        Math0x48,\r\n        Math0x49,\r\n        Math0x4A,\r\n        Math0x4B,\r\n        Math0x4C,\r\n        Math0x4D,\r\n        Math0x4E,\r\n        Math0x4F,\r\n        // Other errors\r\n        /// 0x50: Received zero reveals\r\n        NoReveals,\r\n        /// 0x51: Insufficient consensus in tally precondition clause\r\n        InsufficientConsensus,\r\n        /// 0x52: Received zero commits\r\n        InsufficientCommits,\r\n        /// 0x53: Generic error during tally execution\r\n        TallyExecution,\r\n        /// Unallocated\r\n        OtherError0x54,\r\n        OtherError0x55,\r\n        OtherError0x56,\r\n        OtherError0x57,\r\n        OtherError0x58,\r\n        OtherError0x59,\r\n        OtherError0x5A,\r\n        OtherError0x5B,\r\n        OtherError0x5C,\r\n        OtherError0x5D,\r\n        OtherError0x5E,\r\n        OtherError0x5F,\r\n        /// 0x60: Invalid reveal serialization (malformed reveals are converted to this value)\r\n        MalformedReveal,\r\n        /// Unallocated\r\n        OtherError0x61,\r\n        OtherError0x62,\r\n        OtherError0x63,\r\n        OtherError0x64,\r\n        OtherError0x65,\r\n        OtherError0x66,\r\n        OtherError0x67,\r\n        OtherError0x68,\r\n        OtherError0x69,\r\n        OtherError0x6A,\r\n        OtherError0x6B,\r\n        OtherError0x6C,\r\n        OtherError0x6D,\r\n        OtherError0x6E,\r\n        OtherError0x6F,\r\n        // Access errors\r\n        /// 0x70: Tried to access a value from an index using an index that is out of bounds\r\n        ArrayIndexOutOfBounds,\r\n        /// 0x71: Tried to access a value from a map using a key that does not exist\r\n        MapKeyNotFound,\r\n        /// Unallocated\r\n        OtherError0x72,\r\n        OtherError0x73,\r\n        OtherError0x74,\r\n        OtherError0x75,\r\n        OtherError0x76,\r\n        OtherError0x77,\r\n        OtherError0x78,\r\n        OtherError0x79,\r\n        OtherError0x7A,\r\n        OtherError0x7B,\r\n        OtherError0x7C,\r\n        OtherError0x7D,\r\n        OtherError0x7E,\r\n        OtherError0x7F,\r\n        OtherError0x80,\r\n        OtherError0x81,\r\n        OtherError0x82,\r\n        OtherError0x83,\r\n        OtherError0x84,\r\n        OtherError0x85,\r\n        OtherError0x86,\r\n        OtherError0x87,\r\n        OtherError0x88,\r\n        OtherError0x89,\r\n        OtherError0x8A,\r\n        OtherError0x8B,\r\n        OtherError0x8C,\r\n        OtherError0x8D,\r\n        OtherError0x8E,\r\n        OtherError0x8F,\r\n        OtherError0x90,\r\n        OtherError0x91,\r\n        OtherError0x92,\r\n        OtherError0x93,\r\n        OtherError0x94,\r\n        OtherError0x95,\r\n        OtherError0x96,\r\n        OtherError0x97,\r\n        OtherError0x98,\r\n        OtherError0x99,\r\n        OtherError0x9A,\r\n        OtherError0x9B,\r\n        OtherError0x9C,\r\n        OtherError0x9D,\r\n        OtherError0x9E,\r\n        OtherError0x9F,\r\n        OtherError0xA0,\r\n        OtherError0xA1,\r\n        OtherError0xA2,\r\n        OtherError0xA3,\r\n        OtherError0xA4,\r\n        OtherError0xA5,\r\n        OtherError0xA6,\r\n        OtherError0xA7,\r\n        OtherError0xA8,\r\n        OtherError0xA9,\r\n        OtherError0xAA,\r\n        OtherError0xAB,\r\n        OtherError0xAC,\r\n        OtherError0xAD,\r\n        OtherError0xAE,\r\n        OtherError0xAF,\r\n        OtherError0xB0,\r\n        OtherError0xB1,\r\n        OtherError0xB2,\r\n        OtherError0xB3,\r\n        OtherError0xB4,\r\n        OtherError0xB5,\r\n        OtherError0xB6,\r\n        OtherError0xB7,\r\n        OtherError0xB8,\r\n        OtherError0xB9,\r\n        OtherError0xBA,\r\n        OtherError0xBB,\r\n        OtherError0xBC,\r\n        OtherError0xBD,\r\n        OtherError0xBE,\r\n        OtherError0xBF,\r\n        OtherError0xC0,\r\n        OtherError0xC1,\r\n        OtherError0xC2,\r\n        OtherError0xC3,\r\n        OtherError0xC4,\r\n        OtherError0xC5,\r\n        OtherError0xC6,\r\n        OtherError0xC7,\r\n        OtherError0xC8,\r\n        OtherError0xC9,\r\n        OtherError0xCA,\r\n        OtherError0xCB,\r\n        OtherError0xCC,\r\n        OtherError0xCD,\r\n        OtherError0xCE,\r\n        OtherError0xCF,\r\n        OtherError0xD0,\r\n        OtherError0xD1,\r\n        OtherError0xD2,\r\n        OtherError0xD3,\r\n        OtherError0xD4,\r\n        OtherError0xD5,\r\n        OtherError0xD6,\r\n        OtherError0xD7,\r\n        OtherError0xD8,\r\n        OtherError0xD9,\r\n        OtherError0xDA,\r\n        OtherError0xDB,\r\n        OtherError0xDC,\r\n        OtherError0xDD,\r\n        OtherError0xDE,\r\n        OtherError0xDF,\r\n        // Bridge errors: errors that only belong in inter-client communication\r\n        /// 0xE0: Requests that cannot be parsed must always get this error as their result.\r\n        /// However, this is not a valid result in a Tally transaction, because invalid requests\r\n        /// are never included into blocks and therefore never get a Tally in response.\r\n        BridgeMalformedRequest,\r\n        /// 0xE1: Witnesses exceeds 100\r\n        BridgePoorIncentives,\r\n        /// 0xE2: The request is rejected on the grounds that it may cause the submitter to spend or stake an\r\n        /// amount of value that is unjustifiably high when compared with the reward they will be getting\r\n        BridgeOversizedResult,\r\n        /// Unallocated\r\n        OtherError0xE3,\r\n        OtherError0xE4,\r\n        OtherError0xE5,\r\n        OtherError0xE6,\r\n        OtherError0xE7,\r\n        OtherError0xE8,\r\n        OtherError0xE9,\r\n        OtherError0xEA,\r\n        OtherError0xEB,\r\n        OtherError0xEC,\r\n        OtherError0xED,\r\n        OtherError0xEE,\r\n        OtherError0xEF,\r\n        OtherError0xF0,\r\n        OtherError0xF1,\r\n        OtherError0xF2,\r\n        OtherError0xF3,\r\n        OtherError0xF4,\r\n        OtherError0xF5,\r\n        OtherError0xF6,\r\n        OtherError0xF7,\r\n        OtherError0xF8,\r\n        OtherError0xF9,\r\n        OtherError0xFA,\r\n        OtherError0xFB,\r\n        OtherError0xFC,\r\n        OtherError0xFD,\r\n        OtherError0xFE,\r\n        // This should not exist:\r\n        /// 0xFF: Some tally error is not intercepted but should\r\n        UnhandledIntercept\r\n    }\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequestBoardRequestor.sol\r\n/// @title Witnet Requestor Interface\r\n/// @notice It defines how to interact with the Witnet Request Board in order to:\r\n///   - request the execution of Witnet Radon scripts (data request);\r\n///   - upgrade the resolution reward of any previously posted request, in case gas price raises in mainnet;\r\n///   - read the result of any previously posted request, eventually reported by the Witnet DON.\r\n///   - remove from storage all data related to past and solved data requests, and results.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardRequestor {\r\n    /// Retrieves a copy of all Witnet-provided data related to a previously posted request, removing the whole query from the WRB storage.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status, or called from an address different to\r\n    /// @dev the one that actually posted the given request.\r\n    /// @param _queryId The unique query identifier.\r\n    function deleteQuery(uint256 _queryId) external returns (Witnet.Response memory);\r\n\r\n    /// Requests the execution of the given Witnet Data Request in expectation that it will be relayed and solved by the Witnet DON.\r\n    /// A reward amount is escrowed by the Witnet Request Board that will be transferred to the reporter who relays back the Witnet-provided \r\n    /// result to this request.\r\n    /// @dev Fails if:\r\n    /// @dev - provided reward is too low.\r\n    /// @dev - provided script is zero address.\r\n    /// @dev - provided script bytecode is empty.\r\n    /// @param _addr The address of the IWitnetRequest contract that can provide the actual Data Request bytecode.\r\n    /// @return _queryId An unique query identifier.\r\n    function postRequest(IWitnetRequest _addr) external payable returns (uint256 _queryId);\r\n\r\n    /// Increments the reward of a previously posted request by adding the transaction value to it.\r\n    /// @dev Updates request `gasPrice` in case this method is called with a higher \r\n    /// @dev gas price value than the one used in previous calls to `postRequest` or\r\n    /// @dev `upgradeReward`. \r\n    /// @dev Fails if the `_queryId` is not in 'Posted' status.\r\n    /// @dev Fails also in case the request `gasPrice` is increased, and the new \r\n    /// @dev reward value gets below new recalculated threshold. \r\n    /// @param _queryId The unique query identifier.\r\n    function upgradeReward(uint256 _queryId) external payable;\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequestBoardView.sol\r\n/// @title Witnet Request Board info interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardView {\r\n    /// Estimates the amount of reward we need to insert for a given gas price.\r\n    /// @param _gasPrice The gas price for which we need to calculate the rewards.\r\n    function estimateReward(uint256 _gasPrice) external view returns (uint256);\r\n\r\n    /// Returns next query id to be generated by the Witnet Request Board.\r\n    function getNextQueryId() external view returns (uint256);\r\n\r\n    /// Gets the whole Query data contents, if any, no matter its current status.\r\n    function getQueryData(uint256 _queryId) external view returns (Witnet.Query memory);\r\n\r\n    /// Gets current status of given query.\r\n    function getQueryStatus(uint256 _queryId) external view returns (Witnet.QueryStatus);\r\n\r\n    /// Retrieves the whole Request record posted to the Witnet Request Board.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has already been reported\r\n    /// @dev or deleted.\r\n    /// @param _queryId The unique identifier of a previously posted query.\r\n    function readRequest(uint256 _queryId) external view returns (Witnet.Request memory);\r\n\r\n    /// Retrieves the serialized bytecode of a previously posted Witnet Data Request.\r\n    /// @dev Fails if the `_queryId` is not valid, or if the related script bytecode \r\n    /// @dev got changed after being posted. Returns empty array once it gets reported, \r\n    /// @dev or deleted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequestBytecode(uint256 _queryId) external view returns (bytes memory);\r\n\r\n    /// Retrieves the gas price that any assigned reporter will have to pay when reporting \r\n    /// result to a previously posted Witnet data request.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has already been \r\n    /// @dev reported, or deleted. \r\n    /// @param _queryId The unique query identifie\r\n    function readRequestGasPrice(uint256 _queryId) external view returns (uint256);\r\n\r\n    /// Retrieves the reward currently set for the referred query.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has already been \r\n    /// @dev reported, or deleted. \r\n    /// @param _queryId The unique query identifier.\r\n    function readRequestReward(uint256 _queryId) external view returns (uint256);\r\n\r\n    /// Retrieves the whole `Witnet.Response` record referred to a previously posted Witnet Data Request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponse(uint256 _queryId) external view returns (Witnet.Response memory);\r\n\r\n    /// Retrieves the hash of the Witnet transaction hash that actually solved the referred query.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseDrTxHash(uint256 _queryId) external view returns (bytes32);    \r\n\r\n    /// Retrieves the address that reported the result to a previously-posted request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseReporter(uint256 _queryId) external view returns (address);\r\n\r\n    /// Retrieves the Witnet-provided CBOR-bytes result of a previously posted request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseResult(uint256 _queryId) external view returns (Witnet.Result memory);\r\n\r\n    /// Retrieves the timestamp in which the result to the referred query was solved by the Witnet DON.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseTimestamp(uint256 _queryId) external view returns (uint256);\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequestParser.sol\r\n/// @title The Witnet interface for decoding Witnet-provided request to Data Requests.\r\n/// This interface exposes functions to check for the success/failure of\r\n/// a Witnet-provided result, as well as to parse and convert result into\r\n/// Solidity types suitable to the application level. \r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestParser {\r\n\r\n    /// Decode raw CBOR bytes into a Witnet.Result instance.\r\n    /// @param _cborBytes Raw bytes representing a CBOR-encoded value.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborBytes(bytes memory _cborBytes) external pure returns (Witnet.Result memory);\r\n\r\n    /// Decode a CBOR value into a Witnet.Result instance.\r\n    /// @param _cborValue An instance of `Witnet.CBOR`.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborValue(Witnet.CBOR memory _cborValue) external pure returns (Witnet.Result memory);\r\n\r\n    /// Tell if a Witnet.Result is successful.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if successful, `false` if errored.\r\n    function isOk(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Tell if a Witnet.Result is errored.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if errored, `false` if successful.\r\n    function isError(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Decode a bytes value from a Witnet.Result as a `bytes` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bytes` decoded from the Witnet.Result.\r\n    function asBytes(Witnet.Result memory _result) external pure returns (bytes memory);\r\n\r\n    /// Decode a bytes value from a Witnet.Result as a `bytes32` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bytes32` decoded from the Witnet.Result.\r\n    function asBytes32(Witnet.Result memory _result) external pure returns (bytes32);\r\n\r\n    /// Decode an error code from a Witnet.Result as a member of `Witnet.ErrorCodes`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `CBORValue.Error memory` decoded from the Witnet.Result.\r\n    function asErrorCode(Witnet.Result memory _result) external pure returns (Witnet.ErrorCodes);\r\n\r\n\r\n    /// Generate a suitable error message for a member of `Witnet.ErrorCodes` and its corresponding arguments.\r\n    /// @dev WARN: Note that client contracts should wrap this function into a try-catch foreseing potential errors generated in this function\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return A tuple containing the `CBORValue.Error memory` decoded from the `Witnet.Result`, plus a loggable error message.\r\n    function asErrorMessage(Witnet.Result memory _result) external pure returns (Witnet.ErrorCodes, string memory);\r\n\r\n    /// Decode a raw error from a `Witnet.Result` as a `uint64[]`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `uint64[]` raw error as decoded from the `Witnet.Result`.\r\n    function asRawError(Witnet.Result memory _result) external pure returns(uint64[] memory);\r\n\r\n    /// Decode a boolean value from a Witnet.Result as an `bool` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bool` decoded from the Witnet.Result.\r\n    function asBool(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Decode a fixed16 (half-precision) numeric value from a Witnet.Result as an `int32` value.\r\n    /// @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values.\r\n    /// by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`.\r\n    /// use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asFixed16(Witnet.Result memory _result) external pure returns (int32);\r\n\r\n    /// Decode an array of fixed16 values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asFixed16Array(Witnet.Result memory _result) external pure returns (int32[] memory);\r\n\r\n    /// Decode a integer numeric value from a Witnet.Result as an `int128` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asInt128(Witnet.Result memory _result) external pure returns (int128);\r\n\r\n    /// Decode an array of integer numeric values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asInt128Array(Witnet.Result memory _result) external pure returns (int128[] memory);\r\n\r\n    /// Decode a string value from a Witnet.Result as a `string` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string` decoded from the Witnet.Result.\r\n    function asString(Witnet.Result memory _result) external pure returns (string memory);\r\n\r\n    /// Decode an array of string values from a Witnet.Result as a `string[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string[]` decoded from the Witnet.Result.\r\n    function asStringArray(Witnet.Result memory _result) external pure returns (string[] memory);\r\n\r\n    /// Decode a natural numeric value from a Witnet.Result as a `uint64` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64` decoded from the Witnet.Result.\r\n    function asUint64(Witnet.Result memory _result) external pure returns(uint64);\r\n\r\n    /// Decode an array of natural numeric values from a Witnet.Result as a `uint64[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64[]` decoded from the Witnet.Result.\r\n    function asUint64Array(Witnet.Result memory _result) external pure returns (uint64[] memory);\r\n\r\n}\r\n// File: contracts\\WitnetRequestBoard.sol\r\n/// @title Witnet Request Board functionality base contract.\r\n/// @author The Witnet Foundation.\r\nabstract contract WitnetRequestBoard is\r\n    IWitnetRequestBoardEvents,\r\n    IWitnetRequestBoardReporter,\r\n    IWitnetRequestBoardRequestor,\r\n    IWitnetRequestBoardView,\r\n    IWitnetRequestParser\r\n{\r\n    receive() external payable {\r\n        revert(\"WitnetRequestBoard: no transfers accepted\");\r\n    }\r\n}\r\n// File: contracts\\UsingWitnet.sol\r\n/// @title The UsingWitnet contract\r\n/// @dev Witnet-aware contracts can inherit from this contract in order to interact with Witnet.\r\n/// @author The Witnet Foundation.\r\nabstract contract UsingWitnet {\r\n\r\n    WitnetRequestBoard public immutable witnet;\r\n\r\n    /// Include an address to specify the WitnetRequestBoard entry point address.\r\n    /// @param _wrb The WitnetRequestBoard entry point address.\r\n    constructor(WitnetRequestBoard _wrb)\r\n    {\r\n        require(address(_wrb) != address(0), \"UsingWitnet: zero address\");\r\n        witnet = _wrb;\r\n    }\r\n\r\n    /// Provides a convenient way for client contracts extending this to block the execution of the main logic of the\r\n    /// contract until a particular request has been successfully solved and reported by Witnet.\r\n    modifier witnetRequestSolved(uint256 _id) {\r\n        require(\r\n                _witnetCheckResultAvailability(_id),\r\n                \"UsingWitnet: request not solved\"\r\n            );\r\n        _;\r\n    }\r\n\r\n    /// Check if a data request has been solved and reported by Witnet.\r\n    /// @dev Contracts depending on Witnet should not start their main business logic (e.g. receiving value from third.\r\n    /// parties) before this method returns `true`.\r\n    /// @param _id The unique identifier of a previously posted data request.\r\n    /// @return A boolean telling if the request has been already resolved or not. Returns `false` also, if the result was deleted.\r\n    function _witnetCheckResultAvailability(uint256 _id)\r\n        internal view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return witnet.getQueryStatus(_id) == Witnet.QueryStatus.Reported;\r\n    }\r\n\r\n    /// Estimate the reward amount.\r\n    /// @param _gasPrice The gas price for which we want to retrieve the estimation.\r\n    /// @return The reward to be included when either posting a new request, or upgrading the reward of a previously posted one.\r\n    function _witnetEstimateReward(uint256 _gasPrice)\r\n        internal view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return witnet.estimateReward(_gasPrice);\r\n    }\r\n\r\n    /// Estimates the reward amount, considering current transaction gas price.\r\n    /// @return The reward to be included when either posting a new request, or upgrading the reward of a previously posted one.\r\n    function _witnetEstimateReward()\r\n        internal view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return witnet.estimateReward(tx.gasprice);\r\n    }\r\n\r\n    /// Send a new request to the Witnet network with transaction value as a reward.\r\n    /// @param _request An instance of `IWitnetRequest` contract.\r\n    /// @return _id Sequential identifier for the request included in the WitnetRequestBoard.\r\n    /// @return _reward Current reward amount escrowed by the WRB until a result gets reported.\r\n    function _witnetPostRequest(IWitnetRequest _request)\r\n        internal\r\n        virtual\r\n        returns (uint256 _id, uint256 _reward)\r\n    {\r\n        _reward = _witnetEstimateReward();\r\n        _id = witnet.postRequest{value: _reward}(_request);\r\n    }\r\n\r\n    /// Upgrade the reward for a previously posted request.\r\n    /// @dev Call to `upgradeReward` function in the WitnetRequestBoard contract.\r\n    /// @param _id The unique identifier of a request that has been previously sent to the WitnetRequestBoard.\r\n    /// @return Amount in which the reward has been increased.\r\n    function _witnetUpgradeReward(uint256 _id)\r\n        internal\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        uint256 _currentReward = witnet.readRequestReward(_id);        \r\n        uint256 _newReward = _witnetEstimateReward();\r\n        uint256 _fundsToAdd = 0;\r\n        if (_newReward > _currentReward) {\r\n            _fundsToAdd = (_newReward - _currentReward);\r\n        }\r\n        witnet.upgradeReward{value: _fundsToAdd}(_id); // Let Request.gasPrice be updated\r\n        return _fundsToAdd;\r\n    }\r\n\r\n    /// Read the Witnet-provided result to a previously posted request.\r\n    /// @param _id The unique identifier of a request that was posted to Witnet.\r\n    /// @return The result of the request as an instance of `Witnet.Result`.\r\n    function _witnetReadResult(uint256 _id)\r\n        internal view\r\n        virtual\r\n        returns (Witnet.Result memory)\r\n    {\r\n        return witnet.readResponseResult(_id);\r\n    }\r\n\r\n    /// Retrieves copy of all response data related to a previously posted request, removing the whole query from storage.\r\n    /// @param _id The unique identifier of a previously posted request.\r\n    /// @return The Witnet-provided result to the request.\r\n    function _witnetDeleteQuery(uint256 _id)\r\n        internal\r\n        virtual\r\n        returns (Witnet.Response memory)\r\n    {\r\n        return witnet.deleteQuery(_id);\r\n    }\r\n\r\n}\r\n// File: contracts\\interfaces\\IWitnetRandomness.sol\r\n/// @title The Witnet Randomness generator interface.\r\n/// @author Witnet Foundation.\r\ninterface IWitnetRandomness {\r\n\r\n    /// Thrown every time a new WitnetRandomnessRequest gets succesfully posted to the WitnetRequestBoard.\r\n    /// @param from Address from which the randomize() function was called. \r\n    /// @param prevBlock Block number in which a randomness request got posted just before this one. 0 if none.\r\n    /// @param witnetQueryId Unique query id assigned to this request by the WRB.\r\n    /// @param witnetRequestHash SHA-256 hash of the WitnetRandomnessRequest actual bytecode just posted to the WRB.\r\n    event Randomized(\r\n        address indexed from,\r\n        uint256 indexed prevBlock,\r\n        uint256 witnetQueryId,\r\n        bytes32 witnetRequestHash\r\n    );\r\n\r\n    /// Returns amount of wei required to be paid as a fee when requesting randomization with a \r\n    /// transaction gas price as the one given.\r\n    function estimateRandomizeFee(uint256 _gasPrice) external view returns (uint256);\r\n\r\n    /// Retrieves data of a randomization request that got successfully posted to the WRB within a given block.\r\n    /// @dev Returns zero values if no randomness request was actually posted within a given block.\r\n    /// @param _block Block number whose randomness request is being queried for.\r\n    /// @return _from Address from which the latest randomness request was posted.\r\n    /// @return _id Unique request identifier as provided by the WRB.\r\n    /// @return _fee Request's total paid fee.\r\n    /// @return _prevBlock Block number in which a randomness request got posted just before this one. 0 if none.\r\n    /// @return _nextBlock Block number in which a randomness request got posted just after this one, 0 if none.\r\n    function getRandomizeData(uint256 _block)\r\n        external view returns (address _from, uint256 _id, uint256 _fee, uint256 _prevBlock, uint256 _nextBlock);\r\n\r\n    /// Retrieves the randomness generated upon solving a request that was posted within a given block,\r\n    /// if any, or to the _first_ request posted after that block, otherwise. Should the intended \r\n    /// request happen to be finalized with errors on the Witnet oracle network side, this function \r\n    /// will recursively try to return randomness from the next non-faulty randomization request found \r\n    /// in storage, if any. \r\n    /// @dev Fails if:\r\n    /// @dev   i.   no `randomize()` was not called in either the given block, or afterwards.\r\n    /// @dev   ii.  a request posted in/after given block does exist, but no result has been provided yet.\r\n    /// @dev   iii. all requests in/after the given block were solved with errors.\r\n    /// @param _block Block number from which the search will start.\r\n    function getRandomnessAfter(uint256 _block) external view returns (bytes32); \r\n\r\n    /// Tells what is the number of the next block in which a randomization request was posted after the given one. \r\n    /// @param _block Block number from which the search will start.\r\n    /// @return Number of the first block found after the given one, or `0` otherwise.\r\n    function getRandomnessNextBlock(uint256 _block) external view returns (uint256); \r\n\r\n    /// Gets previous block in which a randomness request was posted before the given one.\r\n    /// @param _block Block number from which the search will start.\r\n    /// @return First block found before the given one, or `0` otherwise.\r\n    function getRandomnessPrevBlock(uint256 _block) external view returns (uint256);\r\n\r\n    /// Returns `true` only when the randomness request that got posted within given block was already\r\n    /// reported back from the Witnet oracle, either successfully or with an error of any kind.\r\n    function isRandomized(uint256 _block) external view returns (bool);\r\n\r\n    /// Returns latest block in which a randomness request got sucessfully posted to the WRB.\r\n    function latestRandomizeBlock() external view returns (uint256);\r\n\r\n    /// Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using \r\n    /// the given `_nonce` value and the randomness returned by `getRandomnessAfter(_block)`. \r\n    /// @dev Fails under same conditions as `getRandomnessAfter(uint256)` may do.\r\n    /// @param _range Range within which the uniformly-distributed random number will be generated.\r\n    /// @param _nonce Nonce value enabling multiple random numbers from the same randomness value.\r\n    /// @param _block Block number from which the search will start.\r\n    function random(uint32 _range, uint256 _nonce, uint256 _block) external view returns (uint32);\r\n\r\n    /// Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using \r\n    /// the given `_nonce` value and the given `_seed` as a source of entropy.\r\n    /// @param _range Range within which the uniformly-distributed random number will be generated.\r\n    /// @param _nonce Nonce value enabling multiple random numbers from the same randomness value.\r\n    /// @param _seed Seed value used as entropy source.\r\n    function random(uint32 _range, uint256 _nonce, bytes32 _seed) external pure returns (uint32);\r\n\r\n    /// Requests the Witnet oracle to generate an EVM-agnostic and trustless source of randomness. \r\n    /// Only one randomness request per block will be actually posted to the WRB. Should there \r\n    /// already be a posted request within current block, it will try to upgrade Witnet fee of current's \r\n    /// block randomness request according to current gas price. In both cases, all unused funds shall \r\n    /// be transfered back to the tx sender.\r\n    /// @return _usedFunds Amount of funds actually used from those provided by the tx sender.\r\n    function randomize() external payable returns (uint256 _usedFunds);\r\n\r\n    /// Increases Witnet fee related to a pending-to-be-solved randomness request, as much as it\r\n    /// may be required in proportion to how much bigger the current tx gas price is with respect the \r\n    /// highest gas price that was paid in either previous fee upgrades, or when the given randomness \r\n    /// request was posted. All unused funds shall be transferred back to the tx sender.\r\n    /// @return _usedFunds Amount of dunds actually used from those provided by the tx sender.\r\n    function upgradeRandomizeFee(uint256 _block) external payable returns (uint256 _usedFunds);\r\n}\r\n// File: contracts\\patterns\\Initializable.sol\r\ninterface Initializable {\r\n    /// @dev Initialize contract's storage context.\r\n    function initialize(bytes calldata) external;\r\n}\r\n// File: contracts\\patterns\\Clonable.sol\r\nabstract contract Clonable is Initializable {\r\n    /// Immutable contract address that actually attends all calls to this contract.\r\n    /// @dev Differs from `address(this)` when reached within a DELEGATECALL.\r\n    address immutable public self = address(this);\r\n\r\n    event Cloned(address indexed by, Clonable indexed self, Clonable indexed clone);\r\n\r\n    /// Tells whether this contract is a clone of another (i.e. `self()`)\r\n    function cloned()\r\n        public view\r\n        returns (bool)\r\n    {\r\n        return (\r\n            address(this) != self\r\n        );\r\n    }\r\n\r\n    /// Deploys and returns the address of a minimal proxy clone that replicates contract\r\n    /// behaviour while using its own EVM storage.\r\n    /// @dev This function should always provide a new address, no matter how many times \r\n    /// @dev is actually called from the same `msg.sender`.\r\n    /// @dev See https://eips.ethereum.org/EIPS/eip-1167.\r\n    /// @dev See https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/.\r\n    function clone()\r\n        public virtual\r\n        returns (Clonable _instance)\r\n    {\r\n        address _self = self;\r\n        assembly {\r\n            // ptr to free mem:\r\n            let ptr := mload(0x40)\r\n            // begin minimal proxy construction bytecode:\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            // make minimal proxy delegate all calls to `self()`:\r\n            mstore(add(ptr, 0x14), shl(0x60, _self))\r\n            // end minimal proxy construction bytecode:\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            // CREATE new instance:\r\n            _instance := create(0, ptr, 0x37)\r\n        }        \r\n        require(address(_instance) != address(0), \"Clonable: CREATE failed\");\r\n        emit Cloned(msg.sender, Clonable(self), _instance);\r\n    }\r\n\r\n    /// Deploys and returns the address of a minimal proxy clone that replicates contract \r\n    /// behaviour while using its own EVM storage.\r\n    /// @dev This function uses the CREATE2 opcode and a `_salt` to deterministically deploy\r\n    /// @dev the clone. Using the same `_salt` multiple times will revert, since\r\n    /// @dev no contract can be deployed more than once at the same address.\r\n    /// @dev See https://eips.ethereum.org/EIPS/eip-1167.\r\n    /// @dev See https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/.\r\n    function cloneDeterministic(bytes32 _salt)\r\n        public virtual\r\n        returns (Clonable _instance)\r\n    {\r\n        address _self = self;\r\n        assembly {\r\n            // ptr to free mem:\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            // make minimal proxy delegate all calls to `self()`:\r\n            mstore(add(ptr, 0x14), shl(0x60, _self))\r\n            // end minimal proxy construction bytecode:\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            // CREATE2 new instance:\r\n            _instance := create2(0, ptr, 0x37, _salt)\r\n        }\r\n        require(address(_instance) != address(0), \"Clonable: CREATE2 failed\");\r\n        emit Cloned(msg.sender, Clonable(self), _instance);\r\n    }\r\n}\r\n// File: contracts\\patterns\\Context.sol\r\n/// @dev Provides information about the current execution context, including the\r\n/// sender of the transaction and its data. While these are generally available\r\n/// via msg.sender and msg.data, they should not be accessed in such a direct\r\n/// manner, since when dealing with meta-transactions the account sending and\r\n/// paying for execution may not be the actual sender (as far as an application\r\n/// is concerned).\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _msgValue() internal view virtual returns (uint256) {\r\n        return msg.value;\r\n    }\r\n}\r\n// File: contracts\\patterns\\Ownable.sol\r\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\r\n\r\n\r\n\r\n/// @dev Contract module which provides a basic access control mechanism, where\r\n/// there is an account (an owner) that can be granted exclusive access to\r\n/// specific functions.\r\n///\r\n/// By default, the owner account will be the one that deploys the contract. This\r\n/// can later be changed with {transferOwnership}.\r\n///\r\n/// This module is used through inheritance. It will make available the modifier\r\n/// `onlyOwner`, which can be applied to your functions to restrict their use to\r\n/// the owner.\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @dev Initializes the contract setting the deployer as the initial owner.\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /// @dev Returns the address of the current owner.\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Leaves the contract without owner. It will not be possible to call\r\n    /// `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    /// NOTE: Renouncing ownership will leave the contract without an owner,\r\n    /// thereby removing any functionality that is only available to the owner.\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    /// Can only be called by the current owner.\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    /// Internal function without access restriction.\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: contracts\\patterns\\Proxiable.sol\r\ninterface Proxiable {\r\n    /// @dev Complying with EIP-1822: Universal Upgradable Proxy Standard (UUPS)\r\n    /// @dev See https://eips.ethereum.org/EIPS/eip-1822.\r\n    function proxiableUUID() external pure returns (bytes32);\r\n}\r\n// File: contracts\\requests\\WitnetRequestMalleableBase.sol\r\nabstract contract WitnetRequestMalleableBase\r\n    is\r\n        IWitnetRequest,\r\n        Clonable,\r\n        Ownable,\r\n        Proxiable\r\n{   \r\n    using Witnet for *;\r\n\r\n    event WitnessingParamsChanged(\r\n        address indexed by,\r\n        uint8 numWitnesses,\r\n        uint8 minWitnessingConsensus,\r\n        uint64 witnssingCollateral,\r\n        uint64 witnessingReward,\r\n        uint64 witnessingUnitaryFee\r\n    );\r\n\r\n    struct WitnetRequestMalleableBaseContext {\r\n        /// Contract owner address.\r\n        address owner;\r\n        /// Immutable bytecode template.\r\n        bytes template;\r\n        /// Current request bytecode.\r\n        bytes bytecode;\r\n        /// Current request hash.\r\n        bytes32 hash;\r\n        /// Current request witnessing params.\r\n        WitnetRequestWitnessingParams params;\r\n    }\r\n\r\n    struct WitnetRequestWitnessingParams {\r\n        /// Number of witnesses required to be involved for solving this Witnet Data Request.\r\n        uint8 numWitnesses;\r\n\r\n        /// Threshold percentage for aborting resolution of a request if the witnessing nodes did not arrive to a broad consensus.\r\n        uint8 minWitnessingConsensus;\r\n\r\n        /// Amount of nanowits that a witness solving the request will be required to collateralize in the commitment transaction.\r\n        uint64 witnessingCollateral;\r\n\r\n        /// Amount of nanowits that every request-solving witness will be rewarded with.\r\n        uint64 witnessingReward;\r\n\r\n        /// Amount of nanowits that will be earned by Witnet miners for each each valid commit/reveal transaction they include in a block.\r\n        uint64 witnessingUnitaryFee;\r\n    }\r\n\r\n    /// Returns current Witnet Data Request bytecode, encoded using Protocol Buffers.\r\n    function bytecode() external view override returns (bytes memory) {\r\n        return _request().bytecode;\r\n    }\r\n\r\n    /// Returns SHA256 hash of current Witnet Data Request bytecode.\r\n    function hash() external view override returns (bytes32) {\r\n        return _request().hash;\r\n    }\r\n\r\n    /// Sets amount of nanowits that a witness solving the request will be required to collateralize in the commitment transaction.\r\n    function setWitnessingCollateral(uint64 _witnessingCollateral)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        WitnetRequestWitnessingParams storage _params = _request().params;\r\n        _params.witnessingCollateral = _witnessingCollateral;\r\n        _malleateBytecode(\r\n            _params.numWitnesses,\r\n            _params.minWitnessingConsensus,\r\n            _witnessingCollateral,\r\n            _params.witnessingReward,\r\n            _params.witnessingUnitaryFee\r\n        );\r\n    }\r\n\r\n    /// Specifies how much you want to pay for rewarding each of the Witnet nodes.\r\n    /// @param _witnessingReward Amount of nanowits that every request-solving witness will be rewarded with.\r\n    /// @param _witnessingUnitaryFee Amount of nanowits that will be earned by Witnet miners for each each valid \r\n    /// commit/reveal transaction they include in a block.\r\n    function setWitnessingFees(uint64 _witnessingReward, uint64 _witnessingUnitaryFee)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        WitnetRequestWitnessingParams storage _params = _request().params;\r\n        _params.witnessingReward = _witnessingReward;\r\n        _params.witnessingUnitaryFee = _witnessingUnitaryFee;\r\n        _malleateBytecode(\r\n            _params.numWitnesses,\r\n            _params.minWitnessingConsensus,\r\n            _params.witnessingCollateral,\r\n            _witnessingReward,\r\n            _witnessingUnitaryFee\r\n        );\r\n    }\r\n\r\n    /// Sets how many Witnet nodes will be \"hired\" for resolving the request.\r\n    /// @param _numWitnesses Number of witnesses required to be involved for solving this Witnet Data Request.\r\n    /// @param _minWitnessingConsensus Threshold percentage for aborting resolution of a request if the witnessing \r\n    /// nodes did not arrive to a broad consensus.\r\n    function setWitnessingQuorum(uint8 _numWitnesses, uint8 _minWitnessingConsensus)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        WitnetRequestWitnessingParams storage _params = _request().params;\r\n        _params.numWitnesses = _numWitnesses;\r\n        _params.minWitnessingConsensus = _minWitnessingConsensus;\r\n        _malleateBytecode(\r\n            _numWitnesses,\r\n            _minWitnessingConsensus,\r\n            _params.witnessingCollateral,\r\n            _params.witnessingReward,\r\n            _params.witnessingUnitaryFee\r\n        );\r\n    }\r\n\r\n    /// Returns immutable template bytecode: actual CBOR-encoded data request at the Witnet protocol\r\n    /// level, including no witnessing parameters at all.\r\n    function template()\r\n        external view\r\n        returns (bytes memory)\r\n    {\r\n        return _request().template;\r\n    }\r\n\r\n    /// Returns total amount of nanowits that witnessing nodes will need to collateralize all together.\r\n    function totalWitnessingCollateral()\r\n        external view\r\n        returns (uint128)\r\n    {\r\n        WitnetRequestWitnessingParams storage _params = _request().params;\r\n        return _params.numWitnesses * _params.witnessingCollateral;\r\n    }\r\n\r\n    /// Returns total amount of nanowits that will have to be paid in total for this request to be solved.\r\n    function totalWitnessingFee()\r\n        external view\r\n        returns (uint128)\r\n    {\r\n        WitnetRequestWitnessingParams storage _params = _request().params;\r\n        return _params.numWitnesses * (2 * _params.witnessingUnitaryFee + _params.witnessingReward);\r\n    }\r\n\r\n    /// Returns witnessing parameters of current Witnet Data Request.\r\n    function witnessingParams()\r\n        external view\r\n        returns (WitnetRequestWitnessingParams memory)\r\n    {\r\n        return _request().params;\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- 'Clonable' overriden functions -----------------------------------------------------------------------------\r\n\r\n    /// Deploys and returns the address of a minimal proxy clone that replicates contract\r\n    /// behaviour while using its own EVM storage.\r\n    /// @dev This function should always provide a new address, no matter how many times \r\n    /// @dev is actually called from the same `msg.sender`.\r\n    function clone()\r\n        public\r\n        virtual override\r\n        returns (Clonable _instance)\r\n    {\r\n        _instance = super.clone();\r\n        _instance.initialize(_request().template);\r\n        Ownable(address(_instance)).transferOwnership(msg.sender);\r\n    }\r\n\r\n    /// Deploys and returns the address of a minimal proxy clone that replicates contract \r\n    /// behaviour while using its own EVM storage.\r\n    /// @dev This function uses the CREATE2 opcode and a `_salt` to deterministically deploy\r\n    /// @dev the clone. Using the same `_salt` multiple time will revert, since\r\n    /// @dev no contract can be deployed more than once at the same address.\r\n    function cloneDeterministic(bytes32 _salt)\r\n        public\r\n        virtual override\r\n        returns (Clonable _instance)\r\n    {\r\n        _instance = super.cloneDeterministic(_salt);\r\n        _instance.initialize(_request().template);\r\n        Ownable(address(_instance)).transferOwnership(msg.sender);\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- 'Initializable' overriden functions ------------------------------------------------------------------------\r\n\r\n    /// @dev Initializes contract's storage context.\r\n    function initialize(bytes memory _template)\r\n        public\r\n        virtual override\r\n    {\r\n        require(_request().template.length == 0, \"WitnetRequestMalleableBase: already initialized\");\r\n        _initialize(_template);\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    // ================================================================================================================\r\n    // --- 'Ownable' overriden functions ------------------------------------------------------------------------------\r\n\r\n    /// Returns the address of the current owner.\r\n    function owner()\r\n        public view\r\n        virtual override\r\n        returns (address)\r\n    {\r\n        return _request().owner;\r\n    }\r\n\r\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    function _transferOwnership(address newOwner)\r\n        internal\r\n        virtual override\r\n    {\r\n        address oldOwner = _request().owner;\r\n        _request().owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    // ================================================================================================================\r\n    // --- 'Proxiable 'overriden functions ----------------------------------------------------------------------------\r\n\r\n    /// @dev Complying with EIP-1822: Universal Upgradable Proxy Standard (UUPS)\r\n    /// @dev See https://eips.ethereum.org/EIPS/eip-1822.\r\n    function proxiableUUID()\r\n        external pure\r\n        virtual override\r\n        returns (bytes32)\r\n    {\r\n        return (\r\n            /* keccak256(\"io.witnet.requests.malleable\") */\r\n            0x851d0a92a3ad30295bef33afc69d6874779826b7789386b336e22621365ed2c2\r\n        );\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- INTERNAL FUNCTIONS -----------------------------------------------------------------------------------------    \r\n\r\n    /// @dev Initializes witnessing params and template bytecode.\r\n    function _initialize(bytes memory _template)\r\n        internal\r\n    {\r\n        assert(_template.length > 0);\r\n        _request().template = _template;\r\n\r\n        WitnetRequestWitnessingParams storage _params = _request().params;\r\n        _params.numWitnesses = 2;\r\n        _params.minWitnessingConsensus = 51;\r\n        _params.witnessingCollateral = 10 ** 9;      // 1 WIT\r\n        _params.witnessingReward = 5 * 10 ** 5;      // 0.5 milliWITs\r\n        _params.witnessingUnitaryFee = 25 * 10 ** 4; // 0.25 milliWITs\r\n        \r\n        _malleateBytecode(\r\n            _params.numWitnesses,\r\n            _params.minWitnessingConsensus,\r\n            _params.witnessingCollateral,\r\n            _params.witnessingReward,\r\n            _params.witnessingUnitaryFee\r\n        );\r\n    }\r\n\r\n    /// @dev Serializes new `bytecode` by combining immutable template with given parameters.\r\n    function _malleateBytecode(\r\n            uint8 _numWitnesses,\r\n            uint8 _minWitnessingConsensus,\r\n            uint64 _witnessingCollateral,\r\n            uint64 _witnessingReward,\r\n            uint64 _witnessingUnitaryFee\r\n        )\r\n        internal\r\n        virtual\r\n    {\r\n        require(\r\n            _witnessingReward > 0,\r\n            \"WitnetRequestMalleableBase: no reward\"\r\n        );\r\n        require(\r\n            _numWitnesses >= 1 && _numWitnesses <= 127,\r\n            \"WitnetRequestMalleableBase: number of witnesses out of range\"\r\n        );\r\n        require(\r\n            _minWitnessingConsensus >= 51 && _minWitnessingConsensus <= 99,\r\n            \"WitnetRequestMalleableBase: witnessing consensus out of range\"\r\n        );\r\n        require(\r\n            _witnessingCollateral >= 10 ** 9,\r\n            \"WitnetRequestMalleableBase: witnessing collateral below 1 WIT\"\r\n        );\r\n\r\n        _request().bytecode = abi.encodePacked(\r\n            _request().template,\r\n            _uint64varint(bytes1(0x10), _witnessingReward),\r\n            _uint8varint(bytes1(0x18), _numWitnesses),\r\n            _uint64varint(0x20, _witnessingUnitaryFee),\r\n            _uint8varint(0x28, _minWitnessingConsensus),\r\n            _uint64varint(0x30, _witnessingCollateral)\r\n        );\r\n        _request().hash = _request().bytecode.hash();\r\n        emit WitnessingParamsChanged(\r\n            msg.sender,\r\n            _numWitnesses,\r\n            _minWitnessingConsensus,\r\n            _witnessingCollateral,\r\n            _witnessingReward,\r\n            _witnessingUnitaryFee\r\n        );\r\n    }\r\n\r\n    /// @dev Returns pointer to storage slot where State struct is located.\r\n    function _request()\r\n        internal pure\r\n        virtual\r\n        returns (WitnetRequestMalleableBaseContext storage _ptr)\r\n    {\r\n        assembly {\r\n            _ptr.slot :=\r\n                /* keccak256(\"io.witnet.requests.malleable.context\") */\r\n                0x375930152e1d0d102998be6e496b0cee86c9ecd0efef01014ecff169b17dfba7\r\n        }\r\n    }\r\n\r\n    /// @dev Encode uint64 into tagged varint.\r\n    /// @dev See https://developers.google.com/protocol-buffers/docs/encoding#varints.\r\n    /// @param t Tag\r\n    /// @param n Number\r\n    /// @return Marshaled bytes\r\n    function _uint64varint(bytes1 t, uint64 n)\r\n        internal pure\r\n        returns (bytes memory)\r\n    {\r\n        // Count the number of groups of 7 bits\r\n        // We need this pre-processing step since Solidity doesn't allow dynamic memory resizing\r\n        uint64 tmp = n;\r\n        uint64 numBytes = 2;\r\n        while (tmp > 0x7F) {\r\n            tmp = tmp >> 7;\r\n            numBytes += 1;\r\n        }\r\n        bytes memory buf = new bytes(numBytes);\r\n        tmp = n;\r\n        buf[0] = t;\r\n        for (uint64 i = 1; i < numBytes; i++) {\r\n            // Set the first bit in the byte for each group of 7 bits\r\n            buf[i] = bytes1(0x80 | uint8(tmp & 0x7F));\r\n            tmp = tmp >> 7;\r\n        }\r\n        // Unset the first bit of the last byte\r\n        buf[numBytes - 1] &= 0x7F;\r\n        return buf;\r\n    }\r\n\r\n    /// @dev Encode uint8 into tagged varint.\r\n    /// @param t Tag\r\n    /// @param n Number\r\n    /// @return Marshaled bytes\r\n    function _uint8varint(bytes1 t, uint8 n)\r\n        internal pure\r\n        returns (bytes memory)\r\n    {\r\n        return _uint64varint(t, uint64(n));\r\n    }\r\n}\r\n// File: contracts\\requests\\WitnetRequestRandomness.sol\r\ncontract WitnetRequestRandomness is WitnetRequestMalleableBase {\r\n    bytes internal constant _WITNET_RANDOMNESS_BYTECODE_TEMPLATE = hex\"0a0f120508021a01801a0210022202100b\";\r\n\r\n    constructor() {\r\n        initialize(bytes(\"\"));\r\n    }\r\n\r\n    function initialize(bytes memory)\r\n        public\r\n        virtual override\r\n    {\r\n        super.initialize(_WITNET_RANDOMNESS_BYTECODE_TEMPLATE);\r\n    }\r\n}\r\n// File: contracts\\examples\\WitnetRandomness.sol\r\n/// @title WitnetRandomness: A trustless randomness generator and registry, based on the Witnet oracle. \r\n/// @author Witnet Foundation.\r\ncontract WitnetRandomness\r\n    is\r\n        IWitnetRandomness,\r\n        UsingWitnet,\r\n        Clonable\r\n{\r\n    WitnetRequestRandomness public witnetRandomnessRequest;\r\n    uint256 public override latestRandomizeBlock;\r\n\r\n    mapping (uint256 => RandomizeData) internal __randomize_;\r\n    struct RandomizeData {\r\n        address from;\r\n        uint256 prevBlock;\r\n        uint256 nextBlock;\r\n        uint256 witnetQueryId;\r\n    }\r\n\r\n    /// Include an address to specify the immutable WitnetRequestBoard entrypoint address.\r\n    /// @param _wrb The WitnetRequestBoard immutable entrypoint address.\r\n    constructor(WitnetRequestBoard _wrb)\r\n        UsingWitnet(_wrb)\r\n    {\r\n        witnetRandomnessRequest = new WitnetRequestRandomness();\r\n        witnetRandomnessRequest.transferOwnership(msg.sender);\r\n    }\r\n\r\n    /// Returns amount of wei required to be paid as a fee when requesting randomization with a \r\n    /// transaction gas price as the one given.\r\n    function estimateRandomizeFee(uint256 _gasPrice)\r\n        public view\r\n        virtual override\r\n        returns (uint256)\r\n    {\r\n        return _witnetEstimateReward(_gasPrice);\r\n    }\r\n\r\n    /// Retrieves data of a randomization request that got successfully posted to the WRB within a given block.\r\n    /// @dev Returns zero values if no randomness request was actually posted within a given block.\r\n    /// @param _block Block number whose randomness request is being queried for.\r\n    /// @return _from Address from which the latest randomness request was posted.\r\n    /// @return _id Unique request identifier as provided by the WRB.\r\n    /// @return _fee Request's total paid fee.\r\n    /// @return _prevBlock Block number in which a randomness request got posted just before this one. 0 if none.\r\n    /// @return _nextBlock Block number in which a randomness request got posted just after this one, 0 if none.\r\n    function getRandomizeData(uint256 _block)\r\n        external view\r\n        override\r\n        returns (\r\n            address _from,\r\n            uint256 _id,\r\n            uint256 _fee,\r\n            uint256 _prevBlock,\r\n            uint256 _nextBlock\r\n        )\r\n    {\r\n        RandomizeData storage _data = __randomize_[_block];\r\n        _id = _data.witnetQueryId;\r\n        _fee = witnet.readRequestReward(_id);\r\n        _from = _data.from;\r\n        _prevBlock = _data.prevBlock;\r\n        _nextBlock = _data.nextBlock;\r\n    }\r\n\r\n    /// Retrieves the randomness generated upon solving a request that was posted within a given block,\r\n    /// if any, or to the _first_ request posted after that block, otherwise. Should the intended \r\n    /// request happen to be finalized with errors on the Witnet oracle network side, this function \r\n    /// will recursively try to return randomness from the next non-faulty randomization request found \r\n    /// in storage, if any. \r\n    /// @dev Fails if:\r\n    /// @dev   i.   no `randomize()` was not called in either the given block, or afterwards.\r\n    /// @dev   ii.  a request posted in/after given block does exist, but no result has been provided yet.\r\n    /// @dev   iii. all requests in/after the given block were solved with errors.\r\n    /// @param _block Block number from which the search will start.\r\n    function getRandomnessAfter(uint256 _block)\r\n        public view\r\n        virtual override\r\n        returns (bytes32)\r\n    {\r\n        if (__randomize_[_block].from == address(0)) {\r\n            _block = getRandomnessNextBlock(_block);\r\n        }\r\n        uint256 _queryId = __randomize_[_block].witnetQueryId;\r\n        require(_queryId != 0, \"WitnetRandomness: not randomized\");\r\n        require(_witnetCheckResultAvailability(_queryId), \"WitnetRandomness: pending randomize\");\r\n        Witnet.Result memory _witnetResult = _witnetReadResult(_queryId);\r\n        if (witnet.isOk(_witnetResult)) {\r\n            return witnet.asBytes32(_witnetResult);\r\n        } else {\r\n            uint256 _nextRandomizeBlock = __randomize_[_block].nextBlock;\r\n            require(_nextRandomizeBlock != 0, \"WitnetRandomness: faulty randomize\");\r\n            return getRandomnessAfter(_nextRandomizeBlock);\r\n        }\r\n    }\r\n\r\n    /// Tells what is the number of the next block in which a randomization request was posted after the given one. \r\n    /// @param _block Block number from which the search will start.\r\n    /// @return Number of the first block found after the given one, or `0` otherwise.\r\n    function getRandomnessNextBlock(uint256 _block)\r\n        public view\r\n        virtual override\r\n        returns (uint256)\r\n    {\r\n        return ((__randomize_[_block].from != address(0))\r\n            ? __randomize_[_block].nextBlock\r\n            // start search from the latest block\r\n            : _searchNextBlock(_block, latestRandomizeBlock)\r\n        );\r\n    }\r\n\r\n    /// Gets previous block in which a randomness request was posted before the given one.\r\n    /// @param _block Block number from which the search will start. Cannot be zero.\r\n    /// @return First block found before the given one, or `0` otherwise.\r\n    function getRandomnessPrevBlock(uint256 _block)\r\n        public view\r\n        virtual override\r\n        returns (uint256)\r\n    {\r\n        assert(_block > 0);\r\n        uint256 _latest = latestRandomizeBlock;\r\n        return ((_block > _latest)\r\n            ? _latest\r\n            // start search from the latest block\r\n            : _searchPrevBlock(_block, __randomize_[_latest].prevBlock)\r\n        );\r\n    }\r\n\r\n    /// Returns `true` only when the randomness request that got posted within given block was already\r\n    /// reported back from the Witnet oracle, either successfully or with an error of any kind.\r\n    function isRandomized(uint256 _block)\r\n        public view\r\n        virtual override\r\n        returns (bool)\r\n    {\r\n        RandomizeData storage _data = __randomize_[_block];\r\n        return (\r\n            _data.witnetQueryId != 0 \r\n                && _witnetCheckResultAvailability(_data.witnetQueryId)\r\n        );\r\n    }\r\n\r\n    /// Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using \r\n    /// the given `_nonce` value and the randomness returned by `getRandomnessAfter(_block)`. \r\n    /// @dev Fails under same conditions as `getRandomnessAfter(uint256)` may do.\r\n    /// @param _range Range within which the uniformly-distributed random number will be generated.\r\n    /// @param _nonce Nonce value enabling multiple random numbers from the same randomness value.\r\n    /// @param _block Block number from which the search will start.\r\n    function random(uint32 _range, uint256 _nonce, uint256 _block)\r\n        external view\r\n        virtual override\r\n        returns (uint32)\r\n    {\r\n        return random(\r\n            _range,\r\n            _nonce,\r\n            keccak256(\r\n                abi.encode(\r\n                    msg.sender,\r\n                    getRandomnessAfter(_block)\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    /// Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using \r\n    /// the given `_nonce` value and the given `_seed` as a source of entropy.\r\n    /// @param _range Range within which the uniformly-distributed random number will be generated.\r\n    /// @param _nonce Nonce value enabling multiple random numbers from the same randomness value.\r\n    /// @param _seed Seed value used as entropy source.\r\n    function random(uint32 _range, uint256 _nonce, bytes32 _seed)\r\n        public pure\r\n        virtual override\r\n        returns (uint32)\r\n    {\r\n        uint8 _flagBits = uint8(255 - _msbDeBruijn32(_range));\r\n        uint256 _number = uint256(\r\n                keccak256(\r\n                    abi.encode(_seed, _nonce)\r\n                )\r\n            ) & uint256(2 ** _flagBits - 1);\r\n        return uint32((_number * _range) >> _flagBits);\r\n    }\r\n\r\n    /// Requests the Witnet oracle to generate an EVM-agnostic and trustless source of randomness. \r\n    /// Only one randomness request per block will be actually posted to the WRB. Should there \r\n    /// already be a posted request within current block, it will try to upgrade Witnet fee of current's \r\n    /// block randomness request according to current gas price. In both cases, all unused funds shall \r\n    /// be transfered back to the tx sender.\r\n    /// @return _usedFunds Amount of funds actually used from those provided by the tx sender.\r\n    function randomize()\r\n        external payable\r\n        virtual override\r\n        returns (uint256 _usedFunds)\r\n    {\r\n        if (latestRandomizeBlock < block.number) {\r\n            // Post the Witnet Randomness request:\r\n            uint _queryId;\r\n            (_queryId, _usedFunds) = _witnetPostRequest(witnetRandomnessRequest);\r\n            // Keep Randomize data in storage:\r\n            RandomizeData storage _data = __randomize_[block.number];\r\n            _data.witnetQueryId = _queryId;\r\n            _data.from = msg.sender;\r\n            // Update block links:\r\n            uint256 _prevBlock = latestRandomizeBlock;\r\n            _data.prevBlock = _prevBlock;\r\n            __randomize_[_prevBlock].nextBlock = block.number;\r\n            latestRandomizeBlock = block.number;\r\n            // Throw event:\r\n            emit Randomized(\r\n                msg.sender,\r\n                _prevBlock,\r\n                _queryId,\r\n                witnetRandomnessRequest.hash()\r\n            );\r\n            // Transfer back unused tx value:\r\n            if (_usedFunds < msg.value) {\r\n                payable(msg.sender).transfer(msg.value - _usedFunds);\r\n            }\r\n        } else {\r\n            return upgradeRandomizeFee(block.number);\r\n        }\r\n    }\r\n\r\n    /// Increases Witnet fee related to a pending-to-be-solved randomness request, as much as it\r\n    /// may be required in proportion to how much bigger the current tx gas price is with respect the \r\n    /// highest gas price that was paid in either previous fee upgrades, or when the given randomness \r\n    /// request was posted. All unused funds shall be transferred back to the tx sender.\r\n    /// @return _usedFunds Amount of dunds actually used from those provided by the tx sender.\r\n    function upgradeRandomizeFee(uint256 _block)\r\n        public payable\r\n        virtual override\r\n        returns (uint256 _usedFunds)\r\n    {\r\n        RandomizeData storage _data = __randomize_[_block];\r\n        if (_data.witnetQueryId != 0) {\r\n            _usedFunds = _witnetUpgradeReward(_data.witnetQueryId);\r\n            if (_usedFunds > 0) {\r\n                payable(msg.sender).transfer(msg.value - _usedFunds);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- 'Clonable' overriden functions -----------------------------------------------------------------------------\r\n\r\n    /// Deploys and returns the address of a minimal proxy clone that replicates contract\r\n    /// behaviour while using its own EVM storage.\r\n    /// @dev This function should always provide a new address, no matter how many times \r\n    /// @dev is actually called from the same `msg.sender`.\r\n    function clone()\r\n        public\r\n        virtual override\r\n        returns (Clonable _newInstance)\r\n    {\r\n        _newInstance = super.clone();\r\n        _clone(_newInstance);\r\n    }\r\n\r\n    /// Deploys and returns the address of a minimal proxy clone that replicates contract \r\n    /// behaviour while using its own EVM storage.\r\n    /// @dev This function uses the CREATE2 opcode and a `_salt` to deterministically deploy\r\n    /// @dev the clone. Using the same `_salt` multiple time will revert, since\r\n    /// @dev no contract can be deployed more than once at the same address.\r\n    function cloneDeterministic(bytes32 _salt)\r\n        public\r\n        virtual override\r\n        returns (Clonable _newInstance)\r\n    {\r\n        _newInstance = super.cloneDeterministic(_salt);\r\n        _clone(_newInstance);\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- 'Initializable' overriden functions ------------------------------------------------------------------------\r\n\r\n    /// @dev Initializes contract's storage context.\r\n    function initialize(bytes memory _initData)\r\n        public\r\n        virtual override\r\n    {\r\n        require(address(witnetRandomnessRequest) == address(0), \"WitnetRandomness: already initialized\");\r\n        witnetRandomnessRequest = WitnetRequestRandomness(\r\n            abi.decode(\r\n                _initData,\r\n                (address)\r\n            )\r\n        );\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- INTERNAL FUNCTIONS -----------------------------------------------------------------------------------------\r\n\r\n    /// @dev Common steps for both deterministic and non-deterministic cloning.\r\n    function _clone(Clonable _instance) internal {\r\n        address _request = address(witnetRandomnessRequest.clone());\r\n        Ownable(_request).transferOwnership(msg.sender);\r\n        _instance.initialize(abi.encode(_request));\r\n    }\r\n\r\n    /// @dev Returns index of the Most Significant Bit of the given number, applying De Bruijn O(1) algorithm.\r\n    function _msbDeBruijn32(uint32 _v)\r\n        internal pure\r\n        returns (uint8)\r\n    {\r\n        uint8[32] memory _bitPosition = [\r\n                0, 9, 1, 10, 13, 21, 2, 29,\r\n                11, 14, 16, 18, 22, 25, 3, 30,\r\n                8, 12, 20, 28, 15, 17, 24, 7,\r\n                19, 27, 23, 6, 26, 5, 4, 31\r\n            ];\r\n        _v |= _v >> 1;\r\n        _v |= _v >> 2;\r\n        _v |= _v >> 4;\r\n        _v |= _v >> 8;\r\n        _v |= _v >> 16;\r\n        return _bitPosition[\r\n            uint32(_v * uint256(0x07c4acdd)) >> 27\r\n        ];\r\n    }\r\n\r\n    /// @dev Recursively searches for the number of the first block after the given one in which a Witnet randomization request was posted.\r\n    /// @dev Returns 0 if none found.\r\n    function _searchNextBlock(uint256 _target, uint256 _latest) internal view returns (uint256) {\r\n        return ((_target >= _latest) \r\n            ? __randomize_[_latest].nextBlock\r\n            : _searchNextBlock(_target, __randomize_[_latest].prevBlock)\r\n        );\r\n    }\r\n\r\n    /// @dev Recursively searches for the number of the first block before the given one in which a Witnet randomization request was posted.\r\n    /// @dev Returns 0 if none found.\r\n\r\n    function _searchPrevBlock(uint256 _target, uint256 _latest) internal view returns (uint256) {\r\n        return ((_target > _latest)\r\n            ? _latest\r\n            : _searchPrevBlock(_target, __randomize_[_latest].prevBlock)\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract WitnetRequestBoard\",\"name\":\"_wrb\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Clonable\",\"name\":\"self\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Clonable\",\"name\":\"clone\",\"type\":\"address\"}],\"name\":\"Cloned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prevBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"witnetQueryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"witnetRequestHash\",\"type\":\"bytes32\"}],\"name\":\"Randomized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"contract Clonable\",\"name\":\"_newInstance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"cloneDeterministic\",\"outputs\":[{\"internalType\":\"contract Clonable\",\"name\":\"_newInstance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cloned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateRandomizeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getRandomizeData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prevBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getRandomnessAfter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getRandomnessNextBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getRandomnessPrevBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_initData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"isRandomized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRandomizeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_range\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_range\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_usedFunds\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"self\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"upgradeRandomizeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_usedFunds\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"witnet\",\"outputs\":[{\"internalType\":\"contract WitnetRequestBoard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"witnetRandomnessRequest\",\"outputs\":[{\"internalType\":\"contract WitnetRequestRandomness\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WitnetRandomness", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009e4fae1c7ac543a81e4e2a5486a0ddaad8194bda", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5e7c6eb623f943a47c0a36f84a3518c2134b2551ebb99e2d97ffe94a9c6cb5a2"}]}