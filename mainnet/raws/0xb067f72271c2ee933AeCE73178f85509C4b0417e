{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ntentpurchaseoneclaimperowner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n}\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Strings.sol\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\npragma solidity ^0.8.9;\\n\\ninterface NtentArt {\\n    function mint(\\n        address _to,\\n        uint256 _projectId,\\n        uint256 quantity,\\n        address _by\\n    ) external returns (uint256);\\n\\n    function burn(address ownerAddress, uint256 _tokenId)\\n        external\\n        returns (uint256);\\n\\n    function getPricePerTokenInWei(uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function projectTokenInfo(uint256 _projectId)\\n        external\\n        view\\n        returns (\\n            address artistAddress,\\n            uint256 pricePerTokenInWei,\\n            uint256 invocations,\\n            uint256 maxInvocations,\\n            bool active,\\n            address purchaseContract,\\n            address dataContract,\\n            address tokenUriContract,\\n            address transferContract,\\n            bool acceptsMintPass,\\n            uint256 mintPassProjectId\\n        );\\n\\n    function tokenIdToProjectId(uint256 _tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    function tokensOfOwner(address) external view returns (uint256[] memory);\\n\\n    function ntentPercentage() external view returns (uint256);\\n}\\n\\ninterface NtentArtGenesis {\\n    function projectTokenInfo(uint256 _projectId)\\n        external\\n        view\\n        returns (\\n            address artistAddress,\\n            uint256 pricePerTokenInWei,\\n            uint256 invocations,\\n            uint256 maxInvocations,\\n            bool active,\\n            address purchaseContract,\\n            address dataContract,\\n            address tokenUriContract,\\n            bool acceptsMintPass,\\n            uint256 mintPassProjectId\\n        );\\n\\n    function tokenIdToProjectId(uint256 _tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokensOfOwner(address) external view returns (uint256[] memory);\\n}\\n\\ninterface ERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(address _to, uint256 _value)\\n        external\\n        returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function approve(address _spender, uint256 _value)\\n        external\\n        returns (bool success);\\n\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256 remaining);\\n}\\n\\ncontract NtentPurchaseOneClaimPerOwner is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    event TokenBurned(address indexed tokenOwner, uint256 indexed tokenId);\\n\\n    address public ntentGenesisTokenContractAddress;\\n    address public ntentTokenContractAddress;\\n\\n    mapping(uint256 => bool) public isRainbowListedMinting;\\n    mapping(uint256 => uint256) public projectMaxPerAddress;\\n    mapping(uint256 => mapping(address => uint256)) public projectAddressMints;\\n\\n    constructor(\\n        address _ntentGenesisTokenAddress,\\n        address _ntentTokenAddress\\n    ) {\\n        ntentGenesisTokenContractAddress = _ntentGenesisTokenAddress;\\n        ntentTokenContractAddress = _ntentTokenAddress;\\n    }\\n\\n    function updateNtentTokenAddress(address _newAddress) public onlyOwner {\\n        ntentTokenContractAddress = _newAddress;\\n    }\\n\\n    function updateNtentGenesisTokenAddress(address _newAddress)\\n        public\\n        onlyOwner\\n    {\\n        ntentGenesisTokenContractAddress = _newAddress;\\n    }\\n\\n    function toggleRainbowListedMinting(uint256 _projectId) public onlyOwner {\\n        isRainbowListedMinting[_projectId] = !isRainbowListedMinting[\\n            _projectId\\n        ];\\n    }\\n\\n    function updateProjectMaxPerAddress(uint256 _projectId, uint256 _maxMints)\\n        public\\n        onlyOwner\\n    {\\n        projectMaxPerAddress[_projectId] = _maxMints;\\n    }\\n\\n    function getProjectMaxPerAddress(uint256 _projectId)\\n        public\\n        view\\n        returns (uint256 maxMints){\\n        maxMints = projectMaxPerAddress[_projectId];\\n    }\\n\\n    function getRainbowListProjectId(uint256 _projectId)\\n        public\\n        view\\n        returns (uint256 _rainbowListProjectId)\\n    {\\n        require(_projectId > 0, \\\"Project Id doesn't exist\\\");\\n\\n        if (_projectId > 2) {\\n            NtentArt ntentContract = NtentArt(ntentTokenContractAddress);\\n            (, , , , , , , , , , uint256 rainbowListProjectId) = ntentContract\\n                .projectTokenInfo(_projectId);\\n            _rainbowListProjectId = rainbowListProjectId;\\n        } else {\\n            NtentArtGenesis ntentGenesisContract = NtentArtGenesis(\\n                ntentGenesisTokenContractAddress\\n            );\\n            (\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                uint256 rainbowListProjectId\\n            ) = ntentGenesisContract.projectTokenInfo(_projectId);\\n            _rainbowListProjectId = rainbowListProjectId;\\n        }\\n    }\\n\\n    function hasRainbowlistedToken(\\n        address _fromAdress,\\n        uint256 _mintingProjectId\\n    ) public view returns (bool hasToken) {\\n        hasToken = false;\\n        uint256[] memory tokensOfOwner;\\n        uint256 arrLength;\\n\\n        uint256 rainbowListProjectId = getRainbowListProjectId(\\n            _mintingProjectId\\n        );\\n\\n        if (rainbowListProjectId > 2) {\\n            NtentArt ntentContract = NtentArt(ntentTokenContractAddress);\\n\\n            tokensOfOwner = ntentContract.tokensOfOwner(_fromAdress);\\n            arrLength = tokensOfOwner.length;\\n\\n            for (uint256 i; i < arrLength; i++) {\\n                if (\\n                    ntentContract.tokenIdToProjectId(tokensOfOwner[i]) ==\\n                    rainbowListProjectId\\n                ) {\\n                    hasToken = true;\\n                    break;\\n                }\\n            }\\n        } else {\\n            NtentArtGenesis ntentGenesisContract = NtentArtGenesis(\\n                ntentGenesisTokenContractAddress\\n            );\\n\\n            tokensOfOwner = ntentGenesisContract.tokensOfOwner(_fromAdress);\\n            arrLength = tokensOfOwner.length;\\n\\n            for (uint256 i; i < arrLength; i++) {\\n                if (\\n                    ntentGenesisContract.tokenIdToProjectId(tokensOfOwner[i]) ==\\n                    rainbowListProjectId\\n                ) {\\n                    hasToken = true;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function exceedsMaxMints(\\n        address _fromAddress,\\n        uint256 _projectId,\\n        uint256 _numberOfTokens\\n    ) public view returns (bool exceeds) {\\n        exceeds = false;\\n        exceeds = projectAddressMints[_projectId][_fromAddress] >= _numberOfTokens;\\n    }\\n\\n    function isProjectRainbowListed(uint256 _projectId)\\n        public\\n        view\\n        returns (bool isRainbowlisted)\\n    {\\n        isRainbowlisted = isRainbowListedMinting[_projectId];\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n\\n        if(balance > 0){\\n            payable(msg.sender).transfer(balance);\\n        }\\n    }\\n\\n    function teamMint(uint256 _projectId, uint256 _tokenQuantity)\\n        public\\n        onlyOwner\\n    {\\n        require(_tokenQuantity > 0, \\\"Token quantity must greater than zero\\\");\\n\\n        NtentArt ntentContract = NtentArt(ntentTokenContractAddress);\\n\\n        uint256 tokenId = ntentContract.mint(\\n            msg.sender,\\n            _projectId,\\n            _tokenQuantity,\\n            msg.sender\\n        );\\n        require(tokenId > 0, \\\"Mint failed\\\");\\n    }\\n\\n    function claim(\\n        address _purchasedForAddress,\\n        uint256 _projectId,\\n        uint256[] calldata _mintPassTokenIds\\n    ) public nonReentrant {\\n        if (isProjectRainbowListed(_projectId) == true) {\\n            require(\\n                hasRainbowlistedToken(msg.sender, _projectId) == true,\\n                \\\"Not eligle for presale\\\"\\n            );\\n        }\\n        _handleSingleClaimForAllOwners(_purchasedForAddress, _projectId);\\n    }\\n\\n    function _handleSingleClaimForAllOwners(\\n        address _purchasedForAddress,\\n        uint256 _projectId\\n    ) private {\\n        require(\\n            exceedsMaxMints(msg.sender, _projectId, 1) == false,\\n            \\\"You will exceed max allowed mints\\\"\\n        );\\n\\n        NtentArt ntentContract = NtentArt(ntentTokenContractAddress);\\n        NtentArtGenesis ntentGContract = NtentArtGenesis(ntentGenesisTokenContractAddress);\\n\\n        uint256 ntentBalance = ntentContract.tokensOfOwner(msg.sender).length + ntentGContract.tokensOfOwner(msg.sender).length;\\n        require(ntentBalance > 0, \\\"You don't own any eligible tokens\\\");\\n\\n        uint256 tokenId = ntentContract.mint(\\n        _purchasedForAddress,\\n        _projectId,\\n        1,\\n        msg.sender\\n        );\\n\\n        require(tokenId > 0, \\\"Mint failed\\\");\\n\\n        projectAddressMints[_projectId][msg.sender] = 1;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ntentGenesisTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ntentTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_purchasedForAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_mintPassTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"exceedsMaxMints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exceeds\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getProjectMaxPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getRainbowListProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rainbowListProjectId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAdress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintingProjectId\",\"type\":\"uint256\"}],\"name\":\"hasRainbowlistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasToken\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"isProjectRainbowListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRainbowlisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isRainbowListedMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ntentGenesisTokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ntentTokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectAddressMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectMaxPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"teamMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleRainbowListedMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateNtentGenesisTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateNtentTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMints\",\"type\":\"uint256\"}],\"name\":\"updateProjectMaxPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NtentPurchaseOneClaimPerOwner", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "0000000000000000000000008ec319e40e0a91a11cf584053eb5e420c613f01d0000000000000000000000000a1f4c550cd7bc37af841e81fcf3557269f4e912", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}