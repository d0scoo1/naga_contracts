{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.25;\r\n\r\ncontract FairExchange {\r\n    function buy(address _referredBy) public payable returns(uint256);\r\n    function exit() public;\r\n}\r\n\r\ncontract FairProfit {\r\n    FairExchange fairContract = FairExchange(0xdE2b11b71AD892Ac3e47ce99D107788d65fE764e);\r\n    \r\n    /// @notice Any funds sent here are for dividend payment.\r\n    function () public payable {\r\n    }\r\n    \r\n    /// @notice Distribute dividends to the FairExchange contract. Can be called\r\n    ///     repeatedly until practically all dividends have been distributed.\r\n    /// @param rounds How many rounds of dividend distribution do we want?\r\n    function distribute(uint256 rounds) external {\r\n        for (uint256 i = 0; i < rounds; i++) {\r\n            if (address(this).balance < 0.001 ether) {\r\n                // Balance is very low. Not worth the gas to distribute.\r\n                break;\r\n            }\r\n            \r\n            fairContract.buy.value(address(this).balance)(0x0);\r\n            fairContract.exit();\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"rounds\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "FairProfit", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://712ef7ae359207c5f9fe272a939bf323c9835d6d09fc7f20fb235ce6b1b147c0"}]}