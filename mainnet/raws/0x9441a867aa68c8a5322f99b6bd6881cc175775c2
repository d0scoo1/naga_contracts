{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n}\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract Bebop2 {\r\n    event OrderExecuted(\r\n        address maker_address,\r\n        address taker_address,\r\n        address base_token,\r\n        address quote_token,\r\n        uint256 base_quantity,\r\n        uint256 quote_quantity,\r\n        address receiver\r\n    );\r\n\r\n    event OrderExecuted2(\r\n        address maker_address,\r\n        address taker_address,\r\n        address[] base_tokens,\r\n        address quote_token,\r\n        uint256[] base_quantities,\r\n        uint256 quote_quantity,\r\n        address receiver\r\n    );\r\n\r\n    event OrderExecuted3(\r\n        address maker_address,\r\n        address taker_address,\r\n        address base_token,\r\n        address[] quote_tokens,\r\n        uint256 base_quantity,\r\n        uint256[] quote_quantities,\r\n        address receiver\r\n    );\r\n\r\n    uint256 chainId = block.chainid;\r\n    address verifyingContract = address(this);\r\n    string private constant EIP712_DOMAIN =\r\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\r\n\r\n    bytes32 public constant EIP712_DOMAIN_TYPEHASH =\r\n        keccak256(abi.encodePacked(EIP712_DOMAIN));\r\n    address constant ETH_ADD = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    struct Order {\r\n        // one to one\r\n        uint256 expiry;\r\n        address taker_address;\r\n        address base_token;\r\n        address quote_token;\r\n        uint256 base_quantity;\r\n        uint256 quote_quantity;\r\n        address receiver;\r\n    }\r\n\r\n    struct Order2 {\r\n        //Many to one\r\n        uint256 expiry;\r\n        address taker_address;\r\n        bytes32 base_tokens;\r\n        address quote_token;\r\n        bytes32 base_quantities;\r\n        uint256 quote_quantity;\r\n        address receiver;\r\n    }\r\n\r\n    struct Order3 {\r\n        //One to many\r\n        uint256 expiry;\r\n        address taker_address;\r\n        address base_token;\r\n        bytes32 quote_tokens;\r\n        uint256 base_quantity;\r\n        bytes32 quote_quantities;\r\n        address receiver;\r\n    }\r\n\r\n    string constant ORDER_TYPE =\r\n        \"Order(uint256 expiry,address taker_address,address base_token,address quote_token,uint256 base_quantity,uint256 quote_quantity,address receiver)\";\r\n    bytes32 constant ORDER_TYPEHASH = keccak256(abi.encodePacked(ORDER_TYPE));\r\n\r\n    string constant ORDER_TYPE2 =\r\n        \"Order2(uint256 expiry,address taker_address,bytes32 base_tokens,address quote_token,bytes32 base_quantities,uint256 quote_quantity,address receiver)\";\r\n    bytes32 constant ORDER_TYPEHASH2 = keccak256(abi.encodePacked(ORDER_TYPE2));\r\n\r\n    string constant ORDER_TYPE3 =\r\n        \"Order3(uint256 expiry,address taker_address,address base_token,bytes32 quote_tokens,uint256 base_quantity,bytes32 quote_quantities,address receiver)\";\r\n    bytes32 constant ORDER_TYPEHASH3 = keccak256(abi.encodePacked(ORDER_TYPE3));\r\n\r\n    bytes32 private DOMAIN_SEPARATOR;\r\n\r\n    mapping(bytes32 => bool) public Signatures;\r\n\r\n    constructor() {\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                EIP712_DOMAIN_TYPEHASH,\r\n                keccak256(\"Bebop2\"),\r\n                keccak256(\"1\"),\r\n                chainId,\r\n                verifyingContract\r\n            )\r\n        );\r\n    }\r\n\r\n    function getRsv(bytes memory sig)\r\n        public\r\n        pure\r\n        returns (\r\n            bytes32,\r\n            bytes32,\r\n            uint8\r\n        )\r\n    {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := and(mload(add(sig, 65)), 255)\r\n        }\r\n        if (v < 27) v += 27;\r\n        return (r, s, v);\r\n    }\r\n\r\n    function hashTokens(address[] memory tokens) public pure returns (bytes32) {\r\n        return keccak256(abi.encode(tokens));\r\n    }\r\n\r\n    function hashTokenQuantities(uint256[] memory token_quantities)\r\n        public\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encode(token_quantities));\r\n    }\r\n\r\n    function hashOrder(Order memory order) private view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR,\r\n                    keccak256(\r\n                        abi.encode(\r\n                            ORDER_TYPEHASH,\r\n                            order.expiry,\r\n                            order.taker_address,\r\n                            order.base_token,\r\n                            order.quote_token,\r\n                            order.base_quantity,\r\n                            order.quote_quantity,\r\n                            order.receiver\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function hashOrder2(Order2 memory order) private view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR,\r\n                    keccak256(\r\n                        abi.encode(\r\n                            ORDER_TYPEHASH2,\r\n                            order.expiry,\r\n                            order.taker_address,\r\n                            order.base_tokens,\r\n                            order.quote_token,\r\n                            order.base_quantities,\r\n                            order.quote_quantity,\r\n                            order.receiver\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function hashOrder3(Order3 memory order) private view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR,\r\n                    keccak256(\r\n                        abi.encode(\r\n                            ORDER_TYPEHASH3,\r\n                            order.expiry,\r\n                            order.taker_address,\r\n                            order.base_token,\r\n                            order.quote_tokens,\r\n                            order.base_quantity,\r\n                            order.quote_quantities,\r\n                            order.receiver\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function assertValidOrder(Order memory order, bytes memory sig)\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        (bytes32 r, bytes32 s, uint8 v) = getRsv(sig);\r\n        bytes32 h = hashOrder(order);\r\n        address trader = ecrecover(h, v, r, s);\r\n\r\n        require(trader == order.taker_address, \"Invalid signature\");\r\n        require(msg.sender != trader, \"Maker/taker must be different address\");\r\n        require(order.expiry > block.timestamp, \"Signature expired\");\r\n        require(\r\n            order.base_quantity > 0 && order.quote_quantity > 0,\r\n            \"Invalid base/quote amount\"\r\n        );\r\n        require(!Signatures[h], \"Signature reuse\"); //Ensure no replay attacks\r\n\r\n        return h;\r\n    }\r\n\r\n    function assertValidOrder2(\r\n        Order2 memory order,\r\n        bytes memory sig,\r\n        address[] memory base_tokens,\r\n        uint256[] memory base_quantities\r\n    ) public view returns (bytes32) {\r\n        (bytes32 r, bytes32 s, uint8 v) = getRsv(sig);\r\n        bytes32 h = hashOrder2(order);\r\n        address trader = ecrecover(h, v, r, s);\r\n\r\n        require(trader == order.taker_address, \"Invalid signature\");\r\n        require(\r\n            order.base_tokens == keccak256(abi.encode(base_tokens)),\r\n            \"base token hash mismatch\"\r\n        );\r\n        require(\r\n            order.base_quantities == keccak256(abi.encode(base_quantities)),\r\n            \"base quantities hash mismatch\"\r\n        );\r\n        require(msg.sender != trader, \"Maker/taker must be different address\");\r\n        require(order.expiry > block.timestamp, \"Signature expired\");\r\n        require(!Signatures[h], \"Signature reuse\"); //Ensure no replay attacks\r\n\r\n        return h;\r\n    }\r\n\r\n    function assertValidOrder3(\r\n        Order3 memory order,\r\n        bytes memory sig,\r\n        address[] memory quote_tokens,\r\n        uint256[] memory quote_quantities\r\n    ) public view returns (bytes32) {\r\n        (bytes32 r, bytes32 s, uint8 v) = getRsv(sig);\r\n        bytes32 h = hashOrder3(order);\r\n        address trader = ecrecover(h, v, r, s);\r\n\r\n        require(trader == order.taker_address, \"Invalid signature\");\r\n        require(\r\n            order.quote_tokens == keccak256(abi.encode(quote_tokens)),\r\n            \"quote tokens hash mismatch\"\r\n        );\r\n        require(\r\n            order.quote_quantities == keccak256(abi.encode(quote_quantities)),\r\n            \"quote quantities hash mismatch\"\r\n        );\r\n        require(msg.sender != trader, \"Maker/taker must be different address\");\r\n        require(order.expiry > block.timestamp, \"Signature expired\");\r\n        require(!Signatures[h], \"Signature reuse\"); //Ensure no replay attacks\r\n\r\n        return h;\r\n    }\r\n\r\n    function makerTransferFunds(\r\n        address from,\r\n        address to,\r\n        uint256 quantity,\r\n        address token\r\n    ) private returns (bool) {\r\n        if (token == ETH_ADD) {\r\n            require(msg.value == quantity);\r\n            payable(to).transfer(msg.value);\r\n        } else {\r\n            require(IERC20(token).transferFrom(from, to, quantity));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //Can only be called by anyone with the signature from trader\r\n    function SettleOrder(Order memory order, bytes memory sig)\r\n        public\r\n        payable\r\n        returns (bool)\r\n    {\r\n        bytes32 h = assertValidOrder(order, sig);\r\n        Signatures[h] = true;\r\n        require(\r\n            makerTransferFunds(\r\n                msg.sender,\r\n                order.receiver,\r\n                order.quote_quantity,\r\n                order.quote_token\r\n            )\r\n        );\r\n        require(\r\n            IERC20(order.base_token).transferFrom(\r\n                order.taker_address,\r\n                msg.sender,\r\n                order.base_quantity\r\n            )\r\n        );\r\n\r\n        emit OrderExecuted(\r\n            msg.sender,\r\n            order.taker_address,\r\n            order.base_token,\r\n            order.quote_token,\r\n            order.base_quantity,\r\n            order.quote_quantity,\r\n            order.receiver\r\n        );\r\n        return true;\r\n    }\r\n\r\n    //Can only be called by anyone with the signature from trader\r\n    function SettleOrder2(\r\n        Order2 memory order,\r\n        bytes memory sig,\r\n        address[] memory base_tokens,\r\n        uint256[] memory base_quantities\r\n    ) public payable returns (bool) {\r\n        bytes32 h = assertValidOrder2(order, sig, base_tokens, base_quantities);\r\n        Signatures[h] = true;\r\n\r\n        require(\r\n            makerTransferFunds(\r\n                msg.sender,\r\n                order.receiver,\r\n                order.quote_quantity,\r\n                order.quote_token\r\n            )\r\n        );\r\n\r\n        for (uint256 i = 0; i < base_tokens.length; i++) {\r\n            require(\r\n                IERC20(address(base_tokens[i])).transferFrom(\r\n                    order.taker_address,\r\n                    msg.sender,\r\n                    base_quantities[i]\r\n                )\r\n            );\r\n        }\r\n\r\n        emit OrderExecuted2(\r\n            msg.sender,\r\n            order.taker_address,\r\n            base_tokens,\r\n            order.quote_token,\r\n            base_quantities,\r\n            order.quote_quantity,\r\n            order.receiver\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    //Can only be called by anyone with the signature from trader\r\n    function SettleOrder3(\r\n        Order3 memory order,\r\n        bytes memory sig,\r\n        address[] memory quote_tokens,\r\n        uint256[] memory quote_quantities\r\n    ) public payable returns (bool) {\r\n        bytes32 h = assertValidOrder3(\r\n            order,\r\n            sig,\r\n            quote_tokens,\r\n            quote_quantities\r\n        );\r\n        Signatures[h] = true;\r\n\r\n        for (uint256 i = 0; i < quote_tokens.length; i++) {\r\n            require(\r\n                makerTransferFunds(\r\n                    msg.sender,\r\n                    order.receiver,\r\n                    quote_quantities[i],\r\n                    quote_tokens[i]\r\n                )\r\n            );\r\n        }\r\n\r\n        require(\r\n            IERC20(address(order.base_token)).transferFrom(\r\n                order.taker_address,\r\n                msg.sender,\r\n                order.base_quantity\r\n            )\r\n        );\r\n\r\n        emit OrderExecuted3(\r\n            msg.sender,\r\n            order.taker_address,\r\n            order.base_token,\r\n            quote_tokens,\r\n            order.base_quantity,\r\n            quote_quantities,\r\n            order.receiver\r\n        );\r\n\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"base_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quote_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"base_tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quote_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"base_quantities\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"OrderExecuted2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"base_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"quote_tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quote_quantities\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"OrderExecuted3\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct Bebop2.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"SettleOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"base_tokens\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"quote_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"base_quantities\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"quote_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct Bebop2.Order2\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"base_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_quantities\",\"type\":\"uint256[]\"}],\"name\":\"SettleOrder2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"quote_tokens\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"base_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"quote_quantities\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct Bebop2.Order3\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"quote_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quote_quantities\",\"type\":\"uint256[]\"}],\"name\":\"SettleOrder3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"Signatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct Bebop2.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"assertValidOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"base_tokens\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"quote_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"base_quantities\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"quote_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct Bebop2.Order2\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"base_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_quantities\",\"type\":\"uint256[]\"}],\"name\":\"assertValidOrder2\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"quote_tokens\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"base_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"quote_quantities\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct Bebop2.Order3\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"quote_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quote_quantities\",\"type\":\"uint256[]\"}],\"name\":\"assertValidOrder3\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"getRsv\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"token_quantities\",\"type\":\"uint256[]\"}],\"name\":\"hashTokenQuantities\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"hashTokens\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Bebop2", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e18f57bc32b88f71cf6910e93f98ca4ada26f14aa16249d6ab936336abe712d0"}]}