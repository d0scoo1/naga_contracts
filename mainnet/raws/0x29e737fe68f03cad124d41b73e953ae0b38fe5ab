{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.25;\r\n\r\ncontract Exchange {\r\n    function buy(address _referredBy) public payable returns(uint256);\r\n    function exit() public;\r\n}\r\n\r\ncontract DICEDividends {\r\n    Exchange diceContract = Exchange(0xdEB2AA0478b2758e81d75A896E1257d3984D30D5);\r\n\r\n    /// @notice Any funds sent here are for dividend payment.\r\n    function () public payable {\r\n    }\r\n\r\n    /// @notice Distribute dividends to the exchange. Can be called\r\n    ///     repeatedly until practically all dividends have been distributed.\r\n    /// @param rounds How many rounds of dividend distribution do we want?\r\n    function distribute(uint256 rounds) external {\r\n        for (uint256 i = 0; i < rounds; i++) {\r\n            if (address(this).balance < 0.001 ether) {\r\n                // Balance is very low. Not worth the gas to distribute.\r\n                break;\r\n            }\r\n\r\n            diceContract.buy.value(address(this).balance)(0x0);\r\n            diceContract.exit();\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"rounds\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "DICEDividends", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://55186c275ac6b0313086fc905d019a44bf3df45db49e7d0a8f2972bcdec2a342"}]}