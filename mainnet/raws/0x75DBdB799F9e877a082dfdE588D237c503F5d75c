{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: NONE\n\npragma solidity 0.5.10;\n\n\n\n// Part: ICurveDepositGate\n\n// external interfaces\ncontract ICurveDepositGate {\n    function add_liquidity(address _pool, uint256[4] memory _deposit_amounts, uint256 _min_mint_amount) public;\n    function remove_liquidity_one_coin(address _pool, uint256 _burn_amount, int128 i, uint256 _min_amount) public;\n}\n\n// Part: ICurvePool\n\n// legacy interface for this\ncontract ICurvePool {\n    function deposit(uint256 _amount) public;\n    function withdraw(uint256 _amount) public;\n    function earnReward(address[] memory yieldtokens) public;\n\n    function get_virtual_price() public view returns(uint256);\n    function get_lp_token_balance() public view returns(uint256);\n    function get_lp_token_addr() public view returns(address);\n\n    function setController(address, address) public;\n}\n\n// Part: ICurveVirtualPrive\n\ncontract ICurveVirtualPrive{\n    function get_virtual_price() public view returns(uint256);\n}\n\n// Part: IERC20\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: IFeiRewardsDistributor\n\ncontract IFeiRewardsDistributor {\n    function claimRewards(address holder, address[] memory cTokens) public;\n}\n\n// Part: Ownable\n\ncontract Ownable {\n    address private _contract_owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = msg.sender;\n        _contract_owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _contract_owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_contract_owner, newOwner);\n        _contract_owner = newOwner;\n    }\n}\n\n// Part: SafeMath\n\nlibrary SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a, \"add\");\n    }\n    function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {\n        require(b <= a, s);\n        c = a - b;\n    }\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a, \"sub\");\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) public pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b, \"mul\");\n    }\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\n        require(b > 0, \"div\");\n        c = a / b;\n    }\n    function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {\n        require(b > 0, s);\n        c = a / b;\n    }\n}\n\n// Part: IFeiDelegator\n\ncontract IFeiDelegator is IERC20 {\n    function balanceOfUnderlying(address owner) public returns(uint256);\n    function mint(uint256 mintAmount) public;\n    function redeemUnderlying(uint256 redeemAmount) public;\n}\n\n// File: CFPool.sol\n\ncontract CFPoolV3 is Ownable, ICurvePool{\n    using SafeMath for uint256;\n\n    address public controller;\n    address public vault;\n\n    IERC20 public target_token;\n    ICurveDepositGate public curve_deposit_gate;\n    IERC20 public curve_lp_token;\n    IFeiDelegator public fei_delegator;\n    IFeiRewardsDistributor public fei_rewards_distributor;\n    \n    uint256 public underlying_curve_lp_balance;   // curve lp\n\n    constructor(address _fei_delegator, address _fei_rewards_distributor) public {\n        // pool spcificly build for Fei.money\n        target_token = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n        curve_deposit_gate = ICurveDepositGate(0xA79828DF1850E8a3A3064576f380D90aECDD3359);\n        curve_lp_token = IERC20(0x06cb22615BA53E60D67Bf6C341a0fD5E718E1655);\n        fei_delegator = IFeiDelegator(_fei_delegator); // passing as param for test purpose\n        fei_rewards_distributor = IFeiRewardsDistributor(_fei_rewards_distributor);\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == controller || msg.sender == vault);\n        _;\n    }\n    \n    /**\n     * on start, target token already at dealer\n     * deposit to curve'pool and then fei's pool\n     */\n    function deposit(uint256 amount) public onlyAdmin {\n        // deposit to curve's f3 pool\n        target_token.approve(address(curve_deposit_gate), 0);\n        target_token.approve(address(curve_deposit_gate), amount);\n        curve_deposit_gate.add_liquidity(address(curve_lp_token), [0, 0, amount, 0], 0);\n        \n        // deposit to fei's pool\n        uint256 curve_lp_amount = curve_lp_token.balanceOf(address(this));\n        curve_lp_token.approve(address(fei_delegator), 0);\n        curve_lp_token.approve(address(fei_delegator), curve_lp_amount);\n        fei_delegator.mint(curve_lp_amount);\n\n        underlying_curve_lp_balance = underlying_curve_lp_balance+curve_lp_amount;\n    }\n\n    /**\n     * withdraw from fei's pool\n     * withdraw from curve's pool\n     * send back to vault\n     * @param amount in fei's lp token\n     */\n    function withdraw(uint256 amount) public onlyAdmin {\n        // withdraw from fei's pool\n        // require(amount < fei_delegator.balanceOf(address(this)))\n        fei_delegator.redeemUnderlying(amount);\n        // withdraw from curve's pool\n        uint256 curve_lp_amount = curve_lp_token.balanceOf(address(this));\n        curve_lp_token.approve(address(curve_deposit_gate), 0);\n        curve_lp_token.approve(address(curve_deposit_gate), curve_lp_amount);\n        curve_deposit_gate.remove_liquidity_one_coin(address(curve_lp_token), curve_lp_amount, 2, 0);\n\n        target_token.transfer(vault, target_token.balanceOf(address(this)));\n        underlying_curve_lp_balance = underlying_curve_lp_balance-curve_lp_amount;\n    }\n\n    /**\n     * mint rewards\n     * transfer to controller\n     */\n    function earnReward(address[] memory yield_tokens) public onlyAdmin {\n        address[] memory ctokens = new address[](1);\n        ctokens[0] = address(fei_delegator);\n        fei_rewards_distributor.claimRewards(address(this), ctokens);\n\n        for (uint i = 0; i < yield_tokens.length; i++) {\n            uint256 balance = IERC20(yield_tokens[i]).balanceOf(address(this));\n            IERC20(yield_tokens[i]).transfer(controller, balance);\n        }\n    }\n\n    \n    function get_lp_token_balance() public view returns(uint256) {\n        return underlying_curve_lp_balance;\n    }\n    function get_lp_token_addr() public view returns(address) {\n        return address(fei_delegator);\n    }\n    function get_virtual_price() public view returns(uint256) {\n        uint256 vir = ICurveVirtualPrive(address(curve_lp_token)).get_virtual_price();\n        //uint256 b = fei_delegator.balanceOf(address(this));\n        //return underlying_curve_lp_balance.safeMul(vir);\n        return vir;\n    }\n\n    function setController(address _controller) public onlyOwner {\n        controller = _controller;\n    }\n\n    function setController(address _controller, address _vault) public onlyOwner{\n        controller = _controller;\n        vault = _vault;\n    }\n\n    function setVault(address _vault) public onlyOwner {\n        vault = _vault;\n    }\n}\n", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"fei_rewards_distributor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve_deposit_gate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying_curve_lp_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_lp_token_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_lp_token_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fei_delegator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_virtual_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve_lp_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yield_tokens\",\"type\":\"address[]\"}],\"name\":\"earnReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fei_delegator\",\"type\":\"address\"},{\"name\":\"_fei_rewards_distributor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "CFPoolV3", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bfb6f7532d2db0fe4d83abb001c5c2b0842af4db00000000000000000000000073f16f0c0cd1a078a54894974c5c054d8dc1a3d7", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}