{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n// Take ownership of a wallet if a claim for it exists in a merkle root.\r\ninterface IMerkleWalletClaimer {\r\n    // Returns the address of the wallet factory.\r\n    function factory() external view returns (address);\r\n    // Returns the merkle root of the merkle tree containing wallets available to claim.\r\n    function merkleRoot() external view returns (bytes32);\r\n    // Returns true if the index has been marked claimed.\r\n    function isClaimed(uint256 index) external view returns (bool);\r\n    // Claim the wallet. Reverts if the inputs are invalid. Deploys the wallet if necessary using the initial signing key.\r\n    function claim(uint256 index, address wallet, address initialSigningKey, bytes calldata claimantSignature, bytes32[] calldata merkleProof) external;\r\n    // Claim the wallet on behalf of a specified owner.\r\n    function claimFor(address owner, uint256 index, address wallet, address initialSigningKey, bytes calldata claimantSignature, bytes32[] calldata merkleProof) external;\r\n    // This event is triggered whenever a call to #claim succeeds.\r\n    event Claimed(uint256 index, address wallet, address owner);\r\n}\r\n\r\n/**\r\n * @dev Partial interface of the wallet factory.\r\n */\r\ninterface WalletFactory {\r\n    /**\r\n     * @dev Deploys a new wallet.\r\n     */\r\n    function newSmartWallet(\r\n        address userSigningKey\r\n    ) external returns (address wallet);\r\n}\r\n\r\n/**\r\n * @dev Partial interface of the wallet.\r\n */\r\ninterface Wallet {\r\n    /**\r\n     * @dev Sets ownership on the wallet.\r\n     */\r\n    function claimOwnership(address owner) external;\r\n}\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle trees (hash trees),\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = _efficientHash(computedHash, proofElement);\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = _efficientHash(proofElement, computedHash);\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\nlibrary ECDSA {\r\n  function recover(\r\n    bytes32 hash, bytes memory signature\r\n  ) internal pure returns (address) {\r\n    if (signature.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    assembly {\r\n      r := mload(add(signature, 0x20))\r\n      s := mload(add(signature, 0x40))\r\n      v := byte(0, mload(add(signature, 0x60)))\r\n    }\r\n\r\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n      return address(0);\r\n    }\r\n\r\n    if (v != 27 && v != 28) {\r\n      return address(0);\r\n    }\r\n\r\n    return ecrecover(hash, v, r, s);\r\n  }\r\n\r\n  function toEthSignedMessageHash(address subject) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n20\", subject));\r\n  }\r\n}\r\n\r\n/// @author 0age\r\ncontract MerkleWalletClaimer is IMerkleWalletClaimer {\r\n    using ECDSA for address;\r\n    using ECDSA for bytes32;\r\n    address public immutable override factory;\r\n    bytes32 public immutable override merkleRoot;\r\n\r\n    mapping (address => address[]) public claimedWalletsByOwner;\r\n\r\n    // This is a packed array of booleans.\r\n    mapping(uint256 => uint256) private claimedBitMap;\r\n\r\n    constructor(address factory_, bytes32 merkleRoot_) {\r\n        factory = factory_;\r\n        merkleRoot = merkleRoot_;\r\n    }\r\n\r\n    function claim(\r\n        uint256 index,\r\n        address wallet,\r\n        address initialSigningKey,\r\n        bytes calldata claimantSignature,\r\n        bytes32[] calldata merkleProof\r\n    ) external override {\r\n        _claim(msg.sender, index, wallet, initialSigningKey, claimantSignature, merkleProof);\r\n    }\r\n\r\n    function claimFor(\r\n        address owner,\r\n        uint256 index,\r\n        address wallet,\r\n        address initialSigningKey,\r\n        bytes calldata claimantSignature,\r\n        bytes32[] calldata merkleProof\r\n    ) external override {\r\n        _claim(owner, index, wallet, initialSigningKey, claimantSignature, merkleProof);\r\n    }\r\n\r\n    function isClaimed(uint256 index) public view override returns (bool) {\r\n        uint256 claimedWordIndex = index >> 8;\r\n        uint256 claimedBitIndex = index & 0xff;\r\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\r\n        uint256 mask = (1 << claimedBitIndex);\r\n        return claimedWord & mask != 0;\r\n    }\r\n\r\n    function _setClaimed(uint256 index) private {\r\n        uint256 claimedWordIndex = index >> 8;\r\n        uint256 claimedBitIndex = index & 0xff;\r\n        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\r\n    }\r\n\r\n    function _deployIfNecessary(address wallet, address initialSigningKey) private {\r\n        // Deploy the wallet if necessary.\r\n        uint256 walletCode;\r\n        assembly { walletCode := extcodesize(wallet) }\r\n        if (walletCode == 0) {\r\n            WalletFactory(factory).newSmartWallet(initialSigningKey);\r\n\r\n            assembly { walletCode := extcodesize(wallet) }\r\n            require(\r\n                walletCode != 0,\r\n                'MerkleWalletClaimer: Invalid initial signing key supplied.'\r\n            );\r\n        }\r\n    }\r\n\r\n    function _claim(\r\n        address owner,\r\n        uint256 index,\r\n        address wallet,\r\n        address initialSigningKey,\r\n        bytes calldata claimantSignature,\r\n        bytes32[] calldata merkleProof\r\n    ) private {\r\n        require(!isClaimed(index), 'MerkleWalletClaimer: Wallet already claimed.');\r\n\r\n        // Claimant signs an EIP-191 v0x45 message consisting of the designated owner.\r\n        bytes32 messageHash = owner.toEthSignedMessageHash();\r\n\r\n        // Recover the claimant from the signature and cast the type.\r\n        uint256 claimantKey = uint256(uint160(messageHash.recover(claimantSignature)));\r\n\r\n        // Verify the merkle proof.\r\n        bytes32 node = keccak256(abi.encodePacked(index, wallet, claimantKey));\r\n        require(\r\n            MerkleProof.verify(merkleProof, merkleRoot, node),\r\n            'MerkleWalletClaimer: Invalid proof.'\r\n        );\r\n\r\n        // Mark the wallet as claimed.\r\n        _setClaimed(index);\r\n\r\n        // Deploy the wallet if necessary.\r\n        _deployIfNecessary(wallet, initialSigningKey);\r\n\r\n        // Set the caller as the owner on the wallet.\r\n        Wallet(wallet).claimOwnership(owner);\r\n\r\n        // Track wallet as having been claimed by the owner and emit an event.\r\n        claimedWalletsByOwner[owner].push(wallet);\r\n        emit Claimed(index, wallet, owner);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialSigningKey\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"claimantSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialSigningKey\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"claimantSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedWalletsByOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MerkleWalletClaimer", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fc00c80b0000007f73004edb00094cad80626d8d58b21b0752dbf12949ea81305d33df0546ed6a59972a79cd0f0afa36c3f72f92", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b6b21a973dcc79ad30cdefe2a1c0c7e141968069db4ff5889dcaaf3a568eece"}]}