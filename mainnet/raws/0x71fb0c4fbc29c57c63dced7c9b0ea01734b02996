{"status": "1", "message": "OK", "result": [{"SourceCode": "// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.13;\r\n\r\n/**\r\n * @title Drengr payment\r\n * @notice This contract receive payments on behalf of users. Users that have received payments can withdraw them.\r\n * Payments are verified by an API that acts like a payment processor, for payments on the blockchain.\r\n */\r\ncontract DrengrPayment is ReentrancyGuard {\r\n\r\n    //Maps funds available for every address to withdraw\r\n    mapping(address => uint256) public funds;\r\n\r\n    //Emitted when a payment has been received\r\n    event Payment(address indexed from, address indexed to, uint256 amount);\r\n    //Emitted when a withdraw have been performed\r\n    event Withdraw(address indexed from, uint256 amount);\r\n\r\n    /**\r\n     * @dev We can't receive funds via the fallback function because we could not track for whom the payment is sent.\r\n     */\r\n    fallback() external{\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a payment for the 'from' address to the 'to' address. Enables other adress to pay on 'from' behalf.\r\n     * @param from the address that will be considered as having paid\r\n     * @param to the address that will receive the funds\r\n     * @return bool true\r\n     */\r\n    function pay(address from, address to) public payable nonReentrant returns(bool){\r\n\r\n        require(msg.value > 0, \"An amount is required\");\r\n\r\n        funds[to] += msg.value;\r\n\r\n        emit Payment(from, to, msg.value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all the funds that msg.sender has acquired\r\n     * @return bool true\r\n     */\r\n    function withdraw() public nonReentrant returns(bool) {\r\n\r\n        uint256 amount = funds[msg.sender];\r\n\r\n        funds[msg.sender] = 0;\r\n\r\n        emit Withdraw(msg.sender, amount);\r\n\r\n        payable(msg.sender).transfer(amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"funds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"pay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DrengrPayment", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a8ece90c63040987af68d5956534118385c5231291c55dc24c81621d913fc233"}]}