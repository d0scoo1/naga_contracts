{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract TokenVesting is Ownable, ReentrancyGuard{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    struct VestingSchedule{\r\n        bool initialized;\r\n        // beneficiary of tokens after they are released\r\n        address  beneficiary;\r\n        // cliff period in seconds\r\n        uint256  cliff;\r\n        // start time of the vesting period\r\n        uint256  start;\r\n        // duration of the vesting period in seconds\r\n        uint256  duration;\r\n        // duration of a slice period for the vesting in seconds\r\n        uint256 slicePeriodSeconds;\r\n        // whether or not the vesting is revocable\r\n        bool  revocable;\r\n        // total amount of tokens to be released at the end of the vesting\r\n        uint256 amountTotal;\r\n        // amount of tokens released\r\n        uint256  released;\r\n        // whether or not the vesting has been revoked\r\n        bool revoked;\r\n    }\r\n\r\n    IERC20 immutable private _token;\r\n\r\n    bytes32[] private vestingSchedulesIds;\r\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\r\n    uint256 private vestingSchedulesTotalAmount;\r\n    mapping(address => uint256) private holdersVestingCount;\r\n\r\n    event Released(uint256 amount);\r\n    event Revoked();\r\n\r\n    modifier onlyIfVestingScheduleExists(bytes32 vestingScheduleId) {\r\n        require(vestingSchedules[vestingScheduleId].initialized == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfVestingScheduleNotRevoked(bytes32 vestingScheduleId) {\r\n        require(vestingSchedules[vestingScheduleId].initialized == true);\r\n        require(vestingSchedules[vestingScheduleId].revoked == false);\r\n        _;\r\n    }\r\n\r\n    constructor(address token_) {\r\n        require(token_ != address(0x0));\r\n        _token = IERC20(token_);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    function getVestingSchedulesCountByBeneficiary(address _beneficiary) external view returns(uint256){\r\n        return holdersVestingCount[_beneficiary];\r\n    }\r\n\r\n    function getVestingIdAtIndex(uint256 index) external view returns(bytes32){\r\n        require(index < getVestingSchedulesCount(), \"TokenVesting: index out of bounds\");\r\n        return vestingSchedulesIds[index];\r\n    }\r\n\r\n    function getVestingScheduleByAddressAndIndex(address holder, uint256 index) external view returns(VestingSchedule memory){\r\n        return getVestingSchedule(computeVestingScheduleIdForAddressAndIndex(holder, index));\r\n    }\r\n\r\n    function getVestingSchedulesTotalAmount() external view returns(uint256) {\r\n        return vestingSchedulesTotalAmount;\r\n    }\r\n\r\n    function getToken() external view returns(address){\r\n        return address(_token);\r\n    }\r\n\r\n    /**\r\n    * @notice Creates a new vesting schedule for a beneficiary.\r\n    * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n    * @param _start start time of the vesting period\r\n    * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n    * @param _duration duration in seconds of the period in which the tokens will vest\r\n    * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\r\n    * @param _revocable whether the vesting is revocable or not\r\n    * @param _amount total amount of tokens to be released at the end of the vesting\r\n    */\r\n    function createVestingSchedule(\r\n        address _beneficiary,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _slicePeriodSeconds,\r\n        bool _revocable,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        onlyOwner{\r\n        require(\r\n            this.getWithdrawableAmount() >= _amount,\r\n            \"TokenVesting: cannot create vesting schedule because not sufficient tokens\"\r\n        );\r\n        require(_duration > 0, \"TokenVesting: duration must be > 0\");\r\n        require(_amount > 0, \"TokenVesting: amount must be > 0\");\r\n        require(_slicePeriodSeconds >= 1, \"TokenVesting: slicePeriodSeconds must be >= 1\");\r\n        bytes32 vestingScheduleId = this.computeNextVestingScheduleIdForHolder(_beneficiary);\r\n        uint256 cliff = _start.add(_cliff);\r\n        vestingSchedules[vestingScheduleId] = VestingSchedule(\r\n            true,\r\n            _beneficiary,\r\n            cliff,\r\n            _start,\r\n            _duration,\r\n            _slicePeriodSeconds,\r\n            _revocable,\r\n            _amount,\r\n            0,\r\n            false\r\n        );\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.add(_amount);\r\n        vestingSchedulesIds.push(vestingScheduleId);\r\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\r\n        holdersVestingCount[_beneficiary] = currentVestingCount.add(1);\r\n    }\r\n\r\n    function revoke(bytes32 vestingScheduleId)\r\n        public\r\n        onlyOwner\r\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId){\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\r\n        require(vestingSchedule.revocable == true, \"TokenVesting: vesting is not revocable\");\r\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\r\n        if(vestedAmount > 0){\r\n            release(vestingScheduleId, vestedAmount);\r\n        }\r\n        uint256 unreleased = vestingSchedule.amountTotal.sub(vestingSchedule.released);\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.sub(unreleased);\r\n        vestingSchedule.revoked = true;\r\n    }\r\n\r\n    function withdraw(uint256 amount)\r\n        public\r\n        nonReentrant\r\n        onlyOwner{\r\n        require(this.getWithdrawableAmount() >= amount, \"TokenVesting: not enough withdrawable funds\");\r\n        _token.safeTransfer(owner(), amount);\r\n    }\r\n\r\n    function release(\r\n        bytes32 vestingScheduleId,\r\n        uint256 amount\r\n    )\r\n        public\r\n        nonReentrant\r\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId){\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\r\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\r\n        bool isOwner = msg.sender == owner();\r\n        require(\r\n            isBeneficiary || isOwner,\r\n            \"TokenVesting: only beneficiary and owner can release vested tokens\"\r\n        );\r\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\r\n        require(vestedAmount >= amount, \"TokenVesting: cannot release tokens, not enough vested tokens\");\r\n        vestingSchedule.released = vestingSchedule.released.add(amount);\r\n        address payable beneficiaryPayable = payable(vestingSchedule.beneficiary);\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.sub(amount);\r\n        _token.safeTransfer(beneficiaryPayable, amount);\r\n    }\r\n\r\n    function getVestingSchedulesCount()\r\n        public\r\n        view\r\n        returns(uint256){\r\n        return vestingSchedulesIds.length;\r\n    }\r\n\r\n    function computeReleasableAmount(bytes32 vestingScheduleId)\r\n        public\r\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId)\r\n        view\r\n        returns(uint256){\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\r\n        return _computeReleasableAmount(vestingSchedule);\r\n    }\r\n\r\n    function getVestingSchedule(bytes32 vestingScheduleId)\r\n        public\r\n        view\r\n        returns(VestingSchedule memory){\r\n        return vestingSchedules[vestingScheduleId];\r\n    }\r\n\r\n    function getWithdrawableAmount()\r\n        public\r\n        view\r\n        returns(uint256){\r\n        return _token.balanceOf(address(this)).sub(vestingSchedulesTotalAmount);\r\n    }\r\n\r\n    function computeNextVestingScheduleIdForHolder(address holder)\r\n        public\r\n        view\r\n        returns(bytes32){\r\n        return computeVestingScheduleIdForAddressAndIndex(holder, holdersVestingCount[holder]);\r\n    }\r\n\r\n    function getLastVestingScheduleForHolder(address holder)\r\n        public\r\n        view\r\n        returns(VestingSchedule memory){\r\n        return vestingSchedules[computeVestingScheduleIdForAddressAndIndex(holder, holdersVestingCount[holder] - 1)];\r\n    }\r\n\r\n    function computeVestingScheduleIdForAddressAndIndex(address holder, uint256 index)\r\n        public\r\n        pure\r\n        returns(bytes32){\r\n        return keccak256(abi.encodePacked(holder, index));\r\n    }\r\n\r\n    function _computeReleasableAmount(VestingSchedule memory vestingSchedule)\r\n    internal\r\n    view\r\n    returns(uint256){\r\n        uint256 currentTime = getCurrentTime();\r\n        if ((currentTime < vestingSchedule.cliff) || vestingSchedule.revoked == true) {\r\n            return 0;\r\n        } else if (currentTime >= vestingSchedule.start.add(vestingSchedule.duration)) {\r\n            return vestingSchedule.amountTotal.sub(vestingSchedule.released);\r\n        } else {\r\n            uint256 timeFromStart = currentTime.sub(vestingSchedule.start);\r\n            uint secondsPerSlice = vestingSchedule.slicePeriodSeconds;\r\n            uint256 vestedSlicePeriods = timeFromStart.div(secondsPerSlice);\r\n            uint256 vestedSeconds = vestedSlicePeriods.mul(secondsPerSlice);\r\n            uint256 vestedAmount = vestingSchedule.amountTotal.mul(vestedSeconds).div(vestingSchedule.duration);\r\n            vestedAmount = vestedAmount.sub(vestingSchedule.released);\r\n            return vestedAmount;\r\n        }\r\n    }\r\n\r\n    function getCurrentTime()\r\n        internal\r\n        virtual\r\n        view\r\n        returns(uint256){\r\n        return block.timestamp;\r\n    }\r\n\r\n}\r\n\r\n\r\n// contract MockTokenVesting is TokenVesting{\r\n\r\n//     uint256 mockTime = 0;\r\n\r\n//     constructor(address token_) TokenVesting(token_){\r\n//     }\r\n\r\n//     function setCurrentTime(uint256 _time)\r\n//         external{\r\n//         mockTime = _time;\r\n//     }\r\n\r\n//     function getCurrentTime()\r\n//         internal\r\n//         virtual\r\n//         override\r\n//         view\r\n//         returns(uint256){\r\n//         return mockTime;\r\n//     }\r\n// }", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revoked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"computeNextVestingScheduleIdForHolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getLastVestingScheduleForHolder\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct TokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingIdAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct TokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByAddressAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct TokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingSchedulesCountByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenVesting", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008e964e35a76103af4c7d7318e1b1a82c682ae296", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d0ac6fdd1f5f0609e382c75d57a52d766184bd5cdf3201edac1c3f849b3d4f57"}]}