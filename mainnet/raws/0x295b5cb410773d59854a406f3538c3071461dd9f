{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\nhttps://www.stiltonmusk.com\r\nhttps://t.me/stiltonmusk\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// File: contracts/Ownable.sol\r\n\r\nabstract contract Ownable {\r\n    address _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Stake.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nstruct Stake {\r\n    uint256 scores; // scores of the stake\r\n    uint256 lastGrantIntervalNumber; // interval number, when last granted reward\r\n    uint256[] nft;\r\n}\r\n\r\n// File: contracts/IERC721.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC721 {\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n// File: contracts/IERC20.sol\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: contracts/RewardPoolBase.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\n\r\n\r\n\r\n\r\nabstract contract RewardPoolBase is Ownable {\r\n    mapping(address => Stake) internal staks; // token staks by account\r\n    uint256 public staksScoresSum; // total staks scores\r\n    uint256 public claimStaksScoresSum; // total staked scores, in use for claim reward pool\r\n    uint256 public claimRewardPool; // reward pool to claim\r\n    uint256 public claimRewardPoolStartCount; // reward pool to claim on start\r\n    uint256 public nextIntervalTime; // time of new interval\r\n    uint256 public intervalMinutes = 10080; // interval length\r\n    uint256 public intervalNumber; // number of current interval (if pool is not started the value is 0)\r\n    uint256 public totalRewardClaimed; // total, that claimed by users\r\n    bool public enabled; // if true, than pool is enabled\r\n\r\n    function start() external onlyOwner {\r\n        require(intervalNumber == 0, \"reward pool alredy started\");\r\n        beforeStart();\r\n        nextIntervalTime = block.timestamp + intervalMinutes * 1 minutes;\r\n        intervalNumber = 1;\r\n        claimRewardPoolStartCount = claimRewardPool;\r\n        enabled = true;\r\n    }\r\n\r\n    function setIntervalTimer(uint256 newIntervalMinutes) external onlyOwner {\r\n        intervalMinutes = newIntervalMinutes;\r\n    }\r\n\r\n    function setIsEnabled(bool newEnabled) external onlyOwner {\r\n        enabled = newEnabled;\r\n    }\r\n\r\n    function nextIntervalLapsedTime() external view returns (uint256) {\r\n        if (block.timestamp >= nextIntervalTime) return 0;\r\n        return nextIntervalTime - block.timestamp;\r\n    }\r\n\r\n    function getRewardCount(address account) public view returns (uint256) {\r\n        return _getRewardCount(staks[account]);\r\n    }\r\n\r\n    function _getRewardCount(Stake storage stake)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (\r\n            stake.scores == 0 || stake.lastGrantIntervalNumber >= intervalNumber\r\n        ) return 0;\r\n        return (stake.scores * claimRewardPoolStartCount) / claimStaksScoresSum;\r\n    }\r\n\r\n    function _grantReward(\r\n        address account,\r\n        Stake storage stake,\r\n        uint256 reward\r\n    ) private {\r\n        if (reward > claimRewardPool) reward = claimRewardPool;\r\n        if (reward == 0) return;\r\n        unchecked {\r\n            claimRewardPool -= reward;\r\n            totalRewardClaimed += reward;\r\n        }\r\n        // grant reward\r\n        transferRewardTo(account, reward);\r\n        // use stake\r\n        stake.lastGrantIntervalNumber = intervalNumber;\r\n    }\r\n\r\n    function claimReward() external {\r\n        tryNextInterval();\r\n        Stake storage stake = staks[msg.sender];\r\n        uint256 reward = _getRewardCount(stake);\r\n        require(reward > 0, \"has no reward\");\r\n        _grantReward(msg.sender, stake, reward);\r\n    }\r\n\r\n    function removeStake() external {\r\n        tryNextInterval();\r\n        Stake storage stake = staks[msg.sender];\r\n        _grantReward(msg.sender, stake, _getRewardCount(stake)); // try grant reward if change stack\r\n        require(stake.scores > 0, \"stake scores is 0\");\r\n        removeStake(msg.sender, stake);\r\n        staksScoresSum -= stake.scores;        \r\n        delete staks[msg.sender];\r\n    }\r\n\r\n    function tryNextInterval() public {\r\n        // try to go into next  interval\r\n        if (block.timestamp < nextIntervalTime) return;\r\n        // save total staks\r\n        claimStaksScoresSum = staksScoresSum;\r\n        // update reward pools\r\n        claimRewardPool = getRewardsTotal();\r\n        claimRewardPoolStartCount = claimRewardPool;\r\n        // set the next interval\r\n        ++intervalNumber;\r\n        nextIntervalTime = block.timestamp + intervalMinutes * 1 minutes;\r\n    }\r\n\r\n    function _updateScores(Stake storage stake, uint256 newScores) internal {\r\n        require(intervalNumber > 0 && enabled, \"reward pool not started\");\r\n        tryNextInterval();\r\n        _grantReward(msg.sender, stake, _getRewardCount(stake));\r\n        if (stake.scores == newScores) return;\r\n        if (stake.scores < newScores) {\r\n            uint256 delta = newScores - stake.scores;\r\n            staksScoresSum += delta;\r\n            stake.scores += delta;\r\n        } else {\r\n            uint256 delta = stake.scores - newScores;\r\n            staksScoresSum -= delta;\r\n            stake.scores -= delta;\r\n        }\r\n        stake.lastGrantIntervalNumber = intervalNumber;\r\n    }\r\n\r\n    function getStake(address account) external view returns (Stake memory) {\r\n        return _getStake(account);\r\n    }\r\n\r\n    function _getStake(address account)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (Stake memory)\r\n    {\r\n        return staks[account];\r\n    }\r\n\r\n    function beforeStart() internal virtual;\r\n\r\n    function transferRewardTo(address account, uint256 count) internal virtual;\r\n\r\n    function removeStake(address account, Stake memory stake) internal virtual;\r\n\r\n    // current total rewards count (for claims and accumulative)\r\n    function getRewardsTotal() public view virtual returns (uint256);\r\n}\r\n\r\n// File: contracts/RewardPool.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\n\r\n\r\n\r\n\r\n// the reward pool that provides erc20 and nft staking and grants erc20 tokens\r\ncontract RewardPool is RewardPoolBase {\r\n    IERC20 public erc20; // erc20 token\r\n    IERC721 public nft; // erc721 token\r\n    mapping(address => uint256[]) mftByAccounts;\r\n\r\n    constructor(address erc20Address, address nftAddress) {\r\n        erc20 = IERC20(erc20Address);\r\n        nft = IERC721(nftAddress);\r\n    }\r\n\r\n    function setErc20Address(address newErc20Address) external onlyOwner {\r\n        erc20 = IERC20(newErc20Address);\r\n    }\r\n\r\n    function setNftAddress(address newNftAddress) external onlyOwner {\r\n        nft = IERC721(newNftAddress);\r\n    }\r\n\r\n    function beforeStart() internal view override {\r\n        require(address(erc20) != address(0), \"erc20 is zero\");\r\n        require(address(nft) != address(0), \"nft is zero\");\r\n    }\r\n\r\n    function getRewardsTotal() public view override returns (uint256) {\r\n        return erc20.balanceOf(address(this));\r\n    }\r\n\r\n    function transferRewardTo(address account, uint256 count)\r\n        internal\r\n        override\r\n    {\r\n        erc20.transfer(account, count);\r\n    }\r\n\r\n    function removeStake(address account, Stake memory stake)\r\n        internal\r\n        override\r\n    {\r\n        uint256 len = stake.nft.length;\r\n        for (uint256 i = 0; i < len; ++i)\r\n            nft.safeTransferFrom(address(this), account, stake.nft[i]);\r\n    }\r\n\r\n    function addNftToStack(uint256 nftId) external {\r\n        _addNftToStack(nftId);\r\n    }\r\n\r\n    function _addNftToStack(uint256 nftId) private {\r\n        require(nftId != 0, \"nft id can not be zero\");\r\n        Stake storage stake = staks[msg.sender];\r\n        nft.transferFrom(msg.sender, address(this), nftId);\r\n        stake.nft.push(nftId);\r\n        _updateScores(stake, stake.scores + 1);\r\n    }\r\n\r\n    function addNftListToStack(uint256[] calldata nftIds) external {\r\n        for (uint256 i = 0; i < nftIds.length; ++i) _addNftToStack(nftIds[i]);\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        erc20.transfer(_owner, erc20.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"addNftListToStack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"addNftToStack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardPoolStartCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStaksScoresSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"scores\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastGrantIntervalNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nft\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalMinutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIntervalLapsedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIntervalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newErc20Address\",\"type\":\"address\"}],\"name\":\"setErc20Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newIntervalMinutes\",\"type\":\"uint256\"}],\"name\":\"setIntervalTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newEnabled\",\"type\":\"bool\"}],\"name\":\"setIsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newNftAddress\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staksScoresSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryNextInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RewardPool", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000006fcbf38e823efc1e609b9491aab546334c6ee69000000000000000000000000d5745fb5cfb5c3b36475042c3cf10e1689412987", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9312c3c14fa59d9b1d737eb0f0c26b5d2e47989d1f06da90765660f5b958dddc"}]}