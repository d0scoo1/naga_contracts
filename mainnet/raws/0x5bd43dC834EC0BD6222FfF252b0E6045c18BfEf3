{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"BridgeBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./IToken.sol\\u0027;\\r\\n\\r\\n// Recebe o endere\u00e7o do token no seu construtor do BridgeBsc ou BridgeEth\\r\\n// Este contrato serve para duas pontes: ou ele \u00e9 BridgeEth ou BridgeBsc\\r\\n// Se ele for bridgeEth tem acesso \u00e0s fun\u00e7\u00f5es mint e burn do token eth e vice-versa\\r\\n// Em geral a ApiBridge deve ser owner deste contrato e este contrato owner do token\\r\\ncontract BridgeBase {\\r\\n  // admin address controlled by the bridge api\\r\\n  // a BridgeApi \u00e9 o admin\\r\\n  address public admin;\\r\\n  \\r\\n  // pode ser o token na ethereum ou na bsc\\r\\n  // aqui o smartcontract bridge instancia o token\\r\\n  IToken public token;\\r\\n\\r\\n  address public deadWallet = 0x000000000000000000000000000000000000dEaD;\\r\\n  \\r\\n  // evita que a mesma transa\u00e7\u00e3o seja processada duas vezes.\\r\\n  uint public nonce;\\r\\n  \\r\\n  mapping(uint =\\u003e bool) public processedNonces;\\r\\n\\r\\n  // fixa o processo se \u00e9 burn ou mint\\r\\n  enum Step { Burn, Mint }\\r\\n  \\r\\n  event Transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint amount,\\r\\n    uint date,\\r\\n    uint nonce,\\r\\n    Step indexed step\\r\\n  );\\r\\n\\r\\n  // o contrato bridge recebe no construtor o endere\u00e7o do token que ser\u00e1 queimado ou mintado \\r\\n  // o admin \u00e9 o msg.sender\\r\\n  constructor(address _token) {\\r\\n    // s\u00f3 o admin deste contrato pode chamar a fun\u00e7\u00e3o mint deste contrato\\r\\n    // \\r\\n    admin = msg.sender;\\r\\n    // instancia duas fun\u00e7\u00f5es do token por meio da interface, ou seja mint e burn\\r\\n    token = IToken(_token);\\r\\n  }\\r\\n\\r\\n\\r\\n  // esta fun\u00e7\u00e3o \u00e9 chamada pelo front\\r\\n  function burn( uint amount) external {\\r\\n    \\r\\n   // transfere para a carteira da morte\\r\\n    token.transferFrom(msg.sender, deadWallet, amount);\\r\\n    \\r\\n    emit Transfer(\\r\\n      msg.sender,\\r\\n      deadWallet,\\r\\n      amount,\\r\\n      block.timestamp,\\r\\n      nonce,\\r\\n      Step.Burn\\r\\n    );\\r\\n    nonce++;\\r\\n  }\\r\\n\\r\\n /* apenas a bridge api pode chamar  a fun\u00e7\u00e3o mint da bridge smart contract \\r\\n e apenas o owner do token pode chamar a fun\u00e7\u00e3o mint do token;\\r\\n \u00c9 diferente quem chama a fun\u00e7\u00e3o deste smart contract de quem este smart contract chama\\r\\n */\\r\\n   function mint(address to, uint amount, uint otherChainNonce) external {\\r\\n     \\r\\n     // o endere\u00e7o que chama esta fun\u00e7\u00e3o tem que ser o mesmo da bridgeAPI \\r\\n    require(msg.sender == admin, \\u0027only admin\\u0027);\\r\\n    \\r\\n    require(processedNonces[otherChainNonce] == false, \\u0027transfer  processed\\u0027);\\r\\n    processedNonces[otherChainNonce] = true;\\r\\n    \\r\\n    // instancia\u00e7\u00e3o do token \\r\\n    // Este contrato tem que ser o owner do token para chamar esta fun\u00e7\u00e3o\\r\\n    token.mint(amount, to);\\r\\n    \\r\\n    emit Transfer(\\r\\n      // only admin\\r\\n      msg.sender,\\r\\n      to,\\r\\n      amount,\\r\\n      block.timestamp,\\r\\n      otherChainNonce,\\r\\n      Step.Mint\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function updateAdmin(address newAdmin) external {\\r\\n    require(msg.sender == admin, \\u0027only admin\\u0027);\\r\\n    admin = newAdmin;\\r\\n  }\\r\\n}\\r\\n\"},\"BridgeEth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./BridgeBase.sol\\u0027;\\r\\n\\r\\ncontract BridgeEth is BridgeBase {\\r\\n \\r\\n /* passa o endere\u00e7o do tokenEth para o construtor\\r\\n e passa esse endere\u00e7o para o construtor da bridgeBase\\r\\n */\\r\\n  constructor(address token) BridgeBase(token) {}\\r\\n}\\r\\n\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// apenas uma interface com duas fun\u00e7\u00f5es que podem ser compartilhadas por qualquer token\\r\\n\\r\\ninterface IToken {\\r\\n  function mint( uint amount, address to) external;\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external;\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum BridgeBase.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherChainNonce\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BridgeEth", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000daab5e695bb0e8ce8384ee56ba38fa8290618e52", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0337b3f70f897374238919d27f352e59c9d3a0ad50706b864064ff0d3e36ab2d"}]}