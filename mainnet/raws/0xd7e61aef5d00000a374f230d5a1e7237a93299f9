{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n-------------\r\nThe SolaVerse\r\n-------------\r\n\r\n  /$$$$$$   /$$$$$$  /$$        /$$$$$$       /$$$$$$  /$$        /$$$$$$  /$$$$$$ /$$      /$$  /$$$$$$\r\n /$$__  $$ /$$__  $$| $$       /$$__  $$     /$$__  $$| $$       /$$__  $$|_  $$_/| $$$    /$$$ /$$__  $$\r\n| $$  \\__/| $$  \\ $$| $$      | $$  \\ $$    | $$  \\__/| $$      | $$  \\ $$  | $$  | $$$$  /$$$$| $$  \\__/\r\n|  $$$$$$ | $$  | $$| $$      | $$$$$$$$    | $$      | $$      | $$$$$$$$  | $$  | $$ $$/$$ $$|  $$$$$$\r\n \\____  $$| $$  | $$| $$      | $$__  $$    | $$      | $$      | $$__  $$  | $$  | $$  $$$| $$ \\____  $$\r\n /$$  \\ $$| $$  | $$| $$      | $$  | $$    | $$    $$| $$      | $$  | $$  | $$  | $$\\  $ | $$ /$$  \\ $$\r\n|  $$$$$$/|  $$$$$$/| $$$$$$$$| $$  | $$    |  $$$$$$/| $$$$$$$$| $$  | $$ /$$$$$$| $$ \\/  | $$|  $$$$$$/\r\n \\______/  \\______/ |________/|__/  |__/     \\______/ |________/|__/  |__/|______/|__/     |__/ \\______/\r\n*/\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface ISOLA {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t * Emits a {Burnt} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Allows our Processor wallets/contracts to transfer SOLA without\r\n\t * having to burn tokens\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction processorTransfer(address recipient, uint amount) external;\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the burning Percentage is changed by `owner`.\r\n\t */\r\n\tevent UpdateDeflationRate(uint32 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when a transfer() happens.\r\n\t */\r\n\tevent Burnt(uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary Strings {\r\n\tbytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n\t */\r\n\tfunction toString(uint256 value) internal pure returns (string memory) {\r\n\t\t// Inspired by OraclizeAPI's implementation - MIT licence\r\n\t\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 digits;\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\tbytes memory buffer = new bytes(digits);\r\n\t\twhile (value != 0) {\r\n\t\t\tdigits -= 1;\r\n\t\t\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\t\t\tvalue /= 10;\r\n\t\t}\r\n\t\treturn string(buffer);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n\t */\r\n\tfunction toHexString(uint256 value) internal pure returns (string memory) {\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0x00\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 length = 0;\r\n\t\twhile (temp != 0) {\r\n\t\t\tlength++;\r\n\t\t\ttemp >>= 8;\r\n\t\t}\r\n\t\treturn toHexString(value, length);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n\t */\r\n\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n\t\tbytes memory buffer = new bytes(2 * length + 2);\r\n\t\tbuffer[0] = \"0\";\r\n\t\tbuffer[1] = \"x\";\r\n\t\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\r\n\t\t\tbuffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n\t\t\tvalue >>= 4;\r\n\t\t}\r\n\t\trequire(value == 0, \"Strings: hex length insufficient\");\r\n\t\treturn string(buffer);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary ECDSA {\r\n\tenum RecoverError {\r\n\t\tNoError,\r\n\t\tInvalidSignature,\r\n\t\tInvalidSignatureLength,\r\n\t\tInvalidSignatureS,\r\n\t\tInvalidSignatureV\r\n\t}\r\n\r\n\tfunction _throwError(RecoverError error) private pure {\r\n\t\tif (error == RecoverError.NoError) {\r\n\t\t\treturn; // no error: do nothing\r\n\t\t} else if (error == RecoverError.InvalidSignature) {\r\n\t\t\trevert(\"ECDSA: invalid signature\");\r\n\t\t} else if (error == RecoverError.InvalidSignatureLength) {\r\n\t\t\trevert(\"ECDSA: invalid signature length\");\r\n\t\t} else if (error == RecoverError.InvalidSignatureS) {\r\n\t\t\trevert(\"ECDSA: invalid signature 's' value\");\r\n\t\t} else if (error == RecoverError.InvalidSignatureV) {\r\n\t\t\trevert(\"ECDSA: invalid signature 'v' value\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address that signed a hashed message (`hash`) with\r\n\t * `signature` or error string. This address can then be used for verification purposes.\r\n\t *\r\n\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n\t * this function rejects them by requiring the `s` value to be in the lower\r\n\t * half order, and the `v` value to be either 27 or 28.\r\n\t *\r\n\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n\t * verification to be secure: it is possible to craft signatures that\r\n\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n\t * this is by receiving a hash of the original message (which may otherwise\r\n\t * be too long), and then calling {toEthSignedMessageHash} on it.\r\n\t *\r\n\t * Documentation for signature generation:\r\n\t * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n\t * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n\t\t// Check the signature length\r\n\t\t// - case 65: r,s,v signature (standard)\r\n\t\t// - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n\t\tif (signature.length == 65) {\r\n\t\t\tbytes32 r;\r\n\t\t\tbytes32 s;\r\n\t\t\tuint8 v;\r\n\t\t\t// ecrecover takes the signature parameters, and the only way to get them\r\n\t\t\t// currently is to use assembly.\r\n\t\t\tassembly {\r\n\t\t\t\tr := mload(add(signature, 0x20))\r\n\t\t\t\ts := mload(add(signature, 0x40))\r\n\t\t\t\tv := byte(0, mload(add(signature, 0x60)))\r\n\t\t\t}\r\n\t\t\treturn tryRecover(hash, v, r, s);\r\n\t\t} else if (signature.length == 64) {\r\n\t\t\tbytes32 r;\r\n\t\t\tbytes32 vs;\r\n\t\t\t// ecrecover takes the signature parameters, and the only way to get them\r\n\t\t\t// currently is to use assembly.\r\n\t\t\tassembly {\r\n\t\t\t\tr := mload(add(signature, 0x20))\r\n\t\t\t\tvs := mload(add(signature, 0x40))\r\n\t\t\t}\r\n\t\t\treturn tryRecover(hash, r, vs);\r\n\t\t} else {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignatureLength);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address that signed a hashed message (`hash`) with\r\n\t * `signature`. This address can then be used for verification purposes.\r\n\t *\r\n\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n\t * this function rejects them by requiring the `s` value to be in the lower\r\n\t * half order, and the `v` value to be either 27 or 28.\r\n\t *\r\n\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n\t * verification to be secure: it is possible to craft signatures that\r\n\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n\t * this is by receiving a hash of the original message (which may otherwise\r\n\t * be too long), and then calling {toEthSignedMessageHash} on it.\r\n\t */\r\n\tfunction recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n\t\t(address recovered, RecoverError error) = tryRecover(hash, signature);\r\n\t\t_throwError(error);\r\n\t\treturn recovered;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n\t *\r\n\t * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction tryRecover(\r\n\t\tbytes32 hash,\r\n\t\tbytes32 r,\r\n\t\tbytes32 vs\r\n\t) internal pure returns (address, RecoverError) {\r\n\t\tbytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n\t\tuint8 v = uint8((uint256(vs) >> 255) + 27);\r\n\t\treturn tryRecover(hash, v, r, s);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n\t *\r\n\t * _Available since v4.2._\r\n\t */\r\n\tfunction recover(\r\n\t\tbytes32 hash,\r\n\t\tbytes32 r,\r\n\t\tbytes32 vs\r\n\t) internal pure returns (address) {\r\n\t\t(address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n\t\t_throwError(error);\r\n\t\treturn recovered;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n\t * `r` and `s` signature fields separately.\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction tryRecover(\r\n\t\tbytes32 hash,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) internal pure returns (address, RecoverError) {\r\n\t\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n\t\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n\t\t// the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n\t\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n\t\t//\r\n\t\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n\t\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n\t\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n\t\t// these malleable signatures as well.\r\n\t\tif (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignatureS);\r\n\t\t}\r\n\t\tif (v != 27 && v != 28) {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignatureV);\r\n\t\t}\r\n\r\n\t\t// If the signature is valid (and not malleable), return the signer address\r\n\t\taddress signer = ecrecover(hash, v, r, s);\r\n\t\tif (signer == address(0)) {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignature);\r\n\t\t}\r\n\r\n\t\treturn (signer, RecoverError.NoError);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n\t * `r` and `s` signature fields separately.\r\n\t */\r\n\tfunction recover(\r\n\t\tbytes32 hash,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) internal pure returns (address) {\r\n\t\t(address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n\t\t_throwError(error);\r\n\t\treturn recovered;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n\t * produces hash corresponding to the one signed with the\r\n\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n\t * JSON-RPC method as part of EIP-191.\r\n\t *\r\n\t * See {recover}.\r\n\t */\r\n\tfunction toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n\t\t// 32 is the length in bytes of hash,\r\n\t\t// enforced by the type signature above\r\n\t\treturn keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n\t * produces hash corresponding to the one signed with the\r\n\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n\t * JSON-RPC method as part of EIP-191.\r\n\t *\r\n\t * See {recover}.\r\n\t */\r\n\tfunction toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns an Ethereum Signed Typed Data, created from a\r\n\t * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n\t * to the one signed with the\r\n\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n\t * JSON-RPC method as part of EIP-712.\r\n\t *\r\n\t * See {recover}.\r\n\t */\r\n\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n\t// Booleans are more expensive than uint256 or any type that takes up a full\r\n\t// word because each write operation emits an extra SLOAD to first read the\r\n\t// slot's contents, replace the bits taken up by the boolean, and then write\r\n\t// back. This is the compiler's defense against contract upgrades and\r\n\t// pointer aliasing, and it cannot be disabled.\r\n\r\n\t// The values being non-zero value makes deployment a bit more expensive,\r\n\t// but in exchange the refund on every call to nonReentrant will be lower in\r\n\t// amount. Since refunds are capped to a percentage of the total\r\n\t// transaction's gas, it is best to keep them low in cases like this one, to\r\n\t// increase the likelihood of the full refund coming into effect.\r\n\tuint256 private constant _NOT_ENTERED = 1;\r\n\tuint256 private constant _ENTERED = 2;\r\n\r\n\tuint256 private _status;\r\n\r\n\tconstructor() {\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Prevents a contract from calling itself, directly or indirectly.\r\n\t * Calling a `nonReentrant` function from another `nonReentrant`\r\n\t * function is not supported. It is possible to prevent this from happening\r\n\t * by making the `nonReentrant` function external, and making it call a\r\n\t * `private` function that does the actual work.\r\n\t */\r\n\tmodifier nonReentrant() {\r\n\t\t// On the first call to nonReentrant, _notEntered will be true\r\n\t\trequire(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n\t\t// Any calls to nonReentrant after this point will fail\r\n\t\t_status = _ENTERED;\r\n\r\n\t\t_;\r\n\r\n\t\t// By storing the original value once again, a refund is triggered (see\r\n\t\t// https://eips.ethereum.org/EIPS/eip-2200)\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Internal function without access restriction.\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Pausable is Ownable {\r\n\tevent Pause();\r\n\tevent Unpause();\r\n\r\n\tbool public paused = false;\r\n\r\n\r\n\t/**\r\n\t* @dev Modifier to make a function callable only when the contract is not paused.\r\n\t*/\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Modifier to make a function callable only when the contract is paused.\r\n\t*/\r\n\tmodifier whenPaused() {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev called by the owner to pause, triggers stopped state\r\n\t*/\r\n\tfunction pause() onlyOwner whenNotPaused public {\r\n\t\tpaused = true;\r\n\t\temit Pause();\r\n\t}\r\n\r\n\t/**\r\n\t* @dev called by the owner to unpause, returns to normal state\r\n\t*/\r\n\tfunction unpause() onlyOwner whenPaused public {\r\n\t\tpaused = false;\r\n\t\temit Unpause();\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract SOLA_Claims is ReentrancyGuard, Ownable, Pausable\r\n{\r\n\taddress solaTokenAddress;\r\n\taddress encryptionWalletAddress;\r\n\tuint256 maxClaimAmount;\r\n\r\n\tmapping(bytes => bool) verifiedHashes;\r\n\r\n\tevent ClaimSuccess(address _address, bytes32 hash);\r\n\r\n\r\n\t/**\r\n\t * @dev Allow users to claim their Account Balance in SOLA Tokens.\r\n\t *\r\n\t * Emits a {ClaimSuccess} event indicating the successful claim.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `msg.sender` cannot be the zero address.\r\n\t * - `_expires_at` isn't in the past.\r\n\t * - `solaTokenAddress` cannot be the zero address.\r\n\t * - `encryptionWalletAddress` cannot be the zero address.\r\n\t * - `this` contract must have the `solaToken` funds available to send.\r\n\t * - `maxClaimAmount` must be set.\r\n\t * - `_amount` must be an actual positive value.\r\n\t * - `_amount` is less than the current `maxClaimAmount` limit.\r\n\t * - `_signature` has not already been used and stored in the `verifiedHashes` mapping.\r\n\t * - `_hash` was signed by the processor_wallet to create the valid `_signature`.\r\n\t * - `msg.sender` is not the address of a contract.\r\n\t * - All the data hash together corretly to form the signature.\r\n\t */\r\n\tfunction claim(uint _amount, uint _expires_at, string memory _sender, bytes memory _signature) external nonReentrant whenNotPaused\r\n\t{\r\n\t\trequire(msg.sender != address(0), \"SOLA: sending to the zero address.\");\r\n\t\trequire(_expires_at > block.timestamp, \"SOLA: claim token expired.\");\r\n\t\trequire(solaTokenAddress != address(0), \"SOLA: token address not set.\");\r\n\t\trequire(encryptionWalletAddress != address(0),  \"SOLA: processor wallet address not set.\");\r\n\r\n\t\tISOLA SOLA = ISOLA(solaTokenAddress);\r\n\t\trequire(SOLA.balanceOf(address(this)) > _amount, \"SOLA: insufficient balance to claim.\");\r\n\r\n\t\trequire(_amount > 0, \"SOLA: claim amount too low.\");\r\n\t\trequire(maxClaimAmount > 0, \"SOLA: max claim amount not set.\");\r\n\t\trequire(maxClaimAmount >= _amount, \"SOLA: claim amount too high.\");\r\n\t\trequire(verifiedHashes[_signature] != true, \"SOLA: invalid request - already used.\");\r\n\t\trequire(this.checkAddress(msg.sender) != true, \"SOLA: invalid wallet address.\");\r\n\r\n\t\tbytes32 hash = keccak256(abi.encodePacked(Strings.toString(_amount), Strings.toString(_expires_at), _sender));\r\n\t\trequire(ECDSA.recover(hash, _signature) == encryptionWalletAddress, \"SOLA: invalid signature.\");\r\n\r\n\t\tverifiedHashes[_signature] = true;\r\n\r\n\t\tSOLA.processorTransfer(msg.sender, _amount);\r\n\r\n\t\temit ClaimSuccess(msg.sender, hash);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Check to ensure the call is coming from a wallet and not a contract address.\r\n\t *\r\n\t * Returns boolean\r\n\t */\r\n\tfunction checkAddress(address _address) external view returns (bool)\r\n\t{\r\n\t\treturn isContract(_address);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Check to ensure the call is coming from a wallet and not a contract address.\r\n\t *\r\n\t * Returns boolean\r\n\t */\r\n\tfunction isContract(address _address) private view returns (bool)\r\n\t{\r\n\t\tuint32 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(_address)\r\n\t\t}\r\n\t\treturn (size > 0);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Set the address of the Sola Token Contract.\r\n\t */\r\n\tfunction setSolaTokenAddress(address _address) external onlyOwner\r\n\t{\r\n\t\tsolaTokenAddress = _address;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Set the address of the Processing wallet for the ECDSA recovery.\r\n\t */\r\n\tfunction setEncryptionWalletAddress(address _address) external onlyOwner\r\n\t{\r\n\t\tencryptionWalletAddress = _address;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Set an adjustable max limit on claims.\r\n\t */\r\n\tfunction setMaxClaimAmount(uint _amount) external onlyOwner\r\n\t{\r\n\t\tmaxClaimAmount = _amount;\r\n\t}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ClaimSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expires_at\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_sender\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setEncryptionWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxClaimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSolaTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SOLA_Claims", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e53ac2da8d4047ccd22e68fc9263caaef8d17ab774f07157041bad22e7c5177a"}]}