{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n// SPDX-License-Identifier: MIT\r\n\r\n// \r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// \r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IBEP20Mintable {\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n    function burnFrom(address who, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// \r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract StakingPoolGIFTJustGold is Ownable, ReentrancyGuard{\r\n    \r\n    using SafeMath for uint256;\r\n    bool public fundsAreSafu = true; // always \r\n    uint256 public minInvestment = 1000000000000000000;\r\n    IBEP20 public poolToken;\r\n    IBEP20 public returnPoolToken;\r\n    uint256 public totalStaked; // keeps track of ALL TIME staked USDC amounts\r\n    uint256 public totalWithdrawn; // keeps track of ALL TIME withdrawn USDC amounts\r\n\r\n    event Deposit(uint256 _amount, uint256 _time);\r\n    event BoosterDeposit(uint256 _amount, uint256 _time);\r\n    event WithdrawalRequest(address indexed user, uint256 _amount, uint256 _time);\r\n\r\n    struct Account {\r\n        uint256 balance;\r\n        uint256 timestampDeposited;\r\n        uint256 blockWithdrawal;\r\n    }\r\n\r\n    struct HistoricalDeposit{\r\n        address user;\r\n        uint256 depositAmount;\r\n        uint256 depositTime;\r\n    }\r\n    struct HistoricalWithdrawal{\r\n        address user;\r\n        uint256 withdrawalAmount;\r\n        uint256 withdrawalTime;\r\n    }\r\n\r\n    mapping(address => Account) public deposits;\r\n    HistoricalDeposit[] public historicalDeposits;\r\n    HistoricalWithdrawal[] public historicalWithdrawals;\r\n\r\n\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => uint256) public requests;\r\n    mapping(address => uint256) public requestTime;\r\n\r\n    address[] public kycdAccounts;\r\n    address[] public requestList; \r\n    address public secondAdmin;\r\n    address public fireblocksWallet; \r\n\r\n    constructor(IBEP20 _usdc, IBEP20 _yieldUSDC, address _secondAdmin, address _fireblocksWallet) public {\r\n        poolToken = _usdc;\r\n        returnPoolToken = _yieldUSDC;\r\n        secondAdmin = _secondAdmin;\r\n        fireblocksWallet = _fireblocksWallet;\r\n    }\r\n\r\n\r\n    function changeFireblocksWallet(address _newallet) public onlyAdmins {\r\n        fireblocksWallet = _newallet; \r\n    }\r\n\r\n    // check if owner is admin\r\n    modifier onlyAdmins() {\r\n        require(msg.sender == owner() || msg.sender == secondAdmin, 'Admins: caller is not the admin');\r\n        _;\r\n    }\r\n\r\n    function changeSecondAdmin(address _newadmin) public {\r\n        require(msg.sender == secondAdmin, 'invalid address');\r\n        secondAdmin = _newadmin;\r\n    }\r\n\r\n    function whitelistBlacklist(address _addr, bool _status) public onlyAdmins{\r\n        whitelist[_addr] = _status;\r\n        if(_status == true){\r\n            kycdAccounts.push(_addr);\r\n        }\r\n    }\r\n\r\n    function getKycdWithPagination(uint256 cursor, uint256 howMany) public view returns(address[] memory values, uint256 newCursor){\r\n        uint256 length = howMany;\r\n        if (length > kycdAccounts.length - cursor) {\r\n            length = kycdAccounts.length - cursor;\r\n        }\r\n\r\n        values = new address[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = kycdAccounts[cursor + i];\r\n        }\r\n\r\n        return (values, cursor + length);\r\n    }\r\n\r\n    function getRequestsOpenWithPagination(uint256 cursor, uint256 howMany) public view returns(address[] memory values, uint256 newCursor){\r\n        uint256 length = howMany;\r\n        if (length > requestList.length - cursor) {\r\n            length = requestList.length - cursor;\r\n        }\r\n        values = new address[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = requestList[cursor + i];\r\n        }\r\n\r\n        return (values, cursor + length);\r\n    }\r\n\r\n    function getHistoricalDeposits(uint256 cursor, uint256 howMany) public view returns(HistoricalDeposit[] memory values, uint256 newCursor){\r\n        uint256 length = howMany;\r\n        if (length > historicalDeposits.length - cursor) {\r\n            length = historicalDeposits.length - cursor;\r\n        }\r\n        values = new HistoricalDeposit[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = historicalDeposits[cursor + i];\r\n        }\r\n\r\n        return (values, cursor + length);\r\n    }\r\n\r\n    function getHistoricalWithdrawals(uint256 cursor, uint256 howMany) public view returns(HistoricalWithdrawal[] memory values, uint256 newCursor){\r\n        uint256 length = howMany;\r\n        if (length > historicalWithdrawals.length - cursor) {\r\n            length = historicalWithdrawals.length - cursor;\r\n        }\r\n        values = new HistoricalWithdrawal[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = historicalWithdrawals[cursor + i];\r\n        }\r\n\r\n        return (values, cursor + length);\r\n    }\r\n\r\n\r\n    function remove(uint index) internal  returns(bool) {\r\n        if (index >= requestList.length) return false;\r\n        delete requestList[index];\r\n        return true;\r\n    }\r\n\r\n\r\n    function changeMinInvestment(uint256 _newAmount) public onlyAdmins {\r\n        minInvestment = _newAmount;\r\n    }\r\n\r\n    function deposit(uint256 _amount) public nonReentrant {\r\n        require(whitelist[msg.sender] == true, \"JustGold: not whitelisted. If you KYCd, contact us\");\r\n        require(poolToken.allowance(msg.sender, address(this)) >= _amount, \"erc20 not allowed\");\r\n        require(_amount >= minInvestment, \"min investment not met\");\r\n        require(deposits[msg.sender].blockWithdrawal == 0, 'you have already deposited, withdraw first');\r\n        deposits[msg.sender].timestampDeposited = block.timestamp;\r\n\r\n        deposits[msg.sender].blockWithdrawal = block.timestamp.add(31560000); // 31,560,000 is 12 months in seconds\r\n        poolToken.transferFrom(msg.sender, fireblocksWallet, _amount); \r\n        deposits[msg.sender].balance = deposits[msg.sender].balance.add(_amount);\r\n        returnPoolToken.transfer(msg.sender, _amount);\r\n        totalStaked = totalStaked.add(_amount);\r\n        HistoricalDeposit memory info; \r\n        info.user = msg.sender;\r\n        info.depositAmount = _amount;\r\n        info.depositTime = block.timestamp;\r\n        historicalDeposits.push(info);\r\n\r\n        emit Deposit(_amount, block.timestamp);\r\n    }\r\n\r\n\r\n    // _time block withdrawal time, _time2 block deposit time\r\n    // function changeTime(uint256 _time, uint256 _time2, address _user) public onlyOwner {\r\n    //     deposits[_user].blockWithdrawal = _time;\r\n    //     deposits[_user].timestampDeposited =  _time2;\r\n    // }\r\n\r\n    function satisfyRequest(address _user, uint256 _usdcReturn, uint256 _afiAmount, uint256 _requestId) public onlyAdmins {\r\n        uint256 _amount = requests[_user];\r\n        // uint256 _original = deposits[_user]\r\n        requests[_user] = 0;\r\n        requestTime[_user] = 0;\r\n        poolToken.transferFrom(msg.sender, _user, _usdcReturn);\r\n        // afitoken.transferFrom(msg.sender, _user, _afiAmount);\r\n        deposits[_user].blockWithdrawal = 0;\r\n        // totalStaked = totalStaked.sub(_original);\r\n        totalWithdrawn = totalWithdrawn.add(_usdcReturn);\r\n        if(deposits[_user].balance <= _usdcReturn){\r\n            deposits[_user].balance = 0;\r\n        } else {\r\n            deposits[_user].balance = deposits[_user].balance.sub(_amount);\r\n        }\r\n\r\n        HistoricalWithdrawal memory info; \r\n        info.user = _user;\r\n        info.withdrawalAmount = _usdcReturn;\r\n        info.withdrawalTime = block.timestamp;\r\n        historicalWithdrawals.push(info);\r\n\r\n        remove(_requestId);\r\n    }\r\n\r\n    function satisfyRequestAndReturnRebase(address _user, uint256 _usdcReturn, uint256 _afiAmount, uint256 _requestId) public onlyAdmins {\r\n        uint256 _amount = requests[_user];\r\n        require(_usdcReturn <= _amount, 'invalid');\r\n        uint256 difference = _amount - _usdcReturn;\r\n        // uint256 _original = deposits[_user]\r\n        requests[_user] = 0;\r\n        requestTime[_user] = 0;\r\n        poolToken.transferFrom(msg.sender, _user, _usdcReturn);\r\n        returnPoolToken.transfer(_user, difference);\r\n        // afitoken.transferFrom(msg.sender, _user, _afiAmount);\r\n        deposits[_user].blockWithdrawal = 0;\r\n        // totalStaked = totalStaked.sub(_original);\r\n        totalWithdrawn = totalWithdrawn.add(_usdcReturn);\r\n        if(deposits[_user].balance <= _usdcReturn){\r\n            deposits[_user].balance = 0;\r\n        } else {\r\n            deposits[_user].balance = deposits[_user].balance.sub(_amount);\r\n        }\r\n\r\n        HistoricalWithdrawal memory info; \r\n        info.user = _user;\r\n        info.withdrawalAmount = _usdcReturn;\r\n        info.withdrawalTime = block.timestamp;\r\n        historicalWithdrawals.push(info);\r\n\r\n        remove(_requestId);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public nonReentrant {\r\n        require(requests[msg.sender] == 0, \"JustGold: request in progress\");\r\n        require(whitelist[msg.sender] == true, \"JustGold: not whitelisted. If you KYCd contact us\");\r\n        require(returnPoolToken.allowance(msg.sender, address(this)) >= _amount, \"not allowed\");\r\n        require(returnPoolToken.balanceOf(msg.sender) >= _amount, 'you do not have enough jytUSDT balance');\r\n        returnPoolToken.transferFrom(msg.sender, address(this), _amount);\r\n        requests[msg.sender] = requests[msg.sender].add(_amount);\r\n        requestTime[msg.sender] = block.timestamp;\r\n        requestList.push(msg.sender);\r\n        emit WithdrawalRequest(msg.sender, _amount, block.timestamp);\r\n\r\n    }\r\n\r\n    function adminWithdrawAnyLostFunds(uint256 _amount) public onlyOwner {\r\n        poolToken.transfer(msg.sender, _amount);\r\n    }\r\n\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_yieldUSDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fireblocksWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"BoosterDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawAnyLostFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newallet\",\"type\":\"address\"}],\"name\":\"changeFireblocksWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newadmin\",\"type\":\"address\"}],\"name\":\"changeSecondAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockWithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireblocksWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsAreSafu\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"getHistoricalDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingPoolGIFTJustGold.HistoricalDeposit[]\",\"name\":\"values\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"newCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"getHistoricalWithdrawals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalTime\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingPoolGIFTJustGold.HistoricalWithdrawal[]\",\"name\":\"values\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"newCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"getKycdWithPagination\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"getRequestsOpenWithPagination\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicalDeposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicalWithdrawals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kycdAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnPoolToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdcReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_afiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"satisfyRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdcReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_afiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"satisfyRequestAndReturnRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"whitelistBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingPoolGIFTJustGold", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "00000000000000000000000003ac84c897e4a4f06731b2e2ccfd751659468af9000000000000000000000000beba175299e77c5b89090f41576d50265e3d2ef9000000000000000000000000e3c601b1fc6564ebf5603fcad7956697761e39db000000000000000000000000e3c601b1fc6564ebf5603fcad7956697761e39db", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dc5e0b7052b58a78dc39e20e480f414c567c1bbdf727a33fe28771104fe6c10f"}]}