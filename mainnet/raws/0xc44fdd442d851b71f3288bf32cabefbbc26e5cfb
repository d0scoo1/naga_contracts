{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-06-16\r\n*/\r\n\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract Homeverse is Ownable {\r\n    address payable _owner;\r\n    uint public newsCost;\r\n    uint public movieCost;\r\n    uint public businessCost;\r\n    uint public techCost;\r\n    uint public funCost;\r\n    uint proAccount;\r\n    uint litAccount;\r\n    uint fireAccount;\r\n    uint topAccount;\r\n    uint public feeAmount;\r\n    uint public balanceReceived;\r\n    constructor() public {\r\n        _owner = payable(msg.sender);\r\n        newsCost = 300000000000000000; // 0.3 ETH\r\n        businessCost = 200000000000000000; // 0.2 ETH\r\n        techCost = 200000000000000000; // 0.2 ETH\r\n        movieCost = 100000000000000000; // 0.1 ETH\r\n        funCost = 100000000000000000; // 0.1 ETH\r\n\r\n        proAccount = 300000000000000000; // 0.3 ETH\r\n        litAccount = 500000000000000000; // 0.5 ETH\r\n        fireAccount = 900000000000000000; // 0.9 ETH\r\n        topAccount = 10000000000000000000; // 10 ETH\r\n\r\n        feeAmount = 20;\r\n    }\r\n    function getAccessOfProAccount () public payable {\r\n        require(msg.value == proAccount,\"Needs 0.3 eth to upgrade\");\r\n        balanceReceived += msg.value;\r\n    }\r\n    function getAccessOfLitAccount () public payable {\r\n        require(msg.value == litAccount,\"Needs 0.5 eth to upgrade\");\r\n        balanceReceived += msg.value;\r\n    }\r\n    function getAccessOfFireAccount() public payable {\r\n        require(msg.value == fireAccount,\"Needs 0.9 eth to upgrade\");\r\n        balanceReceived += msg.value;\r\n    }\r\n    function getAccessOfTopAccount() public payable {\r\n        require(msg.value == topAccount, \"Needs 10 eth to upgrade\");\r\n        balanceReceived += msg.value;\r\n    }\r\n    function getAccessOfNews (address receiver) public payable {\r\n        require(msg.value == newsCost, \"Needs 0.3 ether to purchase news\");\r\n        uint fee = getFee(msg.value);\r\n        uint restAmount = msg.value - fee;\r\n        balanceReceived += fee;\r\n        payable(receiver).transfer(restAmount);\r\n    }\r\n    function getAccessOfMovie (address receiver) public payable {\r\n        require(msg.value == movieCost, \"Needs 0.1 ether to purchase movie\");\r\n        uint fee = getFee(msg.value);\r\n        uint restAmount = msg.value - fee;\r\n        balanceReceived += fee;\r\n        payable(receiver).transfer(restAmount);\r\n    }\r\n    function getAccessOfFun (address receiver) public payable {\r\n        require(msg.value == funCost, \"Needs 0.1 ether to purchase movie\");\r\n        uint fee = getFee(msg.value);\r\n        uint restAmount = msg.value - fee;\r\n        balanceReceived += fee;\r\n        payable(receiver).transfer(restAmount);\r\n    }\r\n    function getAccessOfBusiness (address receiver) public payable {\r\n        require(msg.value == businessCost, \"Needs 0.2 ether to purchase intro video\");\r\n        uint fee = getFee(msg.value);\r\n        uint restAmount = msg.value - fee;\r\n        balanceReceived += fee;\r\n        payable(receiver).transfer(restAmount);\r\n    }\r\n        function getAccessOfTech (address receiver) public payable {\r\n        require(msg.value == techCost, \"Needs 0.2 ether to purchase intro video\");\r\n        uint fee = getFee(msg.value);\r\n        uint restAmount = msg.value - fee;\r\n        balanceReceived += fee;\r\n        payable(receiver).transfer(restAmount);\r\n    }\r\n\r\n    function setEthOfNews (uint val) public onlyOwner {\r\n        newsCost = val;\r\n    }\r\n    function setEthOfMovie (uint val) public onlyOwner {\r\n        movieCost = val;\r\n    }\r\n    function setEthOfBusiness (uint val) public onlyOwner {\r\n        businessCost = val;\r\n    }\r\n    function setFeeAmount (uint percent) public onlyOwner {\r\n        feeAmount = percent;\r\n    }\r\n    function getFee (uint cost) public returns (uint) {\r\n        uint fee = (cost / 100)*feeAmount;\r\n        return fee;\r\n    }\r\n    function getBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n    function widthDrawAll () public onlyOwner {\r\n        address payable to = payable(msg.sender);\r\n        to.transfer(getBalance());\r\n    }\r\n    function withdrawMoneyTo(address payable _to, uint funds) public onlyOwner {\r\n        _to.transfer(funds);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balanceReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"businessCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getAccessOfBusiness\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessOfFireAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getAccessOfFun\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessOfLitAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getAccessOfMovie\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getAccessOfNews\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessOfProAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getAccessOfTech\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessOfTopAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"movieCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newsCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setEthOfBusiness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setEthOfMovie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setEthOfNews\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"widthDrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"withdrawMoneyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Homeverse", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d9efe268dcf2f6a5f1ba80afea2a4aca8da655a3cefdf75f569ca425a3f5c5d"}]}