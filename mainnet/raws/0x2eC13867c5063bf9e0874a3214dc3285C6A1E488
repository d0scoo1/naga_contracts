{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BAPOrchestrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n// solhint-disable-next-line\\r\\npragma solidity 0.8.12;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./Interfaces/BAPGenesisInterface.sol\\\";\\r\\nimport \\\"./Interfaces/BAPMethaneInterface.sol\\\";\\r\\nimport \\\"./Interfaces/BAPUtilitiesInterface.sol\\\";\\r\\nimport \\\"./Interfaces/BAPTeenBullsInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * A number of codes are defined as error messages.\\r\\n * Codes are resembling HTTP statuses. This is the structure\\r\\n * CODE:SHORT\\r\\n * Where CODE is a number and SHORT is a short word or prase\\r\\n * describing the condition\\r\\n * CODES:\\r\\n * 100  contract status: open/closed, depleted. In general for any flag\\r\\n *     causing the mint to not to happen.\\r\\n * 200  parameters validation errors, like zero address or wrong values\\r\\n * 300  User payment amount errors like not enough funds.\\r\\n * 400  Contract amount/availability errors like not enough tokens or empty vault.\\r\\n * 500  permission errors, like not whitelisted, wrong address, not the owner.\\r\\n */\\r\\n\\r\\ncontract BAPOrchestrator is ReentrancyGuard, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    string public project;\\r\\n    address public bapGenesisAddr;\\r\\n    address public bapMethAddr;\\r\\n    address public bapUtilitiesAddr;\\r\\n    address public bapTeenBullsAddr;\\r\\n    address public treasuryWallet;\\r\\n    BAPGenesisInterface bapGenesis;\\r\\n    BAPMethaneInterface bapMeth;\\r\\n    BAPUtilitiesInterface bapUtilities;\\r\\n    BAPTeenBullsInterface bapTeenBulls;\\r\\n    address public secret;\\r\\n    uint256 public timeCounter = 1 days;\\r\\n    uint256 public grazingPeriodTime = 31 days;\\r\\n    mapping(uint256 => uint256) public claimedMeth;\\r\\n    mapping(uint256 => bool) public mintingRefunded;\\r\\n    bool private refundFlag = false;\\r\\n    bool private claimFlag = false;\\r\\n\\r\\n    struct SignatureTeenBullStruct {\\r\\n        address sender;\\r\\n    }\\r\\n\\r\\n    struct SignatureGodBullStruct {\\r\\n        address sender;\\r\\n        uint256 teen1;\\r\\n        uint256 teen2;\\r\\n        uint256 teen3;\\r\\n        uint256 teen4;\\r\\n    }\\r\\n\\r\\n    constructor(address _bapGenesis, address _bapMethane) {\\r\\n        require(_bapGenesis != address(0), \\\"200:ZERO_ADDRESS\\\");\\r\\n        require(_bapMethane != address(0), \\\"200:ZERO_ADDRESS\\\");\\r\\n\\r\\n        project = \\\"Bulls & Apes Project\\\";\\r\\n        bapGenesisAddr = _bapGenesis;\\r\\n        bapMethAddr = _bapMethane;\\r\\n\\r\\n        bapGenesis = BAPGenesisInterface(bapGenesisAddr);\\r\\n        bapMeth = BAPMethaneInterface(bapMethAddr);\\r\\n    }\\r\\n\\r\\n    function setGenesisContract(address _newAddress) external onlyOwner {\\r\\n        require(_newAddress != address(0), \\\"200:ZERO_ADDRESS\\\");\\r\\n        bapGenesisAddr = _newAddress;\\r\\n        bapGenesis = BAPGenesisInterface(bapGenesisAddr);\\r\\n    }\\r\\n\\r\\n    function setMethaneContract(address _newAddress) external onlyOwner {\\r\\n        require(_newAddress != address(0), \\\"200:ZERO_ADDRESS\\\");\\r\\n        bapMethAddr = _newAddress;\\r\\n        bapMeth = BAPMethaneInterface(bapMethAddr);\\r\\n    }\\r\\n\\r\\n    function setUtilitiesContract(address _newAddress) external onlyOwner {\\r\\n        require(_newAddress != address(0), \\\"200:ZERO_ADDRESS\\\");\\r\\n        bapUtilitiesAddr = _newAddress;\\r\\n        bapUtilities = BAPUtilitiesInterface(bapUtilitiesAddr);\\r\\n    }\\r\\n\\r\\n    function setTeenBullsContract(address _newAddress) external onlyOwner {\\r\\n        require(_newAddress != address(0), \\\"200:ZERO_ADDRESS\\\");\\r\\n        bapTeenBullsAddr = _newAddress;\\r\\n        bapTeenBulls = BAPTeenBullsInterface(bapTeenBullsAddr);\\r\\n    }\\r\\n\\r\\n    function claimMeth(\\r\\n        bytes memory signature,\\r\\n        uint256[] memory bulls,\\r\\n        uint256[] memory gods\\r\\n    ) external nonReentrant {\\r\\n        uint256 bullsCount = bulls.length;\\r\\n        uint256 godsCount = gods.length;\\r\\n\\r\\n        require(\\r\\n            _verifyClaimMeth(signature, bullsCount, godsCount),\\r\\n            \\\"Claim Meth Signature not valid\\\"\\r\\n        );\\r\\n        uint256 amount = 0;\\r\\n        for (uint256 index = 0; index < bullsCount; index++) {\\r\\n            amount += _claimRewardsFromToken(bulls[index], false);\\r\\n        }\\r\\n        for (uint256 index = 0; index < godsCount; index++) {\\r\\n            amount += _claimRewardsFromToken(gods[index], true);\\r\\n        }\\r\\n        bapMeth.claim(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    function setTreasuryWallet(address _newTreasuryWallet) external onlyOwner {\\r\\n        require(_newTreasuryWallet != address(0), \\\"200:ZERO_ADDRESS\\\");\\r\\n        treasuryWallet = _newTreasuryWallet;\\r\\n    }\\r\\n\\r\\n    function setWhitelistedAddress(address _secret) external onlyOwner {\\r\\n        require(_secret != address(0), \\\"200:ZERO_ADDRESS\\\");\\r\\n        secret = _secret;\\r\\n    }\\r\\n\\r\\n    function setGrazingPeriodTime(uint256 _grazingPeriod) external onlyOwner {\\r\\n        grazingPeriodTime = _grazingPeriod;\\r\\n    }\\r\\n\\r\\n    function setTimeCounter(uint256 _timeCounter) external onlyOwner {\\r\\n        timeCounter = _timeCounter;\\r\\n    }\\r\\n\\r\\n    function getClaimableMeth(uint256 tokenId, bool isGodBull)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(bapGenesis.tokenExist(tokenId), \\\"Token does exist\\\");\\r\\n        uint256 timeFromCreation = (block.timestamp -\\r\\n            bapGenesis.mintingDatetime(tokenId)).div(timeCounter);\\r\\n        return\\r\\n            _dailyRewards(isGodBull) * timeFromCreation - claimedMeth[tokenId];\\r\\n    }\\r\\n\\r\\n    function generateTeenBull(bytes memory signature) external nonReentrant {\\r\\n        require(_verifyGenerateTeenBull(signature), \\\"Signature is invalid\\\");\\r\\n        bapMeth.pay(600, 300);\\r\\n        bapTeenBulls.generateTeenBull();\\r\\n        bapUtilities.burn(1, 1);\\r\\n    }\\r\\n\\r\\n    function generateGodBull(\\r\\n        bytes memory signature,\\r\\n        uint256 bull1,\\r\\n        uint256 bull2,\\r\\n        uint256 bull3,\\r\\n        uint256 bull4\\r\\n    ) external nonReentrant {\\r\\n        require(\\r\\n            _verifyGenerateGodBull(signature, bull1, bull2, bull3, bull4),\\r\\n            \\\"Invalid Signature\\\"\\r\\n        );\\r\\n        require(\\r\\n            bapUtilities.balanceOf(msg.sender, 2) > 0,\\r\\n            \\\"Not enough Merger Orbs\\\"\\r\\n        );\\r\\n        bapMeth.pay(4800, 2400);\\r\\n        bapGenesis.generateGodBull();\\r\\n        bapTeenBulls.burnTeenBull(bull1);\\r\\n        bapTeenBulls.burnTeenBull(bull2);\\r\\n        bapTeenBulls.burnTeenBull(bull3);\\r\\n        bapTeenBulls.burnTeenBull(bull4);\\r\\n        bapUtilities.burn(2, 1);\\r\\n    }\\r\\n\\r\\n    function buyIncubator(\\r\\n        bytes memory signature,\\r\\n        uint256 bull1,\\r\\n        uint256 bull2\\r\\n    ) external nonReentrant {\\r\\n        require(\\r\\n            _verifyBuyIncubator(signature, bull1, bull2),\\r\\n            \\\"Invalid Signature\\\"\\r\\n        );\\r\\n        bapGenesis.breedBulls(bull1, bull2);\\r\\n        bapMeth.pay(600, 300);\\r\\n        bapUtilities.purchaseIncubator();\\r\\n    }\\r\\n\\r\\n    function buyMergeOrb(bytes memory signature, uint256 teen)\\r\\n        external\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(\\r\\n            _verifyBuyMergeOrb(signature, teen),\\r\\n            \\\"Buy Merge Orb Signature is not valid\\\"\\r\\n        );\\r\\n        bapMeth.pay(2400, 1200);\\r\\n        bapTeenBulls.burnTeenBull(teen);\\r\\n        bapUtilities.purchaseMergerOrb();\\r\\n    }\\r\\n\\r\\n    function setRefundFlag(bool _refundFlag) external onlyOwner {\\r\\n        refundFlag = _refundFlag;\\r\\n    }\\r\\n\\r\\n    function setClaimFlag(bool _claimFlag) external onlyOwner {\\r\\n        claimFlag = _claimFlag;\\r\\n    }\\r\\n\\r\\n    function refund(uint256 tokenId) external nonReentrant {\\r\\n        require(treasuryWallet != address(0), \\\"200:ZERO_ADDRESS\\\");\\r\\n        require(\\r\\n            _refundPeriodAllowed() || refundFlag,\\r\\n            \\\"The Refund is not allowed\\\"\\r\\n        );\\r\\n        require(\\r\\n            mintingRefunded[tokenId] == false,\\r\\n            \\\"The token was already refunded\\\"\\r\\n        );\\r\\n        require(\\r\\n            bapGenesis.breedings(tokenId) == bapGenesis.maxBreedings(),\\r\\n            \\\"The bull breed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bapGenesis.notAvailableForRefund(tokenId) == false,\\r\\n            \\\"The token was transfered at an invalid time\\\"\\r\\n        );\\r\\n\\r\\n        bapGenesis.refund(msg.sender, tokenId);\\r\\n        bapGenesis.safeTransferFrom(msg.sender, treasuryWallet, tokenId);\\r\\n        mintingRefunded[tokenId] = true;\\r\\n    }\\r\\n\\r\\n    function _verifyBuyIncubator(\\r\\n        bytes memory signature,\\r\\n        uint256 token1,\\r\\n        uint256 token2\\r\\n    ) internal view returns (bool) {\\r\\n        // Pack the payload\\r\\n        bytes32 freshHash = keccak256(abi.encode(msg.sender, token1, token2));\\r\\n        // Get the packed payload hash\\r\\n        bytes32 candidateHash = keccak256(\\r\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", freshHash)\\r\\n        );\\r\\n\\r\\n        // Verify if the fresh hash is signed with the provided signature\\r\\n        return _verifyHashSignature(candidateHash, signature);\\r\\n    }\\r\\n\\r\\n    function _verifyBuyMergeOrb(bytes memory signature, uint256 teen)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        // Pack the payload\\r\\n        bytes32 freshHash = keccak256(abi.encode(msg.sender, teen));\\r\\n        // Get the packed payload hash\\r\\n        bytes32 candidateHash = keccak256(\\r\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", freshHash)\\r\\n        );\\r\\n        // Verify if the fresh hash is signed with the provided signature\\r\\n        return _verifyHashSignature(candidateHash, signature);\\r\\n    }\\r\\n\\r\\n    function _verifyClaimMeth(\\r\\n        bytes memory signature,\\r\\n        uint256 bullsCount,\\r\\n        uint256 godsCount\\r\\n    ) internal view returns (bool) {\\r\\n        // Pack the payload\\r\\n        bytes32 freshHash = keccak256(\\r\\n            abi.encode(msg.sender, bullsCount, godsCount)\\r\\n        );\\r\\n        // Get the packed payload hash\\r\\n        bytes32 candidateHash = keccak256(\\r\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", freshHash)\\r\\n        );\\r\\n        // Verify if the fresh hash is signed with the provided signature\\r\\n        return _verifyHashSignature(candidateHash, signature);\\r\\n    }\\r\\n\\r\\n    function _verifyGenerateGodBull(\\r\\n        bytes memory signature,\\r\\n        uint256 bull1,\\r\\n        uint256 bull2,\\r\\n        uint256 bull3,\\r\\n        uint256 bull4\\r\\n    ) internal view returns (bool) {\\r\\n        // Pack the payload\\r\\n        bytes32 freshHash = keccak256(\\r\\n            abi.encode(msg.sender, bull1, bull2, bull3, bull4)\\r\\n        );\\r\\n        // Get the packed payload hash\\r\\n        bytes32 candidateHash = keccak256(\\r\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", freshHash)\\r\\n        );\\r\\n        // Verify if the fresh hash is signed with the provided signature\\r\\n        return _verifyHashSignature(candidateHash, signature);\\r\\n    }\\r\\n\\r\\n    function _verifyGenerateTeenBull(bytes memory signature)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        // Pack the payload\\r\\n        bytes32 freshHash = keccak256(abi.encode(msg.sender));\\r\\n        // Get the packed payload hash\\r\\n        bytes32 candidateHash = keccak256(\\r\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", freshHash)\\r\\n        );\\r\\n        // Verify if the fresh hash is signed with the provided signature\\r\\n        return _verifyHashSignature(candidateHash, signature);\\r\\n    }\\r\\n\\r\\n    function _verifyHashSignature(bytes32 hash, bytes memory signature)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n\\r\\n        if (signature.length != 65) {\\r\\n            return false;\\r\\n        }\\r\\n        assembly {\\r\\n            r := mload(add(signature, 32))\\r\\n            s := mload(add(signature, 64))\\r\\n            v := byte(0, mload(add(signature, 96)))\\r\\n        }\\r\\n\\r\\n        if (v < 27) {\\r\\n            v += 27;\\r\\n        }\\r\\n\\r\\n        address signer = address(0);\\r\\n        if (v == 27 || v == 28) {\\r\\n            // solium-disable-next-line arg-overflow\\r\\n            signer = ecrecover(hash, v, r, s);\\r\\n        }\\r\\n        return secret == signer;\\r\\n    }\\r\\n\\r\\n    function _dailyRewards(bool godBull) internal pure returns (uint256) {\\r\\n        if (godBull) return 20;\\r\\n        return 10;\\r\\n    }\\r\\n\\r\\n    function _refundPeriodAllowed() internal view returns (bool) {\\r\\n        return\\r\\n            block.timestamp >= bapGenesis.genesisTimestamp() + 31 days &&\\r\\n            block.timestamp <= bapGenesis.genesisTimestamp() + 180 days;\\r\\n    }\\r\\n\\r\\n    function _claimRewardsFromToken(uint256 tokenId, bool isGodBull)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            bapGenesis.genesisTimestamp() + grazingPeriodTime <=\\r\\n                block.timestamp ||\\r\\n                claimFlag,\\r\\n            \\\"Grazing Period is not Finished\\\"\\r\\n        );\\r\\n        require(bapGenesis.tokenExist(tokenId), \\\"Token does exist\\\");\\r\\n        require(\\r\\n            bapGenesis.ownerOf(tokenId) == _msgSender(),\\r\\n            \\\"Sender is not the owner\\\"\\r\\n        );\\r\\n        uint256 timeFromCreation = (block.timestamp -\\r\\n            bapGenesis.mintingDatetime(tokenId)).div(timeCounter);\\r\\n\\r\\n        uint256 methAmount = _dailyRewards(isGodBull) *\\r\\n            timeFromCreation -\\r\\n            claimedMeth[tokenId];\\r\\n        claimedMeth[tokenId] += methAmount;\\r\\n        return methAmount;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/BAPTeenBullsInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface BAPTeenBullsInterface {\\n  function generateTeenBull() external;\\n  function generateMergerOrb() external;\\n  \\n  function burnTeenBull(uint) external;\\n}\"\r\n    },\r\n    \"contracts/Interfaces/BAPUtilitiesInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface BAPUtilitiesInterface {\\n    function purchaseIncubator() external;\\n    function purchaseMergerOrb() external;\\n    function balanceOf(address, uint256) external returns(uint256);\\n    function burn(uint256, uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/BAPMethaneInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface BAPMethaneInterface {\\n  function name() external view returns (string memory);\\n  function maxSupply() external view returns (uint256);\\n  function claims(address) external view returns (uint256);\\n  function claim(address, uint256) external;\\n  function pay(uint256,uint256) external;\\n  function treasuryWallet() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/Interfaces/BAPGenesisInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\ninterface BAPGenesisInterface {\\n  function mintingDatetime(uint256) external view returns (uint256);\\n  function tokenExist(uint256) external view returns (bool);\\n  function ownerOf(uint256) external view returns (address);\\n  function dailyRewards(bool) external view returns (uint256);\\n  function initialMintingTimestamp() external view returns (uint256);\\n  function originalMintingPrice(uint256) external view returns (uint256);\\n  function breedings(uint256) external view returns (uint256);\\n  function maxBreedings() external view returns (uint256);\\n  function breedBulls(uint256,uint256) external;\\n  function _orchestrator() external view returns (address);\\n  function approve(address, uint256) external;\\n  function refund(address, uint256) external payable;\\n  function safeTransferFrom(address,address,uint256) external;\\n  function refundPeriodAllowed(uint256) external view returns(bool);\\n  function notAvailableForRefund(uint256) external returns(bool);\\n  function generateGodBull() external;\\n  function genesisTimestamp() external view returns(uint256);\\n  function setGrazingPeriodTime(uint256) external;\\n  function setTimeCounter(uint256) external; \\n  function secret() external view returns(address);\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bapGenesis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bapMethane\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bapGenesisAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bapMethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bapTeenBullsAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bapUtilitiesAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bull1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bull2\",\"type\":\"uint256\"}],\"name\":\"buyIncubator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"teen\",\"type\":\"uint256\"}],\"name\":\"buyMergeOrb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"bulls\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gods\",\"type\":\"uint256[]\"}],\"name\":\"claimMeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedMeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bull1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bull2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bull3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bull4\",\"type\":\"uint256\"}],\"name\":\"generateGodBull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"generateTeenBull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGodBull\",\"type\":\"bool\"}],\"name\":\"getClaimableMeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grazingPeriodTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintingRefunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"project\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secret\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claimFlag\",\"type\":\"bool\"}],\"name\":\"setClaimFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setGenesisContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grazingPeriod\",\"type\":\"uint256\"}],\"name\":\"setGrazingPeriodTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setMethaneContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_refundFlag\",\"type\":\"bool\"}],\"name\":\"setRefundFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setTeenBullsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeCounter\",\"type\":\"uint256\"}],\"name\":\"setTimeCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setUtilitiesContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_secret\",\"type\":\"address\"}],\"name\":\"setWhitelistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BAPOrchestrator", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ff274e743db86b725d749504cc801e72847811690000000000000000000000008d4282f8d0bd5f63a7c57b89265078019a0f9127", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}