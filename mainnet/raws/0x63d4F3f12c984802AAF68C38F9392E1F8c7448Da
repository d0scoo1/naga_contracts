{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.12;\r\n\r\n/*********************************************\r\n *********************************************\r\n *  H e l p e r   c o n t r a c t s\r\n */\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint8 private constant _NOT_ENTERED = 1;\r\n    uint8 private constant _ENTERED = 2;\r\n    uint8 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"Reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Adminable {\r\n    address private _admin1;\r\n    address private _admin2;\r\n\r\n    constructor() {\r\n        _set(1, msg.sender);\r\n    }\r\n\r\n    function admin(uint8 idx) public view returns (address) {\r\n        if (idx == 1) {\r\n            return _admin1;\r\n        } else if (idx == 2) {\r\n            return _admin2;\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(\r\n            _admin1 == msg.sender || _admin2 == msg.sender,\r\n            \"Caller not admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function addAdmin(uint8 idx, address addr) public onlyAdmin {\r\n        require(addr != address(0), \"Invalid address\");\r\n        require(addr != _admin1 && addr != _admin2, \"Already admin\");\r\n        require(idx == 1 || idx == 2, \"Invalid index\");\r\n        _set(idx, addr);\r\n    }\r\n\r\n    function isAdmin(address addr) public view returns (bool) {\r\n        return addr == _admin1 || addr == _admin2;\r\n    }\r\n\r\n    function _set(uint8 idx, address addr) private {\r\n        if (idx == 1) {\r\n            _admin1 = addr;\r\n        } else {\r\n            _admin2 = addr;\r\n        }\r\n    }\r\n}\r\n\r\n/*********************************************\r\n *********************************************\r\n *  I n t e r f a c e s\r\n */\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC2981 {\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\ninterface IERC721 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\ncontract NFTAuction is ReentrancyGuard, Adminable, IERC721Receiver {\r\n    /*********************************************\r\n     *********************************************\r\n     *  E v e n t s\r\n     *\r\n     */\r\n\r\n    struct Auction {\r\n        address nft;\r\n        address bidder;\r\n        address seller;\r\n        uint256 tokenId;\r\n        uint256 amount;\r\n        uint64 startAt;\r\n        uint64 endAt;\r\n        uint64 minOutbid;\r\n        uint16 extensionDuration;\r\n        uint16 extensionTrigger;\r\n        uint16 hostFee;\r\n    }\r\n\r\n    event AuctionCreated(\r\n        address indexed seller,\r\n        address indexed nft,\r\n        uint256 indexed tokenId,\r\n        uint256 startPrice,\r\n        uint256 auctionId,\r\n        uint64 startAt,\r\n        uint64 endAt\r\n    );\r\n\r\n    event AuctionUpdated(uint256 indexed auctionId, uint256 startPrice);\r\n\r\n    event AuctionCancelled(uint256 indexed auctionId);\r\n\r\n    event AuctionCanceledByAdmin(uint256 indexed auctionId, string reason);\r\n\r\n    event AuctionFinalized(\r\n        uint256 indexed auctionId,\r\n        address seller,\r\n        address bidder,\r\n        uint64 endAt,\r\n        uint256 amount\r\n    );\r\n\r\n    event BidPlaced(\r\n        uint256 indexed auctionId,\r\n        address indexed bidder,\r\n        uint256 amount,\r\n        uint64 endTime\r\n    );\r\n\r\n    event WithdrawFailed(address indexed user, uint256 amount);\r\n    event WithdrawSuccess(address indexed user, uint256 amount);\r\n\r\n    /*********************************************\r\n     *********************************************\r\n     *  P r i v a t e\r\n     *      m e m b e r s\r\n     *\r\n     */\r\n    mapping(address => mapping(uint256 => uint256))  private _nftToTokenIdToAuctionId;\r\n    mapping(uint256 => Auction) private _auctionIdToAuction;\r\n    mapping(address => uint256) private _pendingWithdraws;\r\n    uint256 private _auctionId;\r\n    uint256 private _minStartPrice;\r\n    uint32 private _minAuctionDuration;\r\n    uint32 private _minDurationExt;\r\n    uint32 private _maxDurationExt;\r\n    uint32 private _readGasLimit;\r\n    uint32 private _lowGasLimit;\r\n    uint32 private _mediumGasLimit;\r\n    uint16 private _royaltyLimit;\r\n    uint16 private _hostFee;\r\n    address private _hostTreasury;\r\n\r\n    constructor() ReentrancyGuard() Adminable() {}\r\n\r\n    /*********************************************\r\n     *********************************************\r\n     *  P u b l i c\r\n     *      m e t h o d s\r\n     *\r\n     */\r\n\r\n    function setHostTreasury(address addr) public onlyAdmin {\r\n        require(addr != address(0), \"Invalid address\");\r\n        _hostTreasury = addr;\r\n    }\r\n\r\n    function setHostFee(uint16 fee) public onlyAdmin {\r\n        require(fee > 0, \"Invalid fee\");\r\n        _hostFee = fee;\r\n    }\r\n\r\n    function setHostFeeForAuction(uint256 auctionId, uint16 fee)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(fee > 0, \"Invalid fee\");\r\n        _auctionIdToAuction[auctionId].hostFee = fee;\r\n    }\r\n\r\n    function updateConfig(\r\n        uint256 minStartPrice,\r\n        uint32 minAuctionDuration,\r\n        uint32 minDurationExt,\r\n        uint32 maxDurationExt,\r\n        uint16 royaltyLimit,\r\n        uint32 lowGasLimit,\r\n        uint32 mediumGasLimit,\r\n        uint32 readGasLimit\r\n    ) public onlyAdmin {\r\n        if (minStartPrice > 0) {\r\n            _minStartPrice = minStartPrice;\r\n        }\r\n\r\n        if (minAuctionDuration > 0) {\r\n            _minAuctionDuration = minAuctionDuration;\r\n        }\r\n\r\n        if (minDurationExt > 0) {\r\n            _minDurationExt = minDurationExt;\r\n        }\r\n\r\n        if (maxDurationExt > 0) {\r\n            _maxDurationExt = maxDurationExt;\r\n        }\r\n\r\n        if (royaltyLimit > 0) {\r\n            _royaltyLimit = royaltyLimit;\r\n        }\r\n\r\n        if (lowGasLimit > 0) {\r\n            _lowGasLimit = lowGasLimit;\r\n        }\r\n\r\n        if (mediumGasLimit > 0) {\r\n            _mediumGasLimit = mediumGasLimit;\r\n        }\r\n\r\n        if (readGasLimit > 0) {\r\n            _readGasLimit = readGasLimit;\r\n        }\r\n    }\r\n\r\n    function getConfig()\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint32,\r\n            uint32,\r\n            uint32,\r\n            uint16,\r\n            uint32,\r\n            uint32,\r\n            address,\r\n            uint16\r\n        )\r\n    {\r\n        return (\r\n            _minStartPrice,\r\n            _minAuctionDuration,\r\n            _minDurationExt,\r\n            _maxDurationExt,\r\n            _royaltyLimit,\r\n            _lowGasLimit,\r\n            _mediumGasLimit,\r\n            _hostTreasury,\r\n            _hostFee\r\n        );\r\n    }\r\n\r\n    function getAuctionId(address nft, uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _nftToTokenIdToAuctionId[nft][tokenId];\r\n    }\r\n\r\n    function getAuctionDetails(uint256 auctionId)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint16\r\n        )\r\n    {\r\n        Auction memory auction = _auctionIdToAuction[auctionId];\r\n        require(auction.nft != address(0), \"Auction not found\");\r\n        return (\r\n            auction.seller,\r\n            auction.startAt,\r\n            auction.endAt,\r\n            auction.extensionDuration,\r\n            auction.bidder,\r\n            auction.amount,\r\n            auction.minOutbid,\r\n            auction.hostFee == 1\r\n                ? 0\r\n                : (auction.hostFee > 1 ? auction.hostFee : _hostFee)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Contract owner could create auction on behalf of seller\r\n     */\r\n    function createAuctionFor(\r\n        address nft,\r\n        address seller,\r\n        uint256 tokenId,\r\n        uint256 startPrice,\r\n        uint64 startAt,\r\n        uint64 endAt,\r\n        uint64 minOutbid,\r\n        uint16 extensionDuration,\r\n        uint16 extensionTrigger,\r\n        uint16 hostFee\r\n    ) public nonReentrant onlyAdmin {\r\n        _createAuction(\r\n            nft,\r\n            seller,\r\n            tokenId,\r\n            startPrice,\r\n            startAt,\r\n            endAt,\r\n            minOutbid,\r\n            extensionDuration,\r\n            extensionTrigger,\r\n            hostFee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates an auction for the given NFT.\r\n     * The NFT is held in escrow until the auction is finalized or cancelled.\r\n     */\r\n    function createAuction(\r\n        address nft,\r\n        uint256 tokenId,\r\n        uint256 startPrice,\r\n        uint64 startAt,\r\n        uint64 endAt,\r\n        uint64 minOutbid,\r\n        uint16 extensionDuration,\r\n        uint16 extensionTrigger\r\n    ) public nonReentrant {\r\n        _createAuction(\r\n            nft,\r\n            msg.sender,\r\n            tokenId,\r\n            startPrice,\r\n            startAt,\r\n            endAt,\r\n            minOutbid,\r\n            extensionDuration,\r\n            extensionTrigger,\r\n            0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice If an auction has been created but has not yet received bids, the configuration\r\n     * such as the startPrice may be changed by the seller or admin.\r\n     */\r\n    function updateAuction(uint256 auctionId, uint256 startPrice) public {\r\n        Auction storage auction = _auctionIdToAuction[auctionId];\r\n        require(auction.bidder == address(0), \"Auction in progress\");\r\n        require(\r\n            auction.seller == msg.sender || isAdmin(msg.sender),\r\n            \"Unauthorized\"\r\n        );\r\n\r\n        auction.amount = startPrice;\r\n\r\n        emit AuctionUpdated(auctionId, startPrice);\r\n    }\r\n\r\n    /**\r\n     * @notice If an auction has been created but has not yet received bids, it may be cancelled by the seller or admin.\r\n     * The NFT is returned to the seller from escrow.\r\n     */\r\n    function cancelAuction(uint256 auctionId) public nonReentrant {\r\n        Auction memory auction = _auctionIdToAuction[auctionId];\r\n        require(auction.bidder == address(0), \"Auction in progress\");\r\n        require(\r\n            auction.seller == msg.sender || isAdmin(msg.sender),\r\n            \"Unauthorized\"\r\n        );\r\n\r\n        delete _nftToTokenIdToAuctionId[auction.nft][auction.tokenId];\r\n        delete _auctionIdToAuction[auctionId];\r\n\r\n        IERC721(auction.nft).transferFrom(\r\n            address(this),\r\n            auction.seller,\r\n            auction.tokenId\r\n        );\r\n\r\n        emit AuctionCancelled(auctionId);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows Platform to cancel an auction, refunding the bidder and returning the NFT to the seller.\r\n     * This should only be used for extreme cases such as DMCA takedown requests. The reason should always be provided.\r\n     */\r\n    function adminCancelAuction(uint256 auctionId, string memory reason)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(bytes(reason).length > 0, \"Reason required\");\r\n        Auction memory auction = _auctionIdToAuction[auctionId];\r\n        require(auction.amount != 0, \"Auction not found\");\r\n\r\n        delete _nftToTokenIdToAuctionId[auction.nft][auction.tokenId];\r\n        delete _auctionIdToAuction[auctionId];\r\n\r\n        IERC721(auction.nft).transferFrom(\r\n            address(this),\r\n            auction.seller,\r\n            auction.tokenId\r\n        );\r\n\r\n        if (auction.bidder != address(0)) {\r\n            _trySendAmount(auction.bidder, auction.amount, _mediumGasLimit);\r\n        }\r\n\r\n        emit AuctionCanceledByAdmin(auctionId, reason);\r\n    }\r\n\r\n    /**\r\n     * @notice A bidder may place a bid which is at least the value defined by `getMinBidAmount`.\r\n     * If there is already an outstanding bid, the previous bidder will be refunded at this time\r\n     * and if the bid is placed in the final moments of the auction, the countdown may be extended.\r\n     */\r\n    function placeBid(uint256 auctionId) public payable nonReentrant {\r\n        Auction storage auction = _auctionIdToAuction[auctionId];\r\n        require(auction.amount != 0, \"Auction not found\");\r\n        require(auction.endAt >= block.timestamp, \"Auction is over\");\r\n        require(auction.startAt <= block.timestamp, \"Auction not started\");\r\n\r\n        if (auction.bidder == address(0)) {\r\n            // This is first bid\r\n            require(msg.value >= auction.amount, \"Bid amount too low\");\r\n\r\n            auction.amount = msg.value;\r\n            auction.bidder = payable(msg.sender);\r\n        } else {\r\n            // This is outbid attempt\r\n            require(msg.value > auction.amount, \"Bid amount too low\");\r\n            uint256 outbid;\r\n            unchecked {\r\n                outbid = msg.value - auction.amount;\r\n            }\r\n            require(outbid >= auction.minOutbid, \"Bid amount too low\");\r\n\r\n            uint256 prevAmount = auction.amount;\r\n            address prevBidder = auction.bidder;\r\n            auction.amount = msg.value;\r\n            auction.bidder = payable(msg.sender);\r\n\r\n            // When a bid outbids another, check to see if a time extension should apply.\r\n            unchecked {\r\n                if (\r\n                    auction.endAt - block.timestamp < auction.extensionTrigger\r\n                ) {\r\n                    auction.endAt = auction.endAt + auction.extensionDuration;\r\n                }\r\n            }\r\n\r\n            _trySendAmount(prevBidder, prevAmount, _lowGasLimit);\r\n        }\r\n\r\n        emit BidPlaced(auctionId, msg.sender, msg.value, auction.endAt);\r\n    }\r\n\r\n    /**\r\n     * @notice When auction end date is reached it should be finalized using transaction calling this function.\r\n     * NFT is transferred to the winner and funds are distributed between - seller, host and creator\r\n     */\r\n    function finalizeAuction(uint256 auctionId) public nonReentrant {\r\n        Auction memory auction = _auctionIdToAuction[auctionId];\r\n        require(auction.amount != 0, \"Auction not found\");\r\n        require(auction.endAt < block.timestamp, \"Auction in progress\");\r\n\r\n        delete _nftToTokenIdToAuctionId[auction.nft][auction.tokenId];\r\n        delete _auctionIdToAuction[auctionId];\r\n\r\n        if (auction.bidder == address(0)) {\r\n            // There were no bidders on this auction.\r\n            // Just return the NFT to the seller\r\n            IERC721(auction.nft).transferFrom(\r\n                address(this),\r\n                auction.seller,\r\n                auction.tokenId\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        // Transfer the NFT to the winner\r\n        IERC721(auction.nft).transferFrom(\r\n            address(this),\r\n            auction.bidder,\r\n            auction.tokenId\r\n        );\r\n\r\n        address creatorAddress;\r\n        uint256 hostCut;\r\n        uint256 creatorCut;\r\n        uint256 sellerCut;\r\n\r\n        // Calculate all the cuts - seller, host, creator(respecting IERC2981)\r\n        if (IERC165(auction.nft).supportsInterface(type(IERC2981).interfaceId)) {\r\n            (\r\n                address creatorRoyaltyAddress,\r\n                uint256 creatorRoyaltyAmount\r\n            ) = IERC2981(auction.nft).royaltyInfo{gas: _readGasLimit}(\r\n                    auction.tokenId,\r\n                    auction.amount\r\n                );\r\n\r\n            if (creatorRoyaltyAddress != auction.seller) {\r\n                // Make sure that creatorRoyaltyAmount is reasonable\r\n                uint256 royatlyLimit = (auction.amount * _royaltyLimit) /\r\n                    10000;\r\n\r\n                creatorCut = royatlyLimit >= creatorRoyaltyAmount\r\n                    ? creatorRoyaltyAmount\r\n                    : royatlyLimit;\r\n                creatorAddress = creatorRoyaltyAddress;\r\n            }\r\n        }\r\n\r\n        uint16 hostFee = auction.hostFee == 1\r\n            ? 0\r\n            : (auction.hostFee > 1 ? auction.hostFee : _hostFee);\r\n        hostCut = (auction.amount * hostFee) / 10000;\r\n        sellerCut = auction.amount - hostCut - creatorCut;\r\n\r\n        // Send funds to the parties\r\n        _trySendAmount(_hostTreasury, hostCut, _lowGasLimit);\r\n        _trySendAmount(auction.seller, sellerCut, _mediumGasLimit);\r\n        _trySendAmount(creatorAddress, creatorCut, _mediumGasLimit);\r\n\r\n        emit AuctionFinalized(\r\n            auctionId,\r\n            auction.seller,\r\n            auction.bidder,\r\n            auction.endAt,\r\n            auction.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Allows anyone to manually trigger a withdraw of funds which originally failed to transfer for a user.\r\n     */\r\n    function withdrawFor(address user) public nonReentrant {\r\n        uint256 amount = _pendingWithdraws[user];\r\n        require(amount > 0, \"Nothing to withdraw\");\r\n        require(address(this).balance >= amount, \"Insufficient balance\");\r\n\r\n        _pendingWithdraws[user] = 0;\r\n\r\n        (bool success, ) = payable(user).call{value: amount}(\"\");\r\n        require(success, \"Withdraw failed\");\r\n\r\n        emit WithdrawSuccess(user, amount);\r\n    }\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public pure returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    /*********************************************\r\n     *********************************************\r\n     *  P r i v a t e\r\n     *      m e t h o d s\r\n     *\r\n     */\r\n    function _createAuction(\r\n        address nft,\r\n        address seller,\r\n        uint256 tokenId,\r\n        uint256 startPrice,\r\n        uint64 startAt,\r\n        uint64 endAt,\r\n        uint64 minOutbid,\r\n        uint16 extensionDuration,\r\n        uint16 extensionTrigger,\r\n        uint16 hostFee\r\n    ) private {\r\n        require(startPrice > _minStartPrice, \"Starting price too low\");\r\n        require(\r\n            _nftToTokenIdToAuctionId[nft][tokenId] == 0,\r\n            \"NFT already on auction\"\r\n        );\r\n        require(\r\n            startAt < endAt && (endAt - startAt) >= _minAuctionDuration,\r\n            \"Invalid auction duration\"\r\n        );\r\n        require(\r\n            extensionDuration >= _minDurationExt &&\r\n                extensionDuration <= _maxDurationExt,\r\n            \"Extension duration out of bounds\"\r\n        );\r\n\r\n        uint256 auctionId = _getNextAuctionId();\r\n        _nftToTokenIdToAuctionId[nft][tokenId] = auctionId;\r\n        _auctionIdToAuction[auctionId] = Auction(\r\n            nft,\r\n            address(0),\r\n            seller,\r\n            tokenId,\r\n            startPrice,\r\n            startAt,\r\n            endAt,\r\n            minOutbid,\r\n            extensionDuration,\r\n            extensionTrigger,\r\n            hostFee\r\n        );\r\n\r\n        IERC721(nft).transferFrom(seller, address(this), tokenId);\r\n\r\n        emit AuctionCreated(\r\n            seller,\r\n            nft,\r\n            tokenId,\r\n            startPrice,\r\n            auctionId,\r\n            startAt,\r\n            endAt\r\n        );\r\n    }\r\n\r\n    function _getNextAuctionId() private returns (uint256) {\r\n        return ++_auctionId;\r\n    }\r\n\r\n    /**\r\n     * @dev Attempt to send a user or contract ETH and if it fails store the amount owned for later withdraw.\r\n     */\r\n    function _trySendAmount(\r\n        address user,\r\n        uint256 amount,\r\n        uint256 gasLimit\r\n    ) private {\r\n        if (amount == 0 || address(0) == user) {\r\n            return;\r\n        }\r\n\r\n        // Cap the gas to prevent consuming all available gas to block a tx from completing successfully\r\n        (bool success, ) = payable(user).call{value: amount, gas: gasLimit}(\"\");\r\n        if (!success) {\r\n            // Record failed sends for a withdraw later\r\n            // Transfers could fail if sent to a multisig with non-trivial receiver logic\r\n            _pendingWithdraws[user] += amount;\r\n            emit WithdrawFailed(user, amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"AuctionCanceledByAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startAt\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endAt\",\"type\":\"uint64\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endAt\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"AuctionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"idx\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"idx\",\"type\":\"uint8\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"adminCancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minOutbid\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"extensionDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"extensionTrigger\",\"type\":\"uint16\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minOutbid\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"extensionDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"extensionTrigger\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hostFee\",\"type\":\"uint16\"}],\"name\":\"createAuctionFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"finalizeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"setHostFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"setHostFeeForAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setHostTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"updateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"minAuctionDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDurationExt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDurationExt\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"royaltyLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"lowGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"mediumGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"readGasLimit\",\"type\":\"uint32\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTAuction", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6dea8a07df57a4eb1d2262ebc0b7d398766002da77daaddf7289b00ffd367ae2"}]}