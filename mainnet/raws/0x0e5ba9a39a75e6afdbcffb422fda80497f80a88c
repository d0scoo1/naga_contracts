{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\r\n        // contract may have been reentered.\r\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} modifier, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal onlyInitializing {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProofUpgradeable {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = _efficientHash(computedHash, proofElement);\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = _efficientHash(proofElement, computedHash);\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IMintableERC20 is IERC20Metadata {\r\n    function mint(address _recipient, uint256 _amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    function lowerHasMinted(uint256 amount) external;\r\n}\r\n\r\nlibrary FixedPointMath {\r\n    uint256 public constant DECIMALS = 18;\r\n    uint256 public constant SCALAR = 10**DECIMALS;\r\n\r\n    struct FixedDecimal {\r\n        uint256 x;\r\n    }\r\n\r\n    function fromU256(uint256 value)\r\n        internal\r\n        pure\r\n        returns (FixedDecimal memory)\r\n    {\r\n        uint256 x;\r\n        require(value == 0 || (x = value * SCALAR) / SCALAR == value);\r\n        return FixedDecimal(x);\r\n    }\r\n\r\n    function maximumValue() internal pure returns (FixedDecimal memory) {\r\n        return FixedDecimal(type(uint256).max);\r\n    }\r\n\r\n    function add(FixedDecimal memory self, FixedDecimal memory value)\r\n        internal\r\n        pure\r\n        returns (FixedDecimal memory)\r\n    {\r\n        uint256 x;\r\n        require((x = self.x + value.x) >= self.x);\r\n        return FixedDecimal(x);\r\n    }\r\n\r\n    function add(FixedDecimal memory self, uint256 value)\r\n        internal\r\n        pure\r\n        returns (FixedDecimal memory)\r\n    {\r\n        return add(self, fromU256(value));\r\n    }\r\n\r\n    function sub(FixedDecimal memory self, FixedDecimal memory value)\r\n        internal\r\n        pure\r\n        returns (FixedDecimal memory)\r\n    {\r\n        uint256 x;\r\n        require((x = self.x - value.x) <= self.x);\r\n        return FixedDecimal(x);\r\n    }\r\n\r\n    function sub(FixedDecimal memory self, uint256 value)\r\n        internal\r\n        pure\r\n        returns (FixedDecimal memory)\r\n    {\r\n        return sub(self, fromU256(value));\r\n    }\r\n\r\n    function mul(FixedDecimal memory self, uint256 value)\r\n        internal\r\n        pure\r\n        returns (FixedDecimal memory)\r\n    {\r\n        uint256 x;\r\n        require(value == 0 || (x = self.x * value) / value == self.x);\r\n        return FixedDecimal(x);\r\n    }\r\n\r\n    function div(FixedDecimal memory self, uint256 value)\r\n        internal\r\n        pure\r\n        returns (FixedDecimal memory)\r\n    {\r\n        require(value != 0);\r\n        return FixedDecimal(self.x / value);\r\n    }\r\n\r\n    function cmp(FixedDecimal memory self, FixedDecimal memory value)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        if (self.x < value.x) {\r\n            return -1;\r\n        }\r\n\r\n        if (self.x > value.x) {\r\n            return 1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function decode(FixedDecimal memory self) internal pure returns (uint256) {\r\n        return self.x / SCALAR;\r\n    }\r\n}\r\n\r\n/// @title Pool\r\n///\r\n/// @dev A library which provides the Merkle Pool data struct and associated functions.\r\nlibrary MerklePool {\r\n    using FixedPointMath for FixedPointMath.FixedDecimal;\r\n    using MerklePool for MerklePool.Data;\r\n    using MerklePool for MerklePool.List;\r\n\r\n    struct Context {\r\n        uint256 rewardRate;\r\n        uint256 totalRewardWeight;\r\n    }\r\n\r\n    struct Data {\r\n        address token;\r\n        uint256 totalDeposited;\r\n        uint256 totalUnclaimedTIC;\r\n        uint256 totalUnclaimedTICInLP;\r\n        uint256 rewardWeight;\r\n        FixedPointMath.FixedDecimal accumulatedRewardWeight;\r\n        uint256 lastUpdatedBlockTimestamp;\r\n    }\r\n\r\n    struct List {\r\n        Data[] elements;\r\n    }\r\n\r\n    /// @dev Updates the pool.\r\n    ///\r\n    /// @param _ctx the pool context.\r\n    function update(Data storage _data, Context storage _ctx) internal {\r\n        _data.accumulatedRewardWeight = _data.getUpdatedAccumulatedRewardWeight(\r\n            _ctx\r\n        );\r\n\r\n        // TODO: make this more gas efficient! we calc it twice!\r\n        _data.totalUnclaimedTIC = _data.getUpdatedTotalUnclaimed(_ctx);\r\n        _data.lastUpdatedBlockTimestamp = block.timestamp;\r\n    }\r\n\r\n    /// @dev Gets the rate at which the pool will distribute rewards to stakers.\r\n    ///\r\n    /// @param _ctx the pool context.\r\n    ///\r\n    /// @return the reward rate of the pool in tokens per second.\r\n    function getRewardRate(Data storage _data, Context storage _ctx)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_ctx.totalRewardWeight == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return (_ctx.rewardRate * _data.rewardWeight) / _ctx.totalRewardWeight;\r\n    }\r\n\r\n    /// @dev Gets the accumulated reward weight of a pool.\r\n    ///\r\n    /// @param _ctx the pool context.\r\n    ///\r\n    /// @return the accumulated reward weight.\r\n    function getUpdatedAccumulatedRewardWeight(\r\n        Data storage _data,\r\n        Context storage _ctx\r\n    ) internal view returns (FixedPointMath.FixedDecimal memory) {\r\n        if (_data.totalDeposited == 0) {\r\n            return _data.accumulatedRewardWeight;\r\n        }\r\n        uint256 amountToDistribute = _data.getUpdatedAmountToDistribute(_ctx);\r\n        if (amountToDistribute == 0) {\r\n            return _data.accumulatedRewardWeight;\r\n        }\r\n\r\n        FixedPointMath.FixedDecimal memory rewardWeight =\r\n            FixedPointMath.fromU256(amountToDistribute).div(\r\n                _data.totalDeposited\r\n            );\r\n\r\n        return _data.accumulatedRewardWeight.add(rewardWeight);\r\n    }\r\n\r\n    /**\r\n     * @dev get's the total amount to distribute in this pool based on the last updated timestamp.\r\n     * @param _data pool's data\r\n     * @param _ctx the pool context\r\n     */\r\n    function getUpdatedAmountToDistribute(\r\n        Data storage _data,\r\n        Context storage _ctx\r\n    ) internal view returns (uint256) {\r\n        uint256 elapsedTime = block.timestamp - _data.lastUpdatedBlockTimestamp;\r\n\r\n        if (elapsedTime == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 rewardRate = _data.getRewardRate(_ctx);\r\n        return rewardRate * elapsedTime;\r\n    }\r\n\r\n    /**\r\n     * @dev get's the total amount unclaimed in this pool based on the last updated timestamp.\r\n     * @param _data pool's data\r\n     * @param _ctx the pool context\r\n     */\r\n    function getUpdatedTotalUnclaimed(Data storage _data, Context storage _ctx)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_data.totalDeposited == 0) {\r\n            return _data.totalUnclaimedTIC;\r\n        }\r\n        return\r\n            _data.totalUnclaimedTIC + _data.getUpdatedAmountToDistribute(_ctx);\r\n    }\r\n\r\n    /// @dev Adds an element to the list.\r\n    ///\r\n    /// @param _element the element to add.\r\n    function push(List storage _self, Data memory _element) internal {\r\n        _self.elements.push(_element);\r\n    }\r\n\r\n    /// @dev Gets an element from the list.\r\n    ///\r\n    /// @param _index the index in the list.\r\n    ///\r\n    /// @return the element at the specified index.\r\n    function get(List storage _self, uint256 _index)\r\n        internal\r\n        view\r\n        returns (Data storage)\r\n    {\r\n        require(_index < _self.elements.length, \"MerklePool: INVALID_INDEX\");\r\n        return _self.elements[_index];\r\n    }\r\n\r\n    /// @dev Gets the last element in the list.\r\n    ///\r\n    /// This function will revert if there are no elements in the list.\r\n    ///ck\r\n    /// @return the last element in the list.\r\n    function last(List storage _self) internal view returns (Data storage) {\r\n        return _self.elements[_self.lastIndex()];\r\n    }\r\n\r\n    /// @dev Gets the index of the last element in the list.\r\n    ///\r\n    /// This function will revert if there are no elements in the list.\r\n    ///\r\n    /// @return the index of the last element.\r\n    function lastIndex(List storage _self) internal view returns (uint256) {\r\n        return _self.length() - 1;\r\n    }\r\n\r\n    /// @dev Gets the number of elements in the list.\r\n    ///\r\n    /// @return the number of elements.\r\n    function length(List storage _self) internal view returns (uint256) {\r\n        return _self.elements.length;\r\n    }\r\n}\r\n\r\n/// @title Stake\r\n///\r\n/// @dev A library which provides the Stake data struct and associated functions.\r\nlibrary MerkleStake {\r\n    using FixedPointMath for FixedPointMath.FixedDecimal;\r\n    using MerklePool for MerklePool.Data;\r\n    using MerkleStake for MerkleStake.Data;\r\n\r\n    struct Data {\r\n        uint256 totalDeposited;\r\n        uint256 totalUnrealized;\r\n        uint256 totalRealizedTIC;\r\n        uint256 totalRealizedLP;\r\n        FixedPointMath.FixedDecimal lastAccumulatedWeight;\r\n    }\r\n\r\n    function update(\r\n        Data storage _self,\r\n        MerklePool.Data storage _pool,\r\n        MerklePool.Context storage _ctx\r\n    ) internal {\r\n        _self.totalUnrealized = _self.getUpdatedTotalUnclaimed(_pool, _ctx);\r\n        _self.lastAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(\r\n            _ctx\r\n        );\r\n    }\r\n\r\n    function getUpdatedTotalUnclaimed(\r\n        Data storage _self,\r\n        MerklePool.Data storage _pool,\r\n        MerklePool.Context storage _ctx\r\n    ) internal view returns (uint256) {\r\n        FixedPointMath.FixedDecimal memory currentAccumulatedWeight =\r\n            _pool.getUpdatedAccumulatedRewardWeight(_ctx);\r\n        FixedPointMath.FixedDecimal memory lastAccumulatedWeight =\r\n            _self.lastAccumulatedWeight;\r\n\r\n        if (currentAccumulatedWeight.cmp(lastAccumulatedWeight) == 0) {\r\n            return _self.totalUnrealized;\r\n        }\r\n\r\n        uint256 amountToDistribute =\r\n            currentAccumulatedWeight\r\n                .sub(lastAccumulatedWeight)\r\n                .mul(_self.totalDeposited)\r\n                .decode();\r\n\r\n        return _self.totalUnrealized + amountToDistribute;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Represents all storage for our MerklePools contract for easy upgrading later\r\n */\r\ncontract MerklePoolsStorage {\r\n    IMintableERC20 public ticToken; // token which will be minted as a reward for staking.\r\n    uint256 public excessTICFromSlippage; // extra TIC that can be used before next mint\r\n\r\n    address public quoteToken; // other half of the LP token (not the reward token)\r\n    address public elasticLPToken; // elastic LP token we create to emit for claimed rewards\r\n    address public governance;\r\n    address public pendingGovernance;\r\n    address public forfeitAddress; // receives all unclaimed TIC when someone exits\r\n\r\n    bytes32 public merkleRoot;\r\n    bool public isClaimsEnabled; // disabled flag until first merkle proof is set.\r\n\r\n    // Tokens are mapped to their pool identifier plus one. Tokens that do not have an associated pool\r\n    // will return an identifier of zero.\r\n    mapping(address => uint256) public tokenPoolIds;\r\n\r\n    MerklePool.Context public poolContext; // The context shared between the pools.\r\n    MerklePool.List internal pools; // A list of all of the pools.\r\n\r\n    // mapping of all of the user stakes mapped first by pool and then by address.\r\n    mapping(address => mapping(uint256 => MerkleStake.Data)) public stakes;\r\n}\r\n\r\n/**\r\n * @title MathLib\r\n * @author ElasticDAO\r\n */\r\nlibrary MathLib {\r\n    struct InternalBalances {\r\n        // x*y=k - we track these internally to compare to actual balances of the ERC20's\r\n        // in order to calculate the \"decay\" or the amount of balances that are not\r\n        // participating in the pricing curve and adding additional liquidity to swap.\r\n        uint256 baseTokenReserveQty; // x\r\n        uint256 quoteTokenReserveQty; // y\r\n        uint256 kLast; // as of the last add / rem liquidity event\r\n    }\r\n\r\n    // aids in avoiding stack too deep errors.\r\n    struct TokenQtys {\r\n        uint256 baseTokenQty;\r\n        uint256 quoteTokenQty;\r\n        uint256 liquidityTokenQty;\r\n        uint256 liquidityTokenFeeQty;\r\n    }\r\n\r\n    uint256 public constant BASIS_POINTS = 10000;\r\n    uint256 public constant WAD = 1e18; // represent a decimal with 18 digits of precision\r\n\r\n    /**\r\n     * @dev divides two float values, required since solidity does not handle\r\n     * floating point values.\r\n     *\r\n     * inspiration: https://github.com/dapphub/ds-math/blob/master/src/math.sol\r\n     *\r\n     * NOTE: this rounds to the nearest integer (up or down). For example .666666 would end up\r\n     * rounding to .66667.\r\n     *\r\n     * @return uint256 wad value (decimal with 18 digits of precision)\r\n     */\r\n    function wDiv(uint256 a, uint256 b) public pure returns (uint256) {\r\n        return ((a * WAD) + (b / 2)) / b;\r\n    }\r\n\r\n    /**\r\n     * @dev rounds a integer (a) to the nearest n places.\r\n     * IE roundToNearest(123, 10) would round to the nearest 10th place (120).\r\n     */\r\n    function roundToNearest(uint256 a, uint256 n)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return ((a + (n / 2)) / n) * n;\r\n    }\r\n\r\n    /**\r\n     * @dev multiplies two float values, required since solidity does not handle\r\n     * floating point values\r\n     *\r\n     * inspiration: https://github.com/dapphub/ds-math/blob/master/src/math.sol\r\n     *\r\n     * @return uint256 wad value (decimal with 18 digits of precision)\r\n     */\r\n    function wMul(uint256 a, uint256 b) public pure returns (uint256) {\r\n        return ((a * b) + (WAD / 2)) / WAD;\r\n    }\r\n\r\n    /**\r\n     * @dev calculates an absolute diff between two integers. Basically the solidity\r\n     * equivalent of Math.abs(a-b);\r\n     */\r\n    function diff(uint256 a, uint256 b) public pure returns (uint256) {\r\n        if (a >= b) {\r\n            return a - b;\r\n        }\r\n        return b - a;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 x) public pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev defines the amount of decay needed in order for us to require a user to handle the\r\n     * decay prior to a double asset entry as the equivalent of 1 unit of quote token\r\n     */\r\n    function isSufficientDecayPresent(\r\n        uint256 _baseTokenReserveQty,\r\n        InternalBalances memory _internalBalances\r\n    ) public pure returns (bool) {\r\n        return (wDiv(\r\n            diff(_baseTokenReserveQty, _internalBalances.baseTokenReserveQty) *\r\n                WAD,\r\n            wDiv(\r\n                _internalBalances.baseTokenReserveQty,\r\n                _internalBalances.quoteTokenReserveQty\r\n            )\r\n        ) >= WAD); // the amount of base token (a) decay is greater than 1 unit of quote token (token b)\r\n    }\r\n\r\n    /**\r\n     * @dev used to calculate the qty of token a liquidity provider\r\n     * must add in order to maintain the current reserve ratios\r\n     * @param _tokenAQty base or quote token qty to be supplied by the liquidity provider\r\n     * @param _tokenAReserveQty current reserve qty of the base or quote token (same token as tokenA)\r\n     * @param _tokenBReserveQty current reserve qty of the other base or quote token (not tokenA)\r\n     */\r\n    function calculateQty(\r\n        uint256 _tokenAQty,\r\n        uint256 _tokenAReserveQty,\r\n        uint256 _tokenBReserveQty\r\n    ) public pure returns (uint256 tokenBQty) {\r\n        require(_tokenAQty != 0, \"MathLib: INSUFFICIENT_QTY\");\r\n        require(\r\n            _tokenAReserveQty != 0 && _tokenBReserveQty != 0,\r\n            \"MathLib: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        tokenBQty = (_tokenAQty * _tokenBReserveQty) / _tokenAReserveQty;\r\n    }\r\n\r\n    /**\r\n     * @dev used to calculate the qty of token a trader will receive (less fees)\r\n     * given the qty of token A they are providing\r\n     * @param _tokenASwapQty base or quote token qty to be swapped by the trader\r\n     * @param _tokenAReserveQty current reserve qty of the base or quote token (same token as tokenA)\r\n     * @param _tokenBReserveQty current reserve qty of the other base or quote token (not tokenA)\r\n     * @param _liquidityFeeInBasisPoints fee to liquidity providers represented in basis points\r\n     */\r\n    function calculateQtyToReturnAfterFees(\r\n        uint256 _tokenASwapQty,\r\n        uint256 _tokenAReserveQty,\r\n        uint256 _tokenBReserveQty,\r\n        uint256 _liquidityFeeInBasisPoints\r\n    ) public pure returns (uint256 qtyToReturn) {\r\n        uint256 tokenASwapQtyLessFee =\r\n            _tokenASwapQty * (BASIS_POINTS - _liquidityFeeInBasisPoints);\r\n        qtyToReturn =\r\n            (tokenASwapQtyLessFee * _tokenBReserveQty) /\r\n            ((_tokenAReserveQty * BASIS_POINTS) + tokenASwapQtyLessFee);\r\n    }\r\n\r\n    /**\r\n     * @dev used to calculate the qty of liquidity tokens (deltaRo) we will be issued to a supplier\r\n     * of a single asset entry when base token decay is present.\r\n     * @param _baseTokenReserveBalance the total balance (external) of base tokens in our pool (Alpha)\r\n     * @param _totalSupplyOfLiquidityTokens the total supply of our exchange's liquidity tokens (aka Ro)\r\n     * @param _tokenQtyAToAdd the amount of tokens being added by the caller to remove the current decay\r\n     * @param _internalTokenAReserveQty the internal balance (X or Y) of token A as a result of this transaction\r\n     * @param _omega - ratio of internal balances of baseToken and quoteToken: baseToken/quoteToken\r\n     * @return liquidityTokenQty qty of liquidity tokens to be issued in exchange\r\n     */\r\n    function calculateLiquidityTokenQtyForSingleAssetEntryWithBaseTokenDecay(\r\n        uint256 _baseTokenReserveBalance,\r\n        uint256 _totalSupplyOfLiquidityTokens,\r\n        uint256 _tokenQtyAToAdd,\r\n        uint256 _internalTokenAReserveQty,\r\n        uint256 _omega\r\n    ) public pure returns (uint256 liquidityTokenQty) {\r\n        /**\r\n        \r\n        (is the formula in the terms of quoteToken)\r\n                    \u0394Y \r\n            = ---------------------                                                    \r\n                Alpha/Omega + Y'\r\n\r\n\r\n         */\r\n        uint256 wRatio = wDiv(_baseTokenReserveBalance, _omega);\r\n        uint256 denominator = wRatio + _internalTokenAReserveQty;\r\n        uint256 wGamma = wDiv(_tokenQtyAToAdd, denominator);\r\n\r\n        liquidityTokenQty =\r\n            wDiv(\r\n                wMul(_totalSupplyOfLiquidityTokens * WAD, wGamma),\r\n                WAD - wGamma\r\n            ) /\r\n            WAD;\r\n    }\r\n\r\n    /**\r\n     * @dev used to calculate the qty of liquidity tokens (deltaRo) we will be issued to a supplier\r\n     * of a single asset entry when quote decay is present.\r\n     * @param _baseTokenReserveBalance the total balance (external) of base tokens in our pool (Alpha)\r\n     * @param _totalSupplyOfLiquidityTokens the total supply of our exchange's liquidity tokens (aka Ro)\r\n     * @param _tokenQtyAToAdd the amount of tokens being added by the caller to remove the current decay\r\n     * @param _internalTokenAReserveQty the internal balance (X or Y) of token A as a result of this transaction\r\n     * @return liquidityTokenQty qty of liquidity tokens to be issued in exchange\r\n     */\r\n    function calculateLiquidityTokenQtyForSingleAssetEntryWithQuoteTokenDecay(\r\n        uint256 _baseTokenReserveBalance,\r\n        uint256 _totalSupplyOfLiquidityTokens,\r\n        uint256 _tokenQtyAToAdd,\r\n        uint256 _internalTokenAReserveQty\r\n    ) public pure returns (uint256 liquidityTokenQty) {\r\n        /**\r\n        \r\n               \u0394X\r\n        = -------------------  / (denominator may be Alpha' instead of X)\r\n           X + (Alpha + \u0394X)\r\n\r\n        */\r\n\r\n        uint256 denominator =\r\n            _internalTokenAReserveQty +\r\n                _baseTokenReserveBalance +\r\n                _tokenQtyAToAdd;\r\n        uint256 wGamma = wDiv(_tokenQtyAToAdd, denominator);\r\n\r\n        liquidityTokenQty =\r\n            wDiv(\r\n                wMul(_totalSupplyOfLiquidityTokens * WAD, wGamma),\r\n                WAD - wGamma\r\n            ) /\r\n            WAD;\r\n    }\r\n\r\n    /**\r\n     * @dev used to calculate the qty of liquidity tokens (deltaRo) we will be issued to a supplier\r\n     * of a single asset entry when decay is present.\r\n     * @param _totalSupplyOfLiquidityTokens the total supply of our exchange's liquidity tokens (aka Ro)\r\n     * @param _quoteTokenQty the amount of quote token the user it adding to the pool (deltaB or deltaY)\r\n     * @param _quoteTokenReserveBalance the total balance (external) of quote tokens in our pool (Beta)\r\n     *\r\n     * @return liquidityTokenQty qty of liquidity tokens to be issued in exchange\r\n     */\r\n    function calculateLiquidityTokenQtyForDoubleAssetEntry(\r\n        uint256 _totalSupplyOfLiquidityTokens,\r\n        uint256 _quoteTokenQty,\r\n        uint256 _quoteTokenReserveBalance\r\n    ) public pure returns (uint256 liquidityTokenQty) {\r\n        liquidityTokenQty =\r\n            (_quoteTokenQty * _totalSupplyOfLiquidityTokens) /\r\n            _quoteTokenReserveBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev used to calculate the qty of quote token required and liquidity tokens (deltaRo) to be issued\r\n     * in order to add liquidity and remove base token decay.\r\n     * @param _quoteTokenQtyDesired the amount of quote token the user wants to contribute\r\n     * @param _baseTokenReserveQty the external base token reserve qty prior to this transaction\r\n     * @param _totalSupplyOfLiquidityTokens the total supply of our exchange's liquidity tokens (aka Ro)\r\n     * @param _internalBalances internal balances struct from our exchange's internal accounting\r\n     *\r\n     *\r\n     * @return quoteTokenQty qty of quote token the user must supply\r\n     * @return liquidityTokenQty qty of liquidity tokens to be issued in exchange\r\n     */\r\n    function calculateAddQuoteTokenLiquidityQuantities(\r\n        uint256 _quoteTokenQtyDesired,\r\n        uint256 _baseTokenReserveQty,\r\n        uint256 _totalSupplyOfLiquidityTokens,\r\n        InternalBalances storage _internalBalances\r\n    ) public returns (uint256 quoteTokenQty, uint256 liquidityTokenQty) {\r\n        uint256 baseTokenDecay =\r\n            _baseTokenReserveQty - _internalBalances.baseTokenReserveQty;\r\n\r\n        // determine max amount of quote token that can be added to offset the current decay\r\n        uint256 wInternalBaseTokenToQuoteTokenRatio =\r\n            wDiv(\r\n                _internalBalances.baseTokenReserveQty,\r\n                _internalBalances.quoteTokenReserveQty\r\n            );\r\n\r\n        // alphaDecay / omega (A/B)\r\n        uint256 maxQuoteTokenQty =\r\n            wDiv(baseTokenDecay, wInternalBaseTokenToQuoteTokenRatio);\r\n\r\n        if (_quoteTokenQtyDesired > maxQuoteTokenQty) {\r\n            quoteTokenQty = maxQuoteTokenQty;\r\n        } else {\r\n            quoteTokenQty = _quoteTokenQtyDesired;\r\n        }\r\n\r\n        uint256 baseTokenQtyDecayChange =\r\n            roundToNearest(\r\n                (quoteTokenQty * wInternalBaseTokenToQuoteTokenRatio),\r\n                WAD\r\n            ) / WAD;\r\n\r\n        require(\r\n            baseTokenQtyDecayChange != 0,\r\n            \"MathLib: INSUFFICIENT_CHANGE_IN_DECAY\"\r\n        );\r\n        //x += alphaDecayChange\r\n        //y += deltaBeta\r\n        _internalBalances.baseTokenReserveQty += baseTokenQtyDecayChange;\r\n        _internalBalances.quoteTokenReserveQty += quoteTokenQty;\r\n\r\n        // calculate the number of liquidity tokens to return to user using\r\n        liquidityTokenQty = calculateLiquidityTokenQtyForSingleAssetEntryWithBaseTokenDecay(\r\n            _baseTokenReserveQty,\r\n            _totalSupplyOfLiquidityTokens,\r\n            quoteTokenQty,\r\n            _internalBalances.quoteTokenReserveQty,\r\n            wInternalBaseTokenToQuoteTokenRatio\r\n        );\r\n        return (quoteTokenQty, liquidityTokenQty);\r\n    }\r\n\r\n    /**\r\n     * @dev used to calculate the qty of base tokens required and liquidity tokens (deltaRo) to be issued\r\n     * in order to add liquidity and remove base token decay.\r\n     * @param _baseTokenQtyDesired the amount of base token the user wants to contribute\r\n     * @param _baseTokenQtyMin the minimum amount of base token the user wants to contribute (allows for slippage)\r\n     * @param _baseTokenReserveQty the external base token reserve qty prior to this transaction\r\n     * @param _totalSupplyOfLiquidityTokens the total supply of our exchange's liquidity tokens (aka Ro)\r\n     * @param _internalBalances internal balances struct from our exchange's internal accounting\r\n     *\r\n     * @return baseTokenQty qty of base token the user must supply\r\n     * @return liquidityTokenQty qty of liquidity tokens to be issued in exchange\r\n     */\r\n    function calculateAddBaseTokenLiquidityQuantities(\r\n        uint256 _baseTokenQtyDesired,\r\n        uint256 _baseTokenQtyMin,\r\n        uint256 _baseTokenReserveQty,\r\n        uint256 _totalSupplyOfLiquidityTokens,\r\n        InternalBalances memory _internalBalances\r\n    ) public pure returns (uint256 baseTokenQty, uint256 liquidityTokenQty) {\r\n        uint256 maxBaseTokenQty =\r\n            _internalBalances.baseTokenReserveQty - _baseTokenReserveQty;\r\n        require(\r\n            _baseTokenQtyMin <= maxBaseTokenQty,\r\n            \"MathLib: INSUFFICIENT_DECAY\"\r\n        );\r\n\r\n        if (_baseTokenQtyDesired > maxBaseTokenQty) {\r\n            baseTokenQty = maxBaseTokenQty;\r\n        } else {\r\n            baseTokenQty = _baseTokenQtyDesired;\r\n        }\r\n\r\n        // determine the quote token qty decay change quoted on our current ratios\r\n        uint256 wInternalQuoteToBaseTokenRatio =\r\n            wDiv(\r\n                _internalBalances.quoteTokenReserveQty,\r\n                _internalBalances.baseTokenReserveQty\r\n            );\r\n\r\n        // NOTE we need this function to use the same\r\n        // rounding scheme as wDiv in order to avoid a case\r\n        // in which a user is trying to resolve decay in which\r\n        // quoteTokenQtyDecayChange ends up being 0 and we are stuck in\r\n        // a bad state.\r\n        uint256 quoteTokenQtyDecayChange =\r\n            roundToNearest(\r\n                (baseTokenQty * wInternalQuoteToBaseTokenRatio),\r\n                MathLib.WAD\r\n            ) / WAD;\r\n\r\n        require(\r\n            quoteTokenQtyDecayChange != 0,\r\n            \"MathLib: INSUFFICIENT_CHANGE_IN_DECAY\"\r\n        );\r\n\r\n        // we can now calculate the total amount of quote token decay\r\n        uint256 quoteTokenDecay =\r\n            (maxBaseTokenQty * wInternalQuoteToBaseTokenRatio) / WAD;\r\n\r\n        // this may be redundant quoted on the above math, but will check to ensure the decay wasn't so small\r\n        // that it was <1 and rounded down to 0 saving the caller some gas\r\n        // also could fix a potential revert due to div by zero.\r\n        require(quoteTokenDecay != 0, \"MathLib: NO_QUOTE_DECAY\");\r\n\r\n        // we are not changing anything about our internal accounting here. We are simply adding tokens\r\n        // to make our internal account \"right\"...or rather getting the external balances to match our internal\r\n        // quoteTokenReserveQty += quoteTokenQtyDecayChange;\r\n        // baseTokenReserveQty += baseTokenQty;\r\n\r\n        // calculate the number of liquidity tokens to return to user using:\r\n        liquidityTokenQty = calculateLiquidityTokenQtyForSingleAssetEntryWithQuoteTokenDecay(\r\n            _baseTokenReserveQty,\r\n            _totalSupplyOfLiquidityTokens,\r\n            baseTokenQty,\r\n            _internalBalances.baseTokenReserveQty\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev used to calculate the qty of tokens a user will need to contribute and be issued in order to add liquidity\r\n     * @param _baseTokenQtyDesired the amount of base token the user wants to contribute\r\n     * @param _quoteTokenQtyDesired the amount of quote token the user wants to contribute\r\n     * @param _baseTokenQtyMin the minimum amount of base token the user wants to contribute (allows for slippage)\r\n     * @param _quoteTokenQtyMin the minimum amount of quote token the user wants to contribute (allows for slippage)\r\n     * @param _baseTokenReserveQty the external base token reserve qty prior to this transaction\r\n     * @param _totalSupplyOfLiquidityTokens the total supply of our exchange's liquidity tokens (aka Ro)\r\n     * @param _internalBalances internal balances struct from our exchange's internal accounting\r\n     *\r\n     * @return tokenQtys qty of tokens needed to complete transaction\r\n     */\r\n    function calculateAddLiquidityQuantities(\r\n        uint256 _baseTokenQtyDesired,\r\n        uint256 _quoteTokenQtyDesired,\r\n        uint256 _baseTokenQtyMin,\r\n        uint256 _quoteTokenQtyMin,\r\n        uint256 _baseTokenReserveQty,\r\n        uint256 _totalSupplyOfLiquidityTokens,\r\n        InternalBalances storage _internalBalances\r\n    ) public returns (TokenQtys memory tokenQtys) {\r\n        if (_totalSupplyOfLiquidityTokens != 0) {\r\n            // we have outstanding liquidity tokens present and an existing price curve\r\n\r\n            tokenQtys.liquidityTokenFeeQty = calculateLiquidityTokenFees(\r\n                _totalSupplyOfLiquidityTokens,\r\n                _internalBalances\r\n            );\r\n\r\n            // we need to take this amount (that will be minted) into account for below calculations\r\n            _totalSupplyOfLiquidityTokens += tokenQtys.liquidityTokenFeeQty;\r\n\r\n            // confirm that we have no beta or alpha decay present\r\n            // if we do, we need to resolve that first\r\n            if (\r\n                isSufficientDecayPresent(\r\n                    _baseTokenReserveQty,\r\n                    _internalBalances\r\n                )\r\n            ) {\r\n                // decay is present and needs to be dealt with by the caller.\r\n\r\n                uint256 baseTokenQtyFromDecay;\r\n                uint256 quoteTokenQtyFromDecay;\r\n                uint256 liquidityTokenQtyFromDecay;\r\n\r\n                if (\r\n                    _baseTokenReserveQty > _internalBalances.baseTokenReserveQty\r\n                ) {\r\n                    // we have more base token than expected (base token decay) due to rebase up\r\n                    // we first need to handle this situation by requiring this user\r\n                    // to add quote tokens\r\n                    (\r\n                        quoteTokenQtyFromDecay,\r\n                        liquidityTokenQtyFromDecay\r\n                    ) = calculateAddQuoteTokenLiquidityQuantities(\r\n                        _quoteTokenQtyDesired,\r\n                        _baseTokenReserveQty,\r\n                        _totalSupplyOfLiquidityTokens,\r\n                        _internalBalances\r\n                    );\r\n                } else {\r\n                    // we have less base token than expected (quote token decay) due to a rebase down\r\n                    // we first need to handle this by adding base tokens to offset this.\r\n                    (\r\n                        baseTokenQtyFromDecay,\r\n                        liquidityTokenQtyFromDecay\r\n                    ) = calculateAddBaseTokenLiquidityQuantities(\r\n                        _baseTokenQtyDesired,\r\n                        0, // there is no minimum for this particular call since we may use base tokens later.\r\n                        _baseTokenReserveQty,\r\n                        _totalSupplyOfLiquidityTokens,\r\n                        _internalBalances\r\n                    );\r\n                }\r\n\r\n                if (\r\n                    quoteTokenQtyFromDecay < _quoteTokenQtyDesired &&\r\n                    baseTokenQtyFromDecay < _baseTokenQtyDesired\r\n                ) {\r\n                    // the user still has qty that they desire to contribute to the exchange for liquidity\r\n                    (\r\n                        tokenQtys.baseTokenQty,\r\n                        tokenQtys.quoteTokenQty,\r\n                        tokenQtys.liquidityTokenQty\r\n                    ) = calculateAddTokenPairLiquidityQuantities(\r\n                        _baseTokenQtyDesired - baseTokenQtyFromDecay, // safe from underflow quoted on above IF\r\n                        _quoteTokenQtyDesired - quoteTokenQtyFromDecay, // safe from underflow quoted on above IF\r\n                        0, // we will check minimums below\r\n                        0, // we will check minimums below\r\n                        _totalSupplyOfLiquidityTokens +\r\n                            liquidityTokenQtyFromDecay,\r\n                        _internalBalances // NOTE: these balances have already been updated when we did the decay math.\r\n                    );\r\n                }\r\n                tokenQtys.baseTokenQty += baseTokenQtyFromDecay;\r\n                tokenQtys.quoteTokenQty += quoteTokenQtyFromDecay;\r\n                tokenQtys.liquidityTokenQty += liquidityTokenQtyFromDecay;\r\n\r\n                require(\r\n                    tokenQtys.baseTokenQty >= _baseTokenQtyMin,\r\n                    \"MathLib: INSUFFICIENT_BASE_QTY\"\r\n                );\r\n\r\n                require(\r\n                    tokenQtys.quoteTokenQty >= _quoteTokenQtyMin,\r\n                    \"MathLib: INSUFFICIENT_QUOTE_QTY\"\r\n                );\r\n            } else {\r\n                // the user is just doing a simple double asset entry / providing both base and quote.\r\n                (\r\n                    tokenQtys.baseTokenQty,\r\n                    tokenQtys.quoteTokenQty,\r\n                    tokenQtys.liquidityTokenQty\r\n                ) = calculateAddTokenPairLiquidityQuantities(\r\n                    _baseTokenQtyDesired,\r\n                    _quoteTokenQtyDesired,\r\n                    _baseTokenQtyMin,\r\n                    _quoteTokenQtyMin,\r\n                    _totalSupplyOfLiquidityTokens,\r\n                    _internalBalances\r\n                );\r\n            }\r\n        } else {\r\n            // this user will set the initial pricing curve\r\n            require(\r\n                _baseTokenQtyDesired != 0,\r\n                \"MathLib: INSUFFICIENT_BASE_QTY_DESIRED\"\r\n            );\r\n            require(\r\n                _quoteTokenQtyDesired != 0,\r\n                \"MathLib: INSUFFICIENT_QUOTE_QTY_DESIRED\"\r\n            );\r\n\r\n            tokenQtys.baseTokenQty = _baseTokenQtyDesired;\r\n            tokenQtys.quoteTokenQty = _quoteTokenQtyDesired;\r\n            tokenQtys.liquidityTokenQty = sqrt(\r\n                _baseTokenQtyDesired * _quoteTokenQtyDesired\r\n            );\r\n\r\n            _internalBalances.baseTokenReserveQty += tokenQtys.baseTokenQty;\r\n            _internalBalances.quoteTokenReserveQty += tokenQtys.quoteTokenQty;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev calculates the qty of base and quote tokens required and liquidity tokens (deltaRo) to be issued\r\n     * in order to add liquidity when no decay is present.\r\n     * @param _baseTokenQtyDesired the amount of base token the user wants to contribute\r\n     * @param _quoteTokenQtyDesired the amount of quote token the user wants to contribute\r\n     * @param _baseTokenQtyMin the minimum amount of base token the user wants to contribute (allows for slippage)\r\n     * @param _quoteTokenQtyMin the minimum amount of quote token the user wants to contribute (allows for slippage)\r\n     * @param _totalSupplyOfLiquidityTokens the total supply of our exchange's liquidity tokens (aka Ro)\r\n     * @param _internalBalances internal balances struct from our exchange's internal accounting\r\n     *\r\n     * @return baseTokenQty qty of base token the user must supply\r\n     * @return quoteTokenQty qty of quote token the user must supply\r\n     * @return liquidityTokenQty qty of liquidity tokens to be issued in exchange\r\n     */\r\n    function calculateAddTokenPairLiquidityQuantities(\r\n        uint256 _baseTokenQtyDesired,\r\n        uint256 _quoteTokenQtyDesired,\r\n        uint256 _baseTokenQtyMin,\r\n        uint256 _quoteTokenQtyMin,\r\n        uint256 _totalSupplyOfLiquidityTokens,\r\n        InternalBalances storage _internalBalances\r\n    )\r\n        public\r\n        returns (\r\n            uint256 baseTokenQty,\r\n            uint256 quoteTokenQty,\r\n            uint256 liquidityTokenQty\r\n        )\r\n    {\r\n        uint256 requiredQuoteTokenQty =\r\n            calculateQty(\r\n                _baseTokenQtyDesired,\r\n                _internalBalances.baseTokenReserveQty,\r\n                _internalBalances.quoteTokenReserveQty\r\n            );\r\n\r\n        if (requiredQuoteTokenQty <= _quoteTokenQtyDesired) {\r\n            // user has to provide less than their desired amount\r\n            require(\r\n                requiredQuoteTokenQty >= _quoteTokenQtyMin,\r\n                \"MathLib: INSUFFICIENT_QUOTE_QTY\"\r\n            );\r\n            baseTokenQty = _baseTokenQtyDesired;\r\n            quoteTokenQty = requiredQuoteTokenQty;\r\n        } else {\r\n            // we need to check the opposite way.\r\n            uint256 requiredBaseTokenQty =\r\n                calculateQty(\r\n                    _quoteTokenQtyDesired,\r\n                    _internalBalances.quoteTokenReserveQty,\r\n                    _internalBalances.baseTokenReserveQty\r\n                );\r\n\r\n            require(\r\n                requiredBaseTokenQty >= _baseTokenQtyMin,\r\n                \"MathLib: INSUFFICIENT_BASE_QTY\"\r\n            );\r\n            baseTokenQty = requiredBaseTokenQty;\r\n            quoteTokenQty = _quoteTokenQtyDesired;\r\n        }\r\n\r\n        liquidityTokenQty = calculateLiquidityTokenQtyForDoubleAssetEntry(\r\n            _totalSupplyOfLiquidityTokens,\r\n            quoteTokenQty,\r\n            _internalBalances.quoteTokenReserveQty\r\n        );\r\n\r\n        _internalBalances.baseTokenReserveQty += baseTokenQty;\r\n        _internalBalances.quoteTokenReserveQty += quoteTokenQty;\r\n    }\r\n\r\n    /**\r\n     * @dev calculates the qty of base tokens a user will receive for swapping their quote tokens (less fees)\r\n     * @param _quoteTokenQty the amount of quote tokens the user wants to swap\r\n     * @param _baseTokenQtyMin the minimum about of base tokens they are willing to receive in return (slippage)\r\n     * @param _baseTokenReserveQty the external base token reserve qty prior to this transaction\r\n     * @param _liquidityFeeInBasisPoints the current total liquidity fee represented as an integer of basis points\r\n     * @param _internalBalances internal balances struct from our exchange's internal accounting\r\n     *\r\n     * @return baseTokenQty qty of base token the user will receive back\r\n     */\r\n    function calculateBaseTokenQty(\r\n        uint256 _quoteTokenQty,\r\n        uint256 _baseTokenQtyMin,\r\n        uint256 _baseTokenReserveQty,\r\n        uint256 _liquidityFeeInBasisPoints,\r\n        InternalBalances storage _internalBalances\r\n    ) public returns (uint256 baseTokenQty) {\r\n        require(\r\n            _baseTokenReserveQty != 0 &&\r\n                _internalBalances.baseTokenReserveQty != 0,\r\n            \"MathLib: INSUFFICIENT_BASE_TOKEN_QTY\"\r\n        );\r\n\r\n        // check to see if we have experience quote token decay / a rebase down event\r\n        if (_baseTokenReserveQty < _internalBalances.baseTokenReserveQty) {\r\n            // we have less reserves than our current price curve will expect, we need to adjust the curve\r\n            uint256 wPricingRatio =\r\n                wDiv(\r\n                    _internalBalances.baseTokenReserveQty,\r\n                    _internalBalances.quoteTokenReserveQty\r\n                ); // omega\r\n\r\n            uint256 impliedQuoteTokenQty =\r\n                wDiv(_baseTokenReserveQty, wPricingRatio); // no need to divide by WAD, wPricingRatio is already a WAD.\r\n\r\n            baseTokenQty = calculateQtyToReturnAfterFees(\r\n                _quoteTokenQty,\r\n                impliedQuoteTokenQty,\r\n                _baseTokenReserveQty, // use the actual balance here since we adjusted the quote token to match ratio!\r\n                _liquidityFeeInBasisPoints\r\n            );\r\n        } else {\r\n            // we have the same or more reserves, no need to alter the curve.\r\n            baseTokenQty = calculateQtyToReturnAfterFees(\r\n                _quoteTokenQty,\r\n                _internalBalances.quoteTokenReserveQty,\r\n                _internalBalances.baseTokenReserveQty,\r\n                _liquidityFeeInBasisPoints\r\n            );\r\n        }\r\n\r\n        require(\r\n            baseTokenQty >= _baseTokenQtyMin,\r\n            \"MathLib: INSUFFICIENT_BASE_TOKEN_QTY\"\r\n        );\r\n\r\n        _internalBalances.baseTokenReserveQty -= baseTokenQty;\r\n        _internalBalances.quoteTokenReserveQty += _quoteTokenQty;\r\n    }\r\n\r\n    /**\r\n     * @dev calculates the qty of quote tokens a user will receive for swapping their base tokens (less fees)\r\n     * @param _baseTokenQty the amount of bases tokens the user wants to swap\r\n     * @param _quoteTokenQtyMin the minimum about of quote tokens they are willing to receive in return (slippage)\r\n     * @param _liquidityFeeInBasisPoints the current total liquidity fee represented as an integer of basis points\r\n     * @param _internalBalances internal balances struct from our exchange's internal accounting\r\n     *\r\n     * @return quoteTokenQty qty of quote token the user will receive back\r\n     */\r\n    function calculateQuoteTokenQty(\r\n        uint256 _baseTokenQty,\r\n        uint256 _quoteTokenQtyMin,\r\n        uint256 _liquidityFeeInBasisPoints,\r\n        InternalBalances storage _internalBalances\r\n    ) public returns (uint256 quoteTokenQty) {\r\n        require(\r\n            _baseTokenQty != 0 && _quoteTokenQtyMin != 0,\r\n            \"MathLib: INSUFFICIENT_TOKEN_QTY\"\r\n        );\r\n\r\n        quoteTokenQty = calculateQtyToReturnAfterFees(\r\n            _baseTokenQty,\r\n            _internalBalances.baseTokenReserveQty,\r\n            _internalBalances.quoteTokenReserveQty,\r\n            _liquidityFeeInBasisPoints\r\n        );\r\n\r\n        require(\r\n            quoteTokenQty >= _quoteTokenQtyMin,\r\n            \"MathLib: INSUFFICIENT_QUOTE_TOKEN_QTY\"\r\n        );\r\n\r\n        _internalBalances.baseTokenReserveQty += _baseTokenQty;\r\n        _internalBalances.quoteTokenReserveQty -= quoteTokenQty;\r\n    }\r\n\r\n    /**\r\n     * @dev calculates the qty of liquidity tokens that should be sent to the DAO due to the growth in K from trading.\r\n     * The DAO takes 1/6 of the total fees (30BP total fee, 25 BP to lps and 5 BP to the DAO)\r\n     * @param _totalSupplyOfLiquidityTokens the total supply of our exchange's liquidity tokens (aka Ro)\r\n     * @param _internalBalances internal balances struct from our exchange's internal accounting\r\n     *\r\n     * @return liquidityTokenFeeQty qty of tokens to be minted to the fee address for the growth in K\r\n     */\r\n    function calculateLiquidityTokenFees(\r\n        uint256 _totalSupplyOfLiquidityTokens,\r\n        InternalBalances memory _internalBalances\r\n    ) public pure returns (uint256 liquidityTokenFeeQty) {\r\n        uint256 rootK =\r\n            sqrt(\r\n                _internalBalances.baseTokenReserveQty *\r\n                    _internalBalances.quoteTokenReserveQty\r\n            );\r\n        uint256 rootKLast = sqrt(_internalBalances.kLast);\r\n        if (rootK > rootKLast) {\r\n            uint256 numerator =\r\n                _totalSupplyOfLiquidityTokens * (rootK - rootKLast);\r\n            uint256 denominator = (rootK * 5) + rootKLast;\r\n            liquidityTokenFeeQty = numerator / denominator;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IExchangeFactory {\r\n    function feeAddress() external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title Exchange contract for Elastic Swap representing a single ERC20 pair of tokens to be swapped.\r\n * @author Elastic DAO\r\n * @notice This contract provides all of the needed functionality for a liquidity provider to supply/withdraw ERC20\r\n * tokens and traders to swap tokens for one another.\r\n */\r\ncontract Exchange is ERC20, ReentrancyGuard {\r\n    using MathLib for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public immutable baseToken; // address of ERC20 base token (elastic or fixed supply)\r\n    address public immutable quoteToken; // address of ERC20 quote token (WETH or a stable coin w/ fixed supply)\r\n    address public immutable exchangeFactoryAddress;\r\n\r\n    uint256 public constant TOTAL_LIQUIDITY_FEE = 30; // fee provided to liquidity providers + DAO in basis points\r\n    uint256 public constant MINIMUM_LIQUIDITY = 1e3;\r\n\r\n    MathLib.InternalBalances public internalBalances;\r\n\r\n    event AddLiquidity(\r\n        address indexed liquidityProvider,\r\n        uint256 baseTokenQtyAdded,\r\n        uint256 quoteTokenQtyAdded\r\n    );\r\n    event RemoveLiquidity(\r\n        address indexed liquidityProvider,\r\n        uint256 baseTokenQtyRemoved,\r\n        uint256 quoteTokenQtyRemoved\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 baseTokenQtyIn,\r\n        uint256 quoteTokenQtyIn,\r\n        uint256 baseTokenQtyOut,\r\n        uint256 quoteTokenQtyOut\r\n    );\r\n\r\n    /**\r\n     * @dev Called to check timestamps from users for expiration of their calls.\r\n     */\r\n    modifier isNotExpired(uint256 _expirationTimeStamp) {\r\n        require(_expirationTimeStamp >= block.timestamp, \"Exchange: EXPIRED\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice called by the exchange factory to create a new erc20 token swap pair (do not call this directly!)\r\n     * @param _name The human readable name of this pair (also used for the liquidity token name)\r\n     * @param _symbol Shortened symbol for trading pair (also used for the liquidity token symbol)\r\n     * @param _baseToken address of the ERC20 base token in the pair. This token can have a fixed or elastic supply\r\n     * @param _quoteToken address of the ERC20 quote token in the pair. This token is assumed to have a fixed supply.\r\n     * @param _exchangeFactoryAddress address of the exchange factory\r\n     */\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _baseToken,\r\n        address _quoteToken,\r\n        address _exchangeFactoryAddress\r\n    ) ERC20(_name, _symbol) {\r\n        baseToken = _baseToken;\r\n        quoteToken = _quoteToken;\r\n        exchangeFactoryAddress = _exchangeFactoryAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice primary entry point for a liquidity provider to add new liquidity (base and quote tokens) to the exchange\r\n     * and receive liquidity tokens in return.\r\n     * Requires approvals to be granted to this exchange for both base and quote tokens.\r\n     * @param _baseTokenQtyDesired qty of baseTokens that you would like to add to the exchange\r\n     * @param _quoteTokenQtyDesired qty of quoteTokens that you would like to add to the exchange\r\n     * @param _baseTokenQtyMin minimum acceptable qty of baseTokens that will be added (or transaction will revert)\r\n     * @param _quoteTokenQtyMin minimum acceptable qty of quoteTokens that will be added (or transaction will revert)\r\n     * @param _liquidityTokenRecipient address for the exchange to issue the resulting liquidity tokens from\r\n     * this transaction to\r\n     * @param _expirationTimestamp timestamp that this transaction must occur before (or transaction will revert)\r\n     */\r\n    function addLiquidity(\r\n        uint256 _baseTokenQtyDesired,\r\n        uint256 _quoteTokenQtyDesired,\r\n        uint256 _baseTokenQtyMin,\r\n        uint256 _quoteTokenQtyMin,\r\n        address _liquidityTokenRecipient,\r\n        uint256 _expirationTimestamp\r\n    ) external nonReentrant() isNotExpired(_expirationTimestamp) {\r\n        uint256 totalSupply = this.totalSupply();\r\n        MathLib.TokenQtys memory tokenQtys =\r\n            MathLib.calculateAddLiquidityQuantities(\r\n                _baseTokenQtyDesired,\r\n                _quoteTokenQtyDesired,\r\n                _baseTokenQtyMin,\r\n                _quoteTokenQtyMin,\r\n                IERC20(baseToken).balanceOf(address(this)),\r\n                totalSupply,\r\n                internalBalances\r\n            );\r\n\r\n        internalBalances.kLast =\r\n            internalBalances.baseTokenReserveQty *\r\n            internalBalances.quoteTokenReserveQty;\r\n\r\n        if (tokenQtys.liquidityTokenFeeQty != 0) {\r\n            // mint liquidity tokens to fee address for k growth.\r\n            _mint(\r\n                IExchangeFactory(exchangeFactoryAddress).feeAddress(),\r\n                tokenQtys.liquidityTokenFeeQty\r\n            );\r\n        }\r\n\r\n        bool isExchangeEmpty = totalSupply == 0;\r\n        if (isExchangeEmpty) {\r\n            // check if this the first LP provider, if so, we need to lock some minimum dust liquidity.\r\n            require(\r\n                tokenQtys.liquidityTokenQty > MINIMUM_LIQUIDITY,\r\n                \"Exchange: INITIAL_DEPOSIT_MIN\"\r\n            );\r\n            unchecked {\r\n                tokenQtys.liquidityTokenQty -= MINIMUM_LIQUIDITY;\r\n            }\r\n            _mint(address(this), MINIMUM_LIQUIDITY); // mint to this address, total supply will never be 0 again\r\n        }\r\n\r\n        _mint(_liquidityTokenRecipient, tokenQtys.liquidityTokenQty); // mint liquidity tokens to recipient\r\n\r\n        if (tokenQtys.baseTokenQty != 0) {\r\n            // transfer base tokens to Exchange\r\n            IERC20(baseToken).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                tokenQtys.baseTokenQty\r\n            );\r\n\r\n            if (isExchangeEmpty) {\r\n                require(\r\n                    IERC20(baseToken).balanceOf(address(this)) ==\r\n                        tokenQtys.baseTokenQty,\r\n                    \"Exchange: FEE_ON_TRANSFER_NOT_SUPPORTED\"\r\n                );\r\n            }\r\n        }\r\n\r\n        if (tokenQtys.quoteTokenQty != 0) {\r\n            // transfer quote tokens to Exchange\r\n            IERC20(quoteToken).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                tokenQtys.quoteTokenQty\r\n            );\r\n        }\r\n\r\n        emit AddLiquidity(\r\n            msg.sender,\r\n            tokenQtys.baseTokenQty,\r\n            tokenQtys.quoteTokenQty\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice called by a liquidity provider to redeem liquidity tokens from the exchange and receive back\r\n     * base and quote tokens. Required approvals to be granted to this exchange for the liquidity token\r\n     * @param _liquidityTokenQty qty of liquidity tokens that you would like to redeem\r\n     * @param _baseTokenQtyMin minimum acceptable qty of base tokens to receive back (or transaction will revert)\r\n     * @param _quoteTokenQtyMin minimum acceptable qty of quote tokens to receive back (or transaction will revert)\r\n     * @param _tokenRecipient address for the exchange to issue the resulting base and\r\n     * quote tokens from this transaction to\r\n     * @param _expirationTimestamp timestamp that this transaction must occur before (or transaction will revert)\r\n     */\r\n    function removeLiquidity(\r\n        uint256 _liquidityTokenQty,\r\n        uint256 _baseTokenQtyMin,\r\n        uint256 _quoteTokenQtyMin,\r\n        address _tokenRecipient,\r\n        uint256 _expirationTimestamp\r\n    ) external nonReentrant() isNotExpired(_expirationTimestamp) {\r\n        require(this.totalSupply() != 0, \"Exchange: INSUFFICIENT_LIQUIDITY\");\r\n        require(\r\n            _baseTokenQtyMin != 0 && _quoteTokenQtyMin != 0,\r\n            \"Exchange: MINS_MUST_BE_GREATER_THAN_ZERO\"\r\n        );\r\n\r\n        uint256 baseTokenReserveQty =\r\n            IERC20(baseToken).balanceOf(address(this));\r\n        uint256 quoteTokenReserveQty =\r\n            IERC20(quoteToken).balanceOf(address(this));\r\n\r\n        uint256 totalSupplyOfLiquidityTokens = this.totalSupply();\r\n        // calculate any DAO fees here.\r\n        uint256 liquidityTokenFeeQty =\r\n            MathLib.calculateLiquidityTokenFees(\r\n                totalSupplyOfLiquidityTokens,\r\n                internalBalances\r\n            );\r\n\r\n        // we need to factor this quantity in to any total supply before redemption\r\n        totalSupplyOfLiquidityTokens += liquidityTokenFeeQty;\r\n\r\n        uint256 baseTokenQtyToReturn =\r\n            (_liquidityTokenQty * baseTokenReserveQty) /\r\n                totalSupplyOfLiquidityTokens;\r\n        uint256 quoteTokenQtyToReturn =\r\n            (_liquidityTokenQty * quoteTokenReserveQty) /\r\n                totalSupplyOfLiquidityTokens;\r\n\r\n        require(\r\n            baseTokenQtyToReturn >= _baseTokenQtyMin,\r\n            \"Exchange: INSUFFICIENT_BASE_QTY\"\r\n        );\r\n\r\n        require(\r\n            quoteTokenQtyToReturn >= _quoteTokenQtyMin,\r\n            \"Exchange: INSUFFICIENT_QUOTE_QTY\"\r\n        );\r\n\r\n        // this ensures that we are removing the equivalent amount of decay\r\n        // when this person exits.\r\n        {\r\n            //scoping to avoid stack too deep errors\r\n            uint256 internalBaseTokenReserveQty =\r\n                internalBalances.baseTokenReserveQty;\r\n            uint256 baseTokenQtyToRemoveFromInternalAccounting =\r\n                (_liquidityTokenQty * internalBaseTokenReserveQty) /\r\n                    totalSupplyOfLiquidityTokens;\r\n\r\n            internalBalances.baseTokenReserveQty = internalBaseTokenReserveQty =\r\n                internalBaseTokenReserveQty -\r\n                baseTokenQtyToRemoveFromInternalAccounting;\r\n\r\n            // We should ensure no possible overflow here.\r\n            uint256 internalQuoteTokenReserveQty =\r\n                internalBalances.quoteTokenReserveQty;\r\n            if (quoteTokenQtyToReturn > internalQuoteTokenReserveQty) {\r\n                internalBalances\r\n                    .quoteTokenReserveQty = internalQuoteTokenReserveQty = 0;\r\n            } else {\r\n                internalBalances\r\n                    .quoteTokenReserveQty = internalQuoteTokenReserveQty =\r\n                    internalQuoteTokenReserveQty -\r\n                    quoteTokenQtyToReturn;\r\n            }\r\n\r\n            internalBalances.kLast =\r\n                internalBaseTokenReserveQty *\r\n                internalQuoteTokenReserveQty;\r\n        }\r\n\r\n        if (liquidityTokenFeeQty != 0) {\r\n            _mint(\r\n                IExchangeFactory(exchangeFactoryAddress).feeAddress(),\r\n                liquidityTokenFeeQty\r\n            );\r\n        }\r\n\r\n        _burn(msg.sender, _liquidityTokenQty);\r\n        IERC20(baseToken).safeTransfer(_tokenRecipient, baseTokenQtyToReturn);\r\n        IERC20(quoteToken).safeTransfer(_tokenRecipient, quoteTokenQtyToReturn);\r\n        emit RemoveLiquidity(\r\n            msg.sender,\r\n            baseTokenQtyToReturn,\r\n            quoteTokenQtyToReturn\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice swaps base tokens for a minimum amount of quote tokens.  Fees are included in all transactions.\r\n     * The exchange must be granted approvals for the base token by the caller.\r\n     * @param _baseTokenQty qty of base tokens to swap\r\n     * @param _minQuoteTokenQty minimum qty of quote tokens to receive in exchange for\r\n     * your base tokens (or the transaction will revert)\r\n     * @param _expirationTimestamp timestamp that this transaction must occur before (or transaction will revert)\r\n     */\r\n    function swapBaseTokenForQuoteToken(\r\n        uint256 _baseTokenQty,\r\n        uint256 _minQuoteTokenQty,\r\n        uint256 _expirationTimestamp\r\n    ) external nonReentrant() isNotExpired(_expirationTimestamp) {\r\n        require(\r\n            _baseTokenQty != 0 && _minQuoteTokenQty != 0,\r\n            \"Exchange: INSUFFICIENT_TOKEN_QTY\"\r\n        );\r\n\r\n        uint256 quoteTokenQty =\r\n            MathLib.calculateQuoteTokenQty(\r\n                _baseTokenQty,\r\n                _minQuoteTokenQty,\r\n                TOTAL_LIQUIDITY_FEE,\r\n                internalBalances\r\n            );\r\n\r\n        IERC20(baseToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _baseTokenQty\r\n        );\r\n\r\n        IERC20(quoteToken).safeTransfer(msg.sender, quoteTokenQty);\r\n        emit Swap(msg.sender, _baseTokenQty, 0, 0, quoteTokenQty);\r\n    }\r\n\r\n    /**\r\n     * @notice swaps quote tokens for a minimum amount of base tokens.  Fees are included in all transactions.\r\n     * The exchange must be granted approvals for the quote token by the caller.\r\n     * @param _quoteTokenQty qty of quote tokens to swap\r\n     * @param _minBaseTokenQty minimum qty of base tokens to receive in exchange for\r\n     * your quote tokens (or the transaction will revert)\r\n     * @param _expirationTimestamp timestamp that this transaction must occur before (or transaction will revert)\r\n     */\r\n    function swapQuoteTokenForBaseToken(\r\n        uint256 _quoteTokenQty,\r\n        uint256 _minBaseTokenQty,\r\n        uint256 _expirationTimestamp\r\n    ) external nonReentrant() isNotExpired(_expirationTimestamp) {\r\n        require(\r\n            _quoteTokenQty != 0 && _minBaseTokenQty != 0,\r\n            \"Exchange: INSUFFICIENT_TOKEN_QTY\"\r\n        );\r\n\r\n        uint256 baseTokenQty =\r\n            MathLib.calculateBaseTokenQty(\r\n                _quoteTokenQty,\r\n                _minBaseTokenQty,\r\n                IERC20(baseToken).balanceOf(address(this)),\r\n                TOTAL_LIQUIDITY_FEE,\r\n                internalBalances\r\n            );\r\n\r\n        IERC20(quoteToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _quoteTokenQty\r\n        );\r\n\r\n        IERC20(baseToken).safeTransfer(msg.sender, baseTokenQty);\r\n        emit Swap(msg.sender, 0, _quoteTokenQty, baseTokenQty, 0);\r\n    }\r\n}\r\n\r\n/// @title MerklePools\r\n/// @notice A contract which allows users to stake to farm tokens that are \"realized\" once\r\n/// profits enter the system and can be claimed via a merkle proof.\r\ncontract MerklePools is MerklePoolsStorage, ReentrancyGuardUpgradeable {\r\n    using FixedPointMath for FixedPointMath.FixedDecimal;\r\n    using MerklePool for MerklePool.Data;\r\n    using MerklePool for MerklePool.List;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using MerkleStake for MerkleStake.Data;\r\n\r\n    event PendingGovernanceUpdated(address pendingGovernance);\r\n\r\n    event GovernanceUpdated(address governance);\r\n\r\n    event ForfeitAddressUpdated(address governance);\r\n\r\n    event RewardRateUpdated(uint256 rewardRate);\r\n\r\n    event PoolRewardWeightUpdated(uint256 indexed poolId, uint256 rewardWeight);\r\n\r\n    event PoolCreated(uint256 indexed poolId, address indexed token);\r\n\r\n    event TokensDeposited(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 amount\r\n    );\r\n\r\n    event TokensWithdrawn(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 amount\r\n    );\r\n\r\n    event TokensClaimed(\r\n        address indexed user,\r\n        uint256 index,\r\n        uint256 indexed poolId,\r\n        uint256 lpTokenAmountClaimed,\r\n        uint256 ticTokenAmountClaimed\r\n    );\r\n\r\n    event MerkleRootUpdated(bytes32 merkleRoot);\r\n    event LPTokensGenerated(\r\n        uint256 lpAmountCreated,\r\n        uint256 ticConsumed,\r\n        uint256 quoteTokenConsumed\r\n    );\r\n\r\n    constructor() {}\r\n\r\n    function initialize(\r\n        IMintableERC20 _ticToken,\r\n        address _quoteToken,\r\n        address _elasticLPToken,\r\n        address _governance,\r\n        address _forfeitAddress\r\n    ) external initializer {\r\n        require(_governance != address(0), \"MerklePools: INVALID_ADDRESS\");\r\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\r\n        ticToken = _ticToken;\r\n        governance = _governance;\r\n        elasticLPToken = _elasticLPToken;\r\n        quoteToken = _quoteToken;\r\n        forfeitAddress = _forfeitAddress;\r\n\r\n        if (address(_ticToken) != address(0)) {\r\n            // grant approval to exchange so we can mint\r\n            _ticToken.approve(address(_elasticLPToken), type(uint256).max);\r\n        }\r\n        if (_elasticLPToken != address(0)) {\r\n            IERC20Upgradeable(_quoteToken).approve(\r\n                address(_elasticLPToken),\r\n                type(uint256).max\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier which reverts when the caller is not the governance.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance, \"MerklePools: ONLY_GOVERNANCE\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the governance. This function can only called by the current governance.\r\n     * @param _pendingGovernance the new pending governance.\r\n     */\r\n    function setPendingGovernance(address _pendingGovernance)\r\n        external\r\n        onlyGovernance\r\n    {\r\n        require(\r\n            _pendingGovernance != address(0),\r\n            \"MerklePools: INVALID_ADDRESS\"\r\n        );\r\n        pendingGovernance = _pendingGovernance;\r\n\r\n        emit PendingGovernanceUpdated(_pendingGovernance);\r\n    }\r\n\r\n    function acceptGovernance() external {\r\n        require(msg.sender == pendingGovernance, \"MerklePools: ONLY_PENDING\");\r\n\r\n        address pendingGovernance_ = msg.sender;\r\n        governance = pendingGovernance_;\r\n\r\n        emit GovernanceUpdated(pendingGovernance_);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the distribution reward rate. This will update all of the pools.\r\n     * @param _rewardRate The number of tokens to distribute per second.\r\n     */\r\n    function setRewardRate(uint256 _rewardRate) external onlyGovernance {\r\n        _updatePools();\r\n\r\n        poolContext.rewardRate = _rewardRate;\r\n\r\n        emit RewardRateUpdated(_rewardRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address rewards are forfeited to when a staker exits prior to realizing\r\n     * their rewards.\r\n     * @param _forfeitAddress address to set.\r\n     */\r\n    function setForfeitAddress(address _forfeitAddress)\r\n        external\r\n        onlyGovernance\r\n    {\r\n        require(_forfeitAddress != forfeitAddress, \"MerklePools: SAME_ADDRESS\");\r\n        forfeitAddress = _forfeitAddress;\r\n        emit ForfeitAddressUpdated(_forfeitAddress);\r\n    }\r\n\r\n    /**\r\n     * Allows the governance to set the tic token address in the case\r\n     * that it wasn't set during the initialize (due to bridge partner)\r\n     * @param _ticToken address\r\n     */\r\n    function setTicTokenAddress(IMintableERC20 _ticToken)\r\n        external\r\n        onlyGovernance\r\n    {\r\n        require(\r\n            address(ticToken) == address(0),\r\n            \"MerklePools: TIC_ALREADY_SET\"\r\n        );\r\n        require(\r\n            address(_ticToken) != address(0),\r\n            \"MerklePools: INVALID_ADDRESS\"\r\n        );\r\n        require(elasticLPToken != address(0), \"MerklePools: ELP_NOT_SET\");\r\n\r\n        ticToken = _ticToken;\r\n        _ticToken.approve(address(elasticLPToken), type(uint256).max);\r\n    }\r\n\r\n    /**\r\n     * Allows the governance to set the Elastic LP token address in the case\r\n     * that it wasn't set during the initialize due to waiting on the ELP to be\r\n     * created once the token is bridged\r\n     * @param _elasticLPToken address\r\n     */\r\n    function setElasticLPTokenAddress(address _elasticLPToken)\r\n        external\r\n        onlyGovernance\r\n    {\r\n        require(elasticLPToken == address(0), \"MerklePools: ELP_ALREADY_SET\");\r\n        require(_elasticLPToken != address(0), \"MerklePools: INVALID_ADDRESS\");\r\n\r\n        elasticLPToken = _elasticLPToken;\r\n        IERC20Upgradeable(quoteToken).approve(\r\n            address(_elasticLPToken),\r\n            type(uint256).max\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new pool. The created pool will need to have its reward weight\r\n     * initialized before it begins generating rewards.\r\n     * @param _token The token the pool will accept for staking.\r\n     * @return the identifier for the newly created pool.\r\n     */\r\n    function createPool(address _token)\r\n        external\r\n        onlyGovernance\r\n        returns (uint256)\r\n    {\r\n        require(tokenPoolIds[_token] == 0, \"MerklePools: ALREADY_CREATED\");\r\n\r\n        uint256 poolId = pools.length();\r\n\r\n        pools.push(\r\n            MerklePool.Data({\r\n                token: _token,\r\n                totalDeposited: 0,\r\n                totalUnclaimedTIC: 0,\r\n                totalUnclaimedTICInLP: 0,\r\n                rewardWeight: 0,\r\n                accumulatedRewardWeight: FixedPointMath.FixedDecimal(0),\r\n                lastUpdatedBlockTimestamp: block.timestamp\r\n            })\r\n        );\r\n\r\n        tokenPoolIds[_token] = poolId + 1;\r\n\r\n        emit PoolCreated(poolId, _token);\r\n\r\n        return poolId;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the reward weights of all of the pools.\r\n     * @param _rewardWeights The reward weights of all of the pools.\r\n     */\r\n    function setRewardWeights(uint256[] calldata _rewardWeights)\r\n        external\r\n        onlyGovernance\r\n    {\r\n        uint256 poolsLength = pools.length();\r\n        require(\r\n            _rewardWeights.length == poolsLength,\r\n            \"MerklePools: LENGTH_MISMATCH\"\r\n        );\r\n\r\n        _updatePools();\r\n        uint256 totalRewardWeight_ = poolContext.totalRewardWeight;\r\n        for (uint256 _poolId = 0; _poolId < poolsLength; _poolId++) {\r\n            MerklePool.Data storage _pool = pools.get(_poolId);\r\n\r\n            uint256 _currentRewardWeight = _pool.rewardWeight;\r\n            if (_currentRewardWeight == _rewardWeights[_poolId]) {\r\n                continue;\r\n            }\r\n\r\n            totalRewardWeight_ =\r\n                totalRewardWeight_ -\r\n                _currentRewardWeight +\r\n                _rewardWeights[_poolId];\r\n            _pool.rewardWeight = _rewardWeights[_poolId];\r\n\r\n            emit PoolRewardWeightUpdated(_poolId, _rewardWeights[_poolId]);\r\n        }\r\n        poolContext.totalRewardWeight = totalRewardWeight_;\r\n    }\r\n\r\n    /**\r\n     * @dev Stakes tokens into a pool.\r\n     * @param _poolId        the pool to deposit tokens into.\r\n     * @param _depositAmount the amount of tokens to deposit.\r\n     */\r\n    function deposit(uint256 _poolId, uint256 _depositAmount)\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(msg.sender != forfeitAddress, \"MerklePools: UNUSABLE_ADDRESS\");\r\n        MerklePool.Data storage pool = pools.get(_poolId);\r\n        pool.update(poolContext);\r\n\r\n        MerkleStake.Data storage stake = stakes[msg.sender][_poolId];\r\n        stake.update(pool, poolContext);\r\n\r\n        pool.totalDeposited = pool.totalDeposited + _depositAmount;\r\n        stake.totalDeposited = stake.totalDeposited + _depositAmount;\r\n\r\n        IERC20Upgradeable(pool.token).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _depositAmount\r\n        );\r\n        emit TokensDeposited(msg.sender, _poolId, _depositAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev exits and returns all staked tokens from a pool and forfeit's any outstanding rewards\r\n     * @param _poolId the pool to exit from.\r\n     */\r\n    function exit(uint256 _poolId) external nonReentrant {\r\n        require(msg.sender != forfeitAddress, \"MerklePools: UNUSABLE_ADDRESS\");\r\n        MerklePool.Data storage pool = pools.get(_poolId);\r\n        pool.update(poolContext);\r\n\r\n        MerkleStake.Data storage stake = stakes[msg.sender][_poolId];\r\n        stake.update(pool, poolContext);\r\n\r\n        uint256 withdrawAmount = stake.totalDeposited;\r\n        pool.totalDeposited = pool.totalDeposited - withdrawAmount;\r\n        stake.totalDeposited = 0;\r\n\r\n        // unclaimed rewards are transferred to the forfeit address\r\n        MerkleStake.Data storage forfeitStake = stakes[forfeitAddress][_poolId];\r\n        forfeitStake.update(pool, poolContext);\r\n\r\n        forfeitStake.totalUnrealized += stake.totalUnrealized;\r\n\r\n        // we need to zero our their total unrealized and also ensure that they are unable to just\r\n        // re-enter and then claim using a stale merkle proof as their unrealized increments again\r\n        // over time.  By adding their unrealized to their totalRealized, we ensure that any\r\n        // existing merkle claim is now un-claimable by them until we generate a new merkle claim\r\n        // that accounts for these values.  This means that the sum of all stakes.totalRealizedTIC\r\n        // is not accurate in terms of tic claimed\r\n        // and that we also need to check in the UI to not end up with negative\r\n        // claimable values.  The off chain accounting needs to consider this as well if a\r\n        // user does re-enter wit the same address in the future.\r\n        stake.totalRealizedTIC += stake.totalUnrealized;\r\n        stake.totalUnrealized = 0;\r\n\r\n        IERC20Upgradeable(pool.token).safeTransfer(msg.sender, withdrawAmount);\r\n        emit TokensWithdrawn(msg.sender, _poolId, withdrawAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows a caller to generate LP tokens to distribute to stakers.  The quote token\r\n     * is taken from the caller and paired with freshly minted TIC token to create new LP tokens.\r\n     * @param _poolId id of the pool these LP Tokens are associated with.\r\n     * @param _ticTokenQty qty of ticTokens that you would like to add\r\n     * @param _quoteTokenQty qty of quoteTokens that you would like to add (USDC)\r\n     * @param _ticTokenQtyMin minimum acceptable qty of ticToken that will be added (or transaction will revert)\r\n     * @param _quoteTokenQtyMin minimum acceptable qty of quoteTokens that will be added (or transaction will revert)\r\n     * @param _expirationTimestamp timestamp that this transaction must occur before (or transaction will revert)\r\n     */\r\n    function generateLPTokens(\r\n        uint256 _poolId,\r\n        uint256 _ticTokenQty,\r\n        uint256 _quoteTokenQty,\r\n        uint256 _ticTokenQtyMin,\r\n        uint256 _quoteTokenQtyMin,\r\n        uint256 _expirationTimestamp\r\n    ) external virtual onlyGovernance {\r\n        require(address(ticToken) != address(0), \"MerklePools: TIC_NOT_SET\");\r\n        require(elasticLPToken != address(0), \"MerklePools: ELP_NOT_SET\");\r\n\r\n        MerklePool.Data storage _pool = pools.get(_poolId);\r\n        _pool.update(poolContext); // update pool first!\r\n        uint256 maxMintAmount =\r\n            _pool.totalUnclaimedTIC - _pool.totalUnclaimedTICInLP;\r\n        require(maxMintAmount >= _ticTokenQty, \"MerklePools: NSF_UNCLAIMED\");\r\n\r\n        // check to make sure we don't have some \"Excess\" tic we can use.\r\n        uint256 ticBalanceToBeMinted = _ticTokenQty - excessTICFromSlippage;\r\n\r\n        ticToken.mint(address(this), ticBalanceToBeMinted);\r\n        IERC20Upgradeable(quoteToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _quoteTokenQty\r\n        );\r\n\r\n        uint256 lpBalanceBefore =\r\n            IERC20Upgradeable(elasticLPToken).balanceOf(address(this));\r\n        uint256 ticBalanceBefore = ticToken.balanceOf(address(this));\r\n        uint256 quoteTokenBalanceBefore =\r\n            IERC20Upgradeable(quoteToken).balanceOf(address(this));\r\n\r\n        Exchange(address(elasticLPToken)).addLiquidity(\r\n            _ticTokenQty,\r\n            _quoteTokenQty,\r\n            _ticTokenQtyMin,\r\n            _quoteTokenQtyMin,\r\n            address(this),\r\n            _expirationTimestamp\r\n        );\r\n\r\n        uint256 lpBalanceCreated =\r\n            IERC20Upgradeable(elasticLPToken).balanceOf(address(this)) -\r\n                lpBalanceBefore;\r\n        require(lpBalanceCreated != 0, \"MerklePools: NO_LP_CREATED\");\r\n\r\n        uint256 ticBalanceConsumed =\r\n            ticBalanceBefore - ticToken.balanceOf(address(this));\r\n        excessTICFromSlippage = _ticTokenQty - ticBalanceConsumed; //save for next time\r\n\r\n        _pool.totalUnclaimedTICInLP += ticBalanceConsumed;\r\n        uint256 quoteTokenConsumed =\r\n            quoteTokenBalanceBefore -\r\n                IERC20Upgradeable(quoteToken).balanceOf(address(this));\r\n        if (quoteTokenConsumed < _quoteTokenQty) {\r\n            // refund the rest to the caller\r\n            IERC20Upgradeable(quoteToken).safeTransfer(\r\n                msg.sender,\r\n                _quoteTokenQty - quoteTokenConsumed\r\n            );\r\n        }\r\n\r\n        emit LPTokensGenerated(\r\n            lpBalanceCreated,\r\n            ticBalanceConsumed,\r\n            quoteTokenConsumed\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Allows a new merkle root to be set by the contracts owner (the DAO)\r\n     * @param _merkleRoot the merkle root to be set\r\n     */\r\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyGovernance {\r\n        require(merkleRoot != _merkleRoot, \"MerklePools: DUPLICATE_ROOT\");\r\n        require(address(ticToken) != address(0), \"MerklePools: TIC_NOT_SET\");\r\n        require(elasticLPToken != address(0), \"MerklePools: ELP_NOT_SET\");\r\n        isClaimsEnabled = true;\r\n        merkleRoot = _merkleRoot;\r\n        emit MerkleRootUpdated(_merkleRoot);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows for a staker to claim LP tokens based on the merkle proof provided.\r\n     * @param _index the index of the merkle claim\r\n     * @param _poolId the pool id these rewards are associated with.\r\n     * @param _totalLPTokenAmount the total LP token amount in the tree\r\n     * @param _totalTICAmount the total TIC amount to be consumed in the tree\r\n     * @param _merkleProof bytes32[] proof for the claim\r\n     */\r\n    function claim(\r\n        uint256 _index,\r\n        uint256 _poolId,\r\n        uint256 _totalLPTokenAmount,\r\n        uint256 _totalTICAmount,\r\n        bytes32[] calldata _merkleProof\r\n    ) external nonReentrant {\r\n        require(isClaimsEnabled, \"MerklePools: CLAIMS_DISABLED\");\r\n\r\n        // Verify the merkle proof.\r\n        bytes32 node =\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _index,\r\n                    msg.sender,\r\n                    _poolId,\r\n                    _totalLPTokenAmount,\r\n                    _totalTICAmount\r\n                )\r\n            );\r\n\r\n        require(\r\n            MerkleProofUpgradeable.verify(_merkleProof, merkleRoot, node),\r\n            \"MerklePools: INVALID_PROOF\"\r\n        );\r\n\r\n        MerkleStake.Data storage stake = stakes[msg.sender][_poolId];\r\n        uint256 alreadyClaimedLPAmount = stake.totalRealizedLP;\r\n        uint256 alreadyClaimedTICAmount = stake.totalRealizedTIC;\r\n\r\n        require(\r\n            _totalLPTokenAmount > alreadyClaimedLPAmount &&\r\n                _totalTICAmount > alreadyClaimedTICAmount,\r\n            \"MerklePools: INVALID_CLAIM_AMOUNT\"\r\n        );\r\n\r\n        MerklePool.Data storage pool = pools.get(_poolId);\r\n        pool.update(poolContext);\r\n        stake.update(pool, poolContext);\r\n\r\n        // determine the amounts of the new claim\r\n        uint256 lpTokenAmountToBeClaimed;\r\n        uint256 ticTokenAmountToBeClaimed;\r\n\r\n        unchecked {\r\n            lpTokenAmountToBeClaimed =\r\n                _totalLPTokenAmount -\r\n                alreadyClaimedLPAmount;\r\n            ticTokenAmountToBeClaimed =\r\n                _totalTICAmount -\r\n                alreadyClaimedTICAmount;\r\n        }\r\n\r\n        require(\r\n            ticTokenAmountToBeClaimed <= stake.totalUnrealized,\r\n            \"MerklePools: INVALID_UNCLAIMED_AMOUNT\"\r\n        );\r\n\r\n        stake.totalRealizedLP = _totalLPTokenAmount;\r\n        stake.totalRealizedTIC = _totalTICAmount;\r\n\r\n        unchecked {\r\n            stake.totalUnrealized -= ticTokenAmountToBeClaimed;\r\n        }\r\n        pool.totalUnclaimedTIC -= ticTokenAmountToBeClaimed;\r\n        pool.totalUnclaimedTICInLP -= ticTokenAmountToBeClaimed;\r\n\r\n        IERC20Upgradeable(elasticLPToken).safeTransfer(\r\n            msg.sender,\r\n            lpTokenAmountToBeClaimed\r\n        );\r\n        emit TokensClaimed(\r\n            msg.sender,\r\n            _index,\r\n            _poolId,\r\n            lpTokenAmountToBeClaimed,\r\n            ticTokenAmountToBeClaimed\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the rate at which tokens are minted to stakers for all pools.\r\n     * @return the reward rate.\r\n     */\r\n    function rewardRate() external view returns (uint256) {\r\n        return poolContext.rewardRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total reward weight between all the pools.\r\n     * @return the total reward weight.\r\n     */\r\n    function totalRewardWeight() external view returns (uint256) {\r\n        return poolContext.totalRewardWeight;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the number of pools that exist.\r\n     * @return the pool count.\r\n     */\r\n    function poolCount() external view returns (uint256) {\r\n        return pools.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token a pool accepts.\r\n     * @param _poolId the identifier of the pool.\r\n     * @return the token.\r\n     */\r\n    function getPoolToken(uint256 _poolId) external view returns (address) {\r\n        MerklePool.Data storage pool = pools.get(_poolId);\r\n        return pool.token;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the pool data struct\r\n     * @param _poolId the identifier of the pool.\r\n     * @return the Pool.Data (memory, not storage!).\r\n     */\r\n    function getPool(uint256 _poolId)\r\n        external\r\n        view\r\n        returns (MerklePool.Data memory)\r\n    {\r\n        return pools.get(_poolId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total amount of funds staked in a pool.\r\n     * @param _poolId the identifier of the pool.\r\n     * @return the total amount of staked or deposited tokens.\r\n     */\r\n    function getPoolTotalDeposited(uint256 _poolId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        MerklePool.Data storage pool = pools.get(_poolId);\r\n        return pool.totalDeposited;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total amount of token unclaimed from a pool\r\n     * @param _poolId the identifier of the pool.\r\n     * @return the total amount of unclaimed / un-minted tokens from a pool\r\n     */\r\n    function getPoolTotalUnclaimed(uint256 _poolId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        MerklePool.Data storage pool = pools.get(_poolId);\r\n        return pool.getUpdatedTotalUnclaimed(poolContext);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total amount of tokens unclaimed from a pool that are not yet \"realized\" in\r\n     * the form of LP tokens\r\n     * @param _poolId the identifier of the pool.\r\n     * @return the total amount of unclaimed and un-minted tokens from a pool that are not in LP tokens\r\n     */\r\n    function getPoolTotalUnclaimedNotInLP(uint256 _poolId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        MerklePool.Data storage pool = pools.get(_poolId);\r\n        return\r\n            pool.getUpdatedTotalUnclaimed(poolContext) -\r\n            pool.totalUnclaimedTICInLP;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the reward weight of a pool which determines\r\n     * how much of the total rewards it receives per second.\r\n     * @param _poolId the identifier of the pool.\r\n     * @return the pool reward weight.\r\n     */\r\n    function getPoolRewardWeight(uint256 _poolId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        MerklePool.Data storage pool = pools.get(_poolId);\r\n        return pool.rewardWeight;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the amount of tokens per second being distributed to stakers for a pool.\r\n     * @param _poolId the identifier of the pool.\r\n     * @return the pool reward rate.\r\n     */\r\n    function getPoolRewardRate(uint256 _poolId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        MerklePool.Data storage pool = pools.get(_poolId);\r\n        return pool.getRewardRate(poolContext);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the number of tokens a user has staked into a pool.\r\n     * @param _account The account to query.\r\n     * @param _poolId  the identifier of the pool.\r\n     * @return the amount of deposited tokens.\r\n     */\r\n    function getStakeTotalDeposited(address _account, uint256 _poolId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        MerkleStake.Data storage stake = stakes[_account][_poolId];\r\n        return stake.totalDeposited;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the number of unclaimed reward tokens a user can claim from a pool.\r\n     * @param _account The account to get the unclaimed balance of.\r\n     * @param _poolId  The pool to check for unclaimed rewards.\r\n     * @return the amount of unclaimed reward tokens a user has in a pool.\r\n     */\r\n    function getStakeTotalUnclaimed(address _account, uint256 _poolId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        MerkleStake.Data storage stake = stakes[_account][_poolId];\r\n        return stake.getUpdatedTotalUnclaimed(pools.get(_poolId), poolContext);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates all of the pools.\r\n     */\r\n    function _updatePools() internal {\r\n        uint256 poolsLength = pools.length();\r\n        for (uint256 poolId = 0; poolId < poolsLength; poolId++) {\r\n            MerklePool.Data storage pool = pools.get(poolId);\r\n            pool.update(poolContext);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * MerklePoolsForeign allows for us to enable our MerklePools staking on a chain that has bridged\r\n * TIC.  Instead of minting during the `generateLPTokens` call, TIC is transferred in from\r\n * the caller (onlyGovernance) to be used to mint LP tokens.\r\n */\r\ncontract MerklePoolsForeign is MerklePools {\r\n    using MerklePool for MerklePool.List;\r\n    using MerklePool for MerklePool.Data;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    /**\r\n     * @notice Allows a caller to generate LP tokens to distribute to stakers.  The quote token\r\n     * is taken from the caller and paired with freshly minted TIC token to create new LP tokens.\r\n     * @param _poolId id of the pool these LP Tokens are associated with.\r\n     * @param _ticTokenQty qty of ticTokens that you would like to add\r\n     * @param _quoteTokenQty qty of quoteTokens that you would like to add (USDC)\r\n     * @param _ticTokenQtyMin minimum acceptable qty of ticToken that will be added (or transaction will revert)\r\n     * @param _quoteTokenQtyMin minimum acceptable qty of quoteTokens that will be added (or transaction will revert)\r\n     * @param _expirationTimestamp timestamp that this transaction must occur before (or transaction will revert)\r\n     */\r\n    function generateLPTokens(\r\n        uint256 _poolId,\r\n        uint256 _ticTokenQty,\r\n        uint256 _quoteTokenQty,\r\n        uint256 _ticTokenQtyMin,\r\n        uint256 _quoteTokenQtyMin,\r\n        uint256 _expirationTimestamp\r\n    ) external override onlyGovernance {\r\n        require(address(ticToken) != address(0), \"MerklePools: TIC_NOT_SET\");\r\n        require(elasticLPToken != address(0), \"MerklePools: ELP_NOT_SET\");\r\n\r\n        MerklePool.Data storage _pool = pools.get(_poolId);\r\n        _pool.update(poolContext); // update pool first!\r\n        uint256 maxMintAmount =\r\n            _pool.totalUnclaimedTIC - _pool.totalUnclaimedTICInLP;\r\n        require(maxMintAmount >= _ticTokenQty, \"MerklePools: NSF_UNCLAIMED\");\r\n\r\n        ticToken.transferFrom(msg.sender, address(this), _ticTokenQty);\r\n        IERC20Upgradeable(quoteToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _quoteTokenQty\r\n        );\r\n\r\n        uint256 lpBalanceBefore =\r\n            IERC20Upgradeable(elasticLPToken).balanceOf(address(this));\r\n        uint256 ticBalanceBefore = ticToken.balanceOf(address(this));\r\n        uint256 quoteTokenBalanceBefore =\r\n            IERC20Upgradeable(quoteToken).balanceOf(address(this));\r\n\r\n        Exchange(address(elasticLPToken)).addLiquidity(\r\n            _ticTokenQty,\r\n            _quoteTokenQty,\r\n            _ticTokenQtyMin,\r\n            _quoteTokenQtyMin,\r\n            address(this),\r\n            _expirationTimestamp\r\n        );\r\n\r\n        uint256 lpBalanceCreated =\r\n            IERC20Upgradeable(elasticLPToken).balanceOf(address(this)) -\r\n                lpBalanceBefore;\r\n        require(lpBalanceCreated != 0, \"MerklePools: NO_LP_CREATED\");\r\n\r\n        uint256 ticBalanceConsumed =\r\n            ticBalanceBefore - ticToken.balanceOf(address(this));\r\n        _pool.totalUnclaimedTICInLP += ticBalanceConsumed;\r\n\r\n        if (ticBalanceConsumed < _ticTokenQty) {\r\n            // refund the rest to caller.\r\n            ticToken.transfer(msg.sender, _ticTokenQty - ticBalanceConsumed);\r\n        }\r\n\r\n        uint256 quoteTokenConsumed =\r\n            quoteTokenBalanceBefore -\r\n                IERC20Upgradeable(quoteToken).balanceOf(address(this));\r\n\r\n        if (quoteTokenConsumed < _quoteTokenQty) {\r\n            // refund the rest to the caller\r\n            IERC20Upgradeable(quoteToken).safeTransfer(\r\n                msg.sender,\r\n                _quoteTokenQty - quoteTokenConsumed\r\n            );\r\n        }\r\n\r\n        emit LPTokensGenerated(\r\n            lpBalanceCreated,\r\n            ticBalanceConsumed,\r\n            quoteTokenConsumed\r\n        );\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"ForfeitAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmountCreated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticConsumed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenConsumed\",\"type\":\"uint256\"}],\"name\":\"LPTokensGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"PendingGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardWeight\",\"type\":\"uint256\"}],\"name\":\"PoolRewardWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticTokenAmountClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLPTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTICAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"elasticLPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessTICFromSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticTokenQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quoteTokenQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticTokenQtyMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quoteTokenQtyMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTimestamp\",\"type\":\"uint256\"}],\"name\":\"generateLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnclaimedTIC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnclaimedTICInLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardWeight\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPointMath.FixedDecimal\",\"name\":\"accumulatedRewardWeight\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlockTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MerklePool.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolTotalUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolTotalUnclaimedNotInLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStakeTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStakeTotalUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"_ticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elasticLPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forfeitAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolContext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_elasticLPToken\",\"type\":\"address\"}],\"name\":\"setElasticLPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forfeitAddress\",\"type\":\"address\"}],\"name\":\"setForfeitAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewardWeights\",\"type\":\"uint256[]\"}],\"name\":\"setRewardWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"_ticToken\",\"type\":\"address\"}],\"name\":\"setTicTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnrealized\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealizedTIC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealizedLP\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPointMath.FixedDecimal\",\"name\":\"lastAccumulatedWeight\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticToken\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPoolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MerklePoolsForeign", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://215950aeea130cb530a63143a804fc0d51eb6547be3328caf3a8fa3c7d2f79f5"}]}