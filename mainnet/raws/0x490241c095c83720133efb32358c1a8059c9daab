{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.8.4 https://hardhat.org\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721: balance query for the zero address\"\r\n        );\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        address owner = _owners[tokenId];\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721: owner query for nonexistent token\"\r\n        );\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: approved query for nonexistent token\"\r\n        );\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: operator query for nonexistent token\"\r\n        );\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner ||\r\n            getApproved(tokenId) == spender ||\r\n            isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(\r\n            ERC721.ownerOf(tokenId) == from,\r\n            \"ERC721: transfer from incorrect owner\"\r\n        );\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\r\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\r\n                    );\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC165.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC2981.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard.\r\n *\r\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\r\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\r\n *\r\n * _Available since v4.5._\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\r\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Counters.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File hardhat/console.sol@v2.8.4\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nlibrary console {\r\n    address constant CONSOLE_ADDRESS =\r\n        address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n    function _sendLogPayload(bytes memory payload) private view {\r\n        uint256 payloadLength = payload.length;\r\n        address consoleAddress = CONSOLE_ADDRESS;\r\n        assembly {\r\n            let payloadStart := add(payload, 32)\r\n            let r := staticcall(\r\n                gas(),\r\n                consoleAddress,\r\n                payloadStart,\r\n                payloadLength,\r\n                0,\r\n                0\r\n            )\r\n        }\r\n    }\r\n\r\n    function log() internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n    }\r\n\r\n    function logInt(int256 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\r\n    }\r\n\r\n    function logUint(uint256 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function logString(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function logBool(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function logAddress(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function logBytes(bytes memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n    }\r\n\r\n    function logBytes1(bytes1 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n    }\r\n\r\n    function logBytes2(bytes2 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n    }\r\n\r\n    function logBytes3(bytes3 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n    }\r\n\r\n    function logBytes4(bytes4 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n    }\r\n\r\n    function logBytes5(bytes5 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n    }\r\n\r\n    function logBytes6(bytes6 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n    }\r\n\r\n    function logBytes7(bytes7 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n    }\r\n\r\n    function logBytes8(bytes8 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n    }\r\n\r\n    function logBytes9(bytes9 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n    }\r\n\r\n    function logBytes10(bytes10 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n    }\r\n\r\n    function logBytes11(bytes11 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n    }\r\n\r\n    function logBytes12(bytes12 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n    }\r\n\r\n    function logBytes13(bytes13 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n    }\r\n\r\n    function logBytes14(bytes14 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n    }\r\n\r\n    function logBytes15(bytes15 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n    }\r\n\r\n    function logBytes16(bytes16 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n    }\r\n\r\n    function logBytes17(bytes17 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n    }\r\n\r\n    function logBytes18(bytes18 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n    }\r\n\r\n    function logBytes19(bytes19 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n    }\r\n\r\n    function logBytes20(bytes20 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n    }\r\n\r\n    function logBytes21(bytes21 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n    }\r\n\r\n    function logBytes22(bytes22 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n    }\r\n\r\n    function logBytes23(bytes23 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n    }\r\n\r\n    function logBytes24(bytes24 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n    }\r\n\r\n    function logBytes25(bytes25 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n    }\r\n\r\n    function logBytes26(bytes26 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n    }\r\n\r\n    function logBytes27(bytes27 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n    }\r\n\r\n    function logBytes28(bytes28 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n    }\r\n\r\n    function logBytes29(bytes29 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n    }\r\n\r\n    function logBytes30(bytes30 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n    }\r\n\r\n    function logBytes31(bytes31 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n    }\r\n\r\n    function logBytes32(bytes32 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function log(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function log(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function log(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, uint256 p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, address p1) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address)\", p0, p1)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,uint,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,uint)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal view {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// File contracts/MetaMogulsV2.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract MetaMogulsV2 is ERC721, Ownable, ReentrancyGuard, Pausable {\r\n    using Strings for uint256;\r\n\r\n    string private baseURI;\r\n    string public verificationHash;\r\n    uint256 public maxNFTs;\r\n    uint256 public PUBLIC_SALE_PRICE = 0.06 ether;\r\n    bool public isPublicSaleActive;\r\n    bool public REVEAL;\r\n\r\n    IERC721 public oldContract;\r\n\r\n    uint256 public currentSupply;\r\n    uint256 public v1MintedSupply;\r\n\r\n    // v2\r\n    uint256[] public allMigratedTokens;\r\n    mapping(uint256 => bool) public migratedTokensById;\r\n    uint256[] private reserveTokenIdsMinted;\r\n\r\n    // ============ ACCESS CONTROL/Function MODIFIERS ============\r\n\r\n    modifier publicSaleActive() {\r\n        require(isPublicSaleActive, \"Public sale is not open\");\r\n        _;\r\n    }\r\n\r\n    modifier canMintNFTs(uint256 numberOfTokens) {\r\n        require(\r\n            currentSupply + numberOfTokens <= maxNFTs,\r\n            \"Not enough NFTs remaining to mint\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isCorrectPayment(uint256 price, uint256 numberOfTokens) {\r\n        require(\r\n            price * numberOfTokens == msg.value,\r\n            \"Incorrect ETH value sent\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _maxNFTs1,\r\n        string memory _baseURI,\r\n        bool _isPublicSaleActive,\r\n        bool _REVEAL,\r\n        address _oldContract,\r\n        uint256 _currentSupply,\r\n        uint256 _initialReserveCount\r\n    ) ERC721(\"Meta Moguls\", \"MOGUL\") {\r\n        maxNFTs = _maxNFTs1;\r\n        baseURI = _baseURI;\r\n        REVEAL = _REVEAL;\r\n        isPublicSaleActive = _isPublicSaleActive;\r\n        currentSupply = _currentSupply;\r\n        v1MintedSupply = _currentSupply;\r\n\r\n        // set v1 contract address\r\n        if (_oldContract != address(0)) {\r\n            oldContract = IERC721(_oldContract);\r\n        }\r\n\r\n        // mint reserved NFTs to team wallet for contests, etc.\r\n        for (uint256 i = 1; i <= _initialReserveCount; i++) {\r\n            if (i <= 5) {\r\n                //first, mint the final 5 tokenIds reserved (1107-1111)\r\n                uint256 tokenIdToMint = maxNFTs - (i - 1);\r\n                _safeMint(msg.sender, tokenIdToMint);\r\n                reserveTokenIdsMinted.push(tokenIdToMint);\r\n            } else {\r\n                // second, mint the next available 55 tokenIds\r\n                uint256 tokenIdToMint = getNextTokenId();\r\n                _safeMint(msg.sender, tokenIdToMint);\r\n                reserveTokenIdsMinted.push(tokenIdToMint);\r\n            }\r\n            incrementCurrentSupply();\r\n        }\r\n    }\r\n\r\n    // ============ PUBLIC READ-ONLY FUNCTIONS ============\r\n\r\n    function getBaseURI() external view returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    function getLastTokenId() external view returns (uint256) {\r\n        // minus 5 to compensate for reserved tokenIds 1107-1111\r\n        return currentSupply - 5;\r\n    }\r\n\r\n    function getAllMigratedTokens() public view returns (uint256[] memory) {\r\n        return allMigratedTokens;\r\n    }\r\n\r\n    function tokenHasBeenMigrated(uint256 tokenId) public view returns (bool) {\r\n        require(\r\n            tokenId <= v1MintedSupply,\r\n            \"Cannot check migration status of v2 NFT\"\r\n        );\r\n        return migratedTokensById[tokenId];\r\n    }\r\n\r\n    function getReserveTokenIdsMinted() public view returns (uint256[] memory) {\r\n        return reserveTokenIdsMinted;\r\n    }\r\n\r\n    function getCurrentMintedSupply() public view returns (uint256) {\r\n        return currentSupply;\r\n    }\r\n\r\n    // ============ PRIVATE READ-ONLY FUNCTIONS ============\r\n\r\n    function getNextTokenId() private view returns (uint256) {\r\n        require(currentSupply < maxNFTs, \"All NFTs have been minted\");\r\n        // minus 5 to compensate for reserved tokenIds 1107-1111\r\n        return (currentSupply - 5) + 1;\r\n    }\r\n\r\n    // ============ PRIVATE WRITE FUNCTIONS ============\r\n    function incrementCurrentSupply() private {\r\n        require(currentSupply < maxNFTs, \"All NFTs have been minted\");\r\n        currentSupply++;\r\n    }\r\n\r\n    // ============ PUBLIC FUNCTIONS ============\r\n\r\n    function mint(uint256 numberOfTokens)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        isCorrectPayment(PUBLIC_SALE_PRICE, numberOfTokens)\r\n        publicSaleActive\r\n        canMintNFTs(numberOfTokens)\r\n        whenNotPaused\r\n    {\r\n        for (uint256 i = 0; i < numberOfTokens; i++) {\r\n            uint256 tokenIdToMint = getNextTokenId();\r\n            _safeMint(msg.sender, tokenIdToMint);\r\n            incrementCurrentSupply();\r\n        }\r\n    }\r\n\r\n    // ============ V2 MIGRATION FUNCTIONS ============\r\n\r\n    function _ownsOldToken(address account, uint256 tokenId)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        try oldContract.ownerOf(tokenId) returns (address tokenOwner) {\r\n            return account == tokenOwner;\r\n        } catch Error(\r\n            string memory /*reason*/\r\n        ) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function claim(uint256 tokenId) external nonReentrant whenNotPaused {\r\n        // require(!claimed[msg.sender], \"NFT already claimed by this wallet\");\r\n        if (_ownsOldToken(msg.sender, tokenId)) {\r\n            oldContract.transferFrom(msg.sender, address(this), tokenId);\r\n\r\n            _safeMint(msg.sender, tokenId);\r\n        }\r\n    }\r\n\r\n    function claimAll(uint256[] memory ownedTokens)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        uint256 length = ownedTokens.length; // gas saving\r\n        console.log(\"ownedTokens.length\", length);\r\n        for (uint256 i; i < length; i++) {\r\n            uint256 tokenIdToMint = ownedTokens[i];\r\n            console.log(\"tokenIdToMint\", tokenIdToMint);\r\n            require(\r\n                tokenIdToMint <= v1MintedSupply,\r\n                \"Token ID must be minted on old contract\"\r\n            );\r\n\r\n            if (_ownsOldToken(msg.sender, tokenIdToMint)) {\r\n                oldContract.transferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    tokenIdToMint\r\n                );\r\n                _safeMint(msg.sender, tokenIdToMint);\r\n                allMigratedTokens.push(tokenIdToMint);\r\n                migratedTokensById[tokenIdToMint] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n        if (REVEAL) {\r\n            return\r\n                string(\r\n                    abi.encodePacked(baseURI, \"/\", tokenId.toString(), \".json\")\r\n                );\r\n        } else {\r\n            return baseURI;\r\n        }\r\n    }\r\n\r\n    // ============ OWNER-ONLY ADMIN FUNCTIONS ============\r\n\r\n    function setBaseURI(string memory _baseURI1) external onlyOwner {\r\n        baseURI = _baseURI1;\r\n    }\r\n\r\n    function setMaxNFTsInTOTALCollection(uint256 _maxNFTs2) external onlyOwner {\r\n        maxNFTs = _maxNFTs2;\r\n    }\r\n\r\n    function setPUBLIC_SALE_PRICEinEther(uint256 _PUBLIC_SALE_PRICE)\r\n        external\r\n        onlyOwner\r\n    {\r\n        PUBLIC_SALE_PRICE = _PUBLIC_SALE_PRICE;\r\n    }\r\n\r\n    function setREVEAL(bool _REVEAL) external onlyOwner {\r\n        REVEAL = _REVEAL;\r\n    }\r\n\r\n    function setVerificationHash(string memory _verificationHash)\r\n        external\r\n        onlyOwner\r\n    {\r\n        verificationHash = _verificationHash;\r\n    }\r\n\r\n    function setIsPublicSaleActive(bool _isPublicSaleActive)\r\n        external\r\n        onlyOwner\r\n    {\r\n        isPublicSaleActive = _isPublicSaleActive;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function withdrawTokens(IERC20 token) public onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNFTs1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isPublicSaleActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_REVEAL\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_oldContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialReserveCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PUBLIC_SALE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVEAL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMigratedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ownedTokens\",\"type\":\"uint256[]\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMigratedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMintedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveTokenIdsMinted\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"migratedTokensById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldContract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI1\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPublicSaleActive\",\"type\":\"bool\"}],\"name\":\"setIsPublicSaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNFTs2\",\"type\":\"uint256\"}],\"name\":\"setMaxNFTsInTOTALCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PUBLIC_SALE_PRICE\",\"type\":\"uint256\"}],\"name\":\"setPUBLIC_SALE_PRICEinEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_REVEAL\",\"type\":\"bool\"}],\"name\":\"setREVEAL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_verificationHash\",\"type\":\"string\"}],\"name\":\"setVerificationHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenHasBeenMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1MintedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MetaMogulsV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000045700000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000005d6685c7bd265204ec9bde279095cbf4781658980000000000000000000000000000000000000000000000000000000000000368000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000005068747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d5a694e6b55734571484541564870576434374531706d53755634576f42533733686433533272355159775a6e00000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://74c67d89c2e04835671c8f5feff261dd8a178791f99822ce705da864c057752c"}]}