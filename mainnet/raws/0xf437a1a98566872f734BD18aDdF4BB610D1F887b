{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/constants/Tokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\naddress constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\"\r\n    },\r\n    \"contracts/functions/FHandlerUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {NATIVE} from \\\"../constants/Tokens.sol\\\";\\n\\nfunction _handleInputData(\\n    address _thisContractAddress,\\n    address _inToken,\\n    address _outToken,\\n    bytes calldata _data\\n)\\n    view\\n    returns (\\n        uint256 amountIn,\\n        address[] memory path,\\n        address relayer,\\n        uint256 fee,\\n        address[] memory feePath\\n    )\\n{\\n    // Load real initial balance, don't trust provided value\\n    amountIn = _balanceOf(_inToken, _thisContractAddress);\\n\\n    // Decode extra data;\\n    (, relayer, fee, path, feePath) = abi.decode(\\n        _data,\\n        (address, address, uint256, address[], address[])\\n    );\\n}\\n\\nfunction _balanceOf(address _token, address _account) view returns (uint256) {\\n    return\\n        NATIVE == _token\\n            ? _account.balance\\n            : IERC20(_token).balanceOf(_account);\\n}\\n\"\r\n    },\r\n    \"contracts/functions/uniswap/FLimitOrders.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nimport {_getAmountOut, _getAmountIn} from \\\"./FUniswapGeneral.sol\\\";\\nimport {_handleInputData} from \\\"../FHandlerUtils.sol\\\";\\nimport {NATIVE} from \\\"../../constants/Tokens.sol\\\";\\n\\nfunction _canHandleLimitOrder(\\n    address thisContractAddress,\\n    address _inToken,\\n    address _outToken,\\n    uint256 _amountIn,\\n    uint256 _minReturn,\\n    address _uniRouter,\\n    address _wrappedNative,\\n    bytes calldata _data\\n) view returns (bool) {\\n    (\\n        ,\\n        address[] memory path,\\n        ,\\n        uint256 fee,\\n        address[] memory feePath\\n    ) = _handleInputData(thisContractAddress, _inToken, _outToken, _data);\\n\\n    if (_inToken == _wrappedNative || _inToken == NATIVE) {\\n        if (_amountIn <= fee) return false;\\n        return _getAmountOut(_amountIn - fee, path, _uniRouter) >= _minReturn;\\n    } else if (_outToken == _wrappedNative || _outToken == NATIVE) {\\n        uint256 bought = _getAmountOut(_amountIn, path, _uniRouter);\\n        if (bought <= fee) return false;\\n        return bought - fee >= _minReturn;\\n    } else {\\n        uint256 inTokenFee = _getAmountIn(fee, feePath, _uniRouter);\\n        if (inTokenFee >= _amountIn) return false;\\n        return\\n            _getAmountOut(_amountIn - inTokenFee, path, _uniRouter) >=\\n            _minReturn;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/functions/uniswap/FStopLimitOrders.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nimport {_getAmountOut, _getAmountIn} from \\\"./FUniswapGeneral.sol\\\";\\nimport {NATIVE} from \\\"../../constants/Tokens.sol\\\";\\n\\nfunction _canHandleStopLimitOrder(\\n    address _inToken,\\n    address _outToken,\\n    uint256 _amountIn,\\n    uint256 _minReturn,\\n    address _uniRouter,\\n    address _wrappedNative,\\n    bytes calldata _data\\n) view returns (bool) {\\n    (bytes memory _auxData, uint256 _maxReturn) = abi.decode(\\n        _data,\\n        (bytes, uint256)\\n    );\\n\\n    (, , uint256 fee, address[] memory path, address[] memory feePath) = abi\\n        .decode(_auxData, (address, address, uint256, address[], address[]));\\n\\n    if (_inToken == _wrappedNative || _inToken == NATIVE) {\\n        if (_amountIn <= fee) return false;\\n        uint256 bought = _getAmountOut(_amountIn - fee, path, _uniRouter);\\n        return bought <= _maxReturn && bought >= _minReturn;\\n    } else if (_outToken == _wrappedNative || _outToken == NATIVE) {\\n        uint256 bought = _getAmountOut(_amountIn, path, _uniRouter);\\n        if (bought <= fee) return false;\\n        return bought - fee <= _maxReturn && bought - fee >= _minReturn;\\n    } else {\\n        uint256 inTokenFee = _getAmountIn(fee, feePath, _uniRouter);\\n        if (inTokenFee >= _amountIn) return false;\\n        uint256 bought = _getAmountOut(\\n            _amountIn - inTokenFee,\\n            path,\\n            _uniRouter\\n        );\\n        return bought <= _maxReturn && bought >= _minReturn;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/functions/uniswap/FUniswapGeneral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nimport {\\n    IUniswapV2Router02\\n} from \\\"../../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\n\\nfunction _getAmountOut(\\n    uint256 _amountIn,\\n    address[] memory _path,\\n    address _uniRouter\\n) view returns (uint256 amountOut) {\\n    uint256[] memory amountsOut = IUniswapV2Router02(_uniRouter).getAmountsOut(\\n        _amountIn,\\n        _path\\n    );\\n    amountOut = amountsOut[amountsOut.length - 1];\\n}\\n\\nfunction _getAmountIn(\\n    uint256 _amountOut,\\n    address[] memory _path,\\n    address _uniRouter\\n) view returns (uint256 amountIn) {\\n    uint256[] memory amountsIn = IUniswapV2Router02(_uniRouter).getAmountsIn(\\n        _amountOut,\\n        _path\\n    );\\n    amountIn = amountsIn[0];\\n}\\n\"\r\n    },\r\n    \"contracts/functions/uniswap/FUniswapV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nimport {\\n    IERC20,\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {GelatoString} from \\\"../../lib/GelatoString.sol\\\";\\nimport {\\n    IUniswapV2Router02\\n} from \\\"../../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport {NATIVE} from \\\"../../constants/Tokens.sol\\\";\\n\\nfunction _swapExactXForX(\\n    address WRAPPED_NATIVE, // solhint-disable-line var-name-mixedcase\\n    IUniswapV2Router02 _uniRouter,\\n    uint256 _amountIn,\\n    uint256 _amountOutMin,\\n    address[] memory _path,\\n    address _to,\\n    uint256 _deadline\\n) returns (uint256) {\\n    if (_path[0] == NATIVE) {\\n        _path[0] = WRAPPED_NATIVE;\\n        return\\n            _swapExactETHForTokens(\\n                _uniRouter,\\n                _amountIn,\\n                _amountOutMin,\\n                _path,\\n                _to,\\n                _deadline\\n            );\\n    }\\n\\n    SafeERC20.safeIncreaseAllowance(\\n        IERC20(_path[0]),\\n        address(_uniRouter),\\n        _amountIn\\n    );\\n\\n    if (_path[_path.length - 1] == NATIVE) {\\n        _path[_path.length - 1] = WRAPPED_NATIVE;\\n        return\\n            _swapExactTokensForETH(\\n                _uniRouter,\\n                _amountIn,\\n                _amountOutMin,\\n                _path,\\n                _to,\\n                _deadline\\n            );\\n    }\\n\\n    return\\n        _swapExactTokensForTokens(\\n            _uniRouter,\\n            _amountIn,\\n            _amountOutMin,\\n            _path,\\n            _to,\\n            _deadline\\n        );\\n}\\n\\nfunction _swapExactETHForTokens(\\n    IUniswapV2Router02 _uniRouter,\\n    uint256 _amountIn,\\n    uint256 _amountOutMin,\\n    address[] memory _path, // must be ETH-WETH SANITIZED!\\n    address _to,\\n    uint256 _deadline\\n) returns (uint256 amountOut) {\\n    try\\n        _uniRouter.swapExactETHForTokens{value: _amountIn}(\\n            _amountOutMin,\\n            _path,\\n            _to,\\n            _deadline\\n        )\\n    returns (uint256[] memory amounts) {\\n        amountOut = amounts[amounts.length - 1];\\n    } catch Error(string memory error) {\\n        GelatoString.revertWithInfo(error, \\\"_swapExactETHForTokens:\\\");\\n    } catch {\\n        revert(\\\"_swapExactETHForTokens:undefined\\\");\\n    }\\n}\\n\\nfunction _swapExactTokensForETH(\\n    IUniswapV2Router02 _uniRouter,\\n    uint256 _amountIn,\\n    uint256 _amountOutMin,\\n    address[] memory _path, // must be ETH-WETH SANITIZED!\\n    address _to,\\n    uint256 _deadline\\n) returns (uint256 amountOut) {\\n    try\\n        _uniRouter.swapExactTokensForETH(\\n            _amountIn,\\n            _amountOutMin,\\n            _path,\\n            _to,\\n            _deadline\\n        )\\n    returns (uint256[] memory amounts) {\\n        amountOut = amounts[amounts.length - 1];\\n    } catch Error(string memory error) {\\n        GelatoString.revertWithInfo(error, \\\"_swapExactTokensForETH:\\\");\\n    } catch {\\n        revert(\\\"_swapExactTokensForETH:undefined\\\");\\n    }\\n}\\n\\nfunction _swapExactTokensForTokens(\\n    IUniswapV2Router02 _uniRouter,\\n    uint256 _amountIn,\\n    uint256 _amountOutMin,\\n    address[] memory _path, // must be ETH-WETH SANITIZED!\\n    address _to,\\n    uint256 _deadline\\n) returns (uint256 amountOut) {\\n    try\\n        _uniRouter.swapExactTokensForTokens(\\n            _amountIn,\\n            _amountOutMin,\\n            _path,\\n            _to,\\n            _deadline\\n        )\\n    returns (uint256[] memory amounts) {\\n        amountOut = amounts[amounts.length - 1];\\n    } catch Error(string memory error) {\\n        GelatoString.revertWithInfo(error, \\\"_swapExactTokensForTokens:\\\");\\n    } catch {\\n        revert(\\\"_swapExactTokensForTokens:undefined\\\");\\n    }\\n}\\n\\nfunction _swapTokensForExactETH(\\n    IUniswapV2Router02 _uniRouter,\\n    uint256 _amountOut,\\n    uint256 _amountInMax,\\n    address[] memory _path, // must be ETH-WETH SANITIZED!\\n    address _to,\\n    uint256 _deadline\\n) returns (uint256 amountIn) {\\n    SafeERC20.safeIncreaseAllowance(\\n        IERC20(_path[0]),\\n        address(_uniRouter),\\n        _amountInMax\\n    );\\n\\n    try\\n        _uniRouter.swapTokensForExactETH(\\n            _amountOut,\\n            _amountInMax,\\n            _path,\\n            _to,\\n            _deadline\\n        )\\n    returns (uint256[] memory amounts) {\\n        return amounts[0];\\n    } catch Error(string memory error) {\\n        GelatoString.revertWithInfo(error, \\\"_swapTokensForExactETH:\\\");\\n    } catch {\\n        revert(\\\"_swapTokensForExactETH:undefined\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/handlers/uniswap/UniswapV2Router02Handler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nimport {IHandler} from \\\"../../interfaces/IHandler.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    IUniswapV2Router02\\n} from \\\"../../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport {TokenUtils} from \\\"../../lib/TokenUtils.sol\\\";\\nimport {NATIVE} from \\\"../../constants/Tokens.sol\\\";\\nimport {IWETH} from \\\"../../interfaces/IWETH.sol\\\";\\nimport {\\n    _swapExactXForX,\\n    _swapTokensForExactETH\\n} from \\\"../../functions/uniswap/FUniswapV2.sol\\\";\\nimport {_canHandleLimitOrder} from \\\"../../functions/uniswap/FLimitOrders.sol\\\";\\nimport {_handleInputData} from \\\"../../functions/FHandlerUtils.sol\\\";\\n\\n/// @notice UniswapV2 Handler used to execute an order via UniswapV2Router02\\n/// @dev This does NOT implement the standard IHANDLER\\ncontract UniswapV2Router02Handler is IHandler {\\n    using TokenUtils for address;\\n\\n    // solhint-disable var-name-mixedcase\\n    address public UNI_ROUTER;\\n    address public immutable WRAPPED_NATIVE;\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    constructor(address _uniRouter, address _wrappedNative) {\\n        UNI_ROUTER = _uniRouter;\\n        WRAPPED_NATIVE = _wrappedNative;\\n    }\\n\\n    /// @notice receive ETH from UniV2Router02 during swapXForEth\\n    receive() external payable override {\\n        require(\\n            msg.sender != tx.origin,\\n            \\\"UniswapV2Router02Handler#receive: NO_SEND_NATIVE_PLEASE\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Handle an order execution\\n     * @param _inToken - Address of the input token\\n     * @param _outToken - Address of the output token\\n     * @param _amountOutMin - Address of the output token\\n     * @param _data - (module, relayer, fee, intermediatePath, intermediateFeePath)\\n     * @return bought - Amount of output token bought\\n     */\\n    // solhint-disable-next-line function-max-lines\\n    function handle(\\n        IERC20 _inToken,\\n        IERC20 _outToken,\\n        uint256,\\n        uint256 _amountOutMin,\\n        bytes calldata _data\\n    ) external virtual override returns (uint256 bought) {\\n        (\\n            uint256 amountIn,\\n            address[] memory path,\\n            address relayer,\\n            uint256 fee,\\n            address[] memory feePath\\n        ) = _handleInputData(\\n                address(this),\\n                address(_inToken),\\n                address(_outToken),\\n                _data\\n            );\\n\\n        // Swap and charge fee in ETH\\n        if (\\n            address(_inToken) == WRAPPED_NATIVE || address(_inToken) == NATIVE\\n        ) {\\n            if (address(_inToken) == WRAPPED_NATIVE)\\n                IWETH(WRAPPED_NATIVE).withdraw(fee);\\n            bought = _swap(amountIn - fee, _amountOutMin, path, msg.sender);\\n        } else if (\\n            address(_outToken) == WRAPPED_NATIVE || address(_outToken) == NATIVE\\n        ) {\\n            bought = _swap(amountIn, _amountOutMin + fee, path, address(this));\\n            if (address(_outToken) == WRAPPED_NATIVE)\\n                IWETH(WRAPPED_NATIVE).withdraw(fee);\\n            address(_outToken).transfer(msg.sender, bought - fee);\\n        } else {\\n            uint256 feeAmountIn = _swapTokensForExactETH(\\n                IUniswapV2Router02(UNI_ROUTER),\\n                fee, // amountOut (in ETH)\\n                amountIn, // amountInMax (in inputToken)\\n                feePath,\\n                address(this),\\n                block.timestamp + 1 // solhint-disable-line not-rely-on-time\\n            );\\n            _swap(amountIn - feeAmountIn, _amountOutMin, path, msg.sender);\\n        }\\n\\n        // Send fee to relayer\\n        (bool successRelayer, ) = relayer.call{value: fee}(\\\"\\\");\\n        require(\\n            successRelayer,\\n            \\\"UniswapV2Router02Handler#handle: TRANSFER_NATIVE_TO_RELAYER_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Check whether can handle an order execution\\n     * @param _inToken - Address of the input token\\n     * @param _outToken - Address of the output token\\n     * @param _amountIn - uint256 of the input token amount\\n     * @param _minReturn - uint256 of the min return amount of output token\\n     * @param _data - (module, relayer, fee, intermediatePath)\\n     * @return bool - Whether the execution can be handled or not\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function canHandle(\\n        IERC20 _inToken,\\n        IERC20 _outToken,\\n        uint256 _amountIn,\\n        uint256 _minReturn,\\n        bytes calldata _data\\n    ) external view virtual override returns (bool) {\\n        return\\n            _canHandleLimitOrder(\\n                address(this),\\n                address(_inToken),\\n                address(_outToken),\\n                _amountIn,\\n                _minReturn,\\n                UNI_ROUTER,\\n                WRAPPED_NATIVE,\\n                _data\\n            );\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] memory _path,\\n        address _recipient\\n    ) internal virtual returns (uint256 bought) {\\n        bought = _swapExactXForX(\\n            WRAPPED_NATIVE,\\n            IUniswapV2Router02(UNI_ROUTER),\\n            _amountIn,\\n            _amountOutMin,\\n            _path,\\n            _recipient,\\n            block.timestamp + 1 // solhint-disable-line not-rely-on-time\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/handlers/uniswap/UniswapV2Router02StopLimitHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    IUniswapV2Router02,\\n    UniswapV2Router02Handler\\n} from \\\"./UniswapV2Router02Handler.sol\\\";\\nimport {\\n    _canHandleStopLimitOrder\\n} from \\\"../../functions/uniswap/FStopLimitOrders.sol\\\";\\n\\n/// @notice UniswapV2 Handler used to execute an order via UniswapV2Router02\\n/// @dev This does NOT implement the standard IHANDLER\\ncontract UniswapV2Router02StopLimitHandler is UniswapV2Router02Handler {\\n    constructor(address _uniRouter, address _wrappedNative)\\n        UniswapV2Router02Handler(_uniRouter, _wrappedNative)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function canHandle(\\n        IERC20 _inToken,\\n        IERC20 _outToken,\\n        uint256 _amountIn,\\n        uint256 _minReturn,\\n        bytes calldata _data\\n    ) external view override returns (bool) {\\n        return\\n            _canHandleStopLimitOrder(\\n                address(_inToken),\\n                address(_outToken),\\n                _amountIn,\\n                _minReturn,\\n                UNI_ROUTER,\\n                WRAPPED_NATIVE,\\n                _data\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IHandler {\\n    /// @notice receive ETH\\n    receive() external payable;\\n\\n    /**\\n     * @notice Handle an order execution\\n     * @param _inToken - Address of the input token\\n     * @param _outToken - Address of the output token\\n     * @param _amountIn - uint256 of the input token amount\\n     * @param _amountOutMin - uint256 of the min return amount of output token\\n     * @param _data - Bytes of arbitrary data\\n     * @return bought - Amount of output token bought\\n     */\\n    function handle(\\n        IERC20 _inToken,\\n        IERC20 _outToken,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        bytes calldata _data\\n    ) external returns (uint256 bought);\\n\\n    /**\\n     * @notice Check whether can handle an order execution\\n     * @param _inToken - Address of the input token\\n     * @param _outToken - Address of the output token\\n     * @param _amountIn - uint256 of the input token amount\\n     * @param _amountOutMin - uint256 of the min return amount of output token\\n     * @param _data - Bytes of arbitrary data\\n     * @return bool - Whether the execution can be handled or not\\n     */\\n    function canHandle(\\n        IERC20 _inToken,\\n        IERC20 _outToken,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        bytes calldata _data\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactETHForTokens(\\n        uint256 minAmountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function factory() external pure returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH() external pure returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/GelatoString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nlibrary GelatoString {\\n    function revertWithInfo(string memory _error, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        revert(string(abi.encodePacked(_tracingInfo, _error)));\\n    }\\n\\n    function prefix(string memory _second, string memory _first)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(_first, _second));\\n    }\\n\\n    function suffix(string memory _first, string memory _second)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(_first, _second));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TokenUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nimport {\\n    Address,\\n    IERC20,\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {NATIVE} from \\\"../constants/Tokens.sol\\\";\\n\\nlibrary TokenUtils {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amt\\n    ) internal {\\n        if (_token == NATIVE) payable(_to).sendValue(_amt);\\n        else IERC20(_token).safeTransfer(_to, _amt);\\n    }\\n\\n    function balanceOf(address _token, address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            NATIVE == _token\\n                ? _account.balance\\n                : IERC20(_token).balanceOf(_account);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UNI_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"canHandle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bought\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UniswapV2Router02StopLimitHandler", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}