{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"src/ERC20/IERC20.sol\": {\r\n      \"content\": \"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    event NameChanged(string name, string symbol);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\"\r\n    },\r\n    \"src/brokerbot/IBrokerbot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBrokerbot {\\n  \\n  function base() external view returns (address);\\n  \\n  function settings() external view returns (uint256);\\n\\n  function processIncoming(address token_, address from, uint256 amount, bytes calldata ref) external payable returns (uint256);\\n\\n}\"\r\n    },\r\n    \"src/brokerbot/IUniswapV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\\npragma solidity ^0.8.0;\\n\\ninterface IQuoter {\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n    \\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH9() external view returns (address);\\n}\\n\\ninterface ISwapRouter {\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n    \\n    function refundETH() external payable;\\n}\"\r\n    },\r\n    \"src/brokerbot/PaymentHub.sol\": {\r\n      \"content\": \"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2021 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IUniswapV3.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./IBrokerbot.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality,\\n * namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first.\\n * Instead, an allowance needs to be set only once, namely for this contract.\\n * Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether\\n * using the current exchange rate as found in the chainlink oracle.\\n */\\ncontract PaymentHub {\\n\\n    address public immutable weth;\\n    \\n    IQuoter private constant UNISWAP_QUOTER = IQuoter(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\\n    ISwapRouter private constant UNISWAP_ROUTER = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    AggregatorV3Interface internal immutable priceFeedCHFUSD;\\n    AggregatorV3Interface internal immutable priceFeedETHUSD;\\n\\n\\n    constructor(address _aggregatorCHFUSD, address _aggregatorETHUSD) {\\n        weth = UNISWAP_QUOTER.WETH9();\\n        priceFeedCHFUSD = AggregatorV3Interface(_aggregatorCHFUSD);\\n        priceFeedETHUSD = AggregatorV3Interface(_aggregatorETHUSD);\\n    }\\n\\n    /*  \\n     * Get price in WBTC\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     */\\n    function getPriceInERC20(uint256 amountInBase, address base, address erc20In) public returns (uint256) {\\n        uint24 poolFee = 3000;\\n        return UNISWAP_QUOTER.quoteExactOutput(\\n            abi.encodePacked(base, poolFee, weth, poolFee, erc20In),\\n            amountInBase\\n        );\\n    }\\n\\n    /**\\n     * Get price in Ether depding on brokerbot setting.\\n     * If keep ETH is set price is from oracle.\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     */\\n    function getPriceInEther(uint256 amountInBase, address brokerBot) public returns (uint256) {\\n        if ((brokerBot != address(0)) && hasSettingKeepEther(brokerBot)) {\\n            return getPriceInEtherFromOracle(amountInBase, IBrokerbot(brokerBot).base());\\n        } else {\\n            return UNISWAP_QUOTER.quoteExactOutputSingle(weth, IBrokerbot(brokerBot).base(), 3000, amountInBase, 0);\\n        }\\n    }\\n\\n    /**\\n     * Price in ETH with 18 decimals\\n     */\\n    function getPriceInEtherFromOracle(uint256 amountInBase, address base) public view returns (uint256) {\\n        if(isBaseCurrencyCHF(base)) {\\n            return getPriceInUSD(amountInBase) * 10**8 / uint256(getLatestPriceETHUSD());\\n        }\\n        return amountInBase * 10**8 / uint256(getLatestPriceETHUSD());\\n    }\\n\\n    /**\\n     * Price in USD with 18 decimals\\n     */\\n    function getPriceInUSD(uint256 amountInBase) public view returns (uint256) {\\n        return (uint256(getLatestPriceCHFUSD()) * amountInBase) / 10**8;\\n    }\\n\\n    /**\\n     * Returns the latest price of eth/usd pair from chainlink with 8 decimals\\n     */\\n    function getLatestPriceETHUSD() public view returns (int256) {\\n        (, int256 price, , , ) = priceFeedETHUSD.latestRoundData();\\n        return price;\\n    }\\n\\n    /**\\n     * Returns the latest price of chf/usd pair from chainlink with 8 decimals\\n     */\\n    function getLatestPriceCHFUSD() public view returns (int) {\\n        (, int price, , , ) = priceFeedCHFUSD.latestRoundData();\\n        return price;\\n    }\\n\\n    /**\\n     * Convenience method to swap ether into base and pay a target address\\n     */\\n    function payFromEther(address recipient, uint256 amountInBase, address base) public payable {\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams(\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        weth, base, 3000, recipient, block.timestamp, amountInBase, msg.value, 0);\\n\\n        ISwapRouter swapRouter = UNISWAP_ROUTER;\\n        // Executes the swap returning the amountIn needed to spend to receive the desired amountOut.\\n        uint256 amountIn = swapRouter.exactOutputSingle{value: msg.value}(params);\\n\\n        // For exact output swaps, the amountInMaximum may not have all been spent.\\n        // If the actual amount spent (amountIn) is less than the specified maximum amount, we must refund the msg.sender and approve the swapRouter to spend 0.\\n        if (amountIn < msg.value) {\\n            swapRouter.refundETH();\\n            payable(msg.sender).transfer(msg.value - amountIn); // return change\\n        }\\n    }\\n\\n    /// @dev The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable,\\n    /// the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.\\n    /// @param amountOut The desired amount of baseCurrency.\\n    /// @param amountInMaximum The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.\\n    /// @param erc20In The address of the erc20 token to pay with\\n    /// @param recipient The reciving address - brokerbot\\n    /// @return amountIn The amountIn of ERC20 actually spent to receive the desired amountOut.\\n    function payFromERC20(uint256 amountOut, uint256 amountInMaximum, address erc20In, address base, address recipient) public returns (uint256 amountIn) {\\n        ISwapRouter swapRouter = UNISWAP_ROUTER;\\n        // Transfer the specified `amountInMaximum` to this contract.\\n        IERC20(erc20In).transferFrom(msg.sender, address(this), amountInMaximum);\\n\\n        uint24 poolFee = 3000;\\n\\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\\n        ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: abi.encodePacked(base, poolFee, weth, poolFee, erc20In),\\n                recipient: recipient,\\n                // solhint-disable-next-line not-rely-on-time\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum\\n            });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        amountIn = swapRouter.exactOutput(params);\\n\\n        // If the swap did not require the full amountInMaximum to achieve the exact amountOut then we refund msg.sender and approve the router to spend 0.\\n        if (amountIn < amountInMaximum) {\\n            IERC20(erc20In).transfer(msg.sender, amountInMaximum - amountIn);\\n\\n        }\\n    }\\n\\n    ///This function appoves infinit allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recove() ).\\n    ///@dev This function needs to be called before using the PaymentHub the first time with a new ERC20 token.\\n    ///@param erc20In The erc20 addresse to approve.\\n    function approveERC20(address erc20In) external {\\n        IERC20(erc20In).approve(address(UNISWAP_ROUTER), 0x8000000000000000000000000000000000000000000000000000000000000000);\\n    }\\n\\n    function multiPay(address token, address[] calldata recipients, uint256[] calldata amounts) public {\\n        for (uint i=0; i<recipients.length; i++) {\\n            IERC20(token).transferFrom(msg.sender, recipients[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\\n     */\\n    function multiPayAndNotify(address token, address[] calldata recipients, uint256[] calldata amounts, bytes calldata ref) external {\\n        for (uint i=0; i<recipients.length; i++) {\\n            payAndNotify(token, recipients[i], amounts[i], ref);\\n        }\\n    }\\n\\n    // Allows to make a payment from the sender to an address given an allowance to this contract\\n    // Equivalent to xchf.transferAndCall(recipient, amountInBase)\\n    function payAndNotify(address recipient, uint256 amountInBase, bytes calldata ref) external {\\n        payAndNotify(IBrokerbot(recipient).base(), recipient, amountInBase, ref);\\n    }\\n\\n    function payAndNotify(address token, address recipient, uint256 amount, bytes calldata ref) public {\\n        IERC20(token).transferFrom(msg.sender, recipient, amount);\\n        IBrokerbot(recipient).processIncoming(token, msg.sender, amount, ref);\\n    }\\n\\n    function payFromEtherAndNotify(address recipient, uint256 amountInBase, bytes calldata ref) external payable {\\n        address base = IBrokerbot(recipient).base();\\n        // Check if the brokerbot has setting to keep ETH\\n        if (hasSettingKeepEther(recipient)) {\\n            uint256 priceInEther = getPriceInEtherFromOracle(amountInBase, base);\\n            IBrokerbot(recipient).processIncoming{value: priceInEther}(base, msg.sender, amountInBase, ref);\\n\\n            // Pay back ETH that was overpaid\\n            if (priceInEther < msg.value) {\\n                payable(msg.sender).transfer(msg.value - priceInEther); // return change\\n            }\\n\\n        } else {\\n            payFromEther(recipient, amountInBase, base);\\n            IBrokerbot(recipient).processIncoming(base, msg.sender, amountInBase, ref);\\n        }\\n    }\\n\\n    /*** \\n     * Pay from any ERC20 token (which has Uniswapv3 ERC20-ETH pool) and send swapped base currency to brokerbot.\\n     * The needed amount needs to be approved at the ERC20 contract beforehand\\n     */\\n    function payFromERC20AndNotify(address recipient, uint256 amountBase, address erc20, uint256 amountInMaximum, bytes calldata ref) external {\\n        address base = IBrokerbot(recipient).base();\\n        payFromERC20(amountBase, amountInMaximum, erc20, base, recipient);\\n        IBrokerbot(recipient).processIncoming(base, msg.sender, amountBase, ref);\\n    }\\n\\n    /**\\n     * Checks if the recipient(brokerbot) has setting enabled to keep ether\\n     */\\n    function hasSettingKeepEther(address recipient) public view returns (bool) {\\n        return IBrokerbot(recipient).settings() & 0x4 == 0x4;\\n    }\\n\\n    function isBaseCurrencyCHF(address base) private pure returns (bool) {\\n        if (base == address(0xB4272071eCAdd69d933AdcD19cA99fe80664fc08)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * In case tokens have been accidentally sent directly to this contract.\\n     * Make sure to be fast as anyone can call this!\\n     */\\n    function recover(address ercAddress, address to, uint256 amount) external {\\n        IERC20(ercAddress).transfer(to, amount);\\n    }\\n\\n    // Important to receive ETH refund from Uniswap\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\"\r\n    },\r\n    \"src/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        require(data.length == 0 || isContract(target), \\\"transfer or contract\\\");\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // TODO: I think this does not lead to correct error messages.\\n            revert(string(returndata));\\n        }\\n    }\\n}\"\r\n    },\r\n    \"src/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"not owner\\\");\\n        _;\\n    }\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorCHFUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregatorETHUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20In\",\"type\":\"address\"}],\"name\":\"approveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceCHFUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceETHUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20In\",\"type\":\"address\"}],\"name\":\"getPriceInERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"brokerBot\",\"type\":\"address\"}],\"name\":\"getPriceInEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"}],\"name\":\"getPriceInEtherFromOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"}],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"hasSettingKeepEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"multiPayAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20In\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"payFromERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payFromERC20AndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"}],\"name\":\"payFromEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payFromEtherAndNotify\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ercAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PaymentHub", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000449d117117838ffa61263b61da6301aa2a88b13a0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}