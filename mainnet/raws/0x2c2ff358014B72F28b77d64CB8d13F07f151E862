{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ShamanzsRefund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/// @title Shamanz DA Refunds\\r\\n/// @author @KfishNFT\\r\\ncontract ShamanzRefund is Ownable, ReentrancyGuard {\\r\\n    /// @notice Merkle Root used to verify if an address is part of the refund one list\\r\\n    bytes32 public merkleRootOne;\\r\\n    /// @notice Merkle Root used to verify if an address is part of the refund Two list\\r\\n    bytes32 public merkleRootTwo;\\r\\n    /// @notice Merkle Root used to verify if an address is part of the refund Three list\\r\\n    bytes32 public merkleRootThree;\\r\\n    /// @notice Used to keep track of addresses that have been refunded\\r\\n    mapping(address => bool) public daRefunded;\\r\\n    mapping(address => bool) public wlRefunded;\\r\\n    mapping(address => bool) public alRefunded;\\r\\n    /// @notice Toggleable flag for refund state\\r\\n    bool public isRefundActive;\\r\\n    /// @notice Wich refund phase are we in?\\r\\n    bool public da = true;\\r\\n    bool public wl = false;\\r\\n    bool public al = false;\\r\\n    /// @notice Refund amount for people who minted one Shamanz in DA\\r\\n    uint256 public refundOneAmount = 0.35 ether;\\r\\n    /// @notice Refund amount for people who minted two Shamanz in DA\\r\\n    uint256 public refundTwoAmount = 0.7 ether;\\r\\n    /// @notice Refund amount for people who minted three Shamanz in DA\\r\\n    uint256 public refundThreeAmount = 1.05 ether;\\r\\n\\r\\n    /// @notice Contract constructor\\r\\n    /// @dev The merkle root can be added later if required\\r\\n    /// @notice Emit event once ETH is received\\r\\n    /// @param sender The sender of ETH\\r\\n    /// @param value The amount of ETH\\r\\n    event Received(address indexed sender, uint256 value);\\r\\n\\r\\n    /// @notice Emit event once ETH is refunded\\r\\n    /// @param sender The address being refunded\\r\\n    /// @param value The amount of ETH\\r\\n    event Refunded(address indexed sender, uint256 value);\\r\\n\\r\\n    /// @notice Allow contract to receive eth\\r\\n    receive() external payable {\\r\\n        emit Received(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    /// @dev requires a valid merkleRoot to function\\r\\n    /// @param _merkleProof the proof sent by an refundable user\\r\\n    function refund(bytes32[] calldata _merkleProof, uint256 _toRefund) external nonReentrant {\\r\\n        require(isRefundActive, \\\"Refunding is not active yet\\\");\\r\\n        if (da) require(!daRefunded[msg.sender], \\\"Already refunded\\\");\\r\\n        if (wl) require(!wlRefunded[msg.sender], \\\"Already refunded\\\");\\r\\n        if (al) require(!alRefunded[msg.sender], \\\"Already refunded\\\");\\r\\n\\r\\n        uint256 toPay = refundOneAmount;\\r\\n\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\r\\n        if (_toRefund == 1) require(MerkleProof.verify(_merkleProof, merkleRootOne, leaf), \\\"not refundable\\\");\\r\\n\\r\\n        if (_toRefund == 2) {\\r\\n            require(MerkleProof.verify(_merkleProof, merkleRootTwo, leaf), \\\"not refundable\\\");\\r\\n            toPay = refundTwoAmount;\\r\\n        }\\r\\n\\r\\n        if (_toRefund == 3) {\\r\\n            require(MerkleProof.verify(_merkleProof, merkleRootThree, leaf), \\\"not refundable\\\");\\r\\n            toPay = refundThreeAmount;\\r\\n        }\\r\\n\\r\\n        if (da) daRefunded[msg.sender] = true;\\r\\n        if (wl) wlRefunded[msg.sender] = true;\\r\\n        if (al) alRefunded[msg.sender] = true;\\r\\n\\r\\n        if(toPay > 0) {\\r\\n            (bool os, ) = payable(msg.sender).call{value: toPay}(\\\"\\\");\\r\\n            require(os);\\r\\n            emit Refunded(msg.sender, toPay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function that sets refunding active or inactive\\r\\n    /// @dev only callable from the contract owner\\r\\n    function toggleIsRefundActive() external onlyOwner {\\r\\n        isRefundActive = !isRefundActive;\\r\\n    }\\r\\n\\r\\n    /// @notice Set refund amounts for people who minted Shamanz in DA\\r\\n    /// @param refundOneAmount_ Refund amount for people who minted one Shamanz in DA\\r\\n    /// @param refundTwoAmount_ Refund amount for people who minted two Shamanz in DA\\r\\n    /// @param refundThreeAmount_ Refund amount for people who minted three Shamanz in DA\\r\\n    function setRefundAmounts(\\r\\n        uint256 refundOneAmount_,\\r\\n        uint256 refundTwoAmount_,\\r\\n        uint256 refundThreeAmount_\\r\\n    ) external onlyOwner {\\r\\n        refundOneAmount = refundOneAmount_;\\r\\n        refundTwoAmount = refundTwoAmount_;\\r\\n        refundThreeAmount = refundThreeAmount_;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the merkle root for refunds verification\\r\\n    /// @dev only callable from the contract owner\\r\\n    /// @param merkleRootOne_ used to verify the refund list of one mint\\r\\n    /// @param merkleRootTwo_ used to verify the refund list of two mints\\r\\n    /// @param merkleRootThree_ used to verify the refund list of three mints\\r\\n    function setMerkleRoots(\\r\\n        bytes32 merkleRootOne_,\\r\\n        bytes32 merkleRootTwo_,\\r\\n        bytes32 merkleRootThree_\\r\\n    ) external onlyOwner {\\r\\n        merkleRootOne = merkleRootOne_;\\r\\n        merkleRootTwo = merkleRootTwo_;\\r\\n        merkleRootThree = merkleRootThree_;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets refund phase DA\\r\\n    /// @dev only callable from the contract owner\\r\\n    /// @param _activate active phase\\r\\n    function setDa(bool _activate) external onlyOwner {\\r\\n        da = _activate;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets refund phase WL\\r\\n    /// @dev only callable from the contract owner\\r\\n    /// @param _activate active phase\\r\\n    function setWl(bool _activate) external onlyOwner {\\r\\n        wl = _activate;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets refund phase AL\\r\\n    /// @dev only callable from the contract owner\\r\\n    /// @param _activate active phase\\r\\n    function setAl(bool _activate) external onlyOwner {\\r\\n        al = _activate;\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw function in case anyone sends ETH to contract by mistake\\r\\n    /// @dev only callable from the contract owner\\r\\n    function withdraw() external payable onlyOwner {\\r\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"Withdrawal failed\\\");\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"al\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alRefunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"da\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daRefunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRefundActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootOne\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootThree\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootTwo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_toRefund\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundOneAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundThreeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundTwoAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activate\",\"type\":\"bool\"}],\"name\":\"setAl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activate\",\"type\":\"bool\"}],\"name\":\"setDa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRootOne_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRootTwo_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRootThree_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refundOneAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundTwoAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundThreeAmount_\",\"type\":\"uint256\"}],\"name\":\"setRefundAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activate\",\"type\":\"bool\"}],\"name\":\"setWl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsRefundActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wl\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wlRefunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ShamanzRefund", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}