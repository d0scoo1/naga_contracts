{"status": "1", "message": "OK", "result": [{"SourceCode": "// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.4.23;\r\n\r\n// import 'ds-auth/auth.sol';\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n// import 'ds-math/math.sol';\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// import './IkuraStorage.sol';\r\n/**\r\n *\r\n * \u30ed\u30b8\u30c3\u30af\u306e\u66f4\u65b0\u306b\u5f71\u97ff\u3055\u308c\u306a\u3044\u6c38\u7d9a\u5316\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\u30af\u30e9\u30b9\r\n *\r\n */\r\ncontract IkuraStorage is DSMath, DSAuth {\r\n  // \u30aa\u30fc\u30ca\u30fc\uff08\u4e2d\u592e\u9280\u884c\uff09\u306e\u30a2\u30c9\u30ec\u30b9\r\n  address[] ownerAddresses;\r\n\r\n  // \u5404\u30a2\u30c9\u30ec\u30b9\u306edJPY\u306e\u53e3\u5ea7\u6b8b\u9ad8\r\n  mapping(address => uint) coinBalances;\r\n\r\n  // \u5404\u30a2\u30c9\u30ec\u30b9\u306eSHINJI token\u306e\u53e3\u5ea7\u6b8b\u9ad8\r\n  mapping(address => uint) tokenBalances;\r\n\r\n  // \u5404\u30a2\u30c9\u30ec\u30b9\u304c\u6307\u5b9a\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u3057\u3066\u8a31\u53ef\u3059\u308b\u6700\u5927\u9001\u91d1\u984d\r\n  mapping(address => mapping (address => uint)) coinAllowances;\r\n\r\n  // dJPY\u306e\u767a\u884c\u9ad8\r\n  uint _totalSupply = 0;\r\n\r\n  // \u624b\u6570\u6599\u7387\r\n  // 0.01pips = 1\r\n  // \u4f8b). \u624b\u6570\u6599\u3092 0.05% \u3068\u3059\u308b\u5834\u5408\u306f 500\r\n  uint _transferFeeRate = 500;\r\n\r\n  // \u6700\u4f4e\u624b\u6570\u6599\u984d\r\n  // 1 = 1dJPY\r\n  // amount * \u624b\u6570\u6599\u7387\u3067\u7b97\u51fa\u3057\u305f\u91d1\u984d\u304c\u3053\u3053\u3067\u8a2d\u5b9a\u3057\u305f\u6700\u4f4e\u624b\u6570\u6599\u3092\u4e0b\u56de\u308b\u5834\u5408\u306f\u3001\u6700\u4f4e\u624b\u6570\u6599\u984d\u3092\u624b\u6570\u6599\u3068\u3059\u308b\r\n  uint8 _transferMinimumFee = 5;\r\n\r\n  address tokenAddress;\r\n  address multiSigAddress;\r\n  address authorityAddress;\r\n\r\n  // @NOTE \u30ea\u30ea\u30fc\u30b9\u6642\u306bcontract\u306edeploy -> watch contract -> setOwner\u306e\u6d41\u308c\u3092\r\n  //\u7701\u7565\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u3053\u3067\u76f4\u63a5controller\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3068\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3067\u304d\u307e\u3059\r\n  // \u52ff\u8ad6\u30c6\u30b9\u30c8\u306f\u901a\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u304c\u901a\u3063\u305f\u3089\u8a66\u3057\u3066\u306d\r\n  constructor() public DSAuth() {\r\n    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\r\n    owner = controllerAddress;\r\n    LogSetOwner(controllerAddress);*/\r\n  }\r\n\r\n  function changeToken(address tokenAddress_) public auth {\r\n    tokenAddress = tokenAddress_;\r\n  }\r\n\r\n  function changeAssociation(address multiSigAddress_) public auth {\r\n    multiSigAddress = multiSigAddress_;\r\n  }\r\n\r\n  function changeAuthority(address authorityAddress_) public auth {\r\n    authorityAddress = authorityAddress_;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _totalSupply\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u7dcf\u767a\u884c\u984d\u3092\u8fd4\u3059\r\n   *\r\n   * @return \u7dcf\u767a\u884c\u984d\r\n   */\r\n  function totalSupply() public view auth returns (uint) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * \u7dcf\u767a\u884c\u6570\u3092\u5897\u3084\u3059\uff08mint\u3068\u4e26\u884c\u3057\u3066\u547c\u3070\u308c\u308b\u3053\u3068\u3092\u60f3\u5b9a\uff09\r\n   *\r\n   * @param amount \u92f3\u9020\u6570\r\n   */\r\n  function addTotalSupply(uint amount) public auth {\r\n    _totalSupply = add(_totalSupply, amount);\r\n  }\r\n\r\n  /**\r\n   * \u7dcf\u767a\u884c\u6570\u3092\u6e1b\u3089\u3059\uff08burn\u3068\u4e26\u884c\u3057\u3066\u547c\u3070\u308c\u308b\u3053\u3068\u3092\u60f3\u5b9a\uff09\r\n   *\r\n   * @param amount \u92f3\u9020\u6570\r\n   */\r\n  function subTotalSupply(uint amount) public auth {\r\n    _totalSupply = sub(_totalSupply, amount);\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _transferFeeRate\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u624b\u6570\u6599\u7387\u3092\u8fd4\u3059\r\n   *\r\n   * @return \u73fe\u5728\u306e\u624b\u6570\u6599\u7387\r\n   */\r\n  function transferFeeRate() public view auth returns (uint) {\r\n    return _transferFeeRate;\r\n  }\r\n\r\n  /**\r\n   * \u624b\u6570\u6599\u7387\u3092\u5909\u66f4\u3059\u308b\r\n   *\r\n   * @param newTransferFeeRate \u65b0\u3057\u3044\u624b\u6570\u6599\u7387\r\n   *\r\n   * @return \u66f4\u65b0\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\uff08\u4eca\u306e\u3068\u3053\u308d\u5931\u6557\u3059\u308b\u30b1\u30fc\u30b9\u306f\u306a\u3044\uff09\r\n   */\r\n  function setTransferFeeRate(uint newTransferFeeRate) public auth returns (bool) {\r\n    _transferFeeRate = newTransferFeeRate;\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _transferMinimumFee\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u6700\u4f4e\u624b\u6570\u6599\u8fd4\u3059\r\n   *\r\n   * @return \u73fe\u5728\u306e\u6700\u4f4e\u624b\u6570\u6599\r\n   */\r\n  function transferMinimumFee() public view auth returns (uint8) {\r\n    return _transferMinimumFee;\r\n  }\r\n\r\n  /**\r\n   * \u6700\u4f4e\u624b\u6570\u6599\u3092\u5909\u66f4\u3059\u308b\r\n   *\r\n   * @param newTransferMinimumFee \u65b0\u3057\u3044\u6700\u4f4e\u624b\u6570\u6599\r\n   *\r\n   * @return \u66f4\u65b0\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\uff08\u4eca\u306e\u3068\u3053\u308d\u5931\u6557\u3059\u308b\u30b1\u30fc\u30b9\u306f\u306a\u3044\uff09\r\n   */\r\n  function setTransferMinimumFee(uint8 newTransferMinimumFee) public auth {\r\n    _transferMinimumFee = newTransferMinimumFee;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for ownerAddresses\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u30a2\u30c9\u30ec\u30b9\u3092\u30aa\u30fc\u30ca\u30fc\u306e\u4e00\u89a7\u306b\u8ffd\u52a0\u3059\u308b\r\n   *\r\n   * \u30c8\u30fc\u30af\u30f3\u306e\u79fb\u52d5\u6642\u306b\u5185\u90e8\u7684\u306b\u30aa\u30fc\u30ca\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3002\r\n   * \u30c8\u30fc\u30af\u30f3\u306e\u6240\u6709\u8005 = \u30aa\u30fc\u30ca\u30fc\u3068\u3044\u3046\u6271\u3044\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u3053\u306e\u914d\u5217\u306b\u542b\u307e\u308c\u308b\u30a2\u30c9\u30ec\u30b9\u306e\u4e00\u89a7\u306f\r\n   * \u624b\u6570\u6599\u304b\u3089\u306e\u53ce\u76ca\u306e\u5206\u914d\u3092\u3059\u308b\u6642\u306b\u5229\u7528\u3059\u308b\u3060\u3051\u3067\u3001\u30aa\u30fc\u30ca\u30fc\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u306b\u306f\u5229\u7528\u3057\u306a\u3044\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function addOwnerAddress(address addr) internal returns (bool) {\r\n    ownerAddresses.push(addr);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u30a2\u30c9\u30ec\u30b9\u3092\u30aa\u30fc\u30ca\u30fc\u306e\u4e00\u89a7\u304b\u3089\u524a\u9664\u3059\u308b\r\n   *\r\n   * \u30c8\u30fc\u30af\u30f3\u306e\u79fb\u52d5\u6642\u306b\u5185\u90e8\u7684\u306b\u30aa\u30fc\u30ca\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3002\r\n   *\r\n   * @param addr \u30aa\u30fc\u30ca\u30fc\u306b\u5c5e\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function removeOwnerAddress(address addr) internal returns (bool) {\r\n    uint i = 0;\r\n\r\n    while (ownerAddresses[i] != addr) { i++; }\r\n\r\n    while (i < ownerAddresses.length - 1) {\r\n      ownerAddresses[i] = ownerAddresses[i + 1];\r\n      i++;\r\n    }\r\n\r\n    ownerAddresses.length--;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6700\u521d\u306e\u30aa\u30fc\u30ca\u30fc\uff08contract\u3092deploy\u3057\u305f\u30e6\u30fc\u30b6\u30fc\uff09\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8fd4\u3059\r\n   *\r\n   * @return \u6700\u521d\u306e\u30aa\u30fc\u30ca\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   */\r\n  function primaryOwner() public view auth returns (address) {\r\n    return ownerAddresses[0];\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u304c\u30aa\u30fc\u30ca\u30fc\u30a2\u30c9\u30ec\u30b9\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u8fd4\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u30aa\u30fc\u30ca\u30fc\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u306ftrue\u3001\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306ffalse\r\n   */\r\n  function isOwnerAddress(address addr) public view auth returns (bool) {\r\n    for (uint i = 0; i < ownerAddresses.length; i++) {\r\n      if (ownerAddresses[i] == addr) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \u30aa\u30fc\u30ca\u30fc\u6570\u3092\u8fd4\u3059\r\n   *\r\n   * @return \u30aa\u30fc\u30ca\u30fc\u6570\r\n   */\r\n  function numOwnerAddress() public view auth returns (uint) {\r\n    return ownerAddresses.length;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for coinBalances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306edJPY\u6b8b\u9ad8\u3092\u8fd4\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return dJPY\u6b8b\u9ad8\r\n   */\r\n  function coinBalance(address addr) public view auth returns (uint) {\r\n    return coinBalances[addr];\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306edJPY\u306e\u6b8b\u9ad8\u3092\u5897\u3084\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u5dee\u5206\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function addCoinBalance(address addr, uint amount) public auth returns (bool) {\r\n    coinBalances[addr] = add(coinBalances[addr], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306edJPY\u306e\u6b8b\u9ad8\u3092\u6e1b\u3089\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u5dee\u5206\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function subCoinBalance(address addr, uint amount) public auth returns (bool) {\r\n    coinBalances[addr] = sub(coinBalances[addr], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for tokenBalances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306eSHINJI\u30c8\u30fc\u30af\u30f3\u306e\u6b8b\u9ad8\u3092\u8fd4\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return SHINJI\u30c8\u30fc\u30af\u30f3\u6b8b\u9ad8\r\n   */\r\n  function tokenBalance(address addr) public view auth returns (uint) {\r\n    return tokenBalances[addr];\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306eSHINJI\u30c8\u30fc\u30af\u30f3\u306e\u6b8b\u9ad8\u3092\u5897\u3084\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u5dee\u5206\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function addTokenBalance(address addr, uint amount) public auth returns (bool) {\r\n    tokenBalances[addr] = add(tokenBalances[addr], amount);\r\n\r\n    if (tokenBalances[addr] > 0 && !isOwnerAddress(addr)) {\r\n      addOwnerAddress(addr);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306eSHINJI\u30c8\u30fc\u30af\u30f3\u306e\u6b8b\u9ad8\u3092\u6e1b\u3089\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u5dee\u5206\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function subTokenBalance(address addr, uint amount) public auth returns (bool) {\r\n    tokenBalances[addr] = sub(tokenBalances[addr], amount);\r\n\r\n    if (tokenBalances[addr] <= 0) {\r\n      removeOwnerAddress(addr);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for coinAllowances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u9001\u91d1\u8a31\u53ef\u91d1\u984d\u3092\u8fd4\u3059\r\n   *\r\n   * @param owner_ \u9001\u91d1\u8005\r\n   * @param spender \u9001\u91d1\u4ee3\u884c\u8005\r\n   *\r\n   * @return \u9001\u91d1\u8a31\u53ef\u91d1\u984d\r\n   */\r\n  function coinAllowance(address owner_, address spender) public view auth returns (uint) {\r\n    return coinAllowances[owner_][spender];\r\n  }\r\n\r\n  /**\r\n   * \u9001\u91d1\u8a31\u53ef\u91d1\u984d\u3092\u6307\u5b9a\u3057\u305f\u91d1\u984d\u3060\u3051\u5897\u3084\u3059\r\n   *\r\n   * @param owner_ \u9001\u91d1\u8005\r\n   * @param spender \u9001\u91d1\u4ee3\u884c\u8005\r\n   * @param amount \u91d1\u984d\r\n   *\r\n   * @return \u66f4\u65b0\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function addCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = add(coinAllowances[owner_][spender], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u9001\u91d1\u8a31\u53ef\u91d1\u984d\u3092\u6307\u5b9a\u3057\u305f\u91d1\u984d\u3060\u3051\u6e1b\u3089\u3059\r\n   *\r\n   * @param owner_ \u9001\u91d1\u8005\r\n   * @param spender \u9001\u91d1\u4ee3\u884c\u8005\r\n   * @param amount \u91d1\u984d\r\n   *\r\n   * @return \u66f4\u65b0\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function subCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = sub(coinAllowances[owner_][spender], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u9001\u91d1\u8a31\u53ef\u91d1\u984d\u3092\u6307\u5b9a\u3057\u305f\u5024\u306b\u66f4\u65b0\u3059\u308b\r\n   *\r\n   * @param owner_ \u9001\u91d1\u8005\r\n   * @param spender \u9001\u91d1\u4ee3\u884c\u8005\r\n   * @param amount \u9001\u91d1\u8a31\u53ef\u91d1\u984d\r\n   *\r\n   * @return \u6307\u5b9a\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function setCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = amount;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6a29\u9650\u30c1\u30a7\u30c3\u30af\u7528\u95a2\u6570\u306eoverride\r\n   *\r\n   * @param src \u5b9f\u884c\u8005\u30a2\u30c9\u30ec\u30b9\r\n   * @param sig \u5b9f\u884c\u95a2\u6570\u306e\u8b58\u5225\u5b50\r\n   *\r\n   * @return \u5b9f\u884c\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u308c\u3070true\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070false\r\n   */\r\n  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n    sig; // #HACK\r\n\r\n    return  src == address(this) ||\r\n            src == owner ||\r\n            src == tokenAddress ||\r\n            src == authorityAddress ||\r\n            src == multiSigAddress;\r\n  }\r\n}\r\n\r\n// import './IkuraTokenEvent.sol';\r\n/**\r\n * Token\u3067\u306e\u51e6\u7406\u306b\u95a2\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u5b9a\u7fa9\r\n *\r\n * - ERC20\u306b\u6e96\u62e0\u3057\u305f\u30a4\u30d9\u30f3\u30c8\uff08Transfer / Approval\uff09\r\n * - IkuraToken\u306e\u72ec\u81ea\u30a4\u30d9\u30f3\u30c8\uff08TransferToken / TransferFee\uff09\r\n */\r\ncontract IkuraTokenEvent {\r\n  /** \u30aa\u30fc\u30ca\u30fc\u304cdJPY\u3092\u92f3\u9020\u3057\u305f\u969b\u306b\u767a\u706b\u3059\u308b\u30a4\u30d9\u30f3\u30c8 */\r\n  event IkuraMint(address indexed owner, uint);\r\n\r\n  /** \u30aa\u30fc\u30ca\u30fc\u304cdJPY\u3092\u6d88\u5374\u3057\u305f\u969b\u306b\u767a\u706b\u3059\u308b\u30a4\u30d9\u30f3\u30c8 */\r\n  event IkuraBurn(address indexed owner, uint);\r\n\r\n  /** \u30c8\u30fc\u30af\u30f3\u306e\u79fb\u52d5\u6642\u306b\u767a\u706b\u3059\u308b\u30a4\u30d9\u30f3\u30c8 */\r\n  event IkuraTransferToken(address indexed from, address indexed to, uint value);\r\n\r\n  /** \u624b\u6570\u6599\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306b\u767a\u706b\u3059\u308b\u30a4\u30d9\u30f3\u30c8 */\r\n  event IkuraTransferFee(address indexed from, address indexed to, address indexed owner, uint value);\r\n\r\n  /**\r\n   * \u30c6\u30b9\u30c8\u6642\u306b\u3053\u306e\u30a4\u30d9\u30f3\u30c8\u3082\u6d41\u308c\u3066\u304f\u308b\u306f\u305a\u306a\u306e\u3067\u8ffd\u52a0\u3067\u5b9a\u7fa9\r\n   * controller\u3067\u3082\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u706b\u3055\u305b\u3066\u3044\u308b\u304c\u3001\u3086\u304f\u3086\u304f\u306f\u3053\u3053\u3067IkuraToken\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u304b\u8ffd\u52a0\u306e\u60c5\u5831\u3092\u6295\u3052\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\u306e\u3067\u6b8b\u7559\u3002\r\n   */\r\n  event IkuraTransfer(address indexed from, address indexed to, uint value);\r\n\r\n  /** \u9001\u91d1\u8a31\u53ef\u30a4\u30d9\u30f3\u30c8 */\r\n  event IkuraApproval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// import './IkuraAssociation.sol';\r\n/**\r\n * \u7d4c\u904e\u6642\u9593\u3068SHINJI Token\u306e\u6240\u6709\u6bd4\u7387\u306b\u3088\u3063\u3066\u7279\u5b9a\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u627f\u8a8d\u3092\u884c\u3046\u30af\u30e9\u30b9\r\n */\r\ncontract IkuraAssociation is DSMath, DSAuth {\r\n  //\r\n  // public\r\n  //\r\n\r\n  // \u63d0\u6848\u304c\u627f\u8a8d\u3055\u308c\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u8cdb\u6210\u7968\u306e\u5272\u5408\r\n  uint public confirmTotalTokenThreshold = 50;\r\n\r\n  //\r\n  // private\r\n  //\r\n\r\n  // \u30c7\u30fc\u30bf\u306e\u6c38\u7d9a\u5316\u30b9\u30c8\u30ec\u30fc\u30b8\r\n  IkuraStorage _storage;\r\n  IkuraToken _token;\r\n\r\n  // \u63d0\u6848\u4e00\u89a7\r\n  Proposal[] mintProposals;\r\n  Proposal[] burnProposals;\r\n\r\n  mapping (bytes32 => Proposal[]) proposals;\r\n\r\n  struct Proposal {\r\n    address proposer;                     // \u63d0\u6848\u8005\r\n    bytes32 digest;                       // \u30c1\u30a7\u30c3\u30af\u30b5\u30e0\r\n    bool executed;                        // \u5b9f\u884c\u306e\u6709\u7121\r\n    uint createdAt;                       // \u63d0\u6848\u4f5c\u6210\u65e5\u6642\r\n    uint expireAt;                        // \u63d0\u6848\u306e\u7de0\u3081\u5207\u308a\r\n    address[] confirmers;                 // \u627f\u8a8d\u8005\r\n    uint amount;                          // \u92f3\u9020\u91cf\r\n  }\r\n\r\n  //\r\n  // Events\r\n  //\r\n\r\n  event MintProposalAdded(uint proposalId, address proposer, uint amount);\r\n  event MintConfirmed(uint proposalId, address confirmer, uint amount);\r\n  event MintExecuted(uint proposalId, address proposer, uint amount);\r\n\r\n  event BurnProposalAdded(uint proposalId, address proposer, uint amount);\r\n  event BurnConfirmed(uint proposalId, address confirmer, uint amount);\r\n  event BurnExecuted(uint proposalId, address proposer, uint amount);\r\n\r\n  constructor() public {\r\n    proposals[keccak256('mint')] = mintProposals;\r\n    proposals[keccak256('burn')] = burnProposals;\r\n\r\n    // @NOTE \u30ea\u30ea\u30fc\u30b9\u6642\u306bcontract\u306edeploy -> watch contract -> setOwner\u306e\u6d41\u308c\u3092\r\n    //\u7701\u7565\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u3053\u3067\u76f4\u63a5controller\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3068\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3067\u304d\u307e\u3059\r\n    // \u52ff\u8ad6\u30c6\u30b9\u30c8\u306f\u901a\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u304c\u901a\u3063\u305f\u3089\u8a66\u3057\u3066\u306d\r\n    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\r\n    owner = controllerAddress;\r\n    LogSetOwner(controllerAddress);*/\r\n  }\r\n\r\n  /**\r\n   * \u6c38\u7d9a\u5316\u30b9\u30c8\u30ec\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b\r\n   *\r\n   * @param newStorage \u6c38\u7d9a\u5316\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff08\u30a2\u30c9\u30ec\u30b9\uff09\r\n   */\r\n  function changeStorage(IkuraStorage newStorage) public auth returns (bool) {\r\n    _storage = newStorage;\r\n    return true;\r\n  }\r\n\r\n  function changeToken(IkuraToken token_) public auth returns (bool) {\r\n    _token = token_;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u63d0\u6848\u3092\u4f5c\u6210\u3059\u308b\r\n   *\r\n   * @param proposer \u63d0\u6848\u8005\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u92f3\u9020\u91cf\r\n   */\r\n  function newProposal(bytes32 type_, address proposer, uint amount, bytes transationBytecode) public returns (uint) {\r\n    uint proposalId = proposals[type_].length++;\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n    proposal.proposer = proposer;\r\n    proposal.amount = amount;\r\n    proposal.digest = keccak256(proposer, amount, transationBytecode);\r\n    proposal.executed = false;\r\n    proposal.createdAt = now;\r\n    proposal.expireAt = proposal.createdAt + 86400;\r\n\r\n    // \u63d0\u6848\u306e\u7a2e\u985e\u6bce\u306b\u5b9f\u884c\u3059\u3079\u304d\u5185\u5bb9\u3092\u5b9f\u884c\u3059\u308b\r\n    // @NOTE literal_string\u3068bytes\u306f\u5358\u7d14\u306b\u6bd4\u8f03\u3067\u304d\u306a\u3044\u306e\u3067keccak256\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3067\u6bd4\u8f03\u3057\u3066\u3044\u308b\r\n    if (type_ == keccak256('mint')) emit MintProposalAdded(proposalId, proposer, amount);\r\n    if (type_ == keccak256('burn')) emit BurnProposalAdded(proposalId, proposer, amount);\r\n\r\n    // \u672c\u4eba\u306f\u5f53\u7136\u627f\u8a8d\r\n    confirmProposal(type_, proposer, proposalId);\r\n\r\n    return proposalId;\r\n  }\r\n\r\n  /**\r\n   * \u30c8\u30fc\u30af\u30f3\u6240\u6709\u8005\u304c\u63d0\u6848\u306b\u5bfe\u3057\u3066\u8cdb\u6210\u3059\u308b\r\n   *\r\n   * @param type_ \u63d0\u6848\u306e\u7a2e\u985e\r\n   * @param confirmer \u627f\u8a8d\u8005\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param proposalId \u63d0\u6848ID\r\n   */\r\n  function confirmProposal(bytes32 type_, address confirmer, uint proposalId) public {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n\r\n    // \u65e2\u306b\u627f\u8a8d\u6e08\u307f\u306e\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\r\n    require(!hasConfirmed(type_, confirmer, proposalId));\r\n\r\n    // \u627f\u8a8d\u884c\u70ba\u3092\u884c\u3063\u305f\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\r\n    proposal.confirmers.push(confirmer);\r\n\r\n    // \u63d0\u6848\u306e\u7a2e\u985e\u6bce\u306b\u5b9f\u884c\u3059\u3079\u304d\u5185\u5bb9\u3092\u5b9f\u884c\u3059\u308b\r\n    // @NOTE literal_string\u3068bytes\u306f\u5358\u7d14\u306b\u6bd4\u8f03\u3067\u304d\u306a\u3044\u306e\u3067keccak256\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3067\u6bd4\u8f03\u3057\u3066\u3044\u308b\r\n    if (type_ == keccak256('mint')) emit MintConfirmed(proposalId, confirmer, proposal.amount);\r\n    if (type_ == keccak256('burn')) emit BurnConfirmed(proposalId, confirmer, proposal.amount);\r\n\r\n    if (isProposalExecutable(type_, proposalId, proposal.proposer, '')) {\r\n      proposal.executed = true;\r\n\r\n      // \u63d0\u6848\u306e\u7a2e\u985e\u6bce\u306b\u5b9f\u884c\u3059\u3079\u304d\u5185\u5bb9\u3092\u5b9f\u884c\u3059\u308b\r\n      // @NOTE literal_string\u3068bytes\u306f\u5358\u7d14\u306b\u6bd4\u8f03\u3067\u304d\u306a\u3044\u306e\u3067keccak256\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3067\u6bd4\u8f03\u3057\u3066\u3044\u308b\r\n      if (type_ == keccak256('mint')) executeMintProposal(proposalId);\r\n      if (type_ == keccak256('burn')) executeBurnProposal(proposalId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u65e2\u306b\u627f\u8a8d\u6e08\u307f\u306e\u63d0\u6848\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059\r\n   *\r\n   * @param type_ \u63d0\u6848\u306e\u7a2e\u985e\r\n   * @param addr \u627f\u8a8d\u8005\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param proposalId \u63d0\u6848ID\r\n   *\r\n   * @return \u627f\u8a8d\u6e08\u307f\u3067\u3042\u308c\u3070true\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070false\r\n   */\r\n  function hasConfirmed(bytes32 type_, address addr, uint proposalId) internal view returns (bool) {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n    uint length = proposal.confirmers.length;\r\n\r\n    for (uint i = 0; i < length; i++) {\r\n      if (proposal.confirmers[i] == addr) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u63d0\u6848\u3092\u627f\u8a8d\u3057\u305f\u30c8\u30fc\u30af\u30f3\u306e\u7dcf\u91cf\u3092\u8fd4\u3059\r\n   *\r\n   * @param type_ \u63d0\u6848\u306e\u7a2e\u985e\r\n   * @param proposalId \u63d0\u6848ID\r\n   *\r\n   * @return \u627f\u8a8d\u306b\u6295\u7968\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u6570\r\n   */\r\n  function confirmedTotalToken(bytes32 type_, uint proposalId) internal view returns (uint) {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n    uint length = proposal.confirmers.length;\r\n    uint total = 0;\r\n\r\n    for (uint i = 0; i < length; i++) {\r\n      total = add(total, _storage.tokenBalance(proposal.confirmers[i]));\r\n    }\r\n\r\n    return total;\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u63d0\u6848\u306e\u7de0\u3081\u5207\u308a\u3092\u8fd4\u3059\r\n   *\r\n   * @param type_ \u63d0\u6848\u306e\u7a2e\u985e\r\n   * @param proposalId \u63d0\u6848ID\r\n   *\r\n   * @return \u63d0\u6848\u306e\u7de0\u3081\u5207\u308a\r\n   */\r\n  function proposalExpireAt(bytes32 type_, uint proposalId) public view returns (uint) {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n    return proposal.expireAt;\r\n  }\r\n\r\n  /**\r\n   * \u63d0\u6848\u304c\u5b9f\u884c\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u3092\u8fd4\u3059\r\n   *\r\n   * \u3010\u627f\u8a8d\u6761\u4ef6\u3011\r\n   * - \u307e\u3060\u5b9f\u884c\u3057\u3066\u3044\u306a\u3044\r\n   * - \u63d0\u6848\u306e\u6709\u52b9\u671f\u9650\u5185\u3067\u3042\u308b\r\n   * - \u6307\u5b9a\u3057\u305f\u5272\u5408\u4ee5\u4e0a\u306e\u8cdb\u6210\u30c8\u30fc\u30af\u30f3\u3092\u5f97\u3066\u3044\u308b\r\n   *\r\n   * @param proposalId \u63d0\u6848ID\r\n   *\r\n   * @return \u5b9f\u884c\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u5834\u5408\u306ftrue\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306ffalse\r\n   */\r\n  function isProposalExecutable(bytes32 type_, uint proposalId, address proposer, bytes transactionBytecode) internal view returns (bool) {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n\r\n    // \u30aa\u30fc\u30ca\u30fc\u304ccontroller\u3092\u767b\u9332\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u3057\u304b\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\r\n    if (_storage.numOwnerAddress() < 2) {\r\n      return true;\r\n    }\r\n\r\n    return  proposal.digest == keccak256(proposer, proposal.amount, transactionBytecode) &&\r\n            isProposalNotExpired(type_, proposalId) &&\r\n            mul(100, confirmedTotalToken(type_, proposalId)) / _storage.totalSupply() > confirmTotalTokenThreshold;\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u7a2e\u985e\u306e\u63d0\u6848\u6570\u3092\u53d6\u5f97\u3059\u308b\r\n   *\r\n   * @param type_ \u63d0\u6848\u306e\u7a2e\u985e\uff08'mint' | 'burn' | 'transferMinimumFee' | 'transferFeeRate'\uff09\r\n   *\r\n   * @return \u63d0\u6848\u6570\uff08\u627f\u8a8d\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3082\u542b\u3080\uff09\r\n   */\r\n  function numberOfProposals(bytes32 type_) public constant returns (uint) {\r\n    return proposals[type_].length;\r\n  }\r\n\r\n  /**\r\n   * \u672a\u627f\u8a8d\u3067\u6709\u52b9\u671f\u9650\u306e\u5207\u308c\u3066\u3044\u306a\u3044\u63d0\u6848\u306e\u6570\u3092\u8fd4\u3059\r\n   *\r\n   * @param type_ \u63d0\u6848\u306e\u7a2e\u985e\uff08'mint' | 'burn' | 'transferMinimumFee' | 'transferFeeRate'\uff09\r\n   *\r\n   * @return \u63d0\u6848\u6570\r\n   */\r\n  function numberOfActiveProposals(bytes32 type_) public view returns (uint) {\r\n    uint numActiveProposal = 0;\r\n\r\n    for(uint i = 0; i < proposals[type_].length; i++) {\r\n      if (isProposalNotExpired(type_, i)) {\r\n        numActiveProposal++;\r\n      }\r\n    }\r\n\r\n    return numActiveProposal;\r\n  }\r\n\r\n  /**\r\n   * \u63d0\u6848\u306e\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\r\n   *\r\n   * - \u5b9f\u884c\u3055\u308c\u3066\u3044\u306a\u3044\r\n   * - \u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u3066\u3044\u306a\u3044\r\n   *\r\n   * \u5834\u5408\u306e\u307ftrue\u3092\u8fd4\u3059\r\n   */\r\n  function isProposalNotExpired(bytes32 type_, uint proposalId) internal view returns (bool) {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n\r\n    return  !proposal.executed &&\r\n            now < proposal.expireAt;\r\n  }\r\n\r\n  /**\r\n   * dJPY\u3092\u92f3\u9020\u3059\u308b\r\n   *\r\n   * - \u92f3\u9020\u3059\u308b\u91cf\u304c0\u3088\u308a\u5927\u304d\u3044\r\n   *\r\n   * \u5834\u5408\u306f\u6210\u529f\u3059\u308b\r\n   *\r\n   * @param proposalId \u63d0\u6848ID\r\n   */\r\n  function executeMintProposal(uint proposalId) internal returns (bool) {\r\n    Proposal storage proposal = proposals[keccak256('mint')][proposalId];\r\n\r\n    // \u3053\u3053\u3067\u3082\u5ff5\u306e\u305f\u3081\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u308b\r\n    require(proposal.amount > 0);\r\n\r\n    emit MintExecuted(proposalId, proposal.proposer, proposal.amount);\r\n\r\n    // \u7dcf\u4f9b\u7d66\u91cf / \u5b9f\u884c\u8005\u306edJPY / \u5b9f\u884c\u8005\u306eSHINJI token\u3092\u5897\u3084\u3059\r\n    _storage.addTotalSupply(proposal.amount);\r\n    _storage.addCoinBalance(proposal.proposer, proposal.amount);\r\n    _storage.addTokenBalance(proposal.proposer, proposal.amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * dJPY\u3092\u6d88\u5374\u3059\u308b\r\n   *\r\n   * - \u6d88\u5374\u3059\u308b\u91cf\u304c0\u3088\u308a\u5927\u304d\u3044\r\n   * - \u63d0\u6848\u8005\u306e\u6240\u6709\u3059\u308bdJPY\u306e\u6b8b\u9ad8\u304camount\u4ee5\u4e0a\r\n   * - \u63d0\u6848\u8005\u306e\u6240\u6709\u3059\u308bSHINJI\u304camount\u3088\u308a\u3082\u5927\u304d\u3044\r\n   *\r\n   * \u5834\u5408\u306f\u6210\u529f\u3059\u308b\r\n   *\r\n   * @param proposalId \u63d0\u6848ID\r\n   */\r\n  function executeBurnProposal(uint proposalId) internal returns (bool) {\r\n    Proposal storage proposal = proposals[keccak256('burn')][proposalId];\r\n\r\n    // \u3053\u3053\u3067\u3082\u5ff5\u306e\u305f\u3081\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u308b\r\n    require(proposal.amount > 0);\r\n    require(_storage.coinBalance(proposal.proposer) >= proposal.amount);\r\n    require(_storage.tokenBalance(proposal.proposer) >= proposal.amount);\r\n\r\n    emit BurnExecuted(proposalId, proposal.proposer, proposal.amount);\r\n\r\n    // \u7dcf\u4f9b\u7d66\u91cf / \u5b9f\u884c\u8005\u306edJPY / \u5b9f\u884c\u8005\u306eSHINJI token\u3092\u6e1b\u3089\u3059\r\n    _storage.subTotalSupply(proposal.amount);\r\n    _storage.subCoinBalance(proposal.proposer, proposal.amount);\r\n    _storage.subTokenBalance(proposal.proposer, proposal.amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n    sig; // #HACK\r\n\r\n    return  src == address(this) ||\r\n            src == owner ||\r\n            src == address(_token);\r\n  }\r\n}\r\n\r\n// import './lib/ProposalLibrary.sol';\r\n/**\r\n *\r\n * \u627f\u8a8d\u30d7\u30ed\u30bb\u30b9\u306e\u5b9f\u88c5\u30e9\u30a4\u30d6\u30e9\u30ea\r\n * IkuraToken\u306b\u5b9f\u88c5\u3059\u308b\u3068\u30b5\u30a4\u30ba\u8d85\u904e\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u5207\u308a\u51fa\u3057\u3066\u3044\u308b\r\n *\r\n * \u4eca\u306e\u3068\u3053\u308d\u30ae\u30ea\u30ae\u30ea\u304a\u3055\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u4f7f\u3063\u3066\u306f\u3044\u306a\u3044\r\n */\r\nlibrary ProposalLibrary {\r\n  //\r\n  // structs\r\n  //\r\n\r\n  // token\u306estorage/association\u3092\u53c2\u7167\u3059\u308b\u305f\u3081\u306e\u69cb\u9020\u4f53\r\n  struct Entity {\r\n    IkuraStorage _storage;\r\n    IkuraAssociation _association;\r\n  }\r\n\r\n  /**\r\n   * \u6c38\u7d9a\u5316\u30b9\u30c8\u30ec\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b\r\n   *\r\n   * @param self \u5b9f\u884cEntity\r\n   * @param storage_ \u6c38\u7d9a\u5316\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff08\u30a2\u30c9\u30ec\u30b9\uff09\r\n   */\r\n  function changeStorage(Entity storage self, address storage_) internal {\r\n    self._storage = IkuraStorage(storage_);\r\n  }\r\n\r\n  /**\r\n   * \u95a2\u9023\u3065\u3051\u308b\u627f\u8a8d\u30d7\u30ed\u30bb\u30b9\u3092\u5909\u66f4\u3059\u308b\r\n   *\r\n   * @param self \u5b9f\u884cEntity\r\n   * @param association_ \u65b0\u3057\u3044\u627f\u8a8d\u30d7\u30ed\u30bb\u30b9\r\n   */\r\n  function changeAssociation(Entity storage self, address association_) internal {\r\n    self._association = IkuraAssociation(association_);\r\n  }\r\n\r\n  /**\r\n   * dJPY\u3092\u92f3\u9020\u3059\u308b\r\n   *\r\n   * - \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u30e6\u30fc\u30b6\u304c\u30aa\u30fc\u30ca\u30fc\u3067\u3042\u308b\r\n   * - \u92f3\u9020\u3059\u308b\u91cf\u304c0\u3088\u308a\u5927\u304d\u3044\r\n   *\r\n   * \u5834\u5408\u306f\u6210\u529f\u3059\u308b\r\n   *\r\n   * @param self \u5b9f\u884cEntity\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u92f3\u9020\u3059\u308b\u91d1\u984d\r\n   */\r\n  function mint(Entity storage self, address sender, uint amount) public returns (bool) {\r\n    require(amount > 0);\r\n\r\n    self._association.newProposal(keccak256('mint'), sender, amount, '');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * dJPY\u3092\u6d88\u5374\u3059\u308b\r\n   *\r\n   * - \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u30e6\u30fc\u30b6\u304c\u30aa\u30fc\u30ca\u30fc\u3067\u3042\u308b\r\n   * - \u92f3\u9020\u3059\u308b\u91cf\u304c0\u3088\u308a\u5927\u304d\u3044\r\n   * - dJPY\u306e\u6b8b\u9ad8\u304camount\u3088\u308a\u3082\u5927\u304d\u3044\r\n   * - SHINJI\u3092amount\u3088\u308a\u3082\u5927\u304d\u3044\r\n   *\r\n   * \u5834\u5408\u306f\u6210\u529f\u3059\u308b\r\n   *\r\n   * @param self \u5b9f\u884cEntity\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u6d88\u5374\u3059\u308b\u91d1\u984d\r\n   */\r\n  function burn(Entity storage self, address sender, uint amount) public returns (bool) {\r\n    require(amount > 0);\r\n    require(self._storage.coinBalance(sender) >= amount);\r\n    require(self._storage.tokenBalance(sender) >= amount);\r\n\r\n    self._association.newProposal(keccak256('burn'), sender, amount, '');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u63d0\u6848\u3092\u627f\u8a8d\u3059\u308b\u3002\r\n   * #TODO proposalId\u306f\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u5225\u306e\u3082\u306e\u304b\u3089proposal\u3092\u7279\u5b9a\u3057\u306a\u3044\u3068\u3044\u304b\u3093\u3088\r\n   *\r\n   * @param self \u5b9f\u884cEntity\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param type_ \u627f\u8a8d\u3059\u308b\u63d0\u6848\u306e\u7a2e\u985e\r\n   * @param proposalId \u63d0\u6848ID\r\n   */\r\n  function confirmProposal(Entity storage self, address sender, bytes32 type_, uint proposalId) public {\r\n    self._association.confirmProposal(type_, sender, proposalId);\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u7a2e\u985e\u306e\u63d0\u6848\u6570\u3092\u53d6\u5f97\u3059\u308b\r\n   *\r\n   * @param type_ \u63d0\u6848\u306e\u7a2e\u985e\uff08'mint' | 'burn' | 'transferMinimumFee' | 'transferFeeRate'\uff09\r\n   *\r\n   * @return \u63d0\u6848\u6570\uff08\u627f\u8a8d\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3082\u542b\u3080\uff09\r\n   */\r\n  function numberOfProposals(Entity storage self, bytes32 type_) public view returns (uint) {\r\n    return self._association.numberOfProposals(type_);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * \u30c8\u30fc\u30af\u30f3\u30ed\u30b8\u30c3\u30af\r\n *\r\n */\r\ncontract IkuraToken is IkuraTokenEvent, DSMath, DSAuth {\r\n  //\r\n  // constants\r\n  //\r\n\r\n  // \u624b\u6570\u6599\u7387\r\n  // 0.01pips = 1\r\n  // \u4f8b). \u624b\u6570\u6599\u3092 0.05% \u3068\u3059\u308b\u5834\u5408\u306f 500\r\n  uint _transferFeeRate = 0;\r\n\r\n  // \u6700\u4f4e\u624b\u6570\u6599\u984d\r\n  // 1 = 1dJPY\r\n  // amount * \u624b\u6570\u6599\u7387\u3067\u7b97\u51fa\u3057\u305f\u91d1\u984d\u304c\u3053\u3053\u3067\u8a2d\u5b9a\u3057\u305f\u6700\u4f4e\u624b\u6570\u6599\u3092\u4e0b\u56de\u308b\u5834\u5408\u306f\u3001\u6700\u4f4e\u624b\u6570\u6599\u984d\u3092\u624b\u6570\u6599\u3068\u3059\u308b\r\n  uint8 _transferMinimumFee = 0;\r\n\r\n  // \u30ed\u30b8\u30c3\u30af\u30d0\u30fc\u30b8\u30e7\u30f3\r\n  uint _logicVersion = 2;\r\n\r\n  //\r\n  // libraries\r\n  //\r\n\r\n  /*using ProposalLibrary for ProposalLibrary.Entity;\r\n  ProposalLibrary.Entity proposalEntity;*/\r\n\r\n  //\r\n  // private\r\n  //\r\n\r\n  // \u30c7\u30fc\u30bf\u306e\u6c38\u7d9a\u5316\u30b9\u30c8\u30ec\u30fc\u30b8\r\n  IkuraStorage _storage;\r\n  IkuraAssociation _association;\r\n\r\n  constructor() DSAuth() public {\r\n    // @NOTE \u30ea\u30ea\u30fc\u30b9\u6642\u306bcontract\u306edeploy -> watch contract -> setOwner\u306e\u6d41\u308c\u3092\r\n    //\u7701\u7565\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u3053\u3067\u76f4\u63a5controller\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3068\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3067\u304d\u307e\u3059\r\n    // \u52ff\u8ad6\u30c6\u30b9\u30c8\u306f\u901a\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u304c\u901a\u3063\u305f\u3089\u8a66\u3057\u3066\u306d\r\n    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\r\n    owner = controllerAddress;\r\n    LogSetOwner(controllerAddress);*/\r\n  }\r\n\r\n  // ----------------------------------------------------------------------------------------------------\r\n  // \u4ee5\u964d\u306fERC20\u306b\u6e96\u62e0\u3057\u305f\u95a2\u6570\r\n  // ----------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * ERC20 Token Standard\u306b\u6e96\u62e0\u3057\u305f\u95a2\u6570\r\n   *\r\n   * dJPY\u306e\u767a\u884c\u9ad8\u3092\u8fd4\u3059\r\n   *\r\n   * @return \u767a\u884c\u9ad8\r\n   */\r\n  function totalSupply(address sender) public view returns (uint) {\r\n    sender; // #HACK\r\n\r\n    return _storage.totalSupply();\r\n  }\r\n\r\n  /**\r\n   * ERC20 Token Standard\u306b\u6e96\u62e0\u3057\u305f\u95a2\u6570\r\n   *\r\n   * \u7279\u5b9a\u306e\u30a2\u30c9\u30ec\u30b9\u306edJPY\u6b8b\u9ad8\u3092\u8fd4\u3059\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param addr \u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u6307\u5b9a\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u306edJPY\u6b8b\u9ad8\r\n   */\r\n  function balanceOf(address sender, address addr) public view returns (uint) {\r\n    sender; // #HACK\r\n\r\n    return _storage.coinBalance(addr);\r\n  }\r\n\r\n  /**\r\n   * ERC20 Token Standard\u306b\u6e96\u62e0\u3057\u305f\u95a2\u6570\r\n   *\r\n   * \u6307\u5b9a\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u3057\u3066dJPY\u3092\u9001\u91d1\u3059\u308b\r\n   * \u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u5fc5\u8981\u304c\u3042\u308b\r\n   *\r\n   * - \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\u8005\u306e\u6b8b\u9ad8 >= \u9001\u91d1\u984d\r\n   * - \u9001\u91d1\u984d > 0\r\n   * - \u9001\u91d1\u5148\u306e\u30a2\u30c9\u30ec\u30b9\u306e\u6b8b\u9ad8 + \u9001\u91d1\u984d > \u9001\u91d1\u5143\u306e\u30a2\u30c9\u30ec\u30b9\u306e\u6b8b\u9ad8\uff08overflow\u306e\u30c1\u30a7\u30c3\u30af\u3089\u3057\u3044\uff09\r\n   *\r\n   * @param sender \u9001\u91d1\u5143\u30a2\u30c9\u30ec\u30b9\r\n   * @param to \u9001\u91d1\u5bfe\u8c61\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u9001\u91d1\u984d\r\n   *\r\n   * @return \u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306ftrue\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306ffalse\r\n   */\r\n  function transfer(address sender, address to, uint amount) public auth returns (bool success) {\r\n    uint fee = transferFee(sender, sender, to, amount);\r\n    uint totalAmount = add(amount, fee);\r\n\r\n    require(_storage.coinBalance(sender) >= totalAmount);\r\n    require(amount > 0);\r\n\r\n    // \u5b9f\u884c\u8005\u306e\u53e3\u5ea7\u304b\u3089amount + fee\u306e\u91d1\u984d\u304c\u63a7\u9664\u3055\u308c\u308b\r\n    _storage.subCoinBalance(sender, totalAmount);\r\n\r\n    // to\u306e\u53e3\u5ea7\u306bamount\u304c\u632f\u308a\u8fbc\u307e\u308c\u308b\r\n    _storage.addCoinBalance(to, amount);\r\n\r\n    if (fee > 0) {\r\n      // \u624b\u6570\u6599\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30ca\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u9078\u5b9a\r\n      address owner = selectOwnerAddressForTransactionFee(sender);\r\n\r\n      // \u30aa\u30fc\u30ca\u30fc\u306e\u53e3\u5ea7\u306bfee\u304c\u632f\u308a\u8fbc\u307e\u308c\u308b\r\n      _storage.addCoinBalance(owner, fee);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ERC20 Token Standard\u306b\u6e96\u62e0\u3057\u305f\u95a2\u6570\r\n   *\r\n   * from\uff08\u9001\u4fe1\u5143\u306e\u30a2\u30c9\u30ec\u30b9\uff09\u304b\u3089to\uff08\u9001\u4fe1\u5148\u306e\u30a2\u30c9\u30ec\u30b9\uff09\u3078amount\u5206\u3060\u3051\u9001\u91d1\u3059\u308b\u3002\r\n   * \u4e3b\u306b\u53e3\u5ea7\u304b\u3089\u306e\u5f15\u304d\u51fa\u3057\u306b\u5229\u7528\u3055\u308c\u3001\u5951\u7d04\u306b\u3088\u3063\u3066\u30b5\u30d6\u901a\u8ca8\u306e\u9001\u91d1\u624b\u6570\u6599\u3092\u5fb4\u53ce\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\r\n   * \u3053\u306e\u64cd\u4f5c\u306ffrom\uff08\u9001\u4fe1\u5143\u306e\u30a2\u30c9\u30ec\u30b9\uff09\u304c\u4f55\u3089\u304b\u306e\u65b9\u6cd5\u3067\u610f\u56f3\u7684\u306b\u9001\u4fe1\u8005\u3092\u8a31\u53ef\u3059\u308b\u5834\u5408\u3092\u9664\u3044\u3066\u5931\u6557\u3059\u3079\u304d\u3002\r\n   * \u3053\u306e\u8a31\u53ef\u3059\u308b\u51e6\u7406\u306fapprove\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\r\n   *\r\n   * \u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u5834\u5408\u3060\u3051\u9001\u91d1\u3092\u8a8d\u3081\u308b\r\n   *\r\n   * - \u9001\u4fe1\u5143\u306e\u6b8b\u9ad8 >= \u91d1\u984d\r\n   * - \u9001\u91d1\u3059\u308b\u91d1\u984d > 0\r\n   * - \u9001\u4fe1\u8005\u306b\u5bfe\u3057\u3066\u9001\u4fe1\u5143\u304c\u8a31\u53ef\u3057\u3066\u3044\u308b\u91d1\u984d >= \u9001\u91d1\u3059\u308b\u91d1\u984d\r\n   * - \u9001\u4fe1\u5148\u306e\u6b8b\u9ad8 + \u91d1\u984d > \u9001\u4fe1\u5143\u306e\u6b8b\u9ad8\uff08overflow\u306e\u30c1\u30a7\u30c3\u30af\u3089\u3057\u3044\uff09\r\n   # - \u9001\u91d1\u51e6\u7406\u3092\u884c\u3046\u30e6\u30fc\u30b6\u30fc\u306e\u53e3\u5ea7\u6b8b\u9ad8 >= \u9001\u91d1\u51e6\u7406\u306e\u624b\u6570\u6599\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param from \u9001\u91d1\u5143\u30a2\u30c9\u30ec\u30b9\r\n   * @param to \u9001\u91d1\u5148\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u9001\u91d1\u984d\r\n   *\r\n   * @return \u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306ftrue\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306ffalse\r\n   */\r\n  function transferFrom(address sender, address from, address to, uint amount) public auth returns (bool success) {\r\n    uint fee = transferFee(sender, from, to, amount);\r\n\r\n    require(_storage.coinBalance(from) >= amount);\r\n    require(_storage.coinAllowance(from, sender) >= amount);\r\n    require(amount > 0);\r\n    require(add(_storage.coinBalance(to), amount) > _storage.coinBalance(to));\r\n\r\n    if (fee > 0) {\r\n      require(_storage.coinBalance(sender) >= fee);\r\n\r\n      // \u624b\u6570\u6599\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30ca\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u9078\u5b9a\r\n      address owner = selectOwnerAddressForTransactionFee(sender);\r\n\r\n      // \u624b\u6570\u6599\u306f\u3053\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3057\u305f\u30e6\u30fc\u30b6\u30fc\uff08\u4e3b\u306b\u53d6\u5f15\u6240\u3068\u304b\uff09\u304b\u3089\u5fb4\u53ce\u3059\u308b\r\n      _storage.subCoinBalance(sender, fee);\r\n\r\n      _storage.addCoinBalance(owner, fee);\r\n    }\r\n\r\n    // \u9001\u91d1\u5143\u304b\u3089\u9001\u91d1\u984d\u3092\u5f15\u304f\r\n    _storage.subCoinBalance(from, amount);\r\n\r\n    // \u9001\u91d1\u8a31\u53ef\u3057\u3066\u3044\u308b\u91d1\u984d\u3092\u6e1b\u3089\u3059\r\n    _storage.subCoinAllowance(from, sender, amount);\r\n\r\n    // \u9001\u91d1\u53e3\u5ea7\u306b\u9001\u91d1\u984d\u3092\u8db3\u3059\r\n    _storage.addCoinBalance(to, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ERC20 Token Standard\u306b\u6e96\u62e0\u3057\u305f\u95a2\u6570\r\n   *\r\n   * spender\uff08\u652f\u6255\u3044\u5143\u306e\u30a2\u30c9\u30ec\u30b9\uff09\u306bsender\uff08\u9001\u4fe1\u8005\uff09\u304camount\u5206\u3060\u3051\u652f\u6255\u3046\u306e\u3092\u8a31\u53ef\u3059\u308b\r\n   * \u3053\u306e\u95a2\u6570\u304c\u547c\u3070\u308c\u308b\u5ea6\u306b\u9001\u91d1\u53ef\u80fd\u306a\u91d1\u984d\u3092\u66f4\u65b0\u3059\u308b\u3002\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param spender \u9001\u91d1\u5143\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u9001\u91d1\u984d\r\n   *\r\n   * @return \u57fa\u672c\u7684\u306btrue\u3092\u8fd4\u3059\r\n   */\r\n  function approve(address sender, address spender, uint amount) public auth returns (bool success) {\r\n    _storage.setCoinAllowance(sender, spender, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ERC20 Token Standard\u306b\u6e96\u62e0\u3057\u305f\u95a2\u6570\r\n   *\r\n   * \u53d7\u53d6\u5074\u306b\u5bfe\u3057\u3066\u652f\u6255\u3044\u5074\u304c\u3069\u308c\u3060\u3051\u9001\u91d1\u53ef\u80fd\u304b\u3092\u8fd4\u3059\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param owner \u53d7\u3051\u53d6\u308a\u5074\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param spender \u652f\u6255\u3044\u5143\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u9001\u91d1\u6599\r\n   */\r\n  function allowance(address sender, address owner, address spender) public view returns (uint remaining) {\r\n    sender; // #HACK\r\n\r\n    return _storage.coinAllowance(owner, spender);\r\n  }\r\n\r\n  // ----------------------------------------------------------------------------------------------------\r\n  // \u4ee5\u964d\u306fERC20\u4ee5\u5916\u306e\u72ec\u81ea\u5b9f\u88c5\r\n  // ----------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * \u7279\u5b9a\u306e\u30a2\u30c9\u30ec\u30b9\u306eSHINJI\u6b8b\u9ad8\u3092\u8fd4\u3059\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param owner \u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u6307\u5b9a\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u306eSHINJI\u30c8\u30fc\u30af\u30f3\u91cf\r\n   */\r\n  function tokenBalanceOf(address sender, address owner) public view returns (uint balance) {\r\n    sender; // #HACK\r\n\r\n    return _storage.tokenBalance(owner);\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u3057\u3066SHINJI\u30c8\u30fc\u30af\u30f3\u3092\u9001\u91d1\u3059\u308b\r\n   *\r\n   * - \u9001\u4fe1\u5143\u306e\u6b8b\u30c8\u30fc\u30af\u30f3\u91cf >= \u30c8\u30fc\u30af\u30f3\u91cf\r\n   * - \u9001\u4fe1\u3059\u308b\u30c8\u30fc\u30af\u30f3\u91cf > 0\r\n   * - \u9001\u4fe1\u5148\u306e\u6b8b\u9ad8 + \u91d1\u984d > \u9001\u4fe1\u5143\u306e\u6b8b\u9ad8\uff08overflow\u306e\u30c1\u30a7\u30c3\u30af\uff09\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param to \u9001\u91d1\u5bfe\u8c61\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u9001\u91d1\u984d\r\n   *\r\n   * @return \u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306ftrue\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306ffalse\r\n   */\r\n  function transferToken(address sender, address to, uint amount) public auth returns (bool success) {\r\n    require(_storage.tokenBalance(sender) >= amount);\r\n    require(amount > 0);\r\n    require(add(_storage.tokenBalance(to), amount) > _storage.tokenBalance(to));\r\n\r\n    _storage.subTokenBalance(sender, amount);\r\n    _storage.addTokenBalance(to, amount);\r\n\r\n    emit IkuraTransferToken(sender, to, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u9001\u91d1\u5143\u3001\u9001\u91d1\u5148\u3001\u9001\u91d1\u91d1\u984d\u306b\u3088\u3063\u3066\u5bfe\u8c61\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u624b\u6570\u6599\u3092\u6c7a\u5b9a\u3059\u308b\r\n   * \u9001\u91d1\u91d1\u984d\u306b\u5bfe\u3057\u3066\u624b\u6570\u6599\u7387\u3092\u304b\u3051\u305f\u3082\u306e\u3092\u8a08\u7b97\u3057\u3001\u6700\u4f4e\u624b\u6570\u6599\u91d1\u984d\u3068\u306emax\u5024\u3092\u53d6\u308b\u3002\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param from \u9001\u91d1\u5143\r\n   * @param to \u9001\u91d1\u5148\r\n   * @param amount \u9001\u91d1\u91d1\u984d\r\n   *\r\n   * @return \u624b\u6570\u6599\u91d1\u984d\r\n   */\r\n  function transferFee(address sender, address from, address to, uint amount) public view returns (uint) {\r\n    sender; from; to; // #avoid warning\r\n    if (_transferFeeRate > 0) {\r\n      uint denominator = 1000000; // 0.01 pips \u3060\u304b\u3089 100 * 100 * 100 \u3067 100\u4e07\r\n      uint numerator = mul(amount, _transferFeeRate);\r\n\r\n      uint fee = numerator / denominator;\r\n      uint remainder = sub(numerator, mul(denominator, fee));\r\n\r\n      // \u4f59\u308a\u304c\u3042\u308b\u5834\u5408\u306ffee\u306b1\u3092\u8db3\u3059\r\n      if (remainder > 0) {\r\n        fee++;\r\n      }\r\n\r\n      if (fee < _transferMinimumFee) {\r\n        fee = _transferMinimumFee;\r\n      }\r\n\r\n      return fee;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u624b\u6570\u6599\u7387\u3092\u8fd4\u3059\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u624b\u6570\u6599\u7387\r\n   */\r\n  function transferFeeRate(address sender) public view returns (uint) {\r\n    sender; // #HACK\r\n\r\n    return _transferFeeRate;\r\n  }\r\n\r\n  /**\r\n   * \u6700\u4f4e\u624b\u6570\u6599\u984d\u3092\u8fd4\u3059\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u6700\u4f4e\u624b\u6570\u6599\u984d\r\n   */\r\n  function transferMinimumFee(address sender) public view returns (uint8) {\r\n    sender; // #HACK\r\n\r\n    return _transferMinimumFee;\r\n  }\r\n\r\n  /**\r\n   * \u624b\u6570\u6599\u3092\u632f\u308a\u8fbc\u3080\u53e3\u5ea7\u3092\u9078\u629e\u3059\u308b\r\n   * #TODO \u3068\u308a\u3042\u3048\u305a\u4e00\u500b\u76ee\u306e\u30aa\u30fc\u30ca\u30fc\u306b\u56fa\u5b9a\u3002\u5f8c\u3067\u9078\u5b9a\u30ed\u30b8\u30c3\u30af\u3092\u5909\u3048\u308b\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @return \u7279\u5b9a\u306e\u30aa\u30fc\u30ca\u30fc\u53e3\u5ea7\r\n   */\r\n  function selectOwnerAddressForTransactionFee(address sender) public view returns (address) {\r\n    sender; // #HACK\r\n\r\n    return _storage.primaryOwner();\r\n  }\r\n\r\n  /**\r\n   * dJPY\u3092\u92f3\u9020\u3059\u308b\r\n   *\r\n   * - \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u30e6\u30fc\u30b6\u304c\u30aa\u30fc\u30ca\u30fc\u3067\u3042\u308b\r\n   * - \u92f3\u9020\u3059\u308b\u91cf\u304c0\u3088\u308a\u5927\u304d\u3044\r\n   *\r\n   * \u5834\u5408\u306f\u6210\u529f\u3059\u308b\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u92f3\u9020\u3059\u308b\u91d1\u984d\r\n   */\r\n  function mint(address sender, uint amount) public auth returns (bool) {\r\n    require(amount > 0);\r\n\r\n    _association.newProposal(keccak256('mint'), sender, amount, '');\r\n\r\n    return true;\r\n    /*return proposalEntity.mint(sender, amount);*/\r\n  }\r\n\r\n  /**\r\n   * dJPY\u3092\u6d88\u5374\u3059\u308b\r\n   *\r\n   * - \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u30e6\u30fc\u30b6\u304c\u30aa\u30fc\u30ca\u30fc\u3067\u3042\u308b\r\n   * - \u92f3\u9020\u3059\u308b\u91cf\u304c0\u3088\u308a\u5927\u304d\u3044\r\n   * - dJPY\u306e\u6b8b\u9ad8\u304camount\u3088\u308a\u3082\u5927\u304d\u3044\r\n   * - SHINJI\u3092amount\u3088\u308a\u3082\u5927\u304d\u3044\r\n   *\r\n   * \u5834\u5408\u306f\u6210\u529f\u3059\u308b\r\n   *\r\n   * @param sender \u5b9f\u884c\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u6d88\u5374\u3059\u308b\u91d1\u984d\r\n   */\r\n  function burn(address sender, uint amount) public auth returns (bool) {\r\n    require(amount > 0);\r\n    require(_storage.coinBalance(sender) >= amount);\r\n    require(_storage.tokenBalance(sender) >= amount);\r\n\r\n    _association.newProposal(keccak256('burn'), sender, amount, '');\r\n\r\n    return true;\r\n    /*return proposalEntity.burn(sender, amount);*/\r\n  }\r\n\r\n  /**\r\n   * \u63d0\u6848\u3092\u627f\u8a8d\u3059\u308b\u3002\r\n   * #TODO proposalId\u306f\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u5225\u306e\u3082\u306e\u304b\u3089proposal\u3092\u7279\u5b9a\u3057\u306a\u3044\u3068\u3044\u304b\u3093\u3088\r\n   */\r\n  function confirmProposal(address sender, bytes32 type_, uint proposalId) public auth {\r\n    _association.confirmProposal(type_, sender, proposalId);\r\n    /*proposalEntity.confirmProposal(sender, type_, proposalId);*/\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u7a2e\u985e\u306e\u63d0\u6848\u6570\u3092\u53d6\u5f97\u3059\u308b\r\n   *\r\n   * @param type_ \u63d0\u6848\u306e\u7a2e\u985e\uff08'mint' | 'burn' | 'transferMinimumFee' | 'transferFeeRate'\uff09\r\n   *\r\n   * @return \u63d0\u6848\u6570\uff08\u627f\u8a8d\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3082\u542b\u3080\uff09\r\n   */\r\n  function numberOfProposals(bytes32 type_) public view returns (uint) {\r\n    return _association.numberOfProposals(type_);\r\n    /*return proposalEntity.numberOfProposals(type_);*/\r\n  }\r\n\r\n  /**\r\n   * \u95a2\u9023\u3065\u3051\u308b\u627f\u8a8d\u30d7\u30ed\u30bb\u30b9\u3092\u5909\u66f4\u3059\u308b\r\n   *\r\n   * @param association_ \u65b0\u3057\u3044\u627f\u8a8d\u30d7\u30ed\u30bb\u30b9\r\n   */\r\n  function changeAssociation(address association_) public auth returns (bool) {\r\n    _association = IkuraAssociation(association_);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6c38\u7d9a\u5316\u30b9\u30c8\u30ec\u30fc\u30b8\u3092\u8a2d\u5b9a\u3059\u308b\r\n   *\r\n   * @param storage_ \u6c38\u7d9a\u5316\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff08\u30a2\u30c9\u30ec\u30b9\uff09\r\n   */\r\n  function changeStorage(address storage_) public auth returns (bool) {\r\n    _storage = IkuraStorage(storage_);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u30ed\u30b8\u30c3\u30af\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8fd4\u3059\r\n   *\r\n   * @param sender \u5b9f\u884c\u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\r\n   */\r\n  function logicVersion(address sender) public view returns (uint) {\r\n    sender; // #HACK\r\n\r\n    return _logicVersion;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"transferMinimumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"selectOwnerAddressForTransactionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"transferFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"type_\",\"type\":\"bytes32\"}],\"name\":\"numberOfProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"logicVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"association_\",\"type\":\"address\"}],\"name\":\"changeAssociation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"storage_\",\"type\":\"address\"}],\"name\":\"changeStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"type_\",\"type\":\"bytes32\"},{\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"confirmProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IkuraMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IkuraBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IkuraTransferToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IkuraTransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IkuraTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IkuraApproval\",\"type\":\"event\"}]", "ContractName": "IkuraToken", "CompilerVersion": "v0.4.23+commit.124ca40d", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0d06b38004be41d8ccb0d767c8987a236e6fb76254abdfb62a7a3ff90527412a"}]}