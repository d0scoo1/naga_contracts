{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RightnerToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ERC20Interface.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n// import \\\"./Treasurer.sol\\\";\\n\\ncontract RightnerToken is ERC20Interface, Ownable, SafeMath {\\n    string private _symbol;\\n    string private _name;\\n    uint8 private _decimals;\\n    uint256 private _totalSupply;\\n    uint256 private _preSalePricePerUnit;\\n\\n    //increase whenever preBuy and decrease while ending preSale\\n    // uint256 private preBoughtUnits;\\n\\n    bool private _preSalePeriod;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    mapping(address => bool) private _whiteListedUsers;\\n    uint256 private _whiteListCount;\\n\\n    constructor(\\n        address owner_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 totalSupply_,\\n        uint8 decimals_,\\n        uint256 preSalePricePerUnit_\\n    ) {\\n        owner = owner_;\\n        _symbol = symbol_;\\n        _name = name_;\\n        _decimals = decimals_;\\n        _totalSupply = totalSupply_ * 10**_decimals;\\n        _balances[owner_] = _totalSupply;\\n        _preSalePeriod = true;\\n\\n        _preSalePricePerUnit = preSalePricePerUnit_;\\n\\n        emit Transfer(address(0), owner_, _totalSupply);\\n    }\\n\\n    function preSalePeriod() public view virtual returns (bool) {\\n        return _preSalePeriod;\\n    }\\n\\n    function preSalePricePerUnit() public view virtual returns (uint256) {\\n        return _preSalePricePerUnit;\\n    }\\n\\n    function updatePreSalePricePerUnit(uint256 price) public onlyOwner {\\n        _preSalePricePerUnit = price;\\n    }\\n\\n    function whiteListedUsers(address _addr) public view returns (bool) {\\n        return _whiteListedUsers[_addr];\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function balanceOf(address _account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[_account];\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function transfer(address to, uint256 amount)\\n        public\\n        override\\n        returns (bool success)\\n    {\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 tokens)\\n        public\\n        override\\n        returns (bool success)\\n    {\\n        _allowances[msg.sender][spender] = tokens;\\n        emit Approval(msg.sender, spender, tokens);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool success) {\\n        _allowances[from][msg.sender] = safeSub(\\n            _allowances[from][msg.sender],\\n            amount\\n        );\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal virtual {\\n        require(_from != address(0), \\\"cannot transfer from the zero address\\\");\\n        require(_to != address(0), \\\"cannot transfer to the zero address\\\");\\n        require(_balances[_from] >= _amount, \\\"Token not enough\\\");\\n\\n        _balances[_from] = safeSub(_balances[_from], _amount);\\n        _balances[_to] = safeAdd(_balances[_to], _amount);\\n\\n        emit Transfer(_from, _to, _amount);\\n    }\\n\\n    function addWhiteListUser(address _user) public onlyOwner preSaleOnly {\\n        _whiteListedUsers[_user] = true;\\n    }\\n\\n    function addWhiteListUsers(address[] memory _users)\\n        public\\n        onlyOwner\\n        preSaleOnly\\n    {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            _whiteListedUsers[_users[i]] = true;\\n        }\\n    }\\n\\n    function preBuy(uint256 tokens) public payable preSaleOnly {\\n        require(_whiteListedUsers[msg.sender], \\\"You're not whitelisted\\\");\\n        //check for price\\n        require(\\n            msg.value >= (tokens * _preSalePricePerUnit) / (10**_decimals),\\n            \\\"Not enough ether sent\\\"\\n        );\\n        _transfer(owner, msg.sender, tokens);\\n    }\\n\\n    function closePreSales() public onlyOwner preSaleOnly {\\n        _preSalePeriod = false;\\n\\n        //transfer collected ether to owner account\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    modifier preSaleOnly() {\\n        require(_preSalePeriod, \\\"PreSale Ended\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: The MIT Licence.\\npragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// Safe maths\\n// ----------------------------------------------------------------------------\\ncontract SafeMath {\\n    function safeAdd(uint256 a, uint256 b) public pure returns (uint256 c) {\\n        c = a + b;\\n        require(c >= a);\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) public pure returns (uint256 c) {\\n        require(b <= a);\\n        c = a - b;\\n    }\\n\\n    function safeMul(uint256 a, uint256 b) public pure returns (uint256 c) {\\n        c = a * b;\\n        require(a == 0 || c / a == b);\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b) public pure returns (uint256 c) {\\n        require(b > 0);\\n        c = a / b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: The MIT Licence.\\npragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// ERC Token Standard #20 Interface\\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n// ----------------------------------------------------------------------------\\nabstract contract ERC20Interface {\\n    function totalSupply() public view virtual returns (uint256);\\n\\n    function name() public virtual returns (string memory);\\n\\n    function decimals() public virtual returns (uint8);\\n\\n    function symbol() public virtual returns (string memory);\\n\\n    function balanceOf(address tokenOwner)\\n        public\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    function allowance(address tokenOwner, address spender)\\n        public\\n        view\\n        virtual\\n        returns (uint256 remaining);\\n\\n    function transfer(address to, uint256 tokens)\\n        public\\n        virtual\\n        returns (bool success);\\n\\n    function approve(address spender, uint256 tokens)\\n        public\\n        virtual\\n        returns (bool success);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokens\\n    ) public virtual returns (bool success);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\n    event Approval(\\n        address indexed tokenOwner,\\n        address indexed spender,\\n        uint256 tokens\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: The MIT Licence.\\npragma solidity ^0.8.0;\\n\\ncontract Ownable {\\n    address public owner;\\n    address public newOwner;\\n\\n    event OwnershipTransferred(address indexed _from, address indexed _to);\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        newOwner = _newOwner;\\n    }\\n\\n    function acceptOwnership() public {\\n        require(msg.sender == newOwner, \\\"Not authorized\\\");\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n        newOwner = address(0);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"preSalePricePerUnit_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addWhiteListUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addWhiteListUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePreSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"preBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSalePeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSalePricePerUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updatePreSalePricePerUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"whiteListedUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RightnerToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000dc7db865c56844d6909ee7767be832969316df9800000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000012a05f20000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000852696768746e657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045247485400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}