{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/contractFiles/CollectData.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\npragma experimental ABIEncoderV2;\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\\nabstract contract UniswapV2Factory  {\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n    function allPairsLength() external view virtual returns (uint);\\n}\\n\\ninterface INFTXVault{\\n    function manager() external view returns (address);\\n    function assetAddress() external view returns (address);\\n\\n    function is1155() external view returns (bool);\\n    function allowAllItems() external view returns (bool);\\n    function enableMint() external view returns (bool);\\n    function enableRandomRedeem() external view returns (bool);\\n    function enableTargetRedeem() external view returns (bool);\\n    function enableRandomSwap() external view returns (bool);\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function vaultId() external view returns (uint256);\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n    function allHoldings() external view returns (uint256[] memory);\\n    function totalHoldings() external view returns (uint256);\\n    function mintFee() external view returns (uint256);\\n    function randomRedeemFee() external view returns (uint256);\\n    function targetRedeemFee() external view returns (uint256);\\n    function randomSwapFee() external view returns (uint256);\\n    function targetSwapFee() external view returns (uint256);\\n    function vaultFees() external view returns (uint256, uint256, uint256, uint256, uint256);\\n}\\n\\ninterface NFTXFactory {\\n    function allVaults() external view returns (address[] memory);\\n}\\n\\nstruct VaultData { \\n    address vaultAddress;\\n    address manager;\\n    address assetAddress;\\n    address vaultFactory;\\n    bool is1155;\\n    bool allowAllItems;\\n    bool enableMint;\\n    bool enableRandomRedeem;\\n    bool enableTargetRedeem;\\n    bool enableRandomSwap;\\n    bool enableTargetSwap;\\n    uint256 vaultId;\\n    uint256[] allHoldings;\\n    uint256 totalHoldings;\\n    uint256 mintFee;\\n    uint256 randomRedeemFee;\\n    uint256 targetRedeemFee;\\n    uint256 randomSwapFee;\\n    uint256 targetSwapFee;\\n\\n    address sushiLPContractAddress;\\n    uint112 reserve0;\\n    uint112 reserve1;\\n}\\n\\ncontract CollectData {\\n    \\n    address private owner;\\n    address private WETHAddress;\\n\\n    constructor() {\\n\\t\\towner = msg.sender;\\n        WETHAddress = address(0xc778417E063141139Fce010982780140Aa0cD5Ab);\\n    }\\n\\n    function setWETHAddress(address weth) public{\\n        WETHAddress = weth;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function setOwner(address _o) onlyOwner external {\\n\\t\\towner = _o;\\n\\t}\\n\\n    function getAllData(address[] calldata addresses) public view returns (VaultData[] memory) {\\n        NFTXFactory nftxFactory = NFTXFactory(addresses[0]);\\n        UniswapV2Factory uniswapFactory = UniswapV2Factory(addresses[1]);\\n        address[] memory nftxVaults = nftxFactory.allVaults();\\n        VaultData[] memory dataArray = new VaultData[](nftxVaults.length);\\n        uint256 count = 0;\\n\\n        for (uint i = 0; i < nftxVaults.length; i++) {\\n            INFTXVault nftxVaultContract = INFTXVault(nftxVaults[i]);\\n            address pairAddress = uniswapFactory.getPair(nftxVaults[i],WETHAddress);\\n            if(pairAddress != address(0x0000000000000000000000000000000000000000)){\\n                IUniswapV2Pair pairContract = IUniswapV2Pair(pairAddress);\\n                uint112 reserve0 = 0;\\n                uint112 reserve1 = 0;\\n                uint32 blockTimestampLast = 0;\\n\\n                (reserve0, reserve1, blockTimestampLast) = pairContract.getReserves();\\n\\n                if(pairContract.token1() == WETHAddress){\\n                    VaultData memory data = VaultData(nftxVaults[i],\\n                                            nftxVaultContract.manager(),\\n                                            nftxVaultContract.assetAddress(), \\n                                            address(0x0000000000000000000000000000000000000000),\\n                                            nftxVaultContract.is1155(),\\n                                            nftxVaultContract.allowAllItems(),\\n                                            nftxVaultContract.enableMint(),\\n                                            nftxVaultContract.enableRandomRedeem(),\\n                                            nftxVaultContract.enableTargetRedeem(),\\n                                            nftxVaultContract.enableRandomSwap(),\\n                                            nftxVaultContract.enableTargetSwap(),\\n                                            nftxVaultContract.vaultId(),\\n                                            nftxVaultContract.allHoldings(),\\n                                            nftxVaultContract.totalHoldings(),\\n                                            nftxVaultContract.mintFee(),\\n                                            nftxVaultContract.randomRedeemFee(),\\n                                            nftxVaultContract.targetRedeemFee(),\\n                                            nftxVaultContract.randomSwapFee(),\\n                                            nftxVaultContract.targetSwapFee(),\\n                                            pairAddress,\\n                                            reserve0,\\n                                            reserve1);\\n\\n                    dataArray[count] = data;\\n                    count++;\\n                }else if(pairContract.token0() == WETHAddress){\\n                    VaultData memory data = VaultData(nftxVaults[i],\\n                                            nftxVaultContract.manager(),\\n                                            nftxVaultContract.assetAddress(), \\n                                            address(0x0000000000000000000000000000000000000000),\\n                                            nftxVaultContract.is1155(),\\n                                            nftxVaultContract.allowAllItems(),\\n                                            nftxVaultContract.enableMint(),\\n                                            nftxVaultContract.enableRandomRedeem(),\\n                                            nftxVaultContract.enableTargetRedeem(),\\n                                            nftxVaultContract.enableRandomSwap(),\\n                                            nftxVaultContract.enableTargetSwap(),\\n                                            nftxVaultContract.vaultId(),\\n                                            nftxVaultContract.allHoldings(),\\n                                            nftxVaultContract.totalHoldings(),\\n                                            nftxVaultContract.mintFee(),\\n                                            nftxVaultContract.randomRedeemFee(),\\n                                            nftxVaultContract.targetRedeemFee(),\\n                                            nftxVaultContract.randomSwapFee(),\\n                                            nftxVaultContract.targetSwapFee(),\\n                                            pairAddress,\\n                                            reserve1,\\n                                            reserve0);\\n\\n                    dataArray[count] = data;\\n                    count++;\\n                }\\n\\n                \\n            }\\n        }\\n        VaultData[] memory returnArray = new VaultData[](count);\\n        for(uint i = 0; i < count; i++){\\n            returnArray[i] = dataArray[i];\\n        }\\n        \\n        return returnArray;\\n    }\\n\\n    // function getVaultData()\\n}\\n\\n\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getAllData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultFactory\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"is1155\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowAllItems\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRandomRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableTargetRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRandomSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableTargetSwap\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"allHoldings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalHoldings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sushiLPContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"internalType\":\"struct VaultData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_o\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"setWETHAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CollectData", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}