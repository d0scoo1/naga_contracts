{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.9.2 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/BullStake.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.4;\r\n\r\n\r\ncontract BullStake is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct TPlan {\r\n\t\tuint256 durationDays;\r\n\t\tuint256 percent;\r\n\t\tuint256 taxPercentMarketing;\r\n\t\tuint256 taxPercentContract;\r\n\t\tuint256 taxPercentGa;\r\n\t\tuint256 taxPercentCommission;\r\n\t\tuint256 investFactor;\r\n\t}\r\n\r\n\tstruct TDeposit {\r\n\t\tuint256 planIdx;\r\n\t\tuint256 amount;\r\n\t\tuint256 timeStart;\r\n\t\tuint256 timeEnd;\r\n\t\tuint256 percent;\r\n\t\tuint256 profit;\r\n\t\tuint256 checkpoint;\r\n\t\tuint256 depositIdx;\r\n\t\tbool isDeceased;\r\n\t\tbool isReinvest;\r\n\t}\r\n\r\n\tstruct TUser {\r\n\t\tTDeposit[] deposits;\r\n\t\tuint256[3] refCount;\r\n\t\taddress referrer;\r\n\t\tuint256 refDividends;\r\n\t\tuint256 totalInvested;\r\n\t\tuint256 totalRefDividends;\r\n\t\tuint256 totalRefDividendsClaimed;\r\n\t\tuint256 totalClaimed;\r\n\t}\r\n\r\n\tmapping( address => TUser ) public users;\r\n\tTPlan[] public plans;\r\n\r\n\taddress payable private _marketingWallet;\r\n\taddress payable private _comissionWallet;\r\n\taddress payable private _forcewithdrawalWallet;\r\n\taddress payable private _cbWallet;\r\n\taddress payable private _tenpercentWallet;\r\n\taddress payable private _twentypercentWallet;\r\n\taddress payable private _gaWallet;\r\n\r\n\tuint256 public constant DEPOSIT_TAX_PERCENT = 100; \t\t\t// 10 % deposit tax\r\n\tuint256 public constant USER_REF_TAX_PERCENT = 200; \t\t// 20 % user ref deviden tax\r\n\tuint256 public constant PERCENTS_DIVIDER = 1000;\r\n\tuint256 public constant TIME_STEP = 1 days;\r\n\tuint256 public constant INVEST_MIN_AMOUNT = 0.01 ether;\t\t// 0.01 Avax\r\n\tuint256 public constant REINVEST_PERCENT = 350;\t\t\t\t// get 35% extra daily ROI\r\n\r\n\tuint256 public constant CLAIM_PERCENTAGE_MARKETING = 30;\t// 3%\r\n\tuint256 public constant CLAIM_PERCENTAGE_CONTRACT = 40;\t\t// 4%\r\n\tuint256 public constant CLAIM_PERCENTAGE_GA = 30;\t// 3%\r\n\tuint256 public constant CLAIM_PERCENTAGE_COMMISSION = 100;\t// 10%\r\n\r\n\tuint256[] public REFERRAL_PERCENTS\t= [50, 1, 1];\t        // 5% 0.1% 0.1%\r\n\tuint256 public forcewithdrawalWalletClaimedAmount;\r\n\tuint256 public forceWithdrawPercent = 400; \t// force withdraw tax 40%\r\n\tuint256 public forcewithdrawalWithdrawTaxPercent = 500; \t// forcewithdrawal withdraw tax percent\r\n\tuint256 public totalDepositNo;\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalRefDividends;\r\n\tuint256 public totalRefDividendsClaimed;\r\n\tuint256 public totalClaimed;\r\n\r\n    bool public launched;\r\n    bool public reinvestAllowed;\r\n    bool public newReferralsAllowed;\r\n\r\n\tevent UpdateReinvestAllowedStatus(bool isAllowed);\r\n\tevent UpdateNewReferralsAllowedStatus(bool isAllowed);\r\n\tevent Claimed(address user, uint256 amount);\r\n\tevent NewDeposit(address user, uint256 planIdx, uint256 amount);\r\n\tevent ForceWithdrawPercentUpdated(uint256 oldValue, uint256 newValue);\r\n\tevent ForceWithdrawalWithdrawTaxPercentUpdated(uint256 oldValue, uint256 newValue);\r\n\r\n\tconstructor(\r\n        address payable marketingWallet_,\r\n\t\taddress payable gaWallet_,\r\n\t\taddress payable comissionWallet_,\r\n\t\taddress payable tenpercentWallet_,\r\n\t\taddress payable forcewithdrawalWallet_,\r\n\t\taddress payable twentypercentWallet_,\r\n\t\taddress payable cbWallet_\r\n\t)\r\n\t{\r\n\t\trequire(marketingWallet_ != address(0), \"BullStake::Marketing wallet is zero\");\r\n\t\trequire(gaWallet_ != address(0), \"BullStake::ga wallet is zero\");\r\n\t\trequire(comissionWallet_ != address(0), \"BullStake::Comission wallet is zero\");\r\n\t\trequire(tenpercentWallet_ != address(0), \"BullStake::Tenpercent wallet is zero\");\r\n\t\trequire(forcewithdrawalWallet_ != address(0), \"BullStake::Forcewithdrawal wallet is zero\");\r\n\t\trequire(twentypercentWallet_ != address(0), \"BullStake::Twentypercent wallet is zero\");\r\n\t\trequire(cbWallet_ != address(0), \"BullStake::Cb wallet is zero\");\r\n\r\n        _marketingWallet = marketingWallet_;\r\n\t\t_gaWallet = gaWallet_;\r\n\t\t_comissionWallet = comissionWallet_;\r\n\t\t_tenpercentWallet = tenpercentWallet_;\r\n\t\t_forcewithdrawalWallet = forcewithdrawalWallet_;\r\n\t\t_twentypercentWallet = twentypercentWallet_;\r\n\t\t_cbWallet = cbWallet_;\r\n\r\n\t\tplans.push( TPlan(7, 0, 30, 30, 40, 100, 0) );\r\n\t\tplans.push( TPlan(10, 0, 30, 30, 40, 100, 1300) );\r\n\t\tplans.push( TPlan(20, 0, 30, 30, 40, 100, 2000) );\r\n\t\tplans.push( TPlan(30, 0, 30, 30, 40, 100, 2520) );\r\n\r\n\t\tplans.push( TPlan(7, 0, 30, 40, 30, 100, 0) );\r\n\t\tplans.push( TPlan(10, 0, 30, 30, 40, 100, 1590) );\r\n\t\tplans.push( TPlan(20, 0, 10, 10, 10, 100, 3660) );\r\n\t\tplans.push( TPlan(30, 0, 0, 0, 10, 100, 9062) );\r\n\r\n\tnewReferralsAllowed = true;\r\n\t}\r\n\r\n\tfunction setWallets(\r\n\t\taddress payable marketingWallet_,\r\n\t\taddress payable gaWallet_,\r\n\t\taddress payable comissionWallet_,\r\n\t\taddress payable tenpercentWallet_,\r\n\t\taddress payable forcewithdrawalWallet_,\r\n\t\taddress payable twentypercentWallet_,\r\n\t\taddress payable cbWallet_\r\n\t)\r\n\t\texternal\r\n\t\tonlyOwner()\r\n\t{\r\n\t\trequire(marketingWallet_ != address(0), \"BullStake::Marketing wallet is zero\");\r\n\t\trequire(gaWallet_ != address(0), \"BullStake::ga wallet is zero\");\r\n\t\trequire(comissionWallet_ != address(0), \"BullStake::Comission wallet is zero\");\r\n\t\trequire(tenpercentWallet_ != address(0), \"BullStake::Tenpercent wallet is zero\");\r\n\t\trequire(forcewithdrawalWallet_ != address(0), \"BullStake::Forcewithdrawal wallet is zero\");\r\n\t\trequire(twentypercentWallet_ != address(0), \"BullStake::Twentypercent wallet is zero\");\r\n\t\trequire(cbWallet_ != address(0), \"BullStake::CB wallet is zero\");\r\n\r\n        _marketingWallet = marketingWallet_;\r\n\t\t_gaWallet = gaWallet_;\r\n\t\t_comissionWallet = comissionWallet_;\r\n\t\t_tenpercentWallet = tenpercentWallet_;\r\n\t\t_forcewithdrawalWallet = forcewithdrawalWallet_;\r\n\t\t_twentypercentWallet = twentypercentWallet_;\r\n\t\t_cbWallet = cbWallet_;\r\n\t}\r\n\r\n\tfunction setReinvestAllowedStatus(bool status)\r\n\t\texternal\r\n\t\tonlyOwner()\r\n\t{\r\n\t\treinvestAllowed = status;\r\n\t\temit UpdateReinvestAllowedStatus(status);\r\n\t}\r\n\r\n\tfunction setNewReferralAllowedStatus(bool status)\r\n\t\texternal\r\n\t\tonlyOwner()\r\n\t{\r\n\t\tnewReferralsAllowed = status;\r\n\t\temit UpdateNewReferralsAllowedStatus(status);\r\n\t}\r\n\r\n\tfunction launch()\r\n\t\texternal\r\n\t\tonlyOwner()\r\n\t{\r\n\t\tlaunched = true;\r\n\t}\r\n\r\n\tfunction invest(address _referrer, uint8 _planIdx)\r\n\t\tpublic\r\n\t\tpayable\r\n\t{\r\n        require (launched, \"BullStake::Project is not launched.\");\r\n        require(msg.value >= INVEST_MIN_AMOUNT, \"BullStake::The deposit amount is too low\");\r\n        require(_planIdx < plans.length, \"BullStake::Invalid plan index\");\r\n\r\n\t\t_transferTo(msg.value, DEPOSIT_TAX_PERCENT, _tenpercentWallet);\r\n\r\n\t\tif(newReferralsAllowed)\r\n\t\t\t_setUserReferrer(msg.sender, _referrer);\r\n\r\n        _allocateReferralRewards(msg.sender, msg.value);\r\n\r\n        _createDeposit( msg.sender, _planIdx, msg.value, false, 0);\r\n\r\n\t}\r\n\r\n\tfunction withdraw(uint256 depIdx)\r\n\t\tpublic\r\n\t{\r\n\t\tTUser storage user = users[msg.sender];\r\n\r\n\t\t_checkDepositIsDeceased(user, depIdx);\r\n\r\n\t\t(uint256 claimAmount, uint256 checkPoint) = _calculateDepositDividends(msg.sender, depIdx, true);\r\n\r\n\t\trequire(claimAmount > 0, \"BullStake::Nothing to withdraw\");\r\n\t\trequire(checkPoint > 0, \"BullStake::Not able to withdraw\");\r\n\r\n\t\tupdateCheckPoint(msg.sender, depIdx, checkPoint);\r\n\r\n\t\tTPlan storage plan = plans[user.deposits[depIdx].planIdx];\r\n\r\n\t\t// Transfer to wallets\r\n\t\tuint256 marketingAmount = _transferTo(claimAmount, plan.taxPercentMarketing, _marketingWallet);\r\n\t\tuint256 contractAmount = _transferTo(claimAmount, plan.taxPercentContract, _cbWallet);\r\n\t\tuint256 gaAmount = _transferTo(claimAmount, plan.taxPercentGa, _gaWallet);\r\n\t\tuint256 commissionAmount = _transferTo(claimAmount, plan.taxPercentCommission, _comissionWallet);\r\n\r\n\t\tclaimAmount -= marketingAmount;\r\n\t\tclaimAmount -= contractAmount;\r\n\t\tclaimAmount -= gaAmount;\r\n\t\tclaimAmount -= commissionAmount;\r\n\r\n\t\tuint256 balance = address(this).balance;\r\n\t\tif (claimAmount > balance) {\r\n\t\t\tclaimAmount = balance;\r\n\t\t}\r\n\r\n\t\tuser.totalClaimed += claimAmount;\r\n\t\ttotalClaimed += claimAmount;\r\n\t\tpayable(msg.sender).transfer( claimAmount );\r\n\r\n\t\temit Claimed(msg.sender, claimAmount );\r\n\t}\r\n\r\n\tfunction _transferTo(uint256 claimAmount, uint256 percentage, address payable to_)\r\n\t\tinternal\r\n\t\treturns(uint256 amount)\r\n\t{\r\n\t\tamount = claimAmount * percentage / PERCENTS_DIVIDER;\r\n\t\tto_.transfer(amount);\r\n\t}\r\n\r\n\tfunction _transferToForcewithdrawal(uint256 claimAmount, uint256 percentage, address payable to_)\r\n\t\tinternal\r\n\t\treturns(uint256 amount)\r\n\t{\r\n\r\n\t\tamount = claimAmount * percentage / PERCENTS_DIVIDER;\r\n\r\n\t\tuint256 forcewithdrawalAmount = amount * forcewithdrawalWithdrawTaxPercent / PERCENTS_DIVIDER;\r\n\t\tforcewithdrawalWalletClaimedAmount += forcewithdrawalAmount;\r\n\t\tto_.transfer(forcewithdrawalAmount);\r\n\t}\r\n\r\n\tfunction updateCheckPoint(address addr, uint256 deptId, uint256 checkPoint)\r\n\t\tinternal\r\n\t{\r\n\t\tTUser storage user = users[addr];\r\n\r\n\t\tuser.deposits[deptId].checkpoint = checkPoint;\r\n\r\n\t\tif(checkPoint >= user.deposits[deptId].timeEnd)\r\n\t\t\tuser.deposits[deptId].isDeceased = true;\r\n\t}\r\n\r\n\tfunction forceWithdraw(uint256 depIdx)\r\n\t\tpublic\r\n\t{\r\n\t\tTUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 planIdx = user.deposits[depIdx].planIdx;\r\n\r\n\t\t_checkIsOnlyLockedPackageOperation(planIdx);\r\n\t\t_checkDepositIsDeceased(user, depIdx);\r\n\r\n\t\tuint256 depositAmount = user.deposits[depIdx].amount;\r\n\t\tuint256 forceWithdrawTax = _transferToForcewithdrawal(depositAmount, forceWithdrawPercent, _forcewithdrawalWallet);\r\n\r\n\t\tuser.deposits[depIdx].checkpoint = user.deposits[depIdx].timeEnd;\r\n\t\tuser.deposits[depIdx].isDeceased = true;\r\n\r\n\t\tuint256 claimAmount = depositAmount - forceWithdrawTax;\r\n\r\n\t\tuint256 balance = address(this).balance;\r\n\t\tif (claimAmount > balance) {\r\n\t\t\tclaimAmount = balance;\r\n\t\t}\r\n\r\n\t\tuser.totalClaimed += claimAmount;\r\n\t\ttotalClaimed += claimAmount;\r\n\r\n\t\tpayable(msg.sender).transfer( claimAmount);\r\n\r\n\t\temit Claimed(msg.sender, claimAmount);\r\n\t}\r\n\r\n\tfunction reinvest(uint256 depIdx, uint256 reinvestAmount)\r\n\t\tpublic\r\n\t{\r\n\t\trequire(reinvestAllowed, \"BullStake::Reinvest is deactivated\");\r\n\r\n\t\tTUser storage user = users[msg.sender];\r\n\t\tuint256 planIdx = user.deposits[depIdx].planIdx;\r\n\r\n\t\trequire(!user.deposits[depIdx].isReinvest, \"BullStake::You can reinvest only once\");\r\n\r\n\t\t_checkIsOnlyLockedPackageOperation(planIdx);\r\n\t\t_checkDepositIsDeceased(user, depIdx);\r\n\r\n\t\t(uint256 profit, uint256 checkPoint) = _calculateDepositDividends(msg.sender, depIdx, true);\r\n\r\n\t\trequire(profit > 0, \"Nothing to withdraw or reinvest\");\r\n\t\trequire(profit >= reinvestAmount, \"BullStake::Profit must be higher than reinvest.\");\r\n\t\trequire(checkPoint > 0, \"Not able to withdraw or reinvest\");\r\n\r\n\t\tuint256 half = profit.div(100) / 2;\r\n\t\trequire(reinvestAmount >= half, \"You need more MATIC for re-invest\");\r\n\r\n\t\tupdateCheckPoint(msg.sender, depIdx, checkPoint);\r\n\r\n\t\t_createDeposit( msg.sender, planIdx, reinvestAmount, true,  depIdx);\r\n\r\n\t\tuint256 withdrawAmount = profit - reinvestAmount;\r\n\r\n\t\t//withdraw the rest\r\n\t\tTPlan storage plan = plans[user.deposits[depIdx].planIdx];\r\n\r\n\t\t// Transfer to wallets\r\n\t\tuint256 marketingAmount = _transferTo(withdrawAmount, plan.taxPercentMarketing, _marketingWallet);\r\n\t\tuint256 contractAmount = _transferTo(withdrawAmount, plan.taxPercentContract, _cbWallet);\r\n\t\tuint256 gaAmount = _transferTo(withdrawAmount, plan.taxPercentGa, _gaWallet);\r\n\t\tuint256 commissionAmount = _transferTo(withdrawAmount, plan.taxPercentCommission, _comissionWallet);\r\n\r\n\t\twithdrawAmount -= marketingAmount;\r\n\t\twithdrawAmount -= contractAmount;\r\n\t\twithdrawAmount -= gaAmount;\r\n\t\twithdrawAmount -= commissionAmount;\r\n\r\n\t\tuint256 balance = address(this).balance;\r\n\t\tif (withdrawAmount > balance) {\r\n\t\t\twithdrawAmount = balance;\r\n\t\t}\r\n\r\n\t\tuser.totalClaimed += withdrawAmount;\r\n\t\ttotalClaimed += withdrawAmount;\r\n\r\n\t\tpayable(msg.sender).transfer(withdrawAmount);\r\n\r\n\t\temit Claimed(msg.sender, withdrawAmount);\r\n\t}\r\n\r\n\tfunction claim()\r\n\t\tpublic\r\n\t{\r\n\t\tTUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 userRefDividendsTax = _transferTo(user.refDividends, USER_REF_TAX_PERCENT, _twentypercentWallet);\r\n\t\tuint256 userRefDividends = user.refDividends - userRefDividendsTax;\r\n\r\n\t\tuser.totalRefDividendsClaimed += user.refDividends;\r\n\t\ttotalRefDividendsClaimed += user.refDividends;\r\n\r\n\t\tuser.refDividends = 0;\t\t\t\t//clear refDividends\r\n\t\tuint256 claimAmount = userRefDividends;\r\n\r\n\t\tfor(uint256 i=0; i<user.deposits.length; i++) {\r\n\t\t\tif(_isDepositDeceased(user, i)) continue;\r\n\t\t\tif(user.deposits[i].planIdx >= 4) continue;\r\n\r\n\t\t\t(uint256 claimAmount_, uint256 checkpoint_) = _calculateDepositDividends(msg.sender,i, false);\r\n\r\n\t\t\tif(claimAmount_ <= 0) continue;\r\n\t\t\tif(checkpoint_ <= 0) continue;\r\n\r\n\t\t\tupdateCheckPoint(msg.sender, i, checkpoint_);\r\n\t\t\tclaimAmount += claimAmount_;\r\n\t\t}\r\n\r\n\t\tuint256 marketingAmount =_transferTo(claimAmount, CLAIM_PERCENTAGE_MARKETING, _marketingWallet);\r\n\t\tuint256 contractAmount =_transferTo(claimAmount, CLAIM_PERCENTAGE_CONTRACT, _cbWallet);\r\n\t\tuint256 gaAmount =_transferTo(claimAmount, CLAIM_PERCENTAGE_GA, _gaWallet);\r\n\t\tuint256 commissionAmount =_transferTo(claimAmount, CLAIM_PERCENTAGE_COMMISSION, _comissionWallet);\r\n\r\n\t\tclaimAmount -= marketingAmount;\r\n\t\tclaimAmount -= contractAmount;\r\n\t\tclaimAmount -= gaAmount;\r\n\t\tclaimAmount -= commissionAmount;\r\n\r\n\t\tuint256 balance = address(this).balance;\r\n\t\tif (claimAmount > balance) {\r\n\t\t\tclaimAmount = balance;\r\n\t\t}\r\n\r\n\t\tuser.totalClaimed += claimAmount;\r\n\t\ttotalClaimed += claimAmount;\r\n\r\n\t\tpayable(msg.sender).transfer( claimAmount );\r\n\r\n\t\temit Claimed(msg.sender, claimAmount );\r\n\t}\r\n\r\n\tfunction _setUserReferrer(address _user, address _referrer)\r\n\t\tinternal\r\n\t{\r\n\t\tif (users[_user].referrer != address(0)) return; \t\t// Already has a referrer\r\n\t\tif (users[_referrer].deposits.length == 0) return;\t\t// Referrer doesn't exist\r\n\t\tif (_user == _referrer) return;\t\t\t\t\t\t  //cant refer to yourself\r\n\r\n\t\t// Adopt\r\n\t\tusers[_user].referrer = _referrer;\r\n\r\n\t\t// Loop through the referrer hierarchy, increase every referral Levels counter\r\n\t\taddress upline = users[_user].referrer;\r\n\r\n\t\tfor (uint256 i=0; i < REFERRAL_PERCENTS.length; i++) {\r\n\t\t\tif(upline == address(0)) break;\r\n\r\n\t\t\tusers[upline].refCount[i]++;\r\n\t\t\tupline = users[upline].referrer;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction _allocateReferralRewards(address _user, uint256 _depositAmount)\r\n\t\tinternal\r\n\t{\r\n\t\t//loop through the referrer hierarchy, allocate refDividends\r\n\t\taddress upline = users[_user].referrer;\r\n\r\n\t\tfor (uint256 i=0; i < REFERRAL_PERCENTS.length; i++) {\r\n\t\t\tif (upline == address(0)) break;\r\n\r\n\t\t\tuint256 amount = _depositAmount * REFERRAL_PERCENTS[i] / PERCENTS_DIVIDER;\r\n\r\n\t\t\tusers[upline].refDividends += amount;\r\n\t\t\tusers[upline].totalRefDividends += amount;\r\n\t\t\ttotalRefDividends += amount;\r\n\t\t\tupline = users[upline].referrer;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _createDeposit(\r\n\t\taddress _user,\r\n\t\tuint256 _planIdx,\r\n\t\tuint256 _amount,\r\n\t\tbool _isReinvest,\r\n\t\tuint256 reinvestedDepIdx\r\n\t)\r\n\t\tinternal\r\n\t\treturns(uint256 o_depIdx)\r\n\t{\r\n\r\n\t\tTUser storage user = users[_user];\r\n\t\tTDeposit memory newDep;\r\n\r\n\t\t(uint256 percent, uint256 profit) = _getResult(_planIdx, _amount, _isReinvest);\r\n\r\n\t\tif(!_isReinvest){\r\n\t\t\to_depIdx = user.deposits.length;\r\n\t\t\tnewDep = TDeposit(\r\n\t\t\t\t_planIdx,\r\n\t\t\t\t_amount,\r\n\t\t\t\tblock.timestamp,\r\n\t\t\t\tblock.timestamp + plans[_planIdx].durationDays * TIME_STEP,\r\n\t\t\t\tpercent,\r\n\t\t\t\tprofit,\r\n\t\t\t\tblock.timestamp,\r\n\t\t\t\to_depIdx,\r\n\t\t\t\tfalse,\r\n\t\t\t\t_isReinvest\r\n\t\t\t);\r\n\t\t\tuser.deposits.push(newDep);\r\n\t\t}else{\r\n\t\t\to_depIdx = reinvestedDepIdx;\r\n\t\t\tnewDep = TDeposit(\r\n\t\t\t\t_planIdx,\r\n\t\t\t\t_amount,\r\n\t\t\t\tblock.timestamp,\r\n\t\t\t\tblock.timestamp + plans[_planIdx].durationDays * TIME_STEP,\r\n\t\t\t\tpercent,\r\n\t\t\t\tprofit,\r\n\t\t\t\tblock.timestamp,\r\n\t\t\t\to_depIdx,\r\n\t\t\t\tfalse,\r\n\t\t\t\t_isReinvest\r\n\t\t\t);\r\n\t\t\tuser.deposits[reinvestedDepIdx] = newDep;\r\n\t\t}\r\n\r\n\t\tuser.totalInvested += _amount;\r\n\t\ttotalDepositNo++;\r\n\t\ttotalInvested += _amount;\r\n\r\n\t\temit NewDeposit(_user, newDep.planIdx, newDep.amount);\r\n\t}\r\n\r\n\tfunction _isDepositDeceased(TUser memory user_, uint256 depositIndex) internal pure returns(bool) {\r\n\t\tTDeposit memory userDeposits = user_.deposits[depositIndex];\r\n\r\n\t\treturn (userDeposits.checkpoint >= userDeposits.timeEnd);\r\n\t}\r\n\r\n\tfunction _checkDepositIsDeceased(TUser memory user_, uint256 depositIndex)\r\n\t\tinternal\r\n\t\tpure\r\n\t{\r\n\t\trequire(!_isDepositDeceased(user_, depositIndex) , \"Deposit is deceased\");\r\n\t}\r\n\r\n\tfunction _calculateDepositDividends(address _user, uint256 _depIdx, bool _isWithdraw) internal view returns (uint256 o_amount, uint256 checkPoint) {\r\n\t\tTUser storage user = users[_user];\r\n\t\tif(!_isDepositDeceased(user, _depIdx)) {\r\n\t\t\tTDeposit storage deposit = user.deposits[_depIdx];\r\n\r\n\t\t\tif(deposit.planIdx < 4) {\r\n\t\t\t\t//calculate withdrawable dividends starting from the last Claim checkpoint\r\n\t\t\t\tuint256 timeA = deposit.timeStart > deposit.checkpoint ? deposit.timeStart : deposit.checkpoint;\r\n\t\t\t\tuint256 timeB = deposit.timeEnd < block.timestamp ? deposit.timeEnd : block.timestamp;\r\n\r\n\t\t\t\tif (timeA < timeB) {\r\n\t\t\t\t\tuint256 dayCounts = plans[deposit.planIdx].durationDays;\r\n\t\t\t\t\tuint256 multiplier = timeB.sub(timeA);\r\n\r\n\t\t\t\t\tif(multiplier < TIME_STEP) {\r\n\t\t\t\t\t\to_amount = (deposit.profit.mul(\r\n\t\t\t\t\t\t\tmultiplier\r\n\t\t\t\t\t\t).div(dayCounts)).div(TIME_STEP);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\to_amount = deposit.profit.mul(\r\n\t\t\t\t\t\t\tmultiplier.div(TIME_STEP)\r\n\t\t\t\t\t\t).div(dayCounts);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcheckPoint = timeB; ///deposit.checkpoint = timeB;\r\n\t\t\t\t}\r\n\t\t\t}else {\r\n\t\t\t\t// Only locked packages\r\n\t\t\t\tif(deposit.timeEnd <= block.timestamp){\r\n\t\t\t\t\tuint256 divideBy = _isWithdraw ? 1 : 1000;\r\n\t\t\t\t\to_amount = deposit.profit / divideBy;\r\n\t\t\t\t\tcheckPoint = deposit.timeEnd; ///deposit.checkpoint = deposit.timeEnd;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _checkIsOnlyLockedPackageOperation(uint256 index_)\r\n\t\tinternal\r\n\t\tpure\r\n\t{\r\n\t\trequire(index_ >= 4, \"BullStake::Only locked packages\");\r\n\t}\r\n\r\n\tfunction getPercentageOfPackages()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(uint256[] memory)\r\n\t{\r\n\t\tuint256[] memory percentages;\r\n\r\n\t\tfor(uint256 i; i < plans.length; i++) {\r\n\t\t\tTPlan memory plan = plans[i];\r\n\t\t\tpercentages[i] = plan.percent;\r\n\t\t}\r\n\r\n\t\treturn percentages;\r\n\t}\r\n\r\n\tfunction getPackageInfo(uint256 index_)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(TPlan memory)\r\n\t{\r\n\t\treturn plans[index_];\r\n\t}\r\n\r\n\tfunction getProjectInfo()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(\r\n\t\t\tuint256 o_totDeposits,\r\n\t\t\tuint256 o_totInvested,\r\n\t\t\tuint256 o_insBalance,\r\n\t\t\tuint256 contractBalance,\r\n\t\t\tuint256 o_timestamp\r\n\t\t)\r\n\t{\r\n\t\tuint256 gaBalance = _gaWallet.balance;\r\n\t\treturn( totalDepositNo, totalInvested, gaBalance, address(this).balance, block.timestamp );\r\n\t}\r\n\r\n\tfunction getUserDeposits()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(TDeposit[] memory)\r\n\t{\r\n\t\tTUser storage user = users[msg.sender];\r\n\r\n\t\treturn user.deposits;\r\n\t}\r\n\r\n\tfunction getUserInfo()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(\r\n\t\t\tuint256 stakedAmount,\r\n\t\t\tuint256 availableAmount,\r\n\t\t\tuint256 tot_ref,\r\n\t\t\tuint256 tot_ref_earn\r\n\t\t)\r\n\t{\r\n\t\tTUser storage user = users[msg.sender];\r\n\r\n\t\ttot_ref = user.totalRefDividends;\r\n\t\ttot_ref_earn = user.totalRefDividendsClaimed;\r\n\r\n\t\tstakedAmount = user.totalInvested;\r\n\r\n\t\tuint256 claimAmount = user.refDividends;\r\n\r\n\t\tfor(uint256 i=0;i<user.deposits.length;i++) {\r\n\t\t\tif(_isDepositDeceased(user,i)) continue;\r\n\t\t\tif(user.deposits[i].planIdx >= 4) continue;\r\n\r\n\t\t\t(uint256 claimAmount_, uint256 checkpoint_) = _calculateDepositDividends(msg.sender,i, false);\r\n\r\n\t\t\tif(claimAmount_ <= 0) continue;\r\n\t\t\tif(checkpoint_ <= 0) continue;\r\n\r\n\t\t\tclaimAmount += claimAmount_;\r\n\t\t}\r\n\r\n\t\tavailableAmount = claimAmount;\r\n\t}\r\n\r\n\tfunction getCurrentTime() public view returns(uint256){\r\n\t\treturn block.timestamp;\r\n\t}\r\n\r\n\tfunction getContractBalance()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(uint256)\r\n\t{\r\n\t\tuint256 gaBalance = _gaWallet.balance;\r\n\r\n\t\treturn address(this).balance + gaBalance;\r\n\t}\r\n\r\n\tfunction setForceWithdrawPercent(uint256 percent)\r\n\t\tpublic\r\n\t\tonlyOwner()\r\n\t{\r\n\t\trequire(110 <= percent && percent <= 400, \"New percent must be between 11% - 40%\");\r\n\t\tuint256 old = forceWithdrawPercent;\r\n\t\tforceWithdrawPercent = percent;\r\n\t\temit ForceWithdrawPercentUpdated(old, percent);\r\n\t}\r\n\r\n\tfunction setForcewithdrawalWithdrawPercent(uint256 percent)\r\n\t\tpublic\r\n\t\tonlyOwner()\r\n\t{\r\n\t\trequire(100 <= percent && percent <= 500, \"New percent must be between 10% - 50%\");\r\n\t\tuint256 old = forcewithdrawalWithdrawTaxPercent;\r\n\t\tforcewithdrawalWithdrawTaxPercent = percent;\r\n\t\temit ForceWithdrawalWithdrawTaxPercentUpdated(old, percent);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction _getResult(\r\n\t\tuint256 planIdx,\r\n\t\tuint256 amount,\r\n\t\tbool _isReinvest\r\n\t)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns\r\n\t\t(\r\n\t\t\tuint256 percent,\r\n\t\t\tuint256 profit\r\n\t\t)\r\n\t{\r\n\t\tTPlan memory plan = plans[planIdx];\r\n\r\n\t\tuint256 factor = plan.investFactor;\r\n\r\n\t\tif(planIdx >= 4) {\r\n\t\t\tif(_isReinvest)\r\n\t\t\t\tfactor = factor.mul(\r\n\t\t\t\t\tREINVEST_PERCENT.add(PERCENTS_DIVIDER)\r\n\t\t\t\t);\r\n\t\t}\r\n\r\n\t\tprofit = amount.div(PERCENTS_DIVIDER).mul(factor);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"gaWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"comissionWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"tenpercentWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"forcewithdrawalWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"twentypercentWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"cbWallet_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ForceWithdrawPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ForceWithdrawalWithdrawTaxPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"UpdateNewReferralsAllowedStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"UpdateReinvestAllowedStatus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_PERCENTAGE_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_PERCENTAGE_CONTRACT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_PERCENTAGE_GA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_PERCENTAGE_MARKETING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_TAX_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_REF_TAX_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depIdx\",\"type\":\"uint256\"}],\"name\":\"forceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceWithdrawPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forcewithdrawalWalletClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forcewithdrawalWithdrawTaxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getPackageInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxPercentMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxPercentContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxPercentGa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxPercentCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct BullStake.TPlan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentageOfPackages\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"o_totDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"o_totInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"o_insBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"o_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"planIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositIdx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDeceased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isReinvest\",\"type\":\"bool\"}],\"internalType\":\"struct BullStake.TDeposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tot_ref\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tot_ref_earn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_planIdx\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newReferralsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"durationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxPercentMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxPercentContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxPercentGa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxPercentCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestAmount\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setForceWithdrawPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setForcewithdrawalWithdrawPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setNewReferralAllowedStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setReinvestAllowedStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"gaWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"comissionWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"tenpercentWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"forcewithdrawalWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"twentypercentWallet_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"cbWallet_\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefDividendsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefDividendsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depIdx\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BullStake", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000aa8b7695e1d2bf06fd908a201055198ec4e5f5950000000000000000000000008d28b0c51cee40136ca2b7bcf3d51f56512435c90000000000000000000000006a968bb54e9efd0b996c16c2efe88e1ba2c05e35000000000000000000000000bfe705f60327b38a1502722f3091eb01562b9ec100000000000000000000000071b60b806436e649b63ae862d700d9088f24c1ca000000000000000000000000f81b0170a3cce33ef7434fa2f14afbfb948976f70000000000000000000000009de645fcde10cf9e9bb5393104e32982d254a95b", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://53264e5755ba6dbbe99270197b5814cee16106a73a4af03ad67d6b650907c30a"}]}