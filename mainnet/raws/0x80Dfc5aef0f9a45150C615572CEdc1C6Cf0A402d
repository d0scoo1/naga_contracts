{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TokengateManifoldExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\\\";\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/extensions/CreatorExtension.sol\\\";\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./ITokengateManifoldExtension.sol\\\";\\n\\n/**\\n * @title Default implementation of the ITokengateManifoldExtension interface.\\n *\\n * See {ITokengateManifoldExtension} for more information and a detailed explanation on the way the\\n * token URI generation works.\\n *\\n * @author DSENT AG, www.dsent.com\\n */\\ncontract TokengateManifoldExtension is\\n    ITokengateManifoldExtension,\\n    CreatorExtension,\\n    ICreatorExtensionTokenURI,\\n    AccessControlEnumerable\\n{\\n    using Strings for uint256;\\n\\n    /**\\n     * @dev Role for all addresses that are authorized to mint tokens through this extension.\\n     */\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    /**\\n     * @dev Variable that stores the base token URI that is used during token URI generation. The base\\n     * token URI is used for editions that have neither a token URI suffix nor a full token URI specified.\\n     *\\n     * Refer to the 'Token URI Generation' section in {ITokengateManifoldExtension} for more information on this variable.\\n     */\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Variable that stores the default token URI prefix that is used during token URI generation.\\n     * The default token URI prefix is used for editions that have a token URI suffix defined.\\n     *\\n     * Refer to the 'Token URI Generation' section in {ITokengateManifoldExtension} for more information on this variable.\\n     */\\n    string private _defaultTokenURIPrefix;\\n\\n    /**\\n     * @dev Variable that stores custom token URI suffixes for single editions or editions of a series.\\n     *\\n     * Note: Maps creator addresses => tokenIds => token URI suffixes\\n     *\\n     * Refer to the 'Token URI Generation' section in {ITokengateManifoldExtension} for more information on this variable.\\n     */\\n    mapping(address => mapping(uint256 => string)) private _tokenURISuffixMap;\\n\\n    /**\\n     * @dev Variable that stores full token URIs for single editions or editions of a series.\\n     *\\n     * Note: Maps creator addresses => tokenIds => full token URIs\\n     *\\n     * Refer to the 'Token URI Generation' section in {ITokengateManifoldExtension} for more information on this variable.\\n     */\\n    mapping(address => mapping(uint256 => string)) private _fullTokenURIMap;\\n\\n    /**\\n     * @dev Variable that stores all series created for the specified project ids.\\n     *\\n     * Note: Maps project ids => Series custom types\\n     */\\n    mapping(uint64 => Series) private _seriesMap;\\n\\n    /**\\n     * @dev Variable that stores whether a given edition id has been minted or not. Edition ids are\\n     * created by bit shifting a 64-bit project id with a 32-bit edition number into a 96-bit uint.\\n     *\\n     * Note: Maps edition ids => edition minted booleans\\n     */\\n    mapping(uint96 => bool) private _mintedEditionIdMap;\\n\\n    /**\\n     * @dev Variable that stores edition ids for all created token ids. Edition ids consist of a\\n     * project id and edition number and are stored by bit shifting the 64-bit project id with the\\n     * 32-bit edition number into a 96-bit uint.\\n     *\\n     * Note: Maps creator addresses => token ids => edition ids\\n     */\\n    mapping(address => mapping(uint256 => uint96)) private _editionIdMap;\\n\\n    /**\\n     * @dev Note: Declaring a constructor `payable` reduces the deployed EVM bytecode by 10 opcodes.\\n     */\\n    constructor(string memory baseTokenURI, string memory defaultTokenURIPrefix)\\n        payable\\n    {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _baseTokenURI = baseTokenURI;\\n        _defaultTokenURIPrefix = defaultTokenURIPrefix;\\n    }\\n\\n    /**\\n     * @dev Check whether a given interface is supported by this extension.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(CreatorExtension, IERC165, AccessControlEnumerable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ICreatorExtensionTokenURI).interfaceId ||\\n            CreatorExtension.supportsInterface(interfaceId) ||\\n            interfaceId == type(ITokengateManifoldExtension).interfaceId ||\\n            AccessControlEnumerable.supportsInterface(interfaceId) ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-createSeries}.\\n     */\\n    function createSeries(\\n        uint64 projectId,\\n        uint32 editionSize,\\n        string calldata tokenURIPrefix,\\n        string calldata tokenURISuffix,\\n        bool addEditionToTokenURISuffix,\\n        string calldata tokenURIExtension\\n    ) external onlyRole(MINTER_ROLE) {\\n        if (projectId == 0) {\\n            revert ProjectIdMustBePositive(address(this));\\n        }\\n        if (editionSize <= 1) {\\n            revert EditionSizeMustBeGreaterThanOne(address(this));\\n        }\\n        if (_seriesMap[projectId].hasEntry) {\\n            revert SeriesAlreadyCreated(address(this));\\n        }\\n        if (_mintedEditionIdMap[createEditionId(projectId, 1)]) {\\n            revert ProjectIsMintedAsSingleEdition(address(this));\\n        }\\n\\n        _seriesMap[projectId] = Series(\\n            true,\\n            editionSize,\\n            0,\\n            tokenURIPrefix,\\n            tokenURISuffix,\\n            addEditionToTokenURISuffix,\\n            tokenURIExtension\\n        );\\n\\n        emit SeriesCreated(projectId);\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-setSeriesParams}.\\n     */\\n    function setSeriesParams(\\n        uint64 projectId,\\n        string calldata tokenURIPrefix,\\n        string calldata tokenURISuffix,\\n        bool addEditionToTokenURISuffix,\\n        string calldata tokenURIExtension\\n    ) external onlyRole(MINTER_ROLE) {\\n        if (!_seriesMap[projectId].hasEntry) {\\n            revert SeriesNotFound(address(this));\\n        }\\n\\n        Series storage series = _seriesMap[projectId];\\n        series.tokenURIPrefix = tokenURIPrefix;\\n        series.tokenURISuffix = tokenURISuffix;\\n        series.addEditionToTokenURISuffix = addEditionToTokenURISuffix;\\n        series.tokenURIExtension = tokenURIExtension;\\n\\n        emit SeriesParamsSet(projectId);\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-getSeries}.\\n     */\\n    function getSeries(uint64 projectId) external view returns (Series memory) {\\n        return _seriesMap[projectId];\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-mintSeries}.\\n     */\\n    function mintSeries(\\n        address creator,\\n        address recipient,\\n        uint64 projectId,\\n        uint32 editionNumber,\\n        bool isFullTokenURI,\\n        string memory tokenURIData\\n    ) external onlyRole(MINTER_ROLE) {\\n        _mintSeries(\\n            creator,\\n            recipient,\\n            projectId,\\n            editionNumber,\\n            isFullTokenURI,\\n            tokenURIData\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function used to mint editions of a series.\\n     */\\n    function _mintSeries(\\n        address creator,\\n        address recipient,\\n        uint64 projectId,\\n        uint32 editionNumber,\\n        bool isFullTokenURI,\\n        string memory tokenURIData\\n    ) internal {\\n        if (recipient == address(0)) {\\n            revert ZeroAddressNotAllowed(address(this));\\n        }\\n        if (!_seriesMap[projectId].hasEntry) {\\n            revert SeriesNotFound(address(this));\\n        }\\n\\n        if (editionNumber == 0) {\\n            revert EditionNumberMustBePositive(address(this));\\n        }\\n\\n        if (editionNumber > _seriesMap[projectId].editionSize) {\\n            revert EditionNumberExceedsEditionSize(address(this));\\n        }\\n\\n        uint96 editionId = createEditionId(projectId, editionNumber);\\n        if (_mintedEditionIdMap[editionId]) {\\n            revert EditionAlreadyMinted(address(this));\\n        }\\n        _mintedEditionIdMap[editionId] = true;\\n        _seriesMap[projectId].editionCount += 1;\\n\\n        uint256 tokenId = IERC721CreatorCore(creator).mintExtension(recipient);\\n\\n        if (bytes(tokenURIData).length != 0) {\\n            if (isFullTokenURI) {\\n                _fullTokenURIMap[creator][tokenId] = tokenURIData;\\n            } else {\\n                _tokenURISuffixMap[creator][tokenId] = tokenURIData;\\n            }\\n        }\\n\\n        _editionIdMap[creator][tokenId] = editionId;\\n\\n        emit EditionMinted(creator, tokenId, projectId, editionNumber);\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-mintSeriesBatch1}.\\n     */\\n    function mintSeriesBatch1(\\n        address creator,\\n        address recipient,\\n        uint64 projectId,\\n        uint32 startEditionNumber,\\n        uint32 nbEditions\\n    ) external onlyRole(MINTER_ROLE) {\\n        for (uint32 i = 0; i < nbEditions; ) {\\n            _mintSeries(\\n                creator,\\n                recipient,\\n                projectId,\\n                startEditionNumber + i,\\n                false,\\n                \\\"\\\"\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-mintSeriesBatch1}.\\n     */\\n    function mintSeriesBatch1(\\n        address creator,\\n        address recipient,\\n        uint64 projectId,\\n        uint32 startEditionNumber,\\n        uint32 nbEditions,\\n        bool[] calldata isFullTokenURIs,\\n        string[] calldata tokenURIData\\n    ) external onlyRole(MINTER_ROLE) {\\n        if (\\n            isFullTokenURIs.length != nbEditions ||\\n            tokenURIData.length != nbEditions\\n        ) {\\n            revert ArrayLengthMismatch(address(this));\\n        }\\n\\n        for (uint32 i = 0; i < nbEditions; ) {\\n            _mintSeries(\\n                creator,\\n                recipient,\\n                projectId,\\n                startEditionNumber + i,\\n                isFullTokenURIs[i],\\n                tokenURIData[i]\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-mintSeriesBatchN}.\\n     */\\n    function mintSeriesBatchN(\\n        address creator,\\n        address[] calldata recipients,\\n        uint64[] calldata projectIds,\\n        uint32[] calldata editionNumbers\\n    ) external onlyRole(MINTER_ROLE) {\\n        uint256 batchSize = recipients.length;\\n        if (\\n            projectIds.length != batchSize || editionNumbers.length != batchSize\\n        ) {\\n            revert ArrayLengthMismatch(address(this));\\n        }\\n\\n        for (uint256 i = 0; i < batchSize; ) {\\n            _mintSeries(\\n                creator,\\n                recipients[i],\\n                projectIds[i],\\n                editionNumbers[i],\\n                false,\\n                \\\"\\\"\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-mintSeriesBatchN}.\\n     */\\n    function mintSeriesBatchN(\\n        address creator,\\n        address[] calldata recipients,\\n        uint64[] calldata projectIds,\\n        uint32[] calldata editionNumbers,\\n        bool[] calldata isFullTokenURIs,\\n        string[] calldata tokenURIData\\n    ) external onlyRole(MINTER_ROLE) {\\n        uint256 batchSize = recipients.length;\\n        if (\\n            projectIds.length != batchSize ||\\n            editionNumbers.length != batchSize ||\\n            isFullTokenURIs.length != batchSize ||\\n            tokenURIData.length != batchSize\\n        ) {\\n            revert ArrayLengthMismatch(address(this));\\n        }\\n\\n        for (uint256 i = 0; i < batchSize; ) {\\n            _mintSeries(\\n                creator,\\n                recipients[i],\\n                projectIds[i],\\n                editionNumbers[i],\\n                isFullTokenURIs[i],\\n                tokenURIData[i]\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-mintSingle}.\\n     */\\n    function mintSingle(\\n        address creator,\\n        address recipient,\\n        uint64 projectId,\\n        bool isFullTokenURI,\\n        string memory tokenURIData\\n    ) public onlyRole(MINTER_ROLE) {\\n        if (recipient == address(0)) {\\n            revert ZeroAddressNotAllowed(address(this));\\n        }\\n        if (projectId == 0) {\\n            revert ProjectIdMustBePositive(address(this));\\n        }\\n\\n        uint96 editionId = createEditionId(projectId, 1);\\n\\n        if (_mintedEditionIdMap[editionId]) {\\n            revert EditionAlreadyMinted(address(this));\\n        }\\n        if (_seriesMap[projectId].hasEntry) {\\n            revert ProjectIsMintedAsSeries(address(this));\\n        }\\n\\n        _mintedEditionIdMap[editionId] = true;\\n\\n        uint256 tokenId = IERC721CreatorCore(creator).mintExtension(recipient);\\n\\n        if (bytes(tokenURIData).length != 0) {\\n            if (isFullTokenURI) {\\n                _fullTokenURIMap[creator][tokenId] = tokenURIData;\\n            } else {\\n                _tokenURISuffixMap[creator][tokenId] = tokenURIData;\\n            }\\n        }\\n\\n        _editionIdMap[creator][tokenId] = editionId;\\n\\n        emit EditionMinted(creator, tokenId, projectId, 1);\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-mintSingleBatch}.\\n     */\\n    function mintSingleBatch(\\n        address creator,\\n        address[] calldata recipients,\\n        uint64[] calldata projectIds\\n    ) external onlyRole(MINTER_ROLE) {\\n        uint256 batchSize = recipients.length;\\n        if (projectIds.length != batchSize) {\\n            revert ArrayLengthMismatch(address(this));\\n        }\\n\\n        for (uint256 i = 0; i < batchSize; ) {\\n            mintSingle(creator, recipients[i], projectIds[i], false, \\\"\\\");\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-mintSingleBatch}.\\n     */\\n    function mintSingleBatch(\\n        address creator,\\n        address[] calldata recipients,\\n        uint64[] calldata projectIds,\\n        bool[] calldata isFullTokenURIs,\\n        string[] calldata tokenURIData\\n    ) external onlyRole(MINTER_ROLE) {\\n        uint256 batchSize = recipients.length;\\n        if (\\n            projectIds.length != batchSize ||\\n            isFullTokenURIs.length != batchSize ||\\n            tokenURIData.length != batchSize\\n        ) {\\n            revert ArrayLengthMismatch(address(this));\\n        }\\n\\n        for (uint256 i = 0; i < batchSize; ) {\\n            mintSingle(\\n                creator,\\n                recipients[i],\\n                projectIds[i],\\n                isFullTokenURIs[i],\\n                tokenURIData[i]\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-setBaseTokenURI}.\\n     */\\n    function setBaseTokenURI(string calldata baseTokenURI)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _baseTokenURI = baseTokenURI;\\n        emit BaseTokenURISet(_baseTokenURI);\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-getBaseTokenURI}.\\n     */\\n    function getBaseTokenURI() external view returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-setDefaultTokenURIPrefix}.\\n     */\\n    function setDefaultTokenURIPrefix(string calldata defaultTokenURIPrefix_)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _defaultTokenURIPrefix = defaultTokenURIPrefix_;\\n        emit DefaultTokenURIPrefixSet(_defaultTokenURIPrefix);\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-getDefaultTokenURIPrefix}.\\n     */\\n    function getDefaultTokenURIPrefix() external view returns (string memory) {\\n        return _defaultTokenURIPrefix;\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-setTokenURIData}.\\n     */\\n    function setTokenURIData(\\n        address creator,\\n        uint256 tokenId,\\n        bool isFullTokenURI,\\n        string calldata tokenURIData\\n    ) public onlyRole(MINTER_ROLE) {\\n        if (_editionIdMap[creator][tokenId] == 0) {\\n            revert TokenNotFound(address(this));\\n        }\\n        if (isFullTokenURI) {\\n            _fullTokenURIMap[creator][tokenId] = tokenURIData;\\n        } else {\\n            _tokenURISuffixMap[creator][tokenId] = tokenURIData;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-setTokenURIDataBatch}.\\n     */\\n    function setTokenURIDataBatch(\\n        address creator,\\n        uint256[] calldata tokenIds,\\n        bool[] calldata isFullTokenURIs,\\n        string[] calldata tokenURIData\\n    ) external onlyRole(MINTER_ROLE) {\\n        uint256 batchSize = tokenIds.length;\\n        if (\\n            isFullTokenURIs.length != batchSize ||\\n            tokenURIData.length != batchSize\\n        ) {\\n            revert ArrayLengthMismatch(address(this));\\n        }\\n\\n        for (uint256 i = 0; i < batchSize; ) {\\n            setTokenURIData(\\n                creator,\\n                tokenIds[i],\\n                isFullTokenURIs[i],\\n                tokenURIData[i]\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-getTokenURISuffix}.\\n     */\\n    function getTokenURISuffix(address creator, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        return _tokenURISuffixMap[creator][tokenId];\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-getFullTokenURI}.\\n     */\\n    function getFullTokenURI(address creator, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        return _fullTokenURIMap[creator][tokenId];\\n    }\\n\\n    /**\\n     * @dev See {ICreatorExtensionTokenURI-tokenURI}.\\n     *\\n     * Refer to the 'Token URI Generation' section in {ITokengateManifoldExtension} for more information.\\n     */\\n    function tokenURI(address creator, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        string memory fullTokenURI = _fullTokenURIMap[creator][tokenId];\\n        if (bytes(fullTokenURI).length != 0) {\\n            return fullTokenURI;\\n        }\\n\\n        (uint64 projectId, uint32 editionNumber) = splitEditionId(\\n            _editionIdMap[creator][tokenId]\\n        );\\n\\n        Series memory series = _seriesMap[projectId];\\n        if (series.hasEntry) {\\n            return\\n                getSeriesTokenURI(creator, tokenId, projectId, editionNumber);\\n        }\\n\\n        string memory tokenURISuffix = _tokenURISuffixMap[creator][tokenId];\\n        if (bytes(tokenURISuffix).length != 0) {\\n            return\\n                string(\\n                    abi.encodePacked(_defaultTokenURIPrefix, tokenURISuffix)\\n                );\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _baseTokenURI,\\n                    toString(creator),\\n                    \\\"-\\\",\\n                    tokenId.toString()\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function used to generate the tokenURI for an edition of a series.\\n     */\\n    function getSeriesTokenURI(\\n        address creator,\\n        uint256 tokenId,\\n        uint64 projectId,\\n        uint32 editionNumber\\n    ) internal view returns (string memory) {\\n        string memory suffix = _tokenURISuffixMap[creator][tokenId];\\n        Series memory series = _seriesMap[projectId];\\n\\n        if (\\n            bytes(series.tokenURISuffix).length == 0 &&\\n            bytes(suffix).length == 0\\n        ) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        _baseTokenURI,\\n                        toString(creator),\\n                        \\\"-\\\",\\n                        tokenId.toString()\\n                    )\\n                );\\n        }\\n\\n        string memory tokenURIPrefix = getSeriesTokenURIPrefix(projectId);\\n\\n        if (bytes(suffix).length != 0) {\\n            return string(abi.encodePacked(tokenURIPrefix, suffix));\\n        }\\n\\n        if (series.addEditionToTokenURISuffix) {\\n            if (bytes(series.tokenURIExtension).length != 0) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            tokenURIPrefix,\\n                            series.tokenURISuffix,\\n                            uint256(editionNumber).toString(),\\n                            series.tokenURIExtension\\n                        )\\n                    );\\n            }\\n\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        tokenURIPrefix,\\n                        series.tokenURISuffix,\\n                        uint256(editionNumber).toString()\\n                    )\\n                );\\n        }\\n\\n        return string(abi.encodePacked(tokenURIPrefix, series.tokenURISuffix));\\n    }\\n\\n    /**\\n     * @dev Internal function used to determine the token URI prefix to use for an edition of a series.\\n     */\\n    function getSeriesTokenURIPrefix(uint64 projectId)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        Series memory series = _seriesMap[projectId];\\n\\n        if (bytes(series.tokenURIPrefix).length != 0) {\\n            return series.tokenURIPrefix;\\n        }\\n\\n        return _defaultTokenURIPrefix;\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-getTokenInfo}.\\n     */\\n    function getTokenInfo(address creator, uint256 tokenId)\\n        external\\n        view\\n        returns (uint64 projectId, uint32 editionNumber)\\n    {\\n        uint96 editionId = _editionIdMap[creator][tokenId];\\n        if (editionId == 0) {\\n            revert TokenNotFound(address(this));\\n        }\\n        (projectId, editionNumber) = splitEditionId(\\n            _editionIdMap[creator][tokenId]\\n        );\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-isSeries}.\\n     */\\n    function isSeries(uint64 projectId) external view returns (bool) {\\n        return _seriesMap[projectId].hasEntry;\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-isMinted}.\\n     */\\n    function isMinted(uint64 projectId, uint32 editionNumber)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _mintedEditionIdMap[createEditionId(projectId, editionNumber)];\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-createEditionId}.\\n     */\\n    function createEditionId(uint64 projectId, uint32 editionNumber)\\n        public\\n        pure\\n        returns (uint96)\\n    {\\n        uint96 editionId = projectId;\\n        editionId = editionId << 32;\\n        editionId = editionId + editionNumber;\\n        return editionId;\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-splitEditionId}.\\n     */\\n    function splitEditionId(uint96 editionId)\\n        public\\n        pure\\n        returns (uint64 projectId, uint32 editionNumber)\\n    {\\n        projectId = uint64(editionId >> 32);\\n        editionNumber = uint32(editionId);\\n    }\\n\\n    /**\\n     * @dev See {ITokengateManifoldExtension-getRoleMembers}.\\n     */\\n    function getRoleMembers(bytes32 role)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 roleCount = getRoleMemberCount(role);\\n        address[] memory members = new address[](roleCount);\\n        for (uint256 i = 0; i < roleCount; ) {\\n            members[i] = getRoleMember(role, i);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return members;\\n    }\\n\\n    /**\\n     * @dev Convert an address to a string.\\n     */\\n    function toString(address addr) public pure returns (string memory) {\\n        uint256 data = uint256(uint160(addr));\\n        return data.toHexString();\\n    }\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC721 creator interface\\n */\\ninterface IERC721CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenIds minted\\n     */\\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev burn a token. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(uint256 tokenId) external;\\n\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/extensions/CreatorExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Base creator extension variables\\n */\\nabstract contract CreatorExtension is ERC165 {\\n\\n    /**\\n     * @dev Legacy extension interface identifiers\\n     *\\n     * {IERC165-supportsInterface} needs to return 'true' for this interface\\n     * in order backwards compatible with older creator contracts\\n     */\\n    bytes4 constant internal LEGACY_EXTENSION_INTERFACE = 0x7005caad;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\n        return interfaceId == LEGACY_EXTENSION_INTERFACE\\n            || super.supportsInterface(interfaceId);\\n    }\\n    \\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable URI's\\n */\\ninterface ICreatorExtensionTokenURI is IERC165 {\\n\\n    /**\\n     * Get the uri for a given creator/tokenId\\n     */\\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ITokengateManifoldExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title An extension for Manifold Creator contracts that allows the various NFT marketplaces run by\\n * DSENT AG to mint tokens on behalf of a creator. The extension ensures that only a limited number of\\n * editions can be minted for any given project. A project in the context of this extension serves as\\n * a general term for a wide range of collectibles such as artworks, PFPs, club memberships, etc.\\n * Projects can either be minted as single editions or editions of a series with a predefined maximum size.\\n *\\n * @author DSENT AG, www.dsent.com\\n *\\n * Token URI Generation:\\n * ---------------------\\n * The logic used to generate a URI for a specified token id uses one of three approaches\\n * based on the provided token URI data. Token URI data is always specified using `isFullTokenURI` and\\n * `tokenURIData` parameters. If `isFullTokenURI == true` then `tokenURIData` will be interpreted as a\\n * complete token URI and no further concatenation logic will be applied. For `isFullTokenURI == false`\\n * the `tokenURIData` is used as a URI suffix and is concatenated with a URI prefix to form a complete\\n * token URI.\\n *\\n * Token URI data can either be specified during minting or afterwards using either `setTokenURIData()`\\n * or its batch variant `setTokenURIDataBatch()`.\\n *\\n * The three approaches for URI generation work as follows:\\n *\\n * 1. If no specific token URI data is specified, the base token URI is concatenated with the creator\\n * address and the token id to form a complete URI.\\n *\\n * 2. If a token URI suffix is specified for a given token, then that suffix gets concatenated with\\n * a token URI prefix to form a complete URI.\\n *\\n * For all single editions the token URI prefix is read from the default token URI prefix variable.\\n * Editions of a series on the other hand can use an optional override of the default prefix that\\n * can be specified during `createSeries()` or `setSeriesParams()` calls.\\n *\\n * A token URI suffix can be defined directly on the token level using the URI data parameters\\n * of the minting or `setTokenURIData()`/`setTokenURIDataBatch()` calls. Alternatively, it is also possible to\\n * to define a suffix that applies to all editions of a series. Such a suffix can be specified during\\n * `createSeries()` or `setSeriesParams()` calls. In the case of a series it is further possible to set\\n * `addEditionToTokenURISuffix = true`, which will cause the concatenation logic to append the\\n * edition number to the specified suffix. If necessary, an optional `tokenURIExtension` can be\\n * specified, in order to append an additional extension after the edition number. This is useful if\\n * an endpoint has no proper support for Content-Type headers.\\n *\\n * It is important to understand that a suffix defined on the token level will always take precedence\\n * over one defined on a series level.\\n *\\n * 3. If a full token URI is specified for a given token, then that full URI takes precedence over\\n * everything else. It will override a suffix that might be specified for that token.\\n *\\n * A full token URI must be defined directly on the token level using the URI data parameters\\n * of the minting or `setTokenURIData()`/`setTokenURIDataBatch()` calls.\\n */\\ninterface ITokengateManifoldExtension is IERC165 {\\n    /**\\n     * @dev Event that is emitted when a new single edition or an edition of a series is minted.\\n     */\\n    event EditionMinted(\\n        address indexed creator,\\n        uint256 indexed tokenId,\\n        uint64 indexed projectId,\\n        uint32 editionNumber\\n    );\\n\\n    /**\\n     * @dev Event that is emitted when a new series with a predefined edition size is created.\\n     */\\n    event SeriesCreated(uint64 indexed projectId);\\n\\n    /**\\n     * @dev Event that is emitted when the parameters of a series are changed that drive the\\n     * token URI generation of the editions belonging to that series.\\n     */\\n    event SeriesParamsSet(uint64 indexed projectId);\\n\\n    /**\\n     * @dev Event that is emitted when the base token URI is changed that is used during tokenURI\\n     * generation. The base token URI is used for editions that have neither a token URI suffix nor\\n     * a full token URI specified.\\n     */\\n    event BaseTokenURISet(string baseTokenURI);\\n\\n    /**\\n     * @dev Event that is emitted when the default token URI prefix is changed that is used during\\n     * token URI generation. The default token URI prefix is used for editions that have a token URI suffix\\n     * defined.\\n     */\\n    event DefaultTokenURIPrefixSet(string defaultTokenURIPrefix);\\n\\n    /**\\n     * @dev Error that occurs when specifying a project id of zero.\\n     */\\n    error ProjectIdMustBePositive(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when creating a series that does not consist of at least two editions.\\n     */\\n    error EditionSizeMustBeGreaterThanOne(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when minting a token of a series with an edition number of zero.\\n     */\\n    error EditionNumberMustBePositive(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when minting a token of a series with an edition number that is larger\\n     * than the maximum allowed size for that series.\\n     */\\n    error EditionNumberExceedsEditionSize(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when creating a series with a project id that belongs to an already\\n     * existing series.\\n     */\\n    error SeriesAlreadyCreated(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when creating a series for a project id that was already used to mint\\n     * a single edition.\\n     */\\n    error ProjectIsMintedAsSingleEdition(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when minting an edition for a project id and edition number\\n     * that is already used by another single edition or an edition of a series.\\n     */\\n    error EditionAlreadyMinted(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when minting a single edition for a project id that was already used\\n     * to create a series.\\n     */\\n    error ProjectIsMintedAsSeries(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when specifying a project id that does not belong to any of the\\n     * created series.\\n     */\\n    error SeriesNotFound(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when specifying the 0x0 address.\\n     */\\n    error ZeroAddressNotAllowed(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when the length of the parameter arrays used in a batch operation\\n     * do not match.\\n     */\\n    error ArrayLengthMismatch(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when specifying a token id that does not exist.\\n     */\\n    error TokenNotFound(address emitter);\\n\\n    /**\\n     * @dev Custom type that is used to represent a series of limited edition tokens belonging to\\n     * a certain project. Series are always referenced by the project id that they belong to.\\n     */\\n    struct Series {\\n        /**\\n         * @dev Variable that stores whether a series was created for a given project id.\\n         */\\n        bool hasEntry;\\n        /**\\n         * @dev Variable that stores the maximum number of editions that can be minted for the series.\\n         */\\n        uint32 editionSize;\\n        /**\\n         * @dev Variable that stores the number of editions that have been minted for the series.\\n         */\\n        uint32 editionCount;\\n        /**\\n         * @dev Variable that stores an optional override for the default token URI prefix that is used\\n         * for all editions of the series.\\n         *\\n         * Refer to the 'Token URI Generation' section above for more information on this variable.\\n         */\\n        string tokenURIPrefix;\\n        /**\\n         * @dev Variable that stores an optional token URI suffix that is used for all editions of\\n         * the series.\\n         *\\n         * Refer to the 'Token URI Generation' section above for more information on this variable.\\n         */\\n        string tokenURISuffix;\\n        /**\\n         * @dev Variable that controls whether the edition number is to be added to the token URI suffix\\n         * during token URI generation or not.\\n         *\\n         * Refer to the 'Token URI Generation' section above for more information on this variable.\\n         */\\n        bool addEditionToTokenURISuffix;\\n        /**\\n         * @dev Variable that stores an optional extension to add to the edition number during\\n         * token URI generation. Setting this value only makes sense when `addEditionToTokenURISuffix == true`.\\n         *\\n         * Refer to the 'Token URI Generation' section above for more information on this variable.\\n         */\\n        string tokenURIExtension;\\n    }\\n\\n    /**\\n     * @dev Create a new series of limited edition tokens belonging to a certain project.\\n     */\\n    function createSeries(\\n        uint64 projectId,\\n        uint32 editionSize,\\n        string calldata tokenURIPrefix,\\n        string calldata tokenURISuffix,\\n        bool addEditionToTokenURISuffix,\\n        string calldata tokenURIExtension\\n    ) external;\\n\\n    /**\\n     * @dev Set the parameters of a series that drive the token URI generation of its editions.\\n     */\\n    function setSeriesParams(\\n        uint64 projectId,\\n        string calldata tokenURIPrefix,\\n        string calldata tokenURISuffix,\\n        bool addEditionToTokenURISuffix,\\n        string calldata tokenURIExtension\\n    ) external;\\n\\n    /**\\n     * @dev Get the custom type that stores all the state variables for the specified series.\\n     */\\n    function getSeries(uint64 projectId) external view returns (Series memory);\\n\\n    /**\\n     * @dev Mint a new edition for the series specified by the project id.\\n     *\\n     * Note: If no custom token URI data is required, use `isFullTokenURI = false` and `tokenURIData = ''`\\n     */\\n    function mintSeries(\\n        address creator,\\n        address recipient,\\n        uint64 projectId,\\n        uint32 editionNumber,\\n        bool isFullTokenURI,\\n        string calldata tokenURIData\\n    ) external;\\n\\n    /**\\n     * @dev Batch mint new editions to a single recipient for the series specified by the project id.\\n     * This function overload does not take any custom token URI data for the editions to mint.\\n     */\\n    function mintSeriesBatch1(\\n        address creator,\\n        address recipient,\\n        uint64 projectId,\\n        uint32 startEditionNumber,\\n        uint32 nbEditions\\n    ) external;\\n\\n    /**\\n     * @dev Batch mint new editions to a single recipient for the series specified by the project id.\\n     * This function overload takes custom token URI data for the editions to mint.\\n     */\\n    function mintSeriesBatch1(\\n        address creator,\\n        address recipient,\\n        uint64 projectId,\\n        uint32 startEditionNumber,\\n        uint32 nbEditions,\\n        bool[] calldata isFullTokenURIs,\\n        string[] calldata tokenURIData\\n    ) external;\\n\\n    /**\\n     * @dev Batch mint new editions to multiple recipients for the series specified by the project id.\\n     * This function overload does not take any custom token URI data for the editions to mint.\\n     */\\n    function mintSeriesBatchN(\\n        address creator,\\n        address[] calldata recipients,\\n        uint64[] calldata projectIds,\\n        uint32[] calldata editionNumbers\\n    ) external;\\n\\n    /**\\n     * @dev Batch mint new editions to multiple recipients for the series specified by the project id.\\n     * This function overload takes custom token URI data for the editions to mint.\\n     */\\n    function mintSeriesBatchN(\\n        address creator,\\n        address[] calldata recipients,\\n        uint64[] calldata projectIds,\\n        uint32[] calldata editionNumbers,\\n        bool[] calldata isFullTokenURIs,\\n        string[] calldata tokenURIData\\n    ) external;\\n\\n    /**\\n     * @dev Mint a new single edition for the specified project id.\\n     *\\n     * Note: If no custom token URI data is required, use `isFullTokenURI = false` and `tokenURIData = ''`\\n     */\\n    function mintSingle(\\n        address creator,\\n        address recipient,\\n        uint64 projectId,\\n        bool isFullTokenURI,\\n        string calldata tokenURIData\\n    ) external;\\n\\n    /**\\n     * @dev Batch mint new single editions to multiple recipients for the specified project ids.\\n     * This function overload does not take any custom token URI data for the editions to mint.\\n     */\\n    function mintSingleBatch(\\n        address creator,\\n        address[] calldata recipients,\\n        uint64[] calldata projectIds\\n    ) external;\\n\\n    /**\\n     * @dev Batch mint new single editions to multiple recipients for the specified project ids.\\n     * This function overload takes custom token URI data for the editions to mint.\\n     */\\n    function mintSingleBatch(\\n        address creator,\\n        address[] calldata recipients,\\n        uint64[] calldata projectIds,\\n        bool[] calldata isFullTokenURIs,\\n        string[] calldata tokenURIData\\n    ) external;\\n\\n    /**\\n     * @dev Set the base token URI that is used during token URI generation. The base token URI is\\n     * used for editions that have neither a token URI suffix nor a full token URI specified.\\n     */\\n    function setBaseTokenURI(string calldata baseTokenURI) external;\\n\\n    /**\\n     * @dev Get the base token URI that is used during token URI generation. The base token URI is\\n     * used for editions that have neither a token URI suffix nor a full token URI specified.\\n     */\\n    function getBaseTokenURI() external view returns (string memory);\\n\\n    /**\\n     * @dev Set the default token URI prefix that is used during token URI generation. The default\\n     * token URI prefix is used for editions that have a token URI suffix defined.\\n     */\\n    function setDefaultTokenURIPrefix(string calldata defaultTokenURIPrefix)\\n        external;\\n\\n    /**\\n     * @dev Get the default token URI prefix that is used during token URI generation. The default\\n     * token URI prefix is used for editions that have a token URI suffix defined.\\n     */\\n    function getDefaultTokenURIPrefix() external view returns (string memory);\\n\\n    /**\\n     * @dev Set either a full token URI (if `isFullTokenURI == true`) or a token URI suffix (if `isFullTokenURI == false`)\\n     * for the specified token id.\\n     *\\n     * Note: Specifying a full token URI always takes precedence over any other token URI generation\\n     * logic. If a currently active full token URI is to be replaced by a token URI suffix, make sure\\n     * to reset the full token URI value before by specifying an empty string '' in `tokenURIData`.\\n     *\\n     * Refer to the 'Token URI Generation' section above for more information.\\n     */\\n    function setTokenURIData(\\n        address creator,\\n        uint256 tokenId,\\n        bool isFullTokenURI,\\n        string calldata tokenURIData\\n    ) external;\\n\\n    /**\\n     * @dev Batch set either full token URIs (if `isFullTokenURI == true`) or token URI suffixes (if `isFullTokenURI == false`)\\n     * for the specified token ids.\\n     *\\n     * Note: Specifying a full token URI always takes precedence over any other token URI generation\\n     * logic. If a currently active full token URI is to be replaced by a token URI suffix, make sure\\n     * to reset the full token URI value before by specifying an empty string '' in `tokenURIData`.\\n     *\\n     * Refer to the 'Token URI Generation' section above for more information.\\n     */\\n    function setTokenURIDataBatch(\\n        address creator,\\n        uint256[] calldata tokenIds,\\n        bool[] calldata isFullTokenURIs,\\n        string[] calldata tokenURIData\\n    ) external;\\n\\n    /**\\n     * @dev Get the token URI suffix for the specified token id if one has been set.\\n     */\\n    function getTokenURISuffix(address creator, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @dev Get the full token URI for the specified token id if one has been set.\\n     */\\n    function getFullTokenURI(address creator, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @dev Get the token info consisting of the project id and edition number for the specified token id.\\n     */\\n    function getTokenInfo(address creator, uint256 tokenId)\\n        external\\n        view\\n        returns (uint64 projectId, uint32 editionNumber);\\n\\n    /**\\n     * @dev Check whether a series has been created for the specified project id.\\n     */\\n    function isSeries(uint64 projectId) external view returns (bool);\\n\\n    /**\\n     * @dev Check whether an edition has been minted for the specified project id and edition number.\\n     */\\n    function isMinted(uint64 projectId, uint32 editionNumber)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Create an edition id by bit shifting a 64-bit project id with a 32-bit edition number into a 96-bit uint.\\n     */\\n    function createEditionId(uint64 projectId, uint32 editionNumber)\\n        external\\n        pure\\n        returns (uint96);\\n\\n    /**\\n     * @dev Split an edition id by bit shifting the 96-bit uint into a 64-bit project id and a 32-bit edition number.\\n     */\\n    function splitEditionId(uint96 editionId)\\n        external\\n        pure\\n        returns (uint64 projectId, uint32 editionNumber);\\n\\n    /**\\n     * @dev Get all addresses that are granted the specified role.\\n     */\\n    function getRoleMembers(bytes32 role)\\n        external\\n        view\\n        returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n\\n    event ExtensionRegistered(address indexed extension, address indexed sender);\\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions) external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    \\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"defaultTokenURIPrefix\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"EditionAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"EditionNumberExceedsEditionSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"EditionNumberMustBePositive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"EditionSizeMustBeGreaterThanOne\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"ProjectIdMustBePositive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"ProjectIsMintedAsSeries\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"ProjectIsMintedAsSingleEdition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"SeriesAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"SeriesNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"TokenNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"BaseTokenURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"defaultTokenURIPrefix\",\"type\":\"string\"}],\"name\":\"DefaultTokenURIPrefixSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"editionNumber\",\"type\":\"uint32\"}],\"name\":\"EditionMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"}],\"name\":\"SeriesCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"}],\"name\":\"SeriesParamsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"editionNumber\",\"type\":\"uint32\"}],\"name\":\"createEditionId\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"editionSize\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURISuffix\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"addEditionToTokenURISuffix\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenURIExtension\",\"type\":\"string\"}],\"name\":\"createSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultTokenURIPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFullTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"}],\"name\":\"getSeries\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasEntry\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"editionSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"editionCount\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURISuffix\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"addEditionToTokenURISuffix\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenURIExtension\",\"type\":\"string\"}],\"internalType\":\"struct ITokengateManifoldExtension.Series\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"editionNumber\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenURISuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"editionNumber\",\"type\":\"uint32\"}],\"name\":\"isMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"}],\"name\":\"isSeries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"editionNumber\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isFullTokenURI\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenURIData\",\"type\":\"string\"}],\"name\":\"mintSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"startEditionNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nbEditions\",\"type\":\"uint32\"}],\"name\":\"mintSeriesBatch1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"startEditionNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nbEditions\",\"type\":\"uint32\"},{\"internalType\":\"bool[]\",\"name\":\"isFullTokenURIs\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIData\",\"type\":\"string[]\"}],\"name\":\"mintSeriesBatch1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"projectIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint32[]\",\"name\":\"editionNumbers\",\"type\":\"uint32[]\"}],\"name\":\"mintSeriesBatchN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"projectIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint32[]\",\"name\":\"editionNumbers\",\"type\":\"uint32[]\"},{\"internalType\":\"bool[]\",\"name\":\"isFullTokenURIs\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIData\",\"type\":\"string[]\"}],\"name\":\"mintSeriesBatchN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFullTokenURI\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenURIData\",\"type\":\"string\"}],\"name\":\"mintSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"projectIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bool[]\",\"name\":\"isFullTokenURIs\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIData\",\"type\":\"string[]\"}],\"name\":\"mintSingleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"projectIds\",\"type\":\"uint64[]\"}],\"name\":\"mintSingleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"defaultTokenURIPrefix_\",\"type\":\"string\"}],\"name\":\"setDefaultTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURISuffix\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"addEditionToTokenURISuffix\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenURIExtension\",\"type\":\"string\"}],\"name\":\"setSeriesParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFullTokenURI\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenURIData\",\"type\":\"string\"}],\"name\":\"setTokenURIData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isFullTokenURIs\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIData\",\"type\":\"string[]\"}],\"name\":\"setTokenURIDataBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"editionId\",\"type\":\"uint96\"}],\"name\":\"splitEditionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"projectId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"editionNumber\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokengateManifoldExtension", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002968747470733a2f2f63646e2e746f6b656e676174652e6172742f746f6b656e2d6d657461646174612f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001468747470733a2f2f617277656176652e6e65742f000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}