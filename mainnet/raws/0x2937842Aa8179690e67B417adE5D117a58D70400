{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.9.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC721Opt.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nerror ApprovalCallerNotOwnerNorApproved();\r\nerror ApprovalQueryForNonexistentToken();\r\nerror ApproveToCaller();\r\nerror ApprovalToCurrentOwner();\r\nerror BalanceQueryForZeroAddress();\r\nerror MintToZeroAddress();\r\nerror MintToDeadAddress();\r\nerror MintZeroQuantity();\r\nerror OwnerIndexOutOfBounds();\r\nerror OwnerQueryForNonexistentToken();\r\nerror TokenIndexOutOfBounds();\r\nerror TransferCallerNotOwnerNorApproved();\r\nerror TransferFromIncorrectOwner();\r\nerror TransferToNonERC721ReceiverImplementer();\r\nerror TransferToZeroAddress();\r\nerror TransferToDeadAddress();\r\nerror UnableGetTokenOwnerByIndex();\r\nerror URIQueryForNonexistentToken();\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at 1 (e.g. 1, 2, 3..).\r\n */\r\ncontract ERC721Opt is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    uint256 internal _nextTokenId = 1;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owners details\r\n    // An empty struct value does not necessarily mean the token is unowned. See ownerOf implementation for details.\r\n    mapping(uint256 => address) internal _owners;\r\n\r\n    // Mapping owner address to balances\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Address to use for burned accounting\r\n    address constant DEAD_ADDR = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        // Counter underflow is impossible as burned cannot be incremented\r\n        // more than _nextTokenId - 1 times\r\n        unchecked {\r\n            return (_nextTokenId - 1) - balanceOf(DEAD_ADDR);    \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address owner) {\r\n        if (!_exists(tokenId)) revert OwnerQueryForNonexistentToken();\r\n\r\n        unchecked {\r\n            for (uint256 curr = tokenId;; curr--) {\r\n                owner = _owners[curr];\r\n                if (owner != address(0)) {\r\n                    return owner;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) revert ApprovalCallerNotOwnerNorApproved();\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        if (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n        if (!_checkOnERC721Received(from, to, tokenId, _data)) revert TransferToNonERC721ReceiverImplementer();\r\n    }\r\n\r\n    function _isApprovedOrOwner(address sender, uint256 tokenId) internal view virtual returns (bool) {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        return (sender == owner ||\r\n            getApproved(tokenId) == sender ||\r\n            isApprovedForAll(owner, sender));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return tokenId > 0 && tokenId < _nextTokenId && _owners[tokenId] != DEAD_ADDR;\r\n    }\r\n    \r\n    function _mint(address to, uint256 quantity) internal virtual {\r\n        _mint(to, quantity, '', false);\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal virtual {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, quantity, _data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data,\r\n        bool safe\r\n    ) internal virtual {\r\n        uint256 startTokenId = _nextTokenId;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (to == DEAD_ADDR) revert MintToDeadAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance overflow if current value + quantity > 1.56e77 (2**256) - 1\r\n        // updatedIndex overflows if _nextTokenId + quantity > 1.56e77 (2**256) - 1\r\n        unchecked {\r\n            _balances[to] += quantity;\r\n\r\n            _owners[startTokenId] = to;\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n\r\n            for (uint256 i; i < quantity; i++) {\r\n                emit Transfer(address(0), to, updatedIndex);\r\n                if (safe) {\r\n                    if (!_checkOnERC721Received(address(0), to, updatedIndex, _data)) revert TransferToNonERC721ReceiverImplementer();\r\n                }\r\n\r\n                updatedIndex++;\r\n            }\r\n\r\n            _nextTokenId = updatedIndex;\r\n        }\r\n\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == owner ||\r\n            isApprovedForAll(owner, _msgSender()) ||\r\n            getApproved(tokenId) == _msgSender());\r\n\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        if (owner != from) revert TransferFromIncorrectOwner();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n        if (to == DEAD_ADDR) revert TransferToDeadAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, owner);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // owner above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _balances[from] -= 1;\r\n            _balances[to] += 1;\r\n\r\n            _owners[tokenId] = to;\r\n\r\n            // If the owner slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            \r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_owners[nextTokenId] == address(0)) {\r\n                // This will suffice for checking _exists(nextTokenId), \r\n                // as a burned slot cannot contain the zero address.\r\n                if (nextTokenId < _nextTokenId) {\r\n                    _owners[nextTokenId] = owner;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfers(owner, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, owner);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // owner above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _balances[owner] -= 1;\r\n            _balances[DEAD_ADDR] += 1;\r\n\r\n            _owners[tokenId] = DEAD_ADDR;\r\n\r\n            // If the owner slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            \r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_owners[nextTokenId] == address(0)) {\r\n                // This will suffice for checking _exists(nextTokenId), \r\n                // as a burned slot cannot contain the zero address.\r\n                if (nextTokenId < _nextTokenId) { \r\n                    _owners[nextTokenId] = owner;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n        _afterTokenTransfers(owner, address(0), tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) revert TransferToNonERC721ReceiverImplementer();\r\n                else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/extensions/ERC721OptOwnersExplicit.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nerror AllOwnersHaveBeenSet();\r\nerror QuantityMustBeNonZero();\r\nerror NoTokensMintedYet();\r\n\r\nabstract contract ERC721OptOwnersExplicit is ERC721Opt {\r\n    uint256 public nextOwnerToExplicitlySet = 1;\r\n\r\n    /**\r\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\r\n     */\r\n    function _setOwnersExplicit(uint256 quantity) internal {\r\n        if (quantity == 0) revert QuantityMustBeNonZero();\r\n        if (_nextTokenId == 1) revert NoTokensMintedYet();\r\n        uint256 _nextOwnerToExplicitlySet = nextOwnerToExplicitlySet;\r\n        if (_nextOwnerToExplicitlySet >= _nextTokenId) revert AllOwnersHaveBeenSet();\r\n\r\n        // Index underflow is impossible.\r\n        // Counter or index overflow is incredibly unrealistic.\r\n        unchecked {\r\n            uint256 endIndex = _nextOwnerToExplicitlySet + quantity - 1;\r\n\r\n            // Set the end index to be the last token index\r\n            if (endIndex + 1 > _nextTokenId) {\r\n                endIndex = _nextTokenId - 1;\r\n            }\r\n\r\n            for (uint256 i = _nextOwnerToExplicitlySet; i <= endIndex; i++) {\r\n                if (_owners[i] == address(0) && _owners[i] != DEAD_ADDR) {\r\n                    address ownership = ownerOf(i);\r\n                    _owners[i] = ownership;\r\n                }\r\n            }\r\n\r\n            nextOwnerToExplicitlySet = endIndex + 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/extensions/ERC721OptBurnable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nerror BurnCallerNotOwnerNorApproved();\r\n\r\n/**\r\n * @title ERC721Opt Burnable Token\r\n * @dev ERC721Opt Token that can be irreversibly burned (destroyed).\r\n */\r\nabstract contract ERC721OptBurnable is ERC721Opt {\r\n\r\n    /**\r\n     * @dev Burns `tokenId`. See {ERC721Opt-_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own `tokenId` or be an approved operator.\r\n     */\r\n    function burn(uint256 tokenId) public virtual {\r\n        if (!_isApprovedOrOwner(_msgSender(), tokenId)) revert BurnCallerNotOwnerNorApproved();\r\n        _burn(tokenId);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/extensions/ERC721OptBatchBurnable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @title ERC721Opt Batch Burnable Token\r\n * @dev ERC721Opt Token that can be irreversibly batch burned (destroyed).\r\n */\r\nabstract contract ERC721OptBatchBurnable is ERC721OptBurnable {\r\n    /**\r\n     * @dev Perform burn on a batch of tokens\r\n     */\r\n    function batchBurn(uint16[] memory tokenIds) public virtual {\r\n        for (uint16 i = 0; i < tokenIds.length; ++i) {\r\n            if (!_isApprovedOrOwner(_msgSender(), tokenIds[i])) revert BurnCallerNotOwnerNorApproved();\r\n            _burn(tokenIds[i]);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/extensions/ERC721OptBatchTransferable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @title ERC721Opt Batch Transferable Token\r\n * @dev ERC721Opt Token that can be batch transfered\r\n*/\r\nabstract contract ERC721OptBatchTransferable is ERC721Opt {\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n    */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint16[] tokenIds\r\n    );\r\n\r\n    /**\r\n     * @dev Perform transferFrom on a batch of tokens\r\n     */\r\n    function batchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint16[] memory tokenIds\r\n    ) public virtual {\r\n        for (uint16 i = 0; i < tokenIds.length; ++i) {\r\n            if (!_isApprovedOrOwner(_msgSender(), tokenIds[i])) revert TransferCallerNotOwnerNorApproved();\r\n            transferFrom(from, to, tokenIds[i]);\r\n        }\r\n\r\n        emit TransferBatch(_msgSender(), from, to, tokenIds);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform safeTransferFrom on a batch of tokens\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint16[] memory tokenIds\r\n    ) public virtual {\r\n        safeBatchTransferFrom(from, to, tokenIds, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Perform safeTransferFrom on a batch of tokens\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint16[] memory tokenIds,\r\n        bytes memory _data\r\n    ) public virtual {\r\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\r\n            if (!_isApprovedOrOwner(_msgSender(), tokenIds[i])) revert TransferCallerNotOwnerNorApproved();\r\n            safeTransferFrom(from, to, tokenIds[i], _data);\r\n        }\r\n\r\n        emit TransferBatch(_msgSender(), from, to, tokenIds);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/OpenSea.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract OpenSeaOwnableDelegateProxy {}\r\n\r\ncontract OpenSeaProxyRegistry {\r\n    mapping(address => OpenSeaOwnableDelegateProxy) public proxies;\r\n}\r\n\r\n\r\n// File contracts/ApeSquadCharacterSheetNFT.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\nerror CharacterSheetTypeQueryForNonexistentToken();\r\nerror OnlyMintersCanMintCharacterSheets();\r\nerror InvalidPurchaseCharacterSheetTypeId();\r\nerror AllCharacterSheetsOfTypeMinted();\r\nerror NoCharacterSheetMintAmountProvided();\r\nerror InvalidUpdateCharacterSheetLengthsDontMatch();\r\nerror InvalidUpdateCharacterSheetTypeId();\r\n\r\ncontract ApeSquadCharacterSheetNFT is Ownable, ERC721Opt, ERC721OptOwnersExplicit, ERC721OptBatchBurnable, ERC721OptBatchTransferable {\r\n     using Strings for uint256;\r\n\r\n    struct CharacterSheetPurchase {\r\n        uint16 characterSheetTypeId;\r\n        uint16 amount;\r\n    }\r\n\r\n    struct CharacterSheetType {\r\n        string name;\r\n        uint16 maxCharacterSheets;\r\n        uint16 minted;\r\n    }\r\n\r\n    /* Base URI for token URIs */\r\n    string public baseURI;\r\n\r\n    /* OpenSea user account proxy */\r\n    address public openSeaProxyRegistryAddress;\r\n    \r\n    /* Minter addressess */\r\n    mapping(address => bool) public minters;\r\n\r\n    CharacterSheetType[] public characterSheetTypes;\r\n\r\n    /* mapping of each token id to characterSheet type */\r\n    mapping(uint256 => uint16) _tokenIdCharacterSheetTypes;\r\n    \r\n    /* mapping of each token id to rarity. 0 = common, 1 = rare, 2 = legendary */\r\n    mapping(uint256 => uint8) public characterSheetRarity;\r\n    \r\n    constructor(string memory name_, string memory symbol_, string memory _initialBaseURI, address _openSeaProxyRegistryAddress, address[] memory _minters) ERC721Opt(name_, symbol_) {\r\n        baseURI = _initialBaseURI;\r\n        openSeaProxyRegistryAddress = _openSeaProxyRegistryAddress;\r\n        \r\n        for (uint256 i; i < _minters.length; i++) {\r\n            minters[_minters[i]] = true;\r\n        }\r\n\r\n        _addCharacterSheet(\"Alex\", 250);\r\n        _addCharacterSheet(\"Borg\", 250);\r\n        _addCharacterSheet(\"Dax\", 250);\r\n        _addCharacterSheet(\"Kanoa\", 250);\r\n        _addCharacterSheet(\"Kazz\", 250);\r\n    }\r\n\r\n    /**\r\n     * @dev Get characterSheetType count\r\n     */\r\n    function characterSheetTypeCount() public view returns (uint256) {\r\n        return characterSheetTypes.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get characterSheets left for sale\r\n     */\r\n    function characterSheetsLeft(uint16 characterSheetTypeId) public view returns (uint256) {\r\n        return characterSheetTypes[characterSheetTypeId].maxCharacterSheets - characterSheetTypes[characterSheetTypeId].minted;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the characterSheet type for a specific tokenId\r\n     */\r\n    function tokenCharacterSheetType(uint256 tokenId) public view returns (string memory) {\r\n        if (!_exists(tokenId)) revert CharacterSheetTypeQueryForNonexistentToken();\r\n\r\n        return characterSheetTypes[_tokenIdCharacterSheetTypes[tokenId]].name;\r\n    }\r\n\r\n    /**\r\n     * @dev Override to if default approved for OS proxy accounts or normal approval\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        // Whitelist OpenSea proxy contract for easy trading.\r\n        OpenSeaProxyRegistry openSeaProxyRegistry = OpenSeaProxyRegistry(\r\n            openSeaProxyRegistryAddress\r\n        );\r\n        if (address(openSeaProxyRegistry.proxies(owner)) == operator) {\r\n            return true;\r\n        }\r\n\r\n        return ERC721Opt.isApprovedForAll(owner, operator);\r\n    }\r\n\r\n    /**\r\n     * @dev Override to change the baseURI used in tokenURI\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Override to change tokenURI format\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(_baseURI(), tokenId.toString(), '.json'))\r\n                : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Mint of specific characterSheet type to address. \r\n     */\r\n    function mint(address to, CharacterSheetPurchase[] calldata characterSheetPurchases) public {\r\n        if(!minters[msg.sender]) revert OnlyMintersCanMintCharacterSheets();\r\n\r\n        uint256 amountToMint;\r\n\r\n        uint256 tokenId = _nextTokenId;\r\n\r\n        for (uint16 i; i < characterSheetPurchases.length; i++) {\r\n            CharacterSheetPurchase memory p = characterSheetPurchases[i];\r\n\r\n            if(p.characterSheetTypeId >= characterSheetTypes.length) revert InvalidPurchaseCharacterSheetTypeId();\r\n\r\n            if(p.amount > characterSheetsLeft(characterSheetPurchases[i].characterSheetTypeId)) revert AllCharacterSheetsOfTypeMinted();\r\n\r\n            characterSheetTypes[p.characterSheetTypeId].minted += p.amount;\r\n            amountToMint += p.amount;\r\n\r\n            for (uint16 j; j < p.amount; j++) {\r\n                _tokenIdCharacterSheetTypes[tokenId++] = p.characterSheetTypeId;\r\n            }\r\n        }\r\n            \r\n        if(amountToMint == 0) revert NoCharacterSheetMintAmountProvided();\r\n        \r\n        _safeMint(to, amountToMint, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Mint of specific poster type to address. \r\n     */\r\n    function mintType(address to, uint16 characterSheetTypeId, uint16 amount) public {\r\n        if(!minters[msg.sender]) revert OnlyMintersCanMintCharacterSheets();\r\n            \r\n        if(amount == 0) revert NoCharacterSheetMintAmountProvided();\r\n\r\n        uint256 tokenId = _nextTokenId;\r\n        if(characterSheetTypeId >= characterSheetTypes.length) revert InvalidPurchaseCharacterSheetTypeId();\r\n\r\n        if(amount > characterSheetsLeft(characterSheetTypeId)) revert AllCharacterSheetsOfTypeMinted();\r\n\r\n        characterSheetTypes[characterSheetTypeId].minted += amount;\r\n\r\n        for (uint16 i; i < amount; i++) {\r\n            _tokenIdCharacterSheetTypes[tokenId++] = characterSheetTypeId;\r\n        }\r\n        \r\n        _safeMint(to, amount, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Set the base uri for token metadata\r\n     */\r\n    function setBaseURI(string memory _newBaseURI) external onlyOwner {\r\n        baseURI = _newBaseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Set minter status for addresses\r\n     */\r\n    function setMinters(address[] calldata addresses, bool allowed) external onlyOwner {\r\n        for(uint256 i; i < addresses.length; i++) {\r\n            minters[addresses[i]] = allowed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add new characterSheet\r\n     */\r\n    function _addCharacterSheet(string memory name, uint16 maxCharacterSheets) internal {\r\n        CharacterSheetType memory cs;\r\n\r\n        cs.name = name;\r\n        cs.maxCharacterSheets = maxCharacterSheets;\r\n\r\n        characterSheetTypes.push(cs);\r\n    }\r\n\r\n    /**\r\n     * @dev Add new characterSheet\r\n     */\r\n    function addCharacterSheet(string calldata name, uint16 maxCharacterSheets) external onlyOwner {\r\n        _addCharacterSheet(name, maxCharacterSheets);\r\n    }\r\n\r\n    /**\r\n     * @dev Update characterSheet names\r\n     */\r\n    function updateCharacterSheetNames(uint16[] calldata characterSheetTypeIds, string[] calldata names) external onlyOwner {\r\n        if(characterSheetTypeIds.length != names.length) revert InvalidUpdateCharacterSheetLengthsDontMatch();\r\n\r\n        for (uint16 i; i < characterSheetTypeIds.length; i++) {\r\n            if(characterSheetTypeIds[i] >= characterSheetTypes.length) revert InvalidUpdateCharacterSheetTypeId();\r\n\r\n            characterSheetTypes[characterSheetTypeIds[i]].name = names[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update available characterSheets\r\n     */\r\n    function updateMaxCharacterSheets(uint16[] calldata characterSheetTypeIds, uint16[] calldata maxCharacterSheets) external onlyOwner {\r\n        if(characterSheetTypeIds.length != maxCharacterSheets.length) revert InvalidUpdateCharacterSheetLengthsDontMatch();\r\n\r\n        for (uint16 i; i < characterSheetTypeIds.length; i++) {\r\n            if(characterSheetTypeIds[i] >= characterSheetTypes.length) revert InvalidUpdateCharacterSheetTypeId();\r\n\r\n            characterSheetTypes[characterSheetTypeIds[i]].maxCharacterSheets = maxCharacterSheets[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Upate Rarities on chain for future staking\r\n     */\r\n    function updateRarities(uint8 rarity, uint256[] calldata tokenIds) external onlyOwner {\r\n        if (rarity == 0) {\r\n            for(uint256 i; i < tokenIds.length; i++) {\r\n                if (tokenIds[i] >= _nextTokenId) continue;\r\n\r\n                delete characterSheetRarity[tokenIds[i]];\r\n            }\r\n        } else {\r\n            for(uint256 i; i < tokenIds.length; i++) {\r\n                if (tokenIds[i] >= _nextTokenId) continue;\r\n\r\n                characterSheetRarity[tokenIds[i]] = rarity;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Force update all owners for better transfers\r\n     */\r\n    function updateOwners(uint256 quantity) external onlyOwner {\r\n        _setOwnersExplicit(quantity);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ApeSquadPosterNFT.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\nerror PosterTypeQueryForNonexistentToken();\r\nerror OnlyMintersCanMintPosters();\r\nerror InvalidPurchasePosterTypeId();\r\nerror AllPostersOfTypeMinted();\r\nerror NoPosterMintAmountProvided();\r\nerror InvalidUpdatePosterLengthsDontMatch();\r\nerror InvalidUpdatePosterTypeId();\r\n\r\ncontract ApeSquadPosterNFT is Ownable, ERC721Opt, ERC721OptOwnersExplicit, ERC721OptBatchBurnable, ERC721OptBatchTransferable {\r\n     using Strings for uint256;\r\n\r\n    struct PosterPurchase {\r\n        uint16 posterTypeId;\r\n        uint16 amount;\r\n    }\r\n\r\n    struct PosterType {\r\n        string name;\r\n        uint16 maxPosters;\r\n        uint16 minted;\r\n    }\r\n\r\n    /* Base URI for token URIs */\r\n    string public baseURI;\r\n\r\n    /* OpenSea user account proxy */\r\n    address public openSeaProxyRegistryAddress;\r\n    \r\n    /* Minter addressess */\r\n    mapping(address => bool) public minters;\r\n\r\n    PosterType[] public posterTypes;\r\n\r\n    /* mapping of each token id to poster type */\r\n    mapping(uint256 => uint16) _tokenIdPosterTypes;\r\n\r\n    /* mapping of each token id to rarity. 0 = common, 1 = rare, 2 = legendary */\r\n    mapping(uint256 => uint8) public posterRarity;\r\n    \r\n    constructor(string memory name_, string memory symbol_, string memory _initialBaseURI, address _openSeaProxyRegistryAddress, address[] memory _minters) ERC721Opt(name_, symbol_) {\r\n        baseURI = _initialBaseURI;\r\n        openSeaProxyRegistryAddress = _openSeaProxyRegistryAddress;\r\n        \r\n        for (uint256 i; i < _minters.length; i++) {\r\n            minters[_minters[i]] = true;\r\n        }\r\n\r\n        _addPoster(\"Season 1\", 1250);\r\n    }\r\n\r\n    /**\r\n     * @dev Get posterType count\r\n     */\r\n    function posterTypeCount() public view returns (uint256) {\r\n        return posterTypes.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get posters left for sale\r\n     */\r\n    function postersLeft(uint16 posterTypeId) public view returns (uint256) {\r\n        return posterTypes[posterTypeId].maxPosters - posterTypes[posterTypeId].minted;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the poster type for a specific tokenId\r\n     */\r\n    function tokenPosterType(uint256 tokenId) public view returns (string memory) {\r\n        if (!_exists(tokenId)) revert PosterTypeQueryForNonexistentToken();\r\n\r\n        return posterTypes[_tokenIdPosterTypes[tokenId]].name;\r\n    }\r\n\r\n    /**\r\n     * @dev Override to if default approved for OS proxy accounts or normal approval\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        // Whitelist OpenSea proxy contract for easy trading.\r\n        OpenSeaProxyRegistry openSeaProxyRegistry = OpenSeaProxyRegistry(\r\n            openSeaProxyRegistryAddress\r\n        );\r\n        if (address(openSeaProxyRegistry.proxies(owner)) == operator) {\r\n            return true;\r\n        }\r\n\r\n        return ERC721Opt.isApprovedForAll(owner, operator);\r\n    }\r\n\r\n    /**\r\n     * @dev Override to change the baseURI used in tokenURI\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Override to change tokenURI format\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(_baseURI(), tokenId.toString(), '.json'))\r\n                : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Mint of specific poster type to address. \r\n     */\r\n    function mint(address to, PosterPurchase[] calldata posterPurchases) public {\r\n        if(!minters[msg.sender]) revert OnlyMintersCanMintPosters();\r\n\r\n        uint256 amountToMint;\r\n\r\n        uint256 tokenId = _nextTokenId;\r\n\r\n        for (uint16 i; i < posterPurchases.length; i++) {\r\n            PosterPurchase memory p = posterPurchases[i];\r\n\r\n            if(p.posterTypeId >= posterTypes.length) revert InvalidPurchasePosterTypeId();\r\n\r\n            if(p.amount > postersLeft(posterPurchases[i].posterTypeId)) revert AllPostersOfTypeMinted();\r\n\r\n            posterTypes[p.posterTypeId].minted += p.amount;\r\n            amountToMint += p.amount;\r\n\r\n            for (uint16 j; j < p.amount; j++) {\r\n                _tokenIdPosterTypes[tokenId++] = p.posterTypeId;\r\n            }\r\n        }\r\n            \r\n        if(amountToMint == 0) revert NoPosterMintAmountProvided();\r\n        \r\n        _safeMint(to, amountToMint, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Mint of specific poster type to address. \r\n     */\r\n    function mintType(address to, uint16 posterTypeId, uint16 amount) public {\r\n        if(!minters[msg.sender]) revert OnlyMintersCanMintPosters();\r\n            \r\n        if(amount == 0) revert NoPosterMintAmountProvided();\r\n\r\n        uint256 tokenId = _nextTokenId;\r\n        if(posterTypeId >= posterTypes.length) revert InvalidPurchasePosterTypeId();\r\n\r\n        if(amount > postersLeft(posterTypeId)) revert AllPostersOfTypeMinted();\r\n\r\n        posterTypes[posterTypeId].minted += amount;\r\n\r\n        for (uint16 i; i < amount; i++) {\r\n            _tokenIdPosterTypes[tokenId++] = posterTypeId;\r\n        }\r\n        \r\n        _safeMint(to, amount, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Set the base uri for token metadata\r\n     */\r\n    function setBaseURI(string memory _newBaseURI) external onlyOwner {\r\n        baseURI = _newBaseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Set minter status for addresses\r\n     */\r\n    function setMinters(address[] calldata addresses, bool allowed) external onlyOwner {\r\n        for(uint256 i; i < addresses.length; i++) {\r\n            minters[addresses[i]] = allowed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add new poster\r\n     */\r\n    function _addPoster(string memory name, uint16 maxPosters) internal {\r\n        PosterType memory p;\r\n\r\n        p.name = name;\r\n        p.maxPosters = maxPosters;\r\n\r\n        posterTypes.push(p);\r\n    }\r\n    \r\n    /**\r\n     * @dev Add new poster\r\n     */\r\n    function addPoster(string calldata name, uint16 maxPosters) external onlyOwner {\r\n        _addPoster(name, maxPosters);\r\n    }\r\n\r\n    /**\r\n     * @dev Update poster names\r\n     */\r\n    function updatePosterNames(uint16[] calldata posterTypeIds, string[] calldata names) external onlyOwner {\r\n        if(posterTypeIds.length != names.length) revert InvalidUpdatePosterLengthsDontMatch();\r\n\r\n        for (uint16 i; i < posterTypeIds.length; i++) {\r\n            if(posterTypeIds[i] >= posterTypes.length) revert InvalidUpdatePosterTypeId();\r\n\r\n            posterTypes[posterTypeIds[i]].name = names[i];\r\n        }\r\n    }\r\n    /**\r\n     * @dev Update available posters\r\n     */\r\n    function updateMaxPosters(uint16[] calldata posterTypeIds, uint16[] calldata maxPosters) external onlyOwner {\r\n        if(posterTypeIds.length != maxPosters.length) revert InvalidUpdatePosterLengthsDontMatch();\r\n\r\n        for (uint16 i; i < posterTypeIds.length; i++) {\r\n            if(posterTypeIds[i] >= posterTypes.length) revert InvalidUpdatePosterTypeId();\r\n\r\n            posterTypes[posterTypeIds[i]].maxPosters = maxPosters[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Upate Rarities on chain for future staking\r\n     */\r\n    function updateRarities(uint8 rarity, uint256[] calldata tokenIds) external onlyOwner {\r\n        if (rarity == 0) {\r\n            for(uint256 i; i < tokenIds.length; i++) {\r\n                if (tokenIds[i] >= _nextTokenId) continue;\r\n\r\n                delete posterRarity[tokenIds[i]];\r\n            }\r\n        } else {\r\n            for(uint256 i; i < tokenIds.length; i++) {\r\n                if (tokenIds[i] >= _nextTokenId) continue;\r\n\r\n                posterRarity[tokenIds[i]] = rarity;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Force update all owners for better transfers\r\n     */\r\n    function updateOwners(uint256 quantity) external onlyOwner {\r\n        _setOwnersExplicit(quantity);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ApeSquadMinter.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract ApeSquadMinter is Ownable {\r\n    /* Character Sheet NFT contract */\r\n    ApeSquadCharacterSheetNFT characterSheetNFTContract;\r\n    /* Poster NFT contract */\r\n    ApeSquadPosterNFT posterNFTContract;\r\n\r\n    /* Is Sale Active */\r\n    bool public saleIsActive;\r\n\r\n    /* silver cards reserved for marketing */\r\n    mapping(uint16 => uint16) public reservedCharacterSheets;\r\n    /* posters reserved for marketing */\r\n    uint16 public reservedSeason1Posters = 2;\r\n\r\n    /* Price for character sheets */\r\n    uint256 public characterSheetPrice = 0.08 ether;\r\n\r\n    /* NFT Contracts that can get free poster */\r\n    address[] public freeSeason1PosterNftContracts;\r\n\r\n    /* Mapping of claimed posters */\r\n    mapping(address => bool) public season1PosterClaimed;\r\n\r\n    constructor(\r\n        ApeSquadCharacterSheetNFT _characterSheetNFTContract,\r\n        ApeSquadPosterNFT _posterNFTContract,\r\n        address[] memory _freeSeason1PosterNftContracts\r\n    ) {\r\n        characterSheetNFTContract = _characterSheetNFTContract;\r\n        posterNFTContract = _posterNFTContract;\r\n\r\n        for (uint16 i; i < characterSheetNFTContract.characterSheetTypeCount(); i++) {\r\n            reservedCharacterSheets[i] = 6;\r\n        }\r\n\r\n        freeSeason1PosterNftContracts = _freeSeason1PosterNftContracts;\r\n    }\r\n    \r\n    function mint(ApeSquadCharacterSheetNFT.CharacterSheetPurchase[] calldata characterSheetPurchases, bool freeSeason1Poster) external payable {\r\n        require(msg.sender == tx.origin, 'Only EOA');\r\n        require(saleIsActive, 'Regular sale is not active');\r\n\r\n        uint256 totalAmount;\r\n\r\n        for (uint16 i; i < characterSheetPurchases.length; i++) {\r\n            require(\r\n                characterSheetPurchases[i].amount <= characterSheetNFTContract.characterSheetsLeft(characterSheetPurchases[i].characterSheetTypeId) - reservedCharacterSheets[characterSheetPurchases[i].characterSheetTypeId],\r\n                'Sold Out'\r\n            );\r\n            totalAmount += characterSheetPurchases[i].amount;\r\n        }\r\n\r\n        if (freeSeason1Poster) {\r\n            require(!season1PosterClaimed[msg.sender], 'Season 1 Poster already claimed');\r\n\r\n            bool valid = totalAmount > 0 || characterSheetNFTContract.balanceOf(msg.sender) > 0;\r\n\r\n            if (totalAmount == 0 && characterSheetNFTContract.balanceOf(msg.sender) == 0) {\r\n                for (uint256 i; i < freeSeason1PosterNftContracts.length; i++) {\r\n                   valid = valid || IERC721(freeSeason1PosterNftContracts[i]).balanceOf(msg.sender) > 0;\r\n                   if (valid) break;\r\n                }\r\n            }\r\n\r\n            require(valid, 'Season 1 Poster requirements not met');\r\n            season1PosterClaimed[msg.sender] = true;\r\n        }\r\n\r\n        require(\r\n            msg.value >= (totalAmount * characterSheetPrice),\r\n            'Ether value sent is not correct'\r\n        );\r\n\r\n        if(totalAmount > 0) {\r\n            characterSheetNFTContract.mint(msg.sender, characterSheetPurchases);\r\n        }\r\n        if (freeSeason1Poster) {\r\n            posterNFTContract.mintType(msg.sender, 0, 1);\r\n        }\r\n    }\r\n\r\n    function flipSaleState() external onlyOwner {\r\n        saleIsActive = !saleIsActive;\r\n    }\r\n\r\n    function setReserves(uint16[] calldata _characterSheetTypeIds, uint16[] calldata _characterSheetAmounts, uint16 _season1PosterAmount) external onlyOwner {\r\n        require(\r\n            _characterSheetTypeIds.length == _characterSheetAmounts.length,\r\n            'Character Sheet Type Ids length should match Amounts length'\r\n        );\r\n\r\n        for (uint16 i; i < _characterSheetTypeIds.length; i++) {\r\n            require(\r\n                _characterSheetTypeIds[i] < characterSheetNFTContract.characterSheetTypeCount(),\r\n                'Character Sheet Type Id should be with in range'\r\n            );\r\n\r\n            reservedCharacterSheets[_characterSheetTypeIds[i]] = _characterSheetAmounts[i];\r\n        }\r\n\r\n        reservedSeason1Posters = _season1PosterAmount;\r\n    }\r\n\r\n    function setFreeSeason1PosterNftContracts(address[] calldata _freeSeason1PosterNftContracts) external onlyOwner {\r\n        freeSeason1PosterNftContracts = _freeSeason1PosterNftContracts;\r\n    }\r\n\r\n    function setPrice(uint256 _characterSheetPrice) external onlyOwner {\r\n        characterSheetPrice = _characterSheetPrice;\r\n    }\r\n\r\n    function reserveMint(uint16[] calldata _characterSheetTypeIds, uint16[] calldata _characterSheetAmounts, uint16 season1Posters, address[] calldata to) external onlyOwner {\r\n        require(\r\n            _characterSheetTypeIds.length == _characterSheetAmounts.length,\r\n            'Character Sheet Type Ids length should match Amounts length'\r\n        );\r\n        \r\n        for (uint16 i; i < _characterSheetTypeIds.length; i++) {\r\n            require(\r\n                (_characterSheetAmounts[i] * to.length) <= reservedCharacterSheets[_characterSheetTypeIds[i]],\r\n                'Not enough reserve left for team'\r\n            );\r\n        }\r\n\r\n        require(\r\n            (season1Posters * to.length) <= reservedSeason1Posters,\r\n            'Not enough reserve left for team'\r\n        );\r\n\r\n        for (uint16 i = 0; i < to.length; i++) {\r\n            for (uint16 j; j < _characterSheetTypeIds.length; j++) {\r\n                characterSheetNFTContract.mintType(to[i], _characterSheetTypeIds[j], _characterSheetAmounts[j]);\r\n            }\r\n\r\n            if (season1Posters > 0 ) {\r\n                posterNFTContract.mintType(to[i], 0, season1Posters);\r\n            }\r\n        }\r\n\r\n        for (uint16 i; i < _characterSheetTypeIds.length; i++) {\r\n            reservedCharacterSheets[_characterSheetTypeIds[i]] -= uint16(_characterSheetAmounts[i] * to.length);\r\n        }\r\n\r\n        reservedSeason1Posters -= uint16(season1Posters * to.length);\r\n    }\r\n    \r\n    function withdraw() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initialBaseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_openSeaProxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllOwnersHaveBeenSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllPostersOfTypeMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPurchasePosterTypeId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUpdatePosterLengthsDontMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUpdatePosterTypeId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToDeadAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPosterMintAmountProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensMintedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintersCanMintPosters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PosterTypeQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityMustBeNonZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToDeadAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"maxPosters\",\"type\":\"uint16\"}],\"name\":\"addPoster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"posterTypeId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"internalType\":\"struct ApeSquadPosterNFT.PosterPurchase[]\",\"name\":\"posterPurchases\",\"type\":\"tuple[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"posterTypeId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"mintType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSeaProxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posterRarity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"posterTypeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posterTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"maxPosters\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minted\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"posterTypeId\",\"type\":\"uint16\"}],\"name\":\"postersLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenPosterType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"posterTypeIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"maxPosters\",\"type\":\"uint16[]\"}],\"name\":\"updateMaxPosters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"updateOwners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"posterTypeIds\",\"type\":\"uint16[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"name\":\"updatePosterNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"updateRarities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ApeSquadPosterNFT", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c100000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000008417065537175616400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044150455300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f68747470733a2f2f717478613465377a786b2e657865637574652d6170692e75732d656173742d312e616d617a6f6e6177732e636f6d2f706f73746572732f0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006ab6b9c8ed19a464722198e8f4ef113e10c298b8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://70518d2da60eaf9c13cddb2780d4621fc402a79caf02f808fb199df4bcfafba8"}]}