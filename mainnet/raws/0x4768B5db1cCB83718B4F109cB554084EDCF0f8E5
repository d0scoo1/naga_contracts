{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/resolvers/aave_v2/main.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\nimport \\\"./interfaces.sol\\\";\\nimport \\\"./helpers.sol\\\";\\n\\ncontract Resolver is AaveHelpers {\\n    constructor(\\n        address _wethAddr,\\n        address _aaveAddressProvider,\\n        address _aaveProtocolDataProvider,\\n        address _chainlinkEthFeed,\\n        address _aaveIncentivesAddress\\n    )\\n        AaveHelpers(\\n            _wethAddr,\\n            _aaveAddressProvider,\\n            _aaveProtocolDataProvider,\\n            _chainlinkEthFeed,\\n            _aaveIncentivesAddress\\n        )\\n    {}\\n\\n    function getPosition(address user, address[] memory tokens)\\n        public\\n        view\\n        returns (AaveUserTokenData[] memory, AaveUserData memory)\\n    {\\n        AaveAddressProvider addrProvider = AaveAddressProvider(\\n            getAaveAddressProvider()\\n        );\\n        uint256 length = tokens.length;\\n        address[] memory _tokens = new address[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _tokens[i] = tokens[i] == getEthAddr() ? getWethAddr() : tokens[i];\\n        }\\n\\n        AaveUserTokenData[] memory tokensData = new AaveUserTokenData[](length);\\n        (TokenPrice[] memory tokenPrices, uint256 ethPrice) = getTokensPrices(\\n            addrProvider,\\n            _tokens\\n        );\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            tokensData[i] = getTokenData(\\n                AaveProtocolDataProvider(getAaveProtocolDataProvider()),\\n                user,\\n                _tokens[i],\\n                tokenPrices[i].priceInEth,\\n                tokenPrices[i].priceInUsd\\n            );\\n        }\\n\\n        return (\\n            tokensData,\\n            getUserData(\\n                AaveLendingPool(addrProvider.getLendingPool()),\\n                user,\\n                ethPrice,\\n                _tokens\\n            )\\n        );\\n    }\\n\\n    function getConfiguration(address user)\\n        public\\n        view\\n        returns (bool[] memory collateral, bool[] memory borrowed)\\n    {\\n        AaveAddressProvider addrProvider = AaveAddressProvider(\\n            getAaveAddressProvider()\\n        );\\n        uint256 data = getConfig(\\n            user,\\n            AaveLendingPool(addrProvider.getLendingPool())\\n        ).data;\\n        address[] memory reserveIndex = getList(\\n            AaveLendingPool(addrProvider.getLendingPool())\\n        );\\n\\n        collateral = new bool[](reserveIndex.length);\\n        borrowed = new bool[](reserveIndex.length);\\n\\n        for (uint256 i = 0; i < reserveIndex.length; i++) {\\n            if (isUsingAsCollateralOrBorrowing(data, i)) {\\n                collateral[i] = (isUsingAsCollateral(data, i)) ? true : false;\\n                borrowed[i] = (isBorrowing(data, i)) ? true : false;\\n            }\\n        }\\n    }\\n\\n    function getReservesList() public view returns (address[] memory data) {\\n        AaveAddressProvider addrProvider = AaveAddressProvider(\\n            getAaveAddressProvider()\\n        );\\n        data = getList(AaveLendingPool(addrProvider.getLendingPool()));\\n    }\\n}\\n\\ncontract AaveV2Resolver is Resolver {\\n    constructor(\\n        address _wethAddr,\\n        address _aaveAddressProvider,\\n        address _aaveProtocolDataProvider,\\n        address _chainlinkEthFeed,\\n        address _aaveIncentivesAddress\\n    )\\n        Resolver(\\n            _wethAddr,\\n            _aaveAddressProvider,\\n            _aaveProtocolDataProvider,\\n            _chainlinkEthFeed,\\n            _aaveIncentivesAddress\\n        )\\n    {}\\n\\n    string public constant name = \\\"AaveV2-Resolver\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/resolvers/aave_v2/interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface AaveProtocolDataProvider {\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n}\\n\\ninterface AaveLendingPool {\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function getUserConfiguration(address user)\\n        external\\n        view\\n        returns (UserConfigurationMap memory);\\n\\n    function getReservesList() external view returns (address[] memory);\\n}\\n\\ninterface TokenInterface {\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface AaveAddressProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\\ninterface AavePriceOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n\\n    function getAssetsPrices(address[] calldata _assets)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getSourceOfAsset(address _asset) external view returns (uint256);\\n\\n    function getFallbackOracle() external view returns (uint256);\\n}\\n\\ninterface AaveIncentivesInterface {\\n    struct AssetData {\\n        uint128 emissionPerSecond;\\n        uint128 lastUpdateTimestamp;\\n        uint256 index;\\n    }\\n\\n    function getRewardsBalance(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function assets(address asset) external view returns (AssetData memory);\\n}\\n\\ninterface ChainLinkInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/resolvers/aave_v2/helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\nimport \\\"./interfaces.sol\\\";\\n\\nimport {DSMath} from \\\"../utils/dsmath.sol\\\";\\n\\ncontract AaveHelpers is DSMath {\\n    address internal wethAddr;\\n    address internal aaveAddressProvider;\\n    address internal aaveProtocolDataProvider;\\n    address internal chainlinkEthFeed;\\n    address internal aaveIncentivesAddress;\\n\\n    constructor(\\n        address _wethAddr,\\n        address _aaveAddressProvider,\\n        address _aaveProtocolDataProvider,\\n        address _chainlinkEthFeed,\\n        address _aaveIncentivesAddress\\n    ) {\\n        wethAddr = _wethAddr;\\n        aaveAddressProvider = _aaveAddressProvider;\\n        aaveProtocolDataProvider = _aaveProtocolDataProvider;\\n        chainlinkEthFeed = _chainlinkEthFeed;\\n        aaveIncentivesAddress = _aaveIncentivesAddress;\\n    }\\n\\n    /**\\n     * @dev Return ethereum address\\n     */\\n    function getEthAddr() internal pure returns (address) {\\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\\n    }\\n\\n    /**\\n     * @dev Return Weth address\\n     */\\n    function getWethAddr() internal view returns (address) {\\n        // return 0xd0A1E359811322d97991E03f863a0C30C2cF029C; // Kovan WETH Address\\n        return wethAddr;\\n    }\\n\\n    /**\\n     * @dev get Aave Provider Address\\n     */\\n    function getAaveAddressProvider() internal view returns (address) {\\n        // return 0x88757f2f99175387aB4C6a4b3067c77A695b0349; // Kovan\\n        // return 0x8bD206df9853d23bE158A9F7065Cf60A7A5F05DF; // private\\n        return aaveAddressProvider;\\n    }\\n\\n    /**\\n     * @dev get Aave Protocol Data Provider\\n     */\\n    function getAaveProtocolDataProvider() internal view returns (address) {\\n        // return 0x3c73A5E5785cAC854D468F727c606C07488a29D6; // Kovan\\n        // return 0xBE24eEC0e36B39346Ccb1DFF7a4A9ef58383358E; // private\\n        return aaveProtocolDataProvider;\\n    }\\n\\n    /**\\n     * @dev get Chainlink ETH price feed Address\\n     */\\n    function getChainlinkEthFeed() internal view returns (address) {\\n        // return 0x9326BFA02ADD2366b30bacB125260Af641031331; //kovan\\n        // return 0x912992e0A37D6D3328Fea81E2001BCa44DC764Dc; //private\\n        return chainlinkEthFeed;\\n    }\\n\\n    /**\\n     * @dev Aave Incentives address\\n     */\\n    function getAaveIncentivesAddress() internal view returns (address) {\\n        // return 0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5; // mainnet\\n        return aaveIncentivesAddress;\\n    }\\n\\n    struct AaveUserTokenData {\\n        uint256 tokenPriceInEth; //\\n        uint256 tokenPriceInUsd;\\n        uint256 supplyBalance;\\n        uint256 stableBorrowBalance;\\n        uint256 variableBorrowBalance;\\n        uint256 supplyRate;\\n        uint256 stableBorrowRate;\\n        uint256 userStableBorrowRate;\\n        uint256 variableBorrowRate;\\n        bool isCollateral;\\n        AaveTokenData aaveTokenData;\\n    }\\n\\n    struct AaveUserData {\\n        uint256 totalCollateralETH;\\n        uint256 totalBorrowsETH;\\n        uint256 availableBorrowsETH;\\n        uint256 currentLiquidationThreshold;\\n        uint256 ltv;\\n        uint256 healthFactor;\\n        uint256 ethPriceInUsd;\\n        uint256 pendingRewards;\\n    }\\n\\n    struct AaveTokenData {\\n        uint256 ltv;\\n        uint256 threshold;\\n        uint256 reserveFactor;\\n        bool usageAsCollEnabled;\\n        bool borrowEnabled;\\n        bool stableBorrowEnabled;\\n        bool isActive;\\n        bool isFrozen;\\n        uint256 totalSupply;\\n        uint256 availableLiquidity;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        // uint256 collateralEmission;\\n        // uint256 debtEmission;\\n    }\\n\\n    struct TokenPrice {\\n        uint256 priceInEth;\\n        uint256 priceInUsd;\\n    }\\n\\n    function getTokensPrices(\\n        AaveAddressProvider _aaveAddressProvider,\\n        address[] memory tokens\\n    )\\n        internal\\n        view\\n        returns (TokenPrice[] memory tokenPrices, uint256 ethPrice)\\n    {\\n        uint256[] memory _tokenPrices = AavePriceOracle(\\n            _aaveAddressProvider.getPriceOracle()\\n        ).getAssetsPrices(tokens);\\n        ethPrice = uint256(\\n            ChainLinkInterface(getChainlinkEthFeed()).latestAnswer()\\n        );\\n        tokenPrices = new TokenPrice[](_tokenPrices.length);\\n        for (uint256 i = 0; i < _tokenPrices.length; i++) {\\n            tokenPrices[i] = TokenPrice(\\n                _tokenPrices[i],\\n                wmul(_tokenPrices[i], uint256(ethPrice) * 10**10)\\n            );\\n        }\\n    }\\n\\n    function collateralData(AaveProtocolDataProvider aaveData, address token)\\n        internal\\n        view\\n        returns (AaveTokenData memory aaveTokenData)\\n    {\\n        (\\n            ,\\n            aaveTokenData.ltv,\\n            aaveTokenData.threshold,\\n            ,\\n            aaveTokenData.reserveFactor,\\n            aaveTokenData.usageAsCollEnabled,\\n            aaveTokenData.borrowEnabled,\\n            aaveTokenData.stableBorrowEnabled,\\n            aaveTokenData.isActive,\\n            aaveTokenData.isFrozen\\n        ) = aaveData.getReserveConfigurationData(token);\\n\\n        (address aToken, , ) = aaveData.getReserveTokensAddresses(token);\\n\\n        aaveTokenData.totalSupply = TokenInterface(aToken).totalSupply();\\n    }\\n\\n    function getTokenData(\\n        AaveProtocolDataProvider aaveData,\\n        address user,\\n        address token,\\n        uint256 tokenPriceInEth,\\n        uint256 tokenPriceInUsd\\n    ) internal view returns (AaveUserTokenData memory tokenData) {\\n        AaveTokenData memory aaveTokenData = collateralData(aaveData, token);\\n\\n        (\\n            tokenData.supplyBalance,\\n            tokenData.stableBorrowBalance,\\n            tokenData.variableBorrowBalance,\\n            ,\\n            ,\\n            tokenData.userStableBorrowRate,\\n            ,\\n            ,\\n            tokenData.isCollateral\\n        ) = aaveData.getUserReserveData(token, user);\\n\\n        (\\n            aaveTokenData.availableLiquidity,\\n            aaveTokenData.totalStableDebt,\\n            aaveTokenData.totalVariableDebt,\\n            tokenData.supplyRate,\\n            tokenData.variableBorrowRate,\\n            tokenData.stableBorrowRate,\\n            ,\\n            ,\\n            ,\\n\\n        ) = aaveData.getReserveData(token);\\n\\n        tokenData.tokenPriceInEth = tokenPriceInEth;\\n        tokenData.tokenPriceInUsd = tokenPriceInUsd;\\n        tokenData.aaveTokenData = aaveTokenData;\\n    }\\n\\n    function getPendingRewards(address[] memory _tokens, address user)\\n        internal\\n        view\\n        returns (uint256 rewards)\\n    {\\n        uint256 arrLength = 2 * _tokens.length;\\n        address[] memory _atokens = new address[](arrLength);\\n        AaveProtocolDataProvider aaveData = AaveProtocolDataProvider(\\n            getAaveProtocolDataProvider()\\n        );\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            (_atokens[2 * i], , _atokens[2 * i + 1]) = aaveData\\n                .getReserveTokensAddresses(_tokens[i]);\\n        }\\n        rewards = AaveIncentivesInterface(getAaveIncentivesAddress())\\n            .getRewardsBalance(_atokens, user);\\n    }\\n\\n    function getUserData(\\n        AaveLendingPool aave,\\n        address user,\\n        uint256 ethPriceInUsd,\\n        address[] memory tokens\\n    ) internal view returns (AaveUserData memory userData) {\\n        (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        ) = aave.getUserAccountData(user);\\n        uint256 pendingRewards;\\n        if (aaveIncentivesAddress != address(0)) {\\n            pendingRewards = getPendingRewards(tokens, user);\\n        }\\n        userData = AaveUserData(\\n            totalCollateralETH,\\n            totalDebtETH,\\n            availableBorrowsETH,\\n            currentLiquidationThreshold,\\n            ltv,\\n            healthFactor,\\n            ethPriceInUsd,\\n            pendingRewards\\n        );\\n    }\\n\\n    function getConfig(address user, AaveLendingPool aave)\\n        public\\n        view\\n        returns (AaveLendingPool.UserConfigurationMap memory data)\\n    {\\n        data = aave.getUserConfiguration(user);\\n    }\\n\\n    function getList(AaveLendingPool aave)\\n        public\\n        view\\n        returns (address[] memory data)\\n    {\\n        data = aave.getReservesList();\\n    }\\n\\n    function isUsingAsCollateralOrBorrowing(uint256 self, uint256 reserveIndex)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        require(reserveIndex < 128, \\\"can't be more than 128\\\");\\n        return (self >> (reserveIndex * 2)) & 3 != 0;\\n    }\\n\\n    function isUsingAsCollateral(uint256 self, uint256 reserveIndex)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        require(reserveIndex < 128, \\\"can't be more than 128\\\");\\n        return (self >> (reserveIndex * 2 + 1)) & 1 != 0;\\n    }\\n\\n    function isBorrowing(uint256 self, uint256 reserveIndex)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        require(reserveIndex < 128, \\\"can't be more than 128\\\");\\n        return (self >> (reserveIndex * 2)) & 1 != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/resolvers/utils/dsmath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"math-not-safe\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x - y <= x ? x - y : 0;\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"math-not-safe\\\");\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    uint256 internal constant WAD = 10**18;\\n    uint256 internal constant RAY = 10**27;\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveAddressProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveProtocolDataProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkEthFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveIncentivesAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract AaveLendingPool\",\"name\":\"aave\",\"type\":\"address\"}],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct AaveLendingPool.UserConfigurationMap\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"collateral\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"borrowed\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AaveLendingPool\",\"name\":\"aave\",\"type\":\"address\"}],\"name\":\"getList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"data\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenPriceInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVariableDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct AaveHelpers.AaveTokenData\",\"name\":\"aaveTokenData\",\"type\":\"tuple\"}],\"internalType\":\"struct AaveHelpers.AaveUserTokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowsETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrowsETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPriceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct AaveHelpers.AaveUserData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"data\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"self\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIndex\",\"type\":\"uint256\"}],\"name\":\"isBorrowing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"self\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIndex\",\"type\":\"uint256\"}],\"name\":\"isUsingAsCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"self\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIndex\",\"type\":\"uint256\"}],\"name\":\"isUsingAsCollateralOrBorrowing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AaveV2Resolver", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b53c1a33016b2dc2ff3653530bff1848a515c8c5000000000000000000000000057835ad21a177dbdd3090bb1cae03eacf78fc6d0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000a50ba011c48153de246e5192c8f9258a2ba79ca9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}