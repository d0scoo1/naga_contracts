{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Abstract1155Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol';\\n\\n\\nabstract contract Abstract1155Factory is AccessControl, ERC1155Pausable, ERC1155Supply, ERC1155Burnable, Ownable {\\n    \\n    string public name_;\\n    string public symbol_;\\n\\n    \\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }    \\n\\n    function setURI(string memory baseURI) external onlyOwner {\\n        _setURI(baseURI);\\n    }    \\n\\n    function name() public view returns (string memory) {\\n        return name_;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return symbol_;\\n    }          \\n\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._mint(account, id, amount, data);\\n    }\\n\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._burn(account, id, amount);\\n    }\\n\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._burnBatch(account, ids, amounts);\\n    }  \\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Pausable, ERC1155) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }  \\n\\n    function setOwner(address _addr) public onlyOwner {\\n        transferOwnership(_addr);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n   function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates weither any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mint}.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mint(account, id, amount, data);\\n        _totalSupply[id] += amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mintBatch}.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mintBatch(to, ids, amounts, data);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] += amounts[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burn}.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._burn(account, id, amount);\\n        _totalSupply[id] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burnBatch}.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual override {\\n        super._burnBatch(account, ids, amounts);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] -= amounts[i];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Commerce.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport './Abstract1155Factory.sol';\\nimport './Utils.sol';\\nimport \\\"hardhat/console.sol\\\";\\ncontract Commerce is Abstract1155Factory, ReentrancyGuard  {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => Token) public tokens;\\n    event Purchased(uint[] index, address indexed account, uint[] amount);\\n    event Fused(uint[] index, address indexed account, uint[] amount);\\n    struct Token {\\n        string ipfsMetadataHash;\\n        string extraDataUri;\\n        mapping(address => uint256) claimedTokens;\\n        mapping(uint => address) redeemableContracts;\\n        uint256 numRedeemableContracts;\\n        mapping(uint => Whitelist) whitelistData;\\n        uint256 numTokenWhitelists;\\n        MintingConfig mintingConfig;\\n        WhiteListConfig whiteListConfig;\\n        bool isTokenPack;\\n    }\\n    struct MintingConfig {\\n        bool saleIsOpen;\\n        uint256 windowOpens;\\n        uint256 windowCloses;\\n        uint256 mintPrice;\\n        uint256 maxSupply;\\n        uint256 maxPerWallet;\\n        uint256 maxMintPerTxn;\\n        uint256 numMinted;\\n        uint256 fusionTokenID;\\n        uint256 fusionQuantity;\\n        bool fusionOpen;\\n    }\\n    struct WhiteListConfig {\\n        bool maxQuantityMappedByWhitelistHoldings;\\n        bool requireAllWhiteLists;\\n        bool hasMerkleRoot;\\n        bytes32 merkleRoot;\\n    }\\n    \\n    struct Whitelist {\\n        string tokenType;\\n        address tokenAddress;\\n        uint mustOwnQuantity;\\n        uint256 tokenId;\\n        bool active;\\n    }\\n\\n    string public _contractURI;\\n   \\n    constructor(\\n        string memory _name, \\n        string memory _symbol,\\n        address[] memory _admins,\\n        string memory _contract_URI\\n    ) ERC1155(\\\"ipfs://\\\") {\\n        name_ = _name;\\n        symbol_ = _symbol;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        for (uint i=0; i< _admins.length; i++) {\\n            _setupRole(DEFAULT_ADMIN_ROLE, _admins[i]);\\n        }\\n        _contractURI = _contract_URI;\\n    }\\n\\n     function getOpenSaleTokens() public view returns (string memory){\\n        string memory open = \\\"\\\";\\n        uint256 numTokens = 0;\\n        while(!Utils.compareStrings(tokens[numTokens].ipfsMetadataHash, \\\"\\\")) {\\n           if(isSaleOpen(numTokens)){\\n                open = string(abi.encodePacked(open, Strings.toString(numTokens), \\\",\\\"));\\n            }\\n            numTokens++;\\n        }\\n        return open;\\n    }\\n\\n     function editToken(\\n        uint256 _tokenIndex,\\n        string memory _ipfsMetadataHash,\\n        string memory _extraDataUri,\\n        uint256 _windowOpens, \\n        uint256 _windowCloses, \\n        uint256 _mintPrice, \\n        uint256 _maxSupply,\\n        uint256 _maxMintPerTxn,\\n        uint256 _maxPerWallet,\\n        bool _maxQuantityMappedByWhitelistHoldings,\\n        bool _requireAllWhiteLists,\\n        address[] memory _redeemableContracts\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Token storage token = tokens[_tokenIndex];\\n        token.mintingConfig.windowOpens = _windowOpens;\\n        token.mintingConfig.windowCloses = _windowCloses;\\n        token.mintingConfig.mintPrice = _mintPrice;\\n        token.mintingConfig.maxSupply = _maxSupply;\\n        token.mintingConfig.maxMintPerTxn = _maxMintPerTxn;\\n        token.mintingConfig.maxPerWallet = _maxPerWallet;\\n        token.ipfsMetadataHash = _ipfsMetadataHash;\\n        token.extraDataUri = _extraDataUri;\\n        \\n        for (uint i=0; i<_redeemableContracts.length; i++) {\\n            token.redeemableContracts[i] = _redeemableContracts[i];\\n        }\\n        token.numRedeemableContracts = _redeemableContracts.length;\\n        token.whiteListConfig.maxQuantityMappedByWhitelistHoldings = _maxQuantityMappedByWhitelistHoldings;\\n        token.whiteListConfig.requireAllWhiteLists = _requireAllWhiteLists;\\n    }   \\n\\n    function addFusion(\\n        uint256 _tokenIndex,\\n        uint256 _fusionTokenID, \\n        uint256 _fusionQuantity\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Token storage token = tokens[_tokenIndex];\\n        token.mintingConfig.fusionTokenID = _fusionTokenID;\\n        token.mintingConfig.fusionQuantity = _fusionQuantity;\\n    }\\n\\n    function toggleFusion(\\n        uint256 _tokenIndex,\\n        bool _fusionOpen\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Token storage token = tokens[_tokenIndex];\\n        token.mintingConfig.fusionOpen = _fusionOpen;\\n    }\\n\\n    function addWhiteList(\\n         uint256 _tokenIndex,\\n         string memory _tokenType,\\n         address _tokenAddress,\\n         uint _tokenId,\\n         uint _mustOwnQuantity\\n    )external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Whitelist storage whitelist = tokens[_tokenIndex].whitelistData[tokens[_tokenIndex].numTokenWhitelists];\\n        whitelist.tokenType = _tokenType;\\n        whitelist.tokenId = _tokenId;\\n        whitelist.active = true;\\n        whitelist.tokenAddress = _tokenAddress;\\n        whitelist.mustOwnQuantity = _mustOwnQuantity;\\n        tokens[_tokenIndex].numTokenWhitelists = tokens[_tokenIndex].numTokenWhitelists + 1;\\n    }\\n\\n     function disableWhiteList(\\n       uint256 _tokenIndex,\\n       uint _whiteListIndexToRemove\\n    )external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        tokens[_tokenIndex].whitelistData[_whiteListIndexToRemove].active = false;\\n    }\\n\\n   function editTokenWhiteListMerkleRoot(\\n       uint256 _tokenIndex,\\n        bytes32 _merkleRoot,\\n        bool enabled\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        tokens[_tokenIndex].whiteListConfig.merkleRoot = _merkleRoot;\\n        tokens[_tokenIndex].whiteListConfig.hasMerkleRoot = enabled;\\n    } \\n\\n   \\n     function burnFromRedeem(\\n        address account, \\n        uint256 tokenIndex, \\n        uint256 amount\\n    ) external {\\n        Token storage token = tokens[tokenIndex];\\n        bool hasValidRedemptionContract = false;\\n         if(token.numRedeemableContracts > 0){\\n            for (uint i=0; i < token.numRedeemableContracts; i++) {\\n                if(token.redeemableContracts[i] == msg.sender){\\n                    hasValidRedemptionContract = true;\\n                }\\n            }\\n        }\\n        require(hasValidRedemptionContract, \\\"1\\\");\\n        _burn(account, tokenIndex, amount);\\n    }  \\n\\n    function fusion(\\n        uint256 tokenIndex, \\n        uint256 amount\\n    ) external nonReentrant{\\n        Token storage token = tokens[tokenIndex];\\n        require(token.mintingConfig.fusionOpen, \\\"20\\\");\\n        Whitelist memory balanceRequest;\\n        balanceRequest.tokenType = \\\"ERC1155\\\";\\n        balanceRequest.tokenAddress = address(this);\\n        balanceRequest.tokenId = token.mintingConfig.fusionTokenID;\\n        uint256 balance = getExternalTokenBalance(msg.sender, balanceRequest);\\n\\n        require(balance > token.mintingConfig.fusionQuantity, \\\"21\\\");\\n        uint256 numToIssue = amount.div(token.mintingConfig.fusionQuantity);\\n        uint256[] memory idsToMint;\\n        uint256[] memory quantitiesToMint;\\n        idsToMint = new uint256[](1);\\n        idsToMint[0] =  tokenIndex;\\n        quantitiesToMint = new uint256[](1);\\n        quantitiesToMint[0] = numToIssue;\\n        _mintBatch(msg.sender, idsToMint, quantitiesToMint, \\\"\\\");\\n        _burn(msg.sender, token.mintingConfig.fusionTokenID, amount);\\n        emit Fused(idsToMint, msg.sender, quantitiesToMint);\\n    }  \\n\\n    function purchase(\\n        uint256[] calldata _quantities,\\n        uint256[] calldata _tokenIndexes,\\n        uint256[] calldata _merkleAmounts,\\n        bytes32[][] calldata _merkleProofs\\n    ) external payable nonReentrant {\\n        uint256 totalPrice = 0;\\n        for (uint i=0; i< _tokenIndexes.length; i++) {\\n            require(isSaleOpen(_tokenIndexes[i]), \\\"5\\\");\\n            require(tokens[_tokenIndexes[i]].claimedTokens[msg.sender].add(_quantities[i]) <= _merkleAmounts[i], \\\"8\\\");\\n            require(tokens[_tokenIndexes[i]].claimedTokens[msg.sender].add(_quantities[i]) <= tokens[_tokenIndexes[i]].mintingConfig.maxPerWallet, \\\"9\\\");\\n            require(_quantities[i] <= tokens[_tokenIndexes[i]].mintingConfig.maxMintPerTxn, \\\"10\\\");\\n            require(getTokenSupply(_tokenIndexes[i]) + _quantities[i] <= tokens[_tokenIndexes[i]].mintingConfig.maxSupply, \\\"11\\\");\\n            totalPrice = totalPrice.add(_quantities[i].mul(tokens[_tokenIndexes[i]].mintingConfig.mintPrice));\\n        }\\n        require(!paused() && msg.value >= totalPrice, \\\"3\\\");\\n        for (uint i=0; i< _tokenIndexes.length; i++) {\\n            \\n            uint256 quantityToMint = getQualifiedAllocation(msg.sender,_tokenIndexes[i], _quantities[i],_merkleAmounts[i],_merkleProofs[i], true); \\n            require(quantityToMint > 0 && quantityToMint >= _quantities[i], \\\"4\\\");\\n        \\n            uint256[] memory idsToMint;\\n            uint256[] memory quantitiesToMint;\\n           \\n           \\n             idsToMint = new uint256[](1);\\n            idsToMint[0] =  _tokenIndexes[i];\\n            quantitiesToMint = new uint256[](1);\\n            quantitiesToMint[0] = _quantities[i];\\n                tokens[_tokenIndexes[i]].claimedTokens[msg.sender] = tokens[_tokenIndexes[i]].claimedTokens[msg.sender].add(_quantities[i]);\\n            _mintBatch(msg.sender, idsToMint, quantitiesToMint, \\\"\\\");\\n            \\n            \\n        }\\n        emit Purchased(_tokenIndexes, msg.sender, _quantities);\\n    }\\n    \\n\\n    \\n    function mintBatch(\\n        address to,\\n        uint256[] calldata qty,\\n        uint256[] calldata _tokens) public onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _mintBatch(to, _tokens, qty, \\\"\\\");\\n    }\\n\\n     function getQualifiedAllocation(address sender, \\n        uint256 tokenIndex,\\n        uint256 quantity,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof,\\n        bool returnAllocationOnly) public view returns (uint256) {\\n        \\n        Token storage token = tokens[tokenIndex];\\n\\n        uint256 totalAllowed = token.mintingConfig.maxPerWallet;\\n        if(token.whiteListConfig.maxQuantityMappedByWhitelistHoldings){\\n            totalAllowed = 0;\\n        }\\n\\n        uint256 whiteListsValidAmounts = 0;\\n        if(token.numTokenWhitelists > 0){\\n            uint256 balance = 0;\\n            uint256 _wl_amount = 0;\\n            for (uint i=0; i < token.numTokenWhitelists; i++) {\\n                if(token.whitelistData[i].active){\\n                \\n                    _wl_amount = verifyWhitelist(sender, tokenIndex, i, returnAllocationOnly);\\n                    \\n                    if(token.whiteListConfig.requireAllWhiteLists){\\n                        require( verifyWhitelist(sender, tokenIndex, i, returnAllocationOnly) > 0, \\\"12\\\");\\n                    }\\n                    \\n                    if(token.whiteListConfig.maxQuantityMappedByWhitelistHoldings){\\n                        Whitelist memory balanceRequest;\\n                        balanceRequest.tokenType = token.whitelistData[i].tokenType;\\n                        balanceRequest.tokenAddress = token.whitelistData[i].tokenAddress;\\n                        balanceRequest.tokenId = token.whitelistData[i].tokenId;\\n                        balance = getExternalTokenBalance(sender, balanceRequest);\\n                        totalAllowed += balance;\\n                        whiteListsValidAmounts += balance;\\n                        \\n                    }\\n                    else{\\n                        whiteListsValidAmounts = _wl_amount;\\n                    }\\n                }\\n               \\n            }\\n        }\\n        else{\\n            whiteListsValidAmounts = token.mintingConfig.maxMintPerTxn;\\n        }\\n\\n        if(!returnAllocationOnly){\\n            require(whiteListsValidAmounts > 0, \\\"13\\\");\\n\\n            if(token.whiteListConfig.maxQuantityMappedByWhitelistHoldings){\\n            require(token.claimedTokens[sender].add(quantity) <= totalAllowed, \\\"14\\\");\\n            }\\n        }\\n       \\n\\n        if(token.whiteListConfig.hasMerkleRoot){\\n             require(\\n                verifyMerkleProof(merkleProof, tokenIndex, amount),\\n                \\\"15\\\" \\n            ); \\n            //whiteListsValidAmounts += quantity;\\n        }\\n        \\n        if(returnAllocationOnly){\\n            return whiteListsValidAmounts < quantity ? whiteListsValidAmounts : quantity;\\n        }\\n        else{\\n            return whiteListsValidAmounts;\\n        }\\n       \\n         \\n\\n    }\\n\\n    function verifyWhitelist(address sender, uint256 tokenIndex, uint whitelistIndex, bool returnAllocationOnly) internal view returns (uint256) {\\n       \\n       uint256 isValid = 0;\\n       uint256 balanceOf = 0;\\n       Token storage token = tokens[tokenIndex];\\n       Whitelist memory balanceRequest;\\n       balanceRequest.tokenType = token.whitelistData[whitelistIndex].tokenType;\\n       balanceRequest.tokenAddress = token.whitelistData[whitelistIndex].tokenAddress;\\n       balanceRequest.tokenId = token.whitelistData[whitelistIndex].tokenId;\\n       balanceOf = getExternalTokenBalance(sender, balanceRequest);\\n       bool meetsWhiteListReqs = (balanceOf >= token.whitelistData[whitelistIndex].mustOwnQuantity);\\n       \\n        if(!token.isTokenPack && token.whiteListConfig.maxQuantityMappedByWhitelistHoldings){\\n            isValid = balanceOf;\\n        \\n        }\\n        else if( meetsWhiteListReqs){\\n            isValid = token.mintingConfig.maxMintPerTxn;\\n        }\\n\\n        if(isValid == 0 && !token.whiteListConfig.requireAllWhiteLists){\\n            isValid = token.mintingConfig.maxMintPerTxn;\\n        }\\n        return isValid;\\n    }\\n\\n\\n    function getExternalTokenBalance (address sender, Whitelist memory balanceRequest) public view returns (uint256) {\\n        if(Utils.compareStrings(balanceRequest.tokenType, \\\"ERC721\\\")){\\n            WhitelistContract721 _contract = WhitelistContract721(balanceRequest.tokenAddress);\\n            return _contract.balanceOf(sender);\\n        }\\n        else if(Utils.compareStrings(balanceRequest.tokenType, \\\"ERC1155\\\")){\\n            WhitelistContract1155 _contract = WhitelistContract1155(balanceRequest.tokenAddress);\\n            return _contract.balanceOf(sender, balanceRequest.tokenId);\\n        }\\n    }\\n\\n    function isSaleOpen(uint256 tokenIndex) public view returns (bool) {\\n        Token storage token = tokens[tokenIndex];\\n        if(paused()){\\n            return false;\\n        }\\n        if(block.timestamp > token.mintingConfig.windowOpens && block.timestamp < token.mintingConfig.windowCloses){\\n            return token.mintingConfig.saleIsOpen;\\n        }\\n        return false;\\n        \\n    }\\n\\n    function toggleSale(uint256 mpIndex, bool on) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        tokens[mpIndex].mintingConfig.saleIsOpen = on;\\n    }\\n\\n\\n    function verifyMerkleProof(bytes32[] calldata merkleProof, uint256 mpIndex, uint amount) public view returns (bool) {\\n        if(!tokens[mpIndex].whiteListConfig.hasMerkleRoot){\\n            return true;\\n        }\\n        string memory leaf = Utils.makeLeaf(msg.sender, amount);\\n        bytes32 node = keccak256(abi.encode(leaf));\\n        return MerkleProof.verify(merkleProof, tokens[mpIndex].whiteListConfig.merkleRoot, node);\\n    }\\n\\n\\n    function char(bytes1 b) internal view returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n    \\n    function withdrawEther(address payable _to, uint256 _amount) public onlyOwner\\n    {\\n        _to.transfer(_amount);\\n    }\\n\\n    function uri(uint256 _id) public view override returns (string memory) {\\n        require(getTokenSupply(_id) > 0, \\\"16\\\");\\n        if(Utils.compareStrings(tokens[_id].ipfsMetadataHash, \\\"\\\")){\\n            return string(abi.encodePacked(super.uri(_id), Strings.toString(_id)));\\n        }\\n        else{\\n            return string(abi.encodePacked(tokens[_id].ipfsMetadataHash));\\n        }   \\n    } \\n\\n    \\n\\n     function getTokenSupply(uint256 tokenIndex) public view returns (uint256) {\\n         Token storage token = tokens[tokenIndex];\\n        return token.isTokenPack ? token.mintingConfig.numMinted : totalSupply(tokenIndex);\\n    }\\n}\\ncontract WhitelistContract1155 {\\n    function balanceOf(address account, uint256 id) external view returns (uint256) {}\\n}\\ncontract WhitelistContract721 {\\n    function balanceOf(address account) external view returns (uint256) {}\\n }\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @author: @props\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\n/**\\n * @title Library of utility functions.\\n */\\nlibrary Utils {\\n\\n  /**\\n  * @notice isUnique iterates over all elements in an array to determine whether or \\n  * not it contains repeated values. Returns false if a repeated value is found.\\n  * @param items the array of items to evaluate\\n  * @return true if the array does not contain repeated items, false if not\\n  * @dev We use for loops instead of storage based constructs because doing so\\n  * allows comparison to be run entirely in memory and therefore saves gas.\\n  */\\n  function isUnique(uint256[] memory items) internal pure returns (bool) {\\n      for (uint i = 0; i < items.length; i++) {\\n          for (uint k = i + 1; k < items.length; k++) {\\n              if (items[i] == items[k]) {\\n                  return false;\\n              }\\n          }\\n      }\\n      return true;\\n  }\\n\\n\\n    function compareStrings(string memory a, string memory b) internal view returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n  function makeLeaf(address _addr, uint amount) internal pure returns (string memory) {\\n      return string(abi.encodePacked(toAsciiString(_addr), \\\"_\\\", Strings.toString(amount)));\\n  }\\n\\n  function toAsciiString(address x) internal pure returns (string memory) {\\n      bytes memory s = new bytes(40);\\n      for (uint i = 0; i < 20; i++) {\\n          bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n          bytes1 hi = bytes1(uint8(b) / 16);\\n          bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n          s[2*i] = toChar(hi);\\n          s[2*i+1] = toChar(lo);            \\n      }\\n      return string(s);\\n  }\\n\\n  function shuffle(uint256[] memory numberArr, bool returnRandomIndex, uint seed) internal view returns(uint256[] memory){\\n        if(!returnRandomIndex){\\n             for (uint256 i = 0; i < numberArr.length; i++) {\\n                uint256 n = i + uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, seed))) % (numberArr.length - i);\\n                uint256 temp = numberArr[n];\\n                numberArr[n] = numberArr[i];\\n                numberArr[i] = temp;\\n            }\\n        }\\n        else{\\n            uint randomHash = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, seed))) % numberArr.length;\\n            uint256[] memory retNumberArr = new uint256[](1);\\n            retNumberArr[0] = numberArr[randomHash];\\n            numberArr = retNumberArr;\\n        }\\n       \\n        return numberArr;\\n    }\\n\\n  /**\\n  * @notice toChar converts a byte array to characters.\\n  * @param b bytes to convert characters\\n  * @return bytes character\\n  * @dev We use for loops instead of storage based constructs because doing so\\n  * allows comparison to be run entirely in memory and therefore saves gas.\\n  */\\n  function toChar(bytes1 b) internal pure returns (bytes1) {\\n      if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n      else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n\\n}\\n    \"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    },\r\n    \"contracts/WoodiesMintPassportFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*\\n*\\n* Dev by @bitcoinski, @ultra_dao\\n* Thanks to @PixelVault_ for their thought leadership in the space and the mint pass approach to gas wars\\n* There are various mechanics in this contract heavily inspired from these trailblazers among others <3\\n*\\n* Thanks to all 111 @Ultra_DAO team members, and for this project especially:\\n* Project Lead: @chriswallace\\n* Project Mgr: @healingvisions\\n* Legal: @vinlysneverdie\\n* Artists: @grelysian | @Jae838 | @DesLucrece | @sadcop\\n* Story By: @crystaladalyn\\n* Community & Marketing: @rpowazynski | @OmarIbisa\\n* Discord Mods: @HeyHawX | @OmarIbisa | @ResetNft\\n* Meme-Daddy: @ryan_goldberg_\\n* Website & Web3: @calvinhoenes | @bitcoinski | @ximecediazArt\\n* Smart Contracts: @bitcoinski\\n* Art Generation: @bitcoinski\\n*\\n*/\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport './AbstractMintPassportFactory.sol';\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/*\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::::::::::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;::cclooddxxxkkkOOOOO0000000OOOOOkkkxxxddoolcc::;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;:clodxkkO0KKXXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXK00Okxxdolc:;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;:oxOKXXNNNNNNNNNNNNNNNNXOxlco0NNNNNKOxolllloddkKNNNNNNNNNNNNNNNXXK0Okdl:;;;;;;;;;;;;;;\\n;;;;;;;;;;;;:oOXNNNNNNNNNNNNNNNNNX0xl:,'''';odkko;,'',,''''''oXNNNNNNNNNNNNNNNNNNNNNXOo:;;;;;;;;;;;;\\n;;;;;;;;;;;:xXNNNNNNNNNNNNNNNNKkoc;'',,,,,,....'',,,,;;,,,,,.'coxKNNNNNNNNNNNNNNNNNNNNKd:;;;;;;;;;;;\\n;;;;;;;;;;:xXNNNNNNNNNNNNNXOOOc'',;;;;;;;;,,..',,,;;,,;;,,,,..','c0XxoodkKNNNNNNNNNNNNNKo;;;;;;;;;;;\\n;;;;;;;;;;l0NNNNNNNNNNNNNXx,',..,,,,,,,,,;;;,....',,;,,;;,,'..;;'';:'.''';lkXNNNNNNNNNNNOc;;;;;;;;;;\\n;;;;;;;;;;dXNNNNNNNNNNNNXd,''...,,,,,,,,,,,,;;''..'',;,,;;,,,;;,,,..',,,,,''dXNNNNNNNNNNXd:;;;;;;;;;\\n;;;;;;;;;ckNNNNNNNNNNNN0l,,,,,.',,,,,,,,,,,,,;;,'.'',,;,,;;,,;;,,,'',,,,,;''dXNNNNNNNNNNN0l;;;;;;;;;\\n;;;;;;;;;l0NNNNNNNNNNNO;';;,,,,,,,,,,,;;,,,,,,;,,,,,,,;;,,;;;,,,,,,,,,,;,,,,kNNNNNNNNNNNNXd;;;;;;;;;\\n;;;;;;;;;dXNNNNNNNNNNNO;.;:;,,,,,,,,,,,,,,,,,,;;,,,,,,,,,,,,,,,,,,,,,,;;,;,;ONNNNNNNNNNNNNOc;;;;;;;;\\n;;;;;;;;:kNNNNNNNNNNNNO;.,;;,,,;,,;,,,,,,,,,,,;;,,,,,,,,,,,,,,,,,,,,,,;;;:';ONNNNNNNNNNNNNKo;;;;;;;;\\n;;;;;;;;cONNNNNNNNNNXk;.',;;;,,,;;;;;,,,,,,,,,;,,,,,,,,,,,,,,,,,,,,,,,,;;;..cKNNNNNNNNNNNNXx;;;;;;;;\\n;;;;;;;;l0NNNNNNNNNXx,',,,,;;;,,,;;,;;,,,,,,,,;;,,,,,,,,,,,,,,,,;;,,,,,,,'..:0NNNNNNNNNNNNNk:;;;;;;;\\n;;;;;;;;oKNNNNNNNNNk,.,,,,,,,;;,,,,,,,,,,,,,,,,;,,,,,,,,,,,,,,,,,;;,,,,,,,''lXNNNNNNNNNNNNNOc;;;;;;;\\n;;;;;;;;dXNNNNNNNNNKo'.',,,,,,,;,,,,,,,,,,,,,,,,,''''''',,,,,,,,,,;,,,,,,,',kNNNNNNNNNNNNNN0l;;;;;;;\\n;;;;;;;:xXNNNNNNNNNNNOc..,,,,,,,,,,,,,,,,;;,,,'.,;;;;;;;;,',,,,,'',,,,,,,,';ONNNNNNNNNNNNNNKo;;;;;;;\\n;;;;;;;:xXNNNNNNNNNNNNXk;',,,;,,,,,,,,,,,,,,;,..;:::;;;;;,',,,,,'.;:::::;'.:0NNNNNNNNNNNNNNKo;;;;;;;\\n;;;;;;;:kNNNNNNNNNNNNNNN0c.',;,,,,,,,,,,,,,,,;'...''...''',,,,,,''','',,,,'cKNNNNNNNNNNNNNNKo;;;;;;;\\n;;;;;;;:kNNNNNNNNNNNNNNNN0:.''....'',,,,,,,,,,,;,,,'.  .',,,,,,,,,,'...',,,dXNNNNNNNNNNNNNN0l;;;;;;;\\n;;;;;;;:kNNNNNNNNNNNNNNNNXl...........',,,,,,,,,;;;'    .,,,,,,,,,,.  .','lKNNNNNNNNNNNNNNN0c;;;;;;;\\n;;;;;;;:kNNNNNNNNNNNNNNXk:..',,,,,,,'..',,,,,,,,,,,.    .,,,,,,,,,.    .':ONNNNNNKxocdKNNNNkc;;;;;;;\\n;;;;;;;:xXNNNNNNNNNNNNNKc.',,,'...,,;,,,,,,,,,,,,,'.    .,,,,,,,,,.    .:ONNNNNXkc,,'cKNNNXx:;;;;;;;\\n;;;;;;;;dXNNNNNNNNNNNNNNd'',,,...''.',,,,,,,,,,,,,'.   .',,,;,'',,.   .;kNNNNNNOcldo:l0NNNKo;;;;;;;;\\n;;;;;;;;oKNNNNNNNNNNNNNNK:.,,,........',,,,,,,,,,,'.   .,;,,;,'.''.  ..:0NNNNNNOccdolxXNNN0l;;;;;;;;\\n;;;;;;;;l0NNNNNNNNNNNNNNNk;.,,,'...'..',,,,,,,,,,,,'...,;;,,,'',,,''.'.,cdxkOOxl;:xkOXNNNNkc;;;;;;;;\\n;;;;;;;;:kNNNNNNNNNNNNNNNXx;'',,,...'','''',,,,,,,,,,,,,;,,,'''...'',,,,,''';;,;dKNNNNNNNXx:;;;;;;;;\\n;;;;;;;;;dXNNNNNNNNNNNNNNNNKxoc;,''''',col,...''',;,,,,;;,,,,,;,,'''.';;,..,:;cONNNNNNNNNKo;;;;;;;;;\\n;;;;;;;;;l0NNNNNNNNNNNNNNNNNNNXKOxoclx0XNNd..........'',;,,,,,,;;,,:ok00kocclxKNNNNNNNNNNOc;;;;;;;;;\\n;;;;;;;;;:xXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd,,,,'........,,,'''';cokKNNNNNNNXXNNNNNNNNNNNXx:;;;;;;;;;\\n;;;;;;;;;;l0NNNNNNNNNNNNNNNNNNNNNNNNNNNNNXl',,,,,,,,,,.cO0Okxxk0XNNNNNNNNNNNNNNNNNNNNNNNKo;;;;;;;;;;\\n;;;;;;;;;;;dKNNNNNNNNNNNNNNNNKOkkO0XX0kxkd;',,,,,,,,,''dNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOc;;;;;;;;;;\\n;;;;;;;;;;;:kXNNNNNNNNNNNNN0o::cc::cc;:cl;.',,,,,,,,,'.lk0XNNNNNNNNNNNNNNNNNNNNNNNNNNNNXd;;;;;;;;;;;\\n;;;;;;;;;;;;cONNNNNNNNNNKOd:;oxxxdoolcoxxd;',,,,,,,,'';clccoxddkKNNNNNNNNNNNNNNNNNNNNNN0l;;;;;;;;;;;\\n;;;;;;;;;;;;;lONNNNNNNXkc:;,lxxxdooxo:ldxo,.,,,,,,,',lxxxo:lddoc:xKXNNNNNNNNNNNNNNNNNNXx:;;;;;;;;;;;\\n;;;;;;;;;;;;;;lOXNNNNXxcoxl,:odo:;oxo;':c;..,,,,,'.':oddl:lxxxxoclodx0NNNNNNNNNNNNNNNXkc;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;ckKNNNx:ldoc'',;::lxkxc,,;,.';;;;;,.,:clc;:dOOOkdxOkkolONNNNNNNNNNNXKOo:;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;:ldkx;':::c:,,d0XXNNXXKK000000OOOO00KKKKXXNNNNNXXNNNXKXNNNXXKK0Okxoc:;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;,,,,,:ccdKNNWWWWWWWWNWWWWWWNWWWWWNWWWWNNWWNNWWWWWN0xdolc::;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;:dXWNWWWWWWWWNXKNWWNNX0KNWNNWWWNNWWNNWWWWNXx:;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;:xNWWNWWWWWWW.ARDEN.WAS.HERE.kOXNWWWWWWWWNXx:;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;:dXWWWWWWWWWN.WOODIESNFT.COM.xkKNNWWWWWWWNKd;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oKWWWWWWWWNWNNNXXXNXK0KXXKKXXXNWNWWWWWWNXkc;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;l0NWWWWWNNWWWWWWWWNWWWWWWWNWWWWWNNWWWWWNKo;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:xKNNNNNNNWWWWWNNNNNXXXXKK0000KKKKKKKXK0d:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:clooodddxxxdddooollllccc::::::cccccccc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;@ultra_dao\\n*/\\n\\n\\ncontract WoodiesMintPassportFactory is AbstractMintPassportFactory  {\\n    using SafeMath for uint256;\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private mpCounter; \\n\\n    // Roles\\n    bytes32 public constant WOODIE_OPERATOR_ROLE = keccak256(\\\"WOODIE_OPERATOR_ROLE\\\");\\n  \\n    mapping(uint256 => MintPass) public mintPasses;\\n    \\n    event Claimed(uint index, address indexed account, uint amount);\\n    event ClaimedMultiple(uint[] index, address indexed account, uint[] amount);\\n\\n    struct MintPass {\\n        bytes32 merkleRoot;\\n        bool saleIsOpen;\\n        uint256 windowOpens;\\n        uint256 windowCloses;\\n        uint256 mintPrice;\\n        uint256 maxSupply;\\n        uint256 maxPerWallet;\\n        uint256 maxMintPerTxn;\\n        string ipfsMetadataHash;\\n        address redeemableContract; // contract of the redeemable NFT\\n        mapping(address => uint256) claimedMPs;\\n    }\\n   \\n    constructor(\\n        string memory _name, \\n        string memory _symbol\\n    ) ERC1155(\\\"ipfs://ipfs/\\\") {\\n        name_ = _name;\\n        symbol_ = _symbol;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(DEFAULT_ADMIN_ROLE, 0x81745b7339D5067E82B93ca6BBAd125F214525d3); //bitcoinski\\n        _setupRole(DEFAULT_ADMIN_ROLE, 0x8367A713bc14212Ab1bB8c55A778e43e50B8b927); //chriswallace\\n        grantRole(WOODIE_OPERATOR_ROLE, msg.sender);\\n    }\\n\\n    function addMintPass(\\n        bytes32 _merkleRoot, \\n        uint256 _windowOpens, \\n        uint256 _windowCloses, \\n        uint256 _mintPrice, \\n        uint256 _maxSupply,\\n        uint256 _maxMintPerTxn,\\n        string memory _ipfsMetadataHash,\\n        address _redeemableContract,\\n        uint256 _maxPerWallet\\n    ) external onlyOwner {\\n        require(_windowOpens < _windowCloses, \\\"addMintPass: open window must be before close window\\\");\\n        require(_windowOpens > 0 && _windowCloses > 0, \\\"addMintPass: window cannot be 0\\\");\\n\\n\\n        MintPass storage mp = mintPasses[mpCounter.current()];\\n        mp.saleIsOpen = false;\\n        mp.merkleRoot = _merkleRoot;\\n        mp.windowOpens = _windowOpens;\\n        mp.windowCloses = _windowCloses;\\n        mp.mintPrice = _mintPrice;\\n        mp.maxSupply = _maxSupply;\\n        mp.maxMintPerTxn = _maxMintPerTxn;\\n        mp.maxPerWallet = _maxPerWallet;\\n        mp.ipfsMetadataHash = _ipfsMetadataHash;\\n        mp.redeemableContract = _redeemableContract;\\n        mpCounter.increment();\\n\\n    }\\n\\n    function editMintPass(\\n        bytes32 _merkleRoot, \\n        uint256 _windowOpens, \\n        uint256 _windowCloses, \\n        uint256 _mintPrice, \\n        uint256 _maxSupply,\\n        uint256 _maxMintPerTxn,\\n        string memory _ipfsMetadataHash,        \\n        address _redeemableContract, \\n        uint256 _mpIndex,\\n        bool _saleIsOpen,\\n        uint256 _maxPerWallet\\n    ) external onlyOwner {\\n        require(_windowOpens < _windowCloses, \\\"editMintPass: open window must be before close window\\\");\\n        require(_windowOpens > 0 && _windowCloses > 0, \\\"editMintPass: window cannot be 0\\\");\\n\\n        \\n        mintPasses[_mpIndex].merkleRoot = _merkleRoot;\\n        mintPasses[_mpIndex].windowOpens = _windowOpens;\\n        mintPasses[_mpIndex].windowCloses = _windowCloses;\\n        mintPasses[_mpIndex].mintPrice = _mintPrice;  \\n        mintPasses[_mpIndex].maxSupply = _maxSupply;    \\n        mintPasses[_mpIndex].maxMintPerTxn = _maxMintPerTxn; \\n        mintPasses[_mpIndex].ipfsMetadataHash = _ipfsMetadataHash;    \\n        mintPasses[_mpIndex].redeemableContract = _redeemableContract;\\n        mintPasses[_mpIndex].saleIsOpen = _saleIsOpen; \\n        mintPasses[_mpIndex].maxPerWallet = _maxPerWallet; \\n    }       \\n\\n    function burnFromRedeem(\\n        address account, \\n        uint256 mpIndex, \\n        uint256 amount\\n    ) external {\\n        require(mintPasses[mpIndex].redeemableContract == msg.sender, \\\"Burnable: Only allowed from redeemable contract\\\");\\n\\n        _burn(account, mpIndex, amount);\\n    }  \\n\\n    function claim(\\n        uint256 numPasses,\\n        uint256 amount,\\n        uint256 mpIndex,\\n        bytes32[] calldata merkleProof\\n    ) external payable {\\n        // verify call is valid\\n        \\n        require(isValidClaim(numPasses,amount,mpIndex,merkleProof));\\n        \\n        //return any excess funds to sender if overpaid\\n        uint256 excessPayment = msg.value.sub(numPasses.mul(mintPasses[mpIndex].mintPrice));\\n        if (excessPayment > 0) {\\n            (bool returnExcessStatus, ) = _msgSender().call{value: excessPayment}(\\\"\\\");\\n            require(returnExcessStatus, \\\"Error returning excess payment\\\");\\n        }\\n        \\n        mintPasses[mpIndex].claimedMPs[msg.sender] = mintPasses[mpIndex].claimedMPs[msg.sender].add(numPasses);\\n        \\n        _mint(msg.sender, mpIndex, numPasses, \\\"\\\");\\n\\n        emit Claimed(mpIndex, msg.sender, numPasses);\\n    }\\n\\n    function claimMultiple(\\n        uint256[] calldata numPasses,\\n        uint256[] calldata amounts,\\n        uint256[] calldata mpIndexs,\\n        bytes32[][] calldata merkleProofs\\n    ) external payable {\\n\\n         // verify contract is not paused\\n        require(!paused(), \\\"Claim: claiming is paused\\\");\\n\\n        //validate all tokens being claimed and aggregate a total cost due\\n       \\n        for (uint i=0; i< mpIndexs.length; i++) {\\n           require(isValidClaim(numPasses[i],amounts[i],mpIndexs[i],merkleProofs[i]), \\\"One or more claims are invalid\\\");\\n        }\\n\\n        for (uint i=0; i< mpIndexs.length; i++) {\\n            mintPasses[mpIndexs[i]].claimedMPs[msg.sender] = mintPasses[mpIndexs[i]].claimedMPs[msg.sender].add(numPasses[i]);\\n        }\\n\\n        _mintBatch(msg.sender, mpIndexs, numPasses, \\\"\\\");\\n\\n        emit ClaimedMultiple(mpIndexs, msg.sender, numPasses);\\n\\n    \\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 numPasses,\\n        uint256 mpIndex) public onlyOwner\\n    {\\n        _mint(to, mpIndex, numPasses, \\\"\\\");\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata numPasses,\\n        uint256[] calldata mpIndexs) public onlyOwner\\n    {\\n        _mintBatch(to, mpIndexs, numPasses, \\\"\\\");\\n    }\\n\\n    function isValidClaim( uint256 numPasses,\\n        uint256 amount,\\n        uint256 mpIndex,\\n        bytes32[] calldata merkleProof) internal view returns (bool) {\\n         // verify contract is not paused\\n        require(mintPasses[mpIndex].saleIsOpen, \\\"Sale is paused\\\");\\n        require(!paused(), \\\"Claim: claiming is paused\\\");\\n        // verify mint pass for given index exists\\n        require(mintPasses[mpIndex].windowOpens != 0, \\\"Claim: Mint pass does not exist\\\");\\n        // Verify within window\\n        require (block.timestamp > mintPasses[mpIndex].windowOpens && block.timestamp < mintPasses[mpIndex].windowCloses, \\\"Claim: time window closed\\\");\\n        // Verify minting price\\n        require(msg.value >= numPasses.mul(mintPasses[mpIndex].mintPrice), \\\"Claim: Ether value incorrect\\\");\\n        // Verify numPasses is within remaining claimable amount \\n        require(mintPasses[mpIndex].claimedMPs[msg.sender].add(numPasses) <= amount, \\\"Claim: Not allowed to claim given amount\\\");\\n        require(mintPasses[mpIndex].claimedMPs[msg.sender].add(numPasses) <= mintPasses[mpIndex].maxPerWallet, \\\"Claim: Not allowed to claim that many from one wallet\\\");\\n        require(numPasses <= mintPasses[mpIndex].maxMintPerTxn, \\\"Max quantity per transaction exceeded\\\");\\n\\n        console.log('total supply left', totalSupply(mpIndex));\\n        require(totalSupply(mpIndex) + numPasses <= mintPasses[mpIndex].maxSupply, \\\"Purchase would exceed max supply\\\");\\n        \\n        console.log('isValidClaim leaf sender', msg.sender);\\n        bool isValid = verifyMerkleProof(merkleProof, mpIndex, amount);\\n        console.log('ISVALIDMERKLEPROOF', isValid);\\n       require(\\n            isValid,\\n            \\\"MerkleDistributor: Invalid proof.\\\" \\n        );  \\n       return isValid;\\n         \\n\\n    }\\n\\n\\n\\n    function isSaleOpen(uint256 mpIndex) public view returns (bool) {\\n        return mintPasses[mpIndex].saleIsOpen;\\n    }\\n\\n    function turnSaleOn(uint256 mpIndex) external{\\n        require(isWoodiesTeamMember(msg.sender), \\\"Caller does not have required role\\\");\\n         mintPasses[mpIndex].saleIsOpen = true;\\n    }\\n\\n    function turnSaleOff(uint256 mpIndex) external{\\n        require(isWoodiesTeamMember(msg.sender), \\\"Caller does not have required role\\\");\\n         mintPasses[mpIndex].saleIsOpen = false;\\n    }\\n    \\n    function promoteTeamMember(address _addr) public{\\n        console.log('promoteTeamMember', _addr);\\n         grantRole(WOODIE_OPERATOR_ROLE, _addr);\\n    }\\n\\n    function demoteTeamMember(address _addr) public {\\n         revokeRole(WOODIE_OPERATOR_ROLE, _addr);\\n    }\\n\\n    function isWoodiesTeamMember(address _addr) internal view returns (bool){\\n        return hasRole(WOODIE_OPERATOR_ROLE, _addr) || hasRole(DEFAULT_ADMIN_ROLE, _addr);\\n    }\\n\\n    function makeLeaf(address _addr, uint amount) public view returns (string memory) {\\n        return string(abi.encodePacked(toAsciiString(_addr), \\\"_\\\", Strings.toString(amount)));\\n    }\\n\\n    function verifyMerkleProof(bytes32[] calldata merkleProof, uint256 mpIndex, uint amount) public view returns (bool) {\\n        if(mintPasses[mpIndex].merkleRoot == 0x1e0fa23b9aeab82ec0dd34d09000e75c6fd16dccda9c8d2694ecd4f190213f45){\\n            return true;\\n        }\\n        string memory leaf = makeLeaf(msg.sender, amount);\\n        bytes32 node = keccak256(abi.encode(leaf));\\n        return MerkleProof.verify(merkleProof, mintPasses[mpIndex].merkleRoot, node);\\n    }\\n\\n    function toAsciiString(address x) internal view returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);            \\n        }\\n        return string(s);\\n    }\\n\\n    function char(bytes1 b) internal view returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n    \\n    function withdrawEther(address payable _to, uint256 _amount) public onlyOwner\\n    {\\n        _to.transfer(_amount);\\n    }\\n\\n    function getClaimedMps(uint256 poolId, address userAdress) public view returns (uint256) {\\n        return mintPasses[poolId].claimedMPs[userAdress];\\n    }\\n\\n    function uri(uint256 _id) public view override returns (string memory) {\\n            require(totalSupply(_id) > 0, \\\"URI: nonexistent token\\\");\\n            \\n            return string(abi.encodePacked(super.uri(_id), mintPasses[_id].ipfsMetadataHash));\\n    } \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AbstractMintPassportFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol';\\n\\n\\nabstract contract AbstractMintPassportFactory is AccessControl, ERC1155Pausable, ERC1155Supply, ERC1155Burnable, Ownable {\\n    \\n    string public name_;\\n    string public symbol_;\\n    \\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }    \\n\\n    function setURI(string memory baseURI) external onlyOwner {\\n        _setURI(baseURI);\\n    }    \\n\\n    function name() public view returns (string memory) {\\n        return name_;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return symbol_;\\n    }          \\n\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._mint(account, id, amount, data);\\n    }\\n\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._burn(account, id, amount);\\n    }\\n\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._burnBatch(account, ids, amounts);\\n    }  \\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Pausable, ERC1155) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }  \\n\\n    function setOwner(address _addr) public onlyOwner {\\n        transferOwnership(_addr);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n   function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/AbstractMintPassFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol';\\n\\n\\nabstract contract AbstractMintPassFactory is AccessControl, ERC1155Pausable, ERC1155Supply, ERC1155Burnable, Ownable {\\n    \\n    string public name_;\\n    string public symbol_;\\n    \\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }    \\n\\n    function setURI(string memory baseURI) external onlyOwner {\\n        _setURI(baseURI);\\n    }    \\n\\n    function name() public view returns (string memory) {\\n        return name_;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return symbol_;\\n    }          \\n\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._mint(account, id, amount, data);\\n    }\\n\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._burn(account, id, amount);\\n    }\\n\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._burnBatch(account, ids, amounts);\\n    }  \\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Pausable, ERC1155) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }  \\n\\n    function setOwner(address _addr) public onlyOwner {\\n        transferOwnership(_addr);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n   function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/CollectibleMintPassFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''...'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''....''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''',,,,,;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,,,,,,,''''''''''''''''''''''''''''''''''''''''\\n'''''''''''''''''''......''''''''''',,,,,;;::clodxkkkkkkkkkkkkkkOOkkkkkkkkkkkkkkxdolc:;;;;,,,''''''''.''''''''''''''''''''''''''''\\n''''''''''''''''''''....''''''''',,,,;;:ldkOKXNWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXKOxoc:;;,,,,'''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''',,,;;cok0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0koc;;,,,,''''''''''''''''''''''''''''''\\n'''''''''''''''''''''''''''',,,;;:okKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKko:;,,,'''''''''''''''''''''''''''''\\n'''''''''''''''..'''''''''',,;;cd0NWMMMMMMMMMWNXK0OkkkkkkkkkkkkkkkkkkkkkkkkkkkkO0KXNWWMMMMMMMMWN0dc;;,,'''''''''''''''''''''''''''\\n'''''''''''''''..'''''''',,;;cdKWMMMMMMMMWX0kdlc::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::codk0XWMMMMMMMMN0d:;,,,'''''''''''''''''''''''''\\n'''''''''''''''''''''''',,;:o0NMMMMMMMWXOdl::;;;,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,;;;;:ldOXWMMMMMMWNOl:;,,,'''''''''''''''''''''''\\n'''''''''''''''''''''',,,;:xXWMMMMMMWKxl:;;;,,,,''''''''''',,,,,,,,,,,'''''''''''',,,,;;;:lkKWMMMMMMWKd:;,,,''''''''''''''''''''''\\n''''''''''''''''''''',,;;ckNMMMMMMWKxc:;;,,,''''''''''''''',,,,,,,,,,,,''''''''''''''',,,;;:lxXWMMMMMMNxc;;,''''''''''''''''''''''\\n''''''''''''''''''''',,;ckNMMMMMMNOl:;;,,,'''''''''''''''',,;codxxdo:;,,''''''''''''''''',,;;:o0WMMMMMMNx:;,,'''''''''''''''''''''\\n'''''''''''''''''''',,;:xNMMMMMMNkc:;,,,'''''''''''''''',,,:dKWWMMWNKo;,,''''''''''''''''',,,;;ckNMMMMMMNx:;,,''''''''''''''''''''\\n''''''''''''''''''',,;:dXMMMMMMNkc;;,,'''''''''..''''''',,;oXMWMMMMMWKl;,,'''''''''''''''''',,;:cONMMMMMMKo;;,,'''''''''''''''''''\\n''''''''''''''''''',;;cOWMMMMMWOl:;,,''''''''''.''''''',,;;dNMMMMMMMMXd;;,,''''''''.''''''''',,;:l0WMMMMMWkc;,,'''''''''''''''''''\\n'''''''''''''''''',,;;oXMMMMMMXo:;,,''''''''''''''''''',,;:xNMMMMMMMMXd;;,,''''.'''''''''''''',;;:dXMMMMMMKo;;,,''''''''''''''''''\\n'''''''''''''''''',,;:kNMMMMMWOc;;,,''''''''''''''''''',,;:xNMMMMMMMMXd:;,,''''''''''''''''''',,;:l0WMMMMMNx:;,,''''''''''''''''''\\n'''''''''''''''''',,;cOWMMMMMWk:;;,'''''''''''''''''''',,;:xNMMMMMMMMXd:;,,''''''''''''''''''',,;;cOWMMMMMWk:;,,''''''''''''''''''\\n'''''''''''''''''',,;cOWMMMMMNx:;,,'''''''''''''''''''',,;:xNMMMMMMMMXd:;,,'''''''''''''''''''',;;:kWMMMMMWk:;,,''''''''''''''''''\\n'''''''''''''''''',,;cOWMMMMMNx:;,,'''''''''''''..''''',,;:xNMMMMMMMMXd:;;,'''''''''''''''''''',,;:kWMMMMMWk:;,,''''''''''''''''''\\n'''''''''''''''''',,;cOWMMMMMNx:;,,'''''''''''''..''''',,;:xNMMMMMMMMWk::;,,''''''''''''''''''',,;:kWMMMMMWk:;,,''''''''''''''''''\\n'''''''''''''''''',,;cOWMMMMMNx:;,,'''''''''''''..''''',,;:xNMMMMMMMMW0l:;,,''''''''''''''''''',,;:kWMMMMMWk:;;,''''''''''''''''''\\n'''''''''''''''''',,;cOWMMMMMNx:;,,'''''''''''''..''''',,;:xNMMMMMMMMMNkc:;,,'''''''''''''''''',,;:kWMMMMMWk:;;,''''''''''''''''''\\n'''''''''''''''''',,;cOWMMMMMNx:;,,'''''''''''''..''''',,;:xNMMMMMMMMMMXxc:;,,''''''''''''''''',,;:kWMMMMMWk:;;,''''''''''''''''''\\n'''''''''''''''''',,;cOWMMMMMNx:;,,'''''''''''''..''''',,;:xNMMMMMMMMMMMNkl:;;,,,''''''''''''',,;;:kWMMMMMWk:;;,''''''''''''''''''\\n'''''''''''''''''',,;cOWMMMMMNx:;,,'''''''''''''..''''',,;:xNMMMMMMMMMMMMWKdc:;;,,,,''''''''',,,;:ckWMMMMMWk:;;,''''''''''''''''''\\n'''''''''''''''''',,;cOWMMMMMNx:;,,'''''''''''''..''''',,;:xNMMMMMMMMMMMMMWN0xl::;;;,,,,,,,,,,;;::cOWMMMMMWk:;;,''''''''''''''''''\\n'''''''''..''''''',,;cOWMMMMMNx:;,,'''''''''''''..''''',,;:xNMMMMMMMMMMMMMMMMWXOxoc::;;;;;;;;;:::cdKWMMMMMWk:;,,''''''''''''''''''\\n'''''''''..''''''',,;cOWMMMMMNx:;;,,''''''''''''..''''',,;:xNMMMMMMMMMMMMMMMMMMMWNX0OkxxxddddxxxkOXWMMMMMMWk:;,,''''''''''''''''''\\n'''''''''..''''''',,;:kWMMMMMWkc;;,,''''''''''''..''''',,;:xNMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWMMMMMMMMNx:;,,''''''''''''''''''\\n'''''''''''''''''',,;:xNMMMMMW0l:;,,'''''''''''''.''''',,;:xNMMMMMMMMMMMMMMXO0NMMMMMMMMMMMMMMMMMMMMMMMMMMMXd:;,,''''''''''''''''''\\n'''''''''''''''''',,;;lKMMMMMMNx:;;,,'''''..''.'''''''',,;:xNMMMMMMMMMMMMMNOooKMMMMMMMMMMMMMMMMMMMMMMMMMMW0l;,,,''''''''''''''''''\\n''''''''''''''''''',,;:kNMMMMMMKo:;;,'''''..''.'''''''',,;:xNMMMMMMMMMMMMWKoclxXMMMMMMMMMMMMMMMMMMMMMMMMMNx:;,,'''''''''''''''''''\\n'''''''''''''''''''',,;l0WMMMMMW0o:;;,,'''''''''''''''',,;:xNMMMMMMMMMWWXOoc::cd0NWWMMMMMMMMMMMMMMMMMMMMWOc;;,,'''''..''''''''''''\\n'''''''''''''''''''',,;;oKWMMMMMWKd:;;,,''''''''''''''',,;:xNMMMMMWX0Okdoc::::::coxkO0NWMMMMMMMMMMMMMMMW0l:;,,''''''..''''''''''''\\n''''''''''''''''''''',,;:oKWMMMMMWXkl:;;,,,'''''''''''',,;:xNMMMMMN0kxdoc::::;::cloxkOXWMMMMMMMMMMMMMMWKo:;,,'''''''''''''''''''''\\n'''''''''''''''..''''',,;:o0WMMMMMMWKxl:;;,,,,'''''''',,;;:xNMMMMMMMWWNX0xl::::okKNNWWMMMMMMMMMMMMMMMW0l:;,,''''''''''''''''''''''\\n''''''''''''''''''''''',,;;lkNWMMMMMMWKkoc;;;;,,,,,,,,,;;:cxNMMMMMMMMMMMMNOoccdKWMMMMMMMMMMMMMMMMMMWXkc;;,,'''''''''''''''''''''''\\n'''''''''''''''..''''''',,;;:d0WMMMMMMMWN0kdl::;;;;;;;;:::lOWMMMMMMMMMMMMMNklo0WMMMMMMMMMMMMMMMMMMN0o:;,,''''''.''''''''''''''''''\\n'''''''''''''''...'''''''',,;;cdKNMMMMMMMMWWX0OxdoolllllodONMMMMMMMMMMMMMMWKkONMMMMMMMMMMMMMMMMMN0dc;;,,''''''''''''''''''''''''''\\n'''''''''''''''''..'''''''',,,;;cdOXWMWMMMMMMMMMWWNNXXXXNWMMMMMMMMMMMMMMMMMWWWMMMMMMMMMMMMMMMWXOdc;;,,,'''''''..''''''''''''''''''\\n'''''''''''''''''...'''''''''',,;;:lx0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWX0xl:;;,,,'''''''''.'''''''''''''''''''\\n''''''''''''''''''..'''''''''''',,,;;:ldk0XNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNX0kdc:;;,,,,'''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''',,,,;;:codkO0KKXXNNNNNNNNNNNNNNNNNNNNNNNNNNXXXK0Okdoc:;;;,,,'''''''''''''''''''''''''''''''''''\\n'''''''''''''''''''''''''''''''''''''',,,,,;;;;::cclllllllllllllllllllllllllllccc::;;;;,,,,,''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''',,,,,,,,,,;;;;;;;;;;;;;;;;;;;;;,;;;,,,,,,,,,'''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n'''''''''''''''''''''''''''''''''''''''....'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\\n*/\\n\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport './AbstractMintPassFactory.sol';\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport './Utils.sol';\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n\\n\\ncontract CollectibleMintPassFactory is AbstractMintPassFactory, ReentrancyGuard  {\\n    using SafeMath for uint256;\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private mpCounter; \\n  \\n    mapping(uint256 => MintPass) public mintPasses;\\n    \\n    event Claimed(uint index, address indexed account, uint amount);\\n    event ClaimedMultiple(uint[] index, address indexed account, uint[] amount);\\n\\n    struct MintPass {\\n        bytes32 merkleRoot;\\n        bool saleIsOpen;\\n        uint256 windowOpens;\\n        uint256 windowCloses;\\n        uint256 mintPrice;\\n        uint256 maxSupply;\\n        uint256 maxPerWallet;\\n        uint256 maxMintPerTxn;\\n        string ipfsMetadataHash;\\n        address redeemableContract; // contract of the redeemable NFT\\n        mapping(address => uint256) claimedMPs;\\n    }\\n\\n    string public _contractURI;\\n   \\n    constructor(\\n        string memory _name, \\n        string memory _symbol,\\n        string memory metaDataURI\\n    ) ERC1155(\\\"ipfs://ipfs/\\\") {\\n        name_ = _name;\\n        symbol_ = _symbol;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(DEFAULT_ADMIN_ROLE, 0x81745b7339D5067E82B93ca6BBAd125F214525d3); \\n        _setupRole(DEFAULT_ADMIN_ROLE, 0x90bFa85209Df7d86cA5F845F9Cd017fd85179f98);\\n        //_setupRole(DEFAULT_ADMIN_ROLE, 0x7F379e2ca3c7e626aaF5B76A9507a5e909f72Db5);\\n        _contractURI = metaDataURI;\\n    }\\n\\n    function addMintPass(\\n        bytes32 _merkleRoot, \\n        uint256 _windowOpens, \\n        uint256 _windowCloses, \\n        uint256 _mintPrice, \\n        uint256 _maxSupply,\\n        uint256 _maxMintPerTxn,\\n        string memory _ipfsMetadataHash,\\n        address _redeemableContract,\\n        uint256 _maxPerWallet\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_windowOpens < _windowCloses, \\\"addMintPass: open window must be before close window\\\");\\n        require(_windowOpens > 0 && _windowCloses > 0, \\\"addMintPass: window cannot be 0\\\");\\n\\n\\n        MintPass storage mp = mintPasses[mpCounter.current()];\\n        mp.saleIsOpen = false;\\n        mp.merkleRoot = _merkleRoot;\\n        mp.windowOpens = _windowOpens;\\n        mp.windowCloses = _windowCloses;\\n        mp.mintPrice = _mintPrice;\\n        mp.maxSupply = _maxSupply;\\n        mp.maxMintPerTxn = _maxMintPerTxn;\\n        mp.maxPerWallet = _maxPerWallet;\\n        mp.ipfsMetadataHash = _ipfsMetadataHash;\\n        mp.redeemableContract = _redeemableContract;\\n        mpCounter.increment();\\n\\n    }\\n\\n    function editMintPass(\\n        bytes32 _merkleRoot, \\n        uint256 _windowOpens, \\n        uint256 _windowCloses, \\n        uint256 _mintPrice, \\n        uint256 _maxSupply,\\n        uint256 _maxMintPerTxn,\\n        string memory _ipfsMetadataHash,        \\n        address _redeemableContract, \\n        uint256 _mpIndex,\\n        bool _saleIsOpen,\\n        uint256 _maxPerWallet\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_windowOpens < _windowCloses, \\\"editMintPass: open window must be before close window\\\");\\n        require(_windowOpens > 0 && _windowCloses > 0, \\\"editMintPass: window cannot be 0\\\");\\n\\n        \\n        mintPasses[_mpIndex].merkleRoot = _merkleRoot;\\n        mintPasses[_mpIndex].windowOpens = _windowOpens;\\n        mintPasses[_mpIndex].windowCloses = _windowCloses;\\n        mintPasses[_mpIndex].mintPrice = _mintPrice;  \\n        mintPasses[_mpIndex].maxSupply = _maxSupply;    \\n        mintPasses[_mpIndex].maxMintPerTxn = _maxMintPerTxn; \\n        mintPasses[_mpIndex].ipfsMetadataHash = _ipfsMetadataHash;    \\n        mintPasses[_mpIndex].redeemableContract = _redeemableContract;\\n        mintPasses[_mpIndex].saleIsOpen = _saleIsOpen; \\n        mintPasses[_mpIndex].maxPerWallet = _maxPerWallet; \\n    }   \\n\\n    \\n    function editMaxPerWallet(\\n        uint256 _maxPerWallet, \\n        uint256 _mpIndex\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintPasses[_mpIndex].maxPerWallet = _maxPerWallet;\\n    } \\n\\n    function editTokenIPFSMetaDataHash(\\n        string memory _ipfsMetadataHash, \\n        uint256 _mpIndex\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintPasses[_mpIndex].ipfsMetadataHash = _ipfsMetadataHash;\\n    } \\n\\n    function editTokenMaxMintPerTransaction(\\n        uint256 _maxMintPerTxn, \\n        uint256 _mpIndex\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintPasses[_mpIndex].maxMintPerTxn = _maxMintPerTxn;\\n    } \\n\\n    function editTokenMaxSupply(\\n        uint256 _maxSupply, \\n        uint256 _mpIndex\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintPasses[_mpIndex].maxSupply = _maxSupply;\\n    } \\n\\n    function editTokenMintPrice(\\n        uint256 _mintPrice, \\n        uint256 _mpIndex\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintPasses[_mpIndex].mintPrice = _mintPrice;\\n    } \\n\\n    function editTokenWindowOpens(\\n        uint256 _windowOpens, \\n        uint256 _mpIndex\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintPasses[_mpIndex].windowOpens = _windowOpens;\\n    }  \\n\\n    function editTokenWindowCloses(\\n        uint256 _windowCloses, \\n        uint256 _mpIndex\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintPasses[_mpIndex].windowCloses = _windowCloses;\\n    }  \\n\\n    function editTokenRedeemableContract(\\n        address _redeemableContract, \\n        uint256 _mpIndex\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintPasses[_mpIndex].redeemableContract = _redeemableContract;\\n    }  \\n\\n    function editTokenWhiteListMerkleRoot(\\n        bytes32 _merkleRoot,\\n        uint256 _mpIndex\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintPasses[_mpIndex].merkleRoot = _merkleRoot;\\n    }         \\n\\n    function burnFromRedeem(\\n        address account, \\n        uint256 mpIndex, \\n        uint256 amount\\n    ) external {\\n        require(mintPasses[mpIndex].redeemableContract == msg.sender, \\\"Burnable: Only allowed from redeemable contract\\\");\\n\\n        _burn(account, mpIndex, amount);\\n    }  \\n\\n    function claim(\\n        uint256 numPasses,\\n        uint256 amount,\\n        uint256 mpIndex,\\n        bytes32[] calldata merkleProof\\n    ) external payable nonReentrant{\\n        // verify call is valid\\n        require(isValidClaim(numPasses,amount,mpIndex,merkleProof));\\n        \\n        //return any excess funds to sender if overpaid\\n        uint256 excessPayment = msg.value.sub(numPasses.mul(mintPasses[mpIndex].mintPrice));\\n        if (excessPayment > 0) {\\n            (bool returnExcessStatus, ) = _msgSender().call{value: excessPayment}(\\\"\\\");\\n            require(returnExcessStatus, \\\"Error returning excess payment\\\");\\n        }\\n        \\n        mintPasses[mpIndex].claimedMPs[msg.sender] = mintPasses[mpIndex].claimedMPs[msg.sender].add(numPasses);\\n        \\n        _mint(msg.sender, mpIndex, numPasses, \\\"\\\");\\n\\n        emit Claimed(mpIndex, msg.sender, numPasses);\\n    }\\n\\n    function claimMultiple(\\n        uint256[] calldata numPasses,\\n        uint256[] calldata amounts,\\n        uint256[] calldata mpIndexs,\\n        bytes32[][] calldata merkleProofs\\n    ) external payable nonReentrant{\\n        require(Utils.isUnique(mpIndexs), \\\"Claim: must pass unique array of passes\\\");\\n         // verify contract is not paused\\n        require(!paused(), \\\"Claim: claiming is paused\\\");\\n\\n        //validate all tokens being claimed and aggregate a total cost due\\n       \\n        for (uint i=0; i< mpIndexs.length; i++) {\\n           require(isValidClaim(numPasses[i],amounts[i],mpIndexs[i],merkleProofs[i]), \\\"One or more claims are invalid\\\");\\n        }\\n\\n        for (uint i=0; i< mpIndexs.length; i++) {\\n            mintPasses[mpIndexs[i]].claimedMPs[msg.sender] = mintPasses[mpIndexs[i]].claimedMPs[msg.sender].add(numPasses[i]);\\n        }\\n\\n        _mintBatch(msg.sender, mpIndexs, numPasses, \\\"\\\");\\n\\n        emit ClaimedMultiple(mpIndexs, msg.sender, numPasses);\\n\\n    \\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 numPasses,\\n        uint256 mpIndex) public onlyOwner\\n    {\\n        _mint(to, mpIndex, numPasses, \\\"\\\");\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata numPasses,\\n        uint256[] calldata mpIndexs) public onlyOwner\\n    {\\n        _mintBatch(to, mpIndexs, numPasses, \\\"\\\");\\n    }\\n\\n    function isValidClaim( uint256 numPasses,\\n        uint256 amount,\\n        uint256 mpIndex,\\n        bytes32[] calldata merkleProof) internal view returns (bool) {\\n         // verify contract is not paused\\n        require(mintPasses[mpIndex].saleIsOpen, \\\"Sale is paused\\\");\\n        require(!paused(), \\\"Claim: claiming is paused\\\");\\n        // verify mint pass for given index exists\\n        require(mintPasses[mpIndex].windowOpens != 0, \\\"Claim: Mint pass does not exist\\\");\\n        // Verify within window\\n        require (block.timestamp > mintPasses[mpIndex].windowOpens && block.timestamp < mintPasses[mpIndex].windowCloses, \\\"Claim: time window closed\\\");\\n        // Verify minting price\\n        require(msg.value >= numPasses.mul(mintPasses[mpIndex].mintPrice), \\\"Claim: Ether value incorrect\\\");\\n        // Verify numPasses is within remaining claimable amount \\n        require(mintPasses[mpIndex].claimedMPs[msg.sender].add(numPasses) <= amount, \\\"Claim: Not allowed to claim given amount\\\");\\n        require(mintPasses[mpIndex].claimedMPs[msg.sender].add(numPasses) <= mintPasses[mpIndex].maxPerWallet, \\\"Claim: Not allowed to claim that many from one wallet\\\");\\n        require(numPasses <= mintPasses[mpIndex].maxMintPerTxn, \\\"Max quantity per transaction exceeded\\\");\\n\\n        require(totalSupply(mpIndex) + numPasses <= mintPasses[mpIndex].maxSupply, \\\"Purchase would exceed max supply\\\");\\n        \\n        bool isValid = verifyMerkleProof(merkleProof, mpIndex, amount);\\n       \\n       require(\\n            isValid,\\n            \\\"MerkleDistributor: Invalid proof.\\\" \\n        );  \\n       return isValid;\\n         \\n\\n    }\\n\\n\\n\\n   function isSaleOpen(uint256 mpIndex) public view returns (bool) {\\n        if(paused()){\\n            return false;\\n        }\\n        if(block.timestamp > mintPasses[mpIndex].windowOpens && block.timestamp < mintPasses[mpIndex].windowCloses){\\n            return mintPasses[mpIndex].saleIsOpen;\\n        }\\n        else{\\n            return false;\\n        }\\n        \\n    }\\n\\n    function getTokenSupply(uint256 mpIndex) public view returns (uint256) {\\n        return totalSupply(mpIndex);\\n    }\\n\\n    function turnSaleOn(uint256 mpIndex) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n         mintPasses[mpIndex].saleIsOpen = true;\\n    }\\n\\n    function turnSaleOff(uint256 mpIndex) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n         mintPasses[mpIndex].saleIsOpen = false;\\n    }\\n    \\n\\n\\n    function makeLeaf(address _addr, uint amount) public view returns (string memory) {\\n        return string(abi.encodePacked(toAsciiString(_addr), \\\"_\\\", Strings.toString(amount)));\\n    }\\n\\n    function verifyMerkleProof(bytes32[] calldata merkleProof, uint256 mpIndex, uint amount) public view returns (bool) {\\n        if(mintPasses[mpIndex].merkleRoot == 0x1e0fa23b9aeab82ec0dd34d09000e75c6fd16dccda9c8d2694ecd4f190213f45){\\n            return true;\\n        }\\n        string memory leaf = makeLeaf(msg.sender, amount);\\n        bytes32 node = keccak256(abi.encode(leaf));\\n        return MerkleProof.verify(merkleProof, mintPasses[mpIndex].merkleRoot, node);\\n    }\\n\\n    function toAsciiString(address x) internal view returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);            \\n        }\\n        return string(s);\\n    }\\n\\n    function char(bytes1 b) internal view returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n    \\n    function withdrawEther(address payable _to, uint256 _amount) public onlyOwner\\n    {\\n        _to.transfer(_amount);\\n    }\\n\\n    function getClaimedMps(uint256 poolId, address userAdress) public view returns (uint256) {\\n        return mintPasses[poolId].claimedMPs[userAdress];\\n    }\\n\\n    function uri(uint256 _id) public view override returns (string memory) {\\n            require(totalSupply(_id) > 0, \\\"URI: nonexistent token\\\");\\n            \\n            return string(abi.encodePacked(super.uri(_id), mintPasses[_id].ipfsMetadataHash));\\n    } \\n\\n     function setContractURI(string memory uri) external onlyRole(DEFAULT_ADMIN_ROLE){\\n        _contractURI = uri;\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/Woodie.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*\\n*\\n* Dev by @bitcoinski, @ultra_dao\\n* Thanks to @PixelVault_ for their thought leadership in the space and the mint pass approach to gas wars\\n* There are various mechanics in this contract heavily inspired from these trailblazers among others <3\\n*\\n* Thanks to all 111 @Ultra_DAO team members, and for this project especially:\\n* Project Lead: @chriswallace\\n* Project Mgr: @healingvisions\\n* Legal: @vinlysneverdie\\n* Artists: @grelysian | @Jae838 | @DesLucrece | @sadcop\\n* Story By: @crystaladalyn\\n* Community & Marketing: @rpowazynski | @OmarIbisa\\n* Discord Mods: @OmarIbisa | @ResetNft\\n* Meme-Daddy: @ryan_goldberg_\\n* Website & Web3: @calvinhoenes | @bitcoinski | @ximecediazArt\\n* Smart Contracts: @bitcoinski\\n* Art Generation: @bitcoinski\\n*\\n*/\\n\\n/*\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::::::::::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;::cclooddxxxkkkOOOOO0000000OOOOOkkkxxxddoolcc::;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;:clodxkkO0KKXXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNXXXK00Okxxdolc:;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;:oxOKXXNNNNNNNNNNNNNNNNXOxlco0NNNNNKOxolllloddkKNNNNNNNNNNNNNNNXXK0Okdl:;;;;;;;;;;;;;;\\n;;;;;;;;;;;;:oOXNNNNNNNNNNNNNNNNNX0xl:,'''';odkko;,'',,''''''oXNNNNNNNNNNNNNNNNNNNNNXOo:;;;;;;;;;;;;\\n;;;;;;;;;;;:xXNNNNNNNNNNNNNNNNKkoc;'',,,,,,....'',,,,;;,,,,,.'coxKNNNNNNNNNNNNNNNNNNNNKd:;;;;;;;;;;;\\n;;;;;;;;;;:xXNNNNNNNNNNNNNXOOOc'',;;;;;;;;,,..',,,;;,,;;,,,,..','c0XxoodkKNNNNNNNNNNNNNKo;;;;;;;;;;;\\n;;;;;;;;;;l0NNNNNNNNNNNNNXx,',..,,,,,,,,,;;;,....',,;,,;;,,'..;;'';:'.''';lkXNNNNNNNNNNNOc;;;;;;;;;;\\n;;;;;;;;;;dXNNNNNNNNNNNNXd,''...,,,,,,,,,,,,;;''..'',;,,;;,,,;;,,,..',,,,,''dXNNNNNNNNNNXd:;;;;;;;;;\\n;;;;;;;;;ckNNNNNNNNNNNN0l,,,,,.',,,,,,,,,,,,,;;,'.'',,;,,;;,,;;,,,'',,,,,;''dXNNNNNNNNNNN0l;;;;;;;;;\\n;;;;;;;;;l0NNNNNNNNNNNO;';;,,,,,,,,,,,;;,,,,,,;,,,,,,,;;,,;;;,,,,,,,,,,;,,,,kNNNNNNNNNNNNXd;;;;;;;;;\\n;;;;;;;;;dXNNNNNNNNNNNO;.;:;,,,,,,,,,,,,,,,,,,;;,,,,,,,,,,,,,,,,,,,,,,;;,;,;ONNNNNNNNNNNNNOc;;;;;;;;\\n;;;;;;;;:kNNNNNNNNNNNNO;.,;;,,,;,,;,,,,,,,,,,,;;,,,,,,,,,,,,,,,,,,,,,,;;;:';ONNNNNNNNNNNNNKo;;;;;;;;\\n;;;;;;;;cONNNNNNNNNNXk;.',;;;,,,;;;;;,,,,,,,,,;,,,,,,,,,,,,,,,,,,,,,,,,;;;..cKNNNNNNNNNNNNXx;;;;;;;;\\n;;;;;;;;l0NNNNNNNNNXx,',,,,;;;,,,;;,;;,,,,,,,,;;,,,,,,,,,,,,,,,,;;,,,,,,,'..:0NNNNNNNNNNNNNk:;;;;;;;\\n;;;;;;;;oKNNNNNNNNNk,.,,,,,,,;;,,,,,,,,,,,,,,,,;,,,,,,,,,,,,,,,,,;;,,,,,,,''lXNNNNNNNNNNNNNOc;;;;;;;\\n;;;;;;;;dXNNNNNNNNNKo'.',,,,,,,;,,,,,,,,,,,,,,,,,''''''',,,,,,,,,,;,,,,,,,',kNNNNNNNNNNNNNN0l;;;;;;;\\n;;;;;;;:xXNNNNNNNNNNNOc..,,,,,,,,,,,,,,,,;;,,,'.,;;;;;;;;,',,,,,'',,,,,,,,';ONNNNNNNNNNNNNNKo;;;;;;;\\n;;;;;;;:xXNNNNNNNNNNNNXk;',,,;,,,,,,,,,,,,,,;,..;:::;;;;;,',,,,,'.;:::::;'.:0NNNNNNNNNNNNNNKo;;;;;;;\\n;;;;;;;:kNNNNNNNNNNNNNNN0c.',;,,,,,,,,,,,,,,,;'...''...''',,,,,,''','',,,,'cKNNNNNNNNNNNNNNKo;;;;;;;\\n;;;;;;;:kNNNNNNNNNNNNNNNN0:.''....'',,,,,,,,,,,;,,,'.  .',,,,,,,,,,'...',,,dXNNNNNNNNNNNNNN0l;;;;;;;\\n;;;;;;;:kNNNNNNNNNNNNNNNNXl...........',,,,,,,,,;;;'    .,,,,,,,,,,.  .','lKNNNNNNNNNNNNNNN0c;;;;;;;\\n;;;;;;;:kNNNNNNNNNNNNNNXk:..',,,,,,,'..',,,,,,,,,,,.    .,,,,,,,,,.    .':ONNNNNNKxocdKNNNNkc;;;;;;;\\n;;;;;;;:xXNNNNNNNNNNNNNKc.',,,'...,,;,,,,,,,,,,,,,'.    .,,,,,,,,,.    .:ONNNNNXkc,,'cKNNNXx:;;;;;;;\\n;;;;;;;;dXNNNNNNNNNNNNNNd'',,,...''.',,,,,,,,,,,,,'.   .',,,;,'',,.   .;kNNNNNNOcldo:l0NNNKo;;;;;;;;\\n;;;;;;;;oKNNNNNNNNNNNNNNK:.,,,........',,,,,,,,,,,'.   .,;,,;,'.''.  ..:0NNNNNNOccdolxXNNN0l;;;;;;;;\\n;;;;;;;;l0NNNNNNNNNNNNNNNk;.,,,'...'..',,,,,,,,,,,,'...,;;,,,'',,,''.'.,cdxkOOxl;:xkOXNNNNkc;;;;;;;;\\n;;;;;;;;:kNNNNNNNNNNNNNNNXx;'',,,...'','''',,,,,,,,,,,,,;,,,'''...'',,,,,''';;,;dKNNNNNNNXx:;;;;;;;;\\n;;;;;;;;;dXNNNNNNNNNNNNNNNNKxoc;,''''',col,...''',;,,,,;;,,,,,;,,'''.';;,..,:;cONNNNNNNNNKo;;;;;;;;;\\n;;;;;;;;;l0NNNNNNNNNNNNNNNNNNNXKOxoclx0XNNd..........'',;,,,,,,;;,,:ok00kocclxKNNNNNNNNNNOc;;;;;;;;;\\n;;;;;;;;;:xXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd,,,,'........,,,'''';cokKNNNNNNNXXNNNNNNNNNNNXx:;;;;;;;;;\\n;;;;;;;;;;l0NNNNNNNNNNNNNNNNNNNNNNNNNNNNNXl',,,,,,,,,,.cO0Okxxk0XNNNNNNNNNNNNNNNNNNNNNNNKo;;;;;;;;;;\\n;;;;;;;;;;;dKNNNNNNNNNNNNNNNNKOkkO0XX0kxkd;',,,,,,,,,''dNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOc;;;;;;;;;;\\n;;;;;;;;;;;:kXNNNNNNNNNNNNN0o::cc::cc;:cl;.',,,,,,,,,'.lk0XNNNNNNNNNNNNNNNNNNNNNNNNNNNNXd;;;;;;;;;;;\\n;;;;;;;;;;;;cONNNNNNNNNNKOd:;oxxxdoolcoxxd;',,,,,,,,'';clccoxddkKNNNNNNNNNNNNNNNNNNNNNN0l;;;;;;;;;;;\\n;;;;;;;;;;;;;lONNNNNNNXkc:;,lxxxdooxo:ldxo,.,,,,,,,',lxxxo:lddoc:xKXNNNNNNNNNNNNNNNNNNXx:;;;;;;;;;;;\\n;;;;;;;;;;;;;;lOXNNNNXxcoxl,:odo:;oxo;':c;..,,,,,'.':oddl:lxxxxoclodx0NNNNNNNNNNNNNNNXkc;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;ckKNNNx:ldoc'',;::lxkxc,,;,.';;;;;,.,:clc;:dOOOkdxOkkolONNNNNNNNNNNXKOo:;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;:ldkx;':::c:,,d0XXNNXXKK000000OOOO00KKKKXXNNNNNXXNNNXKXNNNXXKK0Okxoc:;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;,,,,,:ccdKNNWWWWWWWWNWWWWWWNWWWWWNWWWWNNWWNNWWWWWN0xdolc::;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;:dXWNWWWWWWWWNXKNWWNNX0KNWNNWWWNNWWNNWWWWNXx:;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;:xNWWNWWWWWWW.ARDEN.WAS.HERE.kOXNWWWWWWWWNXx:;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;:dXWWWWWWWWWN.WOODIESNFT.COM.xkKNNWWWWWWWNKd;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oKWWWWWWWWNWNNNXXXNXK0KXXKKXXXNWNWWWWWWNXkc;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;l0NWWWWWNNWWWWWWWWNWWWWWWWNWWWWWNNWWWWWNKo;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:xKNNNNNNNWWWWWNNNNNXXXXKK0000KKKKKKKXK0d:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:clooodddxxxdddooollllccc::::::cccccccc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;@ultra_dao\\n*/\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\n\\nimport \\\"./IWoodie.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n/*\\n* @title ERC721 token for Woodie, redeemable through burning Woodies MintPassport tokens\\n*\\n* @author original logic by Niftydude, extended by @bitcoinski\\n*/\\n\\ncontract Woodie is IWoodie, AccessControl, ERC721Enumerable, ERC721Pausable, ERC721Burnable, Ownable {\\n    using Strings for uint256;\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private ultraDAOCounter; \\n    Counters.Counter private generalCounter; \\n\\n    // Roles\\n    bytes32 public constant WOODIE_OPERATOR_ROLE = keccak256(\\\"WOODIE_OPERATOR_ROLE\\\");\\n    bytes32 public constant WOODIE_URI_UPDATER_ROLE = keccak256(\\\"WOODIE_URI_UPDATER_ROLE\\\");\\n  \\n    mapping(uint256 => TokenData) public tokenData;\\n\\n    mapping(uint256 => RedemptionWindow) public redemptionWindows;\\n\\n    struct TokenData {\\n        string tokenURI;\\n        bool exists;\\n    }\\n\\n    struct RedemptionWindow {\\n        uint256 windowOpens;\\n        uint256 windowCloses;\\n        uint256 maxRedeemPerTxn;\\n    }\\n    \\n    string private baseTokenURI;\\n    string private ipfsURI;\\n\\n    string public _contractURI;\\n\\n    uint256 private ipfsAt;\\n\\n    MintPassportFactory public woodiesMintPassportFactory;\\n\\n    event Redeemed(address indexed account, string tokens);\\n\\n    /**\\n    * @notice Constructor to create Woodie\\n    * \\n    * @param _symbol the token symbol\\n    * @param _mpIndexes the mintpass indexes to accommodate\\n    * @param _redemptionWindowsOpen the mintpass redemption window open unix timestamp by index\\n    * @param _redemptionWindowsClose the mintpass redemption window close unix timestamp by index\\n    * @param _maxRedeemPerTxn the max mint per redemption by index\\n    * @param _baseTokenURI the respective base URI\\n    * @param _contractMetaDataURI the respective contract meta data URI\\n    * @param _mintPassToken contract address of MintPassport token to be burned\\n    */\\n    constructor (\\n        string memory _name, \\n        string memory _symbol,\\n        uint256[] memory _mpIndexes,\\n        uint256[] memory _redemptionWindowsOpen,\\n        uint256[] memory _redemptionWindowsClose, \\n        uint256[] memory _maxRedeemPerTxn,\\n        string memory _baseTokenURI,\\n        string memory _contractMetaDataURI,\\n        address _mintPassToken\\n    ) ERC721(_name, _symbol) {\\n        baseTokenURI = _baseTokenURI;    \\n        _contractURI = _contractMetaDataURI;\\n        woodiesMintPassportFactory = MintPassportFactory(_mintPassToken);\\n        for(uint256 i = 0; i < 111; i++) {\\n            generalCounter.increment();\\n        }\\n\\n        for(uint256 i = 0; i < _mpIndexes.length; i++) {\\n            uint passID = _mpIndexes[i];\\n            redemptionWindows[passID].windowOpens = _redemptionWindowsOpen[i];\\n            redemptionWindows[passID].windowCloses = _redemptionWindowsClose[i];\\n            redemptionWindows[passID].maxRedeemPerTxn = _maxRedeemPerTxn[i];\\n        }\\n\\n            _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n            _setupRole(DEFAULT_ADMIN_ROLE, 0x81745b7339D5067E82B93ca6BBAd125F214525d3);\\n            _setupRole(DEFAULT_ADMIN_ROLE, 0x8367A713bc14212Ab1bB8c55A778e43e50B8b927); \\n            grantRole(WOODIE_OPERATOR_ROLE, msg.sender);\\n    }\\n\\n    /**\\n    * @notice Set the mintpassport contract address\\n    * \\n    * @param _mintPassToken the respective Mint Passport contract address \\n    */\\n    function setMintPassportToken(address _mintPassToken) external override onlyOwner {\\n        woodiesMintPassportFactory = MintPassportFactory(_mintPassToken); \\n    }    \\n\\n    /**\\n    * @notice Change the base URI for returning metadata\\n    * \\n    * @param _baseTokenURI the respective base URI\\n    */\\n    function setBaseURI(string memory _baseTokenURI) external override onlyOwner {\\n        baseTokenURI = _baseTokenURI;    \\n    }    \\n\\n\\n    /**\\n    * @notice Change the base URI for returning metadata\\n    * \\n    * @param _ipfsURI the respective ipfs base URI\\n    */\\n    function setIpfsURI(string memory _ipfsURI) external override onlyOwner {\\n        ipfsURI = _ipfsURI;    \\n    }    \\n\\n    /**\\n    * @notice Change last ipfs token index\\n    * \\n    * @param at the token index \\n    */\\n    function endIpfsUriAt(uint256 at) external onlyOwner {\\n        ipfsAt = at;    \\n    }    \\n\\n    /**\\n    * @notice Pause redeems until unpause is called\\n    */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n    * @notice Unpause redeems until pause is called\\n    */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n     \\n\\n    /**\\n    * @notice Configure time to enable redeem functionality\\n    * \\n    * @param _windowOpen UNIX timestamp for redeem start\\n    */\\n    function setRedeemStart(uint256 passID, uint256 _windowOpen) external override onlyOwner {\\n        redemptionWindows[passID].windowOpens = _windowOpen;\\n    }        \\n\\n    /**\\n    * @notice Configure time to enable redeem functionality\\n    * \\n    * @param _windowClose UNIX timestamp for redeem close\\n    */\\n    function setRedeemClose(uint256 passID, uint256 _windowClose) external override onlyOwner {\\n        redemptionWindows[passID].windowCloses = _windowClose;\\n    }  \\n\\n    /**\\n    * @notice Configure the max amount of passes that can be redeemed in a txn for a specific pass index\\n    * \\n    * @param _maxRedeemPerTxn number of passes that can be redeemed\\n    */\\n    function setMaxRedeemPerTxn(uint256 passID, uint256 _maxRedeemPerTxn) external override onlyOwner {\\n        redemptionWindows[passID].maxRedeemPerTxn = _maxRedeemPerTxn;\\n    }        \\n\\n    /**\\n    * @notice Check if redemption window is open\\n    * \\n    * @param passID the pass index to check\\n    */\\n    function isRedemptionOpen(uint256 passID) public view override returns (bool) { \\n        return block.timestamp > redemptionWindows[passID].windowOpens && block.timestamp < redemptionWindows[passID].windowCloses;\\n    }\\n\\n\\n    /**\\n    * @notice Redeem specified amount of MintPass tokens for MetaHero\\n    * \\n    * @param mpIndexes the tokenIDs of MintPasses to redeem\\n    * @param amounts the amount of MintPasses to redeem\\n    */\\n    function redeem(uint256[] calldata mpIndexes, uint256[] calldata amounts) external override{\\n        console.log('redeeming...');\\n        require(msg.sender == tx.origin, \\\"Redeem: not allowed from contract\\\");\\n        require(!paused(), \\\"Redeem: paused\\\");\\n        \\n        //check to make sure all are valid then re-loop for redemption \\n        for(uint256 i = 0; i < mpIndexes.length; i++) {\\n            console.log('checking token ', mpIndexes[i]);\\n            console.log('quantity ', amounts[i]);\\n            //console.log(woodiesMintPassportFactory.mintPasses(mpIndexs[i]));\\n            console.log('num held', woodiesMintPassportFactory.balanceOf(msg.sender, mpIndexes[i]));\\n            require(amounts[i] > 0, \\\"Redeem: amount cannot be zero\\\");\\n            require(amounts[i] <= redemptionWindows[mpIndexes[i]].maxRedeemPerTxn, \\\"Redeem: max redeem per transaction reached\\\");\\n            require(woodiesMintPassportFactory.balanceOf(msg.sender, mpIndexes[i]) >= amounts[i], \\\"Redeem: insufficient amount of Mint Passports\\\");\\n            require(block.timestamp > redemptionWindows[mpIndexes[i]].windowOpens, \\\"Redeem: redeption window not open for this Mint Passport\\\");\\n            require(block.timestamp < redemptionWindows[mpIndexes[i]].windowCloses, \\\"Redeem: redeption window is closed for this Mint Passport\\\");\\n        }\\n\\n        string memory tokens = \\\"\\\";\\n    \\n        for(uint256 i = 0; i < mpIndexes.length; i++) {\\n\\n            woodiesMintPassportFactory.burnFromRedeem(msg.sender, mpIndexes[i], amounts[i]);\\n            for(uint256 j = 0; j < amounts[i]; j++) {\\n                _safeMint(msg.sender, mpIndexes[i] == 0 ? ultraDAOCounter.current() : generalCounter.current());\\n                tokens = string(abi.encodePacked(tokens, mpIndexes[i] == 0 ? ultraDAOCounter.current().toString() : generalCounter.current().toString(), \\\",\\\"));\\n                if(mpIndexes[i] == 0){\\n                    ultraDAOCounter.increment();\\n                }\\n                else{\\n                    generalCounter.increment();\\n                }\\n            \\n            }\\n            \\n            console.log('new token IDs redeemed:', tokens);\\n        }\\n\\n        emit Redeemed(msg.sender, tokens);\\n    }  \\n\\n    \\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControl,IERC165, ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }     \\n\\n    function promoteTeamMember(address _addr, uint role) public{\\n        if(role == 0){\\n            grantRole(WOODIE_OPERATOR_ROLE, _addr);\\n        }\\n        else if(role == 1){\\n            grantRole(WOODIE_URI_UPDATER_ROLE, _addr);\\n        }\\n         \\n    }\\n\\n    function demoteTeamMember(address _addr, uint role) public {\\n         if(role == 0){\\n            revokeRole(WOODIE_OPERATOR_ROLE, _addr);\\n        }\\n        else if(role == 1){\\n           revokeRole(WOODIE_URI_UPDATER_ROLE, _addr);\\n        }\\n         \\n    }\\n\\n    function hasWoodiesRole(address _addr, uint role) public view returns (bool){\\n        if(role == 0){\\n            return hasRole(WOODIE_OPERATOR_ROLE, _addr);\\n        }\\n        else if(role == 1){\\n            return hasRole(WOODIE_URI_UPDATER_ROLE, _addr);\\n        }\\n        return false;\\n    }\\n\\n   /**\\n    * @notice Configure the max amount of passes that can be redeemed in a txn for a specific pass index\\n    * \\n    * @param id of token\\n    * @param uri to point the token to\\n    */\\n    function setIndividualTokenURI(uint256 id, string memory uri) external override {\\n        require(hasRole(WOODIE_URI_UPDATER_ROLE, msg.sender), \\\"Access: sender does not have access\\\");\\n        require(_exists(id), \\\"ERC721Metadata: Token does not exist\\\");\\n        tokenData[id].tokenURI = uri;\\n        tokenData[id].exists = true;\\n    }   \\n   \\n    function _baseURI(uint256 tokenId) internal view returns (string memory) {\\n       \\n        if(tokenId > ipfsAt) {\\n            return baseTokenURI;\\n        } else {\\n            return ipfsURI;\\n        }\\n    }     \\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        if(tokenData[tokenId].exists){\\n            return tokenData[tokenId].tokenURI;\\n        }\\n\\n        string memory baseURI = _baseURI(tokenId);\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }   \\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }   \\n\\n    function setContractURI(string memory uri) external {\\n        require(hasRole(WOODIE_URI_UPDATER_ROLE, msg.sender) );\\n        _contractURI = uri;\\n    }\\n\\n    //TODO: SET ROYALTIES HERE and in MetaData\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n}\\n\\n   \\n\\ninterface MintPassportFactory {\\n    function burnFromRedeem(address account, uint256 id, uint256 amount) external;\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n }\\n \"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IWoodie.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n\\ninterface IWoodie is IERC721Enumerable {\\n    function setMintPassportToken(address _mintPassToken) external;\\n    function redeem(uint256[] calldata mpIndexes, uint256[] calldata amounts) external;\\n    function setRedeemStart(uint256 passID, uint256 _windowOpen) external;\\n    function setRedeemClose(uint256 passID, uint256 _windowClose) external;\\n    function setMaxRedeemPerTxn(uint256 passID, uint256 _maxRedeemPerTxn) external;\\n    function isRedemptionOpen(uint256 passID) external returns (bool);\\n    function unpause() external;\\n    function pause() external;\\n    function setBaseURI(string memory _baseTokenURI) external;\\n    function setIpfsURI(string memory _ipfsURI) external;\\n    function setIndividualTokenURI(uint256 passID, string memory uri) external;\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/ICollectible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n\\ninterface ICollectible is IERC721Enumerable {\\n    function setMintPassToken(address _mintPassToken) external;\\n    function redeem(uint256[] calldata mpIndexes, uint256[] calldata amounts) external;\\n    function setRedeemStart(uint256 passID, uint256 _windowOpen) external;\\n    function setRedeemClose(uint256 passID, uint256 _windowClose) external;\\n    function setMaxRedeemPerTxn(uint256 passID, uint256 _maxRedeemPerTxn) external;\\n    function isRedemptionOpen(uint256 passID) external returns (bool);\\n    function unpause() external;\\n    function pause() external;\\n    function setBaseURI(string memory _baseTokenURI) external;\\n    function setIndividualTokenURI(uint256 passID, string memory uri) external;\\n}\"\r\n    },\r\n    \"contracts/Collectible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\n...................................';:ccc:,.......................................,:ccc:;'...................................\\n................................;dOXNWMMMWNKkl,...............................,lkKNWMMMWNKOd;................................\\n..............................:ONMMMMMMMMMMMMMXx,...........................,xXMMMMMMMMMMMMMNO:..............................\\n.............................dNMMMMMMWNXNWMMMMMMKc.........................cKMMMMMMWNXNWMMMMMMNd.............................\\n............................dWMMMMWKo:,',cxNMMMMMX:.......................:XMMMMMNxc,',:oKMMMMMWd............................\\n...........................;KMMMMMO, ......cXMMMMMx.......................kMMMMMXc. .....,OMMMMMK;...........................\\n...........................cXMMMMWo....... .OMMMMMO'.....................'OMMMMMO. .......oWMMMMXc...........................\\n...........................cNMMMMWo....... .kMMMMMO'.....................'OMMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo....... .kMMMMM0'.....................'0MMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo....... .kMMMMM0'.....................'OMMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo....... .kMMMMM0'.....................'OMMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo....... .kMMMMM0'.....................'OMMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo....... .kMMMMM0, .cl,................'OMMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo....... .kMMMMMO, .dWXx;...'oO;.......'OMMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo....... .kMMMMMO'..'kWMNx,;xKWd.;l'...'OMMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo....... .kMMMMM0' ..,OWMMXKNWMOo0K;...'OMMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo....... .kMMMMMO'....,0MMMMMMMWWMO' ..'OMMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo....... .kMMMMM0c:loxkXMMMMMMMMMMXkol:cKMMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo....... .kMMMMMWWWMMMMMMMMMMMMMMMMMMMWWWMMMMMk. .......oWMMMMNc...........................\\n...........................cNMMMMWo........cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc........oWMMMMNc...........................\\n...........................cNMMMMWo.....;dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0d;. ...oWMMMMNc...........................\\n...........................cNMMMMWo. .:kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNk:...oWMMMMNc...........................\\n...........................cNMMMMWo.:ONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNO:.oWMMMMNc...........................\\n...........................cNMMMMWOkNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkOWMMMMNc...........................\\n...........................cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc...........................\\n...........................cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc...........................\\n...........................cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc...........................\\n...........................cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc...........................\\n...........................cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc...........................\\n...........................cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc...........................\\n...........................cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc...........................\\n...........................cNMMMMMMMMMMMMNKOKNWK00NMMMMMMNK0KNMNK0KNMMMMMMN00KWNK0KWMMMMMMMMMMMMNc...........................\\n...........................cNMMMMMMMMMMM0:...;;...;OWMMMO;...;c;...;OMMMWO;...;;...:0MMMMMMMMMMMNc...........................\\n...........................cNMMMMMMMMMMWo..........cNMMNl..... .....lWMMNc..........oWMMMMMMMMMMNc...........................\\n...........................cNMMMMMMMMMMM0;........'kWMMMO,.........,OWMMWk'...... .;0MMMMMMMMMMMXc...........................\\n...........................;KMMMMMMMMMMMMXd,....'oKWMMMMMXd,.....,dXMMMMMWKo'....,dXMMMMMMMMMMMMK;...........................\\n...........................'kMMMMMMMMMMMMMMNk::dXMMMMMMMMMMXx:,:xXMMMMMMMMMWXd::kNMMMMMMMMMMMMMMk'...........................\\n............................lNMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMWWWMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMNl............................\\n.............................xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx.............................\\n.............................'kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk'.............................\\n..............................'xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx'..............................\\n................................lKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKl................................\\n.................................,dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd,.................................\\n...................................,d0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo,...................................\\n......................................:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:......................................\\n.........................................;cdk0XNWWMMMMMMMMMMMMMMMMMMMMMMMMMMWNX0kdc;.........................................\\n..............................................',::ccccccccccccccccccccccccc::,'..............................................\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\n.............................................................................................................................\\nDev by @bitcoinski\\n*/\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\n\\nimport \\\"./ICollectible.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n/*\\n* @title ERC721 token for Collectible, redeemable through burning  MintPass tokens\\n*/\\n\\ncontract Collectible is ICollectible, AccessControl, ERC721Enumerable, ERC721Pausable, ERC721Burnable, Ownable {\\n    using Strings for uint256;\\n    using SafeMath for uint256;\\n    using ECDSA for bytes32;\\n    using Counters for Counters.Counter;\\n    Counters.Counter private generalCounter; \\n\\n  \\n    mapping(uint256 => TokenData) public tokenData;\\n\\n    mapping(uint256 => RedemptionWindow) public redemptionWindows;\\n\\n    struct TokenData {\\n        string tokenURI;\\n        bool exists;\\n    }\\n\\n    struct RedemptionWindow {\\n        uint256 windowOpens;\\n        uint256 windowCloses;\\n        uint256 maxRedeemPerTxn;\\n    }\\n\\n    SaleConfig public saleConfiguration;\\n    \\n    string private baseTokenURI;\\n\\n    string public _contractURI;\\n    \\n    struct SaleConfig {\\n        bool isSaleOpen;\\n        uint256 windowOpens;\\n        uint256 windowCloses;\\n        uint256 maxMintsPerTxn;\\n        uint256 mintPrice;\\n        uint256 maxSupply;\\n    }\\n\\n    MintPassFactory public mintPassFactory;\\n\\n    event Redeemed(address indexed account, string tokens);\\n    event Minted(address indexed account, string tokens);\\n\\n    /**\\n    * @notice Constructor to create Collectible\\n    * \\n    * @param _symbol the token symbol\\n    * @param _mpIndexes the mintpass indexes to accommodate\\n    * @param _redemptionWindowsOpen the mintpass redemption window open unix timestamp by index\\n    * @param _redemptionWindowsClose the mintpass redemption window close unix timestamp by index\\n    * @param _maxRedeemPerTxn the max mint per redemption by index\\n    * @param _baseTokenURI the respective base URI\\n    * @param _contractMetaDataURI the respective contract meta data URI\\n    * @param _mintPassToken contract address of MintPass token to be burned\\n    */\\n    constructor (\\n        string memory _name, \\n        string memory _symbol,\\n        uint256[] memory _mpIndexes,\\n        uint256[] memory _redemptionWindowsOpen,\\n        uint256[] memory _redemptionWindowsClose, \\n        uint256[] memory _maxRedeemPerTxn,\\n        string memory _baseTokenURI,\\n        string memory _contractMetaDataURI,\\n        address _mintPassToken\\n    ) ERC721(_name, _symbol) {\\n        baseTokenURI = _baseTokenURI;    \\n        _contractURI = _contractMetaDataURI;\\n        mintPassFactory = MintPassFactory(_mintPassToken);\\n        generalCounter.increment();\\n\\n        for(uint256 i = 0; i < _mpIndexes.length; i++) {\\n            uint passID = _mpIndexes[i];\\n            redemptionWindows[passID].windowOpens = _redemptionWindowsOpen[i];\\n            redemptionWindows[passID].windowCloses = _redemptionWindowsClose[i];\\n            redemptionWindows[passID].maxRedeemPerTxn = _maxRedeemPerTxn[i];\\n        }\\n\\n          _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n          _setupRole(DEFAULT_ADMIN_ROLE, 0x81745b7339D5067E82B93ca6BBAd125F214525d3); \\n          _setupRole(DEFAULT_ADMIN_ROLE, 0x90bFa85209Df7d86cA5F845F9Cd017fd85179f98);\\n          _setupRole(DEFAULT_ADMIN_ROLE, 0x7F379e2ca3c7e626aaF5B76A9507a5e909f72Db5);\\n        \\n    }\\n\\n\\n    /**\\n    * @notice Set the mintpass contract address\\n    * \\n    * @param _mintPassToken the respective Mint Pass contract address \\n    */\\n    function setMintPassToken(address _mintPassToken) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintPassFactory = MintPassFactory(_mintPassToken); \\n    }    \\n\\n    /**\\n    * @notice Change the base URI for returning metadata\\n    * \\n    * @param _baseTokenURI the respective base URI\\n    */\\n    function setBaseURI(string memory _baseTokenURI) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        baseTokenURI = _baseTokenURI;    \\n    }    \\n\\n    /**\\n    * @notice Pause redeems until unpause is called\\n    */\\n    function pause() external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n    * @notice Unpause redeems until pause is called\\n    */\\n    function unpause() external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n     \\n\\n    /**\\n    * @notice Configure time to enable redeem functionality\\n    * \\n    * @param _windowOpen UNIX timestamp for redeem start\\n    */\\n    function setRedeemStart(uint256 passID, uint256 _windowOpen) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        redemptionWindows[passID].windowOpens = _windowOpen;\\n    }        \\n\\n    /**\\n    * @notice Configure time to enable redeem functionality\\n    * \\n    * @param _windowClose UNIX timestamp for redeem close\\n    */\\n    function setRedeemClose(uint256 passID, uint256 _windowClose) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        redemptionWindows[passID].windowCloses = _windowClose;\\n    }  \\n\\n    /**\\n    * @notice Configure the max amount of passes that can be redeemed in a txn for a specific pass index\\n    * \\n    * @param _maxRedeemPerTxn number of passes that can be redeemed\\n    */\\n    function setMaxRedeemPerTxn(uint256 passID, uint256 _maxRedeemPerTxn) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        redemptionWindows[passID].maxRedeemPerTxn = _maxRedeemPerTxn;\\n    }        \\n\\n    /**\\n    * @notice Check if redemption window is open\\n    * \\n    * @param passID the pass index to check\\n    */\\n    function isRedemptionOpen(uint256 passID) public view override returns (bool) { \\n        if(paused()){\\n            return false;\\n        }\\n        return block.timestamp > redemptionWindows[passID].windowOpens && block.timestamp < redemptionWindows[passID].windowCloses;\\n    }\\n\\n    /**\\n    * @notice Mint next token\\n    * \\n    * @param _to receiver address\\n    */\\n    function mintNextTokenTo(address _to) external onlyOwner {\\n        _safeMint(_to, generalCounter.current());\\n        generalCounter.increment();\\n    }     \\n\\n    function toggleSaleOn(bool isOn) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        saleConfiguration.isSaleOpen = isOn;\\n    }  \\n\\n    function editSale(\\n        bool isOn,\\n         uint256 windowOpens,\\n        uint256 windowCloses,\\n        uint256 maxMintsPerTxn,\\n        uint256 mintPrice,\\n        uint256 maxSupply\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        saleConfiguration.isSaleOpen = isOn;\\n        saleConfiguration.windowOpens = windowOpens;\\n        saleConfiguration.windowCloses = windowCloses;\\n        saleConfiguration.maxMintsPerTxn = maxMintsPerTxn;\\n        saleConfiguration.mintPrice = mintPrice;\\n        saleConfiguration.maxSupply = maxSupply;\\n    }   \\n\\n    function editSalePrice(uint256 mintPrice) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        saleConfiguration.mintPrice = mintPrice;\\n    }\\n\\n    function editSaleWindowOpen(uint256 windowOpens) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        saleConfiguration.windowOpens = windowOpens;\\n    } \\n\\n    function editSaleWindowClose(uint256 windowCloses) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        saleConfiguration.windowCloses = windowCloses;\\n    }  \\n\\n    function editSaleMaxMintsPerTxn(uint256 maxMintsPerTxn) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        saleConfiguration.maxMintsPerTxn = maxMintsPerTxn;\\n    } \\n\\n    function editSaleMaxSupply(uint256 maxSupply) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        saleConfiguration.maxSupply = maxSupply;\\n    }        \\n\\n    function directMint(\\n        uint256 quantity\\n    ) external payable {\\n\\n        require(!paused(), \\\"Mint: minting is paused\\\");\\n        require(quantity > 0, \\\"Sale: Must send quantity\\\");\\n        require(saleConfiguration.isSaleOpen, \\\"Sale: Not started\\\");\\n        require(quantity <= saleConfiguration.maxMintsPerTxn, \\\"Sale: Max quantity per transaction exceeded\\\");\\n        require(block.timestamp >= saleConfiguration.windowOpens, \\\"Sale: redeption window not open for this token\\\");\\n        require(block.timestamp <= saleConfiguration.windowCloses, \\\"Sale: redeption window is closed for this token\\\");\\n        require(msg.value >= quantity.mul(saleConfiguration.mintPrice), \\\"Sale: Ether value incorrect\\\");\\n        require(totalSupply() + quantity <= saleConfiguration.maxSupply, \\\"Purchase would exceed max supply\\\");\\n        \\n        string memory tokens = \\\"\\\";\\n\\n        for(uint256 i = 0; i < quantity; i++) {\\n            _safeMint(msg.sender, generalCounter.current());\\n            tokens = string(abi.encodePacked(tokens, generalCounter.current().toString(), \\\",\\\"));\\n            generalCounter.increment();\\n        }\\n\\n        emit Minted(msg.sender, tokens);\\n\\n    }\\n\\n    /**\\n    * @notice Redeem specified amount of MintPass tokens\\n    * \\n    * @param mpIndexes the tokenIDs of MintPasses to redeem\\n    * @param amounts the amount of MintPasses to redeem\\n    */\\n    function redeem(uint256[] calldata mpIndexes, uint256[] calldata amounts) external override{\\n        require(msg.sender == tx.origin, \\\"Redeem: not allowed from contract\\\");\\n        require(!paused(), \\\"Redeem: paused\\\");\\n        \\n        //check to make sure all are valid then re-loop for redemption \\n        for(uint256 i = 0; i < mpIndexes.length; i++) {\\n            require(amounts[i] > 0, \\\"Redeem: amount cannot be zero\\\");\\n            require(amounts[i] <= redemptionWindows[mpIndexes[i]].maxRedeemPerTxn, \\\"Redeem: max redeem per transaction reached\\\");\\n            require(mintPassFactory.balanceOf(msg.sender, mpIndexes[i]) >= amounts[i], \\\"Redeem: insufficient amount of Mint Passes\\\");\\n            require(block.timestamp > redemptionWindows[mpIndexes[i]].windowOpens, \\\"Redeem: redeption window not open for this Mint Pass\\\");\\n            require(block.timestamp < redemptionWindows[mpIndexes[i]].windowCloses, \\\"Redeem: redeption window is closed for this Mint Pass\\\");\\n        }\\n\\n        string memory tokens = \\\"\\\";\\n    \\n        for(uint256 i = 0; i < mpIndexes.length; i++) {\\n\\n            mintPassFactory.burnFromRedeem(msg.sender, mpIndexes[i], amounts[i]);\\n            for(uint256 j = 0; j < amounts[i]; j++) {\\n                _safeMint(msg.sender, generalCounter.current());\\n                tokens = string(abi.encodePacked(tokens, generalCounter.current().toString(), \\\",\\\"));\\n                generalCounter.increment();\\n            }\\n            \\n        }\\n\\n        emit Redeemed(msg.sender, tokens);\\n    }  \\n\\n    \\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControl,IERC165, ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }     \\n\\n\\n   /**\\n    * @notice Configure the max amount of passes that can be redeemed in a txn for a specific pass index\\n    * \\n    * @param id of token\\n    * @param uri to point the token to\\n    */\\n    function setIndividualTokenURI(uint256 id, string memory uri) external override onlyRole(DEFAULT_ADMIN_ROLE){\\n        require(_exists(id), \\\"ERC721Metadata: Token does not exist\\\");\\n        tokenData[id].tokenURI = uri;\\n        tokenData[id].exists = true;\\n    }   \\n   \\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n         if(tokenData[tokenId].exists){\\n            return tokenData[tokenId].tokenURI;\\n        }\\n        return string(abi.encodePacked(baseTokenURI, tokenId.toString(), '.json'));\\n    }   \\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }   \\n\\n    function setContractURI(string memory uri) external onlyRole(DEFAULT_ADMIN_ROLE){\\n        _contractURI = uri;\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n\\n}\\n\\n   \\n\\ninterface MintPassFactory {\\n    function burnFromRedeem(address account, uint256 id, uint256 amount) external;\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n }\\n \"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Greeter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Greeter {\\n    string private greeting;\\n\\n    constructor(string memory _greeting) {\\n        console.log(\\\"Deploying a Greeter with greeting:\\\", _greeting);\\n        greeting = _greeting;\\n    }\\n\\n    function greet() public view returns (string memory) {\\n        return greeting;\\n    }\\n\\n    function setGreeting(string memory _greeting) public {\\n        console.log(\\\"Changing greeting from '%s' to '%s'\\\", greeting, _greeting);\\n        greeting = _greeting;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_contract_URI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"index\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"Fused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"index\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fusionTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fusionQuantity\",\"type\":\"uint256\"}],\"name\":\"addFusion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mustOwnQuantity\",\"type\":\"uint256\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFromRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whiteListIndexToRemove\",\"type\":\"uint256\"}],\"name\":\"disableWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsMetadataHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_extraDataUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_windowOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_windowCloses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintPerTxn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_maxQuantityMappedByWhitelistHoldings\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_requireAllWhiteLists\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_redeemableContracts\",\"type\":\"address[]\"}],\"name\":\"editToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"editTokenWhiteListMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fusion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mustOwnQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct Commerce.Whitelist\",\"name\":\"balanceRequest\",\"type\":\"tuple\"}],\"name\":\"getExternalTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenSaleTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"returnAllocationOnly\",\"type\":\"bool\"}],\"name\":\"getQualifiedAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"getTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"isSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"qty\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name_\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_merkleAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol_\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fusionOpen\",\"type\":\"bool\"}],\"name\":\"toggleFusion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mpIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"on\",\"type\":\"bool\"}],\"name\":\"toggleSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"ipfsMetadataHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"extraDataUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numRedeemableContracts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokenWhitelists\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"saleIsOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"windowOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"windowCloses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPerTxn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fusionTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fusionQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fusionOpen\",\"type\":\"bool\"}],\"internalType\":\"struct Commerce.MintingConfig\",\"name\":\"mintingConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"maxQuantityMappedByWhitelistHoldings\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requireAllWhiteLists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasMerkleRoot\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Commerce.WhiteListConfig\",\"name\":\"whiteListConfig\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isTokenPack\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"mpIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"verifyMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Commerce", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000f546865205469636b337420506173730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a5449434b33545041535300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000081745b7339d5067e82b93ca6bbad125f214525d3000000000000000000000000110d0c8b5a06c0367053938eedf10131ac972593000000000000000000000000cf163b6519e8388ba3b917177b93de5be01e80690000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d526f6131704a4846454c697a6e654c694e6d704c574e6161326a6e4c4d5974563764395a4578545a354e37690000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d7ba2ee7e54a7bf122b45083b448efeed6d70663e219eaf42dec7808c75960a"}]}