{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.21;\r\n\r\n\r\ncontract Platform\r\n{\r\n    address public platform = 0x709a0A8deB88A2d19DAB2492F669ef26Fd176f6C;\r\n\r\n    modifier onlyPlatform() {\r\n        require(msg.sender == platform);\r\n        _;\r\n    }\r\n\r\n    function isPlatform() public view returns (bool) {\r\n        return platform == msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract BeneficiaryInterface\r\n{\r\n    function getAvailableWithdrawInvestmentsForBeneficiary() public view returns (uint);\r\n    function withdrawInvestmentsBeneficiary(address withdraw_address) public returns (bool);\r\n}\r\n\r\n\r\n//\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f ICO \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0442\u0435 \u043c\u043e\u0433\u043b\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c CNRToken-\u0443\r\n//\u043e \u0442\u043e\u043c \u0447\u0442\u043e \u0435\u043c\u0443 \u043f\u0435\u0440\u0435\u0432\u0435\u043b\u0438 \u0431\u0430\u0431\u043a\u0438\r\ncontract CNRAddBalanceInterface\r\n{\r\n    function addTokenBalance(address, uint) public;\r\n}\r\n\r\n\r\n//\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0430 \u043c\u043e\u0433\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u044b\r\ncontract CNRAddTokenInterface\r\n{\r\n    function addTokenAddress(address) public;\r\n}\r\n\r\n//TODO: \u043c\u043e\u0436\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 TokensCollection, \u043a\u0443\u0434\u0430 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432\u0441\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u0437  tokens_map, tokens_arr \u0438\u0442\u0434\r\ncontract CNRToken is ERC20, CNRAddBalanceInterface, CNRAddTokenInterface, Platform\r\n{\r\n    using SafeMath for uint256;\r\n\r\n\r\n    //\u0422\u043e\u043a\u0435\u043d  ERC20\r\n    string public constant name = \"ICO Constructor token\";\r\n    string public constant symbol = \"CNR\";\r\n    uint256 public constant decimals = 18;\r\n\r\n\r\n    //-------------------------ERC20 interface----------------------------------\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    mapping(address => uint256) balances;\r\n    ////////////////////////////ERC20 interface/////////////////////////////////\r\n\r\n    //\u0410\u0434\u0440\u0435\u0441 \u0433\u0440\u0430\u043d\u0434 \u0444\u0430\u0431\u0440\u0438\u043a\u0438\r\n    address public grand_factory = address(0);\r\n\r\n    //\u041c\u0430\u043f\u0430 \u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0445 \u0442\u043e\u043a\u0435\u043d\u043e\u0432. \u041d\u0443\u043b\u0435\u0432\u043e\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442  \u0437\u0430\u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d \u0434\u043b\u044f\r\n    //\u044d\u0444\u0438\u0440\u0430. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u043b\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432\r\n    mapping(address => uint256) public  tokens_map;\r\n    TokenInfo[] public                  tokens_arr;\r\n\r\n    //\u041c\u0430\u043f\u0430 \u0441 \u0437\u0430\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044f\u043c\u0438 (\u044d\u0444\u0438\u0440\u043e\u043c, \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438). (\u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 => (\u0438\u043d\u0434\u0435\u043a\u0441 \u0442\u043e\u043a\u0435\u043d\u0430 => \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0436\u0435 \u0437\u0430\u0431\u0440\u0430\u043b))\r\n    //\u041f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443 0 - \u0432\u0441\u0435\u0433\u0434\u0430 \u044d\u0444\u0438\u0440.\r\n    mapping(address => mapping(uint => uint)) withdrawns;\r\n\r\n    function CNRToken() public\r\n    {\r\n        totalSupply = 10*1000*1000*(10**decimals); // 10 mln\r\n        balances[msg.sender] = totalSupply;\r\n\r\n        //\u041d\u0430 \u043d\u0443\u043b\u0435\u0432\u043e\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u044d\u0444\u0438\u0440\r\n        tokens_arr.push(\r\n            TokenInfo(\r\n                address(0),\r\n                0));\r\n    }\r\n\r\n\r\n    //\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0441\u0435\u0445 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0442\u043e\u043a\u0435\u043d\u043e\u0432\r\n    function getRegisteredTokens()\r\n    public view\r\n    returns (address[])\r\n    {\r\n        // \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f, \u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0442\u043e\u043a\u0435\u043d\u044b. <= \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u0435\u0434 mythril,\r\n        // \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442 \u0447\u0442\u043e \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0437\u0430\u0431\u0438\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\r\n        if (tokens_arr.length <= 1)\r\n            return;\r\n\r\n        address[] memory token_addresses = new address[](tokens_arr.length-1);\r\n        for (uint i = 1; i < tokens_arr.length; i++)\r\n        {\r\n            token_addresses[i-1] = tokens_arr[i].contract_address;\r\n        }\r\n\r\n        return token_addresses;\r\n    }\r\n\r\n    //\u0424\u0443\u043d\u043a\u0438\u0446\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0441\u0435\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0434\u043e\u0445\u043e\u0434\u0430\u0445 \u0432 ether \u0441\u043e \u0432\u0441\u0435\u0445\r\n    //\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432 \u0442\u043e\u043a\u0435\u043d\u043e\u0432. \u0427\u0442\u043e\u0431\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u0438\u043c\u0438\r\n    //\u0434\u043e\u0445\u043e\u0434\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0436\u043e\u0433\u043e \u0442\u043e\u043a\u0435\u043d\u0430 \u0432\u044b\u0437\u0432\u0430\u0442\u044c takeICOInvestmentsEtherCommission\r\n    function getAvailableEtherCommissions()\r\n    public view\r\n    returns(\r\n        address[],\r\n        uint[]\r\n    )\r\n    {\r\n        // \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f, \u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0442\u043e\u043a\u0435\u043d\u044b. <= \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u0435\u0434 mythril,\r\n        // \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442 \u0447\u0442\u043e \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0437\u0430\u0431\u0438\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\r\n        if (tokens_arr.length <= 1)\r\n            return;\r\n\r\n        address[] memory token_addresses = new address[](tokens_arr.length-1);\r\n        uint[] memory available_withdraws = new uint[](tokens_arr.length-1);\r\n        //\u0417\u0434\u0435\u0441\u044c \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043e\u0442 1-\u0433\u043e, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0430 0-\u043e\u043c - \u044d\u0444\u0438\u0440\r\n        for (uint i = 1; i < tokens_arr.length; i++)\r\n        {\r\n            token_addresses[i-1] = tokens_arr[i].contract_address;\r\n            available_withdraws[i-1] =\r\n                BeneficiaryInterface(tokens_arr[i].contract_address).getAvailableWithdrawInvestmentsForBeneficiary();\r\n        }\r\n\r\n        return (token_addresses, available_withdraws);\r\n    }\r\n\r\n\r\n    //\u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u0435\u0442 \u0434\u0435\u0440\u0433\u043d\u0443\u0442\u044c \u043a\u0442\u043e \u0443\u0433\u043e\u0434\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439  \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0431\u044b\u043b\u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\r\n    //\u043a\u043e\u043c\u0438\u0441\u0441\u0438\u0438 \u0441 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u0432 \u044d\u0444\u0438\u0440\u0435\r\n    function takeICOInvestmentsEtherCommission(address ico_token_address)\r\n    public\r\n    {\r\n        //\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u0440\u0430\u043d\u0435\u0435 \u0431\u044b\u043b! \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0442\u0430\u043a\u043e\u0439 \u0442\u043e\u043a\u0435\u043d\r\n        require(tokens_map[ico_token_address] != 0);\r\n\r\n        //\u0423\u0437\u043d\u0430\u0435\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0431\u0430\u0431\u043b\u0430\r\n        uint available_investments_commission =\r\n            BeneficiaryInterface(ico_token_address).getAvailableWithdrawInvestmentsForBeneficiary();\r\n\r\n        //\u0417\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u0447\u0442\u043e \u0431\u0430\u0431\u043a\u0438 \u0437\u0430\u0431\u0440\u0430\u043b\u0438\r\n        //\u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u0434\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0442\u043e\u043c \u0434\u0435\u0440\u0433\u0430\u0435\u043c external contract method\r\n        tokens_arr[0].ever_added = tokens_arr[0].ever_added.add(available_investments_commission);\r\n\r\n        //\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0431\u0430\u0431\u043b\u043e \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\r\n        BeneficiaryInterface(ico_token_address).withdrawInvestmentsBeneficiary(\r\n            address(this));\r\n    }\r\n\r\n\r\n    //\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0431\u0430\u0431\u043b\u0430\r\n    function()\r\n    public payable\r\n    {\r\n\r\n    }\r\n\r\n\r\n    //\u041c\u0435\u0442\u043e\u0434 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0430\u0434\u0440\u0435\u0441\u0430 grandFactory, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\r\n    function setGrandFactory(address _grand_factory)\r\n    public\r\n        onlyPlatform\r\n    {\r\n        //\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e\u0431\u044b \u0430\u0434\u0440\u0435\u0441 \u0431\u044b\u043b \u043f\u0435\u0440\u0435\u0434\u0430\u043d \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0439\r\n        require(_grand_factory != address(0));\r\n\r\n        grand_factory = _grand_factory;\r\n    }\r\n\r\n    // \u0431\u0430\u043b\u0430\u043d\u0441 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435:\r\n    // \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 _token_address, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u043b\u0430\u0434\u0435\u0435\u0442 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 CNR\r\n    // \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u043a\u0435\u043d\u043e\u0432 CNR \u0443 _owner, \u0434\u0435\u043b\u0438\u043c \u043d\u0430 totalSupply (\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u043e\u043b\u044e)\r\n    // \u0438 \u043e\u0442\u043d\u0438\u043c\u0430\u0435\u043c \u0443\u0436\u0435 \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u043d\u0443\u044e _owner'\u043e\u043c \u0441\u0443\u043c\u043c\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432\r\n    //\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u043a \u0432\u044b\u0432\u043e\u0434\u0443 \u0431\u0430\u043b\u0430\u043d\u0441 \u0432 \u0442\u043e\u043a\u0435\u043d\u0430\u0445 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e ICO\r\n    function balanceOfToken(address _owner, address _token_address)\r\n    public view\r\n    returns (uint256 balance)\r\n    {\r\n        //\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u0442\u043e\u043a\u0435\u043d\u0430\r\n        require(tokens_map[_token_address] != 0);\r\n\r\n        uint idx = tokens_map[_token_address];\r\n        balance =\r\n            tokens_arr[idx].ever_added\r\n            .mul(balances[_owner])\r\n            .div(totalSupply)\r\n            .sub(withdrawns[_owner][idx]);\r\n        }\r\n\r\n    // \u0432\u0441\u0435 \u043a\u0430\u043a \u0438 \u0432 balanceOfToken, \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c 0 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 tokens_arr \u0438 withdrawns[_owner]\r\n    //\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u043a \u0432\u044b\u0432\u043e\u0434\u0443 \u0431\u0430\u043b\u0430\u043d\u0441 \u0432 \u044d\u0444\u0438\u0440\u0430\u0445\r\n    function balanceOfETH(address _owner)\r\n    public view\r\n    returns (uint256 balance)\r\n    {\r\n        balance =\r\n            tokens_arr[0].ever_added\r\n            .mul(balances[_owner])\r\n            .div(totalSupply)\r\n            .sub(withdrawns[_owner][0]);\r\n    }\r\n\r\n    //\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e ICO \u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0448\u0435\u043b\u0435\u043a\r\n    function withdrawTokens(address _token_address, address _destination_address)\r\n    public\r\n    {\r\n        //\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u0442\u043e\u043a\u0435\u043d\u0430\r\n        require(tokens_map[_token_address] != 0);\r\n\r\n        uint token_balance = balanceOfToken(msg.sender, _token_address);\r\n        uint token_idx = tokens_map[_token_address];\r\n        withdrawns[msg.sender][token_idx] = withdrawns[msg.sender][token_idx].add(token_balance);\r\n        ERC20Basic(_token_address).transfer(_destination_address, token_balance);\r\n    }\r\n\r\n    //\u0424\u0443\u043d\u043a\u0438\u0446\u044f \u0437\u0430\u0431\u0438\u0440\u0430\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u044d\u0444\u0438\u0440\u0430 \u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0448\u0435\u043b\u0435\u043a\r\n    function withdrawETH(address _destination_address)\r\n    public\r\n    {\r\n        uint value_in_wei = balanceOfETH(msg.sender);\r\n        withdrawns[msg.sender][0] = withdrawns[msg.sender][0].add(value_in_wei);\r\n        _destination_address.transfer(value_in_wei);\r\n    }\r\n\r\n\r\n    //\u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u043e\u0436\u043d\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432-\u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u0432 \u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442 \u043a\u043e\u0433\u0434\u0430 \u0431\u0435\u043d\u0435\u0444\u0438\u0446\u0438\u0430\u0440\u0443\r\n    //(\u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0431\u0435\u043d\u0435\u0444\u0438\u0446\u0438\u0430\u0440\u0430) \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d\u044b\r\n    function addTokenBalance(address _token_contract, uint amount)\r\n    public\r\n    {\r\n        //\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0437 \u0440\u0430\u043d\u0435\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u043d\u043e! \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u0442\u043e\u043a\u0435\u043d\u0430\r\n        require(tokens_map[msg.sender] != 0);\r\n\r\n        //\u0414\u041e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u043a\u0435\u043d\u0430\u0445, \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0431\u0435\u043d\u0435\u0444\u0438\u0446\u0438\u0430\u0440\u0443\r\n        tokens_arr[tokens_map[_token_contract]].ever_added = tokens_arr[tokens_map[_token_contract]].ever_added.add(amount);\r\n    }\r\n\r\n    //\u0424\u0443\u043d\u043a\u0438\u0446\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0442\u043e\u043a\u0435\u043d\u0430. \u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f\r\n    //\u0442\u043e\u043b\u044c\u043a\u043e GrandFactory \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e ICO \u0442\u043e\u043a\u0435\u043d\u0430\r\n    function addTokenAddress(address ico_token_address)\r\n    public\r\n    {\r\n        //\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u043e \u0431\u044b\u043b \u0432\u044b\u0437\u043e\u0432 \u0438\u0437 grand_factory\r\n        require(grand_factory == msg.sender);\r\n\r\n        //\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u0440\u0430\u043d\u0435\u0435 \u043d\u0435 \u0431\u044b\u043b \u0434\u043e\u0430\u0432\u043b\u0435\u043d \u0442\u0430\u043a\u043e\u0439 \u0442\u043e\u043a\u0435\u043d\r\n        require(tokens_map[ico_token_address] == 0);\r\n\r\n        tokens_arr.push(\r\n            TokenInfo(\r\n                ico_token_address,\r\n                0));\r\n        tokens_map[ico_token_address] = tokens_arr.length - 1;\r\n    }\r\n\r\n\r\n\r\n    //------------------------------ERC20---------------------------------------\r\n\r\n    //\u0411\u0430\u043b\u0430\u043d\u0441 \u0432 \u0442\u043e\u043a\u0435\u043d\u0430\u0445\r\n    function balanceOf(address _owner)\r\n    public view\r\n    returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        //        uint withdraw_to_transfer = withdrawn[msg.sender] *  _value / balances[msg.sender];\r\n\r\n        for (uint i = 0; i < tokens_arr.length; i++)\r\n        {\r\n            //\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\r\n            uint withdraw_to_transfer = withdrawns[msg.sender][i].mul(_value).div(balances[msg.sender]);\r\n\r\n            //\u041f\u0435\u0440\u0432\u043e\u0434\u0438\u043c \u0437\u0430\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434\r\n            withdrawns[msg.sender][i] = withdrawns[msg.sender][i].sub(withdraw_to_transfer);\r\n            withdrawns[_to][i] = withdrawns[_to][i].add(withdraw_to_transfer);\r\n        }\r\n\r\n\r\n        //\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0442\u043e\u043a\u0435\u043d\u044b\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n\r\n        //\u0413\u0435\u043d\u0435\u0440\u0438\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u0435\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        for (uint i = 0; i < tokens_arr.length; i++)\r\n        {\r\n            //\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\r\n            uint withdraw_to_transfer = withdrawns[_from][i].mul(_value).div(balances[_from]);\r\n\r\n            //\u041f\u0435\u0440\u0432\u043e\u0434\u0438\u043c \u0437\u0430\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434\r\n            withdrawns[_from][i] = withdrawns[_from][i].sub(withdraw_to_transfer);\r\n            withdrawns[_to][i] = withdrawns[_to][i].add(withdraw_to_transfer);\r\n        }\r\n\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    ///////////////////////////////////ERC20////////////////////////////////////\r\n\r\n    struct TokenInfo\r\n    {\r\n        //\u0410\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u0442\u043e\u043a\u0435\u043d\u0430 (\u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043b\u0438\u0442\u044c \u043f\u043e\u0442\u043e\u043c?)\r\n        address contract_address;\r\n\r\n        //\u0412\u0435\u0441\u044c \u0434\u043e\u0445\u043e\u0434, \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0439 \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u043c\r\n        //\u0444\u0443\u043d\u043a\u0446\u0438\u0438 addTokenBalance\r\n        uint256 ever_added;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grand_factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegisteredTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens_map\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ico_token_address\",\"type\":\"address\"}],\"name\":\"addTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfETH\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination_address\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_grand_factory\",\"type\":\"address\"}],\"name\":\"setGrandFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens_arr\",\"outputs\":[{\"name\":\"contract_address\",\"type\":\"address\"},{\"name\":\"ever_added\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableEtherCommissions\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPlatform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ico_token_address\",\"type\":\"address\"}],\"name\":\"takeICOInvestmentsEtherCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_address\",\"type\":\"address\"},{\"name\":\"_destination_address\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_contract\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokenBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_token_address\",\"type\":\"address\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "CNRToken", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f5d2d8e93a31a268e8e176e436203fa694526bf7c97c28b97946e255a831fe57"}]}