{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HyewonNft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./IHyewonNft.sol\\\";\\n\\ncontract HyewonNft is IHyewonNft, ERC721A, Ownable, ReentrancyGuard, Pausable {\\n    /**\\n     * Maximum number of supply\\n     */\\n    uint256 public maximumSupply;\\n\\n    /**\\n     *  To make token uri immutable permanently\\n     */\\n    bool public permanent;\\n\\n    /**\\n     *  Minting rounds\\n     */\\n    mapping(uint16 => Round) rounds;\\n\\n    uint256 public revealBlockOffset = 3000;\\n\\n    /**\\n     *  Record how many tokens claimed for each whitelist\\n     */\\n    mapping(uint16 => mapping(address => uint16)) whitelists;\\n\\n    /**\\n     *  Current round number\\n     */\\n    uint16 public currentRoundNumber;\\n\\n    address private _receiver;\\n    address private _signer;\\n\\n    /**\\n     * Base uri for token uri\\n     */\\n    string public baseURI;\\n\\n    /**\\n     * Default unrevealed uri\\n     */\\n    string private defaultUnrevealedURI;\\n\\n    /**\\n     * Modifier for onlyOwnerAndAdmin\\n     * Each round could have different admin\\n     */\\n    modifier onlyOwnerOrAdmin(uint16 roundNumber) {\\n        Round memory r = rounds[roundNumber];\\n\\n        address admin = rounds[roundNumber].admin;\\n\\n        if (admin == address(0)) {\\n            revert BadRequest(\\\"Not allowed address\\\");\\n        }\\n\\n        if (msg.sender != owner() && msg.sender != admin) {\\n            revert NotOwnerNorAdmin(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address receiver,\\n        uint256 maxSupply,\\n        string memory _baseUri,\\n        string memory _defaultUnrevealedURI\\n    )\\n        ERC721A(\\\"Hyewon's Album of Genre Paintings\\\", \\\"HyewonPaintings\\\")\\n        Ownable()\\n        Pausable()\\n    {\\n        _receiver = receiver;\\n        maximumSupply = maxSupply;\\n        baseURI = _baseUri;\\n        defaultUnrevealedURI = _defaultUnrevealedURI;\\n    }\\n\\n    /**\\n     *  Get the STATE of the contract\\n     */\\n    function getState() public view returns (State) {\\n        if (currentRoundNumber == 0) {\\n            return State.DEPLOYED;\\n        }\\n\\n        Round memory currentRound = rounds[currentRoundNumber];\\n\\n        uint256 startTime = currentRound.startTime;\\n        uint256 endTime = currentRound.endTime;\\n        uint256 currentTime = block.timestamp;\\n\\n        State currentState;\\n\\n        if (currentTime < startTime) {\\n            currentState = State.PREPARE_MINTING;\\n        } else if (currentTime < endTime) {\\n            if (currentRound.maxMintingId > totalSupply()) {\\n                currentState = State.ON_MINTING;\\n            } else {\\n                currentState = State.END_MINTING;\\n            }\\n        } else {\\n            currentState = State.END_MINTING;\\n        }\\n\\n        return currentState;\\n    }\\n\\n    /**\\n     * Normal account minting\\n     */\\n    function mint(uint256 quantity)\\n        external\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        Round memory currentRound = getRound(currentRoundNumber);\\n\\n        // check if whitelist only round\\n        if (currentRound.whitelisted) {\\n            revert WhitelistOnlyRound();\\n        }\\n\\n        _sanityCheckForMinting(currentRound, quantity);\\n\\n        require(safeMint(msg.sender, quantity));\\n    }\\n\\n    /**\\n     *  Minting for whitelisted accounts only\\n     */\\n    function whitelistMint(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint16 quantity\\n    ) external payable nonReentrant whenNotPaused {\\n        Round memory currentRound = getRound(currentRoundNumber);\\n\\n        // check if whitelist only round\\n        if (!currentRound.whitelisted) {\\n            revert NotWhitelistOnlyRound();\\n        }\\n\\n        _sanityCheckForMinting(currentRound, quantity);\\n\\n        // check if the address has enough allowance\\n        uint16 claimed = whitelists[currentRoundNumber][_msgSender()];\\n        uint16 maxAllowedQuantity = currentRound.maxAllowedMintingQuantity;\\n\\n        if (claimed + quantity > maxAllowedQuantity) {\\n            revert ExceedAllowedQuantity(maxAllowedQuantity);\\n        }\\n\\n        _updateWhitelistUsed(currentRoundNumber, quantity, v, r, s);\\n\\n        require(safeMint(msg.sender, quantity));\\n    }\\n\\n    function safeMint(address receiver, uint256 quantity)\\n        private\\n        returns (bool)\\n    {\\n        _safeMint(receiver, quantity);\\n        return true;\\n    }\\n\\n    /**\\n     * Minting for admin account\\n     */\\n    function adminMint(uint256 quantity)\\n        external\\n        onlyOwnerOrAdmin(currentRoundNumber)\\n        nonReentrant\\n    {\\n        Round memory currentRound = rounds[currentRoundNumber];\\n        // check if minting does not exceed the maximum tokens for the round\\n        uint256 maxMintingId = currentRound.maxMintingId;\\n        if (!_isTokenAvailable(quantity, maxMintingId)) {\\n            revert ExceedMaximumForTheRound();\\n        }\\n\\n        require(safeMint(msg.sender, quantity));\\n    }\\n\\n    /**\\n     * Minting and transfer tokens\\n     * Only for owner\\n     */\\n    function adminMintTo(address[] calldata tos, uint256[] calldata quantities)\\n        external\\n        payable\\n        onlyOwner\\n    {\\n        uint256 length = tos.length;\\n        if (length != quantities.length) {\\n            revert BadRequest(\\\"Input size not match\\\");\\n        }\\n\\n        uint256 totalQuantity = 0;\\n\\n        for (uint256 i = 0; i < tos.length; i++) {\\n            totalQuantity += quantities[i];\\n        }\\n\\n        Round memory currentRound = rounds[currentRoundNumber];\\n        // check if minting does not exceed the maximum tokens for the round\\n        uint256 maxMintingId = currentRound.maxMintingId;\\n\\n        if (!_isTokenAvailable(totalQuantity, maxMintingId)) {\\n            revert ExceedMaximumForTheRound();\\n        }\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            require(safeMint(tos[i], quantities[i]));\\n        }\\n    }\\n\\n    /**\\n     * Transfer multiple tokens to an account\\n     */\\n    function transferBatch(uint256[] calldata tokenIds, address to)\\n        external\\n        nonReentrant\\n    {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            safeTransferFrom(_msgSender(), to, tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * Get token uri\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        Round memory round = _getRoundByTokenId(tokenId);\\n\\n        if (\\n            round.revealed &&\\n            keccak256(abi.encodePacked(round.tokenURIPrefix)) !=\\n            keccak256(abi.encodePacked(\\\"\\\"))\\n        ) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        round.tokenURIPrefix,\\n                        \\\"/\\\",\\n                        _toString(tokenId),\\n                        \\\".json\\\"\\n                    )\\n                );\\n        } else {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        defaultUnrevealedURI,\\n                        _toString(tokenId),\\n                        \\\".json\\\"\\n                    )\\n                );\\n        }\\n    }\\n\\n    /**\\n     *  Create a new minting round\\n     *  For owner only\\n     */\\n    function newRound(\\n        uint256 maxMintingId, // largest minting id for the round\\n        uint256 mintingFee, // minting fee\\n        uint16 maxAllowedMintingQuantity, // maximum number of minting quantity per account\\n        bool whitelisted, // use whitelist or not\\n        bool revealed, // reveal image or not\\n        uint256 startTime, // round starting time\\n        uint256 endTime, // round ending time\\n        bool onlyAdminRound, // only owner and admin can mint\\n        address admin // admin for the round\\n    ) external onlyOwner {\\n        // wrap-up the existing round\\n        if (currentRoundNumber > 0) {\\n            endRound();\\n        }\\n\\n        // the maxMintingId of new round can NOT exceed the maximumSupply\\n        if (maxMintingId > maximumSupply) {\\n            revert BadRequest(\\\"maxMintingId exceed the maximumSupply\\\");\\n        }\\n\\n        if (startTime >= endTime) {\\n            revert BadRequest(\\\"endTime should be bigger\\\");\\n        }\\n\\n        uint16 newRoundNumber = ++currentRoundNumber;\\n\\n        rounds[newRoundNumber] = Round({\\n            roundNumber: newRoundNumber,\\n            maxMintingId: maxMintingId,\\n            startId: _nextTokenId(),\\n            lastMintedId: 0,\\n            tokenURIPrefix: \\\"\\\",\\n            mintingFee: mintingFee,\\n            maxAllowedMintingQuantity: maxAllowedMintingQuantity,\\n            whitelisted: whitelisted,\\n            revealed: revealed,\\n            revealBlockNumber: 0,\\n            randomSelection: 0,\\n            startTime: startTime,\\n            endTime: endTime,\\n            onlyAdminRound: onlyAdminRound,\\n            admin: admin\\n        });\\n\\n        emit NewRoundCreated();\\n    }\\n\\n    /**\\n     * End the current round\\n     * For owner and admin\\n     */\\n    function endRound() public onlyOwnerOrAdmin(currentRoundNumber) {\\n        Round storage currentRound = rounds[currentRoundNumber];\\n        currentRound.lastMintedId = _nextTokenId() - 1;\\n        currentRound.endTime = block.timestamp;\\n    }\\n\\n    /**\\n     *  Get round detail\\n     */\\n    function getRound(uint16 roundNumber) public view returns (Round memory) {\\n        return rounds[roundNumber];\\n    }\\n\\n    /**\\n     *  Get the detail of the current round\\n     */\\n    function getCurrentRound() public view returns (Round memory) {\\n        return getRound(currentRoundNumber);\\n    }\\n\\n    /**\\n     *  Set the maximum minting id for the current round\\n     *  For owner and admin\\n     */\\n    function setMaxMintingId(uint256 maxId) external {\\n        setMaxMintingId(currentRoundNumber, maxId);\\n    }\\n\\n    /**\\n     *  Set the maximum minting id for the specified round\\n     *  For owner and admin\\n     */\\n    function setMaxMintingId(uint16 roundNumber, uint256 maxId)\\n        public\\n        onlyOwnerOrAdmin(roundNumber)\\n    {\\n        if (maxId < _nextTokenId()) {\\n            revert MaxMintingIdLowerThanCurrentId();\\n        }\\n\\n        if (maxId > maximumSupply) {\\n            revert ExceedMaximumSupply();\\n        }\\n\\n        Round storage round = rounds[roundNumber];\\n        round.maxMintingId = maxId;\\n\\n        emit MaxMintingIdUpdated(roundNumber, maxId);\\n    }\\n\\n    /**\\n     *  Set the token uri prefix for the current round\\n     *  For owner and admin\\n     */\\n    function setTokenURIPrefix(string memory prefix) external {\\n        setTokenURIPrefix(currentRoundNumber, prefix);\\n    }\\n\\n    /**\\n     *  Set the token uri prefix for the specified round\\n     *  For owner and admin\\n     */\\n    function setTokenURIPrefix(uint16 roundNumber, string memory prefix)\\n        public\\n        onlyOwnerOrAdmin(roundNumber)\\n    {\\n        if (permanent) {\\n            revert ImmutableState();\\n        }\\n\\n        Round storage round = rounds[roundNumber];\\n        round.tokenURIPrefix = prefix;\\n\\n        emit TokenURIPrefixUpdated(roundNumber, prefix);\\n    }\\n\\n    /**\\n     *  Set the minting for the current round\\n     *  OnlyOwner functions\\n     */\\n    function setMintingFee(uint256 fee) external {\\n        setMintingFee(currentRoundNumber, fee);\\n    }\\n\\n    /**\\n     *  Set the minting for the specified round\\n     *  OnlyOwner functions\\n     */\\n    function setMintingFee(uint16 roundNumber, uint256 fee)\\n        public\\n        onlyOwnerOrAdmin(roundNumber)\\n    {\\n        Round storage round = rounds[roundNumber];\\n        round.mintingFee = fee;\\n\\n        emit MintingFeeUpdated(roundNumber, fee);\\n    }\\n\\n    /**\\n     *  Set maximum minting quantity for an account\\n     *  For owner and admin\\n     */\\n    function setMaxAllowedMintingQuantity(uint16 quantity) external {\\n        setMaxAllowedMintingQuantity(currentRoundNumber, quantity);\\n    }\\n\\n    /**\\n     *  Set maximum minting quantity for an account\\n     *  For owner and admin\\n     */\\n    function setMaxAllowedMintingQuantity(uint16 roundNumber, uint16 quantity)\\n        public\\n        onlyOwnerOrAdmin(roundNumber)\\n    {\\n        Round storage round = rounds[roundNumber];\\n        round.maxAllowedMintingQuantity = quantity;\\n\\n        emit MaxAllowedMintingCountUpdated(roundNumber, quantity);\\n    }\\n\\n    /**\\n     *  On/off the whitelisted for the current round\\n     *  For owner and admin\\n     */\\n    function setWhitelisted(bool whitelisted) external {\\n        setWhitelisted(currentRoundNumber, whitelisted);\\n    }\\n\\n    /**\\n     *  On/off the whitelisted for the specified round\\n     *  For owner and admin\\n     */\\n    function setWhitelisted(uint16 roundNumber, bool whitelisted)\\n        public\\n        onlyOwnerOrAdmin(roundNumber)\\n    {\\n        Round storage round = rounds[roundNumber];\\n        round.whitelisted = whitelisted;\\n\\n        emit WhitelistRequiredChanged(roundNumber, whitelisted);\\n    }\\n\\n    /**\\n     *  Trigger reveal process for the current round\\n     *  For owner and admin\\n     */\\n    function setRevealBlock() external {\\n        setRevealBlock(currentRoundNumber);\\n    }\\n\\n    /**\\n     *  Trigger reveal process for the specified round\\n     *  For owner and admin\\n     */\\n    function setRevealBlock(uint16 roundNumber)\\n        public\\n        onlyOwnerOrAdmin(roundNumber)\\n    {\\n        Round storage round = rounds[roundNumber];\\n\\n        if (round.lastMintedId == 0) {\\n            revert BadRequest(\\\"Round should be closed\\\");\\n        }\\n\\n        round.revealBlockNumber = block.number + revealBlockOffset;\\n\\n        emit SetRevealBlock(round.revealBlockNumber);\\n    }\\n\\n    /**\\n     *  Set random selection number based on entropy\\n     *  It set the reveal on\\n     */\\n    function setRandomSelection(uint16 roundNumber) public {\\n        Round storage round = rounds[roundNumber];\\n\\n        if (round.revealed) {\\n            revert AlreadyRevealed();\\n        }\\n\\n        uint256 revealBlockNumber = round.revealBlockNumber;\\n\\n        if (revealBlockNumber > block.number) {\\n            revert BadRequest(\\\"Random selection is not ready\\\");\\n        }\\n\\n        bytes32 entropy;\\n\\n        if (blockhash(revealBlockNumber - 1) != 0) {\\n            entropy = keccak256(\\n                abi.encodePacked(\\n                    blockhash(revealBlockNumber),\\n                    blockhash(revealBlockNumber - 1),\\n                    block.timestamp\\n                )\\n            );\\n        } else {\\n            entropy = keccak256(\\n                abi.encodePacked(\\n                    blockhash(block.number - 1),\\n                    blockhash(block.number - 2),\\n                    block.timestamp\\n                )\\n            );\\n        }\\n\\n        round.revealed = true;\\n\\n        uint256 selected = _getRandomInRange(\\n            entropy,\\n            round.startId,\\n            round.lastMintedId\\n        );\\n\\n        round.randomSelection = selected;\\n\\n        emit Revealed(roundNumber);\\n    }\\n\\n    /**\\n     * Set revealed\\n     * For owner and admin\\n     */\\n    function setRevealed() external {\\n        setRevealed(currentRoundNumber);\\n    }\\n\\n    function setRevealed(uint16 roundNumber)\\n        public\\n        onlyOwnerOrAdmin(roundNumber)\\n    {\\n        Round storage round = rounds[roundNumber];\\n\\n        if (round.lastMintedId == 0) {\\n            revert BadRequest(\\\"Round is still open\\\");\\n        }\\n\\n        round.revealed = true;\\n\\n        emit Revealed(roundNumber);\\n    }\\n\\n    /**\\n     *  Set minting start time for the current round\\n     *  Only for owner and admin\\n     */\\n    function setStartTime(uint256 time) external {\\n        setStartTime(currentRoundNumber, time);\\n    }\\n\\n    /**\\n     *  Set minting start time for the specified round\\n     *  Only for owner and admin\\n     */\\n    function setStartTime(uint16 roundNumber, uint256 time)\\n        public\\n        onlyOwnerOrAdmin(roundNumber)\\n    {\\n        Round storage round = rounds[roundNumber];\\n        round.startTime = time;\\n\\n        emit StartTimeUpdated(roundNumber, time);\\n    }\\n\\n    /**\\n     *  Set minting end time for the current round\\n     *  Only for owner and admin\\n     */\\n    function setEndTime(uint256 time) external {\\n        setEndTime(currentRoundNumber, time);\\n    }\\n\\n    /**\\n     *  Set minting end time for the specified round\\n     *  Only for owner and admin\\n     */\\n    function setEndTime(uint16 roundNumber, uint256 time)\\n        public\\n        onlyOwnerOrAdmin(roundNumber)\\n    {\\n        Round storage round = rounds[roundNumber];\\n        round.endTime = time;\\n\\n        emit EndTimeUpdated(roundNumber, time);\\n    }\\n\\n    /**\\n     *  On/off admin only round for the current round\\n     *  OnlyOwner\\n     */\\n    function setOnlyAdminRound(bool onlyAdmin) external {\\n        setOnlyAdminRound(currentRoundNumber, onlyAdmin);\\n    }\\n\\n    /**\\n     *  On/off admin only round for the specified round\\n     *  OnlyOwner\\n     */\\n    function setOnlyAdminRound(uint16 roundNumber, bool onlyAdmin)\\n        public\\n        onlyOwner\\n    {\\n        Round storage round = rounds[roundNumber];\\n        round.onlyAdminRound = onlyAdmin;\\n\\n        emit OnlyAdminRoundChanged(roundNumber, onlyAdmin);\\n    }\\n\\n    /**\\n     *  Set the admin for the current round\\n     *  OnlyOwner\\n     */\\n    function setAdmin(address admin) external {\\n        setAdmin(currentRoundNumber, admin);\\n    }\\n\\n    /**\\n     * Set the admin for the specified round\\n     * OnlyOwner\\n     */\\n    function setAdmin(uint16 roundNumber, address admin) public onlyOwner {\\n        Round storage round = rounds[roundNumber];\\n        round.admin = admin;\\n\\n        emit AdminUpdated(roundNumber, admin);\\n    }\\n\\n    /**\\n     *  Internal function to override the ERC721A _baseURI()\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     *  Get the base uri\\n     */\\n    function getBaseURI() external view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    /**\\n     * Set the base uri\\n     * Only for the owner\\n     */\\n    function setBaseURI(string memory _newBaseURI) external onlyOwner {\\n        if (permanent) {\\n            revert ImmutableState();\\n        }\\n\\n        baseURI = _newBaseURI;\\n        emit BaseURIUpdated(_newBaseURI);\\n    }\\n\\n    /**\\n     * Set the default unrevealed uri\\n     * Only for the owner\\n     */\\n    function setDefaultUnrevealedURI(string memory _defaultUnrevealedURI)\\n        external\\n        onlyOwner\\n    {\\n        defaultUnrevealedURI = _defaultUnrevealedURI;\\n        emit DefaultUnrevealedURIUpdated(_defaultUnrevealedURI);\\n    }\\n\\n    /**\\n     *  Paused the contract\\n     *  Only for the owner\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     *  Unpause the contract\\n     *  Only for the owner\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     *  Set the receiver\\n     *  Only for the owner\\n     */\\n    function setReceiver(address receiver) external onlyOwner {\\n        _receiver = receiver;\\n    }\\n\\n    /**\\n     * Withdraw the balance in the contract\\n     */\\n    function withdraw() external payable onlyOwner {\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = _receiver.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedToSendBalance();\\n        }\\n        emit Withdraw(_receiver, amount);\\n    }\\n\\n    /**\\n     *  Fallback function\\n     */\\n    fallback() external payable {\\n        emit Received(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     *  Fallback function\\n     */\\n    receive() external payable {\\n        emit Received(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * Set the 'perment' to true to prevent token uri change\\n     */\\n    function setPermanent() external onlyOwner {\\n        permanent = true;\\n    }\\n\\n    /**\\n     *  Update signer\\n     *  For only owner\\n     */\\n    function updateSigner(address newSigner) external onlyOwner {\\n        _signer = newSigner;\\n    }\\n\\n    function updateRevealBlockOffset(uint256 newOffset) external onlyOwner {\\n        revealBlockOffset = newOffset;\\n    }\\n\\n    /**\\n     *  Sanity check before transfer tokens\\n     */\\n    function _sanityCheckForMinting(Round memory currentRound, uint256 quantity)\\n        private\\n    {\\n        // check if onlyAdminRound\\n        if (currentRound.onlyAdminRound) {\\n            revert AdminOnlyRound();\\n        }\\n\\n        State currentState = getState();\\n\\n        if (currentState != State.ON_MINTING) {\\n            revert MintingNotAllowed();\\n        }\\n\\n        // check if not exceeding the maxAllowedMintingQuantity\\n        if (\\n            currentRound.maxAllowedMintingQuantity != 0 &&\\n            currentRound.maxAllowedMintingQuantity < quantity\\n        ) {\\n            revert ExceedAllowedQuantity(\\n                currentRound.maxAllowedMintingQuantity\\n            );\\n        }\\n\\n        // check if minting does not exceed the maximum tokens for the round\\n        if (!_isTokenAvailable(quantity, currentRound.maxMintingId)) {\\n            revert ExceedMaximumForTheRound();\\n        }\\n\\n        // check if proper fee is received\\n        uint256 neededFee = currentRound.mintingFee * quantity;\\n        if (neededFee != msg.value) revert NoMatchingFee();\\n    }\\n\\n    /**\\n     *  Check the availability of tokens mintable for the round\\n     */\\n    function _isTokenAvailable(uint256 quantity, uint256 maxId)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        // check if minting does not exceed the maximum tokens for the round\\n        if (_nextTokenId() + quantity > (maxId + 1)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     *  Private function to get the round number with token id\\n     */\\n    function _getRoundByTokenId(uint256 tokenId)\\n        private\\n        view\\n        returns (Round memory r)\\n    {\\n        if (!_exists(tokenId)) revert NonExistingToken(tokenId);\\n\\n        uint16 roundNumber = 1;\\n\\n        while (roundNumber <= currentRoundNumber) {\\n            r = rounds[roundNumber];\\n            uint256 roundMax = r.lastMintedId != 0\\n                ? r.lastMintedId\\n                : r.maxMintingId;\\n            if (tokenId > roundMax) {\\n                roundNumber++;\\n                continue;\\n            }\\n            return r;\\n        }\\n    }\\n\\n    function _updateWhitelistUsed(\\n        uint16 round,\\n        uint16 quantity,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) private {\\n        // verify the signature\\n        bytes32 hash = _getHash(round, _msgSender(), \\\"whitelistClaim\\\");\\n        if (!_verifySig(hash, v, r, s)) {\\n            revert SignatureNotMatch();\\n        }\\n\\n        // add the claimed quantity\\n        whitelists[round][_msgSender()] += quantity;\\n    }\\n\\n    function _getHash(\\n        uint16 round,\\n        address sender,\\n        string memory message\\n    ) private view returns (bytes32) {\\n        return\\n            keccak256(abi.encodePacked(address(this), round, sender, message));\\n    }\\n\\n    function _verifySig(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) private view returns (bool) {\\n        return ecrecover(hash, v, r, s) == _signer;\\n    }\\n\\n    function _getRandomInRange(\\n        bytes32 hash,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (uint256) {\\n        uint256 diff = end - begin + 1;\\n        return (uint256(hash) % diff) + begin;\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.0.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev ERC721 token receiver interface.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Mask of an entry in packed address data.\\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant BITMASK_BURNED = 1 << 224;\\n    \\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See `_packedOwnershipOf` implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * @dev Returns the starting token ID. \\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count. \\n     * To get the total number of tokens minted, please see `_totalMinted`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to `_startTokenId()`\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        assembly { // Cast aux without masking.\\n            auxCasted := aux\\n        }\\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an ownership that has an address and is not burned\\n                        // before an ownership that does not have an address and is not burned.\\n                        // Hence, curr will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed is zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & BITMASK_BURNED != 0;\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev Casts the address to uint256 without masking.\\n     */\\n    function _addressToUint256(address value) private pure returns (uint256 result) {\\n        assembly {\\n            result := value\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts the boolean to uint256 without branching.\\n     */\\n    function _boolToUint256(bool value) private pure returns (uint256 result) {\\n        assembly {\\n            result := value\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = address(uint160(_packedOwnershipOf(tokenId)));\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the balance and number minted.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (to.code.length != 0) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex < end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex < end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the balance and number minted.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            do {\\n                emit Transfer(address(0), to, updatedIndex++);\\n            } while (updatedIndex < end);\\n\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\n            isApprovedForAll(from, _msgSenderERC721A()) ||\\n            getApproved(tokenId) == _msgSenderERC721A());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        delete _tokenApprovals[tokenId];\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                BITMASK_NEXT_INITIALIZED;\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\n                isApprovedForAll(from, _msgSenderERC721A()) ||\\n                getApproved(tokenId) == _msgSenderERC721A());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        delete _tokenApprovals[tokenId];\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] =\\n                _addressToUint256(from) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                BITMASK_BURNED | \\n                BITMASK_NEXT_INITIALIZED;\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), \\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\n            // We will need 1 32-byte word to store the length, \\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\n            ptr := add(mload(0x40), 128)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, ptr)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := ptr\\n\\n            // We write the string from the rightmost digit to the leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // Costs a bit more than early returning for the zero case,\\n            // but cheaper in terms of deployment and overall runtime costs.\\n            for { \\n                // Initialize and perform the first pass without check.\\n                let temp := value\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\n                ptr := sub(ptr, 1)\\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n            } temp { \\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n            } { // Body of the for loop.\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n            }\\n            \\n            let length := sub(end, ptr)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            ptr := sub(ptr, 32)\\n            // Store the length.\\n            mstore(ptr, length)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IHyewonNft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IHyewonNft {\\n    error MintingNotStarted(uint256 startTime);\\n    error MintingEnded(uint256 endTime);\\n    error MintingNotAllowed();\\n    error ExceedMaximumForTheRound();\\n    error ExceedMaximumSupply();\\n    error ExceedAllowedQuantity(uint16 maximumAllowedQuantity);\\n    error MaxMintingIdLowerThanCurrentId();\\n    error NoMatchingFee();\\n    error NonExistingToken(uint256 tokenId);\\n    error AddressNotWhitelisted(address candidate);\\n    error NotEnoughAllowanceLeft(uint16 remainingAllowance);\\n    error FailedToSendBalance();\\n    error NotOwnerNorAdmin(address account);\\n    error AdminOnlyRound();\\n    error BadRequest(string reason);\\n    error WhitelistOnlyRound();\\n    error NotWhitelistOnlyRound();\\n    error SignatureNotMatch();\\n    error AlreadyRevealed();\\n    error ImmutableState();\\n\\n    enum State {\\n        DEPLOYED,\\n        PREPARE_MINTING,\\n        ON_MINTING,\\n        END_MINTING,\\n        ALL_MINTING_DONE\\n    }\\n\\n    struct Round {\\n        uint16 roundNumber; // round number\\n        uint256 maxMintingId; // maximum token id for this round\\n        uint256 startId; // beginning of the tokenId for the round\\n        uint256 lastMintedId; // last token id actually minted before the next round starts\\n        string tokenURIPrefix; // directory hash value for token uri\\n        uint256 mintingFee; // minting for the round\\n        uint16 maxAllowedMintingQuantity; // max number of tokens for an account (if zero, no limit)\\n        bool whitelisted; // use whitelist or not\\n        bool revealed; // released token is revealed or not\\n        uint256 revealBlockNumber; // blocknubmer which entropy will calculated\\n        uint256 randomSelection;\\n        uint256 startTime; // round start time\\n        uint256 endTime; // round end time (if zero, no end time)\\n        bool onlyAdminRound; // only admin can mint tokens\\n        address admin; // additional admin account\\n    }\\n\\n    event NewRoundCreated();\\n    event MaxMintingIdUpdated(uint16 roundNumber, uint256 maxId);\\n    event TokenURIPrefixUpdated(uint16 roundNumber, string prefix);\\n    event MintingFeeUpdated(uint16 roundNumber, uint256 fee);\\n    event MaxAllowedMintingCountUpdated(uint16 roundNumber, uint16 count);\\n    event WhitelistRequiredChanged(uint16 roundNumber, bool whitelisted);\\n    event SetRevealBlock(uint256 revealBlockNumber);\\n    event Revealed(uint16 roundNumber);\\n    event UnrevealedURIUpdated(uint16 roundNumber, string uri);\\n    event StartTimeUpdated(uint16 roundNumber, uint256 time);\\n    event EndTimeUpdated(uint16 roundNumber, uint256 time);\\n    event OnlyAdminRoundChanged(uint16 roundNumber, bool onlyAdmin);\\n    event AdminUpdated(uint16 roundNumber, address admin);\\n\\n    event BaseURIUpdated(string baseURI);\\n    event DefaultUnrevealedURIUpdated(string defaultUnrevealedURI);\\n    event MintingFeeChanged(uint256 newFee);\\n    event MaxPublicIdChanged(uint16 newMaxPubId);\\n    event Received(address called, uint256 amount);\\n    event Withdraw(address receiver, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.0.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * The caller cannot approve to the current owner.\\n     */\\n    error ApprovalToCurrentOwner();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // ==============================\\n    //            IERC165\\n    // ==============================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // ==============================\\n    //            IERC721\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // ==============================\\n    //        IERC721Metadata\\n    // ==============================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_defaultUnrevealedURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"AddressNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminOnlyRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BadRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maximumAllowedQuantity\",\"type\":\"uint16\"}],\"name\":\"ExceedAllowedQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedMaximumForTheRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedMaximumSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToSendBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ImmutableState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxMintingIdLowerThanCurrentId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"MintingEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintingNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"MintingNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMatchingFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NonExistingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"remainingAllowance\",\"type\":\"uint16\"}],\"name\":\"NotEnoughAllowanceLeft\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotOwnerNorAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelistOnlyRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhitelistOnlyRound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"defaultUnrevealedURI\",\"type\":\"string\"}],\"name\":\"DefaultUnrevealedURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"EndTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"}],\"name\":\"MaxAllowedMintingCountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxId\",\"type\":\"uint256\"}],\"name\":\"MaxMintingIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newMaxPubId\",\"type\":\"uint16\"}],\"name\":\"MaxPublicIdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"MintingFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"MintingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NewRoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"onlyAdmin\",\"type\":\"bool\"}],\"name\":\"OnlyAdminRoundChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"called\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"}],\"name\":\"Revealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revealBlockNumber\",\"type\":\"uint256\"}],\"name\":\"SetRevealBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StartTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"TokenURIPrefixUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"UnrevealedURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistRequiredChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"name\":\"adminMintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundNumber\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"maxMintingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMintedId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxAllowedMintingQuantity\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"revealBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomSelection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onlyAdminRound\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct IHyewonNft.Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"}],\"name\":\"getRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"maxMintingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMintedId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxAllowedMintingQuantity\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"revealBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomSelection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onlyAdminRound\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct IHyewonNft.Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum IHyewonNft.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxAllowedMintingQuantity\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onlyAdminRound\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"newRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permanent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealBlockOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_defaultUnrevealedURI\",\"type\":\"string\"}],\"name\":\"setDefaultUnrevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"}],\"name\":\"setMaxAllowedMintingQuantity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"}],\"name\":\"setMaxAllowedMintingQuantity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"maxId\",\"type\":\"uint256\"}],\"name\":\"setMaxMintingId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxId\",\"type\":\"uint256\"}],\"name\":\"setMaxMintingId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMintingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMintingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onlyAdmin\",\"type\":\"bool\"}],\"name\":\"setOnlyAdminRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"onlyAdmin\",\"type\":\"bool\"}],\"name\":\"setOnlyAdminRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"}],\"name\":\"setRandomSelection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRevealBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"}],\"name\":\"setRevealBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"}],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"roundNumber\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOffset\",\"type\":\"uint256\"}],\"name\":\"updateRevealBlockOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"updateSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HyewonNft", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006c9e30f0340e32fde08deade9be98ad83df05e730000000000000000000000000000000000000000000000000000000000004e20000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001b68747470733a2f2f6b6d6d2e6d7970696e6174612e636c6f75642f0000000000000000000000000000000000000000000000000000000000000000000000002568747470733a2f2f676174657761792d697066732e61746f6d726967732e696f2f6b6d6d2f000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}