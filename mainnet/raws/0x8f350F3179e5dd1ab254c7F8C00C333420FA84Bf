{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Teddygang.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n                                                                                                   \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n//   _________  _______   ________  ________      ___    ___ ________  ________  ________   ________        //  \\n//  |\\\\___   ___\\\\\\\\  ___ \\\\ |\\\\   ___ \\\\|\\\\   ___ \\\\    |\\\\  \\\\  /  /|\\\\   ____\\\\|\\\\   __  \\\\|\\\\   ___  \\\\|\\\\   ____\\\\       // \\n//  \\\\|___ \\\\  \\\\_\\\\ \\\\   __/|\\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \\\\_|\\\\ \\\\   \\\\ \\\\  \\\\/  / | \\\\  \\\\___|\\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\___|       //\\n//       \\\\ \\\\  \\\\ \\\\ \\\\  \\\\_|/_\\\\ \\\\  \\\\ \\\\\\\\ \\\\ \\\\  \\\\ \\\\\\\\ \\\\   \\\\ \\\\    / / \\\\ \\\\  \\\\  __\\\\ \\\\   __  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\  ___     //    \\n//        \\\\ \\\\  \\\\ \\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \\\\_\\\\\\\\ \\\\ \\\\  \\\\_\\\\\\\\ \\\\   \\\\/  /  /   \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\|\\\\  \\\\    //    \\n//         \\\\ \\\\__\\\\ \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\__/  / /      \\\\ \\\\_______\\\\ \\\\__\\\\ \\\\__\\\\ \\\\__\\\\\\\\ \\\\__\\\\ \\\\_______\\\\   //    \\n//           \\\\|__|  \\\\|_______|\\\\|_______|\\\\|_______|\\\\___/ /        \\\\|_______|\\\\|__|\\\\|__|\\\\|__| \\\\|__|\\\\|_______|  //  \\n//                                               \\\\|___|/                                                    //  \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                                         \\n  \\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n    uint256 private _status;\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\nlibrary MerkleProof {\\n    \\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Strings.sol\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n       \\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    \\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n    \\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\nlibrary Address {\\n   \\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    \\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IERC721Receiver {\\n    \\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\nabstract contract ERC165 is IERC165 {\\n    \\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IERC721 is IERC165 {\\n    \\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IERC721Metadata is IERC721 {\\n    \\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n\\npragma solidity ^0.8.4;\\n\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    struct TokenOwnership {\\n        address addr;\\n        uint64 startTimestamp;\\n        bool burned;\\n    }\\n\\n    struct AddressData {\\n        uint64 balance;\\n        uint64 numberMinted;\\n        uint64 numberBurned;\\n        uint64 aux;\\n    }\\n\\n    uint256 internal _currentIndex;\\n    uint256 internal _burnCounter;\\n    string private _name;\\n    string private _symbol;\\n\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n    mapping(address => AddressData) private _addressData;\\n    mapping(uint256 => address) private _tokenApprovals;\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n\\n    }\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    function _totalMinted() internal view returns (uint256) {\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n    \\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n \\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex &&\\n            !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    \\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        \\n        _approve(address(0), tokenId, from);\\n\\n        \\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                \\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n        _approve(address(0), tokenId, from);\\n\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            \\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                \\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\\n///// **  Teddygang.sol ** \\n\\npragma solidity ^0.8.4;\\n\\nerror NormalSaleNotActive();\\nerror WhitelistNotActive();\\nerror ExceededLimit();\\nerror NotEnoughTokensLeft();\\nerror WrongEther();\\nerror InvalidMerkle();\\nerror WhitelistUsed();\\n\\ncontract Teddygang is ERC721A, Ownable, ReentrancyGuard {\\n    using Address for address;\\n    using Strings for uint256;\\n    using MerkleProof for bytes32[];\\n\\n    address proxyRegistryAddress;\\n\\n    bytes32 public merkleRoot; // 0xabcd1234\\n    uint256 public maxMints = 5;\\n    uint256 public maxSupply = 10000;\\n    uint256 public mintRate = 0.25 ether;\\n    uint256 public whitelistMintRate = 0.20 ether;\\n    string public notRevealedUri = 'ipfs://QmNZe8r679SB5SUEjqBgb7hHK7d74Ab4SSqQ6j3cVwqyVD/HiddenData.json';\\n    string public baseExtension = '.json';\\n    string public baseURI = ''; // ipfs://ID/\\n    bool public revealed = false;\\n    bool public whitelistSale = false;\\n    bool public normalSale = false;\\n    bool public paused = true;\\n\\n    mapping(address => uint256) public usedAddresses;\\n    constructor() ERC721A('Teddygang', 'TDYG') {}\\n\\n    function mint(uint256 quantity) external payable nonReentrant {\\n        if (!normalSale) revert NormalSaleNotActive();\\n        if (quantity + _numberMinted(msg.sender) > maxMints) {\\n            revert ExceededLimit();\\n        }\\n        if (totalSupply() + quantity > maxSupply) {\\n            revert NotEnoughTokensLeft();\\n        }\\n        if (mintRate * quantity != msg.value) {\\n            revert WrongEther();\\n        }\\n        _safeMint(msg.sender, quantity);\\n    }\\n\\n    function whitelistBuy(uint256 quantity, bytes32[] calldata proof) external payable nonReentrant {\\n        if (quantity > 2) revert ExceededLimit();\\n        if (whitelistMintRate * quantity != msg.value) {\\n            revert WrongEther();\\n        }\\n        if (usedAddresses[msg.sender] + quantity > 2) {\\n            revert WhitelistUsed();\\n        }\\n        if (!whitelistSale) revert WhitelistNotActive();\\n        if (totalSupply() + quantity > maxSupply) {\\n            revert NotEnoughTokensLeft();\\n        }\\n        if (!isWhiteListed(msg.sender, proof)) revert InvalidMerkle();\\n        usedAddresses[msg.sender] += quantity;\\n        _safeMint(msg.sender, quantity);\\n    }\\n\\n    function isWhiteListed(address _account, bytes32[] calldata _proof) internal view returns (bool) {\\n        return _verify(leaf(_account), _proof);\\n    }\\n\\n    function leaf(address _account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account));\\n    }\\n\\n    function _verify(bytes32 _leaf, bytes32[] memory _proof) internal view returns (bool) {\\n        return MerkleProof.verify(_proof, merkleRoot, _leaf);\\n    }\\n\\n    function setMerkleRoot(bytes32 _root) external onlyOwner {\\n        merkleRoot = _root;\\n    }\\n\\n    function batchRelease() public payable onlyOwner nonReentrant {\\n    (bool success, ) = payable(0x7C7eE9B249E62fd0DEfC000799eC66B2388C40DD).call{value: address(this).balance * 80 / 100}(\\\"\\\");\\n    require(success); // FOUNDERS \\n\\n        uint256 balance = address(this).balance / 2;\\n        require(payable(0xab63D5a5D5d7Bde58a332C9ACcFDE9Ba73713c53).send(balance)); // MARKETING\\n        require(payable(0xe601137a9cB37e4354e2531C35FEDFD460E63e0A).send(balance)); // REFERRAL\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\n        if (!revealed) {\\n            return notRevealedUri;\\n        }\\n\\n        string memory currentBaseURI = _baseURI();\\n        return\\n            bytes(currentBaseURI).length > 1\\n                ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))\\n                : '';\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\n        baseURI = _newBaseURI;\\n    }\\n\\n    function setNotRevealedURI(string memory _newURI) public onlyOwner {\\n        notRevealedUri = _newURI;\\n    }\\n\\n    function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\\n        baseExtension = _newBaseExtension;\\n    }\\n     \\n    function toggleReveal() public onlyOwner {\\n        revealed = !revealed;\\n    }\\n\\n    function toggleSale() public onlyOwner {\\n        normalSale = !normalSale;\\n    }\\n\\n    function toggleWhitelistSale() public onlyOwner {\\n        whitelistSale = !whitelistSale;\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {}\\n\\n    function setMintRate(uint256 _mintRate) public onlyOwner {\\n        mintRate = _mintRate;\\n    }\\n\\n    function setWhitelistMintRate(uint256 _mintRate) public onlyOwner {\\n        whitelistMintRate = _mintRate;\\n    }\\n\\n    function setMaxSupply(uint256 _newSupply) public onlyOwner {\\n        maxSupply = _newSupply;\\n    }\\n\\n    function setMaxMints(uint256 _newMaxMints) public onlyOwner {\\n        maxMints = _newMaxMints;\\n    }\\n    \\n    function pause(bool _state) public onlyOwner {\\n    paused = _state;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NormalSaleNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTokensLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhitelistNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhitelistUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongEther\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchRelease\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRevealedUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxMints\",\"type\":\"uint256\"}],\"name\":\"setMaxMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintRate\",\"type\":\"uint256\"}],\"name\":\"setMintRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintRate\",\"type\":\"uint256\"}],\"name\":\"setWhitelistMintRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWhitelistSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Teddygang", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}