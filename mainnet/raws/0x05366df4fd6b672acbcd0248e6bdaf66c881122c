{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.11;\r\n\r\n// TODO: need a correct interface here\r\ninterface IWrapped {\r\n  function deposit() external payable;\r\n\r\n  function withdraw(uint256 amount) external;\r\n}\r\n\r\n// File contracts/interfaces/IFibswap.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface IFibswap {\r\n  // ============= Structs =============\r\n  /**\r\n   * @notice Contains the external call information\r\n   * @dev Used to create a hash to pass the external call information through the bridge\r\n   * @param to - The address that should receive the funds on the destination domain if no call is\r\n   * specified, or the fallback if an external call fails\r\n   * @param callData - The data to execute on the receiving chain\r\n   */\r\n  struct ExternalCall {\r\n    address to;\r\n    bytes data;\r\n  }\r\n\r\n  /**\r\n   * @notice These are the call parameters that will remain constant between the\r\n   * two chains. They are supplied on `xcall` and should be asserted on `execute`\r\n   * @property to - The account that receives funds, in the event of a crosschain call,\r\n   * will receive funds if the call fails.\r\n   * @param to - The address you are sending funds (and potentially data) to\r\n   * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\r\n   * @param origin - The originating chainId (i.e. where `xcall` is called).\r\n   * @param destination - The final chainId (i.e. where `execute` is called).\r\n   */\r\n  struct CallParams {\r\n    address router;\r\n    ExternalCall orgParam;\r\n    ExternalCall dstParam;\r\n    address recovery;\r\n    uint32 origin;\r\n    uint32 destination;\r\n    address orgLocalAsset;\r\n    address dstLocalAsset;\r\n    bool isEth;\r\n  }\r\n\r\n  /**\r\n   * @notice The arguments you supply to the `xcall` function called by user on origin domain\r\n   * @param params - The CallParams. These are consistent across sending and receiving chains\r\n   * @param transactingAssetId - The asset the caller sent with the transfer. Can be the adopted, canonical,\r\n   * or the representational asset\r\n   * @param amount - The amount of transferring asset the tx called xcall with\r\n   */\r\n  struct XCallArgs {\r\n    CallParams params;\r\n    address transactingAssetId; // Could be any token or native\r\n    uint256 amount;\r\n    uint256 localAmount;\r\n    uint256 relayerFee;\r\n    bool isExactInput;\r\n  }\r\n\r\n  /**\r\n   * @notice\r\n   * @param params - The CallParams. These are consistent across sending and receiving chains\r\n   * @param local - The local asset for the transfer, will be swapped to the adopted asset if\r\n   * appropriate\r\n   * @param router - The router who you are sending the funds on behalf of\r\n   * @param amount - The amount of liquidity the router provided or the bridge forwarded, depending on\r\n   * if fast liquidity was used\r\n   * @param feePercentage - The amount over the BASEFEE to tip the relayer\r\n   */\r\n  struct ExecuteArgs {\r\n    CallParams params;\r\n    address transactingAssetId;\r\n    uint256 amount;\r\n    uint256 nonce;\r\n    bytes routerSignature;\r\n    address originSender;\r\n  }\r\n  // ============ Events ============\r\n\r\n  event NewExecutor(address executor, address caller);\r\n\r\n  event NewFeePercent(uint256 feePercent, address caller);\r\n  /**\r\n   * @notice Emitted when a new swap AMM is added\r\n   * @param swapRouter - The address of the AMM\r\n   * @param approved - approved or removed\r\n   * @param caller - The account that called the function\r\n   */\r\n  event SwapRouterUpdated(address swapRouter, bool approved, address caller);\r\n\r\n  /**\r\n   * @notice Emitted when a new asset is added\r\n   * @param localAsset - The address of the local asset (USDC, USDT, WETH)\r\n   * @param caller - The account that called the function\r\n   */\r\n  event AssetAdded(address localAsset, address caller);\r\n\r\n  /**\r\n   * @notice Emitted when an asset is removed from whitelists\r\n   * @param localAsset - The address of the local asset (USDC, USDT, WETH)\r\n   * @param caller - The account that called the function\r\n   */\r\n  event AssetRemoved(address localAsset, address caller);\r\n\r\n  /**\r\n   * @notice Emitted when a router withdraws liquidity from the contract\r\n   * @param router - The router you are removing liquidity from\r\n   * @param to - The address the funds were withdrawn to\r\n   * @param local - The address of the token withdrawn\r\n   * @param amount - The amount of liquidity withdrawn\r\n   * @param caller - The account that called the function\r\n   */\r\n  event LiquidityRemoved(address indexed router, address to, address local, uint256 amount, address caller);\r\n\r\n  /**\r\n   * @notice Emitted when a router adds liquidity to the contract\r\n   * @param router - The address of the router the funds were credited to\r\n   * @param local - The address of the token added (all liquidity held in local asset)\r\n   * @param amount - The amount of liquidity added\r\n   * @param caller - The account that called the function\r\n   */\r\n  event LiquidityAdded(address indexed router, address local, uint256 amount, address caller);\r\n\r\n  /**\r\n   * @notice Emitted when `xcall` is called on the origin domain\r\n   * @param transferId - The unique identifier of the crosschain transfer\r\n   * @param params - The CallParams provided to the function\r\n   * @param transactingAsset - The asset the caller sent with the transfer. Can be the adopted, canonical,\r\n   * or the representational asset\r\n   * @param localAsset - The asset sent over the bridge. Will be the local asset of nomad that corresponds\r\n   * to the provided `transactingAsset`\r\n   * @param transactingAmount - The amount of transferring asset the tx xcalled with\r\n   * @param localAmount - The amount sent over the bridge (initialAmount with slippage)\r\n   * @param nonce - The nonce of the origin domain contract. Used to create the unique identifier\r\n   * for the transfer\r\n   * @param caller - The account that called the function\r\n   */\r\n  event XCalled(\r\n    bytes32 indexed transferId,\r\n    CallParams params,\r\n    address transactingAsset,\r\n    address localAsset,\r\n    uint256 transactingAmount,\r\n    uint256 localAmount,\r\n    uint256 nonce,\r\n    uint256 relayerFee,\r\n    address caller\r\n  );\r\n\r\n  /**\r\n   * @notice Emitted when `execute` is called on the destination chain\r\n   * @dev `execute` may be called when providing fast liquidity *or* when processing a reconciled transfer\r\n   * @param transferId - The unique identifier of the crosschain transfer\r\n   * @param params - The CallParams provided to the function\r\n   * @param localAsset - The asset that was provided by the bridge\r\n   * @param transactingAsset - The asset the to gets or the external call is executed with. Should be the\r\n   * adopted asset on that chain.\r\n   * @param localAmount - The amount that was provided by the bridge\r\n   * @param transactingAmount - The amount of transferring asset the to address receives or the external call is\r\n   * executed with\r\n   * @param caller - The account that called the function\r\n   */\r\n  event Executed(\r\n    bytes32 indexed transferId,\r\n    CallParams params,\r\n    address localAsset,\r\n    address transactingAsset,\r\n    uint256 localAmount,\r\n    uint256 transactingAmount,\r\n    bytes routerSignature,\r\n    address originSender,\r\n    uint256 nonce,\r\n    address caller\r\n  );\r\n\r\n  // ============ Admin Functions ============\r\n\r\n  function initialize(\r\n    uint256 chainId,\r\n    address owner,\r\n    address wrapper\r\n  ) external;\r\n\r\n  function setupRouter(\r\n    address router,\r\n    address owner,\r\n    address recipient\r\n  ) external;\r\n\r\n  function removeRouter(address router) external;\r\n\r\n  function removeAssetId(address localAsset) external;\r\n\r\n  // ============ Public Functions ===========\r\n\r\n  function addLiquidityFor(\r\n    uint256 amount,\r\n    address local,\r\n    address router\r\n  ) external payable;\r\n\r\n  function addLiquidity(uint256 amount, address local) external payable;\r\n\r\n  function removeLiquidity(\r\n    uint256 amount,\r\n    address local,\r\n    address payable to\r\n  ) external;\r\n\r\n  function xcall(XCallArgs calldata _args) external payable returns (bytes32);\r\n\r\n  function execute(ExecuteArgs calldata _args) external returns (bytes32);\r\n}\r\n\r\n// File contracts/interfaces/IExecutor.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface IExecutor {\r\n  event Executed(\r\n    bytes32 indexed transferId,\r\n    address indexed to,\r\n    address recovery,\r\n    address assetId,\r\n    uint256 amount,\r\n    bytes callData,\r\n    bool success\r\n  );\r\n\r\n  function getFibswap() external returns (address);\r\n\r\n  function execute(\r\n    bytes32 _transferId,\r\n    uint256 _amount,\r\n    address payable _to,\r\n    address payable _recovery,\r\n    address _assetId,\r\n    bytes calldata _callData\r\n  ) external payable returns (bool success);\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n   *\r\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n   * constructor.\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize/address.code.length, which returns 0\r\n    // for contracts in construction, since the code is only stored at the end\r\n    // of the constructor execution.\r\n\r\n    return account.code.length > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    (bool success, ) = recipient.call{value: amount}(\"\");\r\n    require(success, \"Address: unable to send value, recipient may have reverted\");\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain `call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n    return verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n    return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n   * revert reason using the provided one.\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) internal pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `to`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `from` to `to` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n  using AddressUpgradeable for address;\r\n\r\n  function safeTransfer(\r\n    IERC20Upgradeable token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20Upgradeable token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  /**\r\n   * @dev Deprecated. This function has issues similar to the ones found in\r\n   * {IERC20-approve}, and its usage is discouraged.\r\n   *\r\n   * Whenever possible, use {safeIncreaseAllowance} and\r\n   * {safeDecreaseAllowance} instead.\r\n   */\r\n  function safeApprove(\r\n    IERC20Upgradeable token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    // safeApprove should only be called when setting an initial allowance,\r\n    // or when resetting it to zero. To increase and decrease it, use\r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    require(\r\n      (value == 0) || (token.allowance(address(this), spender) == 0),\r\n      \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n    );\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20Upgradeable token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20Upgradeable token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    unchecked {\r\n      uint256 oldAllowance = token.allowance(address(this), spender);\r\n      require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n      uint256 newAllowance = oldAllowance - value;\r\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   */\r\n  function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n    // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n    bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n  }\r\n}\r\n\r\n// File contracts/interpreters/Executor.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @title Executor\r\n * @author Connext <support@fibswap.network>\r\n * @notice This library contains an `execute` function that is callabale by\r\n * an associated Connext contract. This is used to execute\r\n * arbitrary calldata on a receiving chain.\r\n */\r\ncontract Executor is IExecutor {\r\n  // ============ Properties =============\r\n\r\n  address private immutable fibswap;\r\n\r\n  // ============ Constructor =============\r\n\r\n  constructor(address _fibswap) {\r\n    fibswap = _fibswap;\r\n  }\r\n\r\n  // ============ Modifiers =============\r\n\r\n  /**\r\n   * @notice Errors if the sender is not Connext\r\n   */\r\n  modifier onlyFibswap() {\r\n    require(msg.sender == fibswap, \"!fibswap\");\r\n    _;\r\n  }\r\n\r\n  // ============ Public Functions =============\r\n\r\n  /**\r\n   * @notice Returns the connext contract address (only address that can\r\n   * call the `execute` function)\r\n   * @return The address of the associated connext contract\r\n   */\r\n  function getFibswap() external view override returns (address) {\r\n    return fibswap;\r\n  }\r\n\r\n  /**\r\n   * @notice Executes some arbitrary call data on a given address. The\r\n   * call data executes can be payable, and will have `amount` sent\r\n   * along with the function (or approved to the contract). If the\r\n   * call fails, rather than reverting, funds are sent directly to\r\n   * some provided fallback address\r\n   * @param _transferId Unique identifier of transaction id that necessitated\r\n   * calldata execution\r\n   * @param _amount The amount to approve or send with the call\r\n   * @param _to The address to execute the calldata on\r\n   * @param _assetId The assetId of the funds to approve to the contract or\r\n   * send along with the call\r\n   * @param _callData The data to execute\r\n   */\r\n  function execute(\r\n    bytes32 _transferId,\r\n    uint256 _amount,\r\n    address payable _to,\r\n    address payable _recovery,\r\n    address _assetId,\r\n    bytes calldata _callData\r\n  ) external payable override onlyFibswap returns (bool) {\r\n    // If it is not ether, approve the callTo\r\n    // We approve here rather than transfer since many external contracts\r\n    // simply require an approval, and it is unclear if they can handle\r\n    // funds transferred directly to them (i.e. Uniswap)\r\n    bool isNative = _assetId == address(0);\r\n\r\n    // Check if the callTo is a contract\r\n    bool success;\r\n    if (!AddressUpgradeable.isContract(_to)) {\r\n      _handleFailure(isNative, false, _assetId, _to, _recovery, _amount);\r\n      // Emit event\r\n      emit Executed(_transferId, _to, _recovery, _assetId, _amount, _callData, success);\r\n      return success;\r\n    }\r\n\r\n    if (!isNative) {\r\n      SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable(_assetId), _to, _amount);\r\n    }\r\n\r\n    // Try to execute the callData\r\n    // the low level call will return `false` if its execution reverts\r\n    (success, ) = _to.call{value: isNative ? _amount : 0}(_callData);\r\n\r\n    // Handle failure cases\r\n    if (!success) {\r\n      _handleFailure(isNative, true, _assetId, _to, _recovery, _amount);\r\n    }\r\n\r\n    // Emit event\r\n    emit Executed(_transferId, _to, _recovery, _assetId, _amount, _callData, success);\r\n    return success;\r\n  }\r\n\r\n  function _handleFailure(\r\n    bool isNative,\r\n    bool hasIncreased,\r\n    address _assetId,\r\n    address payable _to,\r\n    address payable _recovery,\r\n    uint256 _amount\r\n  ) private {\r\n    if (!isNative) {\r\n      // Decrease allowance\r\n      if (hasIncreased) {\r\n        SafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable(_assetId), _to, _amount);\r\n      }\r\n      // Transfer funds\r\n      SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_assetId), _recovery, _amount);\r\n    } else {\r\n      // Transfer funds\r\n      AddressUpgradeable.sendValue(_recovery, _amount);\r\n    }\r\n  }\r\n\r\n  receive() external payable {}\r\n}\r\n\r\n// File contracts/lib/Fibswap/RouterPermissionsLogic.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @notice Contains RouterPermissions related state\r\n * @param approvedRouters - Mapping of whitelisted router addresses\r\n * @param routerRecipients - Mapping of router withdraw recipient addresses.\r\n * If set, all liquidity is withdrawn only to this address. Must be set by routerOwner\r\n * (if configured) or the router itself\r\n * @param routerOwners - Mapping of router owners\r\n */\r\nstruct RouterPermissionsInfo {\r\n  mapping(address => bool) approvedRouters;\r\n  mapping(address => address) routerRecipients;\r\n  mapping(address => address) routerOwners;\r\n}\r\n\r\nlibrary RouterPermissionsLogic {\r\n  // ========== Custom Errors ===========\r\n  error RouterPermissionsLogic__setRouterRecipient_notNewRecipient();\r\n  error RouterPermissionsLogic__onlyRouterOwner_notRouterOwner();\r\n  error RouterPermissionsLogic__removeRouter_routerEmpty();\r\n  error RouterPermissionsLogic__removeRouter_notAdded();\r\n  error RouterPermissionsLogic__setupRouter_routerEmpty();\r\n  error RouterPermissionsLogic__setupRouter_amountIsZero();\r\n  error RouterPermissionsLogic__setRouterOwner_notNewOwner();\r\n\r\n  /**\r\n   * @notice Emitted when a new router is added\r\n   * @param router - The address of the added router\r\n   * @param caller - The account that called the function\r\n   */\r\n  event RouterAdded(address indexed router, address caller);\r\n\r\n  /**\r\n   * @notice Emitted when an existing router is removed\r\n   * @param router - The address of the removed router\r\n   * @param caller - The account that called the function\r\n   */\r\n  event RouterRemoved(address indexed router, address caller);\r\n\r\n  /**\r\n   * @notice Emitted when the recipient of router is updated\r\n   * @param router - The address of the added router\r\n   * @param prevRecipient  - The address of the previous recipient of the router\r\n   * @param newRecipient  - The address of the new recipient of the router\r\n   */\r\n  event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient);\r\n\r\n  /**\r\n   * @notice Emitted when the owner of router is accepted\r\n   * @param router - The address of the added router\r\n   * @param prevOwner  - The address of the previous owner of the router\r\n   * @param newOwner  - The address of the new owner of the router\r\n   */\r\n  event RouterOwnerUpdated(address indexed router, address indexed prevOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @notice Asserts caller is the router owner (if set) or the router itself\r\n   */\r\n  function _onlyRouterOwner(address _router, address _owner) internal view {\r\n    if (!((_owner == address(0) && msg.sender == _router) || _owner == msg.sender))\r\n      revert RouterPermissionsLogic__onlyRouterOwner_notRouterOwner();\r\n  }\r\n\r\n  // ============ Public methods =============\r\n\r\n  /**\r\n   * @notice Sets the designated recipient for a router\r\n   * @dev Router should only be able to set this once otherwise if router key compromised,\r\n   * no problem is solved since attacker could just update recipient\r\n   * @param router Router address to set recipient\r\n   * @param recipient Recipient Address to set to router\r\n   */\r\n  function setRouterRecipient(\r\n    address router,\r\n    address recipient,\r\n    RouterPermissionsInfo storage routerInfo\r\n  ) internal {\r\n    _onlyRouterOwner(router, routerInfo.routerOwners[router]);\r\n\r\n    // Check recipient is changing\r\n    address _prevRecipient = routerInfo.routerRecipients[router];\r\n    if (_prevRecipient == recipient) revert RouterPermissionsLogic__setRouterRecipient_notNewRecipient();\r\n\r\n    // Set new recipient\r\n    routerInfo.routerRecipients[router] = recipient;\r\n\r\n    // Emit event\r\n    emit RouterRecipientSet(router, _prevRecipient, recipient);\r\n  }\r\n\r\n  /**\r\n   * @notice Current owner or router may propose a new router owner\r\n   * @param router Router address to set recipient\r\n   * @param owner Owner Address to set to router\r\n   */\r\n  function setRouterOwner(\r\n    address router,\r\n    address owner,\r\n    RouterPermissionsInfo storage routerInfo\r\n  ) internal {\r\n    _onlyRouterOwner(router, routerInfo.routerOwners[router]);\r\n\r\n    // Check that proposed is different than current owner\r\n    if (_getRouterOwner(router, routerInfo.routerOwners) == owner)\r\n      revert RouterPermissionsLogic__setRouterOwner_notNewOwner();\r\n\r\n    // Emit event\r\n    emit RouterOwnerUpdated(router, routerInfo.routerOwners[router], owner);\r\n\r\n    // Update the current owner\r\n    routerInfo.routerOwners[router] = owner;\r\n  }\r\n\r\n  /**\r\n   * @notice Used to set router initial properties\r\n   * @param router Router address to setup\r\n   * @param owner Initial Owner of router\r\n   * @param recipient Initial Recipient of router\r\n   */\r\n  function setupRouter(\r\n    address router,\r\n    address owner,\r\n    address recipient,\r\n    RouterPermissionsInfo storage routerInfo\r\n  ) internal {\r\n    // Sanity check: not empty\r\n    if (router == address(0)) revert RouterPermissionsLogic__setupRouter_routerEmpty();\r\n\r\n    // Sanity check: needs approval\r\n    if (routerInfo.approvedRouters[router]) revert RouterPermissionsLogic__setupRouter_amountIsZero();\r\n\r\n    // Approve router\r\n    routerInfo.approvedRouters[router] = true;\r\n\r\n    // Emit event\r\n    emit RouterAdded(router, msg.sender);\r\n\r\n    // Update routerOwner (zero address possible)\r\n    if (owner != address(0)) {\r\n      routerInfo.routerOwners[router] = owner;\r\n      emit RouterOwnerUpdated(router, address(0), owner);\r\n    }\r\n\r\n    // Update router recipient\r\n    if (recipient != address(0)) {\r\n      routerInfo.routerRecipients[router] = recipient;\r\n      emit RouterRecipientSet(router, address(0), recipient);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Used to remove routers that can transact crosschain\r\n   * @param router Router address to remove\r\n   */\r\n  function removeRouter(address router, RouterPermissionsInfo storage routerInfo) internal {\r\n    // Sanity check: not empty\r\n    if (router == address(0)) revert RouterPermissionsLogic__removeRouter_routerEmpty();\r\n\r\n    // Sanity check: needs removal\r\n    if (!routerInfo.approvedRouters[router]) revert RouterPermissionsLogic__removeRouter_notAdded();\r\n\r\n    // Update mapping\r\n    routerInfo.approvedRouters[router] = false;\r\n\r\n    // Emit event\r\n    emit RouterRemoved(router, msg.sender);\r\n\r\n    // Remove router owner\r\n    address _owner = routerInfo.routerOwners[router];\r\n    if (_owner != address(0)) {\r\n      emit RouterOwnerUpdated(router, _owner, address(0));\r\n      routerInfo.routerOwners[router] = address(0);\r\n    }\r\n\r\n    // Remove router recipient\r\n    address _recipient = routerInfo.routerRecipients[router];\r\n    if (_recipient != address(0)) {\r\n      emit RouterRecipientSet(router, _recipient, address(0));\r\n      routerInfo.routerRecipients[router] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the router owner if it is set, or the router itself if not\r\n   */\r\n  function _getRouterOwner(address router, mapping(address => address) storage _routerOwners)\r\n    internal\r\n    view\r\n    returns (address)\r\n  {\r\n    address _owner = _routerOwners[router];\r\n    return _owner == address(0) ? router : _owner;\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   * @custom:oz-retyped-from bool\r\n   */\r\n  uint8 private _initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private _initializing;\r\n\r\n  /**\r\n   * @dev Triggered when the contract has been initialized or reinitialized.\r\n   */\r\n  event Initialized(uint8 version);\r\n\r\n  /**\r\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\r\n   */\r\n  modifier initializer() {\r\n    bool isTopLevelCall = _setInitializedVersion(1);\r\n    if (isTopLevelCall) {\r\n      _initializing = true;\r\n    }\r\n    _;\r\n    if (isTopLevelCall) {\r\n      _initializing = false;\r\n      emit Initialized(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n   * used to initialize parent contracts.\r\n   *\r\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\r\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\r\n   * initialization.\r\n   *\r\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n   * a contract, executing them in the right order is up to the developer or operator.\r\n   */\r\n  modifier reinitializer(uint8 version) {\r\n    bool isTopLevelCall = _setInitializedVersion(version);\r\n    if (isTopLevelCall) {\r\n      _initializing = true;\r\n    }\r\n    _;\r\n    if (isTopLevelCall) {\r\n      _initializing = false;\r\n      emit Initialized(version);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n   */\r\n  modifier onlyInitializing() {\r\n    require(_initializing, \"Initializable: contract is not initializing\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n   * through proxies.\r\n   */\r\n  function _disableInitializers() internal virtual {\r\n    _setInitializedVersion(type(uint8).max);\r\n  }\r\n\r\n  function _setInitializedVersion(uint8 version) private returns (bool) {\r\n    // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n    // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\r\n    // of initializers, because in other contexts the contract may have been reentered.\r\n    if (_initializing) {\r\n      require(\r\n        version == 1 && !AddressUpgradeable.isContract(address(this)),\r\n        \"Initializable: contract is already initialized\"\r\n      );\r\n      return false;\r\n    } else {\r\n      require(_initialized < version, \"Initializable: contract is already initialized\");\r\n      _initialized = version;\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\n// File contracts/RouterPermissionsManager.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @notice\r\n * This contract is designed to manage router access, meaning it maintains the\r\n * router recipients, owners, and the router whitelist itself. It does *not* manage router balances\r\n * as asset management is out of scope of this contract.\r\n *\r\n * As a router, there are three important permissions:\r\n * `router` - this is the address that will sign bids sent to the sequencer\r\n * `routerRecipient` - this is the address that receives funds when liquidity is withdrawn\r\n * `routerOwner` - this is the address permitted to update recipients and propose new owners\r\n *\r\n * In cases where the owner is not set, the caller should be the `router` itself. In cases where the\r\n * `routerRecipient` is not set, the funds can be removed to anywhere.\r\n *\r\n * When setting a new `routerOwner`, the current owner (or router) must create a proposal, which\r\n * can be accepted by the proposed owner after the delay period. If the proposed owner is the empty\r\n * address, then it must be accepted by the current owner.\r\n */\r\nabstract contract RouterPermissionsManager is Initializable {\r\n  // ============ Private storage =============\r\n\r\n  uint256 private _delay;\r\n\r\n  // ============ Public Storage =============\r\n\r\n  RouterPermissionsInfo internal routerInfo;\r\n\r\n  // ============ Initialize =============\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial\r\n   */\r\n  function __RouterPermissionsManager_init() internal onlyInitializing {\r\n    __RouterPermissionsManager_init_unchained();\r\n  }\r\n\r\n  function __RouterPermissionsManager_init_unchained() internal onlyInitializing {\r\n    _delay = 7 days;\r\n  }\r\n\r\n  // ============ Public methods =============\r\n\r\n  function approvedRouters(address _router) public view returns (bool) {\r\n    return routerInfo.approvedRouters[_router];\r\n  }\r\n\r\n  function routerRecipients(address _router) public view returns (address) {\r\n    return routerInfo.routerRecipients[_router] == address(0) ? _router : routerInfo.routerRecipients[_router];\r\n  }\r\n\r\n  function routerOwners(address _router) public view returns (address) {\r\n    return routerInfo.routerOwners[_router] == address(0) ? _router : routerInfo.routerOwners[_router];\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the designated recipient for a router\r\n   * @dev Router should only be able to set this once otherwise if router key compromised,\r\n   * no problem is solved since attacker could just update recipient\r\n   * @param router Router address to set recipient\r\n   * @param recipient Recipient Address to set to router\r\n   */\r\n  function setRouterRecipient(address router, address recipient) external {\r\n    RouterPermissionsLogic.setRouterRecipient(router, recipient, routerInfo);\r\n  }\r\n\r\n  /**\r\n   * @notice Current owner or router may propose a new router owner\r\n   * @param router Router address to set recipient\r\n   * @param owner Proposed owner Address to set to router\r\n   */\r\n  function setRouterOwner(address router, address owner) external {\r\n    RouterPermissionsLogic.setRouterOwner(router, owner, routerInfo);\r\n  }\r\n\r\n  // ============ Private methods =============\r\n\r\n  /**\r\n   * @notice Used to set router initial properties\r\n   * @param router Router address to setup\r\n   * @param owner Initial Owner of router\r\n   * @param recipient Initial Recipient of router\r\n   */\r\n  function _setupRouter(\r\n    address router,\r\n    address owner,\r\n    address recipient\r\n  ) internal {\r\n    RouterPermissionsLogic.setupRouter(router, owner, recipient, routerInfo);\r\n  }\r\n\r\n  /**\r\n   * @notice Used to remove routers that can transact crosschain\r\n   * @param router Router address to remove\r\n   */\r\n  function _removeRouter(address router) internal {\r\n    RouterPermissionsLogic.removeRouter(router, routerInfo);\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n  bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n   */\r\n  function toString(uint256 value) internal pure returns (string memory) {\r\n    // Inspired by OraclizeAPI's implementation - MIT licence\r\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n    if (value == 0) {\r\n      return \"0\";\r\n    }\r\n    uint256 temp = value;\r\n    uint256 digits;\r\n    while (temp != 0) {\r\n      digits++;\r\n      temp /= 10;\r\n    }\r\n    bytes memory buffer = new bytes(digits);\r\n    while (value != 0) {\r\n      digits -= 1;\r\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n      value /= 10;\r\n    }\r\n    return string(buffer);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n   */\r\n  function toHexString(uint256 value) internal pure returns (string memory) {\r\n    if (value == 0) {\r\n      return \"0x00\";\r\n    }\r\n    uint256 temp = value;\r\n    uint256 length = 0;\r\n    while (temp != 0) {\r\n      length++;\r\n      temp >>= 8;\r\n    }\r\n    return toHexString(value, length);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n   */\r\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n    bytes memory buffer = new bytes(2 * length + 2);\r\n    buffer[0] = \"0\";\r\n    buffer[1] = \"x\";\r\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n      value >>= 4;\r\n    }\r\n    require(value == 0, \"Strings: hex length insufficient\");\r\n    return string(buffer);\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSAUpgradeable {\r\n  enum RecoverError {\r\n    NoError,\r\n    InvalidSignature,\r\n    InvalidSignatureLength,\r\n    InvalidSignatureS,\r\n    InvalidSignatureV\r\n  }\r\n\r\n  function _throwError(RecoverError error) private pure {\r\n    if (error == RecoverError.NoError) {\r\n      return; // no error: do nothing\r\n    } else if (error == RecoverError.InvalidSignature) {\r\n      revert(\"ECDSA: invalid signature\");\r\n    } else if (error == RecoverError.InvalidSignatureLength) {\r\n      revert(\"ECDSA: invalid signature length\");\r\n    } else if (error == RecoverError.InvalidSignatureS) {\r\n      revert(\"ECDSA: invalid signature 's' value\");\r\n    } else if (error == RecoverError.InvalidSignatureV) {\r\n      revert(\"ECDSA: invalid signature 'v' value\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address that signed a hashed message (`hash`) with\r\n   * `signature` or error string. This address can then be used for verification purposes.\r\n   *\r\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n   * this function rejects them by requiring the `s` value to be in the lower\r\n   * half order, and the `v` value to be either 27 or 28.\r\n   *\r\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n   * verification to be secure: it is possible to craft signatures that\r\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n   * this is by receiving a hash of the original message (which may otherwise\r\n   * be too long), and then calling {toEthSignedMessageHash} on it.\r\n   *\r\n   * Documentation for signature generation:\r\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n    // Check the signature length\r\n    // - case 65: r,s,v signature (standard)\r\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n    if (signature.length == 65) {\r\n      bytes32 r;\r\n      bytes32 s;\r\n      uint8 v;\r\n      // ecrecover takes the signature parameters, and the only way to get them\r\n      // currently is to use assembly.\r\n      assembly {\r\n        r := mload(add(signature, 0x20))\r\n        s := mload(add(signature, 0x40))\r\n        v := byte(0, mload(add(signature, 0x60)))\r\n      }\r\n      return tryRecover(hash, v, r, s);\r\n    } else if (signature.length == 64) {\r\n      bytes32 r;\r\n      bytes32 vs;\r\n      // ecrecover takes the signature parameters, and the only way to get them\r\n      // currently is to use assembly.\r\n      assembly {\r\n        r := mload(add(signature, 0x20))\r\n        vs := mload(add(signature, 0x40))\r\n      }\r\n      return tryRecover(hash, r, vs);\r\n    } else {\r\n      return (address(0), RecoverError.InvalidSignatureLength);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address that signed a hashed message (`hash`) with\r\n   * `signature`. This address can then be used for verification purposes.\r\n   *\r\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n   * this function rejects them by requiring the `s` value to be in the lower\r\n   * half order, and the `v` value to be either 27 or 28.\r\n   *\r\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n   * verification to be secure: it is possible to craft signatures that\r\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n   * this is by receiving a hash of the original message (which may otherwise\r\n   * be too long), and then calling {toEthSignedMessageHash} on it.\r\n   */\r\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n    _throwError(error);\r\n    return recovered;\r\n  }\r\n\r\n  /**\r\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n   *\r\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function tryRecover(\r\n    bytes32 hash,\r\n    bytes32 r,\r\n    bytes32 vs\r\n  ) internal pure returns (address, RecoverError) {\r\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n    return tryRecover(hash, v, r, s);\r\n  }\r\n\r\n  /**\r\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n   *\r\n   * _Available since v4.2._\r\n   */\r\n  function recover(\r\n    bytes32 hash,\r\n    bytes32 r,\r\n    bytes32 vs\r\n  ) internal pure returns (address) {\r\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n    _throwError(error);\r\n    return recovered;\r\n  }\r\n\r\n  /**\r\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n   * `r` and `s` signature fields separately.\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function tryRecover(\r\n    bytes32 hash,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) internal pure returns (address, RecoverError) {\r\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n    // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n    //\r\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n    // these malleable signatures as well.\r\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n      return (address(0), RecoverError.InvalidSignatureS);\r\n    }\r\n    if (v != 27 && v != 28) {\r\n      return (address(0), RecoverError.InvalidSignatureV);\r\n    }\r\n\r\n    // If the signature is valid (and not malleable), return the signer address\r\n    address signer = ecrecover(hash, v, r, s);\r\n    if (signer == address(0)) {\r\n      return (address(0), RecoverError.InvalidSignature);\r\n    }\r\n\r\n    return (signer, RecoverError.NoError);\r\n  }\r\n\r\n  /**\r\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n   * `r` and `s` signature fields separately.\r\n   */\r\n  function recover(\r\n    bytes32 hash,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) internal pure returns (address) {\r\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n    _throwError(error);\r\n    return recovered;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n   * produces hash corresponding to the one signed with the\r\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n   * JSON-RPC method as part of EIP-191.\r\n   *\r\n   * See {recover}.\r\n   */\r\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n   * produces hash corresponding to the one signed with the\r\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n   * JSON-RPC method as part of EIP-191.\r\n   *\r\n   * See {recover}.\r\n   */\r\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an Ethereum Signed Typed Data, created from a\r\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n   * to the one signed with the\r\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n   * JSON-RPC method as part of EIP-712.\r\n   *\r\n   * See {recover}.\r\n   */\r\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n  }\r\n}\r\n\r\n// File contracts/lib/Fibswap/FibswapUtils.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\nlibrary FibswapUtils {\r\n  error FibswapUtils__handleIncomingAsset_notAmount();\r\n  error FibswapUtils__handleIncomingAsset_ethWithErcTransfer();\r\n  error FibswapUtils__transferAssetFromContract_notNative();\r\n\r\n  /**\r\n   * @notice Gets unique identifier from nonce + domain\r\n   * @param _nonce - The nonce of the contract\r\n   * @param _params - The call params of the transfer\r\n   * @return The transfer id\r\n   */\r\n  function getTransferId(\r\n    uint256 _nonce,\r\n    address _sender,\r\n    IFibswap.CallParams calldata _params,\r\n    uint256 _amount\r\n  ) internal pure returns (bytes32) {\r\n    return keccak256(abi.encode(_nonce, _sender, _params, _amount));\r\n  }\r\n\r\n  /**\r\n   * @notice Holds the logic to recover the signer from an encoded payload.\r\n   * @dev Will hash and convert to an eth signed message.\r\n   * @param _encoded The payload that was signed\r\n   * @param _sig The signature you are recovering the signer from\r\n   */\r\n  function recoverSignature(bytes memory _encoded, bytes calldata _sig) internal pure returns (address) {\r\n    // Recover\r\n    return ECDSAUpgradeable.recover(ECDSAUpgradeable.toEthSignedMessageHash(keccak256(_encoded)), _sig);\r\n  }\r\n\r\n  /**\r\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\r\n   * @dev If using the native asset, will automatically wrap\r\n   * @param _assetId - The address to transfer\r\n   * @param _assetAmount - The specified amount to transfer. May not be the\r\n   * actual amount transferred (i.e. fee on transfer tokens)\r\n   * @param _relayerFee - The fee amount in native asset included as part of the transaction that\r\n   * should not be considered for the transfer amount.\r\n   * @return The assetId of the transferred asset\r\n   * @return The amount of the asset that was seen by the contract (may not be the specifiedAmount\r\n   * if the token is a fee-on-transfer token)\r\n   */\r\n  function handleIncomingAsset(\r\n    address _assetId,\r\n    uint256 _assetAmount,\r\n    uint256 _relayerFee,\r\n    address _router,\r\n    IWrapped _wrapper\r\n  ) internal returns (address, uint256) {\r\n    uint256 trueAmount = _assetAmount;\r\n\r\n    if (_assetId == address(0)) {\r\n      if (msg.value != _assetAmount + _relayerFee) revert FibswapUtils__handleIncomingAsset_notAmount();\r\n\r\n      // When transferring native asset to the contract, always make sure that the\r\n      // asset is properly wrapped\r\n      _wrapper.deposit{value: _assetAmount}();\r\n      _assetId = address(_wrapper);\r\n    } else {\r\n      if (msg.value != _relayerFee) revert FibswapUtils__handleIncomingAsset_ethWithErcTransfer();\r\n\r\n      // Transfer asset to contract\r\n      trueAmount = transferAssetToContract(_assetId, _assetAmount);\r\n    }\r\n\r\n    if (_relayerFee > 0) {\r\n      AddressUpgradeable.sendValue(payable(_router), _relayerFee);\r\n    }\r\n\r\n    return (_assetId, trueAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\r\n   * @dev If using the native asset, will automatically wrap\r\n   * @param _assetId - The address to transfer\r\n   * @param _specifiedAmount - The specified amount to transfer. May not be the\r\n   * actual amount transferred (i.e. fee on transfer tokens)\r\n   * @return The amount of the asset that was seen by the contract (may not be the specifiedAmount\r\n   * if the token is a fee-on-transfer token)\r\n   */\r\n  function transferAssetToContract(address _assetId, uint256 _specifiedAmount) internal returns (uint256) {\r\n    // Validate correct amounts are transferred\r\n    uint256 starting = IERC20Upgradeable(_assetId).balanceOf(address(this));\r\n    SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(_assetId), msg.sender, address(this), _specifiedAmount);\r\n    // Calculate the *actual* amount that was sent here\r\n    uint256 trueAmount = IERC20Upgradeable(_assetId).balanceOf(address(this)) - starting;\r\n\r\n    return trueAmount;\r\n  }\r\n\r\n  /**\r\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\r\n   * @dev If using the native asset, will automatically unwrap\r\n   * @param _assetId - The address to transfer\r\n   * @param _to - The account that will receive the withdrawn funds\r\n   * @param _amount - The amount to withdraw from contract\r\n   * @param _wrapper - The address of the wrapper for the native asset on this domain\r\n   * @return The address of asset received post-swap\r\n   */\r\n  function transferAssetFromContract(\r\n    address _assetId,\r\n    address _to,\r\n    uint256 _amount,\r\n    bool _convertToEth,\r\n    IWrapped _wrapper\r\n  ) internal returns (address) {\r\n    // No native assets should ever be stored on this contract\r\n    if (_assetId == address(0)) revert FibswapUtils__transferAssetFromContract_notNative();\r\n\r\n    if (_assetId == address(_wrapper) && _convertToEth) {\r\n      // If dealing with wrapped assets, make sure they are properly unwrapped\r\n      // before sending from contract\r\n      _wrapper.withdraw(_amount);\r\n      AddressUpgradeable.sendValue(payable(_to), _amount);\r\n      return address(0);\r\n    } else {\r\n      // Transfer ERC20 asset\r\n      SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_assetId), _to, _amount);\r\n      return _assetId;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Swaps an adopted asset to the local (representation or canonical) nomad asset\r\n   * @dev Will not swap if the asset passed in is the local asset\r\n   * @param _asset - The address of the adopted asset to swap into the local asset\r\n   * @param _amount - The amount of the adopted asset to swap\r\n   * @return The amount of local asset received from swap\r\n   */\r\n  function swapToLocalAssetIfNeeded(\r\n    address _local,\r\n    address _asset,\r\n    uint256 _amount,\r\n    IFibswap.ExternalCall calldata _callParam\r\n  ) internal returns (uint256) {\r\n    if (_local == _asset) {\r\n      return _amount;\r\n    }\r\n\r\n    // Approve pool\r\n    SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_asset), _callParam.to, _amount);\r\n\r\n    // Swap the asset to the proper local asset\r\n    IERC20Upgradeable Transit = IERC20Upgradeable(_local);\r\n\r\n    uint256 balanceBefore = Transit.balanceOf(address(this));\r\n    AddressUpgradeable.functionCall(_callParam.to, _callParam.data);\r\n\r\n    uint256 balanceDif = Transit.balanceOf(address(this)) - balanceBefore;\r\n\r\n    return balanceDif;\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\r\n * proxy whose upgrades are fully controlled by the current implementation.\r\n */\r\ninterface IERC1822ProxiableUpgradeable {\r\n  /**\r\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\r\n   * address.\r\n   *\r\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n   * function revert if invoked through a proxy.\r\n   */\r\n  function proxiableUUID() external view returns (bytes32);\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeaconUpgradeable {\r\n  /**\r\n   * @dev Must return an address that can be used as a delegate call target.\r\n   *\r\n   * {BeaconProxy} will check that this address is a contract.\r\n   */\r\n  function implementation() external view returns (address);\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n  struct AddressSlot {\r\n    address value;\r\n  }\r\n\r\n  struct BooleanSlot {\r\n    bool value;\r\n  }\r\n\r\n  struct Bytes32Slot {\r\n    bytes32 value;\r\n  }\r\n\r\n  struct Uint256Slot {\r\n    uint256 value;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n   */\r\n  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n    assembly {\r\n      r.slot := slot\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n   */\r\n  function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n    assembly {\r\n      r.slot := slot\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n   */\r\n  function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n    assembly {\r\n      r.slot := slot\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n   */\r\n  function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n    assembly {\r\n      r.slot := slot\r\n    }\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\r\n  function __ERC1967Upgrade_init() internal onlyInitializing {}\r\n\r\n  function __ERC1967Upgrade_init_unchained() internal onlyInitializing {}\r\n\r\n  // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n  bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Returns the current implementation address.\r\n   */\r\n  function _getImplementation() internal view returns (address) {\r\n    return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n  }\r\n\r\n  /**\r\n   * @dev Stores a new address in the EIP1967 implementation slot.\r\n   */\r\n  function _setImplementation(address newImplementation) private {\r\n    require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n    StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n  }\r\n\r\n  /**\r\n   * @dev Perform implementation upgrade\r\n   *\r\n   * Emits an {Upgraded} event.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Perform implementation upgrade with additional setup call.\r\n   *\r\n   * Emits an {Upgraded} event.\r\n   */\r\n  function _upgradeToAndCall(\r\n    address newImplementation,\r\n    bytes memory data,\r\n    bool forceCall\r\n  ) internal {\r\n    _upgradeTo(newImplementation);\r\n    if (data.length > 0 || forceCall) {\r\n      _functionDelegateCall(newImplementation, data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n   *\r\n   * Emits an {Upgraded} event.\r\n   */\r\n  function _upgradeToAndCallUUPS(\r\n    address newImplementation,\r\n    bytes memory data,\r\n    bool forceCall\r\n  ) internal {\r\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\r\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\r\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\r\n    if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\r\n      _setImplementation(newImplementation);\r\n    } else {\r\n      try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\r\n        require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\r\n      } catch {\r\n        revert(\"ERC1967Upgrade: new implementation is not UUPS\");\r\n      }\r\n      _upgradeToAndCall(newImplementation, data, forceCall);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Emitted when the admin account has changed.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Returns the current admin.\r\n   */\r\n  function _getAdmin() internal view returns (address) {\r\n    return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\r\n  }\r\n\r\n  /**\r\n   * @dev Stores a new address in the EIP1967 admin slot.\r\n   */\r\n  function _setAdmin(address newAdmin) private {\r\n    require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n    StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   *\r\n   * Emits an {AdminChanged} event.\r\n   */\r\n  function _changeAdmin(address newAdmin) internal {\r\n    emit AdminChanged(_getAdmin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n   */\r\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n  /**\r\n   * @dev Emitted when the beacon is upgraded.\r\n   */\r\n  event BeaconUpgraded(address indexed beacon);\r\n\r\n  /**\r\n   * @dev Returns the current beacon.\r\n   */\r\n  function _getBeacon() internal view returns (address) {\r\n    return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\r\n  }\r\n\r\n  /**\r\n   * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n   */\r\n  function _setBeacon(address newBeacon) private {\r\n    require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n    require(\r\n      AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\r\n      \"ERC1967: beacon implementation is not a contract\"\r\n    );\r\n    StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n  }\r\n\r\n  /**\r\n   * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n   * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n   *\r\n   * Emits a {BeaconUpgraded} event.\r\n   */\r\n  function _upgradeBeaconToAndCall(\r\n    address newBeacon,\r\n    bytes memory data,\r\n    bool forceCall\r\n  ) internal {\r\n    _setBeacon(newBeacon);\r\n    emit BeaconUpgraded(newBeacon);\r\n    if (data.length > 0 || forceCall) {\r\n      _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\r\n    require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev This empty reserved space is put in place to allow future versions to add new\r\n   * variables without shifting down storage in the inheritance chain.\r\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n   */\r\n  uint256[50] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\r\n  function __UUPSUpgradeable_init() internal onlyInitializing {}\r\n\r\n  function __UUPSUpgradeable_init_unchained() internal onlyInitializing {}\r\n\r\n  /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\r\n  address private immutable __self = address(this);\r\n\r\n  /**\r\n   * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\r\n   * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\r\n   * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\r\n   * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\r\n   * fail.\r\n   */\r\n  modifier onlyProxy() {\r\n    require(address(this) != __self, \"Function must be called through delegatecall\");\r\n    require(_getImplementation() == __self, \"Function must be called through active proxy\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\r\n   * callable on the implementing contract but not through proxies.\r\n   */\r\n  modifier notDelegated() {\r\n    require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\r\n   * implementation. It is used to validate that the this implementation remains valid after an upgrade.\r\n   *\r\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n   * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\r\n   */\r\n  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\r\n    return _IMPLEMENTATION_SLOT;\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n   *\r\n   * Calls {_authorizeUpgrade}.\r\n   *\r\n   * Emits an {Upgraded} event.\r\n   */\r\n  function upgradeTo(address newImplementation) external virtual onlyProxy {\r\n    _authorizeUpgrade(newImplementation);\r\n    _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n   * encoded in `data`.\r\n   *\r\n   * Calls {_authorizeUpgrade}.\r\n   *\r\n   * Emits an {Upgraded} event.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\r\n    _authorizeUpgrade(newImplementation);\r\n    _upgradeToAndCallUUPS(newImplementation, data, true);\r\n  }\r\n\r\n  /**\r\n   * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n   * {upgradeTo} and {upgradeToAndCall}.\r\n   *\r\n   * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n   *\r\n   * ```solidity\r\n   * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n   * ```\r\n   */\r\n  function _authorizeUpgrade(address newImplementation) internal virtual;\r\n\r\n  /**\r\n   * @dev This empty reserved space is put in place to allow future versions to add new\r\n   * variables without shifting down storage in the inheritance chain.\r\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n   */\r\n  uint256[50] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n  function __Context_init() internal onlyInitializing {}\r\n\r\n  function __Context_init_unchained() internal onlyInitializing {}\r\n\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n\r\n  /**\r\n   * @dev This empty reserved space is put in place to allow future versions to add new\r\n   * variables without shifting down storage in the inheritance chain.\r\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n   */\r\n  uint256[50] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  function __Ownable_init() internal onlyInitializing {\r\n    __Ownable_init_unchained();\r\n  }\r\n\r\n  function __Ownable_init_unchained() internal onlyInitializing {\r\n    _transferOwnership(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _transferOwnership(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev This empty reserved space is put in place to allow future versions to add new\r\n   * variables without shifting down storage in the inheritance chain.\r\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n   */\r\n  uint256[49] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol@v4.6.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n  // Booleans are more expensive than uint256 or any type that takes up a full\r\n  // word because each write operation emits an extra SLOAD to first read the\r\n  // slot's contents, replace the bits taken up by the boolean, and then write\r\n  // back. This is the compiler's defense against contract upgrades and\r\n  // pointer aliasing, and it cannot be disabled.\r\n\r\n  // The values being non-zero value makes deployment a bit more expensive,\r\n  // but in exchange the refund on every call to nonReentrant will be lower in\r\n  // amount. Since refunds are capped to a percentage of the total\r\n  // transaction's gas, it is best to keep them low in cases like this one, to\r\n  // increase the likelihood of the full refund coming into effect.\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n\r\n  uint256 private _status;\r\n\r\n  function __ReentrancyGuard_init() internal onlyInitializing {\r\n    __ReentrancyGuard_init_unchained();\r\n  }\r\n\r\n  function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and making it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    // On the first call to nonReentrant, _notEntered will be true\r\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n    // Any calls to nonReentrant after this point will fail\r\n    _status = _ENTERED;\r\n\r\n    _;\r\n\r\n    // By storing the original value once again, a refund is triggered (see\r\n    // https://eips.ethereum.org/EIPS/eip-2200)\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  /**\r\n   * @dev This empty reserved space is put in place to allow future versions to add new\r\n   * variables without shifting down storage in the inheritance chain.\r\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n   */\r\n  uint256[49] private __gap;\r\n}\r\n\r\n// File contracts/Fibswap.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\ncontract Fibswap is\r\n  Initializable,\r\n  UUPSUpgradeable,\r\n  ReentrancyGuardUpgradeable,\r\n  OwnableUpgradeable,\r\n  RouterPermissionsManager,\r\n  IFibswap\r\n{\r\n  // ========== Custom Errors ===========\r\n\r\n  error Fibswap__removeAssetId_notAdded();\r\n  error Fibswap__removeLiquidity_recipientEmpty();\r\n  error Fibswap__removeLiquidity_amountIsZero();\r\n  error Fibswap__removeLiquidity_insufficientFunds();\r\n  error Fibswap__xcall_notSupportedAsset();\r\n  error Fibswap__xcall_wrongDomain();\r\n  error Fibswap__xcall_emptyTo();\r\n  error Fibswap__xcall_notGasFee();\r\n  error Fibswap__xcall_notApprovedRouter();\r\n  error Fibswap__xcall_invalidSwapRouer();\r\n  error Fibswap__xcall_tooSmallLocalAmount();\r\n  error Fibswap__execute_unapprovedRouter();\r\n  error Fibswap__execute_invalidRouterSignature();\r\n  error Fibswap__execute_alreadyExecuted();\r\n  error Fibswap__execute_incorrectDestination();\r\n  error Fibswap__addLiquidityForRouter_routerEmpty();\r\n  error Fibswap__addLiquidityForRouter_amountIsZero();\r\n  error Fibswap__addLiquidityForRouter_badRouter();\r\n  error Fibswap__addLiquidityForRouter_badAsset();\r\n  error Fibswap__addAssetId_alreadyAdded();\r\n  error Fibswap__addAssetIds_invalidArgs();\r\n  error Fibswap__decrementLiquidity_notEmpty();\r\n  error Fibswap__addSwapRouter_invalidArgs();\r\n  error Fibswap__addSwapRouter_invalidSwapRouterAddress();\r\n  error Fibswap__addSwapRouter_alreadyApproved();\r\n  error Fibswap__removeSwapRouter_invalidArgs();\r\n  error Fibswap__removeSwapRouter_alreadyRemoved();\r\n\r\n  // ============ Constants =============\r\n\r\n  bytes32 internal constant EMPTY = hex\"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\";\r\n\r\n  /// @dev Normal Service Fee percent\r\n  uint256 public constant PERCENTS_DIVIDER = 10000;\r\n\r\n  // ============ Properties ============\r\n\r\n  uint256 public chainId;\r\n  uint256 public nonce;\r\n  uint256 public feePercent;\r\n\r\n  IWrapped public wrapper;\r\n  IExecutor public executor;\r\n\r\n  // swap router address => approved?\r\n  mapping(address => bool) public swapRouters;\r\n  // local assetId => approved?\r\n  mapping(address => bool) public approvedAssets;\r\n  // rotuer address => local assetId => balance\r\n  mapping(address => mapping(address => uint256)) public routerBalances;\r\n\r\n  mapping(bytes32 => bool) public processed;\r\n\r\n  // ============ Modifiers ============\r\n\r\n  // ========== Initializer ============\r\n\r\n  function initialize(\r\n    uint256 _chainId,\r\n    address _owner,\r\n    address _wrapper\r\n  ) public override initializer {\r\n    __Ownable_init();\r\n    __ReentrancyGuard_init();\r\n    __RouterPermissionsManager_init();\r\n\r\n    transferOwnership(_owner);\r\n\r\n    nonce = 0;\r\n    chainId = _chainId;\r\n    wrapper = IWrapped(_wrapper);\r\n\r\n    feePercent = 300; // 3%\r\n  }\r\n\r\n  function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n  // ============ Owner Functions ============\r\n  /**\r\n   * @notice Owner can set  normal fee percent\r\n   * @param _percent normal fee percentage\r\n   **/\r\n  function setFeePercent(uint256 _percent) external onlyOwner {\r\n    require(_percent < PERCENTS_DIVIDER / 5, \"too big fee\");\r\n\r\n    feePercent = _percent;\r\n\r\n    // Emit event\r\n    emit NewFeePercent(_percent, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Owner can set  executor\r\n   * @param _executor new executor address\r\n   **/\r\n  function setExecutor(address _executor) external onlyOwner {\r\n    require(AddressUpgradeable.isContract(_executor), \"!contract\");\r\n\r\n    executor = IExecutor(_executor);\r\n\r\n    // Emit event\r\n    emit NewExecutor(_executor, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Used to set router initial properties\r\n   * @param router Router address to setup\r\n   * @param owner Initial Owner of router\r\n   * @param recipient Initial Recipient of router\r\n   */\r\n  function setupRouter(\r\n    address router,\r\n    address owner,\r\n    address recipient\r\n  ) external onlyOwner {\r\n    _setupRouter(router, owner, recipient);\r\n  }\r\n\r\n  /**\r\n   * @notice Used to remove routers that can transact crosschain\r\n   * @param router Router address to remove\r\n   */\r\n  function removeRouter(address router) external override onlyOwner {\r\n    _removeRouter(router);\r\n  }\r\n\r\n  /**\r\n   * @notice set swap routers\r\n   */\r\n  function addSwapRouter(address[] memory routers) external onlyOwner {\r\n    if (routers.length == 0) revert Fibswap__addSwapRouter_invalidArgs();\r\n    for (uint256 i = 0; i < routers.length; i++) {\r\n      _addSwapRouter(routers[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice remove swap router\r\n   */\r\n  function removeSwapRouter(address _swapRouter) external onlyOwner {\r\n    if (_swapRouter == address(0)) revert Fibswap__removeSwapRouter_invalidArgs();\r\n    if (!swapRouters[_swapRouter]) revert Fibswap__removeSwapRouter_alreadyRemoved();\r\n\r\n    swapRouters[_swapRouter] = false;\r\n\r\n    emit SwapRouterUpdated(_swapRouter, false, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Used to add supported assets. This is an admin only function\r\n   * @param localAssets - The assets to add\r\n   */\r\n  function addAssetIds(address[] memory localAssets) external onlyOwner {\r\n    if (localAssets.length == 0) revert Fibswap__addAssetIds_invalidArgs();\r\n    for (uint256 i = 0; i < localAssets.length; i++) {\r\n      _addAssetId(localAssets[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Used to remove assets from the whitelist\r\n   * @param localAssetId - Corresponding local asset to remove\r\n   */\r\n  function removeAssetId(address localAssetId) external override onlyOwner {\r\n    // Sanity check: already approval\r\n    if (!approvedAssets[localAssetId]) revert Fibswap__removeAssetId_notAdded();\r\n\r\n    // Update mapping\r\n    delete approvedAssets[localAssetId];\r\n\r\n    // Emit event\r\n    emit AssetRemoved(localAssetId, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Used to update wapped token address\r\n   * @param _wrapped - Wrapped asset address\r\n   */\r\n  function setWrapped(address _wrapped) external onlyOwner {\r\n    if (!AddressUpgradeable.isContract(_wrapped)) revert();\r\n\r\n    wrapper = IWrapped(_wrapped);\r\n  }\r\n\r\n  // ============ Public Functions ============\r\n\r\n  /**\r\n   * @notice This is used by anyone to increase a router's available liquidity for a given asset.\r\n   * @param amount - The amount of liquidity to add for the router\r\n   * @param local - The address of the asset you're adding liquidity for. If adding liquidity of the\r\n   * native asset, routers may use `address(0)` or the wrapped asset\r\n   * @param router The router you are adding liquidity on behalf of\r\n   */\r\n  function addLiquidityFor(\r\n    uint256 amount,\r\n    address local,\r\n    address router\r\n  ) external payable override nonReentrant {\r\n    _addLiquidityForRouter(amount, local, router);\r\n  }\r\n\r\n  /**\r\n   * @notice This is used by any router to increase their available liquidity for a given asset.\r\n   * @param amount - The amount of liquidity to add for the router\r\n   * @param local - The address of the asset you're adding liquidity for. If adding liquidity of the\r\n   * native asset, routers may use `address(0)` or the wrapped asset\r\n   */\r\n  function addLiquidity(uint256 amount, address local) external payable override nonReentrant {\r\n    _addLiquidityForRouter(amount, local, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice This is used by any router to decrease their available liquidity for a given asset.\r\n   * @param amount - The amount of liquidity to remove for the router\r\n   * @param local - The address of the asset you're removing liquidity from. If removing liquidity of the\r\n   * native asset, routers may use `address(0)` or the wrapped asset\r\n   * @param to The address that will receive the liquidity being removed\r\n   */\r\n  function removeLiquidity(\r\n    uint256 amount,\r\n    address local,\r\n    address payable to\r\n  ) external override nonReentrant {\r\n    // transfer to specicfied recipient IF recipient not set\r\n    address _recipient = routerRecipients(msg.sender);\r\n\r\n    // Sanity check: to is sensible\r\n    if (_recipient == address(0)) revert Fibswap__removeLiquidity_recipientEmpty();\r\n\r\n    // Sanity check: nonzero amounts\r\n    if (amount == 0) revert Fibswap__removeLiquidity_amountIsZero();\r\n\r\n    uint256 routerBalance = routerBalances[msg.sender][local];\r\n    // Sanity check: amount can be deducted for the router\r\n    if (routerBalance < amount) revert Fibswap__removeLiquidity_insufficientFunds();\r\n\r\n    // Update router balances\r\n    unchecked {\r\n      routerBalances[msg.sender][local] = routerBalance - amount;\r\n    }\r\n\r\n    // Transfer from contract to specified to\r\n    FibswapUtils.transferAssetFromContract(local, _recipient, amount, false, wrapper);\r\n\r\n    // Emit event\r\n    emit LiquidityRemoved(msg.sender, _recipient, local, amount, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice This function is called by a user who is looking to bridge funds\r\n   * @dev This contract must have approval to transfer the transacting assets. They are then swapped to\r\n   * the local assets via the configured AMM and sent over the bridge router.\r\n   * @param _args - The XCallArgs\r\n   * @return The transfer id of the crosschain transfer\r\n   */\r\n  function xcall(XCallArgs calldata _args) external payable override returns (bytes32) {\r\n    _xcallSanityChecks(_args);\r\n\r\n    // Transfer funds to the contract\r\n    (address _transactingAssetId, uint256 _amount) = FibswapUtils.handleIncomingAsset(\r\n      _args.transactingAssetId,\r\n      _args.amount,\r\n      _args.relayerFee,\r\n      _args.params.router,\r\n      wrapper\r\n    );\r\n\r\n    // Swap to the local asset from the adopted\r\n    address localAsset = _args.params.orgLocalAsset;\r\n    if (localAsset != _transactingAssetId) {\r\n      if (!swapRouters[_args.params.orgParam.to]) {\r\n        revert Fibswap__xcall_invalidSwapRouer();\r\n      }\r\n\r\n      _amount = FibswapUtils.swapToLocalAssetIfNeeded(localAsset, _transactingAssetId, _amount, _args.params.orgParam);\r\n    }\r\n\r\n    // check min Local Amount without Fee\r\n    uint256 bridgedAmount = _getTransferAmountWithoutFee(_amount, PERCENTS_DIVIDER - feePercent, PERCENTS_DIVIDER);\r\n    if (bridgedAmount < _args.localAmount) revert Fibswap__xcall_tooSmallLocalAmount();\r\n\r\n    if (!_args.isExactInput) {\r\n      bridgedAmount = _args.localAmount;\r\n    }\r\n\r\n    // send fee\r\n    FibswapUtils.transferAssetFromContract(localAsset, _args.params.router, _amount - bridgedAmount, true, wrapper);\r\n\r\n    // increase router balance\r\n    routerBalances[_args.params.router][localAsset] += bridgedAmount;\r\n\r\n    // Compute the transfer id\r\n    bytes32 _transferId = FibswapUtils.getTransferId(nonce, msg.sender, _args.params, bridgedAmount);\r\n\r\n    // Emit event\r\n    emit XCalled(\r\n      _transferId,\r\n      _args.params,\r\n      _transactingAssetId,\r\n      localAsset,\r\n      _args.amount,\r\n      bridgedAmount,\r\n      nonce,\r\n      _args.relayerFee,\r\n      msg.sender\r\n    );\r\n\r\n    // Update nonce\r\n    nonce++;\r\n\r\n    // Return the transfer id\r\n    return _transferId;\r\n  }\r\n\r\n  /**\r\n   * @notice This function is called on the destination chain when the bridged asset should be swapped\r\n   * into the adopted asset and the external call executed. Can be used before reconcile (when providing\r\n   * fast liquidity) or after reconcile (when using liquidity from the bridge)\r\n   * @dev Will store the `ExecutedTransfer` if fast liquidity is provided, or assert the hash of the\r\n   * `ReconciledTransfer` when using bridge liquidity\r\n   * @param _args - The `ExecuteArgs` for the transfer\r\n   * @return bytes32 The transfer id of the crosschain transfer\r\n   */\r\n  function execute(ExecuteArgs calldata _args) external override returns (bytes32) {\r\n    // Calculate the transfer id\r\n    bytes32 _transferId = _executeSanityChecks(_args);\r\n\r\n    address localAsset = _args.params.dstLocalAsset;\r\n    uint256 localAmount = _args.amount;\r\n\r\n    processed[_transferId] = true;\r\n\r\n    // Handle liquidity as needed\r\n    _decrementLiquidity(_transferId, localAmount, localAsset, _args.params.router);\r\n\r\n    address transactingAsset = localAsset;\r\n    if (keccak256(_args.params.dstParam.data) == EMPTY) {\r\n      // Send funds to the user\r\n      transactingAsset = FibswapUtils.transferAssetFromContract(\r\n        localAsset,\r\n        _args.params.dstParam.to,\r\n        localAmount,\r\n        _args.params.isEth,\r\n        wrapper\r\n      );\r\n    } else {\r\n      // Send funds to executor\r\n      transactingAsset = FibswapUtils.transferAssetFromContract(\r\n        localAsset,\r\n        address(executor),\r\n        localAmount,\r\n        _args.params.isEth,\r\n        wrapper\r\n      );\r\n      executor.execute(\r\n        _transferId,\r\n        localAmount,\r\n        payable(_args.params.dstParam.to),\r\n        payable(_args.params.recovery),\r\n        transactingAsset,\r\n        _args.params.dstParam.data\r\n      );\r\n    }\r\n\r\n    // Emit event\r\n    emit Executed(\r\n      _transferId,\r\n      _args.params,\r\n      localAsset,\r\n      transactingAsset,\r\n      localAmount,\r\n      localAmount,\r\n      _args.routerSignature,\r\n      _args.originSender,\r\n      _args.nonce,\r\n      msg.sender\r\n    );\r\n\r\n    return _transferId;\r\n  }\r\n\r\n  // ============ Private functions ============\r\n\r\n  /**\r\n   * @notice Contains the logic to verify + increment a given routers liquidity\r\n   * @dev The liquidity will be held in the local asset\r\n   * @param _amount - The amount of liquidity to add for the router\r\n   * @param _local - The address of the local asset\r\n   * @param _router - The router you are adding liquidity on behalf of\r\n   */\r\n  function _addLiquidityForRouter(\r\n    uint256 _amount,\r\n    address _local,\r\n    address _router\r\n  ) internal {\r\n    // Sanity check: router is sensible\r\n    if (_router == address(0)) revert Fibswap__addLiquidityForRouter_routerEmpty();\r\n\r\n    // Sanity check: nonzero amounts\r\n    if (_amount == 0) revert Fibswap__addLiquidityForRouter_amountIsZero();\r\n\r\n    // Router is approved\r\n    if (!approvedRouters(_router)) revert Fibswap__addLiquidityForRouter_badRouter();\r\n\r\n    // Transfer funds to coethWithErcTransferact\r\n    (address _assetId, uint256 _received) = FibswapUtils.handleIncomingAsset(_local, _amount, 0, _router, wrapper);\r\n\r\n    // Asset is approved\r\n    if (!approvedAssets[_assetId]) revert Fibswap__addLiquidityForRouter_badAsset();\r\n\r\n    // Update the router balances. Happens after pulling funds to account for\r\n    // the fee on transfer tokens\r\n    routerBalances[_router][_assetId] += _received;\r\n\r\n    // Emit event\r\n    emit LiquidityAdded(_router, _assetId, _received, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Used to add assets on same chain as contract that can be transferred.\r\n   * @param _localAsset - The used asset id (i.e. USDC, USDT, WETH, ETH)\r\n   */\r\n  function _addAssetId(address _localAsset) internal {\r\n    // Sanity check: needs approval\r\n    if (approvedAssets[_localAsset]) revert Fibswap__addAssetId_alreadyAdded();\r\n\r\n    // Update approved assets mapping\r\n    approvedAssets[_localAsset] = true;\r\n\r\n    // Emit event\r\n    emit AssetAdded(_localAsset, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Used to add an AMM for assets\r\n   * @param _swapRouter - The address of the amm to add\r\n   */\r\n  function _addSwapRouter(address _swapRouter) internal {\r\n    if (!AddressUpgradeable.isContract(_swapRouter)) revert Fibswap__addSwapRouter_invalidSwapRouterAddress();\r\n    if (swapRouters[_swapRouter]) revert Fibswap__addSwapRouter_alreadyApproved();\r\n\r\n    swapRouters[_swapRouter] = true;\r\n\r\n    emit SwapRouterUpdated(_swapRouter, true, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates transfer amount without Fee.\r\n   * @param _amount Transfer amount\r\n   * @param _liquidityFeeNum Liquidity fee numerator\r\n   * @param _liquidityFeeDen Liquidity fee denominator\r\n   */\r\n  function _getTransferAmountWithoutFee(\r\n    uint256 _amount,\r\n    uint256 _liquidityFeeNum,\r\n    uint256 _liquidityFeeDen\r\n  ) private pure returns (uint256) {\r\n    return (_amount * _liquidityFeeNum) / _liquidityFeeDen;\r\n  }\r\n\r\n  /**\r\n   * @notice Decrements router liquidity for the fast-liquidity case.\r\n   * @dev Stores the router that supplied liquidity to credit on reconcile\r\n   */\r\n  function _decrementLiquidity(\r\n    bytes32 _transferId,\r\n    uint256 _amount,\r\n    address _local,\r\n    address _router\r\n  ) internal {\r\n    // Decrement liquidity\r\n    routerBalances[_router][_local] -= _amount;\r\n  }\r\n\r\n  /**\r\n   * @notice Performs some sanity checks for `xcall`\r\n   * @dev Need this to prevent stack too deep\r\n   */\r\n  function _xcallSanityChecks(XCallArgs calldata _args) private {\r\n    if (!approvedRouters(_args.params.router)) revert Fibswap__xcall_notApprovedRouter();\r\n\r\n    // ensure this is the right domain\r\n    uint256 _chainId = getChainId();\r\n    if (_args.params.origin != _chainId || _args.params.origin == _args.params.destination) {\r\n      revert Fibswap__xcall_wrongDomain();\r\n    }\r\n\r\n    // ensure theres a recipient defined\r\n    if (_args.params.dstParam.to == address(0)) {\r\n      revert Fibswap__xcall_emptyTo();\r\n    }\r\n\r\n    if (!approvedAssets[_args.params.orgLocalAsset]) revert Fibswap__xcall_notSupportedAsset();\r\n\r\n    if (_args.relayerFee == 0 || msg.value < _args.relayerFee) revert Fibswap__xcall_notGasFee();\r\n  }\r\n\r\n  /**\r\n   * @notice Performs some sanity checks for `execute`\r\n   * @dev Need this to prevent stack too deep\r\n   */\r\n  function _executeSanityChecks(ExecuteArgs calldata _args) private returns (bytes32) {\r\n    // If the sender is not approved router, revert()\r\n    if (!approvedRouters(msg.sender) || msg.sender != _args.params.router) {\r\n      revert Fibswap__execute_unapprovedRouter();\r\n    }\r\n\r\n    if (_args.params.destination != getChainId()) revert Fibswap__execute_incorrectDestination();\r\n    // get transfer id\r\n    bytes32 transferId = FibswapUtils.getTransferId(_args.nonce, _args.originSender, _args.params, _args.amount);\r\n\r\n    // get the payload the router should have signed\r\n    bytes32 routerHash = keccak256(abi.encode(transferId));\r\n\r\n    if (_args.params.router != _recoverSignature(routerHash, _args.routerSignature)) {\r\n      revert Fibswap__execute_invalidRouterSignature();\r\n    }\r\n\r\n    // require this transfer has not already been executed\r\n    if (processed[transferId]) {\r\n      revert Fibswap__execute_alreadyExecuted();\r\n    }\r\n\r\n    return transferId;\r\n  }\r\n\r\n  /**\r\n   * @notice Holds the logic to recover the signer from an encoded payload.\r\n   * @dev Will hash and convert to an eth signed message.\r\n   * @param _signed The hash that was signed\r\n   * @param _sig The signature you are recovering the signer from\r\n   */\r\n  function _recoverSignature(bytes32 _signed, bytes calldata _sig) internal pure returns (address) {\r\n    // Recover\r\n    return ECDSAUpgradeable.recover(ECDSAUpgradeable.toEthSignedMessageHash(_signed), _sig);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the chainId for this contract. If not specified during init\r\n   *         will use the block.chainId\r\n   */\r\n  function getChainId() public view returns (uint256 _chainId) {\r\n    // Hold in memory to reduce sload calls\r\n    uint256 chain = chainId;\r\n    if (chain == 0) {\r\n      // If not provided, pull from block\r\n      assembly {\r\n        _chainId := chainid()\r\n      }\r\n    } else {\r\n      // Use provided override\r\n      _chainId = chain;\r\n    }\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  /**\r\n   * @dev This empty reserved space is put in place to allow future versions to add new\r\n   * variables without shifting down storage in the inheritance chain.\r\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n   */\r\n  uint256[49] private __gap;\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"FibswapUtils__handleIncomingAsset_ethWithErcTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FibswapUtils__handleIncomingAsset_notAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FibswapUtils__transferAssetFromContract_notNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addAssetId_alreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addAssetIds_invalidArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addLiquidityForRouter_amountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addLiquidityForRouter_badAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addLiquidityForRouter_badRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addLiquidityForRouter_routerEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addSwapRouter_alreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addSwapRouter_invalidArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addSwapRouter_invalidSwapRouterAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__decrementLiquidity_notEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__execute_alreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__execute_incorrectDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__execute_invalidRouterSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__execute_unapprovedRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeAssetId_notAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeLiquidity_amountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeLiquidity_insufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeLiquidity_recipientEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeSwapRouter_alreadyRemoved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeSwapRouter_invalidArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_emptyTo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_invalidSwapRouer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_notApprovedRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_notGasFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_notSupportedAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_tooSmallLocalAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_wrongDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__onlyRouterOwner_notRouterOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__removeRouter_notAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__removeRouter_routerEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__setRouterOwner_notNewOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__setRouterRecipient_notNewRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__setupRouter_amountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__setupRouter_routerEmpty\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"orgParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"dstParam\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recovery\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"orgLocalAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstLocalAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IFibswap.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transactingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"routerSignature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NewExecutor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NewFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SwapRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"orgParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"dstParam\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recovery\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"orgLocalAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstLocalAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IFibswap.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transactingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"XCalled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"localAssets\",\"type\":\"address[]\"}],\"name\":\"addAssetIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"addLiquidityFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"}],\"name\":\"addSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"approvedRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"orgParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"dstParam\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recovery\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"orgLocalAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstLocalAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"}],\"internalType\":\"struct IFibswap.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"transactingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"routerSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"}],\"internalType\":\"struct IFibswap.ExecuteArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"contract IExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"localAssetId\",\"type\":\"address\"}],\"name\":\"removeAssetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"removeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"removeSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"routerOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"routerRecipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setRouterOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setRouterRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapped\",\"type\":\"address\"}],\"name\":\"setWrapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setupRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapper\",\"outputs\":[{\"internalType\":\"contract IWrapped\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"orgParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"dstParam\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recovery\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"orgLocalAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstLocalAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"}],\"internalType\":\"struct IFibswap.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"transactingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"}],\"internalType\":\"struct IFibswap.XCallArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"xcall\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Fibswap", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://925e7f30fcbf7c3adf232c13c988d1e8f0daeea9c59af84eb451c9723e88108a"}]}