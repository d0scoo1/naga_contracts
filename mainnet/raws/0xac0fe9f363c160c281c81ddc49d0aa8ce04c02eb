{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Recipes/SimpleUniRecipe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/access/Ownable.sol\\\";\\nimport \\\"../Interfaces/IWETH.sol\\\";\\nimport \\\"../Interfaces/ILendingRegistry.sol\\\";\\nimport \\\"../Interfaces/ILendingLogic.sol\\\";\\nimport \\\"../Interfaces/IPieRegistry.sol\\\";\\nimport \\\"../Interfaces/IPie.sol\\\";\\nimport \\\"../Interfaces/IUniV3Router.sol\\\";\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SimpleUniRecipe contract for BaoFinance's Baskets Protocol (PieDAO fork)\\n *\\n * @author vex\\n */\\ncontract SimpleUniRecipe is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // -------------------------------\\n    // CONSTANTS\\n    // -------------------------------\\n\\n    IERC20 constant DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n    IWETH constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    ILendingRegistry immutable lendingRegistry;\\n    IPieRegistry immutable basketRegistry;\\n\\n    // -------------------------------\\n    // VARIABLES\\n    // -------------------------------\\n\\n    uniV3Router uniRouter;\\n    uniOracle oracle;\\n\\n    /**\\n     * Create a new StableUniRecipe.\\n     *\\n     * @param _lendingRegistry LendingRegistry address\\n     * @param _pieRegistry PieRegistry address\\n     * @param _uniV3Router Uniswap V3 Router address\\n     */\\n    constructor(\\n        address _lendingRegistry,\\n        address _pieRegistry,\\n        address _uniV3Router,\\n        address _uniOracle\\n    ) {\\n        require(_lendingRegistry != address(0), \\\"LENDING_MANAGER_ZERO\\\");\\n        require(_pieRegistry != address(0), \\\"PIE_REGISTRY_ZERO\\\");\\n\\n        lendingRegistry = ILendingRegistry(_lendingRegistry);\\n        basketRegistry = IPieRegistry(_pieRegistry);\\n\\n        uniRouter = uniV3Router(_uniV3Router);\\n        oracle = uniOracle(_uniOracle);\\n\\n        // Approve max DAI spending on Curve Exchange\\n        DAI.approve(address(uniRouter), type(uint256).max);\\n        // Approve max WETH spending on Uni Router\\n        WETH.approve(address(uniRouter), type(uint256).max);\\n    }\\n\\n    // -------------------------------\\n    // PUBLIC FUNCTIONS\\n    // -------------------------------\\n\\n    /**\\n     * External bake function.\\n     * Mints `_mintAmount` basket tokens with as little of `_maxInput` as possible.\\n     *\\n     * @param _basket Address of basket token to mint\\n     * @param _maxInput Max DAI to use to mint _mintAmount basket tokens\\n     * @param _mintAmount Target amount of basket tokens to mint\\n     * @return inputAmountUsed Amount of DAI used to mint the basket token\\n     * @return outputAmount Amount of basket tokens minted\\n     */\\n    function bake(\\n        address _basket,\\n        uint256 _maxInput,\\n        uint256 _mintAmount\\n    ) external returns (uint256 inputAmountUsed, uint256 outputAmount) {\\n        // Transfer DAI to the Recipe\\n        DAI.safeTransferFrom(msg.sender, address(this), _maxInput);\\n\\n        // Bake _mintAmount basket tokens\\n        outputAmount = _bake(_basket, _mintAmount);\\n\\n        // Transfer remaining DAI to msg.sender\\n        uint256 remainingInputBalance = DAI.balanceOf(address(this));\\n        if (remainingInputBalance > 0) {\\n            DAI.safeTransfer(msg.sender, remainingInputBalance);\\n        }\\n        inputAmountUsed = _maxInput - remainingInputBalance;\\n\\n        // Transfer minted basket tokens to msg.sender\\n        IERC20(_basket).safeTransfer(msg.sender, outputAmount);\\n    }\\n\\n    /**\\n     * Bake a basket with ETH.\\n     *\\n     * Wraps the ETH that was sent, swaps it for DAI on UniV3, and continues the baking\\n     * process as normal.\\n     *\\n     * @param _basket Basket token to mint\\n     * @param _mintAmount Target amount of basket tokens to mint\\n     */\\n    function toBasket(\\n        address _basket,\\n        uint256 _mintAmount\\n    ) external payable returns (uint256 inputAmountUsed, uint256 outputAmount) {\\n        // Wrap ETH\\n        WETH.deposit{value : msg.value}();\\n\\n        // WETH -> DAI swap\\n        _swap_in_amount(\\n            address(WETH),\\n            address(DAI),\\n            msg.value,\\n            500\\n        );\\n\\n        // Bake basket\\n        outputAmount = _bake(_basket, _mintAmount);\\n\\n        // Send remaining funds back to msg.sender\\n        uint256 daiBalance = DAI.balanceOf(address(this));\\n        if (daiBalance > 0) {\\n            // Swap remaining DAI back to WETH and transfer to msg.sender\\n            uint256 remainingEth = _swap_in_amount(\\n                address(DAI),\\n                address(WETH),\\n                daiBalance,\\n                500\\n            );\\n            inputAmountUsed = msg.value - remainingEth;\\n\\n            WETH.withdraw(remainingEth);\\n            msg.sender.transfer(remainingEth);\\n        }\\n\\n        // Transfer minted baskets to msg.sender\\n        IERC20(_basket).safeTransfer(msg.sender, outputAmount);\\n    }\\n\\n    /**\\n     * Get the price of `_amount` basket tokens in DAI\\n     *\\n     * @param _basket Basket token to get the price of\\n     * @param _amount Amount of basket tokens to get price of\\n     * @return _price Price of `_amount` basket tokens in DAI\\n     */\\n    function getPrice(address _basket, uint256 _amount) public returns (uint256 _price) {\\n        // Check that _basket is a valid basket\\n        require(basketRegistry.inRegistry(_basket));\\n\\n        // Loop through all the tokens in the basket and get their prices on UniSwap V3\\n        (address[] memory tokens, uint256[] memory amounts) = IPie(_basket).calcTokensForAmount(_amount);\\n        address _token;\\n        address _underlying;\\n        uint256 _amount;\\n        for (uint256 i; i < tokens.length; ++i) {\\n            _token = tokens[i];\\n            _amount = amounts[i].add(1);\\n\\n            // If the amount equals zero, revert.\\n            assembly {\\n                if iszero(_amount) {\\n                    revert(0, 0)\\n                }\\n            }\\n\\n            _underlying = lendingRegistry.wrappedToUnderlying(_token);\\n            if (_underlying != address(0)) {\\n                _amount = mulDivDown(\\n                    _amount,\\n                    getLendingLogicFromWrapped(_token).exchangeRateView(_token),\\n                    1e18\\n                );\\n                _token = _underlying;\\n            }\\n\\n            // If the token is DAI, we don't need to perform a swap before lending.\\n            _price += _token == address(DAI) ? _amount : _quoteExactOutput(address(DAI), _token, _amount, 500);\\n        }\\n        return _price;\\n    }\\n\\n    /**\\n     * Get the price of `_amount` basket tokens in ETH\\n     *\\n     * @param _basket Basket token to get the price of\\n     * @param _amount Amount of basket tokens to get price of\\n     * @return _price Price of `_amount` basket tokens in ETH\\n     */\\n    function getPriceEth(address _basket, uint256 _amount) external returns (uint256 _price) {\\n        _price = _quoteExactOutput(\\n            address(WETH),\\n            address(DAI),\\n            getPrice(_basket, _amount),\\n            500\\n        );\\n    }\\n\\n    // -------------------------------\\n    // INTERNAL FUNCTIONS\\n    // -------------------------------\\n\\n    /**\\n     * Internal bake function.\\n     * Checks if _outputToken is a valid basket, mints _mintAmount basketTokens, and returns the real\\n     * amount minted.\\n     *\\n     * @param _basket Address of basket token to mint\\n     * @param _mintAmount Target amount of basket tokens to mint\\n     * @return outputAmount Amount of basket tokens minted\\n     */\\n    function _bake(address _basket, uint256 _mintAmount) internal returns (uint256 outputAmount) {\\n        require(basketRegistry.inRegistry(_basket));\\n\\n        swapAndJoin(_basket, _mintAmount);\\n\\n        outputAmount = IERC20(_basket).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * Swap for the underlying assets of a basket using only Uni V3 and mint _outputAmount basket tokens.\\n     *\\n     * @param _basket Basket to pull underlying assets from\\n     * @param _mintAmount Target amount of basket tokens to mint\\n     */\\n    function swapAndJoin(address _basket, uint256 _mintAmount) internal {\\n        IPie basket = IPie(_basket);\\n        (address[] memory tokens, uint256[] memory amounts) = basket.calcTokensForAmount(_mintAmount);\\n\\n        // Instantiate empty variables that will be assigned multiple times in the loop, less memory allocation\\n        address _token;\\n        address underlying;\\n        uint256 _amount;\\n        uint256 underlyingAmount;\\n        ILendingLogic lendingLogic;\\n\\n        for (uint256 i; i < tokens.length; ++i) {\\n            _token = tokens[i];\\n            _amount = amounts[i].add(1);\\n\\n            // If the token is registered in the lending registry, swap to\\n            // its underlying token and lend it.\\n            underlying = lendingRegistry.wrappedToUnderlying(_token);\\n\\n            if (underlying == address(0) && _token != address(DAI)) {\\n                _swap_out_amount(\\n                    address(DAI),\\n                    _token,\\n                    _amount,\\n                    500\\n                );\\n            } else {\\n                // Get underlying amount according to the exchange rate\\n                lendingLogic = getLendingLogicFromWrapped(_token);\\n                underlyingAmount = mulDivDown(_amount, lendingLogic.exchangeRate(_token), 1e18);\\n\\n                // Swap for the underlying asset on UniV3\\n                // If the token is DAI, no need to swap\\n                if (underlying != address(DAI)) {\\n                    _swap_out_amount(\\n                        address(DAI),\\n                        underlying,\\n                        underlyingAmount,\\n                        500\\n                    );\\n                }\\n\\n                // Execute lending transactions\\n                (address[] memory targets, bytes[] memory data) = lendingLogic.lend(underlying, underlyingAmount, address(this));\\n                for (uint256 j; j < targets.length; ++j) {\\n                    (bool success,) = targets[j].call{value : 0}(data[j]);\\n                    require(success, \\\"CALL_FAILED\\\");\\n                }\\n            }\\n            IERC20(_token).approve(_basket, _amount);\\n        }\\n        basket.joinPool(_mintAmount);\\n    }\\n\\n    /**\\n     * Swap `_from` -> `_to` and receive exactly `_amountOut` of `_to` on UniV3\\n     *\\n     * @param _from Address of token to swap from\\n     * @param _to Address of token to swap to\\n     * @param _amountOut Exact amount of `_to` to receive\\n     * @param _fee UniV3 pool fee\\n     */\\n    function _swap_out_amount(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint24 _fee\\n    ) internal {\\n        uniRouter.exactOutputSingle(\\n            uniV3Router.ExactOutputSingleParams(\\n                _from,\\n                _to,\\n                _fee,\\n                address(this),\\n                _amountOut,\\n                type(uint256).max,\\n                0\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Swap `_from` -> `_to` given an an amount of 'from' token to be swaped on UniV3\\n     *\\n     * @param _from Address of token to swap from\\n     * @param _to Address of token to swap to\\n     * @param _amountIn Exact amount of `_from` to sell\\n     * @param _fee UniV3 pool fee\\n     */\\n    function _swap_in_amount(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint24 _fee\\n    ) internal returns (uint256) {\\n        return uniRouter.exactInputSingle(\\n            uniV3Router.ExactInputSingleParams(\\n                _from,\\n                _to,\\n                _fee,\\n                address(this),\\n                _amountIn,\\n                0,\\n                0\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Quote an exact input swap on UniV3\\n     *\\n     * @param _from Token to swap from\\n     * @param _to Token to swap to\\n     * @param _amountOut Exact amount of `_to` tokens to be received for `_amountIn` `_from` tokens\\n     * @return _amountIn Amount to send in order to receive `_amountOut` `to` tokens\\n     */\\n    function _quoteExactOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint24 _fee\\n    ) internal returns (uint256 _amountIn) {\\n        try oracle.quoteExactOutputSingle(_from, _to, _fee, _amountOut, 0) returns (uint256 _p) {\\n            _amountIn = _p;\\n        } catch {\\n            _amountIn = type(uint256).max;\\n        }\\n    }\\n\\n    /**\\n     * Get the lending logic of a wrapped token\\n     *\\n     * @param _wrapped Address of wrapped token\\n     * @return ILendingLogic - Lending logic associated with `_wrapped`\\n     */\\n    function getLendingLogicFromWrapped(address _wrapped) internal view returns (ILendingLogic) {\\n        return ILendingLogic(\\n            lendingRegistry.protocolToLogic(\\n                lendingRegistry.wrappedToProtocol(\\n                    _wrapped\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Yoinked from the geniuses behind solmate\\n     * https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol\\n     *\\n     * (x*y)/z\\n     */\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    // -------------------------------\\n    // ADMIN FUNCTIONS\\n    // -------------------------------\\n\\n    /**\\n     * Update the Uni V3 Router\\n     *\\n     * @param _newRouter New Uni V3 Router address\\n     */\\n    function updateUniRouter(address _newRouter, address _oracle) external onlyOwner {\\n        // Update stored Uni V3 exchange\\n        uniRouter = uniV3Router(_newRouter);\\n\\n        // Re-approve WETH\\n        WETH.approve(_newRouter, 0);\\n        WETH.approve(_newRouter, type(uint256).max);\\n\\n        // Re-approve DAI\\n        DAI.approve(_newRouter, 0);\\n        DAI.approve(_newRouter, type(uint256).max);\\n    }\\n\\n    /**\\n     * Update the Uni V3 Oracle\\n     *\\n     * @param _newOracle New Uni V3 Oracle address\\n     */\\n    function updateUniOracle(address _newOracle) external onlyOwner {\\n        oracle = uniOracle(_newOracle);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/token/ERC20/ERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n  function withdraw(uint) external;\\n  function decimals() external view returns(uint8);\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/ILendingRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILendingRegistry {\\n    // Maps wrapped token to protocol\\n    function wrappedToProtocol(address _wrapped) external view returns(bytes32);\\n    // Maps wrapped token to underlying\\n    function wrappedToUnderlying(address _wrapped) external view returns(address);\\n    function underlyingToProtocolWrapped(address _underlying, bytes32 protocol) external view returns (address);\\n    function protocolToLogic(bytes32 _protocol) external view returns (address);\\n\\n    /**\\n        @notice Set which protocl a wrapped token belongs to\\n        @param _wrapped Address of the wrapped token\\n        @param _protocol Bytes32 key of the protocol\\n    */\\n    function setWrappedToProtocol(address _wrapped, bytes32 _protocol) external;\\n\\n    /**\\n        @notice Set what is the underlying for a wrapped token\\n        @param _wrapped Address of the wrapped token\\n        @param _underlying Address of the underlying token\\n    */\\n    function setWrappedToUnderlying(address _wrapped, address _underlying) external;\\n\\n    /**\\n        @notice Set the logic contract for the protocol\\n        @param _protocol Bytes32 key of the procol\\n        @param _logic Address of the lending logic contract for that protocol\\n    */\\n    function setProtocolToLogic(bytes32 _protocol, address _logic) external;\\n    /**\\n        @notice Set the wrapped token for the underlying deposited in this protocol\\n        @param _underlying Address of the unerlying token\\n        @param _protocol Bytes32 key of the protocol\\n        @param _wrapped Address of the wrapped token\\n    */\\n    function setUnderlyingToProtocolWrapped(address _underlying, bytes32 _protocol, address _wrapped) external;\\n\\n    /**\\n        @notice Get tx data to lend the underlying amount in a specific protocol\\n        @param _underlying Address of the underlying token\\n        @param _amount Amount to lend\\n        @param _protocol Bytes32 key of the protocol\\n        @return targets Addresses of the src to call\\n        @return data Calldata for the calls\\n    */\\n    function getLendTXData(address _underlying, uint256 _amount, bytes32 _protocol) external view returns(address[] memory targets, bytes[] memory data);\\n\\n    /**\\n        @notice Get the tx data to unlend the wrapped amount\\n        @param _wrapped Address of the wrapped token\\n        @param _amount Amount of wrapped token to unlend\\n        @return targets Addresses of the src to call\\n        @return data Calldata for the calls\\n    */\\n    function getUnlendTXData(address _wrapped, uint256 _amount) external view returns(address[] memory targets, bytes[] memory data);\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/ILendingLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.0;\\n\\ninterface ILendingLogic {\\n    /**\\n        @notice Get the APR based on underlying token.\\n        @param _token Address of the underlying token\\n        @return Interest with 18 decimals\\n    */\\n    function getAPRFromUnderlying(address _token) external view returns(uint256);\\n\\n    /**\\n        @notice Get the APR based on wrapped token.\\n        @param _token Address of the wrapped token\\n        @return Interest with 18 decimals\\n    */\\n    function getAPRFromWrapped(address _token) external view returns(uint256);\\n\\n    /**\\n        @notice Get the calls needed to lend.\\n        @param _underlying Address of the underlying token\\n        @param _amount Amount of the underlying token\\n        @return targets Addresses of the src to call\\n        @return data Calldata of the calls\\n    */\\n    function lend(address _underlying, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data);\\n\\n    /**\\n        @notice Get the calls needed to unlend\\n        @param _wrapped Address of the wrapped token\\n        @param _amount Amount of the underlying tokens\\n        @return targets Addresses of the src to call\\n        @return data Calldata of the calls\\n    */\\n    function unlend(address _wrapped, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data);\\n\\n    /**\\n        @notice Get the underlying wrapped exchange rate\\n        @param _wrapped Address of the wrapped token\\n        @return The exchange rate\\n    */\\n    function exchangeRate(address _wrapped) external returns(uint256);\\n\\n    /**\\n        @notice Get the underlying wrapped exchange rate in a view (non state changing) way\\n        @param _wrapped Address of the wrapped token\\n        @return The exchange rate\\n    */\\n    function exchangeRateView(address _wrapped) external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IPieRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\ninterface IPieRegistry {\\n    function inRegistry(address _pool) external view returns(bool);\\n    function entries(uint256 _index) external view returns(address);\\n    function addSmartPool(address _smartPool) external;\\n    function removeSmartPool(uint256 _index) external;\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IPie.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPie is IERC20 {\\n    function joinPool(uint256 _amount) external;\\n    function exitPool(uint256 _amount) external;\\n    function calcTokensForAmount(uint256 _amount) external view  returns(address[] memory tokens, uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IUniV3Router.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\npragma experimental ABIEncoderV2;\\n\\ninterface uniV3Router {\\n\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    function exactInputSingle(ExactInputSingleParams memory params) external returns (uint256 amountOut);\\n\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external;\\n\\n    function exactOutput(ExactOutputParams memory params) external returns (uint256 amountIn);\\n}\\n\\ninterface uniOracle {\\n   function quoteExactOutputSingle(\\n    address tokenIn,\\n    address tokenOut,\\n    uint24 fee,\\n    uint256 amountOut,\\n    uint160 sqrtPriceLimitX96\\n  ) external returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"v2-periphery/=lib/v2-periphery/contracts/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pieRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniV3Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"bake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmountUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPriceEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"toBasket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmountUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"updateUniOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"updateUniRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SimpleUniRecipe", "CompilerVersion": "v0.7.1+commit.f4a555be", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000008a2b7d713e388123dc6678168656659d297d39700000000000000000000000051801401e1f21c9184610b99b978d050a374566e00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45000000000000000000000000b27308f9f90d607463bb33ea1bebb41c27ce5ab6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}