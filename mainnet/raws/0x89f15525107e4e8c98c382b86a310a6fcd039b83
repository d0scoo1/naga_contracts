{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/habibiz/Bibiz/BibizStakeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Stake/StakeBaseUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\n/**\\n@title Bibiz Upgradeable Staking Contract\\n@author @KfishNFT\\n@notice Based on the Habibiz upgradeable staking contract using UUPSUpgradeable Proxy\\n*/\\ncontract BibizStakeUpgradeable is StakeBaseUpgradeable, IERC721Receiver {\\n    /**\\n    @notice Initializer function\\n    @param stakingContract_ The contract that Bibiz will be staked in\\n    @param tokenContract_ The Bibiz contract\\n    @param oilContract_ The $OIL contract\\n    */\\n    function initialize(\\n        address stakingContract_,\\n        address tokenContract_,\\n        address oilContract_\\n    ) public initializer {\\n        address _stakingContract = stakingContract_ == address(0) ? address(this) : stakingContract_;\\n        __StakeBaseUpgradeable_init(_stakingContract, tokenContract_, oilContract_);\\n    }\\n\\n    /**\\n    @notice List of tokenIds staked by an address\\n    @param owner_ The owner of the tokens\\n    @return Array of tokenIds\\n    */\\n    function tokensOf(address owner_) external view returns (uint256[] memory) {\\n        return tokensOfOwner[owner_];\\n    }\\n\\n    /**\\n    @notice Find the owner of a staked token\\n    @param tokenId_ The token's id\\n    @return Address of owner\\n    */\\n    function ownerOf(uint256 tokenId_) external view returns (address) {\\n        return tokenOwner[tokenId_];\\n    }\\n\\n    /**\\n    @notice Retrieve timestamps of when tokens were staked\\n    @param tokenIds_ The token ids to retrieve staked timestamps for\\n    @return Array of timestamps\\n    */\\n    function stakedTimeOf(uint256[] calldata tokenIds_) external view returns (uint256[] memory) {\\n        uint256[] memory stakedTimes = new uint256[](tokenIds_.length);\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            stakedTimes[i] = tokenStakedTime[tokenIds_[i]];\\n        }\\n        return stakedTimes;\\n    }\\n\\n    /**\\n    @notice Retrieve the time a token has been staked in seconds\\n    @param tokenIds_ The token ids to retrieve seconds staked for\\n    @return Array of seconds staked\\n    */\\n    function secondsStakedOf(uint256[] calldata tokenIds_) external view returns (uint256[] memory) {\\n        uint256[] memory secondsStaked = new uint256[](tokenIds_.length);\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            secondsStaked[i] = block.timestamp - tokenStakedTime[tokenIds_[i]];\\n        }\\n        return secondsStaked;\\n    }\\n\\n    /**\\n    @notice IERC721Receiver implementation in order to allow transfers to the contract\\n    */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/habibiz/Stake/StakeBaseUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../Interfaces/IERC721Like.sol\\\";\\nimport \\\"../Oil.sol\\\";\\n\\n/**\\n@title Habibiz Base Upgradeable Staking Contract\\n@author @KfishNFT\\n@notice Provides common initialization for upgradeable staking contracts in the Habibiz ecosystem\\n*/\\nabstract contract StakeBaseUpgradeable is Initializable, UUPSUpgradeable, AccessControlUpgradeable {\\n    using ECDSAUpgradeable for bytes32;\\n    /**\\n    @notice Used for management functions\\n    */\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    /**\\n    @notice Upgraders can use the UUPSUpgradeable upgrade functions\\n    */\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    /**\\n    @notice Role for addresses that are valid signers\\n    */\\n    bytes32 public constant SIGNER_ROLE = keccak256(\\\"SIGNER_ROLE\\\");\\n    /**\\n    @notice Mapping of address to staked tokens\\n    */\\n    mapping(address => uint256[]) internal tokensOfOwner;\\n    /**\\n    @notice Timestamp of a tokenId that was staked\\n    */\\n    mapping(uint256 => uint256) internal tokenStakedTime;\\n    /**\\n    @notice Timestamp of the last unstake of an address's token\\n    */\\n    mapping(address => uint256) internal ownerLastUnstakedTime;\\n    /**\\n    @notice Mapping of tokenId to owner\\n    */\\n    mapping(uint256 => address) internal tokenOwner;\\n    /**\\n    @notice Keeping track of stakers in order to modify unique count\\n    */\\n    mapping(address => bool) internal stakers;\\n    /**\\n    @notice Unique owner count visibility\\n    */\\n    uint256 public uniqueOwnerCount;\\n    /**\\n    @notice ERC721 interface with the ability to add future functions\\n    */\\n    IERC721Like public tokenContract;\\n    /**\\n    @notice The address of $OIL\\n    */\\n    Oil public oilContract;\\n    /**\\n    @notice Address of the contract that will be used to stake tokens\\n    */\\n    address public stakingContract;\\n    /**\\n    @notice Keep track of nonces to avoid hijacking signatures\\n    */\\n    mapping(uint256 => bool) internal nonces;\\n    /**\\n    @notice Emitted when a token is Staked\\n    @param sender The msg.sender\\n    @param tokenId The token id\\n    */\\n    event TokenStaked(address indexed sender, uint256 tokenId);\\n    /**\\n    @notice Emitted when a token is Unstaked\\n    @param sender The msg.sender\\n    @param tokenId The token id\\n    */\\n    event TokenUnstaked(address indexed sender, uint256 tokenId);\\n\\n    /**\\n    @dev Initializer\\n    @param stakingContract_ the contract where tokens will be transferred to\\n    @param tokenContract_ the ERC721 compliant contract\\n    @param oilContract_ the address of $OIL\\n    */\\n    function __StakeBaseUpgradeable_init(\\n        address stakingContract_,\\n        address tokenContract_,\\n        address oilContract_\\n    ) internal onlyInitializing {\\n        __AccessControl_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MANAGER_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n        stakingContract = stakingContract_;\\n        oilContract = Oil(oilContract_);\\n        tokenContract = IERC721Like(tokenContract_);\\n    }\\n\\n    /**\\n    @dev Initializer\\n    @param stakingContract_ the contract where tokens will be transferred to\\n    @param tokenContract_ the ERC721 compliant contract\\n    @param oilContract_ the address of $OIL\\n    */\\n    function __StakeBaseUpgradeable_unchained_init(\\n        address stakingContract_,\\n        address tokenContract_,\\n        address oilContract_\\n    ) internal onlyInitializing {\\n        __StakeBaseUpgradeable_init(stakingContract_, tokenContract_, oilContract_);\\n    }\\n\\n    /**\\n    @notice Function to unstake tokens of an address by their ids\\n    @param tokenIds_ the list of token ids to be staked\\n    */\\n    function unstake(uint256[] calldata tokenIds_) external virtual {\\n        require(tokensOfOwner[msg.sender].length > 0, \\\"Stake: nothing to unstake\\\");\\n        uint256 i = 0;\\n        for (i = 0; i < tokenIds_.length; i++) {\\n            require(tokenOwner[tokenIds_[i]] == msg.sender, \\\"Stake: token not owned by sender\\\");\\n            _unstake(tokenIds_[i]);\\n        }\\n        for (i = tokensOfOwner[msg.sender].length - 1; i >= 0; i--) {\\n            for (uint256 j = 0; j < tokenIds_.length; j++) {\\n                if (tokensOfOwner[msg.sender][i] == tokenIds_[j]) {\\n                    tokensOfOwner[msg.sender][i] = tokensOfOwner[msg.sender][tokensOfOwner[msg.sender].length - 1];\\n                    tokensOfOwner[msg.sender].pop();\\n                    break;\\n                }\\n            }\\n        }\\n        ownerLastUnstakedTime[msg.sender] = block.timestamp;\\n        _updateUniqueOwnerCount(false);\\n    }\\n\\n    /**\\n    @notice Function to unstake all tokens of an address\\n    */\\n    function unstakeAll() external virtual {\\n        uint256[] memory tokens = tokensOfOwner[msg.sender];\\n        require(tokens.length > 0, \\\"Stake: nothing to unstake\\\");\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _unstake(tokens[i]);\\n        }\\n        delete tokensOfOwner[msg.sender];\\n        ownerLastUnstakedTime[msg.sender] = block.timestamp;\\n        _updateUniqueOwnerCount(false);\\n    }\\n\\n    /**\\n    @notice Function to unstake tokens of an address by their ids\\n    @param tokenIds_ the list of token ids to be staked\\n    */\\n    function stake(uint256[] calldata tokenIds_) external virtual {\\n        require(\\n            tokenContract.isApprovedForAll(msg.sender, stakingContract),\\n            \\\"Stake: contract is not approved operator\\\"\\n        );\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            require(tokenContract.ownerOf(tokenIds_[i]) == msg.sender, \\\"Stake: token not owned by sender\\\");\\n            _stake(tokenIds_[i]);\\n        }\\n        _updateUniqueOwnerCount(true);\\n    }\\n\\n    /**\\n    @notice Staking function that performs transfer of a token and sets the staked timestamp\\n    @param tokenId_ The token id that will be staked\\n    */\\n    function _stake(uint256 tokenId_) private {\\n        tokenContract.safeTransferFrom(msg.sender, stakingContract, tokenId_);\\n        tokensOfOwner[msg.sender].push(tokenId_);\\n        tokenOwner[tokenId_] = msg.sender;\\n        tokenStakedTime[tokenId_] = block.timestamp;\\n\\n        emit TokenStaked(msg.sender, tokenId_);\\n    }\\n\\n    /**\\n    @notice Unstaking function that performs transfer of a staked token\\n    @param tokenId_ The token id that will be staked\\n    */\\n    function _unstake(uint256 tokenId_) private {\\n        tokenContract.safeTransferFrom(address(stakingContract), msg.sender, tokenId_);\\n        delete tokenOwner[tokenId_];\\n\\n        emit TokenUnstaked(msg.sender, tokenId_);\\n    }\\n\\n    /**\\n    @notice Updating the unique owner count after staking or unstaking\\n    @param isStaking_ Whether the action is stake or unstake\\n    */\\n    function _updateUniqueOwnerCount(bool isStaking_) private {\\n        if (isStaking_ && !stakers[msg.sender]) {\\n            stakers[msg.sender] = true;\\n            uniqueOwnerCount++;\\n        } else {\\n            if (tokensOfOwner[msg.sender].length == 0) {\\n                stakers[msg.sender] = false;\\n                uniqueOwnerCount--;\\n            }\\n        }\\n    }\\n\\n    /**\\n    @notice Function required by UUPSUpgradeable in order to authorize upgrades\\n    @dev Only \\\"UPGRADER_ROLE\\\" addresses can perform upgrades\\n    @param newImplementation The address of the new implementation contract for the upgrade\\n    */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}\\n\\n    /**\\n    @dev Reserved storage to allow layout changes\\n    */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/habibiz/Interfaces/IERC721Like.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Like is IERC721 {\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start` < `stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K pfp collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"src/habibiz/Oil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.7;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// Inspired by Solmate: https://github.com/Rari-Capital/solmate\\n/// Developed originally by 0xBasset\\n/// Upgraded by <redacted>\\n/// Additions by Tsuki Labs: https://tsukiyomigroup.com/ :)\\n\\ncontract Oil {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public impl_;\\n    address public ruler;\\n    address public treasury;\\n    address public uniPair;\\n    address public weth;\\n\\n    uint256 public totalSupply;\\n    uint256 public startingTime;\\n    uint256 public baseTax;\\n    uint256 public minSwap;\\n\\n    bool public paused;\\n    bool public swapping;\\n\\n    ERC721Like public habibi;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    mapping(address => bool) public isMinter;\\n\\n    mapping(uint256 => uint256) public claims;\\n\\n    mapping(address => Staker) internal stakers;\\n\\n    uint256 public sellFee;\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    uint256 public doubleBaseTimestamp;\\n\\n    struct Habibi {\\n        uint256 stakedTimestamp;\\n        uint256 tokenId;\\n    }\\n\\n    struct Staker {\\n        Habibi[] habibiz;\\n        uint256 lastClaim;\\n    }\\n\\n    struct Rescueable {\\n        address revoker;\\n        bool adminAllowedAsRevoker;\\n    }\\n\\n    mapping(address => Rescueable) private rescueable;\\n\\n    address public sushiswapPair;\\n    IUniswapV2Router02 public uniswapV2Router;\\n    IUniswapV2Router02 public sushiswapV2Router;\\n\\n    mapping(address => bool) public excludedFromFees;\\n    mapping(address => bool) public blockList;\\n\\n    struct RoyalStaker {\\n        Royal[] royals;\\n    }\\n\\n    struct Royal {\\n        uint256 stakedTimestamp;\\n        uint256 tokenId;\\n    }\\n\\n    ERC721Like public royals;\\n\\n    uint256[] public frozenHabibiz;\\n\\n    mapping(uint256 => address) public claimedRoyals;\\n    mapping(address => RoyalStaker) internal royalStakers;\\n    mapping(uint256 => address) public ownerOfRoyal;\\n    mapping(uint256 => uint256) public royalSwaps;\\n    mapping(uint256 => uint256) public escrowedOil;\\n    mapping(address => uint256) public lastUnstakedTimestamp;\\n    uint256 public swapRoyalsCost;\\n    uint256 public royalsHabibiRatio;\\n    bool public swappingActive;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"OIL\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"OIL\\\";\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function initialize(address habibi_, address treasury_) external {\\n        require(msg.sender == ruler, \\\"NOT ALLOWED TO RULE\\\");\\n        ruler = msg.sender;\\n        treasury = treasury_;\\n        habibi = ERC721Like(habibi_);\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external whenNotPaused returns (bool) {\\n        require(!blockList[msg.sender], \\\"Address Blocked\\\");\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external whenNotPaused returns (bool) {\\n        require(!blockList[msg.sender], \\\"Address Blocked\\\");\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n\\n        _transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              STAKING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _tokensOfStaker(address staker_, bool royals_) internal view returns (uint256[] memory) {\\n        uint256 i;\\n        if (royals_) {\\n            uint256[] memory tokenIds = new uint256[](royalStakers[staker_].royals.length);\\n            for (i = 0; i < royalStakers[staker_].royals.length; i++) {\\n                tokenIds[i] = royalStakers[staker_].royals[i].tokenId;\\n            }\\n            return tokenIds;\\n        } else {\\n            uint256[] memory tokenIds = new uint256[](stakers[staker_].habibiz.length);\\n            for (i = 0; i < stakers[staker_].habibiz.length; i++) {\\n                tokenIds[i] = stakers[staker_].habibiz[i].tokenId;\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    function habibizOfStaker(address staker_) public view returns (uint256[] memory) {\\n        return _tokensOfStaker(staker_, false);\\n    }\\n\\n    function royalsOfStaker(address staker_) public view returns (uint256[] memory) {\\n        return _tokensOfStaker(staker_, true);\\n    }\\n\\n    function allStakedOfStaker(address staker_) public view returns (uint256[] memory, uint256[] memory) {\\n        return (habibizOfStaker(staker_), royalsOfStaker(staker_));\\n    }\\n\\n    function stake(uint256[] memory habibiz_, uint256[] memory royals_) public whenNotPaused {\\n        uint256 i;\\n        for (i = 0; i < habibiz_.length; i++) {\\n            require(habibi.ownerOf(habibiz_[i]) == msg.sender, \\\"At least one Habibi is not owned by you.\\\");\\n            habibi.transferFrom(msg.sender, address(this), habibiz_[i]);\\n            stakers[msg.sender].habibiz.push(Habibi(block.timestamp, habibiz_[i]));\\n        }\\n\\n        for (i = 0; i < royals_.length; i++) {\\n            require(royals.ownerOf(royals_[i]) == msg.sender, \\\"At least one Royals is not owned by you.\\\");\\n            royals.transferFrom(msg.sender, address(this), royals_[i]);\\n            royalStakers[msg.sender].royals.push(Royal(block.timestamp, royals_[i]));\\n        }\\n    }\\n\\n    function stakeAll() external whenNotPaused {\\n        uint256[] memory habibizTokenIds = habibi.walletOfOwner(msg.sender);\\n        uint256[] memory royalsTokenIds = royals.tokensOfOwner(msg.sender);\\n        stake(habibizTokenIds, royalsTokenIds);\\n    }\\n\\n    function isOwnedByStaker(\\n        address staker_,\\n        uint256 tokenId_,\\n        bool isRoyal_\\n    ) public view returns (uint256, bool) {\\n        uint256 i;\\n        if (isRoyal_) {\\n            for (i = 0; i < royalStakers[staker_].royals.length; i++) {\\n                if (tokenId_ == royalStakers[staker_].royals[i].tokenId) {\\n                    return (i, true);\\n                }\\n            }\\n        } else {\\n            for (i = 0; i < stakers[staker_].habibiz.length; i++) {\\n                if (tokenId_ == stakers[staker_].habibiz[i].tokenId) {\\n                    return (i, true);\\n                }\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function _unstake(bool habibiz_, bool royals_) internal {\\n        uint256 i;\\n        uint256 oil;\\n        lastUnstakedTimestamp[msg.sender] = block.timestamp;\\n        if (habibiz_) {\\n            for (i = 0; i < stakers[msg.sender].habibiz.length; i++) {\\n                Habibi memory _habibi = stakers[msg.sender].habibiz[i];\\n                habibi.transferFrom(address(this), msg.sender, _habibi.tokenId);\\n                oil += _calculateOil(msg.sender, _habibi.tokenId, _habibi.stakedTimestamp, false);\\n            }\\n            delete stakers[msg.sender].habibiz;\\n        }\\n\\n        if (royals_) {\\n            for (i = 0; i < royalStakers[msg.sender].royals.length; i++) {\\n                Royal memory _royal = royalStakers[msg.sender].royals[i];\\n                royals.transferFrom(address(this), msg.sender, _royal.tokenId);\\n                oil += _calculateOil(msg.sender, _royal.tokenId, _royal.stakedTimestamp, true);\\n            }\\n            delete royalStakers[msg.sender].royals;\\n        }\\n        if (oil > 0) _claimAmount(msg.sender, oil, false);\\n    }\\n\\n    function _unstakeByIds(uint256[] memory habibizIds_, uint256[] memory royalsIds_) internal {\\n        uint256 i;\\n        uint256 oil;\\n        uint256 balanceBonus = holderBonusPercentage(msg.sender);\\n        uint256 lastClaim = stakers[msg.sender].lastClaim;\\n        uint256 royalsBase = getRoyalsBase(msg.sender);\\n        lastUnstakedTimestamp[msg.sender] = block.timestamp;\\n        if (habibizIds_.length > 0) {\\n            for (i = 0; i < habibizIds_.length; i++) {\\n                (uint256 stakedIndex, bool isOwned) = isOwnedByStaker(msg.sender, habibizIds_[i], false);\\n                require(isOwned, \\\"Habibi not owned by sender\\\");\\n                oil += calculateOilOfToken(\\n                    _isAnimated(habibizIds_[i]),\\n                    lastClaim,\\n                    stakers[msg.sender].habibiz[stakedIndex].stakedTimestamp,\\n                    balanceBonus,\\n                    false,\\n                    0\\n                );\\n                habibi.transferFrom(address(this), msg.sender, habibizIds_[i]);\\n                _removeTokenFromStakerAtIndex(stakedIndex, msg.sender, false);\\n            }\\n        }\\n        if (royalsIds_.length > 0) {\\n            for (i = 0; i < royalsIds_.length; i++) {\\n                (uint256 stakedIndex, bool isOwned) = isOwnedByStaker(msg.sender, royalsIds_[i], true);\\n                require(isOwned, \\\"Royal not owned by sender\\\");\\n                oil += calculateOilOfToken(\\n                    false,\\n                    lastClaim,\\n                    royalStakers[msg.sender].royals[stakedIndex].stakedTimestamp,\\n                    balanceBonus,\\n                    true,\\n                    royalsBase\\n                );\\n                _removeTokenFromStakerAtIndex(stakedIndex, msg.sender, true);\\n                royals.transferFrom(address(this), msg.sender, royalsIds_[i]);\\n            }\\n        }\\n        if (oil > 0) _claimAmount(msg.sender, oil, false);\\n    }\\n\\n    function unstakeAllHabibiz() external whenNotPaused {\\n        require(stakers[msg.sender].habibiz.length > 0, \\\"No Habibiz staked\\\");\\n        _unstake(true, false);\\n    }\\n\\n    function unstakeAllRoyals() external whenNotPaused {\\n        require(royalStakers[msg.sender].royals.length > 0, \\\"No Royals staked\\\");\\n        _unstake(false, true);\\n    }\\n\\n    function unstakeAll() external whenNotPaused {\\n        require(\\n            stakers[msg.sender].habibiz.length > 0 || royalStakers[msg.sender].royals.length > 0,\\n            \\\"No Habibiz or Royals staked\\\"\\n        );\\n        _unstake(true, true);\\n    }\\n\\n    function unstakeHabibizByIds(uint256[] calldata tokenIds_) external whenNotPaused {\\n        _unstakeByIds(tokenIds_, new uint256[](0));\\n    }\\n\\n    function unstakeRoyalsByIds(uint256[] calldata tokenIds_) external whenNotPaused {\\n        _unstakeByIds(new uint256[](0), tokenIds_);\\n    }\\n\\n    function _removeTokenFromStakerAtIndex(\\n        uint256 index_,\\n        address staker_,\\n        bool isRoyal_\\n    ) internal {\\n        if (isRoyal_) {\\n            royalStakers[staker_].royals[index_] = royalStakers[staker_].royals[\\n                royalStakers[staker_].royals.length - 1\\n            ];\\n            royalStakers[staker_].royals.pop();\\n        } else {\\n            stakers[staker_].habibiz[index_] = stakers[staker_].habibiz[stakers[staker_].habibiz.length - 1];\\n            stakers[staker_].habibiz.pop();\\n        }\\n    }\\n\\n    function _removeRoyalsFromStaker(address staker_, uint256[] memory tokenIds_) internal {\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            for (uint256 j = 0; j < royalStakers[staker_].royals.length; j++) {\\n                if (tokenIds_[i] == royalStakers[staker_].royals[j].tokenId) {\\n                    _removeTokenFromStakerAtIndex(j, staker_, true);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _removeHabibizFromStaker(address staker_, uint256[] memory tokenIds_) internal {\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            for (uint256 j = 0; j < stakers[staker_].habibiz.length; j++) {\\n                if (tokenIds_[i] == stakers[staker_].habibiz[j].tokenId) {\\n                    _removeTokenFromStakerAtIndex(j, staker_, false);\\n                }\\n            }\\n        }\\n    }\\n\\n    function approveRescue(\\n        address revoker_,\\n        bool confirm_,\\n        bool rescueableByAdmin_\\n    ) external {\\n        require(confirm_, \\\"Did not confirm\\\");\\n        require(revoker_ != address(0), \\\"Revoker cannot be null address\\\");\\n        rescueable[msg.sender] = Rescueable(revoker_, rescueableByAdmin_);\\n    }\\n\\n    function revokeRescue(address rescueable_, bool confirm_) external {\\n        if (msg.sender == ruler) {\\n            require(rescueable[rescueable_].adminAllowedAsRevoker, \\\"Admin is not allowed to revoke\\\");\\n        } else {\\n            require(rescueable[rescueable_].revoker == msg.sender, \\\"Sender is not revoker\\\");\\n        }\\n        require(confirm_, \\\"Did not confirm\\\");\\n\\n        delete rescueable[rescueable_];\\n    }\\n\\n    /*////////////////////////////////////////////////////////////\\n                        Sacrifice for Royals\\n    ////////////////////////////////////////////////////////////*/\\n\\n    function freeze(\\n        address staker_,\\n        uint256[] calldata habibizIds_,\\n        uint256 royalId_\\n    ) external returns (bool) {\\n        require(msg.sender == address(royals), \\\"You do not have permission to call this function\\\");\\n        require(\\n            royals.ownerOf(royalId_) == address(this) && claimedRoyals[royalId_] == address(0),\\n            \\\"Invalid or claimed token id\\\"\\n        );\\n        uint256 oil;\\n\\n        for (uint256 i = 0; i < habibizIds_.length; i++) {\\n            (uint256 index, bool isOwned) = isOwnedByStaker(staker_, habibizIds_[i], false);\\n            require(isOwned, \\\"Habibi not owned\\\");\\n            oil += _calculateOil(staker_, habibizIds_[i], stakers[staker_].habibiz[index].stakedTimestamp, false);\\n            _removeTokenFromStakerAtIndex(index, staker_, false);\\n        }\\n\\n        claimedRoyals[royalId_] = staker_;\\n        royalStakers[staker_].royals.push(Royal(block.timestamp, royalId_));\\n        _claimAmount(staker_, oil, false);\\n        return true;\\n    }\\n\\n    function setRoyalOwner(\\n        address staker_,\\n        uint256 royalId_,\\n        bool force_\\n    ) external onlyRuler {\\n        require(!force_ || claimedRoyals[royalId_] == address(0), \\\"Royal already claimed\\\");\\n        claimedRoyals[royalId_] = staker_;\\n        royalStakers[staker_].royals.push(Royal(block.timestamp, royalId_));\\n    }\\n\\n    function swapRoyals(uint256 myRoyalId_, uint256 theirRoyalId_) external whenSwappingActive returns (bool) {\\n        uint256 cost = swapRoyalsCost == 0 ? swapRoyalsCost : swapRoyalsCost / 2;\\n        require(swapRoyalsCost == 0 || balanceOf[msg.sender] >= cost, \\\"Not enough OIL\\\");\\n        (uint256 index, bool isOwned) = isOwnedByStaker(msg.sender, myRoyalId_, true);\\n        require(isOwned, \\\"You don't own that Royal\\\");\\n        if (royalSwaps[theirRoyalId_] == myRoyalId_) {\\n            uint256 stakedTimestamp = royalStakers[msg.sender].royals[index].stakedTimestamp;\\n            address theirAddress = ownerOfRoyal[theirRoyalId_];\\n            (uint256 theirIndex, bool theirOwned) = isOwnedByStaker(theirAddress, theirRoyalId_, true);\\n            if (!theirOwned) {\\n                delete royalSwaps[theirRoyalId_];\\n                escrowedOil[theirRoyalId_] = 0;\\n                return false;\\n            }\\n            uint256 theirStakedTimestamp = royalStakers[theirAddress].royals[theirIndex].stakedTimestamp;\\n\\n            _removeTokenFromStakerAtIndex(index, msg.sender, true);\\n            _removeTokenFromStakerAtIndex(theirIndex, theirAddress, true);\\n\\n            royalStakers[msg.sender].royals.push(Royal(stakedTimestamp, theirRoyalId_));\\n            royalStakers[theirAddress].royals.push(Royal(theirStakedTimestamp, myRoyalId_));\\n\\n            balanceOf[msg.sender] -= cost;\\n            escrowedOil[theirRoyalId_] = 0;\\n\\n            delete royalSwaps[myRoyalId_];\\n            delete royalSwaps[theirRoyalId_];\\n            ownerOfRoyal[myRoyalId_] = theirAddress;\\n            ownerOfRoyal[theirRoyalId_] = msg.sender;\\n        } else {\\n            royalSwaps[myRoyalId_] = theirRoyalId_;\\n            balanceOf[msg.sender] -= cost;\\n            escrowedOil[myRoyalId_] += cost;\\n            ownerOfRoyal[myRoyalId_] = msg.sender;\\n        }\\n        return true;\\n    }\\n\\n    function cancelSwap(uint256 myRoyalId_) external whenSwappingActive {\\n        require(ownerOfRoyal[myRoyalId_] == msg.sender, \\\"You don't own that Royal\\\");\\n        balanceOf[msg.sender] += escrowedOil[myRoyalId_];\\n        escrowedOil[myRoyalId_] = 0;\\n        delete royalSwaps[myRoyalId_];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CLAIMING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function claim() public whenNotPaused {\\n        require(!blockList[msg.sender], \\\"Address Blocked\\\");\\n        _claim(msg.sender);\\n    }\\n\\n    function _claim(address to_) internal {\\n        uint256 oil = calculateOilRewards(to_);\\n        if (oil > 0) {\\n            _claimAmount(to_, oil, true);\\n        }\\n    }\\n\\n    function _claimAmount(\\n        address to_,\\n        uint256 amount_,\\n        bool updateLastClaimed_\\n    ) internal {\\n        if (updateLastClaimed_) stakers[to_].lastClaim = block.timestamp;\\n        _mint(to_, amount_);\\n    }\\n\\n    function unclaimedRoyals() external view returns (uint256[] memory) {\\n        uint256[] memory staked = royals.tokensOfOwner(address(this));\\n        uint256[] memory unclaimed = new uint256[](staked.length);\\n        uint256 counter;\\n        for (uint256 i = 0; i < staked.length; i++) {\\n            if (claimedRoyals[staked[i]] == address(0)) unclaimed[counter++] = staked[i];\\n        }\\n        return unclaimed;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            OIL REWARDS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function calculateOilRewards(address staker_) public view returns (uint256 oilAmount) {\\n        uint256 balanceBonus = holderBonusPercentage(staker_);\\n        uint256 habibizAmount = stakers[staker_].habibiz.length;\\n        uint256 royalsAmount = royalStakers[staker_].royals.length;\\n        uint256 totalStaked = habibizAmount + royalsAmount;\\n        uint256 royalsBase = getRoyalsBase(staker_);\\n        uint256 lastClaimTimestamp = stakers[staker_].lastClaim;\\n\\n        for (uint256 i = 0; i < totalStaked; i++) {\\n            bool isAnimated;\\n            uint256 tokenId;\\n            bool isRoyal;\\n            uint256 stakedTimestamp;\\n            if (i < habibizAmount) {\\n                tokenId = stakers[staker_].habibiz[i].tokenId;\\n                stakedTimestamp = stakers[staker_].habibiz[i].stakedTimestamp;\\n                isAnimated = _isAnimated(tokenId);\\n            } else {\\n                tokenId = royalStakers[staker_].royals[i - habibizAmount].tokenId;\\n                stakedTimestamp = royalStakers[staker_].royals[i - habibizAmount].stakedTimestamp;\\n                isRoyal = true;\\n            }\\n            oilAmount += calculateOilOfToken(\\n                isAnimated,\\n                lastClaimTimestamp,\\n                stakedTimestamp,\\n                balanceBonus,\\n                isRoyal,\\n                royalsBase\\n            );\\n        }\\n    }\\n\\n    function _calculateTimes(uint256 stakedTimestamp_, uint256 lastClaimedTimestamp_)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (lastClaimedTimestamp_ < stakedTimestamp_) {\\n            lastClaimedTimestamp_ = stakedTimestamp_;\\n        }\\n        return (block.timestamp - stakedTimestamp_, block.timestamp - lastClaimedTimestamp_);\\n    }\\n\\n    function _calculateOil(\\n        address staker_,\\n        uint256 tokenId_,\\n        uint256 stakedTimestamp_,\\n        bool isRoyal_\\n    ) internal view returns (uint256) {\\n        uint256 balanceBonus = holderBonusPercentage(staker_);\\n        uint256 lastClaimTimestamp = stakers[staker_].lastClaim;\\n        uint256 royalsBase = getRoyalsBase(staker_);\\n        return\\n            calculateOilOfToken(\\n                isRoyal_ ? false : _isAnimated(tokenId_),\\n                lastClaimTimestamp,\\n                stakedTimestamp_,\\n                balanceBonus,\\n                isRoyal_,\\n                royalsBase\\n            );\\n    }\\n\\n    function calculateOilOfToken(\\n        bool isAnimated_,\\n        uint256 lastClaimedTimestamp_,\\n        uint256 stakedTimestamp_,\\n        uint256 balanceBonus_,\\n        bool isRoyal_,\\n        uint256 royalsBase\\n    ) internal view returns (uint256 oil) {\\n        uint256 bonusPercentage;\\n\\n        (uint256 stakedTime, uint256 unclaimedTime) = _calculateTimes(stakedTimestamp_, lastClaimedTimestamp_);\\n\\n        if (stakedTime >= 90 days) {\\n            bonusPercentage = 100;\\n        } else {\\n            for (uint256 i = 2; i < 4; i++) {\\n                uint256 timeRequirement = 15 days * i;\\n                if (timeRequirement > 0 && timeRequirement <= stakedTime) {\\n                    bonusPercentage += 15;\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (isRoyal_) {\\n            oil = (unclaimedTime * royalsBase * 1 ether) / 1 days;\\n        } else if (isAnimated_) {\\n            oil = (unclaimedTime * 5000 ether) / 1 days;\\n        } else {\\n            bonusPercentage += balanceBonus_;\\n            oil = (unclaimedTime * 1000 ether) / 1 days;\\n        }\\n        oil += ((oil * bonusPercentage) / 100);\\n    }\\n\\n    function getRoyalsBase(address staker_) public view returns (uint256 base) {\\n        if (royalStakers[staker_].royals.length == 1) {\\n            base = 12000;\\n        } else if (royalStakers[staker_].royals.length == 2) {\\n            base = 13500;\\n        } else if (royalStakers[staker_].royals.length >= 3) {\\n            base = 15000;\\n        } else {\\n            base = 0;\\n        }\\n    }\\n\\n    function staker(address staker_) public view returns (Staker memory, RoyalStaker memory) {\\n        return (stakers[staker_], royalStakers[staker_]);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            OIL PRIVILEGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mint(address to, uint256 value) external onlyMinter {\\n        _mint(to, value);\\n    }\\n\\n    function burn(address from, uint256 value) external onlyMinter {\\n        _burn(from, value);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         Ruler Function\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setMinter(address minter_, bool canMint_) external onlyRuler {\\n        isMinter[minter_] = canMint_;\\n    }\\n\\n    function setRuler(address ruler_) external onlyRuler {\\n        ruler = ruler_;\\n    }\\n\\n    function setPaused(bool paused_) external onlyRuler {\\n        paused = paused_;\\n    }\\n\\n    function setHabibiAddress(address habibiAddress_) external onlyRuler {\\n        habibi = ERC721Like(habibiAddress_);\\n    }\\n\\n    function setRoyalsAddress(address royalsAddress_) external onlyRuler {\\n        royals = ERC721Like(royalsAddress_);\\n    }\\n\\n    function setSellFee(uint256 fee_) external onlyRuler {\\n        sellFee = fee_;\\n    }\\n\\n    function setUniswapV2Router(address router_) external onlyRuler {\\n        uniswapV2Router = IUniswapV2Router02(router_);\\n    }\\n\\n    function setSushiswapV2Router(address router_) external onlyRuler {\\n        sushiswapV2Router = IUniswapV2Router02(router_);\\n    }\\n\\n    function setV2Routers(address uniswapRouter_, address sushiswapRouter_) external onlyRuler {\\n        uniswapV2Router = IUniswapV2Router02(uniswapRouter_);\\n        sushiswapV2Router = IUniswapV2Router02(sushiswapRouter_);\\n    }\\n\\n    function setUniPair(address uniPair_) external onlyRuler {\\n        uniPair = uniPair_;\\n    }\\n\\n    function setSushiswapPair(address sushiswapPair_) external onlyRuler {\\n        sushiswapPair = sushiswapPair_;\\n    }\\n\\n    function setPairs(address uniPair_, address sushiswapPair_) external onlyRuler {\\n        uniPair = uniPair_;\\n        sushiswapPair = sushiswapPair_;\\n    }\\n\\n    function excludeFromFees(address[] calldata addresses_, bool[] calldata excluded_) external onlyRuler {\\n        for (uint256 i = 0; i < addresses_.length; i++) {\\n            excludedFromFees[addresses_[i]] = excluded_[i];\\n        }\\n    }\\n\\n    function blockOrUnblockAddresses(address[] calldata addresses_, bool[] calldata blocked_) external onlyRuler {\\n        for (uint256 i = 0; i < addresses_.length; i++) {\\n            blockList[addresses_[i]] = blocked_[i];\\n        }\\n    }\\n\\n    function setRoyalSwapCost(uint256 cost_) external onlyRuler {\\n        swapRoyalsCost = cost_;\\n    }\\n\\n    function setSwappingActive(bool active_) external onlyRuler {\\n        swappingActive = active_;\\n    }\\n\\n    function setRoyalsHabibiRatio(uint256 ratio_) external onlyRuler {\\n        royalsHabibiRatio = ratio_;\\n    }\\n\\n    /// emergency\\n    function rescue(\\n        address staker_,\\n        address to_,\\n        uint256[] calldata habibiIds_,\\n        uint256[] calldata royalIds_\\n    ) external onlyRuler {\\n        require(rescueable[staker_].revoker != address(0), \\\"User has not opted-in for rescue\\\");\\n        if (habibiIds_.length > 0) {\\n            for (uint256 i = 0; i < habibiIds_.length; i++) {\\n                (uint256 stakedIndex, bool isOwned) = isOwnedByStaker(staker_, habibiIds_[i], false);\\n                require(isOwned, \\\"Habibi TokenID not found\\\");\\n                stakers[to_].habibiz.push(Habibi(block.timestamp, habibiIds_[i]));\\n                _removeTokenFromStakerAtIndex(stakedIndex, staker_, false);\\n            }\\n        }\\n\\n        if (royalIds_.length > 0) {\\n            for (uint256 i = 0; i < royalIds_.length; i++) {\\n                (uint256 stakedIndex, bool isOwned) = isOwnedByStaker(staker_, royalIds_[i], true);\\n                require(isOwned, \\\"Royal TokenID not found\\\");\\n                royalStakers[to_].royals.push(Royal(block.timestamp, royalIds_[i]));\\n                _removeTokenFromStakerAtIndex(stakedIndex, staker_, true);\\n            }\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          INTERNAL UTILS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _getRouterFromPair(address pairAddress_) internal view returns (IUniswapV2Router02) {\\n        return pairAddress_ == address(uniPair) ? uniswapV2Router : sushiswapV2Router;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(balanceOf[from] >= value, \\\"ERC20: transfer amount exceeds balance\\\");\\n        uint256 tax;\\n\\n        bool shouldTax = ((to == uniPair && balanceOf[to] != 0) || (to == sushiswapPair && balanceOf[to] != 0)) &&\\n            !swapping;\\n        if (shouldTax && !excludedFromFees[from]) {\\n            tax = (value * sellFee) / 100_000;\\n            if (tax > 0) {\\n                balanceOf[address(this)] += tax;\\n                swapTokensForEth(to, tax, treasury);\\n            }\\n        }\\n        uint256 taxedAmount = value - tax;\\n        balanceOf[from] -= value;\\n        balanceOf[to] += taxedAmount;\\n        emit Transfer(from, to, taxedAmount);\\n    }\\n\\n    function swapTokensForEth(\\n        address pairAddress_,\\n        uint256 amountIn_,\\n        address to_\\n    ) private lockTheSwap {\\n        IUniswapV2Router02 router = _getRouterFromPair(pairAddress_);\\n        IERC20(address(this)).approve(address(router), amountIn_);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH(); // or router.WETH();\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn_, 1, path, to_, block.timestamp);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n\\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n\\n        // This is safe because a user won't ever\\n        // have a balance larger than totalSupply!\\n        unchecked {\\n            totalSupply -= value;\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function holderBonusPercentage(address staker_) public view returns (uint256) {\\n        uint256 balance = stakers[staker_].habibiz.length + royalStakers[staker_].royals.length * royalsHabibiRatio;\\n\\n        if (balance < 5) return 0;\\n        if (balance < 10) return 15;\\n        if (balance < 20) return 25;\\n        return 35;\\n    }\\n\\n    function _isAnimated(uint256 id_) internal pure returns (bool animated) {\\n        return\\n            id_ == 40 ||\\n            id_ == 108 ||\\n            id_ == 169 ||\\n            id_ == 191 ||\\n            id_ == 246 ||\\n            id_ == 257 ||\\n            id_ == 319 ||\\n            id_ == 386 ||\\n            id_ == 496 ||\\n            id_ == 562 ||\\n            id_ == 637 ||\\n            id_ == 692 ||\\n            id_ == 832 ||\\n            id_ == 942 ||\\n            id_ == 943 ||\\n            id_ == 957 ||\\n            id_ == 1100 ||\\n            id_ == 1108 ||\\n            id_ == 1169 ||\\n            id_ == 1178 ||\\n            id_ == 1627 ||\\n            id_ == 1706 ||\\n            id_ == 1843 ||\\n            id_ == 1884 ||\\n            id_ == 2137 ||\\n            id_ == 2158 ||\\n            id_ == 2165 ||\\n            id_ == 2214 ||\\n            id_ == 2232 ||\\n            id_ == 2238 ||\\n            id_ == 2508 ||\\n            id_ == 2629 ||\\n            id_ == 2863 ||\\n            id_ == 3055 ||\\n            id_ == 3073 ||\\n            id_ == 3280 ||\\n            id_ == 3297 ||\\n            id_ == 3322 ||\\n            id_ == 3327 ||\\n            id_ == 3361 ||\\n            id_ == 3411 ||\\n            id_ == 3605 ||\\n            id_ == 3639 ||\\n            id_ == 3774 ||\\n            id_ == 4250 ||\\n            id_ == 4267 ||\\n            id_ == 4302 ||\\n            id_ == 4362 ||\\n            id_ == 4382 ||\\n            id_ == 4397 ||\\n            id_ == 4675 ||\\n            id_ == 4707 ||\\n            id_ == 4863;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          MODIFIERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    modifier onlyMinter() {\\n        require(isMinter[msg.sender], \\\"FORBIDDEN TO MINT OR BURN\\\");\\n        _;\\n    }\\n\\n    modifier onlyRuler() {\\n        require(msg.sender == ruler, \\\"NOT ALLOWED TO RULE\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenSwappingActive() {\\n        require(swappingActive, \\\"Swapping is paused\\\");\\n        _;\\n    }\\n\\n    modifier lockTheSwap() {\\n        swapping = true;\\n        _;\\n        swapping = false;\\n    }\\n\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4) {\\n        return ERC721Like.onERC721Received.selector;\\n    }\\n}\\n\\ninterface ERC721Like {\\n    function balanceOf(address holder_) external view returns (uint256);\\n\\n    function ownerOf(uint256 id_) external view returns (address);\\n\\n    function walletOfOwner(address _owner) external view returns (uint256[] calldata);\\n\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n\\n    function isApprovedForAll(address operator_, address address_) external view returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ninterface UniPairLike {\\n    function token0() external returns (address);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oilContract_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oilContract\",\"outputs\":[{\"internalType\":\"contract Oil\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"secondsStakedOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"stakedTimeOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC721Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueOwnerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "BibizStakeUpgradeable", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}