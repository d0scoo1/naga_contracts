{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/pCNV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.13;\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\nimport {ICNV} from \\\"./interface/ICNV.sol\\\";\\n\\ncontract pCNV is ERC20, Owned {\\n    ////////////////////////////////////////////////////////////////////////////\\n    // EVENTS\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    event Paused(bool indexed _paused);\\n\\n    event Mint(uint256 indexed _amount);\\n\\n    event Redemption(\\n        address indexed _from,\\n        address indexed _who,\\n        uint256 indexed _amount\\n    );\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // CONSTANT\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice time vesting begins: 1656633600 (Fri Jul 01 2022 00:00:00 GMT+0000)\\n    uint256 public constant VESTING_TIME_START = 1656633600;\\n    /// @notice time linear-vesting begins: 1680307200 (Sat Apr 01 2023 00:00:00 GMT+0000)\\n    uint256 public constant LINEAR_VESTING_TIME_START = 1680307200;\\n    /// @notice time vesting ends: 1711929600 (Mon Apr 01 2024 00:00:00 GMT+0000)\\n    uint256 public constant VESTING_TIME_END = 1711929600;\\n    /// @notice duration of linear-vesting: 31622400\\n    uint256 public constant LINEAR_VESTING_TIME_LENGTH = 31622400;\\n    /// @notice vesting begins at 50%\\n    uint256 public constant VESTING_AMOUNT_START = 5e17;\\n    /// @notice vesting grows to 100%, thus has a length of 50\\n    uint256 public constant VESTING_AMOUNT_LENGTH = 5e17;\\n    /// @notice max supply of 33,300,000\\n    uint256 public constant MAX_SUPPLY = 333e23;\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // STATE\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice address of CNV Token\\n    address public immutable CNV;\\n    /// @notice redeem paused;\\n    bool public paused;\\n    /// @notice total minted amount\\n    uint256 public totalMinted;\\n    /// @notice mapping of how many CNV tokens a pCNV holder has redeemed\\n    mapping(address => uint256) public redeemed;\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // CONSTRUCTOR\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    constructor(address _CNV)\\n        ERC20(\\\"Concave pCNV\\\", \\\"pCNV\\\", 18)\\n        Owned(0x226e7AF139a0F34c6771DeB252F9988876ac1Ced)\\n    {\\n        CNV = _CNV;\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // ADMIN/MGMT\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    function setPause(bool _paused) external onlyOwner {\\n        paused = _paused;\\n\\n        emit Paused(paused);\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyOwner {\\n        require(to != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(totalMinted + amount <= MAX_SUPPLY, \\\"MAX_SUPPLY\\\");\\n\\n        // Cannot overflow because the total minted\\n        // can't exceed the max uint256 value.\\n        unchecked {\\n            totalMinted += amount;\\n        }\\n\\n        _mint(to, amount);\\n\\n        emit Mint(amount);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // ERC20 LOGIC\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    function transfer(address to, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        // Update redeemed\\n        uint256 amountRedeemed = (redeemed[msg.sender] * amount) /\\n            balanceOf[msg.sender];\\n\\n        redeemed[msg.sender] -= amountRedeemed;\\n\\n        // Update balance\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            redeemed[to] += amountRedeemed;\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        // Update allowance\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max)\\n            allowance[from][msg.sender] = allowed - amount;\\n\\n        // Update redeemed\\n        uint256 amountRedeemed = (redeemed[from] * amount) / balanceOf[from];\\n\\n        redeemed[from] -= amountRedeemed;\\n\\n        // Update balance\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            redeemed[to] += amountRedeemed;\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // ACTIONS\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice             redeem pCNV for CNV following vesting schedule\\n    /// @param  _amount     amount of CNV to redeem, irrelevant if _max = true\\n    /// @param  _who        address of pCNV holder to redeem\\n    /// @param  _to         address to which to mint CNV\\n    /// @param  _max        whether to redeem maximum amount possible\\n    /// @return amountOut   amount of CNV tokens to be minted to _to\\n    function redeem(\\n        uint256 _amount,\\n        address _who,\\n        address _to,\\n        bool _max\\n    ) external returns (uint256 amountOut) {\\n        // Check if it's paused\\n        require(!paused, \\\"PAUSED\\\");\\n\\n        // Get user pCNV balance\\n        // If empty balance - revert on \\\"FULLY_REDEEMED\\\" since\\n        // all balance has already been burnt to redeem.\\n        uint256 pCNVBalance = balanceOf[_who];\\n        require(pCNVBalance > 0, \\\"NONE_LEFT\\\");\\n\\n        // Check how much is currently vested for user.\\n        uint256 currentTime = block.timestamp;\\n        require(currentTime >= VESTING_TIME_START, \\\"!VESTING\\\");\\n        uint256 amountRedeemed = redeemed[_who];\\n        uint256 amountVested;\\n        if (currentTime >= VESTING_TIME_END) {\\n            amountVested = pCNVBalance + amountRedeemed;\\n        } else {\\n            uint256 vpct = vestedPercent(currentTime);\\n            amountVested = ((pCNVBalance + amountRedeemed) * vpct) / 1e18;\\n        }\\n        require(amountVested > amountRedeemed, \\\"NONE_LEFT\\\");\\n\\n        // If _max was not selected and thus a specified amount is to be\\n        // redeemed, ensure this amount doesn't exceed amountRedeemable.\\n        uint256 amountRedeemable = amountVested - amountRedeemed;\\n        if (!_max) {\\n            require(amountRedeemable >= _amount, \\\"EXCEEDS\\\");\\n            amountRedeemable = _amount;\\n        }\\n\\n        // In case of vault calling on behalf of user, check that user has\\n        // allowed vault to redeem on behalf of user by checking allowance.\\n        if (_who != msg.sender) {\\n            uint256 allowed = allowance[_who][msg.sender];\\n            require(allowed >= amountRedeemable, \\\"!ALLOWED\\\");\\n            if (allowed != type(uint256).max)\\n                allowance[_who][msg.sender] = allowed - amountRedeemable;\\n        }\\n\\n        // Update state to reflect redemption.\\n        redeemed[_who] = amountRedeemed + amountRedeemable;\\n\\n        // Burn pCNV\\n        _burn(_who, amountRedeemable);\\n\\n        // Calculate CNV amount out as total supply of pCNV represents a constant\\n        // claim on 0.1 (10%) of CNV's total supply.\\n        amountOut =\\n            (ICNV(CNV).totalSupply() * amountRedeemable) /\\n            (10 * MAX_SUPPLY);\\n\\n        // Mint CNV\\n        ICNV(CNV).mint(_to, amountOut);\\n\\n        emit Redemption(msg.sender, _who, amountOut);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // VIEW\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice         to view how much a holder has redeemable\\n    /// @param  _who    pHolder address\\n    /// @return         amount redeemable\\n    function redeemable(address _who) external view returns (uint256) {\\n        uint256 pCNVBalance = balanceOf[_who];\\n        if (pCNVBalance == 0) return 0;\\n\\n        uint256 currentTime = block.timestamp;\\n        if (currentTime < VESTING_TIME_START) return 0;\\n\\n        uint256 amountRedeemed = redeemed[_who];\\n        uint256 amountVested;\\n        if (currentTime >= VESTING_TIME_END) {\\n            amountVested = pCNVBalance + amountRedeemed;\\n        } else {\\n            uint256 vpct = vestedPercent(currentTime);\\n            amountVested = ((pCNVBalance + amountRedeemed) * vpct) / 1e18;\\n        }\\n        if (amountVested <= amountRedeemed) return 0;\\n\\n        return amountVested - amountRedeemed;\\n    }\\n\\n    /// @notice         returns the percent of holdings vested for a given point\\n    ///                 in time.\\n    /// @param  _time   point in time\\n    /// @return         percent of holdings vested\\n    function vestedPercent(uint256 _time) public pure returns (uint256) {\\n        // Before VestingTimeStart: 0%\\n        if (_time < VESTING_TIME_START) {\\n            return 0;\\n        }\\n\\n        // VestingTimeStart ~ LinearVestingTimeStart: 50%\\n        if (_time <= LINEAR_VESTING_TIME_START) {\\n            return VESTING_AMOUNT_START;\\n        }\\n\\n        // After VestingTimeEnd\\n        if (_time >= VESTING_TIME_END) {\\n            return 1e18;\\n        }\\n\\n        // LinearVestingTimeStart ~ VestingTimeEnd: 50% ~ 100% (Linear)\\n        // LinearVestingTimeLength: duration of linear vesting\\n        uint256 pctOf = _percentOf(\\n            LINEAR_VESTING_TIME_START,\\n            _time,\\n            LINEAR_VESTING_TIME_LENGTH\\n        );\\n        return\\n            _linearMapping(VESTING_AMOUNT_START, pctOf, VESTING_AMOUNT_LENGTH);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // INTERNAL\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice             returns the elapsed percentage of a point within\\n    ///                     a given range\\n    /// @param  _start      starting point\\n    /// @param  _point      current point\\n    /// @param  _length     lenght\\n    /// @return elapsedPct  percent from _start\\n    function _percentOf(\\n        uint256 _start,\\n        uint256 _point,\\n        uint256 _length\\n    ) internal pure returns (uint256 elapsedPct) {\\n        uint256 elapsed = _point - _start;\\n        elapsedPct = (elapsed * 1e18) / _length;\\n    }\\n\\n    /// @notice             linearly maps a percentage point to a range\\n    /// @param  _start      starting point\\n    /// @param  _pct        percentage point\\n    /// @param  _length     lenght\\n    /// @return point       point\\n    function _linearMapping(\\n        uint256 _start,\\n        uint256 _pct,\\n        uint256 _length\\n    ) internal pure returns (uint256 point) {\\n        uint256 elapsed = (_length * _pct) / 1e18;\\n        point = _start + elapsed;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnerUpdated(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setOwner(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interface/ICNV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface ICNV {\\n    function mint(address account, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CNV\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CNV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINEAR_VESTING_TIME_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINEAR_VESTING_TIME_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_AMOUNT_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_AMOUNT_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_TIME_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_TIME_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_max\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"redeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"vestedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "pCNV", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000007a58f5f58e697e51ab0357bc9e260a04", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}