{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"checker.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"Ownable.sol\\\";\\r\\n\\r\\ninterface IBentoBox {\\r\\n  struct StrategyData {\\r\\n    uint64 strategyStartDate;\\r\\n    uint64 targetPercentage;\\r\\n    uint128 balance;\\r\\n  }\\r\\n\\r\\n  struct Rebase {\\r\\n    uint128 elastic;\\r\\n    uint128 base;\\r\\n  }\\r\\n\\r\\n  function totals(address token) external view returns (Rebase memory);\\r\\n  function strategyData(address token) external view returns (StrategyData memory);\\r\\n  function harvest(address token, bool rebalance, uint256 maxChange) external;\\r\\n}\\r\\n\\r\\ncontract UtilizationChecker is Ownable {\\r\\n  IBentoBox constant BentoBox = IBentoBox(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966);\\r\\n\\r\\n  uint256 constant UTILIZATION_PRECISION = 1e6;\\r\\n\\r\\n  struct Strategy {\\r\\n    address token;\\r\\n    uint256 maxUtilization;\\r\\n    uint256 minUtilization;\\r\\n    bool enabled;\\r\\n  }\\r\\n\\r\\n  Strategy[] public strategies;\\r\\n\\r\\n  function addStrategies(address[] calldata tokens, uint256[] calldata maxUtilizations, uint256[] calldata minUtilizations) external onlyOwner {\\r\\n    for(uint256 i = 0; i \\u003c tokens.length; i++) {\\r\\n      strategies.push(Strategy(tokens[i], maxUtilizations[i] * UTILIZATION_PRECISION, minUtilizations[i] * UTILIZATION_PRECISION, true));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setStrategies(uint256[] calldata indexes, uint256[] calldata maxUtilizations, uint256[] calldata minUtilizations, bool[] calldata enableds) external onlyOwner {\\r\\n    for(uint256 i = 0; i \\u003c indexes.length; i++) {\\r\\n      strategies[indexes[i]] = Strategy(strategies[indexes[i]].token, maxUtilizations[i] * UTILIZATION_PRECISION, minUtilizations[i] * UTILIZATION_PRECISION, enableds[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function checker() external view returns (bool canExec, bytes memory execPayload) {\\r\\n    for(uint256 i = 0; i \\u003c strategies.length; i++) {\\r\\n      Strategy memory strategy = strategies[i];\\r\\n\\r\\n      if(strategy.enabled == false) {\\r\\n        continue;\\r\\n      }\\r\\n\\r\\n      IBentoBox.Rebase memory totals = BentoBox.totals(strategy.token);\\r\\n      IBentoBox.StrategyData memory strategyData = BentoBox.strategyData(strategies[i].token);\\r\\n\\r\\n      uint256 currentPercentage = (strategyData.balance * UTILIZATION_PRECISION / totals.elastic) * 100;\\r\\n\\r\\n      if(currentPercentage \\u003e= strategy.maxUtilization || currentPercentage \\u003c= strategy.minUtilization) {\\r\\n        canExec = true;\\r\\n        execPayload = abi.encodeWithSelector(\\r\\n            IBentoBox.harvest.selector,\\r\\n            strategy.token,\\r\\n            true,\\r\\n            0\\r\\n        );\\r\\n\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxUtilizations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minUtilizations\",\"type\":\"uint256[]\"}],\"name\":\"addStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxUtilizations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minUtilizations\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"enableds\",\"type\":\"bool[]\"}],\"name\":\"setStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxUtilization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUtilization\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UtilizationChecker", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://40d386897984cb1fc82449ed93b5f61c790ed0ba4de1ba129689f7a9f3ea5889"}]}