{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.8.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/access/IAccessControl.sol@v4.4.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.4.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.4.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.4.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.4.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControl.sol@v4.4.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.4.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBribeVault.sol\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\ninterface IBribeVault {\r\n    function depositBribeERC20(\r\n        bytes32 bribeIdentifier,\r\n        bytes32 rewardIdentifier,\r\n        address token,\r\n        uint256 amount,\r\n        address briber\r\n    ) external;\r\n\r\n    function getBribe(bytes32 bribeIdentifier)\r\n        external\r\n        view\r\n        returns (address token, uint256 amount);\r\n\r\n    function depositBribe(\r\n        bytes32 bribeIdentifier,\r\n        bytes32 rewardIdentifier,\r\n        address briber\r\n    ) external payable;\r\n}\r\n\r\n\r\n// File contracts/BribeBase.sol\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\n\r\ncontract BribeBase is AccessControl, ReentrancyGuard {\r\n    address public immutable BRIBE_VAULT;\r\n    bytes32 public constant TEAM_ROLE = keccak256(\"TEAM_ROLE\");\r\n\r\n    // Used for generating the bribe and reward identifiers\r\n    bytes32 public immutable PROTOCOL;\r\n\r\n    // Arbitrary bytes mapped to deadlines\r\n    mapping(bytes32 => uint256) public proposalDeadlines;\r\n\r\n    // Voter addresses mapped to addresses which will claim rewards on their behalf\r\n    mapping(address => address) public rewardForwarding;\r\n\r\n    // Tracks whitelisted tokens\r\n    mapping(address => uint256) public indexOfWhitelistedToken;\r\n    address[] public allWhitelistedTokens;\r\n\r\n    event GrantTeamRole(address teamMember);\r\n    event RevokeTeamRole(address teamMember);\r\n    event SetProposal(bytes32 indexed proposal, uint256 deadline);\r\n    event DepositBribe(\r\n        bytes32 indexed proposal,\r\n        address indexed token,\r\n        uint256 amount,\r\n        bytes32 bribeIdentifier,\r\n        bytes32 rewardIdentifier,\r\n        address indexed briber\r\n    );\r\n    event SetRewardForwarding(address from, address to);\r\n    event AddWhitelistTokens(address[] tokens);\r\n    event RemoveWhitelistTokens(address[] tokens);\r\n\r\n    constructor(address _BRIBE_VAULT, string memory _PROTOCOL) {\r\n        require(_BRIBE_VAULT != address(0), \"Invalid _BRIBE_VAULT\");\r\n        BRIBE_VAULT = _BRIBE_VAULT;\r\n\r\n        require(bytes(_PROTOCOL).length != 0, \"Invalid _PROTOCOL\");\r\n        PROTOCOL = keccak256(abi.encodePacked(_PROTOCOL));\r\n\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\r\n                hasRole(TEAM_ROLE, msg.sender),\r\n            \"Not authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @notice Grant the team role to an address\r\n        @param  teamMember  address  Address to grant the teamMember role\r\n     */\r\n    function grantTeamRole(address teamMember)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(teamMember != address(0), \"Invalid teamMember\");\r\n        _grantRole(TEAM_ROLE, teamMember);\r\n\r\n        emit GrantTeamRole(teamMember);\r\n    }\r\n\r\n    /**\r\n        @notice Revoke the team role from an address\r\n        @param  teamMember  address  Address to revoke the teamMember role\r\n     */\r\n    function revokeTeamRole(address teamMember)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(hasRole(TEAM_ROLE, teamMember), \"Invalid teamMember\");\r\n        _revokeRole(TEAM_ROLE, teamMember);\r\n\r\n        emit RevokeTeamRole(teamMember);\r\n    }\r\n\r\n    /**\r\n        @notice Return the list of currently whitelisted token addresses\r\n     */\r\n    function getWhitelistedTokens() external view returns (address[] memory) {\r\n        return allWhitelistedTokens;\r\n    }\r\n\r\n    /**\r\n        @notice Return whether the specified token is whitelisted\r\n        @param  token  address Token address to be checked\r\n     */\r\n    function isWhitelistedToken(address token) public view returns (bool) {\r\n        if (allWhitelistedTokens.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        return\r\n            indexOfWhitelistedToken[token] != 0 ||\r\n            allWhitelistedTokens[0] == token;\r\n    }\r\n\r\n    /**\r\n        @notice Add whitelist tokens\r\n        @param  tokens  address[]  Tokens to add to whitelist\r\n     */\r\n    function addWhitelistTokens(address[] calldata tokens)\r\n        external\r\n        onlyAuthorized\r\n    {\r\n        for (uint256 i; i < tokens.length; ++i) {\r\n            require(tokens[i] != address(0), \"Invalid token\");\r\n            require(tokens[i] != BRIBE_VAULT, \"Cannot whitelist BRIBE_VAULT\");\r\n            require(\r\n                !isWhitelistedToken(tokens[i]),\r\n                \"Token already whitelisted\"\r\n            );\r\n\r\n            // Perform creation op for the unordered key set\r\n            allWhitelistedTokens.push(tokens[i]);\r\n            indexOfWhitelistedToken[tokens[i]] =\r\n                allWhitelistedTokens.length -\r\n                1;\r\n        }\r\n\r\n        emit AddWhitelistTokens(tokens);\r\n    }\r\n\r\n    /**\r\n        @notice Remove whitelist tokens\r\n        @param  tokens  address[]  Tokens to remove from whitelist\r\n     */\r\n    function removeWhitelistTokens(address[] calldata tokens)\r\n        external\r\n        onlyAuthorized\r\n    {\r\n        for (uint256 i; i < tokens.length; ++i) {\r\n            require(isWhitelistedToken(tokens[i]), \"Token not whitelisted\");\r\n\r\n            // Perform deletion op for the unordered key set\r\n            // by swapping the affected row to the end/tail of the list\r\n            uint256 index = indexOfWhitelistedToken[tokens[i]];\r\n            address tail = allWhitelistedTokens[\r\n                allWhitelistedTokens.length - 1\r\n            ];\r\n\r\n            allWhitelistedTokens[index] = tail;\r\n            indexOfWhitelistedToken[tail] = index;\r\n\r\n            delete indexOfWhitelistedToken[tokens[i]];\r\n            allWhitelistedTokens.pop();\r\n        }\r\n\r\n        emit RemoveWhitelistTokens(tokens);\r\n    }\r\n\r\n    /**\r\n        @notice Set a single proposal\r\n        @param  proposal  bytes32  Proposal\r\n        @param  deadline  uint256  Proposal deadline\r\n     */\r\n    function _setProposal(bytes32 proposal, uint256 deadline) internal {\r\n        require(proposal != bytes32(0), \"Invalid proposal\");\r\n        require(deadline > block.timestamp, \"Deadline must be in the future\");\r\n\r\n        proposalDeadlines[proposal] = deadline;\r\n\r\n        emit SetProposal(proposal, deadline);\r\n    }\r\n\r\n    /**\r\n        @notice Generate the BribeVault identifier based on a scheme\r\n        @param  proposal          bytes32  Proposal\r\n        @param  proposalDeadline  uint256  Proposal deadline\r\n        @param  token             address  Token\r\n        @return identifier        bytes32  BribeVault identifier\r\n     */\r\n    function generateBribeVaultIdentifier(\r\n        bytes32 proposal,\r\n        uint256 proposalDeadline,\r\n        address token\r\n    ) public view returns (bytes32 identifier) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(PROTOCOL, proposal, proposalDeadline, token)\r\n            );\r\n    }\r\n\r\n    /**\r\n        @notice Generate the reward identifier based on a scheme\r\n        @param  proposalDeadline  uint256  Proposal deadline\r\n        @param  token             address  Token\r\n        @return identifier        bytes32  Reward identifier\r\n     */\r\n    function generateRewardIdentifier(uint256 proposalDeadline, address token)\r\n        public\r\n        view\r\n        returns (bytes32 identifier)\r\n    {\r\n        return keccak256(abi.encodePacked(PROTOCOL, proposalDeadline, token));\r\n    }\r\n\r\n    /**\r\n        @notice Get bribe from BribeVault\r\n        @param  proposal          bytes32  Proposal\r\n        @param  proposalDeadline  uint256  Proposal deadline\r\n        @param  token             address  Token\r\n        @return bribeToken        address  Token address\r\n        @return bribeAmount       address  Token amount\r\n     */\r\n    function getBribe(\r\n        bytes32 proposal,\r\n        uint256 proposalDeadline,\r\n        address token\r\n    ) external view returns (address bribeToken, uint256 bribeAmount) {\r\n        return\r\n            IBribeVault(BRIBE_VAULT).getBribe(\r\n                generateBribeVaultIdentifier(proposal, proposalDeadline, token)\r\n            );\r\n    }\r\n\r\n    /**\r\n        @notice Deposit bribe for a proposal (ERC20 tokens only)\r\n        @param  proposal  bytes32  Proposal\r\n        @param  token     address  Token\r\n        @param  amount    uint256  Token amount\r\n     */\r\n    function depositBribeERC20(\r\n        bytes32 proposal,\r\n        address token,\r\n        uint256 amount\r\n    ) external nonReentrant {\r\n        uint256 proposalDeadline = proposalDeadlines[proposal];\r\n        require(\r\n            proposalDeadlines[proposal] > block.timestamp,\r\n            \"Proposal deadline has passed\"\r\n        );\r\n        require(token != address(0), \"Invalid token\");\r\n        require(isWhitelistedToken(token), \"Token is not whitelisted\");\r\n        require(amount != 0, \"Bribe amount must be greater than 0\");\r\n\r\n        bytes32 bribeIdentifier = generateBribeVaultIdentifier(\r\n            proposal,\r\n            proposalDeadline,\r\n            token\r\n        );\r\n        bytes32 rewardIdentifier = generateRewardIdentifier(\r\n            proposalDeadline,\r\n            token\r\n        );\r\n\r\n        IBribeVault(BRIBE_VAULT).depositBribeERC20(\r\n            bribeIdentifier,\r\n            rewardIdentifier,\r\n            token,\r\n            amount,\r\n            msg.sender\r\n        );\r\n\r\n        emit DepositBribe(\r\n            proposal,\r\n            token,\r\n            amount,\r\n            bribeIdentifier,\r\n            rewardIdentifier,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n        @notice Deposit bribe for a proposal (native token only)\r\n        @param  proposal  bytes32  Proposal\r\n     */\r\n    function depositBribe(bytes32 proposal) external payable nonReentrant {\r\n        uint256 proposalDeadline = proposalDeadlines[proposal];\r\n        require(\r\n            proposalDeadlines[proposal] > block.timestamp,\r\n            \"Proposal deadline has passed\"\r\n        );\r\n        require(msg.value != 0, \"Bribe amount must be greater than 0\");\r\n\r\n        bytes32 bribeIdentifier = generateBribeVaultIdentifier(\r\n            proposal,\r\n            proposalDeadline,\r\n            BRIBE_VAULT\r\n        );\r\n        bytes32 rewardIdentifier = generateRewardIdentifier(\r\n            proposalDeadline,\r\n            BRIBE_VAULT\r\n        );\r\n\r\n        // NOTE: Native token bribes have BRIBE_VAULT set as the address\r\n        IBribeVault(BRIBE_VAULT).depositBribe{value: msg.value}(\r\n            bribeIdentifier,\r\n            rewardIdentifier,\r\n            msg.sender\r\n        );\r\n\r\n        emit DepositBribe(\r\n            proposal,\r\n            BRIBE_VAULT,\r\n            msg.value,\r\n            bribeIdentifier,\r\n            rewardIdentifier,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n        @notice Voters can opt in or out of reward-forwarding\r\n        @notice Opt-in: A voter sets another address to forward rewards to\r\n        @notice Opt-out: A voter sets their own address or the zero address\r\n        @param  to  address  Account that rewards will be sent to\r\n     */\r\n    function setRewardForwarding(address to) external {\r\n        rewardForwarding[msg.sender] = to;\r\n\r\n        emit SetRewardForwarding(msg.sender, to);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/AuraBribe.sol\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\ncontract AuraBribe is BribeBase {\r\n    event SetProposalChoices(\r\n        uint256 indexed proposalIndex,\r\n        uint256 choiceCount,\r\n        uint256 deadline\r\n    );\r\n\r\n    constructor(address _BRIBE_VAULT) BribeBase(_BRIBE_VAULT, \"AURA_FINANCE\") {}\r\n\r\n    /**\r\n        @notice Set proposals based on the index of the proposal and the number of choices\r\n        @param  proposalIndex   uint256  Proposal index\r\n        @param  choiceCount     uint256  Number of choices to be voted for\r\n        @param  deadline        uint256  Proposal deadline\r\n     */\r\n    function setProposalChoices(\r\n        uint256 proposalIndex,\r\n        uint256 choiceCount,\r\n        uint256 deadline\r\n    ) external onlyAuthorized {\r\n        require(choiceCount != 0, \"Invalid number of choices\");\r\n\r\n        for (uint256 i; i < choiceCount; ++i) {\r\n            // The final proposalId is built from encoding both the index and the choice index\r\n            _setProposal(\r\n                keccak256(abi.encodePacked(proposalIndex, i)),\r\n                deadline\r\n            );\r\n        }\r\n\r\n        emit SetProposalChoices(proposalIndex, choiceCount, deadline);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BRIBE_VAULT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"AddWhitelistTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bribeIdentifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rewardIdentifier\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"briber\",\"type\":\"address\"}],\"name\":\"DepositBribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamMember\",\"type\":\"address\"}],\"name\":\"GrantTeamRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"RemoveWhitelistTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamMember\",\"type\":\"address\"}],\"name\":\"RevokeTeamRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"SetProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"choiceCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"SetProposalChoices\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SetRewardForwarding\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIBE_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"addWhitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allWhitelistedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"}],\"name\":\"depositBribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBribeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"proposalDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"generateBribeVaultIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"generateRewardIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"proposalDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bribeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bribeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMember\",\"type\":\"address\"}],\"name\":\"grantTeamRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexOfWhitelistedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isWhitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposalDeadlines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMember\",\"type\":\"address\"}],\"name\":\"revokeTeamRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardForwarding\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choiceCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"setProposalChoices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setRewardForwarding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AuraBribe", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009ddb2da7dd76612e0df237b89af2cf4413733212", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://abc1aa5f04483c94e0ee7643268ac0db2ee3e8dfe698936df8a98d55c416eab8"}]}