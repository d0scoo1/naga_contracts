{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.13;\r\n\r\ncontract PaymentsSplitterBps {\r\n\r\n    address private _owner;\r\n    address payable[] private _recipients;\r\n    uint16[] private _bps;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() virtual {\r\n        require(msg.sender == _owner, \"owner only function\");\r\n        _;\r\n    }\r\n\r\n    constructor(address contractOwner) {\r\n        _owner = contractOwner;\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        address previousOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(previousOwner, newOwner);\r\n    }\r\n\r\n    function getRecipients() external view returns (address payable[] memory, uint16[] memory) {\r\n        return (_recipients, _bps);\r\n    }\r\n\r\n    function setRecipients(address payable[] calldata recipientList, uint16[] calldata recipientBps) external onlyOwner {\r\n        uint256 length = recipientBps.length;\r\n        require(recipientList.length == length, \"array length missmatch\");\r\n        uint16 totalBps = 0;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            totalBps += recipientBps[i];\r\n        }\r\n        require(totalBps == 10000, \"BPs don't add up to 100%\");\r\n        _recipients = recipientList;\r\n        _bps = recipientBps;\r\n    }\r\n\r\n    function payoutETH() external {\r\n        uint256 balance = address(this).balance;\r\n        uint256 length = _recipients.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            _recipients[i].transfer((_bps[i] * balance) / 10000);\r\n        }\r\n    }\r\n\r\n    function payoutERC20(address tokenAddress) external {\r\n        ERC20 token = ERC20(tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        uint256 length = _recipients.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            token.transfer(_recipients[i], (_bps[i] * balance) / 10000);\r\n        }\r\n    }\r\n\r\n    function ownerCall(address target, bytes calldata data) external payable onlyOwner {\r\n        assembly {\r\n            calldatacopy(0, data.offset, data.length)\r\n            let result := call(gas(), target, callvalue(), 0, data.length, 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {\r\n       revert();\r\n    }\r\n\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address _owner) external view returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) external returns (bool success);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ownerCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"payoutERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipientList\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"recipientBps\",\"type\":\"uint16[]\"}],\"name\":\"setRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PaymentsSplitterBps", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000799e1fe921d587d7c956e73e95ff6103dc3e7883", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7e2873e86a6613a16c1d9d83cdb54b6781a5b19ea22bddc0a4e26ca396b77344"}]}