{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: BUSL-1.1\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n            \r\npragma solidity ^0.8.3;\r\n\r\n////import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nstruct FeeInfo {\r\n    address collectionAddress;\r\n    uint32 feeBasisPoints;\r\n    uint32 bullaTokenThreshold; //# of BULLA tokens held to get fee reduction\r\n    uint32 reducedFeeBasisPoints; //reduced fee for BULLA token holders\r\n}\r\n\r\ninterface IBullaManager {\r\n    event FeeChanged(\r\n        address indexed bullaManager,\r\n        uint256 prevFee,\r\n        uint256 newFee,\r\n        uint256 blocktime\r\n    );\r\n    event CollectorChanged(\r\n        address indexed bullaManager,\r\n        address prevCollector,\r\n        address newCollector,\r\n        uint256 blocktime\r\n    );\r\n    event OwnerChanged(\r\n        address indexed bullaManager,\r\n        address prevOwner,\r\n        address newOwner,\r\n        uint256 blocktime\r\n    );\r\n    event BullaTokenChanged(\r\n        address indexed bullaManager,\r\n        address prevBullaToken,\r\n        address newBullaToken,\r\n        uint256 blocktime\r\n    );\r\n    event FeeThresholdChanged(\r\n        address indexed bullaManager,\r\n        uint256 prevFeeThreshold,\r\n        uint256 newFeeThreshold,\r\n        uint256 blocktime\r\n    );\r\n    event ReducedFeeChanged(\r\n        address indexed bullaManager,\r\n        uint256 prevFee,\r\n        uint256 newFee,\r\n        uint256 blocktime\r\n    );\r\n\r\n    function setOwner(address _owner) external;\r\n\r\n    function setFee(uint32 _feeBasisPoints) external;\r\n\r\n    function setCollectionAddress(address _collectionAddress) external;\r\n\r\n    function setbullaThreshold(uint32 _threshold) external;\r\n\r\n    function setReducedFee(uint32 reducedFeeBasisPoints) external;\r\n\r\n    function setBullaTokenAddress(address _bullaTokenAddress) external;\r\n\r\n    function getBullaBalance(address _holder) external view returns (uint256);\r\n\r\n    function getFeeInfo(address _holder)\r\n        external\r\n        view\r\n        returns (uint32, address);\r\n    \r\n    function getTransactionFee(address _holder, uint paymentAmount) external view returns(address sendFeesTo, uint transactionFee);\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n////import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n////import \"./interfaces/IBullaManager.sol\";\r\n\r\nerror NotContractOwner(address _sender);\r\nerror ZeroAddress();\r\nerror ValueMustBeGreaterThanZero();\r\n\r\ncontract BullaManager is IBullaManager {\r\n    bytes32 public immutable description;\r\n    FeeInfo public feeInfo;\r\n    IERC20 public bullaToken;\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        if (owner != msg.sender) revert NotContractOwner(msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        bytes32 _description,\r\n        address payable _collectionAddress,\r\n        uint32 _feeBasisPoints\r\n    ) {\r\n        owner = msg.sender;\r\n        feeInfo.collectionAddress = _collectionAddress;\r\n        description = _description;\r\n        feeInfo.feeBasisPoints = _feeBasisPoints;\r\n\r\n        emit FeeChanged(address(this), 0, _feeBasisPoints, block.timestamp);\r\n        emit CollectorChanged(\r\n            address(this),\r\n            address(0),\r\n            _collectionAddress,\r\n            block.timestamp\r\n        );\r\n        emit OwnerChanged(\r\n            address(this),\r\n            address(0),\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setOwner(address _newOwner) external override onlyOwner {\r\n        if(_newOwner == address(0)) revert ZeroAddress();\r\n        owner = _newOwner;\r\n        emit OwnerChanged(address(this), owner, _newOwner, block.timestamp);\r\n    }\r\n\r\n    function setFee(uint32 _feeBasisPoints) external override onlyOwner {\r\n        if(_feeBasisPoints == 0) revert ValueMustBeGreaterThanZero();\r\n        uint32 oldFee = feeInfo.feeBasisPoints;\r\n        feeInfo.feeBasisPoints = _feeBasisPoints;\r\n        emit FeeChanged(\r\n            address(this),\r\n            oldFee,\r\n            feeInfo.feeBasisPoints,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setCollectionAddress(address _collectionAddress)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        if(_collectionAddress == address(0)) revert ZeroAddress();\r\n        feeInfo.collectionAddress = _collectionAddress;\r\n        emit CollectorChanged(\r\n            address(this),\r\n            feeInfo.collectionAddress,\r\n            _collectionAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //Set threshold of BULLA tokens owned that are required to receive reduced fee\r\n    function setbullaThreshold(uint32 _threshold) external override onlyOwner {\r\n        feeInfo.bullaTokenThreshold = _threshold;\r\n        emit FeeThresholdChanged(\r\n            address(this),\r\n            feeInfo.bullaTokenThreshold,\r\n            _threshold,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //reduced fee if threshold of BULLA tokens owned is met\r\n    function setReducedFee(uint32 reducedFeeBasisPoints)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        if(reducedFeeBasisPoints == 0) revert ValueMustBeGreaterThanZero();\r\n        uint32 oldFee = feeInfo.reducedFeeBasisPoints;\r\n        feeInfo.reducedFeeBasisPoints = reducedFeeBasisPoints;\r\n        emit FeeChanged(\r\n            address(this),\r\n            oldFee,\r\n            feeInfo.feeBasisPoints,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //set the contract address of BULLA ERC20 token\r\n    function setBullaTokenAddress(address _bullaTokenAddress)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        if(_bullaTokenAddress == address(0)) revert ZeroAddress();\r\n        bullaToken = IERC20(_bullaTokenAddress);\r\n        emit BullaTokenChanged(\r\n            address(this),\r\n            address(bullaToken),\r\n            _bullaTokenAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //get the amount of BULLA tokens held by a given address\r\n    function getBullaBalance(address _holder)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 balance = address(bullaToken) == address(0)\r\n            ? 0\r\n            : bullaToken.balanceOf(_holder);\r\n        return balance;\r\n    }\r\n\r\n    function getFeeInfo(address _holder)\r\n        public\r\n        view\r\n        override\r\n        returns (uint32, address)\r\n    {\r\n        uint256 bullaTokenBalance = getBullaBalance(_holder);\r\n        uint32 fee = feeInfo.bullaTokenThreshold > 0 &&\r\n            bullaTokenBalance >= feeInfo.bullaTokenThreshold\r\n            ? feeInfo.reducedFeeBasisPoints\r\n            : feeInfo.feeBasisPoints;\r\n\r\n        return (fee, feeInfo.collectionAddress);\r\n    }\r\n\r\n    function getTransactionFee(address _holder, uint paymentAmount) external view override returns(address sendFeesTo, uint transactionFee){\r\n        (uint32 fee, address collectionAddress ) = getFeeInfo(_holder);\r\n        sendFeesTo = collectionAddress;\r\n        transactionFee = fee > 0 ? (paymentAmount * fee) / 10000 : 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_description\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_feeBasisPoints\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevBullaToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBullaToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"BullaTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"CollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevFeeThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"FeeThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"ReducedFeeChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bullaToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"feeBasisPoints\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bullaTokenThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reducedFeeBasisPoints\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getBullaBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getFeeInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"getTransactionFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sendFeesTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bullaTokenAddress\",\"type\":\"address\"}],\"name\":\"setBullaTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"}],\"name\":\"setCollectionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feeBasisPoints\",\"type\":\"uint32\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"reducedFeeBasisPoints\",\"type\":\"uint32\"}],\"name\":\"setReducedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_threshold\",\"type\":\"uint32\"}],\"name\":\"setbullaThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BullaManager", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "42756c6c614d616e6167657220763100000000000000000000000000000000000000000000000000000000006307edea4fa19c2a3d3f8fd12759d6bd319aab8f0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://01df19e50d16c5bc282e14fe9df14f8042c5ba62771bb7be59474d36643c2946"}]}