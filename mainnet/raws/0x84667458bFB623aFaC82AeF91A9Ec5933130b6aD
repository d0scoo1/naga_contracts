{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/multichain/layer1/FantomACRVProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./Layer1ACRVProxy.sol\\\";\\n\\n/// @notice The implementation of Layer1ACRVProxy for Fantom\\n///   + bridge aCRV using Multichain (Previously Anyswap)\\n///   + bridge CRV using Fantom Bridge.\\n/// @dev The address of this contract should be the same as corresponding Layer2Depositor.\\ncontract FantomACRVProxy is Layer1ACRVProxy {\\n  using SafeERC20 for IERC20;\\n\\n  address private constant FANTOM_BRIDGE = 0xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE;\\n\\n  /********************************** Internal Functions **********************************/\\n\\n  /// @dev See {CrossChainCallBase-_bridgeCRV}\\n  function _bridgeCRV(address _recipient, uint256 _totalAmount)\\n    internal\\n    virtual\\n    override\\n    returns (uint256 _bridgeAmount, uint256 _totalFee)\\n  {\\n    // solhint-disable-next-line reason-string\\n    require(_recipient == address(this), \\\"FantomACRVProxy: only bridge to self\\\");\\n\\n    IERC20(CRV).safeTransfer(FANTOM_BRIDGE, _totalAmount);\\n\\n    _bridgeAmount = _totalAmount;\\n    _totalFee = 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multichain/layer1/Layer1ACRVProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./Layer1ACRVProxyBase.sol\\\";\\n\\nimport \\\"../interfaces/IAnyswapRouter.sol\\\";\\n\\n/// @dev The default implementation of Layer1ACRVProxy,\\n///      bridge aCRV using Multichain (Previously Anyswap).\\ncontract Layer1ACRVProxy is Initializable, Layer1ACRVProxyBase {\\n  using SafeERC20 for IERC20;\\n\\n  event UpdateAnyswapRouter(address indexed _anyswapRouter);\\n\\n  struct CrossChainInfo {\\n    // The cross chain fee percentage.\\n    uint32 feePercentage;\\n    // The minimum amount of token to pay as cross chain fee.\\n    uint112 minCrossChainFee;\\n    // The maximum amount of token to pay as cross chain fee.\\n    uint112 maxCrossChainFee;\\n    // The minimum amount of token allowed to cross chain.\\n    uint128 minCrossChainAmount;\\n    // The maximum amount of token allowed to cross chain.\\n    uint128 maxCrossChainAmount;\\n  }\\n\\n  /// @notice The address of AnyswapRouter.\\n  address public anyswapRouter;\\n\\n  /// @notice aCRV cross chain info.\\n  CrossChainInfo public aCRVCrossChainInfo;\\n\\n  /// @notice  CRV cross chain info.\\n  // solhint-disable-next-line var-name-mixedcase\\n  CrossChainInfo public CRVCrossChainInfo;\\n\\n  function initialize(\\n    uint256 _targetChain,\\n    address _anyCallProxy,\\n    address _anyswapRouter,\\n    address _crossChainCallProxy,\\n    address _owner\\n  ) external initializer {\\n    Layer1ACRVProxyBase._initialize(_targetChain, _anyCallProxy, _crossChainCallProxy, _owner);\\n    // solhint-disable-next-line reason-string\\n    require(_anyswapRouter != address(0), \\\"Layer1ACRVProxy: zero address\\\");\\n\\n    anyswapRouter = _anyswapRouter;\\n  }\\n\\n  /********************************** Restricted Functions **********************************/\\n\\n  /// @notice Update CrossChainInfo for ACRV or CRV.\\n  /// @param _token The address of token to update.\\n  /// @param _info The CrossChainInfo to update.\\n  function updateCrossChainInfo(address _token, CrossChainInfo memory _info) external onlyOwner {\\n    // solhint-disable-next-line reason-string\\n    require(_token == ACRV || _token == CRV, \\\"Layer1ACRVProxy: invalid token\\\");\\n    // solhint-disable-next-line reason-string\\n    require(_info.feePercentage <= FEE_DENOMINATOR, \\\"Layer1ACRVProxy: fee percentage too large\\\");\\n    // solhint-disable-next-line reason-string\\n    require(_info.minCrossChainFee <= _info.maxCrossChainFee, \\\"Layer1ACRVProxy: invalid cross chain fee\\\");\\n    // solhint-disable-next-line reason-string\\n    require(_info.minCrossChainAmount <= _info.maxCrossChainAmount, \\\"Layer1ACRVProxy: invalid cross chain amount\\\");\\n\\n    if (_token == ACRV) {\\n      aCRVCrossChainInfo = _info;\\n    } else {\\n      CRVCrossChainInfo = _info;\\n    }\\n  }\\n\\n  /// @notice Update AnyswapRouter contract.\\n  /// @param _anyswapRouter The address to update.\\n  function updateAnyswapRouter(address _anyswapRouter) external onlyOwner {\\n    // solhint-disable-next-line reason-string\\n    require(_anyswapRouter != address(0), \\\"Layer1ACRVProxy: zero address\\\");\\n\\n    anyswapRouter = _anyswapRouter;\\n\\n    emit UpdateAnyswapRouter(_anyswapRouter);\\n  }\\n\\n  /********************************** Internal Functions **********************************/\\n\\n  /// @dev See {CrossChainCallBase-_bridgeACRV}\\n  function _bridgeACRV(address _recipient, uint256 _totalAmount)\\n    internal\\n    virtual\\n    override\\n    returns (uint256 _bridgeAmount, uint256 _totalFee)\\n  {\\n    (_bridgeAmount, _totalFee) = _bridgeWithAnyswapRouter(ANY_ACRV, ACRV, _recipient, _totalAmount, aCRVCrossChainInfo);\\n  }\\n\\n  /// @dev See {CrossChainCallBase-_bridgeCRV}\\n  function _bridgeCRV(address, uint256) internal virtual override returns (uint256, uint256) {\\n    revert(\\\"bridge CRV unsupported\\\");\\n  }\\n\\n  /// @dev Internal function to bridge some token to target chain.\\n  /// @param _token The address of the token to bridge.\\n  /// @param _recipient The address of recipient will receive the token.\\n  /// @param _totalAmount The total amount of token to bridge.\\n  /// @return _bridgeAmount The total amount of token bridged, fees are included.\\n  /// @return _totalFee The total amount of token fee charged by Bridge.\\n  function _bridgeWithAnyswapRouter(\\n    address _token,\\n    address _underlying,\\n    address _recipient,\\n    uint256 _totalAmount,\\n    CrossChainInfo memory _info\\n  ) internal returns (uint256 _bridgeAmount, uint256 _totalFee) {\\n    // solhint-disable-next-line reason-string\\n    require(_totalAmount >= _info.minCrossChainAmount, \\\"Layer1ACRVProxy: insufficient cross chain amount\\\");\\n\\n    address _anyswapRouter = anyswapRouter;\\n    IERC20(_underlying).safeApprove(_anyswapRouter, 0);\\n    IERC20(_underlying).safeApprove(_anyswapRouter, _totalAmount);\\n\\n    uint256 _targetChain = targetChain;\\n    _bridgeAmount = _totalAmount;\\n    // batch swap in case the amount is too large for single cross chain.\\n    while (_bridgeAmount > 0 && _bridgeAmount >= _info.minCrossChainAmount) {\\n      uint256 _amount = _info.maxCrossChainAmount;\\n      if (_amount > _bridgeAmount) _amount = _bridgeAmount;\\n      IAnyswapRouter(_anyswapRouter).anySwapOutUnderlying(_token, _recipient, _amount, _targetChain);\\n\\n      _totalFee += _computeBridgeFee(_amount, _info); // addition is safe\\n      _bridgeAmount -= _amount; // subtraction is safe\\n    }\\n\\n    _bridgeAmount = _totalAmount - _bridgeAmount; // subtraction is safe\\n  }\\n\\n  function _computeBridgeFee(uint256 _amount, CrossChainInfo memory _info) internal view virtual returns (uint256) {\\n    uint256 _fee = (_amount * _info.feePercentage) / FEE_DENOMINATOR; // multiplication is safe\\n    if (_fee < _info.minCrossChainFee) _fee = _info.minCrossChainFee;\\n    if (_fee > _info.maxCrossChainFee) _fee = _info.maxCrossChainFee;\\n    return _fee;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multichain/layer1/Layer1ACRVProxyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../CrossChainCallBase.sol\\\";\\nimport \\\"../../misc/Multicall.sol\\\";\\n\\nimport \\\"../../interfaces/IAladdinCRV.sol\\\";\\nimport \\\"../interfaces/ICrossChainCallProxy.sol\\\";\\nimport \\\"../interfaces/ILayer2CRVDepositor.sol\\\";\\nimport \\\"../interfaces/ILayer1ACRVProxy.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\nabstract contract Layer1ACRVProxyBase is CrossChainCallBase, Multicall, ILayer1ACRVProxy {\\n  using SafeERC20 for IERC20;\\n\\n  event Deposit(\\n    uint256 _executionId,\\n    uint256 _targetChain,\\n    address _recipient,\\n    uint256 _crvAmount,\\n    uint256 _acrvAmount,\\n    uint256 _acrvFee\\n  );\\n\\n  event Redeem(\\n    uint256 _executionId,\\n    uint256 _targetChain,\\n    address _recipient,\\n    uint256 _acrvAmount,\\n    uint256 _crvAmount,\\n    uint256 _crvFee\\n  );\\n\\n  /// @dev The denominator used to calculate cross chain fee.\\n  uint256 internal constant FEE_DENOMINATOR = 1e9;\\n  /// @dev The address of AladdinCRV contract.\\n  address internal constant ACRV = 0x2b95A1Dcc3D405535f9ed33c219ab38E8d7e0884;\\n  /// @dev The address of Anyswap AladdinCRV contract.\\n  address internal constant ANY_ACRV = 0x85009bcA4cd4C8F554c3C9a1c2f778Ec3Ce7fEb1;\\n  /// @dev The address of CRV.\\n  address internal constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n  /// @notice The target chain id to interact.\\n  uint256 public targetChain;\\n\\n  function _initialize(\\n    uint256 _targetChain,\\n    address _anyCallProxy,\\n    address _crossChainCallProxy,\\n    address _owner\\n  ) internal {\\n    // solhint-disable-next-line reason-string\\n    require(_targetChain != _getChainId(), \\\"Layer1ACRVProxy: invalid target chain\\\");\\n\\n    CrossChainCallBase._initialize(_anyCallProxy, _crossChainCallProxy, _owner);\\n\\n    targetChain = _targetChain;\\n  }\\n\\n  /********************************** Mutated Functions **********************************/\\n\\n  /// @notice See {ILayer1ACRVProxy-deposit}\\n  function deposit(\\n    uint256 _executionId,\\n    uint256 _targetChain,\\n    address _recipient,\\n    uint256 _crvAmount,\\n    address _callback\\n  ) external virtual override onlyAnyCallProxy {\\n    // do nothing, when amount is zero.\\n    // solhint-disable-next-line reason-string\\n    require(_crvAmount > 0, \\\"Layer1ACRVProxy: deposit zero amount\\\");\\n    // solhint-disable-next-line reason-string\\n    require(_targetChain == targetChain, \\\"Layer1ACRVProxy: target chain mismatch\\\");\\n\\n    {\\n      uint256 _balance = IERC20(CRV).balanceOf(address(this));\\n      // solhint-disable-next-line reason-string\\n      require(_balance > 0, \\\"Layer1ACRVProxy: insufficient CRV to deposit\\\");\\n      // in case that the fee calculation in layer2 is wrong.\\n      if (_balance < _crvAmount) {\\n        _crvAmount = _balance;\\n      }\\n    }\\n\\n    // 1. deposit CRV to aCRV\\n    IERC20(CRV).safeApprove(ACRV, 0);\\n    IERC20(CRV).safeApprove(ACRV, _crvAmount);\\n    IAladdinCRV(ACRV).depositWithCRV(address(this), _crvAmount);\\n\\n    // 2. send aCRV to source chain\\n    (uint256 _bridgeAmount, uint256 _totalFee) = _bridgeACRV(\\n      _recipient,\\n      // use aCRV balance, in case some dust aCRV left in last deposit.\\n      IERC20(ACRV).balanceOf(address(this))\\n    );\\n\\n    // 3. cross chain call to notify\\n    if (_callback != address(0)) {\\n      bytes memory _data = abi.encodeWithSelector(\\n        ILayer2CRVDepositor.finalizeDeposit.selector,\\n        _executionId,\\n        _crvAmount,\\n        _bridgeAmount,\\n        _totalFee\\n      );\\n      ICrossChainCallProxy(crossChainCallProxy).crossChainCall(_callback, _data, address(0), _targetChain);\\n    }\\n\\n    emit Deposit(_executionId, _targetChain, _recipient, _crvAmount, _bridgeAmount, _totalFee);\\n  }\\n\\n  /// @notice See {ILayer1ACRVProxy-redeem}\\n  function redeem(\\n    uint256 _executionId,\\n    uint256 _targetChain,\\n    address _recipient,\\n    uint256 _acrvAmount,\\n    uint256 _minCRVAmount,\\n    address _callback\\n  ) external virtual override onlyAnyCallProxy {\\n    // do nothing, when amount is zero.\\n    // solhint-disable-next-line reason-string\\n    require(_acrvAmount > 0, \\\"Layer1ACRVProxy: redeem zero amount\\\");\\n    // solhint-disable-next-line reason-string\\n    require(_targetChain == targetChain, \\\"Layer1ACRVProxy: target chain mismatch\\\");\\n\\n    {\\n      uint256 _balance = IERC20(ACRV).balanceOf(address(this));\\n      // solhint-disable-next-line reason-string\\n      require(_balance > 0, \\\"Layer1ACRVProxy: insufficient aCRV to redeem\\\");\\n      // in case that the fee calculation in layer2 is wrong.\\n      if (_balance < _acrvAmount) {\\n        _acrvAmount = _balance;\\n      }\\n    }\\n\\n    // 1. redeem CRV from aCRV.\\n    uint256 _totalAmount = IAladdinCRV(ACRV).withdraw(\\n      address(this),\\n      _acrvAmount,\\n      _minCRVAmount,\\n      IAladdinCRV.WithdrawOption.WithdrawAsCRV\\n    );\\n\\n    // 2. bridge CRV to recipient in target chain.\\n    (uint256 _bridgeAmount, uint256 _totalFee) = _bridgeCRV(_recipient, _totalAmount);\\n\\n    // 3. cross chain call to notify\\n    if (_callback != address(0)) {\\n      bytes memory _data = abi.encodeWithSelector(\\n        ILayer2CRVDepositor.finalizeRedeem.selector,\\n        _executionId,\\n        _acrvAmount,\\n        _bridgeAmount,\\n        _totalFee\\n      );\\n      ICrossChainCallProxy(crossChainCallProxy).crossChainCall(_callback, _data, address(0), _targetChain);\\n    }\\n\\n    emit Redeem(_executionId, _targetChain, _recipient, _acrvAmount, _bridgeAmount, _totalFee);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/multichain/interfaces/IAnyswapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IAnyswapRouter {\\n  // swaps `amount` `token` in `fromChainID` to `to` on this chainID\\n  // triggered by `anySwapOut`\\n  function anySwapIn(\\n    bytes32 txs,\\n    address token,\\n    address to,\\n    uint256 amount,\\n    uint256 fromChainID\\n  ) external;\\n\\n  // swaps `amount` `token` in `fromChainID` to `to` on this chainID with `to` receiving `underlying`\\n  function anySwapInUnderlying(\\n    bytes32 txs,\\n    address token,\\n    address to,\\n    uint256 amount,\\n    uint256 fromChainID\\n  ) external;\\n\\n  // swaps `amount` `token` in `fromChainID` to `to` on this chainID with `to` receiving `underlying` if possible\\n  function anySwapInAuto(\\n    bytes32 txs,\\n    address token,\\n    address to,\\n    uint256 amount,\\n    uint256 fromChainID\\n  ) external;\\n\\n  function anySwapIn(\\n    bytes32[] calldata txs,\\n    address[] calldata tokens,\\n    address[] calldata to,\\n    uint256[] calldata amounts,\\n    uint256[] calldata fromChainIDs\\n  ) external;\\n\\n  // Swaps `amount` `token` from this chain to `toChainID` chain with recipient `to`\\n  function anySwapOut(\\n    address token,\\n    address to,\\n    uint256 amount,\\n    uint256 toChainID\\n  ) external;\\n\\n  // Swaps `amount` `token` from this chain to `toChainID` chain with recipient `to` by minting with `underlying`\\n  function anySwapOutUnderlying(\\n    address token,\\n    address to,\\n    uint256 amount,\\n    uint256 toChainID\\n  ) external;\\n\\n  function anySwapOut(\\n    address[] calldata tokens,\\n    address[] calldata to,\\n    uint256[] calldata amounts,\\n    uint256[] calldata toChainIDs\\n  ) external;\\n\\n  // sets up a cross-chain trade from this chain to `toChainID` for `path` trades to `to`\\n  function anySwapOutExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline,\\n    uint256 toChainID\\n  ) external;\\n\\n  // sets up a cross-chain trade from this chain to `toChainID` for `path` trades to `to`\\n  function anySwapOutExactTokensForTokensUnderlying(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline,\\n    uint256 toChainID\\n  ) external;\\n\\n  // sets up a cross-chain trade from this chain to `toChainID` for `path` trades to `to`\\n  function anySwapOutExactTokensForNative(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline,\\n    uint256 toChainID\\n  ) external;\\n\\n  // sets up a cross-chain trade from this chain to `toChainID` for `path` trades to `to`\\n  function anySwapOutExactTokensForNativeUnderlying(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline,\\n    uint256 toChainID\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/multichain/CrossChainCallBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"./interfaces/IAnyCallProxy.sol\\\";\\n\\nabstract contract CrossChainCallBase {\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n  event UpdateCrossChainCallProxy(address indexed _crossChainCallProxy);\\n  event UpdateAnyCallProxy(address indexed _anyCallProxy);\\n\\n  /// @notice The owner of the contract.\\n  address public owner;\\n  /// @notice The address of AnyCallProxy.\\n  address public anyCallProxy;\\n  /// @notice The address of CrossChainCallProxy.\\n  address public crossChainCallProxy;\\n\\n  modifier onlyAnyCallProxy() {\\n    // solhint-disable-next-line reason-string\\n    require(msg.sender == anyCallProxy, \\\"CrossChainCallBase: only AnyCallProxy\\\");\\n    _;\\n  }\\n\\n  modifier onlyOwner() {\\n    // solhint-disable-next-line reason-string\\n    require(msg.sender == owner, \\\"CrossChainCallBase: only owner\\\");\\n    _;\\n  }\\n\\n  modifier SponsorCrossCallFee() {\\n    // caller sponsor cross chain fee.\\n    if (msg.value > 0) {\\n      IAnyCallProxy(anyCallProxy).deposit{ value: msg.value }(crossChainCallProxy);\\n    }\\n    _;\\n  }\\n\\n  function _initialize(\\n    address _anyCallProxy,\\n    address _crossChainCallProxy,\\n    address _owner\\n  ) internal {\\n    // solhint-disable-next-line reason-string\\n    require(_anyCallProxy != address(0), \\\"CrossChainCallBase: zero address\\\");\\n    // solhint-disable-next-line reason-string\\n    require(_crossChainCallProxy != address(0), \\\"CrossChainCallBase: zero address\\\");\\n    // solhint-disable-next-line reason-string\\n    require(_owner != address(0), \\\"CrossChainCallBase: zero address\\\");\\n\\n    anyCallProxy = _anyCallProxy;\\n    crossChainCallProxy = _crossChainCallProxy;\\n    owner = _owner;\\n  }\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  receive() external payable {}\\n\\n  /********************************** Restricted Functions **********************************/\\n\\n  /// @notice Update AnyCallProxy contract.\\n  /// @param _anyCallProxy The address to update.\\n  function updateAnyCallProxy(address _anyCallProxy) external onlyOwner {\\n    // solhint-disable-next-line reason-string\\n    require(_anyCallProxy != address(0), \\\"CrossChainCallBase: zero address\\\");\\n\\n    anyCallProxy = _anyCallProxy;\\n\\n    emit UpdateAnyCallProxy(_anyCallProxy);\\n  }\\n\\n  /// @notice Update CrossChainCallProxy contract.\\n  /// @param _crossChainCallProxy The address to update.\\n  function updateCrossChainCallProxy(address _crossChainCallProxy) external onlyOwner {\\n    // solhint-disable-next-line reason-string\\n    require(_crossChainCallProxy != address(0), \\\"CrossChainCallBase: zero address\\\");\\n\\n    crossChainCallProxy = _crossChainCallProxy;\\n\\n    emit UpdateCrossChainCallProxy(_crossChainCallProxy);\\n  }\\n\\n  /// @notice Transfers ownership of the contract to a new account (`newOwner`).\\n  /// @dev Can only be called by the current owner.\\n  /// @param _owner The address of new owner.\\n  function transferOwnership(address _owner) public onlyOwner {\\n    // solhint-disable-next-line reason-string\\n    require(_owner != address(0), \\\"CrossChainCallBase: zero address\\\");\\n\\n    emit OwnershipTransferred(owner, _owner);\\n\\n    owner = _owner;\\n  }\\n\\n  /// @notice Execute calls on behalf of contract in case of emergency\\n  /// @param _to The address of contract to call.\\n  /// @param _value The amount of ETH passing to the contract.\\n  /// @param _data The data passing to the contract.\\n  function execute(\\n    address _to,\\n    uint256 _value,\\n    bytes calldata _data\\n  ) external onlyOwner returns (bool, bytes memory) {\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory result) = _to.call{ value: _value }(_data);\\n    return (success, result);\\n  }\\n\\n  /********************************** Internal Functions **********************************/\\n\\n  /// @dev Internal function to bridge aCRV to target chain.\\n  /// @param _recipient The address of recipient will receive the aCRV.\\n  /// @param _totalAmount The total amount of aCRV to bridge.\\n  /// @return _bridgeAmount The total amount of aCRV bridged, fees are included.\\n  /// @return _totalFee The total amount of aCRV fee charged by Bridge.\\n  function _bridgeACRV(address _recipient, uint256 _totalAmount)\\n    internal\\n    virtual\\n    returns (uint256 _bridgeAmount, uint256 _totalFee)\\n  {}\\n\\n  /// @dev Internal function to bridge CRV to target chain.\\n  /// @param _recipient The address of recipient will receive the CRV.\\n  /// @param _totalAmount The total amount of CRV to bridge.\\n  /// @return _bridgeAmount The total amount of CRV bridged, fees are included.\\n  /// @return _totalFee The total amount of CRV fee charged by Bridge.\\n  function _bridgeCRV(address _recipient, uint256 _totalAmount)\\n    internal\\n    virtual\\n    returns (uint256 _bridgeAmount, uint256 _totalFee)\\n  {}\\n\\n  /// @dev Internal function to get current chain id.\\n  function _getChainId() internal pure returns (uint256) {\\n    uint256 _chainId;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      _chainId := chainid()\\n    }\\n    return _chainId;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/misc/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IMulticall.sol\\\";\\n\\nabstract contract Multicall is IMulticall {\\n  /// @inheritdoc IMulticall\\n  function multicall(bytes[] calldata data) external payable override returns (bytes[] memory results) {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n      if (!success) {\\n        // Next 7 lines from https://ethereum.stackexchange.com/a/83577\\n        // solhint-disable-next-line reason-string\\n        if (result.length < 68) revert();\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          result := add(result, 0x04)\\n        }\\n        revert(abi.decode(result, (string)));\\n      }\\n\\n      results[i] = result;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAladdinCRV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IAladdinCRV is IERC20Upgradeable {\\n  event Harvest(address indexed _caller, uint256 _amount);\\n  event Deposit(address indexed _sender, address indexed _recipient, uint256 _amount);\\n  event Withdraw(\\n    address indexed _sender,\\n    address indexed _recipient,\\n    uint256 _shares,\\n    IAladdinCRV.WithdrawOption _option\\n  );\\n\\n  event UpdateWithdrawalFeePercentage(uint256 _feePercentage);\\n  event UpdatePlatformFeePercentage(uint256 _feePercentage);\\n  event UpdateHarvestBountyPercentage(uint256 _percentage);\\n  event UpdatePlatform(address indexed _platform);\\n  event UpdateZap(address indexed _zap);\\n\\n  enum WithdrawOption {\\n    Withdraw,\\n    WithdrawAndStake,\\n    WithdrawAsCRV,\\n    WithdrawAsCVX,\\n    WithdrawAsETH\\n  }\\n\\n  /// @dev return the total amount of cvxCRV staked.\\n  function totalUnderlying() external view returns (uint256);\\n\\n  /// @dev return the amount of cvxCRV staked for user\\n  function balanceOfUnderlying(address _user) external view returns (uint256);\\n\\n  function deposit(address _recipient, uint256 _amount) external returns (uint256);\\n\\n  function depositAll(address _recipient) external returns (uint256);\\n\\n  function depositWithCRV(address _recipient, uint256 _amount) external returns (uint256);\\n\\n  function depositAllWithCRV(address _recipient) external returns (uint256);\\n\\n  function withdraw(\\n    address _recipient,\\n    uint256 _shares,\\n    uint256 _minimumOut,\\n    WithdrawOption _option\\n  ) external returns (uint256);\\n\\n  function withdrawAll(\\n    address _recipient,\\n    uint256 _minimumOut,\\n    WithdrawOption _option\\n  ) external returns (uint256);\\n\\n  function harvest(address _recipient, uint256 _minimumOut) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/multichain/interfaces/ICrossChainCallProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ICrossChainCallProxy {\\n  function crossChainCall(\\n    address _to,\\n    bytes memory _data,\\n    address _fallback,\\n    uint256 _toChainID\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/multichain/interfaces/ILayer2CRVDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ILayer2CRVDepositor {\\n  enum AsyncOperationStatus {\\n    None,\\n    Pending,\\n    OnGoing,\\n    Failed\\n  }\\n\\n  event Deposit(address indexed _sender, uint256 indexed _executionId, uint256 _amount);\\n  event Redeem(address indexed _sender, uint256 indexed _executionId, uint256 _amount);\\n  event AbortDeposit(address indexed _sender, uint256 indexed _executionId, uint256 _amount);\\n  event AbortRedeem(address indexed _sender, uint256 indexed _executionId, uint256 _amount);\\n  event Claim(address indexed _sender, uint256 _acrvAmount, uint256 _crvAmount);\\n\\n  event FinalizeDeposit(uint256 indexed _executionId, uint256 _crvAmount, uint256 _acrvAmount, uint256 _acrvFee);\\n  event FinalizeRedeem(uint256 indexed _executionId, uint256 _acrvAmount, uint256 _crvAmount, uint256 _crvFee);\\n\\n  event PrepareDeposit(uint256 indexed _executionId, uint256 _amount, uint256 _depositFee, uint256 _bridgeFee);\\n  event PrepareRedeem(uint256 indexed _executionId, uint256 _amount, uint256 _redeemFee, uint256 _bridgeFee);\\n\\n  event AsyncDeposit(uint256 indexed _executionId, AsyncOperationStatus _prevStatus);\\n  event AsyncRedeem(uint256 indexed _executionId, AsyncOperationStatus _prevStatus);\\n\\n  event AsyncDepositFailed(uint256 indexed _executionId);\\n  event AsyncRedeemFailed(uint256 indexed _executionId);\\n\\n  /// @notice Deposit CRV for aCRV asynchronously in this contract.\\n  /// @param _amount The amount of CRV to deposit.\\n  function deposit(uint256 _amount) external;\\n\\n  /// @notice Abort current deposit and take CRV back.\\n  /// @dev Will revert if the CRV is already bridged to Layer 1.\\n  /// @param _amount The amount of CRV to abort.\\n  function abortDeposit(uint256 _amount) external;\\n\\n  /// @notice Redeem aCRV for CRV asynchronously in this contract.\\n  /// @param _amount The amount of aCRV to redeem.\\n  function redeem(uint256 _amount) external;\\n\\n  /// @notice Abort current redeem and take aCRV back.\\n  /// @dev Will revert if the aCRV is already bridged to Layer 1.\\n  /// @param _amount The amount of aCRV to abort.\\n  function abortRedeem(uint256 _amount) external;\\n\\n  /// @notice Claim executed aCRV/CRV on asynchronous deposit/redeem.\\n  function claim() external;\\n\\n  /// @notice Callback function called on failure in AnyswapCall.\\n  /// @dev This function can only called by AnyCallProxy.\\n  /// @param _to The target address in original call.\\n  /// @param _data The calldata pass to target address in original call.\\n  function anyFallback(address _to, bytes memory _data) external;\\n\\n  /// @notice Callback function called on success in `deposit`.\\n  /// @dev This function can only called by AnyCallProxy.\\n  /// @param _executionId An unique id to keep track on the deposit operation.\\n  /// @param _crvAmount The acutal amount of CRV deposited in Layer 1.\\n  /// @param _acrvAmount The acutal amount of aCRV received in Layer 1.\\n  /// @param _acrvFee The fee charged on cross chain.\\n  function finalizeDeposit(\\n    uint256 _executionId,\\n    uint256 _crvAmount,\\n    uint256 _acrvAmount,\\n    uint256 _acrvFee\\n  ) external;\\n\\n  /// @notice Callback function called on success in `redeem`.\\n  /// @dev This function can only called by AnyCallProxy.\\n  /// @param _executionId An unique id to keep track on the redeem operation.\\n  /// @param _acrvAmount The acutal amount of aCRV to redeem in Layer 1.\\n  /// @param _crvAmount The acutal amount of CRV received in Layer 1.\\n  /// @param _crvFee The fee charged on cross chain.\\n  function finalizeRedeem(\\n    uint256 _executionId,\\n    uint256 _acrvAmount,\\n    uint256 _crvAmount,\\n    uint256 _crvFee\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/multichain/interfaces/ILayer1ACRVProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ILayer1ACRVProxy {\\n  /// @notice Cross chain deposit CRV to aCRV and cross back to target chain.\\n  /// @param _executionId An unique id to keep track on the deposit operation on target chain.\\n  /// @param _targetChain The target chain id.\\n  /// @param _recipient The address of recipient who will receive the aCRV on target chain.\\n  /// @param _crvAmount The amount of CRV to deposit.\\n  /// @param _callback The address who will receive callback on target chain.\\n  function deposit(\\n    uint256 _executionId,\\n    uint256 _targetChain,\\n    address _recipient,\\n    uint256 _crvAmount,\\n    address _callback\\n  ) external;\\n\\n  /// @notice Cross chain redeem aCRV to CRV and cross back to target chain.\\n  /// @param _executionId An unique id to keep track on the redeem operation on target chain.\\n  /// @param _targetChain The target chain id.\\n  /// @param _recipient The address of recipient who will receive the aCRV on target chain.\\n  /// @param _acrvAmount The amount of aCRV to redeem.\\n  /// @param _minCRVAmount The minimum amount of CRV to receive.\\n  /// @param _callback The address who will receive callback on target chain.\\n  function redeem(\\n    uint256 _executionId,\\n    uint256 _targetChain,\\n    address _recipient,\\n    uint256 _acrvAmount,\\n    uint256 _minCRVAmount,\\n    address _callback\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/multichain/interfaces/IAnyCallProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IAnyCallProxy {\\n  event LogAnyCall(address indexed from, address indexed to, bytes data, address _fallback, uint256 indexed toChainID);\\n\\n  event LogAnyExec(\\n    address indexed from,\\n    address indexed to,\\n    bytes data,\\n    bool success,\\n    bytes result,\\n    address _fallback,\\n    uint256 indexed fromChainID\\n  );\\n\\n  function setWhitelist(\\n    address _from,\\n    address _to,\\n    uint256 _toChainID,\\n    bool _flag\\n  ) external;\\n\\n  function anyCall(\\n    address _to,\\n    bytes calldata _data,\\n    address _fallback,\\n    uint256 _toChainID\\n  ) external;\\n\\n  function anyExec(\\n    address _from,\\n    address _to,\\n    bytes calldata _data,\\n    address _fallback,\\n    uint256 _fromChainID\\n  ) external;\\n\\n  function withdraw(uint256 _amount) external;\\n\\n  function deposit(address _account) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n  /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n  /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n  /// @param data The encoded function data for each of the calls to make to this contract\\n  /// @return results The results from each of the calls passed in via data\\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_targetChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_crvAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_acrvAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_acrvFee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_targetChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_acrvAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_crvAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_crvFee\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_anyCallProxy\",\"type\":\"address\"}],\"name\":\"UpdateAnyCallProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_anyswapRouter\",\"type\":\"address\"}],\"name\":\"UpdateAnyswapRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_crossChainCallProxy\",\"type\":\"address\"}],\"name\":\"UpdateCrossChainCallProxy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRVCrossChainInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"feePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"minCrossChainFee\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"maxCrossChainFee\",\"type\":\"uint112\"},{\"internalType\":\"uint128\",\"name\":\"minCrossChainAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxCrossChainAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aCRVCrossChainInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"feePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"minCrossChainFee\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"maxCrossChainFee\",\"type\":\"uint112\"},{\"internalType\":\"uint128\",\"name\":\"minCrossChainAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxCrossChainAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyCallProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossChainCallProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_crvAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callback\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_anyCallProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_anyswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crossChainCallProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_acrvAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCRVAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callback\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyCallProxy\",\"type\":\"address\"}],\"name\":\"updateAnyCallProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyswapRouter\",\"type\":\"address\"}],\"name\":\"updateAnyswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crossChainCallProxy\",\"type\":\"address\"}],\"name\":\"updateCrossChainCallProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"feePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"minCrossChainFee\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"maxCrossChainFee\",\"type\":\"uint112\"},{\"internalType\":\"uint128\",\"name\":\"minCrossChainAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxCrossChainAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct Layer1ACRVProxy.CrossChainInfo\",\"name\":\"_info\",\"type\":\"tuple\"}],\"name\":\"updateCrossChainInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FantomACRVProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}