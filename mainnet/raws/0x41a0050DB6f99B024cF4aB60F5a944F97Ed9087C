{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-02-28\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n// \r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// \r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// \r\n// solhint-disable-next-line compiler-version\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !Address.isContract(address(this));\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context, Initializable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function init(address sender) internal virtual initializer {\r\n        _owner = sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface Battle {\r\n    function leave(address _user, uint256 _amount) external;\r\n}\r\n\r\ncontract vEmpireGame is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Battle info each room Id\r\n    struct BattleInfo {\r\n        address player1;\r\n        address player2;\r\n        uint256 poolAmount;\r\n        uint256 riskPercent;\r\n        string roomId;\r\n        address winnerAddress;\r\n        bool claimStatus;\r\n    }\r\n\r\n    // User Info of each battle Id\r\n    struct UserInfo {\r\n        address player2;\r\n        string roomId;\r\n        bool xsVempLockStatus;\r\n    }\r\n\r\n    // Info of each Battle\r\n    mapping(string => BattleInfo) public battleInfo;\r\n\r\n    // Info of each user that participate in Battle.\r\n    mapping(string => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // xsVemp token address\r\n    address public xsVemp;\r\n\r\n    // Battle contract address\r\n    address public battleAddress;\r\n\r\n    // DDAO contract address\r\n    address public ddaoAddress;\r\n\r\n    // ddao ddaoPercent\r\n    uint256 public daoPercent;\r\n\r\n    // total ddao tokens\r\n    uint256 public daoTokens;\r\n\r\n    // min xsVemp tokens to participate into the pool\r\n    uint256 public minBattleTokens = 1000000000000000000;\r\n\r\n    // Admin list\r\n    mapping(address => bool) public adminStatus;\r\n\r\n    // players list for lottery airdrop rewards\r\n    address[] private playersForAirdrop;\r\n\r\n    // winners list\r\n    address[] public winners;\r\n\r\n    // battleIds list\r\n    string[] public battleIds;\r\n\r\n    mapping(string => address) public loser;\r\n\r\n    function initialize(address owner_, address _xsVemp, address _battleAddress, uint256 _ddaoPercent, address _ddaoAddress) public initializer {        \r\n        require(_xsVemp != address(0), \"Invalid _xsVemp address\");\r\n        require(_battleAddress != address(0), \"Invalid _battleAddress address\");\r\n        require(owner_ != address(0), \"Invalid owner_ address\");\r\n        require(_ddaoAddress != address(0), \"Invalid _ddaoAddress address\");\r\n\r\n        Ownable.init(owner_);\r\n        xsVemp = _xsVemp;\r\n        daoPercent = _ddaoPercent;\r\n        battleAddress = _battleAddress;\r\n        ddaoAddress = _ddaoAddress;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(adminStatus[_msgSender()], \"Caller is not admin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Return list of players addresses for airdrop \r\n     */\r\n    function getPlayersForAirdrop()\r\n        public\r\n        view\r\n        onlyAdmin\r\n        returns (address[] memory)\r\n    {\r\n        return playersForAirdrop;\r\n    }\r\n\r\n    /**\r\n     * @dev Used externally, used to participate in battle \r\n     *\r\n     * @param _poolAmount pool Amount to lock xsVemp tokens to play game\r\n     * @param _riskPercent represent risk Percent to play game\r\n     * @param _roomId room Id represents index or room identity of both players \r\n     */\r\n    function battleLockTokens(\r\n        uint256 _poolAmount,\r\n        uint256 _riskPercent,\r\n        string memory _roomId\r\n    ) external {\r\n        if (_poolAmount == 0 || _riskPercent == 0 || keccak256(bytes(_roomId)) == keccak256(bytes(\"\"))) {\r\n            revert(\"Invalid data\");\r\n        }\r\n        require(\r\n            _poolAmount >= minBattleTokens,\r\n            \"Pool amount can not less than min battle tokens\"\r\n        );\r\n\r\n        BattleInfo storage battle = battleInfo[_roomId];\r\n        UserInfo storage user = userInfo[_roomId][msg.sender];\r\n\r\n        require(battle.winnerAddress == address(0), \"Battle already ended\");\r\n        if (battle.player1 != address(0)) {\r\n            require(\r\n                keccak256(bytes(battle.roomId)) == keccak256(bytes(_roomId)) && battle.player2 == address(0),\r\n                \"Invalid room id data\"\r\n            );\r\n            require(\r\n                battle.riskPercent == _riskPercent &&\r\n                    battle.poolAmount == _poolAmount,\r\n                \"Invalid risk and pool\"\r\n            );\r\n            require(battle.player1 != msg.sender, \"Room id already used\");\r\n            UserInfo storage user2 = userInfo[_roomId][battle.player1];\r\n            battle.player2 = msg.sender;\r\n            user2.player2 = msg.sender;\r\n            user.player2 = battle.player1;\r\n            user.roomId = _roomId;\r\n            user.xsVempLockStatus = false;\r\n            playersForAirdrop.push(msg.sender);\r\n        } else {\r\n            require(\r\n                battle.player1 == address(0) && battle.player2 == address(0),\r\n                \"Room id already used\"\r\n            );\r\n            battle.player1 = msg.sender;\r\n            battle.player2 = address(0);\r\n            battle.poolAmount = _poolAmount;\r\n            battle.riskPercent = _riskPercent;\r\n            battle.roomId = _roomId;\r\n            battle.winnerAddress = address(0);\r\n\r\n            user.player2 = address(0);\r\n            user.roomId = _roomId;\r\n            user.xsVempLockStatus = false;\r\n            playersForAirdrop.push(msg.sender);\r\n            battleIds.push(_roomId);\r\n        }\r\n\r\n        if (!user.xsVempLockStatus) {\r\n            IERC20(xsVemp).transferFrom(msg.sender, address(this), _poolAmount);\r\n            user.xsVempLockStatus = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Used externally only by admin, used to update winner address from back-end \r\n     *\r\n     * @param _roomId room Id represents index or room identity of both players \r\n     * @param _winnerAddress address of winner player\r\n     */\r\n    function updateWinnerAddress(address[] memory _winnerAddress, string[] memory _roomId)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(_winnerAddress.length == _roomId.length, \"Invalid data for winners\");\r\n        for(uint256 i=0; i<_winnerAddress.length; i++) {\r\n            BattleInfo storage battle = battleInfo[_roomId[i]];\r\n            UserInfo storage user1 = userInfo[_roomId[i]][battle.player1];\r\n            UserInfo storage user2 = userInfo[_roomId[i]][battle.player2];\r\n\r\n            require(_winnerAddress[i] != address(0) && (battle.player1 == _winnerAddress[i] || battle.player2 == _winnerAddress[i]), \"Invalid Winner Address\");\r\n            require(battle.player1 != address(0) || battle.player2 != address(0), \"Invalid players\");\r\n            require(\r\n                user1.xsVempLockStatus != false || user2.xsVempLockStatus != false,\r\n                \"Invalid users lock status\"\r\n            );\r\n            require(battle.winnerAddress == address(0), \"Winner already declared\");\r\n\r\n            battle.winnerAddress = _winnerAddress[i];\r\n\r\n            address _loser = _winnerAddress[i] == battle.player1\r\n                ? battle.player2\r\n                : battle.player1;\r\n            if(_loser != address(0)) {\r\n                playersForAirdrop.push(_loser);\r\n            }\r\n            loser[_roomId[i]] = _loser;\r\n            winners.push(battle.winnerAddress);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Used externally, used to claim battle rewards \r\n     *\r\n     * @param _roomId room Id represents index or room identity of both players\r\n     */\r\n    function claimBattleRewards(string memory _roomId) public {\r\n        BattleInfo storage battle = battleInfo[_roomId];\r\n        UserInfo storage user = userInfo[_roomId][msg.sender];\r\n\r\n        require(\r\n            battle.player1 != address(0) || battle.player2 != address(0),\r\n            \"Invalid players address\"\r\n        );\r\n        require(battle.winnerAddress != address(0), \"Battle result in pending\");\r\n        require(\r\n            battle.winnerAddress == _msgSender(),\r\n            \"Only winner can call this method\"\r\n        );\r\n        require(user.xsVempLockStatus != false, \"Invalid users lock status\");\r\n        require(battle.claimStatus != true, \"Already claimed\");\r\n\r\n        if(battle.player2 != address(0)) {\r\n            uint256 winnerShare = 100;\r\n            uint256 winnerAmount = battle.poolAmount.mul(2).mul(winnerShare.sub(daoPercent)).div(100);\r\n            daoTokens = daoTokens.add((battle.poolAmount.mul(2).sub(winnerAmount)));\r\n            IERC20(xsVemp).transfer(\r\n                battle.winnerAddress,\r\n                winnerAmount\r\n            );\r\n        } else {\r\n            IERC20(xsVemp).transfer(\r\n                battle.winnerAddress,\r\n                battle.poolAmount\r\n            );\r\n        }\r\n        battle.claimStatus = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Used only by admin or owner, used to withdraw ddao xsVemp tokens\r\n     *\r\n     * @param _amount amount of xsVemp and must be less than total ddao amount\r\n     */\r\n    function withdrawxsVempFeeTokensToVemp(uint256 _amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(daoTokens >= _amount, \"Insufficiently amount\");\r\n        IERC20(xsVemp).approve(address(battleAddress), _amount);\r\n        Battle(battleAddress).leave(ddaoAddress, _amount);\r\n        daoTokens = daoTokens.sub(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Used only by admin or owner, used to withdraw ddao xsVemp tokens\r\n     *\r\n     * @param _to address of xsVemp tokens receiver\r\n     * @param _amount amount of xsVemp and must be less than total ddao amount\r\n     */\r\n    function withdrawxsVempFeeTokens(address _to, uint256 _amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_to != address(0), \"Invalid to address\");\r\n        require(daoTokens >= _amount, \"Insufficiently amount\");\r\n        IERC20(xsVemp).transfer(_to, _amount);\r\n        daoTokens = daoTokens.sub(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Used only by admin or owner, used to update admin\r\n     *\r\n     * @param _admin address of new admin \r\n     * @param _status status of admin true if provide access otherwise false to remove access \r\n     */\r\n    function updateAdmin(address _admin, bool _status) public onlyOwner {\r\n        require(adminStatus[_admin] != _status, \"Already in same status\");\r\n        adminStatus[_admin] = _status;\r\n    }\r\n\r\n    /**\r\n     * @dev Used only by admin or owner, used to update min battle token amount, by default its 0\r\n     *\r\n     * @param _minBattleTokens amount of xsVemp tokens must hold or locked by user to participate in battle\r\n     */\r\n    function updateMinBattleTokens(uint256 _minBattleTokens) public onlyOwner {\r\n        minBattleTokens = _minBattleTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Used only by admin or owner, used to update dao percent, by default its 0\r\n     *\r\n     * @param _ddaoPercent dao percent to send on ddao contract for distribution to all vemp stakers\r\n     */\r\n    function updateDDAOPercent(uint256 _ddaoPercent) public onlyOwner {\r\n        require(_ddaoPercent <= 100, \"Invalid Dao Percent\");\r\n        daoPercent = _ddaoPercent;\r\n    }\r\n\r\n    /**\r\n     * @dev Used only by admin or owner, used to dao contract, by default its 0 address\r\n     *\r\n     * @param _battleAddress dao contract address to \r\n     */\r\n    function updateBattleAddress(address _battleAddress) public onlyOwner {\r\n        require(_battleAddress != address(0), \"Invalid _battleAddress address\");\r\n        battleAddress = _battleAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Used only by admin or owner, used to dao contract, by default its 0 address\r\n     *\r\n     * @param _ddaoAddress dao contract address to \r\n     */\r\n    function updateDDAOAddress(address _ddaoAddress) public onlyOwner {\r\n        require(_ddaoAddress != address(0), \"Invalid _ddaoAddress address\");\r\n        ddaoAddress = _ddaoAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Used only by admin or owner, used to withdraw locked xsVemp tokens in emergency\r\n     *\r\n     * @param _to address of xsVemp tokens receiver\r\n     * @param _amount amount of xsVemp and must be less than total locked amount\r\n     */\r\n    function emergencyWithdrawxsVempTokens(address _to, uint256 _amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_to != address(0), \"Invalid _to address\");\r\n        uint256 vempBal = IERC20(xsVemp).balanceOf(address(this));\r\n        require(vempBal >= _amount, \"Insufficiently amount\");\r\n        IERC20(xsVemp).transfer(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Used only by owner, used to update winner in emergency\r\n     *\r\n     * @param _roomId room Id represents index or room identity of both players \r\n     * @param _winnerAddress address of winner player\r\n     */\r\n    function updateWinnerInEmergency(string memory _roomId, address _winnerAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        BattleInfo storage battle = battleInfo[_roomId];\r\n        UserInfo storage user1 = userInfo[_roomId][battle.player1];\r\n        UserInfo storage user2 = userInfo[_roomId][battle.player2];\r\n\r\n        require(_winnerAddress != address(0) && (battle.player1 == _winnerAddress || battle.player2 == _winnerAddress), \"Invalid Winner Address\");\r\n        require(\r\n            battle.player1 != address(0) || battle.player2 != address(0),\r\n            \"Invalid players\"\r\n        );\r\n        require(\r\n            user1.xsVempLockStatus != false || user2.xsVempLockStatus != false,\r\n            \"Invalid users lock status\"\r\n        );\r\n        require(battle.claimStatus != true, \"Already claimed\");\r\n\r\n        battle.winnerAddress = _winnerAddress;\r\n\r\n        address _loser = _winnerAddress == battle.player1\r\n            ? battle.player2\r\n            : battle.player1;\r\n        if(_loser != address(0)) {\r\n            playersForAirdrop.push(_loser);\r\n        }\r\n        loser[_roomId] = _loser;\r\n        winners.push(battle.winnerAddress);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battleIds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"battleInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskPercent\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_riskPercent\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"}],\"name\":\"battleLockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"}],\"name\":\"claimBattleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ddaoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawxsVempTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersForAirdrop\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xsVemp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_battleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ddaoPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ddaoAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"loser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBattleTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_battleAddress\",\"type\":\"address\"}],\"name\":\"updateBattleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ddaoAddress\",\"type\":\"address\"}],\"name\":\"updateDDAOAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ddaoPercent\",\"type\":\"uint256\"}],\"name\":\"updateDDAOPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBattleTokens\",\"type\":\"uint256\"}],\"name\":\"updateMinBattleTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_winnerAddress\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_roomId\",\"type\":\"string[]\"}],\"name\":\"updateWinnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_winnerAddress\",\"type\":\"address\"}],\"name\":\"updateWinnerInEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"xsVempLockStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawxsVempFeeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawxsVempFeeTokensToVemp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xsVemp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "vEmpireGame", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://76f9baaa8300dd23550559ea1f37273edb6c634d45c97b01227f03dca205067f"}]}