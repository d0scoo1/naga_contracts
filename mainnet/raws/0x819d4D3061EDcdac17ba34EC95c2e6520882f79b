{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../BaseTradeExecutor.sol\\\";\\nimport {ConvexPositionHandler} from \\\"./ConvexPositionHandler.sol\\\";\\n\\n/// @title ConvexTradeExecutor\\n/// @author PradeepSelva\\n/// @notice A contract to execute strategy's trade, on Convex (frax)\\ncontract ConvexFraxPoolTradeExecutor is\\n    BaseTradeExecutor,\\n    ConvexPositionHandler\\n{\\n    /// @notice event emitted when harvester is updated\\n    event UpdatedHarvester(\\n        address indexed oldHandler,\\n        address indexed newHandler\\n    );\\n    /// @notice event emitted when slippage is updated\\n    event UpdatedSlippage(\\n        uint256 indexed oldSlippage,\\n        uint256 indexed newSlippage\\n    );\\n\\n    /// @notice creates a new ConvexTradeExecutor with required state\\n    /// @param _harvester address of harvester\\n    /// @param _vault address of vault\\n    constructor(address _harvester, address _vault) BaseTradeExecutor(_vault) {\\n        ConvexPositionHandler._configHandler(\\n            _harvester,\\n            BaseTradeExecutor.vaultWantToken()\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         VIEW FUNCTONS\\n  //////////////////////////////////////////////////////////////*/\\n    /// @notice This gives the total funds in the contract in terms of want token\\n    /// @return totalBalance Total balance of contract in want token\\n    /// @return blockNumber Current block number\\n    function totalFunds() public view override returns (uint256, uint256) {\\n        return ConvexPositionHandler.positionInWantToken();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    STATE MODIFICATION FUNCTIONS\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Keeper function to set max accepted slippage of swaps\\n    /// @param _slippage Max accepted slippage during harvesting\\n    function setSlippage(uint256 _slippage) external onlyGovernance {\\n        uint256 oldSlippage = ConvexPositionHandler.maxSlippage;\\n\\n        ConvexPositionHandler._setSlippage(_slippage);\\n        emit UpdatedSlippage(oldSlippage, _slippage);\\n    }\\n\\n    /// @notice Governance function to set how position value should be calculated, i.e using virtual price or calc withdraw\\n    /// @param _useVirtualPriceForPosValue bool signifying if virtual price should be used to calculate position value\\n    function setUseVirtualPriceForPosValue(bool _useVirtualPriceForPosValue)\\n        external\\n        onlyGovernance\\n    {\\n        ConvexPositionHandler._setUseVirtualPriceForPosValue(\\n            _useVirtualPriceForPosValue\\n        );\\n    }\\n\\n    /// @param _harvester address of harvester\\n    function setHandler(address _harvester) external onlyGovernance {\\n        address oldHarvester = address(ConvexPositionHandler.harvester);\\n\\n        ConvexPositionHandler._configHandler(_harvester, vaultWantToken());\\n        emit UpdatedHarvester(oldHarvester, _harvester);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    DEPOSIT / WITHDRAW FUNCTIONS\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice To deposit into the Curve Pool\\n    /// @dev Converts USDC to lp tokens via Curve\\n    /// @param _data Encoded AmountParams as _data with USDC amount\\n    function _initateDeposit(bytes calldata _data) internal override {\\n        ConvexPositionHandler._deposit(_data);\\n        BaseTradeExecutor.confirmDeposit();\\n    }\\n\\n    /// @notice To withdraw from ConvexHandler\\n    /// @dev  Converts Curve Lp Tokens  back to USDC.\\n    ///  @param _data Encoded WithdrawParams as _data with USDC token amount\\n    function _initiateWithdraw(bytes calldata _data) internal override {\\n        ConvexPositionHandler._withdraw(_data);\\n        BaseTradeExecutor.confirmWithdraw();\\n    }\\n\\n    /// @notice Functionlity to execute after deposit is completed\\n    /// @dev This is not required in ConvexTradeExecutor, hence empty. This follows the BaseTradeExecutor interface\\n    function _confirmDeposit() internal override {}\\n\\n    /// @notice Functionlity to execute after withdraw is completed\\n    /// @dev This is not required in ConvexTradeExecutor, hence empty. This follows the BaseTradeExecutor interface\\n    function _confirmWithdraw() internal override {}\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    OPEN / CLOSE FUNCTIONS\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice To open staking position in Convex\\n    /// @dev stakes the specified Curve Lp Tokens into Convex's UST3-Wormhole pool\\n    /// @param _data Encoded AmountParams as _data with LP Token amount\\n    function openPosition(bytes calldata _data) public onlyKeeper {\\n        ConvexPositionHandler._openPosition(_data);\\n    }\\n\\n    /// @notice To close Convex Staking Position\\n    /// @dev Unstakes from Convex position and gives back them as Curve Lp Tokens along with rewards like CRV, CVX.\\n    /// @param _data Encoded AmountParams as _data with LP token amount\\n    function closePosition(bytes calldata _data) public onlyKeeper {\\n        ConvexPositionHandler._closePosition(_data);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    REWARDS FUNCTION\\n   //////////////////////////////////////////////////////////////*/\\n    /// @notice To claim rewards from Convex Staking position\\n    /// @dev Claims Convex Staking position rewards, and converts them to wantToken i.e., USDC.\\n    /// @param _data is not needed here (empty param, to satisfy interface)\\n    function claimRewards(bytes calldata _data) public onlyKeeper {\\n        ConvexPositionHandler._claimRewards(_data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BaseTradeExecutor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/ITradeExecutor.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract BaseTradeExecutor is ITradeExecutor {\\n    uint256 internal constant MAX_INT = type(uint256).max;\\n\\n    ActionStatus public override depositStatus;\\n    ActionStatus public override withdrawalStatus;\\n\\n    address public override vault;\\n\\n    constructor(address _vault) {\\n        vault = _vault;\\n        IERC20(vaultWantToken()).approve(vault, MAX_INT);\\n    }\\n\\n    function vaultWantToken() public view returns (address) {\\n        return IVault(vault).wantToken();\\n    }\\n\\n    function governance() public view returns (address) {\\n        return IVault(vault).governance();\\n    }\\n\\n    function keeper() public view returns (address) {\\n        return IVault(vault).keeper();\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance(), \\\"ONLY_GOV\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper(), \\\"ONLY_KEEPER\\\");\\n        _;\\n    }\\n\\n    function sweep(address _token) public onlyGovernance {\\n        IERC20(_token).transfer(\\n            governance(),\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    function initiateDeposit(bytes calldata _data) public override onlyKeeper {\\n        require(!depositStatus.inProcess, \\\"DEPOSIT_IN_PROGRESS\\\");\\n        depositStatus.inProcess = true;\\n        _initateDeposit(_data);\\n    }\\n\\n    function confirmDeposit() public override onlyKeeper {\\n        require(depositStatus.inProcess, \\\"DEPOSIT_COMPLETED\\\");\\n        depositStatus.inProcess = false;\\n        _confirmDeposit();\\n    }\\n\\n    function initiateWithdraw(bytes calldata _data) public override onlyKeeper {\\n        require(!withdrawalStatus.inProcess, \\\"WITHDRAW_IN_PROGRESS\\\");\\n        withdrawalStatus.inProcess = true;\\n        _initiateWithdraw(_data);\\n    }\\n\\n    function confirmWithdraw() public override onlyKeeper {\\n        require(withdrawalStatus.inProcess, \\\"WITHDRAW_COMPLETED\\\");\\n        withdrawalStatus.inProcess = false;\\n        _confirmWithdraw();\\n    }\\n\\n    /// Internal Funcs\\n\\n    function _initateDeposit(bytes calldata _data) internal virtual;\\n\\n    function _confirmDeposit() internal virtual;\\n\\n    function _initiateWithdraw(bytes calldata _data) internal virtual;\\n\\n    function _confirmWithdraw() internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../../../interfaces/BasePositionHandler.sol\\\";\\nimport \\\"../../../library/Math.sol\\\";\\n\\nimport \\\"../interfaces/IConvexRewards.sol\\\";\\nimport \\\"../interfaces/IConvexBooster.sol\\\";\\nimport \\\"../interfaces/ICurvePool.sol\\\";\\nimport \\\"../interfaces/ICurveDepositZapper.sol\\\";\\nimport \\\"../interfaces/IHarvester.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title ConvexPositionHandler\\n/// @author PradeepSelva & BapireddyK;\\n/// @notice A Position handler to handle Convex for Frax Pool\\ncontract ConvexPositionHandler is BasePositionHandler {\\n    using SafeERC20 for IERC20;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ENUMS\\n  //////////////////////////////////////////////////////////////*/\\n    enum FraxPoolCoinIndexes {\\n        FRAX,\\n        DAI,\\n        USDC,\\n        USDT\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          STRUCTS FOR DECODING\\n  //////////////////////////////////////////////////////////////*/\\n    struct AmountParams {\\n        uint256 _amount;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          GLOBAL IMMUTABLES\\n  //////////////////////////////////////////////////////////////*/\\n    /// @dev the max basis points used as normalizing factor.\\n    uint256 public immutable MAX_BPS = 10000;\\n    /// @dev the normalization factor for amounts\\n    uint256 public constant NORMALIZATION_FACTOR = 1e30;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          GLOBAL MUTABLES\\n  //////////////////////////////////////////////////////////////*/\\n    /// @notice the max permitted slippage for swaps\\n    uint256 public maxSlippage = 30;\\n    /// @notice the latest amount of rewards claimed and harvested\\n    uint256 public latestHarvestedRewards;\\n    /// @notice the total cummulative rewards earned so far\\n    uint256 public totalCummulativeRewards;\\n    /// @notice governance handled variable, that tells how to calculate position in want token\\n    /// @dev this is done to account for cases of depeg\\n    bool public useVirtualPriceForPosValue = true;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            EXTERNAL CONTRACTS\\n  //////////////////////////////////////////////////////////////*/\\n    /// @notice The want token that is deposited and withdrawn\\n    IERC20 public wantToken;\\n    /// @notice Curve LP Tokens that are converted and staked on Convex\\n    IERC20 public lpToken = IERC20(0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B);\\n\\n    /// @notice Harvester that harvests rewards claimed from Convex\\n    IHarvester public harvester;\\n\\n    /// @notice convex Frax base reward pool\\n    IConvexRewards public constant baseRewardPool =\\n        IConvexRewards(0xB900EF131301B307dB5eFcbed9DBb50A3e209B2e);\\n    /// @notice curve's Frax Pool\\n    ICurvePool public constant fraxPool =\\n        ICurvePool(0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B);\\n    /// @notice curve 3 pool zap\\n    ICurveDepositZapper public constant curve3PoolZap =\\n        ICurveDepositZapper(0xA79828DF1850E8a3A3064576f380D90aECDD3359);\\n    /// @notice convex booster\\n    IConvexBooster public constant convexBooster =\\n        IConvexBooster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          INITIALIZING\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice configures ConvexPositionHandler with the required state\\n    /// @param _harvester address of harvester\\n    /// @param _wantToken address of want token\\n    function _configHandler(address _harvester, address _wantToken) internal {\\n        wantToken = IERC20(_wantToken);\\n        harvester = IHarvester(_harvester);\\n\\n        // Assign virtual price of fraxpool\\n        prevSharePrice = fraxPool.get_virtual_price();\\n\\n        // Approve max LP tokens to convex booster\\n        lpToken.approve(address(convexBooster), type(uint256).max);\\n\\n        // Approve max want tokens to zapper.\\n        wantToken.approve(address(curve3PoolZap), type(uint256).max);\\n\\n        // Approve max lp tokens to zapper\\n        lpToken.approve(address(curve3PoolZap), type(uint256).max);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          VIEW FUNCTIONS\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n   @notice To get the total balances of the contract in want token price\\n   @return totalBalance Total balance of contract in want token\\n   @return blockNumber Current block number\\n   */\\n    function positionInWantToken()\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        (\\n            uint256 stakedLpBalance,\\n            uint256 lpTokenBalance,\\n            uint256 usdcBalance\\n        ) = _getTotalBalancesInWantToken(useVirtualPriceForPosValue);\\n\\n        return (stakedLpBalance + lpTokenBalance + usdcBalance, block.number);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                      DEPOSIT / WITHDRAW LOGIC\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n   @notice To deposit into the Curve Pool\\n   @dev Converts USDC to lp tokens via Curve\\n   @param _data Encoded AmountParams as _data with USDC amount\\n   */\\n    function _deposit(bytes calldata _data) internal override {\\n        AmountParams memory depositParams = abi.decode(_data, (AmountParams));\\n        require(\\n            depositParams._amount <= wantToken.balanceOf(address(this)),\\n            \\\"invalid deposit amount\\\"\\n        );\\n\\n        _convertUSDCIntoLpToken(depositParams._amount);\\n\\n        emit Deposit(depositParams._amount);\\n    }\\n\\n    /**\\n   @notice To withdraw from ConvexHandler\\n   @dev  Converts Curve Lp Tokens  back to USDC.\\n   @param _data Encoded WithdrawParams as _data with USDC token amount\\n   */\\n    function _withdraw(bytes calldata _data) internal override {\\n        // _amount here is the maxWithdraw\\n        AmountParams memory withdrawParams = abi.decode(_data, (AmountParams));\\n        (\\n            uint256 stakedLpBalance,\\n            uint256 lpTokenBalance,\\n            uint256 usdcBalance\\n        ) = _getTotalBalancesInWantToken(false);\\n        uint256 totalBalance = (stakedLpBalance + lpTokenBalance + usdcBalance);\\n\\n        // if _amount is more than balance, then withdraw entire balance\\n        if (withdrawParams._amount > totalBalance) {\\n            withdrawParams._amount = totalBalance;\\n        }\\n\\n        // calculate maximum amount that can be withdrawn\\n        uint256 amountToWithdraw = withdrawParams._amount;\\n        uint256 usdcValueOfLpTokensToConvert = 0;\\n\\n        // if usdc token balance is insufficient\\n        if (amountToWithdraw > usdcBalance) {\\n            usdcValueOfLpTokensToConvert = amountToWithdraw - usdcBalance;\\n\\n            if (usdcValueOfLpTokensToConvert > lpTokenBalance) {\\n                uint256 amountToUnstake = usdcValueOfLpTokensToConvert -\\n                    lpTokenBalance;\\n                // unstake convex position partially\\n                // this is min between actual staked balance and calculated amount, to ensure overflow\\n                uint256 lpTokensToUnstake = Math.min(\\n                    _USDCValueInLpToken(amountToUnstake),\\n                    baseRewardPool.balanceOf(address(this))\\n                );\\n\\n                require(\\n                    baseRewardPool.withdrawAndUnwrap(lpTokensToUnstake, true),\\n                    \\\"could not unstake\\\"\\n                );\\n            }\\n        }\\n\\n        // usdcValueOfLpTokensToConvert's value converted to Lp Tokens\\n        // this is min between converted value and lp token balance, to ensure overflow\\n        uint256 lpTokensToConvert = Math.min(\\n            _USDCValueInLpToken(usdcValueOfLpTokensToConvert),\\n            lpToken.balanceOf(address(this))\\n        );\\n        // if lp tokens are required to convert, then convert to usdc and update amountToWithdraw\\n        if (lpTokensToConvert > 0) {\\n            _convertLpTokenIntoUSDC(lpTokensToConvert);\\n        }\\n\\n        emit Withdraw(withdrawParams._amount);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                      OPEN / CLOSE LOGIC\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n   @notice To open staking position in Convex\\n   @dev stakes the specified Curve Lp Tokens into Convex's Frax pool\\n   @param _data Encoded AmountParams as _data with LP Token amount\\n   */\\n    function _openPosition(bytes calldata _data) internal override {\\n        AmountParams memory openPositionParams = abi.decode(\\n            _data,\\n            (AmountParams)\\n        );\\n\\n        require(\\n            openPositionParams._amount <= lpToken.balanceOf(address(this)),\\n            \\\"INSUFFICIENT_BALANCE\\\"\\n        );\\n\\n        require(\\n            convexBooster.deposit(\\n                baseRewardPool.pid(),\\n                openPositionParams._amount,\\n                true\\n            ),\\n            \\\"CONVEX_STAKING_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n   @notice To close Convex Staking Position\\n   @dev Unstakes from Convex position and gives back them as Curve Lp Tokens along with rewards like CRV, CVX.\\n   @param _data Encoded AmountParams as _data with LP token amount\\n   */\\n    function _closePosition(bytes calldata _data) internal override {\\n        AmountParams memory closePositionParams = abi.decode(\\n            _data,\\n            (AmountParams)\\n        );\\n\\n        require(\\n            closePositionParams._amount <=\\n                baseRewardPool.balanceOf(address(this)),\\n            \\\"AMOUNT_EXCEEDS_BALANCE\\\"\\n        );\\n\\n        if (closePositionParams._amount > 0) {\\n            /// Unstake _amount and claim rewards from convex\\n            baseRewardPool.withdrawAndUnwrap(closePositionParams._amount, true);\\n        } else {\\n            /// Unstake entire balance if closePositionParams._amount is 0\\n            baseRewardPool.withdrawAllAndUnwrap(true);\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                      REWARDS LOGIC\\n  //////////////////////////////////////////////////////////////*/\\n    /// @notice variable to track previous share price of LP token\\n    uint256 public prevSharePrice = type(uint256).max;\\n\\n    /**\\n   @notice To claim rewards from Convex Staking position\\n   @dev Claims Convex Staking position rewards, and converts them to wantToken i.e., USDC.\\n   @param _data is not needed here (empty param, to satisfy interface)\\n   */\\n    function _claimRewards(bytes calldata _data) internal override {\\n        require(baseRewardPool.getReward(), \\\"reward claim failed\\\");\\n\\n        uint256 initialUSDCBalance = wantToken.balanceOf(address(this));\\n\\n        // get list of tokens to transfer to harvester\\n        address[] memory rewardTokens = harvester.rewardTokens();\\n        //transfer them\\n        uint256 balance;\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            balance = IERC20(rewardTokens[i]).balanceOf(address(this));\\n\\n            if (balance > 0) {\\n                IERC20(rewardTokens[i]).safeTransfer(\\n                    address(harvester),\\n                    balance\\n                );\\n            }\\n        }\\n\\n        // convert all rewards to usdc\\n        harvester.harvest();\\n\\n        // get curve lp rewards\\n        uint256 currentSharePrice = fraxPool.get_virtual_price();\\n        if (currentSharePrice > prevSharePrice) {\\n            // claim any gain on lp token yields\\n            uint256 contractLpTokenBalance = lpToken.balanceOf(address(this));\\n            uint256 totalLpBalance = contractLpTokenBalance +\\n                baseRewardPool.balanceOf(address(this));\\n            uint256 yieldEarned = (currentSharePrice - prevSharePrice) *\\n                totalLpBalance;\\n\\n            uint256 lpTokenEarned = yieldEarned / currentSharePrice;\\n\\n            // If lpTokenEarned is more than lpToken balance in contract, unstake the difference\\n            if (lpTokenEarned > contractLpTokenBalance) {\\n                baseRewardPool.withdrawAndUnwrap(\\n                    lpTokenEarned - contractLpTokenBalance,\\n                    true\\n                );\\n            }\\n            // convert lp token to usdc\\n            _convertLpTokenIntoUSDC(lpTokenEarned);\\n        }\\n        prevSharePrice = currentSharePrice;\\n\\n        latestHarvestedRewards =\\n            wantToken.balanceOf(address(this)) -\\n            initialUSDCBalance;\\n        totalCummulativeRewards += latestHarvestedRewards;\\n\\n        emit Claim(latestHarvestedRewards);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          HELPER FUNCTIONS\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice To get total contract balances in terms of want token\\n    /// @dev Gets lp token balance from contract, staked position on convex, and converts all of them to usdc. And gives balance as want token.\\n    /// @param useVirtualPrice to check if balances shoudl be based on virtual price\\n    /// @return stakedLpBalance balance of staked LP tokens in terms of want token\\n    /// @return lpTokenBalance balance of LP tokens in contract\\n    /// @return usdcBalance usdc balance in contract\\n    function _getTotalBalancesInWantToken(bool useVirtualPrice)\\n        internal\\n        view\\n        returns (\\n            uint256 stakedLpBalance,\\n            uint256 lpTokenBalance,\\n            uint256 usdcBalance\\n        )\\n    {\\n        uint256 stakedLpBalanceRaw = baseRewardPool.balanceOf(address(this));\\n        uint256 lpTokenBalanceRaw = lpToken.balanceOf(address(this));\\n\\n        uint256 totalLpBalance = stakedLpBalanceRaw + lpTokenBalanceRaw;\\n\\n        // Here, in order to prevent price manipulation attacks via curve pools,\\n        // When getting total position value -> its calculated based on virtual price\\n        // During withdrawal -> calc_withdraw_one_coin() is used to get an actual estimate of USDC received if we were to remove liquidity\\n        // The following checks account for this\\n        uint256 totalLpBalanceInUSDC = useVirtualPrice\\n            ? _lpTokenValueInUSDCfromVirtualPrice(totalLpBalance)\\n            : _lpTokenValueInUSDC(totalLpBalance);\\n\\n        lpTokenBalance = useVirtualPrice\\n            ? _lpTokenValueInUSDCfromVirtualPrice(lpTokenBalanceRaw)\\n            : _lpTokenValueInUSDC(lpTokenBalanceRaw);\\n\\n        stakedLpBalance = totalLpBalanceInUSDC - lpTokenBalance;\\n        usdcBalance = wantToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n   @notice Helper to convert Lp tokens into USDC\\n   @dev Burns LpTokens on Frax pool on curve to get USDC\\n   @param _amount amount of Lp tokens to burn to get USDC\\n   @return receivedWantTokens amount of want tokens received after converting Lp tokens\\n   */\\n    function _convertLpTokenIntoUSDC(uint256 _amount)\\n        internal\\n        returns (uint256 receivedWantTokens)\\n    {\\n        int128 usdcIndexInPool = int128(\\n            int256(uint256(FraxPoolCoinIndexes.USDC))\\n        );\\n\\n        // estimate amount of USDC received based on stable peg i.e., 1FXS = 1 3Pool LP Token\\n        uint256 expectedWantTokensOut = (_amount *\\n            fraxPool.get_virtual_price()) / NORMALIZATION_FACTOR; // 30 = normalizing 18 decimals for virutal price + 18 decimals for LP token - 6 decimals for want token\\n        // burn Lp tokens to receive USDC with a slippage of `maxSlippage`\\n        receivedWantTokens = curve3PoolZap.remove_liquidity_one_coin(\\n            address(fraxPool),\\n            _amount,\\n            usdcIndexInPool,\\n            (expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)\\n        );\\n    }\\n\\n    /**\\n   @notice Helper to convert USDC into Lp tokens\\n   @dev Provides USDC liquidity on Frax pool on curve to get Lp Tokens\\n   @param _amount amount of USDC to deposit to get Lp Tokens\\n   @return receivedLpTokens amount of LP tokens received after converting USDC\\n   */\\n    function _convertUSDCIntoLpToken(uint256 _amount)\\n        internal\\n        returns (uint256 receivedLpTokens)\\n    {\\n        uint256[4] memory liquidityAmounts = [0, 0, _amount, 0];\\n\\n        // estimate amount of Lp Tokens based on stable peg i.e., 1FXS = 1 3Pool LP Token\\n        uint256 expectedLpOut = (_amount * NORMALIZATION_FACTOR) /\\n            fraxPool.get_virtual_price(); // 30 = normalizing 18 decimals for virutal price + 18 decimals for LP token - 6 decimals for want token\\n        // Provide USDC liquidity to receive Lp tokens with a slippage of `maxSlippage`\\n        receivedLpTokens = curve3PoolZap.add_liquidity(\\n            address(fraxPool),\\n            liquidityAmounts,\\n            (expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)\\n        );\\n    }\\n\\n    /**\\n   @notice to get value of an amount in USDC\\n   @param _value value to be converted\\n   @return estimatedLpTokenAmount estimated amount of lp tokens if (_value) amount of USDC is converted\\n   */\\n    function _lpTokenValueInUSDC(uint256 _value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_value == 0) return 0;\\n\\n        return\\n            curve3PoolZap.calc_withdraw_one_coin(\\n                address(fraxPool),\\n                _value,\\n                int128(int256(uint256(FraxPoolCoinIndexes.USDC)))\\n            );\\n    }\\n\\n    /**\\n   @notice to get value of an amount in USDC based on virtual price\\n   @param _value value to be converted\\n   @return estimatedLpTokenAmount lp tokens value in USDC based on its virtual price \\n   */\\n    function _lpTokenValueInUSDCfromVirtualPrice(uint256 _value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (fraxPool.get_virtual_price() * _value) / NORMALIZATION_FACTOR;\\n    }\\n\\n    /**\\n   @notice to get value of an amount in Lp Tokens\\n   @param _value value to be converted\\n   @return estimatedUSDCAmount estimated amount of USDC if (_value) amount of LP Tokens is converted\\n   */\\n    function _USDCValueInLpToken(uint256 _value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_value == 0) return 0;\\n\\n        return\\n            curve3PoolZap.calc_token_amount(\\n                address(fraxPool),\\n                [0, 0, _value, 0],\\n                true\\n            );\\n    }\\n\\n    /**\\n   @notice Keeper function to set max accepted slippage of swaps\\n   @param _slippage Max accepted slippage during harvesting\\n   */\\n    function _setSlippage(uint256 _slippage) internal {\\n        maxSlippage = _slippage;\\n    }\\n\\n    /// @notice Governance function to set how position value should be calculated, i.e using virtual price or calc withdraw\\n    /// @param _useVirtualPriceForPosValue bool signifying if virtual price should be used to calculate position value\\n    function _setUseVirtualPriceForPosValue(bool _useVirtualPriceForPosValue)\\n        internal\\n    {\\n        useVirtualPriceForPosValue = _useVirtualPriceForPosValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/ITradeExecutor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface ITradeExecutor {\\n    struct ActionStatus {\\n        bool inProcess;\\n        address from;\\n    }\\n\\n    function vault() external view returns (address);\\n\\n    function depositStatus() external returns (bool, address);\\n\\n    function withdrawalStatus() external returns (bool, address);\\n\\n    function initiateDeposit(bytes calldata _data) external;\\n\\n    function confirmDeposit() external;\\n\\n    function initiateWithdraw(bytes calldata _data) external;\\n\\n    function confirmWithdraw() external;\\n\\n    function totalFunds()\\n        external\\n        view\\n        returns (uint256 posValue, uint256 lastUpdatedBlock);\\n}\\n\"\r\n    },\r\n    \"interfaces/IVault.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function keeper() external view returns (address);\\n\\n    function governance() external view returns (address);\\n\\n    function wantToken() external view returns (address);\\n\\n    function deposit(uint256 amountIn, address receiver)\\n        external\\n        returns (uint256 shares);\\n\\n    function withdraw(uint256 sharesIn, address receiver)\\n        external\\n        returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"interfaces/BasePositionHandler.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nabstract contract BasePositionHandler {\\n    /// @notice To be emitted when a deposit is made by position handler\\n    /// @param amount The amount of tokens deposited\\n    event Deposit(uint256 indexed amount);\\n\\n    /// @notice To be emitted when a withdraw is made by position handler\\n    /// @param amount The amount of tokens withdrawn\\n    event Withdraw(uint256 indexed amount);\\n\\n    /// @notice To be emitted with rewards are claimed by position handler\\n    /// @param amount The amount that was withdrawn\\n    event Claim(uint256 indexed amount);\\n\\n    /// @notice struct to store data related to position\\n    /// @param posValue The value of the position in vault wantToken\\n    /// @param lastUpdatedBlock The block number of last update in position value\\n    struct Position {\\n        uint256 posValue;\\n        uint256 lastUpdatedBlock;\\n    }\\n\\n    function positionInWantToken()\\n        external\\n        view\\n        virtual\\n        returns (uint256, uint256);\\n\\n    function _openPosition(bytes calldata _data) internal virtual;\\n\\n    function _closePosition(bytes calldata _data) internal virtual;\\n\\n    function _deposit(bytes calldata _data) internal virtual;\\n\\n    function _withdraw(bytes calldata _data) internal virtual;\\n\\n    function _claimRewards(bytes calldata _data) internal virtual;\\n}\\n\"\r\n    },\r\n    \"library/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ConvexExecutor/interfaces/IConvexRewards.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n//sample convex reward contracts interface\\ninterface IConvexRewards {\\n    // pid of pool\\n    function pid() external view returns (uint256);\\n\\n    // earned rewards\\n    function earned(address account) external view returns (uint256);\\n\\n    //get balance of an address\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    //withdraw to a convex tokenized deposit\\n    function withdraw(uint256 _amount, bool _claim) external returns (bool);\\n\\n    //withdraw directly to curve LP token\\n    function withdrawAndUnwrap(uint256 _amount, bool _claim)\\n        external\\n        returns (bool);\\n\\n    //claim rewards\\n    function getReward() external returns (bool);\\n\\n    //stake a convex tokenized deposit\\n    function stake(uint256 _amount) external returns (bool);\\n\\n    //stake a convex tokenized deposit for another address(transfering ownership)\\n    function stakeFor(address _account, uint256 _amount)\\n        external\\n        returns (bool);\\n\\n    function stakeAll() external returns (bool);\\n\\n    function withdrawAll(bool claim) external;\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ConvexExecutor/interfaces/IConvexBooster.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IConvexBooster {\\n    //deposit into convex, receive a tokenized deposit.  parameter to stake immediately\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    //burn a tokenized deposit to receive curve lp tokens back\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ConvexExecutor/interfaces/ICurvePool.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface ICurvePool {\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx,\\n        uint256 _min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external returns (uint256);\\n\\n    function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[4] memory _amounts, bool _is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface ICurveDepositZapper {\\n    function calc_withdraw_one_coin(\\n        address _pool,\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        bool _is_deposit\\n    ) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        address _pool,\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        address _pool,\\n        uint256[4] memory _deposit_amounts,\\n        uint256 _min_mint_amount\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/ConvexExecutor/interfaces/IHarvester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\nimport \\\"../../../interfaces/IVault.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IHarvester {\\n    function crv() external view returns (IERC20);\\n\\n    function cvx() external view returns (IERC20);\\n\\n    function _3crv() external view returns (IERC20);\\n\\n    function snx() external view returns (IERC20);\\n\\n    function vault() external view returns (IVault);\\n\\n    // Swap tokens to wantToken\\n    function harvest() external;\\n\\n    function sweep(address _token) external;\\n\\n    function setSlippage(uint256 _slippage) external;\\n\\n    function rewardTokens() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldHandler\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newHandler\",\"type\":\"address\"}],\"name\":\"UpdatedHarvester\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldSlippage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NORMALIZATION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRewardPool\",\"outputs\":[{\"internalType\":\"contract IConvexRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexBooster\",\"outputs\":[{\"internalType\":\"contract IConvexBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve3PoolZap\",\"outputs\":[{\"internalType\":\"contract ICurveDepositZapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inProcess\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraxPool\",\"outputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvester\",\"outputs\":[{\"internalType\":\"contract IHarvester\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initiateDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestHarvestedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"openPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionInWantToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevSharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useVirtualPriceForPosValue\",\"type\":\"bool\"}],\"name\":\"setUseVirtualPriceForPosValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCummulativeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useVirtualPriceForPosValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultWantToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inProcess\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConvexFraxPoolTradeExecutor", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "0000000000000000000000002022c855ceefd7759dbbb5bb7a8f14c82688646a0000000000000000000000003c4fe0db16c9b521480c43856ba3196a9fa50e08", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}