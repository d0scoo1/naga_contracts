{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity =0.8.9;\r\n\r\n////// src/ITimeLock.sol\r\n/* pragma solidity 0.8.9; */\r\n\r\ninterface ITimeLock {\r\n    function delay() external view returns (uint);\r\n\r\n    function queuedTransactions(bytes32 hash) external view returns (bool);\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external returns (bytes32);\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external;\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external payable returns (bytes memory);\r\n}\r\n\r\n////// src/TimeLock.sol\r\n/* pragma solidity 0.8.9; */\r\n\r\n/* import \"./ITimeLock.sol\"; */\r\n\r\ncontract TimeLock is ITimeLock {\r\n    event NewAdmin(address indexed newAdmin);\r\n    event NewPendingAdmin(address indexed newPendingAdmin);\r\n    event NewDelay(uint newDelay);\r\n    event QueueTransaction(\r\n        bytes32 indexed txHash,\r\n        address indexed target,\r\n        uint value,\r\n        string signature,\r\n        bytes data,\r\n        uint eta\r\n    );\r\n    event ExecuteTransaction(\r\n        bytes32 indexed txHash,\r\n        address indexed target,\r\n        uint value,\r\n        string signature,\r\n        bytes data,\r\n        uint eta\r\n    );\r\n    event CancelTransaction(\r\n        bytes32 indexed txHash,\r\n        address indexed target,\r\n        uint value,\r\n        string signature,\r\n        bytes data,\r\n        uint eta\r\n    );\r\n\r\n    uint private constant MIN_DELAY = 2 days;\r\n    uint private constant MAX_DELAY = 30 days;\r\n    //  Time period a tx is valid for execution after eta has elapsed.\r\n    uint private constant GRACE_PERIOD = 14 days;\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n\r\n    // Cool-off before a queued transaction is executed\r\n    uint public delay;\r\n    // Queued status of a transaction (txHash => tx status).\r\n    mapping(bytes32 => bool) public queuedTransactions;\r\n\r\n    constructor(uint _delay) {\r\n        require(_delay >= MIN_DELAY, \"delay < min\");\r\n        require(_delay <= MAX_DELAY, \"delay > max\");\r\n        admin = msg.sender;\r\n        delay = _delay;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    modifier onlyTimeLock() {\r\n        require(msg.sender == address(this), \"not time lock\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"not admin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the the new value of {_pendingAdmin}.\r\n     * @param _pendingAdmin Address of next admin\r\n     */\r\n    function setPendingAdmin(address _pendingAdmin) external onlyAdmin {\r\n        pendingAdmin = _pendingAdmin;\r\n        emit NewPendingAdmin(_pendingAdmin);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets {pendingAdmin} to admin of current contract.\r\n     */\r\n    function acceptAdmin() external {\r\n        require(msg.sender == pendingAdmin, \"not pending admin\");\r\n        admin = msg.sender;\r\n        pendingAdmin = address(0);\r\n        emit NewAdmin(admin);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the the new value of {delay}.\r\n     * @param _delay Seconds to delay\r\n     */\r\n    function setDelay(uint _delay) external onlyTimeLock {\r\n        require(_delay >= MIN_DELAY, \"delay < min\");\r\n        require(_delay <= MAX_DELAY, \"delay > max\");\r\n        delay = _delay;\r\n        emit NewDelay(_delay);\r\n    }\r\n\r\n    function _getTxHash(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) private pure returns (bytes32) {\r\n        return keccak256(abi.encode(target, value, signature, data, eta));\r\n    }\r\n\r\n    /**\r\n     * @notice Computes transaction hash.\r\n     * @param target Address to call\r\n     * @param value Amount of ETH to send\r\n     * @param signature Function signature\r\n     * @param data Data to send, function inputs\r\n     * @param eta Timestamp\r\n     */\r\n    function getTxHash(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external pure returns (bytes32) {\r\n        return _getTxHash(target, value, signature, data, eta);\r\n    }\r\n\r\n    /**\r\n     * @notice Queues a transaction by setting its status in {queuedTransactions} mapping.\r\n     * @param target Address to call\r\n     * @param value Amount of ETH to send\r\n     * @param signature Function signature\r\n     * @param data Data to send, function inputs\r\n     * @param eta Timestamp\r\n     */\r\n    function queueTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external onlyAdmin returns (bytes32 txHash) {\r\n        require(eta >= block.timestamp + delay, \"eta < now + delay\");\r\n\r\n        txHash = _getTxHash(target, value, signature, data, eta);\r\n        require(!queuedTransactions[txHash], \"queued\");\r\n        queuedTransactions[txHash] = true;\r\n\r\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n    }\r\n\r\n    /**\r\n     * @notice Cancels a transaction by setting its status in {queuedTransactions} mapping.\r\n     * @param target Address to call\r\n     * @param value Amount of ETH to send\r\n     * @param signature Function signature\r\n     * @param data Data to send, function inputs\r\n     * @param eta Timestamp\r\n     */\r\n    function cancelTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external onlyAdmin {\r\n        bytes32 txHash = _getTxHash(target, value, signature, data, eta);\r\n        require(queuedTransactions[txHash], \"not queued\");\r\n        queuedTransactions[txHash] = false;\r\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n    }\r\n\r\n    /**\r\n     * @notice Executes a transaction by making a low level call to its `target`.\r\n     * @param target Address to call\r\n     * @param value Amount of ETH to send\r\n     * @param signature Function signature\r\n     * @param data Data to send, function inputs\r\n     * @param eta Timestamp\r\n     */\r\n    function executeTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external payable onlyAdmin returns (bytes memory) {\r\n        bytes32 txHash = _getTxHash(target, value, signature, data, eta);\r\n\r\n        require(queuedTransactions[txHash], \"not queued\");\r\n        require(block.timestamp >= eta, \"timestamp < eta\");\r\n        require(\r\n            block.timestamp <= eta + GRACE_PERIOD,\r\n            \"timestamp > grace period\"\r\n        );\r\n\r\n        queuedTransactions[txHash] = false;\r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(\r\n                bytes4(keccak256(bytes(signature))),\r\n                data\r\n            );\r\n        }\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call{value: value}(\r\n            callData\r\n        );\r\n        require(success, \"tx reverted\");\r\n\r\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n\r\n        return returnData;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"CancelTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"NewDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"QueueTransaction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"cancelTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"getTxHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"queueTransaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queuedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TimeLock", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000127500", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8db7b36cd2e440ac45d6f3362c7af31ef7891250b7369a8a9025a1eaac0edd50"}]}