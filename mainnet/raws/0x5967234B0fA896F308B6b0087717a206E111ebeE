{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable max-states-count\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport {SafeMathUpgradeable as SafeMath} from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport {MathUpgradeable as Math} from \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable as SafeERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport {OwnableUpgradeable as Ownable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {EnumerableSetUpgradeable as EnumerableSet} from \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport {PausableUpgradeable as Pausable} from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable as ReentrancyGuard} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../interfaces/events/Destinations.sol\\\";\\nimport \\\"../interfaces/events/BalanceUpdateEvent.sol\\\";\\nimport \\\"../interfaces/IDelegateFunction.sol\\\";\\nimport \\\"../interfaces/events/IEventSender.sol\\\";\\n\\ncontract Staking is IStaking, Initializable, Ownable, Pausable, ReentrancyGuard, IEventSender {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    IERC20 public tokeToken;\\n    IManager public manager;\\n\\n    address public treasury;\\n\\n    uint256 public withheldLiquidity; // DEPRECATED\\n    //userAddress -> withdrawalInfo\\n    mapping(address => WithdrawalInfo) public requestedWithdrawals; // DEPRECATED\\n\\n    //userAddress -> -> scheduleIndex -> staking detail\\n    mapping(address => mapping(uint256 => StakingDetails)) public userStakings;\\n\\n    //userAddress -> scheduleIdx[]\\n    mapping(address => uint256[]) public userStakingSchedules;\\n\\n    //Schedule id/index counter\\n    uint256 public nextScheduleIndex;\\n    //scheduleIndex/id -> schedule\\n    mapping(uint256 => StakingSchedule) public schedules;\\n    //scheduleIndex/id[]\\n    EnumerableSet.UintSet private scheduleIdxs;\\n\\n    //Can deposit into a non-public schedule\\n    mapping(address => bool) public override permissionedDepositors;\\n\\n    bool public _eventSend;\\n    Destinations public destinations;\\n\\n    IDelegateFunction public delegateFunction; //DEPRECATED\\n\\n    // ScheduleIdx => notional address\\n    mapping(uint256 => address) public notionalAddresses;\\n    // address -> scheduleIdx -> WithdrawalInfo\\n    mapping(address => mapping(uint256 => WithdrawalInfo)) public withdrawalRequestsByIndex;\\n\\n    modifier onlyPermissionedDepositors() {\\n        require(_isAllowedPermissionedDeposit(), \\\"CALLER_NOT_PERMISSIONED\\\");\\n        _;\\n    }\\n\\n    modifier onEventSend() {\\n        if (_eventSend) {\\n            _;\\n        }\\n    }\\n\\n    function initialize(\\n        IERC20 _tokeToken,\\n        IManager _manager,\\n        address _treasury,\\n        address _scheduleZeroNotional\\n    ) public initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        require(address(_tokeToken) != address(0), \\\"INVALID_TOKETOKEN\\\");\\n        require(address(_manager) != address(0), \\\"INVALID_MANAGER\\\");\\n        require(_treasury != address(0), \\\"INVALID_TREASURY\\\");\\n\\n        tokeToken = _tokeToken;\\n        manager = _manager;\\n        treasury = _treasury;\\n\\n        //We want to be sure the schedule used for LP staking is first\\n        //because the order in which withdraws happen need to start with LP stakes\\n        _addSchedule(\\n            StakingSchedule({\\n                cliff: 0,\\n                duration: 1,\\n                interval: 1,\\n                setup: true,\\n                isActive: true,\\n                hardStart: 0,\\n                isPublic: true\\n            }),\\n            _scheduleZeroNotional\\n        );\\n    }\\n\\n    function addSchedule(StakingSchedule memory schedule, address notional)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _addSchedule(schedule, notional);\\n    }\\n\\n    function setPermissionedDepositor(address account, bool canDeposit)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        permissionedDepositors[account] = canDeposit;\\n\\n        emit PermissionedDepositorSet(account, canDeposit);\\n    }\\n\\n    function setUserSchedules(address account, uint256[] calldata userSchedulesIdxs)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        userStakingSchedules[account] = userSchedulesIdxs;\\n\\n        emit UserSchedulesSet(account, userSchedulesIdxs);\\n    }\\n\\n    function getSchedules()\\n        external\\n        view\\n        override\\n        returns (StakingScheduleInfo[] memory retSchedules)\\n    {\\n        uint256 length = scheduleIdxs.length();\\n        retSchedules = new StakingScheduleInfo[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            retSchedules[i] = StakingScheduleInfo(\\n                schedules[scheduleIdxs.at(i)],\\n                scheduleIdxs.at(i)\\n            );\\n        }\\n    }\\n\\n    function getStakes(address account)\\n        external\\n        view\\n        override\\n        returns (StakingDetails[] memory stakes)\\n    {\\n        stakes = _getStakes(account);\\n    }\\n\\n    function setNotionalAddresses(uint256[] calldata scheduleIdxArr, address[] calldata addresses)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(scheduleIdxArr.length == addresses.length, \\\"MISMATCH_LENGTH\\\");\\n        for (uint256 i = 0; i < scheduleIdxArr.length; i++) {\\n            uint256 currentScheduleIdx = scheduleIdxArr[i];\\n            address currentAddress = addresses[i];\\n            require(scheduleIdxs.contains(currentScheduleIdx), \\\"INDEX_DOESNT_EXIST\\\");\\n            require(currentAddress != address(0), \\\"INVALID_ADDRESS\\\");\\n\\n            notionalAddresses[currentScheduleIdx] = currentAddress;\\n        }\\n        emit NotionalAddressesSet(scheduleIdxArr, addresses);\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256 value) {\\n        value = 0;\\n        uint256 scheduleCount = userStakingSchedules[account].length;\\n        for (uint256 i = 0; i < scheduleCount; i++) {\\n            uint256 remaining = userStakings[account][userStakingSchedules[account][i]].initial.sub(\\n                userStakings[account][userStakingSchedules[account][i]].withdrawn\\n            );\\n            uint256 slashed = userStakings[account][userStakingSchedules[account][i]].slashed;\\n            if (remaining > slashed) {\\n                value = value.add(remaining.sub(slashed));\\n            }\\n        }\\n    }\\n\\n    function availableForWithdrawal(address account, uint256 scheduleIndex)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _availableForWithdrawal(account, scheduleIndex);\\n    }\\n\\n    function unvested(address account, uint256 scheduleIndex)\\n        external\\n        view\\n        override\\n        returns (uint256 value)\\n    {\\n        value = 0;\\n        StakingDetails memory stake = userStakings[account][scheduleIndex];\\n\\n        value = stake.initial.sub(_vested(account, scheduleIndex));\\n    }\\n\\n    function vested(address account, uint256 scheduleIndex)\\n        external\\n        view\\n        override\\n        returns (uint256 value)\\n    {\\n        return _vested(account, scheduleIndex);\\n    }\\n\\n    function deposit(uint256 amount, uint256 scheduleIndex) external override {\\n        _depositFor(msg.sender, amount, scheduleIndex);\\n    }\\n\\n    function deposit(uint256 amount) external override {\\n        _depositFor(msg.sender, amount, 0);\\n    }\\n\\n    function depositFor(\\n        address account,\\n        uint256 amount,\\n        uint256 scheduleIndex\\n    ) external override onlyPermissionedDepositors {\\n        _depositFor(account, amount, scheduleIndex);\\n    }\\n\\n    function depositWithSchedule(\\n        address account,\\n        uint256 amount,\\n        StakingSchedule calldata schedule,\\n        address notional\\n    ) external override onlyPermissionedDepositors {\\n        uint256 scheduleIx = nextScheduleIndex;\\n        _addSchedule(schedule, notional);\\n        _depositFor(account, amount, scheduleIx);\\n    }\\n\\n    function requestWithdrawal(uint256 amount, uint256 scheduleIdx) external override {\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        require(scheduleIdxs.contains(scheduleIdx), \\\"INVALID_SCHEDULE\\\");\\n        uint256 availableAmount = _availableForWithdrawal(msg.sender, scheduleIdx);\\n        require(availableAmount >= amount, \\\"INSUFFICIENT_AVAILABLE\\\");\\n\\n        withdrawalRequestsByIndex[msg.sender][scheduleIdx].amount = amount;\\n        if (manager.getRolloverStatus()) {\\n            withdrawalRequestsByIndex[msg.sender][scheduleIdx].minCycleIndex = manager\\n                .getCurrentCycleIndex()\\n                .add(2);\\n        } else {\\n            withdrawalRequestsByIndex[msg.sender][scheduleIdx].minCycleIndex = manager\\n                .getCurrentCycleIndex()\\n                .add(1);\\n        }\\n\\n        bytes32 eventSig = \\\"Withdrawal Request\\\";\\n        StakingDetails memory userStake = userStakings[msg.sender][scheduleIdx];\\n        uint256 voteTotal = userStake.initial.sub((userStake.slashed.add(userStake.withdrawn))).sub(\\n            amount\\n        );\\n        encodeAndSendData(eventSig, msg.sender, scheduleIdx, voteTotal);\\n\\n        emit WithdrawalRequested(msg.sender, scheduleIdx, amount);\\n    }\\n\\n    function withdraw(uint256 amount, uint256 scheduleIdx)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(amount > 0, \\\"NO_WITHDRAWAL\\\");\\n        require(scheduleIdxs.contains(scheduleIdx), \\\"INVALID_SCHEDULE\\\");\\n        _withdraw(amount, scheduleIdx);\\n    }\\n\\n    function withdraw(uint256 amount) external override whenNotPaused nonReentrant {\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        _withdraw(amount, 0);\\n    }\\n\\n    function slash(\\n        address[] calldata accounts,\\n        uint256[] calldata amounts,\\n        uint256 scheduleIndex\\n    ) external override onlyOwner whenNotPaused {\\n        require(accounts.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n        StakingSchedule storage schedule = schedules[scheduleIndex];\\n        require(schedule.setup, \\\"INVALID_SCHEDULE\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n            uint256 amount = amounts[i];\\n\\n            require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n            require(account != address(0), \\\"INVALID_ADDRESS\\\");\\n\\n            StakingDetails memory userStake = userStakings[account][scheduleIndex];\\n            require(userStake.initial > 0, \\\"NO_VESTING\\\");\\n\\n            uint256 availableToSlash = 0;\\n            uint256 remaining = userStake.initial.sub(userStake.withdrawn);\\n            if (remaining > userStake.slashed) {\\n                availableToSlash = remaining.sub(userStake.slashed);\\n            }\\n\\n            require(availableToSlash >= amount, \\\"INSUFFICIENT_AVAILABLE\\\");\\n\\n            userStake.slashed = userStake.slashed.add(amount);\\n            userStakings[account][scheduleIndex] = userStake;\\n\\n            uint256 totalLeft = userStake.initial.sub((userStake.slashed.add(userStake.withdrawn)));\\n\\n            if (withdrawalRequestsByIndex[account][scheduleIndex].amount > totalLeft) {\\n                withdrawalRequestsByIndex[account][scheduleIndex].amount = totalLeft;\\n            }\\n\\n            uint256 voteAmount = totalLeft.sub(\\n                withdrawalRequestsByIndex[account][scheduleIndex].amount\\n            );\\n            bytes32 eventSig = \\\"Slashed\\\";\\n\\n            encodeAndSendData(eventSig, account, scheduleIndex, voteAmount);\\n\\n            tokeToken.safeTransfer(treasury, amount);\\n\\n            emit Slashed(account, amount, scheduleIndex);\\n        }\\n    }\\n\\n    function setScheduleStatus(uint256 scheduleId, bool activeBool) external override onlyOwner {\\n        StakingSchedule storage schedule = schedules[scheduleId];\\n        schedule.isActive = activeBool;\\n\\n        emit ScheduleStatusSet(scheduleId, activeBool);\\n    }\\n\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setDestinations(address _fxStateSender, address _destinationOnL2)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(_fxStateSender != address(0), \\\"INVALID_ADDRESS\\\");\\n        require(_destinationOnL2 != address(0), \\\"INVALID_ADDRESS\\\");\\n\\n        destinations.fxStateSender = IFxStateSender(_fxStateSender);\\n        destinations.destinationOnL2 = _destinationOnL2;\\n\\n        emit DestinationsSet(_fxStateSender, _destinationOnL2);\\n    }\\n\\n    function setEventSend(bool _eventSendSet) external override onlyOwner {\\n        require(destinations.destinationOnL2 != address(0), \\\"DESTINATIONS_NOT_SET\\\");\\n\\n        _eventSend = _eventSendSet;\\n\\n        emit EventSendSet(_eventSendSet);\\n    }\\n\\n    function _availableForWithdrawal(address account, uint256 scheduleIndex)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        StakingDetails memory stake = userStakings[account][scheduleIndex];\\n        uint256 vestedWoWithdrawn = _vested(account, scheduleIndex).sub(stake.withdrawn);\\n        if (stake.slashed > vestedWoWithdrawn) return 0;\\n\\n        return vestedWoWithdrawn.sub(stake.slashed);\\n    }\\n\\n    function _depositFor(\\n        address account,\\n        uint256 amount,\\n        uint256 scheduleIndex\\n    ) private nonReentrant whenNotPaused {\\n        StakingSchedule memory schedule = schedules[scheduleIndex];\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        require(schedule.setup, \\\"INVALID_SCHEDULE\\\");\\n        require(schedule.isActive, \\\"INACTIVE_SCHEDULE\\\");\\n        require(account != address(0), \\\"INVALID_ADDRESS\\\");\\n        require(schedule.isPublic || _isAllowedPermissionedDeposit(), \\\"PERMISSIONED_SCHEDULE\\\");\\n\\n        StakingDetails memory userStake = _updateStakingDetails(scheduleIndex, account, amount);\\n\\n        bytes32 eventSig = \\\"Deposit\\\";\\n        uint256 voteTotal = userStake.initial.sub((userStake.slashed.add(userStake.withdrawn))).sub(\\n            withdrawalRequestsByIndex[account][scheduleIndex].amount\\n        );\\n        encodeAndSendData(eventSig, account, scheduleIndex, voteTotal);\\n\\n        tokeToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Deposited(account, amount, scheduleIndex);\\n    }\\n\\n    function _withdraw(uint256 amount, uint256 scheduleIdx) private {\\n        WithdrawalInfo memory request = withdrawalRequestsByIndex[msg.sender][scheduleIdx];\\n        require(amount <= request.amount, \\\"INSUFFICIENT_AVAILABLE\\\");\\n        require(request.minCycleIndex <= manager.getCurrentCycleIndex(), \\\"INVALID_CYCLE\\\");\\n\\n        StakingDetails memory userStake = userStakings[msg.sender][scheduleIdx];\\n        userStake.withdrawn = userStake.withdrawn.add(amount);\\n        userStakings[msg.sender][scheduleIdx] = userStake;\\n\\n        request.amount = request.amount.sub(amount);\\n        withdrawalRequestsByIndex[msg.sender][scheduleIdx] = request;\\n\\n        if (request.amount == 0) {\\n            delete withdrawalRequestsByIndex[msg.sender][scheduleIdx];\\n        }\\n\\n        tokeToken.safeTransfer(msg.sender, amount);\\n\\n        emit WithdrawCompleted(msg.sender, scheduleIdx, amount);\\n    }\\n\\n    function _vested(address account, uint256 scheduleIndex) private view returns (uint256) {\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 timestamp = block.timestamp;\\n        uint256 value = 0;\\n        StakingDetails memory stake = userStakings[account][scheduleIndex];\\n        StakingSchedule memory schedule = schedules[scheduleIndex];\\n\\n        uint256 cliffTimestamp = stake.started.add(schedule.cliff);\\n        if (cliffTimestamp <= timestamp) {\\n            if (cliffTimestamp.add(schedule.duration) <= timestamp) {\\n                value = stake.initial;\\n            } else {\\n                uint256 secondsStaked = Math.max(timestamp.sub(cliffTimestamp), 1);\\n                //Precision loss is intentional. Enables the interval buckets\\n                uint256 effectiveSecondsStaked = (secondsStaked.div(schedule.interval)).mul(\\n                    schedule.interval\\n                );\\n                value = stake.initial.mul(effectiveSecondsStaked).div(schedule.duration);\\n            }\\n        }\\n\\n        return value;\\n    }\\n\\n    function _addSchedule(StakingSchedule memory schedule, address notional) private {\\n        require(schedule.duration > 0, \\\"INVALID_DURATION\\\");\\n        require(schedule.interval > 0, \\\"INVALID_INTERVAL\\\");\\n        require(notional != address(0), \\\"INVALID_ADDRESS\\\");\\n\\n        schedule.setup = true;\\n        uint256 index = nextScheduleIndex;\\n        schedules[index] = schedule;\\n        notionalAddresses[index] = notional;\\n        require(scheduleIdxs.add(index), \\\"ADD_FAIL\\\");\\n        nextScheduleIndex = nextScheduleIndex.add(1);\\n\\n        emit ScheduleAdded(\\n            index,\\n            schedule.cliff,\\n            schedule.duration,\\n            schedule.interval,\\n            schedule.setup,\\n            schedule.isActive,\\n            schedule.hardStart,\\n            notional\\n        );\\n    }\\n\\n    function _getStakes(address account) private view returns (StakingDetails[] memory stakes) {\\n        uint256 stakeCnt = userStakingSchedules[account].length;\\n        stakes = new StakingDetails[](stakeCnt);\\n\\n        for (uint256 i = 0; i < stakeCnt; i++) {\\n            stakes[i] = userStakings[account][userStakingSchedules[account][i]];\\n        }\\n    }\\n\\n    function _isAllowedPermissionedDeposit() private view returns (bool) {\\n        return permissionedDepositors[msg.sender] || msg.sender == owner();\\n    }\\n\\n    function encodeAndSendData(\\n        bytes32 _eventSig,\\n        address _user,\\n        uint256 _scheduleIdx,\\n        uint256 _userBalance\\n    ) private onEventSend {\\n        require(address(destinations.fxStateSender) != address(0), \\\"ADDRESS_NOT_SET\\\");\\n        require(destinations.destinationOnL2 != address(0), \\\"ADDRESS_NOT_SET\\\");\\n        address notionalAddress = notionalAddresses[_scheduleIdx];\\n\\n        bytes memory data = abi.encode(\\n            BalanceUpdateEvent({\\n                eventSig: _eventSig,\\n                account: _user,\\n                token: notionalAddress,\\n                amount: _userBalance\\n            })\\n        );\\n\\n        destinations.fxStateSender.sendMessageToChild(destinations.destinationOnL2, data);\\n    }\\n\\n    function _updateStakingDetails(\\n        uint256 scheduleIdx,\\n        address account,\\n        uint256 amount\\n    ) private returns (StakingDetails memory) {\\n        StakingDetails memory stake = userStakings[account][scheduleIdx];\\n        if (stake.started == 0) {\\n            userStakingSchedules[account].push(scheduleIdx);\\n            StakingSchedule memory schedule = schedules[scheduleIdx];\\n            if (schedule.hardStart > 0) {\\n                stake.started = schedule.hardStart;\\n            } else {\\n                //solhint-disable-next-line not-rely-on-time\\n                stake.started = block.timestamp;\\n            }\\n        }\\n        stake.initial = stake.initial.add(amount);\\n        stake.scheduleIx = scheduleIdx;\\n        userStakings[account][scheduleIdx] = stake;\\n\\n        return stake;\\n    }\\n\\n    function depositWithdrawEvent(\\n        address withdrawUser,\\n        uint256 withdrawAmount,\\n        uint256 withdrawScheduleIdx,\\n        address depositUser,\\n        uint256 depositAmount,\\n        uint256 depositScheduleIdx\\n    ) private {\\n        bytes32 withdrawEvent = \\\"Withdraw\\\";\\n        bytes32 depositEvent = \\\"Deposit\\\";\\n        encodeAndSendData(withdrawEvent, withdrawUser, withdrawScheduleIdx, withdrawAmount);\\n        encodeAndSendData(depositEvent, depositUser, depositScheduleIdx, depositAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n *  @title Allows for the staking and vesting of TOKE for\\n *  liquidity directors. Schedules can be added to enable various\\n *  cliff+duration/interval unlock periods for vesting tokens.\\n */\\ninterface IStaking {\\n    struct StakingSchedule {\\n        uint256 cliff; // Duration in seconds before staking starts\\n        uint256 duration; // Seconds it takes for entire amount to stake\\n        uint256 interval; // Seconds it takes for a chunk to stake\\n        bool setup; //Just so we know its there\\n        bool isActive; //Whether we can setup new stakes with the schedule\\n        uint256 hardStart; //Stakings will always start at this timestamp if set\\n        bool isPublic; //Schedule can be written to by any account\\n    }\\n\\n    struct StakingScheduleInfo {\\n        StakingSchedule schedule;\\n        uint256 index;\\n    }\\n\\n    struct StakingDetails {\\n        uint256 initial; //Initial amount of asset when stake was created, total amount to be staked before slashing\\n        uint256 withdrawn; //Amount that was staked and subsequently withdrawn\\n        uint256 slashed; //Amount that has been slashed\\n        uint256 started; //Timestamp at which the stake started\\n        uint256 scheduleIx;\\n    }\\n\\n    struct WithdrawalInfo {\\n        uint256 minCycleIndex;\\n        uint256 amount;\\n    }\\n\\n    struct QueuedTransfer {\\n        address from;\\n        uint256 scheduleIdxFrom;\\n        uint256 scheduleIdxTo;\\n        uint256 amount;\\n        address to;\\n    }\\n\\n    event ScheduleAdded(\\n        uint256 scheduleIndex,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 interval,\\n        bool setup,\\n        bool isActive,\\n        uint256 hardStart,\\n        address notional\\n    );\\n    event ScheduleRemoved(uint256 scheduleIndex);\\n    event WithdrawalRequested(address account, uint256 scheduleIdx, uint256 amount);\\n    event WithdrawCompleted(address account, uint256 scheduleIdx, uint256 amount);\\n    event Deposited(address account, uint256 amount, uint256 scheduleIx);\\n    event Slashed(address account, uint256 amount, uint256 scheduleIx);\\n    event PermissionedDepositorSet(address depositor, bool allowed);\\n    event UserSchedulesSet(address account, uint256[] userSchedulesIdxs);\\n    event NotionalAddressesSet(uint256[] scheduleIdxs, address[] addresses);\\n    event ScheduleStatusSet(uint256 scheduleId, bool isActive);\\n    event StakeTransferred(\\n        address from,\\n        uint256 scheduleFrom,\\n        uint256 scheduleTo,\\n        uint256 amount,\\n        address to\\n    );\\n    event ZeroSweep(address user, uint256 amount, uint256 scheduleFrom);\\n    event TransferApproverSet(address approverAddress);\\n    event TransferQueued(\\n        address from,\\n        uint256 scheduleFrom,\\n        uint256 scheduleTo,\\n        uint256 amount,\\n        address to\\n    );\\n    event QueuedTransferRemoved(\\n        address from,\\n        uint256 scheduleFrom,\\n        uint256 scheduleTo,\\n        uint256 amount,\\n        address to\\n    );\\n    event QueuedTransferRejected(\\n        address from,\\n        uint256 scheduleFrom,\\n        uint256 scheduleTo,\\n        uint256 amount,\\n        address to\\n    );\\n\\n    ///@notice Allows for checking of user address in permissionedDepositors mapping\\n    ///@param account Address of account being checked\\n    ///@return Boolean, true if address exists in mapping\\n    function permissionedDepositors(address account) external returns (bool);\\n\\n    ///@notice Allows owner to set a multitude of schedules that an address has access to\\n    ///@param account User address\\n    ///@param userSchedulesIdxs Array of schedule indexes\\n    function setUserSchedules(address account, uint256[] calldata userSchedulesIdxs) external;\\n\\n    ///@notice Allows owner to add schedule\\n    ///@param schedule A StakingSchedule struct that contains all info needed to make a schedule\\n    ///@param notional Notional addrss for schedule, used to send balances to L2 for voting purposes\\n    function addSchedule(StakingSchedule memory schedule, address notional) external;\\n\\n    ///@notice Gets all info on all schedules\\n    ///@return retSchedules An array of StakingScheduleInfo struct\\n    function getSchedules() external view returns (StakingScheduleInfo[] memory retSchedules);\\n\\n    ///@notice Allows owner to set a permissioned depositor\\n    ///@param account User address\\n    ///@param canDeposit Boolean representing whether user can deposit\\n    function setPermissionedDepositor(address account, bool canDeposit) external;\\n\\n    ///@notice Allows a user to get the stakes of an account\\n    ///@param account Address that is being checked for stakes\\n    ///@return stakes StakingDetails array containing info about account's stakes\\n    function getStakes(address account) external view returns (StakingDetails[] memory stakes);\\n\\n    ///@notice Gets total value staked for an address across all schedules\\n    ///@param account Address for which total stake is being calculated\\n    ///@return value uint256 total of account\\n    function balanceOf(address account) external view returns (uint256 value);\\n\\n    ///@notice Returns amount available to withdraw for an account and schedule Index\\n    ///@param account Address that is being checked for withdrawals\\n    ///@param scheduleIndex Index of schedule that is being checked for withdrawals\\n    function availableForWithdrawal(address account, uint256 scheduleIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    ///@notice Returns unvested amount for certain address and schedule index\\n    ///@param account Address being checked for unvested amount\\n    ///@param scheduleIndex Schedule index being checked for unvested amount\\n    ///@return value Uint256 representing unvested amount\\n    function unvested(address account, uint256 scheduleIndex) external view returns (uint256 value);\\n\\n    ///@notice Returns vested amount for address and schedule index\\n    ///@param account Address being checked for vested amount\\n    ///@param scheduleIndex Schedule index being checked for vested amount\\n    ///@return value Uint256 vested\\n    function vested(address account, uint256 scheduleIndex) external view returns (uint256 value);\\n\\n    ///@notice Allows user to deposit token to specific vesting / staking schedule\\n    ///@param amount Uint256 amount to be deposited\\n    ///@param scheduleIndex Uint256 representing schedule to user\\n    function deposit(uint256 amount, uint256 scheduleIndex) external;\\n\\n    /// @notice Allows users to deposit into 0 schedule\\n    /// @param amount Deposit amount\\n    function deposit(uint256 amount) external;\\n\\n    ///@notice Allows account to deposit on behalf of other account\\n    ///@param account Account to be deposited for\\n    ///@param amount Amount to be deposited\\n    ///@param scheduleIndex Index of schedule to be used for deposit\\n    function depositFor(\\n        address account,\\n        uint256 amount,\\n        uint256 scheduleIndex\\n    ) external;\\n\\n    ///@notice Allows permissioned depositors to deposit into custom schedule\\n    ///@param account Address of account being deposited for\\n    ///@param amount Uint256 amount being deposited\\n    ///@param schedule StakingSchedule struct containing details needed for new schedule\\n    ///@param notional Notional address attached to schedule, allows for different voting weights on L2\\n    function depositWithSchedule(\\n        address account,\\n        uint256 amount,\\n        StakingSchedule calldata schedule,\\n        address notional\\n    ) external;\\n\\n    ///@notice User can request withdrawal from staking contract at end of cycle\\n    ///@notice Performs checks to make sure amount <= amount available\\n    ///@param amount Amount to withdraw\\n    ///@param scheduleIdx Schedule index for withdrawal Request\\n    function requestWithdrawal(uint256 amount, uint256 scheduleIdx) external;\\n\\n    ///@notice Allows for withdrawal after successful withdraw request and proper amount of cycles passed\\n    ///@param amount Amount to withdraw\\n    ///@param scheduleIdx Schedule to withdraw from\\n    function withdraw(uint256 amount, uint256 scheduleIdx) external;\\n\\n    /// @notice Allows owner to set schedule to active or not\\n    /// @param scheduleIndex Schedule index to set isActive boolean\\n    /// @param activeBoolean Bool to set schedule active or not\\n    function setScheduleStatus(uint256 scheduleIndex, bool activeBoolean) external;\\n\\n    /// @notice Pause deposits on the pool. Withdraws still allowed\\n    function pause() external;\\n\\n    /// @notice Unpause deposits on the pool.\\n    function unpause() external;\\n\\n    /// @notice Used to slash user funds when needed\\n    /// @notice accounts and amounts arrays must be same length\\n    /// @notice Only one scheduleIndex can be slashed at a time\\n    /// @dev Implementation must be restructed to owner account\\n    /// @param accounts Array of accounts to slash\\n    /// @param amounts Array of amounts that corresponds with accounts\\n    /// @param scheduleIndex scheduleIndex of users that are being slashed\\n    function slash(\\n        address[] calldata accounts,\\n        uint256[] calldata amounts,\\n        uint256 scheduleIndex\\n    ) external;\\n\\n    /// @notice Set the address used to denote the token amount for a particular schedule\\n    /// @dev Relates to the Balance Tracker tracking of tokens and balances. Each schedule is tracked separately\\n    function setNotionalAddresses(uint256[] calldata scheduleIdxArr, address[] calldata addresses)\\n        external;\\n\\n    /// @notice Withdraw from the default schedule. Must have a request in previously\\n    /// @param amount Amount to withdraw\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n *  @title Controls the transition and execution of liquidity deployment cycles.\\n *  Accepts instructions that can move assets from the Pools to the Exchanges\\n *  and back. Can also move assets to the treasury when appropriate.\\n */\\ninterface IManager {\\n    // bytes can take on the form of deploying or recovering liquidity\\n    struct ControllerTransferData {\\n        bytes32 controllerId; // controller to target\\n        bytes data; // data the controller will pass\\n    }\\n\\n    struct PoolTransferData {\\n        address pool; // pool to target\\n        uint256 amount; // amount to transfer\\n    }\\n\\n    struct MaintenanceExecution {\\n        ControllerTransferData[] cycleSteps;\\n    }\\n\\n    struct RolloverExecution {\\n        PoolTransferData[] poolData;\\n        ControllerTransferData[] cycleSteps;\\n        address[] poolsForWithdraw; //Pools to target for manager -> pool transfer\\n        bool complete; //Whether to mark the rollover complete\\n        string rewardsIpfsHash;\\n    }\\n\\n    event ControllerRegistered(bytes32 id, address controller);\\n    event ControllerUnregistered(bytes32 id, address controller);\\n    event PoolRegistered(address pool);\\n    event PoolUnregistered(address pool);\\n    event CycleDurationSet(uint256 duration);\\n    event LiquidityMovedToManager(address pool, uint256 amount);\\n    event DeploymentStepExecuted(bytes32 controller, address adapaterAddress, bytes data);\\n    event LiquidityMovedToPool(address pool, uint256 amount);\\n    event CycleRolloverStarted(uint256 timestamp);\\n    event CycleRolloverComplete(uint256 timestamp);\\n    event NextCycleStartSet(uint256 nextCycleStartTime);\\n    event ManagerSwept(address[] addresses, uint256[] amounts);\\n\\n    /// @notice Registers controller\\n    /// @param id Bytes32 id of controller\\n    /// @param controller Address of controller\\n    function registerController(bytes32 id, address controller) external;\\n\\n    /// @notice Registers pool\\n    /// @param pool Address of pool\\n    function registerPool(address pool) external;\\n\\n    /// @notice Unregisters controller\\n    /// @param id Bytes32 controller id\\n    function unRegisterController(bytes32 id) external;\\n\\n    /// @notice Unregisters pool\\n    /// @param pool Address of pool\\n    function unRegisterPool(address pool) external;\\n\\n    ///@notice Gets addresses of all pools registered\\n    ///@return Memory array of pool addresses\\n    function getPools() external view returns (address[] memory);\\n\\n    ///@notice Gets ids of all controllers registered\\n    ///@return Memory array of Bytes32 controller ids\\n    function getControllers() external view returns (bytes32[] memory);\\n\\n    ///@notice Allows for owner to set cycle duration\\n    ///@param duration Block durtation of cycle\\n    function setCycleDuration(uint256 duration) external;\\n\\n    ///@notice Starts cycle rollover\\n    ///@dev Sets rolloverStarted state boolean to true\\n    function startCycleRollover() external;\\n\\n    ///@notice Allows for controller commands to be executed midcycle\\n    ///@param params Contains data for controllers and params\\n    function executeMaintenance(MaintenanceExecution calldata params) external;\\n\\n    ///@notice Allows for withdrawals and deposits for pools along with liq deployment\\n    ///@param params Contains various data for executing against pools and controllers\\n    function executeRollover(RolloverExecution calldata params) external;\\n\\n    ///@notice Completes cycle rollover, publishes rewards hash to ipfs\\n    ///@param rewardsIpfsHash rewards hash uploaded to ipfs\\n    function completeRollover(string calldata rewardsIpfsHash) external;\\n\\n    ///@notice Gets reward hash by cycle index\\n    ///@param index Cycle index to retrieve rewards hash\\n    ///@return String memory hash\\n    function cycleRewardsHashes(uint256 index) external view returns (string memory);\\n\\n    ///@notice Gets current starting block\\n    ///@return uint256 with block number\\n    function getCurrentCycle() external view returns (uint256);\\n\\n    ///@notice Gets current cycle index\\n    ///@return uint256 current cycle number\\n    function getCurrentCycleIndex() external view returns (uint256);\\n\\n    ///@notice Gets current cycle duration\\n    ///@return uint256 in block of cycle duration\\n    function getCycleDuration() external view returns (uint256);\\n\\n    ///@notice Gets cycle rollover status, true for rolling false for not\\n    ///@return Bool representing whether cycle is rolling over or not\\n    function getRolloverStatus() external view returns (bool);\\n\\n    /// @notice Sets next cycle start time manually\\n    /// @param nextCycleStartTime uint256 that represents start of next cycle\\n    function setNextCycleStartTime(uint256 nextCycleStartTime) external;\\n\\n    /// @notice Sweeps amanager contract for any leftover funds\\n    /// @param addresses array of addresses of pools to sweep funds into\\n    function sweep(address[] calldata addresses) external;\\n\\n    /// @notice Setup a role using internal function _setupRole\\n    /// @param role keccak256 of the role keccak256(\\\"MY_ROLE\\\");\\n    function setupRole(bytes32 role) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/events/Destinations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.11;\\n\\nimport \\\"../../fxPortal/IFxStateSender.sol\\\";\\n\\n/// @notice Configuration entity for sending events to Governance layer\\nstruct Destinations {\\n    IFxStateSender fxStateSender;\\n    address destinationOnL2;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/events/BalanceUpdateEvent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.11;\\n\\n/// @notice Event sent to Governance layer when a users balance changes\\nstruct BalanceUpdateEvent {\\n    bytes32 eventSig;\\n    address account;\\n    address token;\\n    uint256 amount;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDelegateFunction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./structs/DelegateMapView.sol\\\";\\nimport \\\"./structs/Signature.sol\\\";\\n\\n/**\\n *   @title Manages the state of an accounts delegation settings.\\n *   Allows for various methods of validation as well as enabling\\n *   different system functions to be delegated to different accounts\\n */\\ninterface IDelegateFunction {\\n    struct AllowedFunctionSet {\\n        bytes32 id;\\n    }\\n\\n    struct FunctionsListPayload {\\n        bytes32[] sets;\\n        uint256 nonce;\\n    }\\n\\n    struct DelegatePayload {\\n        DelegateMap[] sets;\\n        uint256 nonce;\\n    }\\n\\n    struct DelegateMap {\\n        bytes32 functionId;\\n        address otherParty;\\n        bool mustRelinquish;\\n    }\\n\\n    struct Destination {\\n        address otherParty;\\n        bool mustRelinquish;\\n        bool pending;\\n    }\\n\\n    struct DelegatedTo {\\n        address originalParty;\\n        bytes32 functionId;\\n    }\\n\\n    event AllowedFunctionsSet(AllowedFunctionSet[] functions);\\n    event PendingDelegationAdded(address from, address to, bytes32 functionId, bool mustRelinquish);\\n    event PendingDelegationRemoved(\\n        address from,\\n        address to,\\n        bytes32 functionId,\\n        bool mustRelinquish\\n    );\\n    event DelegationRemoved(address from, address to, bytes32 functionId, bool mustRelinquish);\\n    event DelegationRelinquished(address from, address to, bytes32 functionId, bool mustRelinquish);\\n    event DelegationAccepted(address from, address to, bytes32 functionId, bool mustRelinquish);\\n    event DelegationRejected(address from, address to, bytes32 functionId, bool mustRelinquish);\\n\\n    /// @notice Get the current nonce a contract wallet should use\\n    /// @param account Account to query\\n    /// @return nonce Nonce that should be used for next call\\n    function contractWalletNonces(address account) external returns (uint256 nonce);\\n\\n    /// @notice Get an accounts current delegations\\n    /// @dev These may be in a pending state\\n    /// @param from Account that is delegating functions away\\n    /// @return maps List of delegations in various states of approval\\n    function getDelegations(address from) external view returns (DelegateMapView[] memory maps);\\n\\n    /// @notice Get an accounts delegation of a specific function\\n    /// @dev These may be in a pending state\\n    /// @param from Account that is the delegation functions away\\n    /// @return map Delegation info\\n    function getDelegation(address from, bytes32 functionId)\\n        external\\n        view\\n        returns (DelegateMapView memory map);\\n\\n    /// @notice Initiate delegation of one or more system functions to different account(s)\\n    /// @param sets Delegation instructions for the contract to initiate\\n    function delegate(DelegateMap[] memory sets) external;\\n\\n    /// @notice Initiate delegation on behalf of a contract that supports ERC1271\\n    /// @param contractAddress Address of the ERC1271 contract used to verify the given signature\\n    /// @param delegatePayload Sets of DelegateMap objects\\n    /// @param signature Signature data\\n    /// @param signatureType Type of signature used (EIP712|EthSign)\\n    function delegateWithEIP1271(\\n        address contractAddress,\\n        DelegatePayload memory delegatePayload,\\n        bytes memory signature,\\n        SignatureType signatureType\\n    ) external;\\n\\n    /// @notice Accept one or more delegations from another account\\n    /// @param incoming Delegation details being accepted\\n    function acceptDelegation(DelegatedTo[] calldata incoming) external;\\n\\n    /// @notice Remove one or more delegation that you have previously setup\\n    function removeDelegation(bytes32[] calldata functionIds) external;\\n\\n    /// @notice Remove one or more delegations that you have previously setup on behalf of a contract supporting EIP1271\\n    /// @param contractAddress Address of the ERC1271 contract used to verify the given signature\\n    /// @param functionsListPayload Sets of FunctionListPayload objects ({sets: bytes32[]})\\n    /// @param signature Signature data\\n    /// @param signatureType Type of signature used (EIP712|EthSign)\\n    function removeDelegationWithEIP1271(\\n        address contractAddress,\\n        FunctionsListPayload calldata functionsListPayload,\\n        bytes memory signature,\\n        SignatureType signatureType\\n    ) external;\\n\\n    /// @notice Reject one or more delegations being sent to you\\n    /// @param rejections Delegations to reject\\n    function rejectDelegation(DelegatedTo[] calldata rejections) external;\\n\\n    /// @notice Remove one or more delegations that you have previously accepted\\n    function relinquishDelegation(DelegatedTo[] calldata relinquish) external;\\n\\n    /// @notice Cancel one or more delegations you have setup but that has not yet been accepted\\n    /// @param functionIds System functions you wish to retain control of\\n    function cancelPendingDelegation(bytes32[] calldata functionIds) external;\\n\\n    /// @notice Cancel one or more delegations you have setup on behalf of a contract that supported EIP1271, but that has not yet been accepted\\n    /// @param contractAddress Address of the ERC1271 contract used to verify the given signature\\n    /// @param functionsListPayload Sets of FunctionListPayload objects ({sets: bytes32[]})\\n    /// @param signature Signature data\\n    /// @param signatureType Type of signature used (EIP712|EthSign)\\n    function cancelPendingDelegationWithEIP1271(\\n        address contractAddress,\\n        FunctionsListPayload calldata functionsListPayload,\\n        bytes memory signature,\\n        SignatureType signatureType\\n    ) external;\\n\\n    /// @notice Add to the list of system functions that are allowed to be delegated\\n    /// @param functions New system function ids\\n    function setAllowedFunctions(AllowedFunctionSet[] calldata functions) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/events/IEventSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Destinations.sol\\\";\\n\\ninterface IEventSender {\\n    event DestinationsSet(address fxStateSender, address destinationOnL2);\\n    event EventSendSet(bool eventSendSet);\\n\\n    /// @notice Configure the Polygon state sender root and destination for messages sent\\n    /// @param fxStateSender Address of Polygon State Sender Root contract\\n    /// @param destinationOnL2 Destination address of events sent. Should be our Event Proxy\\n    function setDestinations(address fxStateSender, address destinationOnL2) external;\\n\\n    /// @notice Enables or disables the sending of events\\n    function setEventSend(bool eventSendSet) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/fxPortal/IFxStateSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/structs/DelegateMapView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/// @notice Stores votes and rewards delegation mapping in DelegateFunction\\nstruct DelegateMapView {\\n    bytes32 functionId;\\n    address otherParty;\\n    bool mustRelinquish;\\n    bool pending;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/structs/Signature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\n/// @notice Denotes the type of signature being submitted to contracts that support multiple\\nenum SignatureType {\\n    INVALID,\\n    // Specifically signTypedData_v4\\n    EIP712,\\n    // Specifically personal_sign\\n    ETHSIGN\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleIx\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fxStateSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationOnL2\",\"type\":\"address\"}],\"name\":\"DestinationsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"eventSendSet\",\"type\":\"bool\"}],\"name\":\"EventSendSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"scheduleIdxs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"NotionalAddressesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"PermissionedDepositorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"QueuedTransferRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"QueuedTransferRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"setup\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hardStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"notional\",\"type\":\"address\"}],\"name\":\"ScheduleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleIndex\",\"type\":\"uint256\"}],\"name\":\"ScheduleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ScheduleStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleIx\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"StakeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approverAddress\",\"type\":\"address\"}],\"name\":\"TransferApproverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"userSchedulesIdxs\",\"type\":\"uint256[]\"}],\"name\":\"UserSchedulesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleFrom\",\"type\":\"uint256\"}],\"name\":\"ZeroSweep\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_eventSend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"setup\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hardStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"internalType\":\"struct IStaking.StakingSchedule\",\"name\":\"schedule\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"notional\",\"type\":\"address\"}],\"name\":\"addSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleIndex\",\"type\":\"uint256\"}],\"name\":\"availableForWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateFunction\",\"outputs\":[{\"internalType\":\"contract IDelegateFunction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheduleIndex\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheduleIndex\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"setup\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hardStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"internalType\":\"struct IStaking.StakingSchedule\",\"name\":\"schedule\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"notional\",\"type\":\"address\"}],\"name\":\"depositWithSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destinations\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"fxStateSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destinationOnL2\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSchedules\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"setup\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hardStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"internalType\":\"struct IStaking.StakingSchedule\",\"name\":\"schedule\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.StakingScheduleInfo[]\",\"name\":\"retSchedules\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"started\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheduleIx\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.StakingDetails[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_tokeToken\",\"type\":\"address\"},{\"internalType\":\"contract IManager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_scheduleZeroNotional\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextScheduleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notionalAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissionedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheduleIdx\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestedWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minCycleIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"setup\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hardStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxStateSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destinationOnL2\",\"type\":\"address\"}],\"name\":\"setDestinations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_eventSendSet\",\"type\":\"bool\"}],\"name\":\"setEventSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"scheduleIdxArr\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"setNotionalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canDeposit\",\"type\":\"bool\"}],\"name\":\"setPermissionedDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activeBool\",\"type\":\"bool\"}],\"name\":\"setScheduleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"userSchedulesIdxs\",\"type\":\"uint256[]\"}],\"name\":\"setUserSchedules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"scheduleIndex\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokeToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleIndex\",\"type\":\"uint256\"}],\"name\":\"unvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakingSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"started\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheduleIx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleIndex\",\"type\":\"uint256\"}],\"name\":\"vested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheduleIdx\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalRequestsByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minCycleIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withheldLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}