{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DepoRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"contracts/helpers/Permitable.sol\\\";\\nimport \\\"contracts/libraries/SafeMath.sol\\\";\\nimport \\\"contracts/Ownable.sol\\\";\\n\\ncontract DepoRouter is Permitable, Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant _TRANSFER_FROM_CALL_SELECTOR_32 =\\n        0x23b872dd00000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant _WETH_DEPOSIT_CALL_SELECTOR_32 =\\n        0xd0e30db000000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant _WETH_WITHDRAW_CALL_SELECTOR_32 =\\n        0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant _ERC20_TRANSFER_CALL_SELECTOR_32 =\\n        0xa9059cbb00000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant _ADDRESS_MASK =\\n        0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\n    uint256 private constant _REVERSE_MASK =\\n        0x8000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant _WETH_MASK =\\n        0x4000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant _NUMERATOR_MASK =\\n        0x0000000000000000ffffffff0000000000000000000000000000000000000000;\\n    uint256 private constant _WETH =\\n        0x000000000000000000000000C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    uint256 private constant _UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32 =\\n        0x0902f1ac00000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant _UNISWAP_PAIR_SWAP_CALL_SELECTOR_32 =\\n        0x022c0d9f00000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant _DENOMINATOR = 1000000000;\\n    uint256 private constant _NUMERATOR_OFFSET = 160;\\n\\n    // treasury\\n    address public treasury;\\n    mapping(address => uint256) public userFeeCharged;\\n\\n    event FeePayed(address user, uint256 amount);\\n    event TreasuryChanged(address oldTreasury, address newTreasury);\\n\\n    receive() external payable {\\n        // solhint-disable-next-line avoid-tx-origin\\n        require(msg.sender != tx.origin, \\\"ETH deposit rejected\\\");\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(_treasury != address(0), \\\"Treasury address missing\\\");\\n\\n        address oldTreasury = treasury;\\n        treasury = _treasury;\\n\\n        emit TreasuryChanged(oldTreasury, treasury);\\n    }\\n\\n    function unoswapWithPermit(\\n        IERC20 srcToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        bytes32[] calldata pools,\\n        bytes calldata permit\\n    ) external payable returns (uint256 returnAmount) {\\n        _permit(srcToken, amount, permit);\\n        return unoswap(srcToken, amount, minReturn, pools);\\n    }\\n\\n    function unoswap(\\n        IERC20 srcToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        bytes32[] calldata /* pools */\\n    ) public payable returns (uint256 returnAmount) {\\n        assembly {\\n            // solhint-disable-line no-inline-assembly\\n            function reRevert() {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n\\n            function revertWithReason(m, len) {\\n                mstore(\\n                    0,\\n                    0x08c379a000000000000000000000000000000000000000000000000000000000\\n                )\\n                mstore(\\n                    0x20,\\n                    0x0000002000000000000000000000000000000000000000000000000000000000\\n                )\\n                mstore(0x40, m)\\n                revert(0, len)\\n            }\\n\\n            function swap(emptyPtr, swapAmount, pair, reversed, numerator, dst)\\n                -> ret\\n            {\\n                mstore(emptyPtr, _UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\\n                if iszero(\\n                    staticcall(gas(), pair, emptyPtr, 0x4, emptyPtr, 0x40)\\n                ) {\\n                    reRevert()\\n                }\\n\\n                let reserve0 := mload(emptyPtr)\\n                let reserve1 := mload(add(emptyPtr, 0x20))\\n                if reversed {\\n                    let tmp := reserve0\\n                    reserve0 := reserve1\\n                    reserve1 := tmp\\n                }\\n                ret := mul(swapAmount, numerator)\\n                ret := div(\\n                    mul(ret, reserve1),\\n                    add(ret, mul(reserve0, _DENOMINATOR))\\n                )\\n\\n                mstore(emptyPtr, _UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\\n                switch reversed\\n                case 0 {\\n                    mstore(add(emptyPtr, 0x04), 0)\\n                    mstore(add(emptyPtr, 0x24), ret)\\n                }\\n                default {\\n                    mstore(add(emptyPtr, 0x04), ret)\\n                    mstore(add(emptyPtr, 0x24), 0)\\n                }\\n                mstore(add(emptyPtr, 0x44), dst)\\n                mstore(add(emptyPtr, 0x64), 0x80)\\n                mstore(add(emptyPtr, 0x84), 0)\\n                if iszero(call(gas(), pair, 0, emptyPtr, 0xa4, 0, 0)) {\\n                    reRevert()\\n                }\\n            }\\n\\n            let emptyPtr := mload(0x40)\\n            mstore(0x40, add(emptyPtr, 0xc0))\\n\\n            let poolsOffset := add(calldataload(0x64), 0x4)\\n            let poolsEndOffset := calldataload(poolsOffset)\\n            poolsOffset := add(poolsOffset, 0x20)\\n            poolsEndOffset := add(poolsOffset, mul(0x20, poolsEndOffset))\\n            let rawPair := calldataload(poolsOffset)\\n            switch srcToken\\n            case 0 {\\n                mstore(emptyPtr, _WETH_DEPOSIT_CALL_SELECTOR_32)\\n                if iszero(call(gas(), _WETH, amount, emptyPtr, 0x4, 0, 0)) {\\n                    reRevert()\\n                }\\n\\n                mstore(emptyPtr, _ERC20_TRANSFER_CALL_SELECTOR_32)\\n                mstore(add(emptyPtr, 0x4), and(rawPair, _ADDRESS_MASK))\\n                mstore(add(emptyPtr, 0x24), amount)\\n                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x44, 0, 0)) {\\n                    reRevert()\\n                }\\n            }\\n            default {\\n                mstore(emptyPtr, _TRANSFER_FROM_CALL_SELECTOR_32)\\n                mstore(add(emptyPtr, 0x4), caller())\\n                mstore(add(emptyPtr, 0x24), and(rawPair, _ADDRESS_MASK))\\n                mstore(add(emptyPtr, 0x44), amount)\\n                if iszero(call(gas(), srcToken, 0, emptyPtr, 0x64, 0, 0)) {\\n                    reRevert()\\n                }\\n            }\\n\\n            returnAmount := amount\\n\\n            for {\\n                let i := add(poolsOffset, 0x20)\\n            } lt(i, poolsEndOffset) {\\n                i := add(i, 0x20)\\n            } {\\n                let nextRawPair := calldataload(i)\\n\\n                returnAmount := swap(\\n                    emptyPtr,\\n                    returnAmount,\\n                    and(rawPair, _ADDRESS_MASK),\\n                    and(rawPair, _REVERSE_MASK),\\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\\n                    and(nextRawPair, _ADDRESS_MASK)\\n                )\\n\\n                rawPair := nextRawPair\\n            }\\n\\n            switch and(rawPair, _WETH_MASK)\\n            case 0 {\\n                returnAmount := swap(\\n                    emptyPtr,\\n                    returnAmount,\\n                    and(rawPair, _ADDRESS_MASK),\\n                    and(rawPair, _REVERSE_MASK),\\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\\n                    caller()\\n                )\\n            }\\n            default {\\n                returnAmount := swap(\\n                    emptyPtr,\\n                    returnAmount,\\n                    and(rawPair, _ADDRESS_MASK),\\n                    and(rawPair, _REVERSE_MASK),\\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\\n                    address()\\n                )\\n\\n                mstore(emptyPtr, _WETH_WITHDRAW_CALL_SELECTOR_32)\\n                mstore(add(emptyPtr, 0x04), returnAmount)\\n                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x24, 0, 0)) {\\n                    reRevert()\\n                }\\n\\n                if iszero(call(gas(), caller(), returnAmount, 0, 0, 0, 0)) {\\n                    reRevert()\\n                }\\n            }\\n\\n            if lt(returnAmount, minReturn) {\\n                revertWithReason(\\n                    0x000000164d696e2072657475726e206e6f742072656163686564000000000000,\\n                    0x5a\\n                ) // \\\"Min return not reached\\\"\\n            }\\n        }\\n\\n        uint256 fee = srcToken != IERC20(0) ? msg.value : msg.value - amount;\\n        safeTransferETH(treasury, fee);\\n\\n        emit FeePayed(msg.sender, fee);\\n    }\\n\\n    /**\\n     * @dev Transfer eth\\n     * @param _to     receipnt address\\n     * @param _value  amount\\n     */\\n    function safeTransferETH(address _to, uint256 _value) internal {\\n        (bool success, ) = _to.call{value: _value}(new bytes(0));\\n        require(success, \\\"SafeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/Permitable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"contracts/helpers/RevertReasonParser.sol\\\";\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\nimport \\\"contracts/interfaces/IERC20Permit.sol\\\";\\n\\ncontract Permitable {\\n    event Error(string reason);\\n\\n    function _permit(\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata permit\\n    ) internal {\\n        if (permit.length == 32 * 7) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory result) = address(token).call(\\n                abi.encodePacked(IERC20Permit.permit.selector, permit)\\n            );\\n            if (!success) {\\n                string memory reason = RevertReasonParser.parse(\\n                    result,\\n                    \\\"Permit call failed: \\\"\\n                );\\n                if (token.allowance(msg.sender, address(this)) < amount) {\\n                    revert(reason);\\n                } else {\\n                    emit Error(reason);\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"contracts/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/RevertReasonParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nlibrary RevertReasonParser {\\n    function parse(bytes memory data, string memory prefix)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // https://solidity.readthedocs.io/en/latest/control-structures.html#revert\\n        // We assume that revert reason is abi-encoded as Error(string)\\n\\n        // 68 = 4-byte selector 0x08c379a0 + 32 bytes offset + 32 bytes length\\n        if (\\n            data.length >= 68 &&\\n            data[0] == \\\"\\\\x08\\\" &&\\n            data[1] == \\\"\\\\xc3\\\" &&\\n            data[2] == \\\"\\\\x79\\\" &&\\n            data[3] == \\\"\\\\xa0\\\"\\n        ) {\\n            string memory reason;\\n            // solhint-disable no-inline-assembly\\n            assembly {\\n                // 68 = 32 bytes data length + 4-byte selector + 32 bytes offset\\n                reason := add(data, 68)\\n            }\\n            /*\\n                revert reason is padded up to 32 bytes with ABI encoder: Error(string)\\n                also sometimes there is extra 32 bytes of zeros padded in the end:\\n                https://github.com/ethereum/solidity/issues/10170\\n                because of that we can't check for equality and instead check\\n                that string length + extra 68 bytes is less than overall data length\\n            */\\n            require(\\n                data.length >= 68 + bytes(reason).length,\\n                \\\"Invalid revert reason\\\"\\n            );\\n            return string(abi.encodePacked(prefix, \\\"Error(\\\", reason, \\\")\\\"));\\n        }\\n        // 36 = 4-byte selector 0x4e487b71 + 32 bytes integer\\n        else if (\\n            data.length == 36 &&\\n            data[0] == \\\"\\\\x4e\\\" &&\\n            data[1] == \\\"\\\\x48\\\" &&\\n            data[2] == \\\"\\\\x7b\\\" &&\\n            data[3] == \\\"\\\\x71\\\"\\n        ) {\\n            uint256 code;\\n            // solhint-disable no-inline-assembly\\n            assembly {\\n                // 36 = 32 bytes data length + 4-byte selector\\n                code := mload(add(data, 36))\\n            }\\n            return\\n                string(abi.encodePacked(prefix, \\\"Panic(\\\", _toHex(code), \\\")\\\"));\\n        }\\n\\n        return string(abi.encodePacked(prefix, \\\"Unknown(\\\", _toHex(data), \\\")\\\"));\\n    }\\n\\n    function _toHex(uint256 value) private pure returns (string memory) {\\n        return _toHex(abi.encodePacked(value));\\n    }\\n\\n    function _toHex(bytes memory data) private pure returns (string memory) {\\n        bytes16 alphabet = 0x30313233343536373839616263646566;\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IERC20Permit {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"unoswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"pools\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"name\":\"unoswapWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userFeeCharged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DepoRouter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}