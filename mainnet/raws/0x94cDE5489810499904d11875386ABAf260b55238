{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OKLGRewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport './interfaces/IConditional.sol';\\nimport './interfaces/IMultiplier.sol';\\nimport './interfaces/IOKLGRewardDistributor.sol';\\nimport './OKLGWithdrawable.sol';\\n\\ncontract OKLGRewardDistributor is IOKLGRewardDistributor, OKLGWithdrawable {\\n  using SafeMath for uint256;\\n\\n  struct Reward {\\n    uint256 totalExcluded; // excluded dividend\\n    uint256 totalRealised;\\n    uint256 lastClaim; // used for boosting logic\\n  }\\n\\n  struct Share {\\n    uint256 amount;\\n    uint256 amountBase;\\n    uint256 stakedTime;\\n    uint256[] nftBoostTokenIds;\\n  }\\n\\n  uint256 public minSecondsBeforeUnstake = 43200;\\n  address public shareholderToken;\\n  address public nftBoosterToken;\\n  uint256 public totalStakedUsers;\\n  uint256 public totalSharesBoosted;\\n  uint256 public totalSharesDeposited; // will only be actual deposited tokens without handling any reflections or otherwise\\n  address wrappedNative;\\n  IUniswapV2Router02 router;\\n\\n  // used to fetch in a frontend to get full list\\n  // of tokens that rewards can be claimed\\n  address[] public tokens;\\n  mapping(address => bool) tokenAwareness;\\n\\n  mapping(address => uint256) shareholderClaims;\\n\\n  // amount of shares a user has\\n  mapping(address => Share) shares;\\n  // dividend information per user\\n  mapping(address => mapping(address => Reward)) public rewards;\\n\\n  address public boostContract;\\n  address public boostMultiplierContract;\\n\\n  // per token rewards\\n  mapping(address => uint256) public totalRewards;\\n  mapping(address => uint256) public totalDistributed; // to be shown in UI\\n  mapping(address => uint256) public rewardsPerShare;\\n\\n  uint256 public constant ACC_FACTOR = 10**36;\\n  address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\n  constructor(\\n    address _dexRouter,\\n    address _shareholderToken,\\n    address _nftBoosterToken,\\n    address _wrappedNative\\n  ) {\\n    router = IUniswapV2Router02(_dexRouter);\\n    shareholderToken = _shareholderToken;\\n    nftBoosterToken = _nftBoosterToken;\\n    wrappedNative = _wrappedNative;\\n  }\\n\\n  function stake(\\n    address token,\\n    uint256 amount,\\n    uint256[] memory nftTokenIds\\n  ) external {\\n    _stake(msg.sender, token, amount, nftTokenIds, false);\\n  }\\n\\n  function _stake(\\n    address shareholder,\\n    address token,\\n    uint256 amount,\\n    uint256[] memory nftTokenIds,\\n    bool overrideTransfers\\n  ) private {\\n    if (shares[shareholder].amount > 0 && !overrideTransfers) {\\n      distributeReward(token, shareholder, false);\\n    }\\n\\n    IERC20 shareContract = IERC20(shareholderToken);\\n    uint256 stakeAmount = amount == 0\\n      ? shareContract.balanceOf(shareholder)\\n      : amount;\\n    uint256 sharesBefore = shares[shareholder].amount;\\n\\n    // for compounding we will pass in this contract override flag and assume the tokens\\n    // received by the contract during the compounding process are already here, therefore\\n    // whatever the amount is passed in is what we care about and leave it at that. If a normal\\n    // staking though by a user, transfer tokens from the user to the contract.\\n    uint256 finalBaseAmount = stakeAmount;\\n    if (!overrideTransfers) {\\n      uint256 shareBalanceBefore = shareContract.balanceOf(address(this));\\n      shareContract.transferFrom(shareholder, address(this), stakeAmount);\\n      finalBaseAmount = shareContract.balanceOf(address(this)).sub(\\n        shareBalanceBefore\\n      );\\n\\n      IERC721 nftContract = IERC721(nftBoosterToken);\\n      for (uint256 i = 0; i < nftTokenIds.length; i++) {\\n        nftContract.transferFrom(shareholder, address(this), nftTokenIds[i]);\\n        shares[shareholder].nftBoostTokenIds.push(nftTokenIds[i]);\\n      }\\n    }\\n\\n    // NOTE: temporarily setting shares[shareholder].amount to base deposited to get elevated shares.\\n    // They depend on shares[shareholder].amount being populated, but we're simply reversing this\\n    // after calculating boosted amount\\n    uint256 currentAmountWithBoost = shares[shareholder].amount;\\n    shares[shareholder].amount = shares[shareholder].amountBase.add(\\n      finalBaseAmount\\n    );\\n\\n    // this is the final amount AFTER adding the new base amount, not just the additional\\n    uint256 finalBoostedAmount = getElevatedSharesWithBooster(\\n      shareholder,\\n      shares[shareholder].amount\\n    );\\n\\n    shares[shareholder].amount = currentAmountWithBoost;\\n\\n    totalSharesDeposited = totalSharesDeposited.add(finalBaseAmount);\\n    totalSharesBoosted = totalSharesBoosted.sub(shares[shareholder].amount).add(\\n        finalBoostedAmount\\n      );\\n    shares[shareholder].amountBase += finalBaseAmount;\\n    shares[shareholder].amount = finalBoostedAmount;\\n    shares[shareholder].stakedTime = block.timestamp;\\n    if (sharesBefore == 0 && shares[shareholder].amount > 0) {\\n      totalStakedUsers++;\\n    }\\n    rewards[shareholder][token].totalExcluded = getCumulativeRewards(\\n      token,\\n      shares[shareholder].amount\\n    );\\n  }\\n\\n  function unstake(\\n    address token,\\n    uint256 boostedAmount,\\n    bool relinquishRewards\\n  ) external {\\n    require(\\n      shares[msg.sender].amount > 0 &&\\n        (boostedAmount == 0 || boostedAmount <= shares[msg.sender].amount),\\n      'you can only unstake if you have some staked'\\n    );\\n    require(\\n      block.timestamp > shares[msg.sender].stakedTime + minSecondsBeforeUnstake,\\n      'must be staked for minimum time and at least one block if no min'\\n    );\\n    if (!relinquishRewards) {\\n      distributeReward(token, msg.sender, false);\\n    }\\n\\n    IERC20 shareContract = IERC20(shareholderToken);\\n    uint256 boostedAmountToUnstake = boostedAmount == 0\\n      ? shares[msg.sender].amount\\n      : boostedAmount;\\n\\n    // NOTE: temporarily setting shares[shareholder].amount to base deposited to get elevated shares.\\n    // They depend on shares[shareholder].amount being populated, but we're simply reversing this\\n    // after calculating boosted amount\\n    uint256 currentAmountWithBoost = shares[msg.sender].amount;\\n    shares[msg.sender].amount = shares[msg.sender].amountBase;\\n    uint256 baseAmount = getBaseSharesFromBoosted(\\n      msg.sender,\\n      boostedAmountToUnstake\\n    );\\n    shares[msg.sender].amount = currentAmountWithBoost;\\n\\n    // handle reflections tokens\\n    uint256 finalWithdrawAmount = getAppreciatedShares(baseAmount);\\n\\n    if (boostedAmount == 0) {\\n      uint256[] memory tokenIds = shares[msg.sender].nftBoostTokenIds;\\n      IERC721 nftContract = IERC721(nftBoosterToken);\\n      for (uint256 i = 0; i < tokenIds.length; i++) {\\n        nftContract.safeTransferFrom(address(this), msg.sender, tokenIds[i]);\\n      }\\n      totalStakedUsers--;\\n      delete shares[msg.sender].nftBoostTokenIds;\\n    }\\n\\n    shareContract.transfer(msg.sender, finalWithdrawAmount);\\n\\n    totalSharesDeposited = totalSharesDeposited.sub(baseAmount);\\n    totalSharesBoosted = totalSharesBoosted.sub(boostedAmountToUnstake);\\n    shares[msg.sender].amountBase -= baseAmount;\\n    shares[msg.sender].amount -= boostedAmountToUnstake;\\n    rewards[msg.sender][token].totalExcluded = getCumulativeRewards(\\n      token,\\n      shares[msg.sender].amount\\n    );\\n  }\\n\\n  // tokenAddress == address(0) means native token\\n  // any other token should be ERC20 listed on DEX router provided in constructor\\n  //\\n  // NOTE: Using this function will add tokens to the core rewards/rewards to be\\n  // distributed to all shareholders. However, to implement boosting, the token\\n  // should be directly transferred to this contract. Anything above and\\n  // beyond the totalRewards[tokenAddress] amount will be used for boosting.\\n  function depositRewards(address tokenAddress, uint256 erc20DirectAmount)\\n    external\\n    payable\\n    override\\n  {\\n    require(\\n      erc20DirectAmount > 0 || msg.value > 0,\\n      'value must be greater than 0'\\n    );\\n    require(\\n      totalSharesBoosted > 0,\\n      'must be shares deposited to be rewarded rewards'\\n    );\\n\\n    if (!tokenAwareness[tokenAddress]) {\\n      tokenAwareness[tokenAddress] = true;\\n      tokens.push(tokenAddress);\\n    }\\n\\n    IERC20 token;\\n    uint256 amount;\\n    if (tokenAddress == address(0)) {\\n      (bool sent, ) = payable(address(this)).call{ value: msg.value }('');\\n      require(sent, 'ETH was not successfully sent');\\n      amount = msg.value;\\n    } else if (erc20DirectAmount > 0) {\\n      token = IERC20(tokenAddress);\\n      uint256 balanceBefore = token.balanceOf(address(this));\\n\\n      token.transferFrom(msg.sender, address(this), erc20DirectAmount);\\n\\n      amount = token.balanceOf(address(this)).sub(balanceBefore);\\n    } else {\\n      token = IERC20(tokenAddress);\\n      uint256 balanceBefore = token.balanceOf(address(this));\\n\\n      address[] memory path = new address[](2);\\n      path[0] = wrappedNative;\\n      path[1] = tokenAddress;\\n\\n      router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n        value: msg.value\\n      }(0, path, address(this), block.timestamp);\\n\\n      amount = token.balanceOf(address(this)).sub(balanceBefore);\\n    }\\n\\n    totalRewards[tokenAddress] = totalRewards[tokenAddress].add(amount);\\n    rewardsPerShare[tokenAddress] = rewardsPerShare[tokenAddress].add(\\n      ACC_FACTOR.mul(amount).div(totalSharesBoosted)\\n    );\\n  }\\n\\n  function distributeReward(\\n    address token,\\n    address shareholder,\\n    bool compound\\n  ) internal {\\n    require(\\n      block.timestamp > rewards[shareholder][token].lastClaim,\\n      'can only claim once per block'\\n    );\\n    if (shares[shareholder].amount == 0) {\\n      return;\\n    }\\n\\n    uint256 amount = getUnpaid(token, shareholder);\\n\\n    shareholderClaims[shareholder] = block.timestamp;\\n    rewards[shareholder][token].totalRealised = rewards[shareholder][token]\\n      .totalRealised\\n      .add(amount);\\n    rewards[shareholder][token].totalExcluded = getCumulativeRewards(\\n      token,\\n      shares[shareholder].amount\\n    );\\n    rewards[shareholder][token].lastClaim = block.timestamp;\\n\\n    if (amount > 0) {\\n      totalDistributed[token] = totalDistributed[token].add(amount);\\n      // native transfer\\n      if (token == address(0)) {\\n        uint256 balanceBefore = address(this).balance;\\n        if (compound) {\\n          IERC20 shareToken = IERC20(shareholderToken);\\n          uint256 balBefore = shareToken.balanceOf(address(this));\\n          address[] memory path = new address[](2);\\n          path[0] = wrappedNative;\\n          path[1] = shareholderToken;\\n          router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n            value: amount\\n          }(0, path, address(this), block.timestamp);\\n          uint256 amountReceived = shareToken.balanceOf(address(this)).sub(\\n            balBefore\\n          );\\n          if (amountReceived > 0) {\\n            uint256[] memory _empty = new uint256[](0);\\n            _stake(shareholder, token, amountReceived, _empty, true);\\n          }\\n        } else {\\n          (bool sent, ) = payable(shareholder).call{ value: amount }('');\\n          require(sent, 'ETH was not successfully sent');\\n        }\\n        require(\\n          address(this).balance >= balanceBefore - amount,\\n          'only take proper amount from contract'\\n        );\\n      } else {\\n        IERC20(token).transfer(shareholder, amount);\\n      }\\n    }\\n  }\\n\\n  function claimReward(address token, bool compound) external {\\n    distributeReward(token, msg.sender, compound);\\n  }\\n\\n  function getAppreciatedShares(uint256 amount) public view returns (uint256) {\\n    IERC20 shareContract = IERC20(shareholderToken);\\n    uint256 totalSharesBalance = shareContract.balanceOf(address(this)).sub(\\n      totalRewards[shareholderToken].sub(totalDistributed[shareholderToken])\\n    );\\n    uint256 appreciationRatio18 = totalSharesBalance.mul(10**18).div(\\n      totalSharesDeposited\\n    );\\n    return amount.mul(appreciationRatio18).div(10**18);\\n  }\\n\\n  function getRewardTokens() external view returns (address[] memory) {\\n    return tokens;\\n  }\\n\\n  // getElevatedSharesWithBooster:\\n  // A + Ax = B\\n  // ------------------------\\n  // getBaseSharesFromBoosted:\\n  // A + Ax = B\\n  // A(1 + x) = B\\n  // A = B/(1 + x)\\n  function getElevatedSharesWithBooster(address shareholder, uint256 baseAmount)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return\\n      eligibleForRewardBooster(shareholder)\\n        ? baseAmount.add(\\n          baseAmount.mul(getBoostMultiplier(shareholder)).div(10**2)\\n        )\\n        : baseAmount;\\n  }\\n\\n  function getBaseSharesFromBoosted(address shareholder, uint256 boostedAmount)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    uint256 multiplier = 10**18;\\n    return\\n      eligibleForRewardBooster(shareholder)\\n        ? boostedAmount.mul(multiplier).div(\\n          multiplier.add(\\n            multiplier.mul(getBoostMultiplier(shareholder)).div(10**2)\\n          )\\n        )\\n        : boostedAmount;\\n  }\\n\\n  // NOTE: 2022-01-31 LW: new boost contract assumes OKLG and booster NFTs are staked in this contract\\n  function getBoostMultiplier(address wallet) public view returns (uint256) {\\n    return\\n      boostMultiplierContract == address(0)\\n        ? 0\\n        : IMultiplier(boostMultiplierContract).getMultiplier(wallet);\\n  }\\n\\n  // NOTE: 2022-01-31 LW: new boost contract assumes OKLG and booster NFTs are staked in this contract\\n  function eligibleForRewardBooster(address shareholder)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return\\n      boostContract != address(0) &&\\n      IConditional(boostContract).passesTest(shareholder);\\n  }\\n\\n  // returns the unpaid rewards\\n  function getUnpaid(address token, address shareholder)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    if (shares[shareholder].amount == 0) {\\n      return 0;\\n    }\\n\\n    uint256 earnedRewards = getCumulativeRewards(\\n      token,\\n      shares[shareholder].amount\\n    );\\n    uint256 rewardsExcluded = rewards[shareholder][token].totalExcluded;\\n    if (earnedRewards <= rewardsExcluded) {\\n      return 0;\\n    }\\n\\n    return earnedRewards.sub(rewardsExcluded);\\n  }\\n\\n  function getCumulativeRewards(address token, uint256 share)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return share.mul(rewardsPerShare[token]).div(ACC_FACTOR);\\n  }\\n\\n  function getBaseShares(address user) external view returns (uint256) {\\n    return shares[user].amountBase;\\n  }\\n\\n  function getShares(address user) external view override returns (uint256) {\\n    return shares[user].amount;\\n  }\\n\\n  function getBoostNfts(address user)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory)\\n  {\\n    return shares[user].nftBoostTokenIds;\\n  }\\n\\n  function setShareholderToken(address _token) external onlyOwner {\\n    shareholderToken = _token;\\n  }\\n\\n  function setBoostContract(address _contract) external onlyOwner {\\n    if (_contract != address(0)) {\\n      IConditional _contCheck = IConditional(_contract);\\n      // allow setting to zero address to effectively turn off check logic\\n      require(\\n        _contCheck.passesTest(address(0)) == true ||\\n          _contCheck.passesTest(address(0)) == false,\\n        'contract does not implement interface'\\n      );\\n    }\\n    boostContract = _contract;\\n  }\\n\\n  function setBoostMultiplierContract(address _contract) external onlyOwner {\\n    if (_contract != address(0)) {\\n      IMultiplier _contCheck = IMultiplier(_contract);\\n      // allow setting to zero address to effectively turn off check logic\\n      require(\\n        _contCheck.getMultiplier(address(0)) >= 0,\\n        'contract does not implement interface'\\n      );\\n    }\\n    boostMultiplierContract = _contract;\\n  }\\n\\n  function setMinSecondsBeforeUnstake(uint256 _seconds) external onlyOwner {\\n    minSecondsBeforeUnstake = _seconds;\\n  }\\n\\n  function stakeOverride(\\n    address token,\\n    address[] memory users,\\n    Share[] memory shareholderInfo\\n  ) external onlyOwner {\\n    require(users.length == shareholderInfo.length, 'must be same length');\\n    uint256[] memory _empty = new uint256[](0);\\n    for (uint256 i = 0; i < users.length; i++) {\\n      shares[users[i]].nftBoostTokenIds = shareholderInfo[i].nftBoostTokenIds;\\n      _stake(users[i], token, shareholderInfo[i].amountBase, _empty, true);\\n    }\\n  }\\n\\n  function withdrawNfts(address nftContractAddy, uint256[] memory _tokenIds)\\n    external\\n    onlyOwner\\n  {\\n    IERC721 nftContract = IERC721(nftContractAddy);\\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\\n      nftContract.transferFrom(address(this), owner(), _tokenIds[i]);\\n    }\\n  }\\n\\n  receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConditional.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface for the Buy Back Reward contract that can be used to build\\n * custom logic to elevate user rewards\\n */\\ninterface IConditional {\\n  /**\\n   * @dev Returns whether a wallet passes the test.\\n   */\\n  function passesTest(address wallet) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMultiplier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMultiplier {\\n  function getMultiplier(address wallet) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOKLGRewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOKLGRewardDistributor {\\n  function depositRewards(address tokenAddress, uint256 erc20DirectAmount)\\n    external\\n    payable;\\n\\n  function getShares(address wallet) external view returns (uint256);\\n\\n  function getBoostNfts(address wallet)\\n    external\\n    view\\n    returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/OKLGWithdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\n/**\\n * @title OKLGWithdrawable\\n * @dev Supports being able to get tokens or ETH out of a contract with ease\\n */\\ncontract OKLGWithdrawable is Ownable {\\n  function withdrawTokens(address _tokenAddy, uint256 _amount)\\n    external\\n    onlyOwner\\n  {\\n    IERC20 _token = IERC20(_tokenAddy);\\n    _amount = _amount > 0 ? _amount : _token.balanceOf(address(this));\\n    require(_amount > 0, 'make sure there is a balance available to withdraw');\\n    _token.transfer(owner(), _amount);\\n  }\\n\\n  function withdrawETH() external onlyOwner {\\n    payable(owner()).call{ value: address(this).balance }('');\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shareholderToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftBoosterToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostMultiplierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"compound\",\"type\":\"bool\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20DirectAmount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"eligibleForRewardBooster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAppreciatedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBaseShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"boostedAmount\",\"type\":\"uint256\"}],\"name\":\"getBaseSharesFromBoosted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBoostNfts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSecondsBeforeUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftBoosterToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setBoostContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setBoostMultiplierContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setMinSecondsBeforeUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setShareholderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareholderToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftBoostTokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct OKLGRewardDistributor.Share[]\",\"name\":\"shareholderInfo\",\"type\":\"tuple[]\"}],\"name\":\"stakeOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSharesBoosted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSharesDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"boostedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"relinquishRewards\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddy\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OKLGRewardDistributor", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000005dbb9f64cd96e2dbbca58d14863d615b67b42f2e000000000000000000000000daf531fd52eaa4b33a5158b0da3305caaaf96cd6000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}