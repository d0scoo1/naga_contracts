{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"MyFundStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\n// Get the latest ETH/USD price from chainlink price feed\\nimport \\\"AggregatorV3Interface.sol\\\";\\nimport \\\"LinkTokenInterface.sol\\\";\\nimport \\\"VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"VRFConsumerBaseV2.sol\\\";\\nimport \\\"Ownable.sol\\\";\\n\\ncontract MyFundStorage is VRFConsumerBaseV2, Ownable {\\n\\n    address payable[] private payers;\\n    uint256 private usdEntryFee;\\n    uint256 private MINIMUM_ENTRY_FEE = 50;\\n   \\n    AggregatorV3Interface internal ethUsdPriceFeed;\\n\\n    enum FUNDING_STATE {\\n        OPEN,\\n        CLOSED,\\n        END\\n    }\\n    FUNDING_STATE private funding_state;\\n\\n\\n    VRFCoordinatorV2Interface immutable COORDINATOR;\\n    LinkTokenInterface immutable LINKTOKEN;\\n\\n  // Your subscription ID.\\n  uint64 immutable s_subscriptionId;\\n\\n  // The gas lane to use, which specifies the maximum gas price to bump to.\\n  // For a list of available gas lanes on each network,\\n  bytes32 immutable s_keyHash;\\n\\n  // Depends on the number of requested values that you want sent to the\\n  // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\n  // so 100,000 is a safe default for this example contract. Test and adjust\\n  // this limit based on the network that you select, the size of the request,\\n  // and the processing of the callback request in the fulfillRandomWords()\\n  // function.\\n  uint32 immutable s_callbackGasLimit = 100000;\\n\\n  // The default is 3, but you can set this higher.\\n  uint16 immutable s_requestConfirmations = 3;\\n\\n  // For this example, retrieve 2 random values in one request.\\n  // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\\n  uint32 immutable s_numWords = 2;\\n\\n  uint256[] public s_randomWords;\\n  uint256 public s_requestId;\\n  address s_owner;\\n\\n  event ReturnedRandomness1_endFunding(uint256 requestId);\\n  event ReturnedRandomness2_withdraw(uint256 requestId);\\n  event ReturnedRandomness3_fulfill(uint256 requestId);\\n\\n    /**\\n   * @notice Constructor inherits VRFConsumerBaseV2\\n   *\\n   * @param subscriptionId - the subscription ID that this contract uses for funding requests\\n   * @param vrfCoordinator - coordinator\\n   * @param keyHash - the gas lane to use, which specifies the maximum gas price to bump to\\n   */\\n    constructor(\\n    address _priceFeedAddress,\\n    uint64 subscriptionId,\\n    address vrfCoordinator,\\n    address link,\\n    bytes32 keyHash\\n  ) VRFConsumerBaseV2(vrfCoordinator) payable{\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        LINKTOKEN = LinkTokenInterface(link);\\n        s_keyHash = keyHash;\\n        s_owner = msg.sender;\\n        s_subscriptionId = subscriptionId;\\n\\n        usdEntryFee = MINIMUM_ENTRY_FEE * (10**18);\\n        ethUsdPriceFeed = AggregatorV3Interface(_priceFeedAddress);\\n        funding_state = FUNDING_STATE.CLOSED;\\n  }\\n    function startFunding() external onlyOwner {\\n        require(\\n            funding_state == FUNDING_STATE.CLOSED,\\n            \\\"Can't start a new fund yet! Current funding is not closed yet!\\\"\\n        );\\n        funding_state = FUNDING_STATE.OPEN;\\n    }\\n\\n    function fund() external payable {\\n        // $50 minimum\\n\\n        require(funding_state == FUNDING_STATE.OPEN, \\\"Can't fund yet.\\\");\\n        require(msg.value >= this.getEntranceFee(), \\\"Not enough ETH! Minimum $50 value of ETH require!\\\");\\n\\n        payers.push(payable(msg.sender));\\n    }\\n\\n    function getETHprice() internal view returns (uint256) {\\n      \\n       (, int256 price, , , ) = ethUsdPriceFeed.latestRoundData();\\n        uint256 adjustedPrice = uint256(price) * 10**10; // 18 decimals\\n        return adjustedPrice;\\n    }\\n\\n    // 1000000000\\n    function getETHpriceUSD() internal view returns (uint256) {\\n        uint256 ethPrice = getETHprice();\\n        uint256 ethAmountInUsd = ethPrice / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n\\n    function getEntranceFee() external view returns (uint256) {\\n\\n        uint256 adjustedPrice = getETHprice();\\n\\n        // $50, $2,000 / ETH\\n        // 50/2,000\\n        // 50 * 100000 / 2000\\n        uint256 costToEnter = (usdEntryFee * 10**18) / adjustedPrice;\\n        return costToEnter;\\n    }\\n\\n    function getCurrentFundingState() external view returns (FUNDING_STATE) {\\n        return funding_state;\\n    }\\n\\n    function getUsersTotalAmount() external view returns (uint256) {\\n        return uint256(address(this).balance);\\n    }\\n\\n   /* function getUserAmount(address user) public view returns (uint256) {\\n        return payable(payers[user]).balance;\\n    }\\n    */\\n\\n    function endFunding() external onlyOwner {\\n        require(funding_state == FUNDING_STATE.OPEN, \\\"Funding is not opened yet.\\\");\\n        funding_state = FUNDING_STATE.END;\\n      //  this.requestRandomWords();\\n       \\n        //funding_state = FUNDING_STATE.CLOSED;\\n      //  emit ReturnedRandomness1_endFunding(s_requestId);\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        \\n        require(\\n            funding_state == FUNDING_STATE.END,\\n            \\\"Funding must be ended before withdraw!\\\"\\n        );\\n        //require(address(this).balance > 0, \\\"balance: 0\\\");\\n        requestRandomWords();\\n       // payable(msg.sender).transfer(address(this).balance);\\n      //  payers = new address payable[](0);\\n      //  funding_state = FUNDING_STATE.CLOSED;\\n        emit ReturnedRandomness2_withdraw(s_requestId);\\n        funding_state = FUNDING_STATE.CLOSED;\\n    }\\n\\n    function withdraw2() external onlyOwner {\\n        \\n        require(\\n            funding_state == FUNDING_STATE.END,\\n            \\\"Funding must be ended before withdraw!\\\"\\n        );\\n        payable(msg.sender).transfer(address(this).balance);\\n        payers = new address payable[](0);\\n        funding_state = FUNDING_STATE.CLOSED;\\n        emit ReturnedRandomness2_withdraw(s_requestId);\\n    }\\n\\n    function updateFundingState(FUNDING_STATE _funding_state) external onlyOwner {\\n        funding_state = _funding_state;\\n    }\\n\\n    /**\\n    * @notice Requests randomness\\n    * Assumes the subscription is funded sufficiently; \\\"Words\\\" refers to unit of data in Computer Science\\n     */\\n    function requestRandomWords() internal {\\n    // Will revert if subscription is not set and funded.\\n        s_requestId = COORDINATOR.requestRandomWords(\\n        s_keyHash,\\n        s_subscriptionId,\\n        s_requestConfirmations,\\n        s_callbackGasLimit,\\n        s_numWords\\n        );\\n    }\\n\\n    /*\\n    * @notice Callback function used by VRF Coordinator\\n    *\\n    * @param requestId - id of the request\\n    * @param randomWords - array of random results from VRF Coordinator\\n    */\\n    function fulfillRandomWords(\\n    uint256, /* requestId */\\n    uint256[] memory randomWords\\n    ) internal override {\\n        emit ReturnedRandomness3_fulfill(s_requestId);\\n        s_randomWords = randomWords;\\n\\n        payable(msg.sender).transfer(uint256(address(this).balance));\\n        payers = new address payable[](0);\\n        funding_state = FUNDING_STATE.CLOSED;\\n    }\\n\\n  }\"\r\n    },\r\n    \"AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n\\n  /**\\n   * @notice Returns the global config that applies to all VRF requests.\\n   * @return minimumRequestBlockConfirmations - A minimum number of confirmation\\n   * blocks on VRF requests before oracles should respond.\\n   * @return fulfillmentFlatFeeLinkPPM - The charge per request on top of the gas fees.\\n   * Its flat fee specified in millionths of LINK.\\n   * @return maxGasLimit - The maximum gas limit supported for a fulfillRandomWords callback.\\n   * @return stalenessSeconds - How long we wait until we consider the ETH/LINK price\\n   * (used for converting gas costs to LINK) is stale and use `fallbackWeiPerUnitLink`\\n   * @return gasAfterPaymentCalculation - How much gas is used outside of the payment calculation,\\n   * i.e. the gas overhead of actually making the payment to oracles.\\n   * @return minimumSubscriptionBalance - The minimum subscription balance required to make a request. Its set to be about 300%\\n   * of the cost of a single request to handle in ETH/LINK price between request and fulfillment time.\\n   * @return fallbackWeiPerUnitLink - fallback ETH/LINK price in the case of a stale feed.\\n   */\\n  function getConfig()\\n  external\\n  view\\n  returns (\\n    uint16 minimumRequestBlockConfirmations,\\n    uint32 fulfillmentFlatFeeLinkPPM,\\n    uint32 maxGasLimit,\\n    uint32 stalenessSeconds,\\n    uint32 gasAfterPaymentCalculation,\\n    uint96 minimumSubscriptionBalance,\\n    int256 fallbackWeiPerUnitLink\\n  );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with at least minimumSubscriptionBalance (see getConfig) LINK\\n   * before making a request.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [5000, maxGasLimit].\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64  subId,\\n    uint16  minimumRequestConfirmations,\\n    uint32  callbackGasLimit,\\n    uint32  numWords\\n  )\\n    external\\n    returns (\\n      uint256 requestId\\n    );\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription()\\n    external\\n    returns (\\n      uint64 subId\\n    );\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return owner - Owner of the subscription\\n   * @return consumers - List of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  )\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(\\n    uint64 subId,\\n    address newOwner\\n  )\\n    external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(\\n    uint64 subId\\n  )\\n    external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(\\n    uint64 subId,\\n    address consumer\\n  )\\n    external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(\\n    uint64 subId,\\n    address consumer\\n  )\\n    external;\\n\\n  /**\\n   * @notice Withdraw funds from a VRF subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the withdrawn LINK to\\n   * @param amount - How much to withdraw in juels\\n   */\\n  function defundSubscription(\\n    uint64 subId,\\n    address to,\\n    uint96 amount\\n  )\\n    external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(\\n    uint64 subId,\\n    address to\\n  )\\n    external;\\n}\\n\"\r\n    },\r\n    \"VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address immutable private vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(\\n    address _vrfCoordinator\\n  )\\n  {\\n      vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(\\n    uint256 requestId,\\n    uint256[] memory randomWords\\n  )\\n    internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(\\n    uint256 requestId,\\n    uint256[] memory randomWords\\n  )\\n    external\\n  {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"MyFundStorage.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"ReturnedRandomness1_endFunding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"ReturnedRandomness2_withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"ReturnedRandomness3_fulfill\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"endFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentFundingState\",\"outputs\":[{\"internalType\":\"enum MyFundStorage.FUNDING_STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MyFundStorage.FUNDING_STATE\",\"name\":\"_funding_state\",\"type\":\"uint8\"}],\"name\":\"updateFundingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MyFundStorage", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e69909000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}