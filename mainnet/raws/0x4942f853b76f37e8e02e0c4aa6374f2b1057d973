{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n//        __  ___      ____  _ _____                __              //\r\n//       /  |/  /_  __/ / /_(_) ___/___  ____  ____/ /__  _____     //\r\n//      / /|_/ / / / / / __/ /\\__ \\/ _ \\/ __ \\/ __  / _ \\/ ___/     //\r\n//     / /  / / /_/ / / /_/ /___/ /  __/ / / / /_/ /  __/ /         //\r\n//    /_/  /_/\\__,_/_/\\__/_//____/\\___/_/ /_/\\__,_/\\___/_/          //\r\n//     by 0xInuarashi.eth                                           //\r\n//                                                                  //\r\n//////////////////////////////////////////////////////////////////////\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address address_) external view returns (uint256);\r\n    function transferFrom(address from_, address to_, uint256 amount_) external\r\n    returns (bool);\r\n}\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId_) external view returns (address);\r\n    function transferFrom(address from_, address to_, uint256 tokenId_) external;\r\n}\r\n\r\ninterface IERC1155 {\r\n    function balanceOf(address address_, uint256 tokenId_) external view \r\n    returns (uint256);\r\n\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_,\r\n    uint256 amount_, bytes calldata data_) external;\r\n}\r\n\r\ncontract MultiSender {\r\n\r\n    // Internal Functions\r\n    function _sendETH(address payable address_, uint256 amount_) internal {\r\n        (bool success, ) = payable(address_).call{value: amount_}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n    function _calculateTotalAmounts(uint256[] memory amounts_) internal pure\r\n    returns (uint256 _totalAmount) {\r\n        for (uint256 i = 0; i < amounts_.length; i++) {\r\n            _totalAmount += amounts_[i];\r\n        }\r\n    }\r\n\r\n    function multiSendETH(address payable[] calldata addresses_, \r\n    uint256[] calldata amounts_, bool useChecks_) external payable {\r\n        require(addresses_.length == amounts_.length,\r\n            \"Array lengths mismatch!\");\r\n\r\n        // We use loop checks but we can opt out to save gas\r\n        if (useChecks_) {\r\n            // Get the Total Amount\r\n            uint256 _totalAmount = _calculateTotalAmounts(amounts_);\r\n\r\n            require(msg.value == _totalAmount,\r\n                \"Invalid amount of ETH sent!\");\r\n        }\r\n\r\n        // Multi-Send the ETHs\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            _sendETH(addresses_[i], amounts_[i]);\r\n        }\r\n    }\r\n\r\n    function multiSendERC20(address erc20_, address[] calldata addresses_,\r\n    uint256[] calldata amounts_, bool useChecks_) external {\r\n        require(addresses_.length == amounts_.length,\r\n            \"Array lengths mismatch!\");\r\n\r\n        // We use loop checks but we can opt out to save gas\r\n        if (useChecks_) {\r\n            // Get the Total Amount\r\n            uint256 _totalAmount = _calculateTotalAmounts(amounts_);\r\n\r\n            // Make sure the msg.sender has enough ETH\r\n            require(IERC20(erc20_).balanceOf(msg.sender) >= _totalAmount,\r\n                \"msg.sender does not have enough balance!\");\r\n        }\r\n\r\n        // Multi-Send ERC20s\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            IERC20(erc20_).transferFrom(msg.sender, addresses_[i], amounts_[i]);\r\n        }\r\n    }\r\n\r\n    function multiSendERC721(address erc721_, address[] calldata addresses_,\r\n    uint256[] calldata tokenIds_, bool useChecks_) external {\r\n        require(addresses_.length == tokenIds_.length,\r\n            \"Array lengths mismatch!\");\r\n\r\n        if (useChecks_) {\r\n            for (uint256 i = 0; i < tokenIds_.length; i++) {\r\n                require(msg.sender == IERC721(erc721_).ownerOf(tokenIds_[i]),\r\n                    \"You are not the owner of this token!\");\r\n            }\r\n        }\r\n\r\n        // Multi-Send ERC721s\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            IERC721(erc721_).transferFrom(msg.sender, addresses_[i], tokenIds_[i]);\r\n        }\r\n    }\r\n\r\n    function multiSendERC1155(address erc1155_, address[] calldata addresses_,\r\n    uint256[] calldata tokenIds_, uint256[] calldata amounts_,\r\n    bytes calldata data_) external {\r\n        require(addresses_.length == tokenIds_.length \r\n            && addresses_.length == amounts_.length,\r\n            \"Array lengths mismatch!\");\r\n\r\n        // No checks for this one.\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            IERC1155(erc1155_).safeTransferFrom(msg.sender, addresses_[i], tokenIds_[i],\r\n            amounts_[i], data_);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"multiSendERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"useChecks_\",\"type\":\"bool\"}],\"name\":\"multiSendERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"useChecks_\",\"type\":\"bool\"}],\"name\":\"multiSendERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"addresses_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"useChecks_\",\"type\":\"bool\"}],\"name\":\"multiSendETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "MultiSender", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://11a480ca1455f64d5664b0d6cf1230f3cf6481ef1534c52b0ee3b8ba69a4f300"}]}