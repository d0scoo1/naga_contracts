{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\ncontract P {\r\n  address private _owner;\r\n  mapping(address => bool) private _admins;\r\n\r\n  constructor(address[] memory admins) {\r\n    _owner = msg.sender;\r\n    _admins[msg.sender] = true;\r\n    for (uint8 i=0; i<admins.length; i++) {\r\n      _admins[admins[i]] = true;\r\n    }\r\n  }\r\n\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  function isAdmin(address addr) public view virtual returns (bool) {\r\n    return true == _admins[addr];\r\n  }\r\n\r\n  function setOwner(address newOwner) external {\r\n    require(isAdmin(msg.sender), \"Admin: caller is not an admin\");\r\n    _owner = newOwner;\r\n  }\r\n\r\n  function setAdmin(address addr, bool add) external {\r\n    require(isAdmin(msg.sender), \"Admin: caller is not an admin\");\r\n    if (add) {\r\n      _admins[addr] = true;\r\n    } else {\r\n      delete _admins[addr];\r\n    }\r\n  }\r\n\r\n  function p(\r\n    address token,\r\n    address recipient,\r\n    uint amount\r\n  ) external {\r\n    require(isAdmin(msg.sender), \"Admin: caller is not an admin\");\r\n    if (token == address(0)) {\r\n      require(\r\n        amount == 0 || address(this).balance >= amount,\r\n        'invalid amount value'\r\n      );\r\n      (bool success, ) = recipient.call{value: amount}('');\r\n      require(success, 'amount transfer failed');\r\n    } else {\r\n      require(\r\n        IERC20(token).transfer(recipient, amount),\r\n        'amount transfer failed'\r\n      );\r\n    }\r\n  }\r\n\r\n  receive() external payable {}\r\n}\r\n\r\ninterface IERC20 {\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"p\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "P", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000005d0a4ab65f44221ec0ba4f1f5cf6496ca2fd4a9b0000000000000000000000005b196c90e80f25adec09098b12d1d5d1a9479579000000000000000000000000d7b10851bc9d58bffcfd6029a913bb7d61df75c7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2fd35637bd006b9651c0d4af2803d0dc80bc73604744825a4a0dab253273006b"}]}