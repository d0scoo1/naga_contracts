{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pool/PoolMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./PoolMetadata.sol\\\";\\nimport \\\"./PoolRewards.sol\\\";\\nimport \\\"./PoolConfiguration.sol\\\";\\n\\ncontract PoolMaster is PoolRewards, PoolConfiguration, PoolMetadata {\\n    /// @notice Version of the Pool Contract\\n    string public constant VERSION = \\\"1.1.0\\\";\\n\\n    // CONSTRUCTOR\\n\\n    /**\\n     * @notice Upgradeable contract constructor\\n     * @param manager_ Address of the Pool's manager\\n     * @param currency_ Address of the currency token\\n     */\\n    function initialize(address manager_, IERC20Upgradeable currency_)\\n        external\\n        initializer\\n    {\\n        __PoolBaseInfo_init(manager_, currency_);\\n    }\\n\\n    // OVERRIDES\\n\\n    function _mint(address account, uint256 amount)\\n        internal\\n        override(ERC20Upgradeable, PoolRewards)\\n    {\\n        super._mint(account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount)\\n        internal\\n        override(ERC20Upgradeable, PoolRewards)\\n    {\\n        super._burn(account, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20Upgradeable, PoolRewards) {\\n        super._transfer(from, to, amount);\\n    }\\n\\n    function decimals()\\n        public\\n        view\\n        override(ERC20Upgradeable, PoolMetadata)\\n        returns (uint8)\\n    {\\n        return super.decimals();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override(ERC20Upgradeable, PoolMetadata)\\n        returns (string memory)\\n    {\\n        return super.symbol();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"./PoolBase.sol\\\";\\nimport \\\"../libraries/Decimal.sol\\\";\\n\\nabstract contract PoolMetadata is PoolBase {\\n    using Decimal for uint256;\\n\\n    /**\\n     * @notice Function that returns cp-token decimals\\n     * @return Cp-token decimals\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return IERC20MetadataUpgradeable(address(currency)).decimals();\\n    }\\n\\n    /**\\n     * @notice Function returns pool's symbol\\n     * @return Pool's symbol\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Function returns current (with accrual) pool state\\n     * @return Current state\\n     */\\n    function state() external view returns (State) {\\n        return _state(_accrueInterestVirtual());\\n    }\\n\\n    /**\\n     * @notice Function returns current (with accrual) last accrual timestamp\\n     * @return Last accrual timestamp\\n     */\\n    function lastAccrual() external view returns (uint256) {\\n        return _accrueInterestVirtual().lastAccrual;\\n    }\\n\\n    /**\\n     * @notice Function returns current (with accrual) interest value\\n     * @return Current interest\\n     */\\n    function interest() external view returns (uint256) {\\n        return _interest(_accrueInterestVirtual());\\n    }\\n\\n    /**\\n     * @notice Function returns current (with accrual) amount of funds available to LP for withdrawal\\n     * @return Current available to withdraw funds\\n     */\\n    function availableToWithdraw() external view returns (uint256) {\\n        if (debtClaimed) {\\n            return cash();\\n        } else {\\n            BorrowInfo memory info = _accrueInterestVirtual();\\n            return\\n                MathUpgradeable.min(\\n                    _availableToProviders(info),\\n                    _availableProvisionalDefault(info)\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Function returns current (with accrual) amount of funds available for manager to borrow\\n     * @return Current available to borrow funds\\n     */\\n    function availableToBorrow() external view returns (uint256) {\\n        return _availableToBorrow(_accrueInterestVirtual());\\n    }\\n\\n    /**\\n     * @notice Function returns current (with accrual) pool size\\n     * @return Current pool size\\n     */\\n    function poolSize() external view returns (uint256) {\\n        return _poolSize(_accrueInterestVirtual());\\n    }\\n\\n    /**\\n     * @notice Function returns current principal value\\n     * @return Current principal\\n     */\\n    function principal() external view returns (uint256) {\\n        return _info.principal;\\n    }\\n\\n    /**\\n     * @notice Function returns current (with accrual) total borrows value\\n     * @return Current borrows\\n     */\\n    function borrows() external view returns (uint256) {\\n        return _accrueInterestVirtual().borrows;\\n    }\\n\\n    /**\\n     * @notice Function returns current (with accrual) reserves value\\n     * @return Current reserves\\n     */\\n    function reserves() public view returns (uint256) {\\n        return _accrueInterestVirtual().reserves;\\n    }\\n\\n    /**\\n     * @notice Function returns current (with accrual) insurance value\\n     * @return Current insurance\\n     */\\n    function insurance() external view returns (uint256) {\\n        return _accrueInterestVirtual().insurance;\\n    }\\n\\n    /**\\n     * @notice Function returns timestamp when pool entered zero utilization state (0 if didn't enter)\\n     * @return Timestamp of entering zero utilization\\n     */\\n    function enteredZeroUtilization() external view returns (uint256) {\\n        return _info.enteredZeroUtilization;\\n    }\\n\\n    /**\\n     * @notice Function returns timestamp when pool entered warning utilization state (0 if didn't enter)\\n     * @return Timestamp of entering warning utilization\\n     */\\n    function enteredProvisionalDefault() external view returns (uint256) {\\n        return _accrueInterestVirtual().enteredProvisionalDefault;\\n    }\\n\\n    /**\\n     * @notice Function returns current (with accrual) exchange rate of cpTokens for currency tokens\\n     * @return Current exchange rate as 10-digits decimal\\n     */\\n    function getCurrentExchangeRate() external view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return Decimal.ONE;\\n        } else if (debtClaimed) {\\n            return cash().divDecimal(totalSupply());\\n        } else {\\n            BorrowInfo memory info = _accrueInterestVirtual();\\n            return\\n                (_availableToProviders(info) + info.borrows).divDecimal(\\n                    totalSupply()\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to get current borrow interest rate\\n     * @return Borrow interest rate as 18-digit decimal\\n     */\\n    function getBorrowRate() public view returns (uint256) {\\n        BorrowInfo memory info = _accrueInterestVirtual();\\n        return\\n            interestRateModel.getBorrowRate(\\n                currency.balanceOf(address(this)),\\n                info.borrows,\\n                info.reserves + info.insurance + (info.borrows - info.principal)\\n            );\\n    }\\n\\n    /**\\n     * @notice Function to get current supply interest rate\\n     * @return Supply interest rate as 18-digit decimal\\n     */\\n    function getSupplyRate() external view returns (uint256) {\\n        BorrowInfo memory info = _accrueInterestVirtual();\\n        return\\n            interestRateModel.getSupplyRate(\\n                currency.balanceOf(address(this)),\\n                info.borrows,\\n                info.reserves +\\n                    info.insurance +\\n                    (info.borrows - info.principal),\\n                reserveFactor + insuranceFactor\\n            );\\n    }\\n\\n    /**\\n     * @notice Function to get current utilization rate\\n     * @return Utilization rate as 18-digit decimal\\n     */\\n    function getUtilizationRate() external view returns (uint256) {\\n        BorrowInfo memory info = _accrueInterestVirtual();\\n        return\\n            interestRateModel.utilizationRate(\\n                cash(),\\n                info.borrows,\\n                info.insurance + info.reserves + _interest(info)\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"./PoolBase.sol\\\";\\n\\nabstract contract PoolRewards is PoolBase {\\n    using SafeCastUpgradeable for uint256;\\n    using SafeCastUpgradeable for int256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice Amount of CPOOL rewards per block for liquidity providers in this pool\\n    uint256 public rewardPerBlock;\\n\\n    /// @notice Value by which all rewards are magnified for calculation\\n    uint256 internal constant REWARD_MAGNITUDE = 2**128;\\n\\n    /// @notice Block when last staking reward distribution occured\\n    uint256 internal _lastRewardDistribution;\\n\\n    /// @notice Reward per LP token, magnified by 2**128 for increased precision\\n    uint256 internal _magnifiedRewardPerShare;\\n\\n    /// @notice Reward corrections of accounts (to remain previous rewards unchanged when user's balance changes)\\n    mapping(address => int256) internal _magnifiedRewardCorrections;\\n\\n    /// @notice Reward withdrawals of accounts\\n    mapping(address => uint256) internal _withdrawals;\\n\\n    // EVENTS\\n\\n    /// @notice Event emitted when account withdraws his reward\\n    event RewardWithdrawn(address indexed account, uint256 amount);\\n\\n    /// @notice Event emitted when new reward per block is set\\n    event RewardPerBlockSet(uint256 newRewardPerBlock);\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @notice Function is called through Factory to withdraw reward for some user\\n     * @param account Account to withdraw reward for\\n     * @return Withdrawn amount\\n     */\\n    function withdrawReward(address account)\\n        external\\n        onlyFactory\\n        returns (uint256)\\n    {\\n        _accrueInterest();\\n        _distributeReward();\\n\\n        uint256 withdrawable = withdrawableRewardOf(account);\\n        if (withdrawable > 0) {\\n            _withdrawals[account] += withdrawable;\\n            emit RewardWithdrawn(account, withdrawable);\\n        }\\n\\n        return withdrawable;\\n    }\\n\\n    /**\\n     * @notice Function is called by Factory to set new reward speed per block\\n     * @param rewardPerBlock_ New reward per block\\n     */\\n    function setRewardPerBlock(uint256 rewardPerBlock_) external onlyFactory {\\n        _accrueInterest();\\n        _distributeReward();\\n        if (_lastRewardDistribution == 0) {\\n            _lastRewardDistribution = _info.lastAccrual;\\n        }\\n        rewardPerBlock = rewardPerBlock_;\\n\\n        emit RewardPerBlockSet(rewardPerBlock_);\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    /**\\n     * @notice Gets total accumulated reward of some account\\n     * @return Total accumulated reward of account\\n     */\\n    function accumulativeRewardOf(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        BorrowInfo memory info = _accrueInterestVirtual();\\n        uint256 currentRewardPerShare = _magnifiedRewardPerShare;\\n        if (\\n            _lastRewardDistribution != 0 &&\\n            info.lastAccrual > _lastRewardDistribution &&\\n            totalSupply() > 0\\n        ) {\\n            uint256 period = info.lastAccrual - _lastRewardDistribution;\\n            currentRewardPerShare +=\\n                (REWARD_MAGNITUDE * period * rewardPerBlock) /\\n                totalSupply();\\n        }\\n\\n        return\\n            ((balanceOf(account) * currentRewardPerShare).toInt256() +\\n                _magnifiedRewardCorrections[account]).toUint256() /\\n            REWARD_MAGNITUDE;\\n    }\\n\\n    /**\\n     * @notice Gets withdrawn part of reward of some account\\n     * @return Withdrawn reward of account\\n     */\\n    function withdrawnRewardOf(address account) public view returns (uint256) {\\n        return _withdrawals[account];\\n    }\\n\\n    /**\\n     * @notice Gets currently withdrawable reward of some account\\n     * @return Withdrawable reward of account\\n     */\\n    function withdrawableRewardOf(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return accumulativeRewardOf(account) - withdrawnRewardOf(account);\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /**\\n     * @notice Internal function for rewards distribution\\n     */\\n    function _distributeReward() internal {\\n        if (\\n            rewardPerBlock > 0 &&\\n            _lastRewardDistribution != 0 &&\\n            _info.lastAccrual > _lastRewardDistribution &&\\n            totalSupply() > 0\\n        ) {\\n            uint256 period = _info.lastAccrual - _lastRewardDistribution;\\n            _magnifiedRewardPerShare +=\\n                (REWARD_MAGNITUDE * period * rewardPerBlock) /\\n                totalSupply();\\n        }\\n        _lastRewardDistribution = _info.lastAccrual;\\n    }\\n\\n    /**\\n     * @notice Override of mint function with rewards corrections\\n     * @param account Account to mint for\\n     * @param amount Amount to mint\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        _distributeReward();\\n\\n        super._mint(account, amount);\\n        _magnifiedRewardCorrections[account] -= (_magnifiedRewardPerShare *\\n            amount).toInt256();\\n    }\\n\\n    /**\\n     * @notice Override of burn function with rewards corrections\\n     * @param account Account to burn from\\n     * @param amount Amount to burn\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        _distributeReward();\\n\\n        super._burn(account, amount);\\n        _magnifiedRewardCorrections[account] += (_magnifiedRewardPerShare *\\n            amount).toInt256();\\n    }\\n\\n    /**\\n     * @notice Override of transfer function with rewards corrections\\n     * @param from Account to transfer from\\n     * @param to Account to transfer to\\n     * @param amount Amount to transfer\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        _accrueInterest();\\n        _distributeReward();\\n\\n        super._transfer(from, to, amount);\\n        _magnifiedRewardCorrections[from] += (_magnifiedRewardPerShare * amount)\\n            .toInt256();\\n        _magnifiedRewardCorrections[to] -= (_magnifiedRewardPerShare * amount)\\n            .toInt256();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./PoolBase.sol\\\";\\n\\nabstract contract PoolConfiguration is PoolBase {\\n    /**\\n     * @notice Function is used to update pool's manager (only called through factory)\\n     * @param manager_ New manager of the pool\\n     */\\n    function setManager(address manager_) external onlyFactory {\\n        require(manager_ != address(0), \\\"AIZ\\\");\\n        manager = manager_;\\n    }\\n\\n    /**\\n     * @notice Function is used to update pool's interest rate model (only called by governor)\\n     * @param interestRateModel_ New IRM of the pool\\n     */\\n    function setInterestRateModel(IInterestRateModel interestRateModel_)\\n        external\\n        onlyGovernor\\n    {\\n        require(address(interestRateModel_) != address(0), \\\"AIZ\\\");\\n\\n        _accrueInterest();\\n        interestRateModel = interestRateModel_;\\n    }\\n\\n    /**\\n     * @notice Function is used to update pool's reserve factor (only called by governor)\\n     * @param reserveFactor_ New reserve factor of the pool\\n     */\\n    function setReserveFactor(uint256 reserveFactor_) external onlyGovernor {\\n        require(reserveFactor + insuranceFactor <= Decimal.ONE, \\\"GTO\\\");\\n        reserveFactor = reserveFactor_;\\n    }\\n\\n    /**\\n     * @notice Function is used to update pool's insurance factor (only called by governor)\\n     * @param insuranceFactor_ New insurance factor of the pool\\n     */\\n    function setInsuranceFactor(uint256 insuranceFactor_)\\n        external\\n        onlyGovernor\\n    {\\n        require(reserveFactor + insuranceFactor <= Decimal.ONE, \\\"GTO\\\");\\n        insuranceFactor = insuranceFactor_;\\n    }\\n\\n    /**\\n     * @notice Function is used to update pool's warning utilization (only called by governor)\\n     * @param warningUtilization_ New warning utilization of the pool\\n     */\\n    function setWarningUtilization(uint256 warningUtilization_)\\n        external\\n        onlyGovernor\\n    {\\n        require(warningUtilization <= Decimal.ONE, \\\"GTO\\\");\\n\\n        _accrueInterest();\\n        warningUtilization = warningUtilization_;\\n        _checkUtilization();\\n    }\\n\\n    /**\\n     * @notice Function is used to update pool's provisional default utilization (only called by governor)\\n     * @param provisionalDefaultUtilization_ New provisional default utilization of the pool\\n     */\\n    function setProvisionalDefaultUtilization(\\n        uint256 provisionalDefaultUtilization_\\n    ) external onlyGovernor {\\n        require(provisionalDefaultUtilization_ <= Decimal.ONE, \\\"GTO\\\");\\n\\n        _accrueInterest();\\n        provisionalDefaultUtilization = provisionalDefaultUtilization_;\\n        _checkUtilization();\\n    }\\n\\n    /**\\n     * @notice Function is used to update pool's warning grace period (only called by governor)\\n     * @param warningGracePeriod_ New warning grace period of the pool\\n     */\\n    function setWarningGracePeriod(uint256 warningGracePeriod_)\\n        external\\n        onlyGovernor\\n    {\\n        _accrueInterest();\\n        warningGracePeriod = warningGracePeriod_;\\n        _checkUtilization();\\n    }\\n\\n    /**\\n     * @notice Function is used to update pool's max inactive period (only called by governor)\\n     * @param maxInactivePeriod_ New max inactive period of the pool\\n     */\\n    function setMaxInactivePeriod(uint256 maxInactivePeriod_)\\n        external\\n        onlyGovernor\\n    {\\n        _accrueInterest();\\n        maxInactivePeriod = maxInactivePeriod_;\\n    }\\n\\n    /**\\n     * @notice Function is used to update pool's period to start auction (only called by governor)\\n     * @param periodToStartAuction_ New period to start auction of the pool\\n     */\\n    function setPeriodToStartAuction(uint256 periodToStartAuction_)\\n        external\\n        onlyGovernor\\n    {\\n        periodToStartAuction = periodToStartAuction_;\\n    }\\n\\n    /**\\n     * @notice Function is used to update pool's symbol (only called by governor)\\n     * @param symbol_ New symbol of the pool\\n     */\\n    function setSymbol(string memory symbol_) external onlyGovernor {\\n        _symbol = symbol_;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"./PoolBaseInfo.sol\\\";\\nimport \\\"../libraries/Decimal.sol\\\";\\nimport \\\"../interfaces/IAuction.sol\\\";\\n\\nabstract contract PoolBase is PoolBaseInfo {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using Decimal for uint256;\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @notice Function is used to provide liquidity for Pool in exchange for cpTokens\\n     * @dev Approval for desired amount of currency token should be given in prior\\n     * @param currencyAmount Amount of currency token that user want to provide\\n     */\\n    function provide(uint256 currencyAmount) external {\\n        _provide(currencyAmount);\\n    }\\n\\n    /**\\n     * @notice Function is used to provide liquidity for Pool in exchange for cpTokens, using EIP2612 off-chain signed permit\\n     * @param currencyAmount Amount of currency token that user want to provide\\n     * @param deadline Deadline for EIP2612 approval\\n     * @param v V component of permit signature\\n     * @param r R component of permit signature\\n     * @param s S component of permit signature\\n     */\\n    function provideWithPermit(\\n        uint256 currencyAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        IERC20PermitUpgradeable(address(currency)).permit(\\n            msg.sender,\\n            address(this),\\n            currencyAmount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        _provide(currencyAmount);\\n    }\\n\\n    /**\\n     * @notice Function is used to redeem previously provided liquidity with interest, burning cpTokens\\n     * @param tokens Amount of cpTokens to burn (MaxUint256 to burn maximal possible)\\n     */\\n    function redeem(uint256 tokens) external {\\n        _accrueInterest();\\n\\n        uint256 exchangeRate = _storedExchangeRate();\\n        uint256 currencyAmount;\\n        if (tokens == type(uint256).max) {\\n            (tokens, currencyAmount) = _maxWithdrawable(exchangeRate);\\n        } else {\\n            currencyAmount = tokens.mulDecimal(exchangeRate);\\n        }\\n        _redeem(tokens, currencyAmount);\\n    }\\n\\n    /**\\n     * @notice Function is used to redeem previously provided liquidity with interest, burning cpTokens\\n     * @param currencyAmount Amount of currency to redeem (MaxUint256 to redeem maximal possible)\\n     */\\n    function redeemCurrency(uint256 currencyAmount) external {\\n        _accrueInterest();\\n\\n        uint256 exchangeRate = _storedExchangeRate();\\n        uint256 tokens;\\n        if (currencyAmount == type(uint256).max) {\\n            (tokens, currencyAmount) = _maxWithdrawable(exchangeRate);\\n        } else {\\n            tokens = currencyAmount.divDecimal(exchangeRate);\\n        }\\n        _redeem(tokens, currencyAmount);\\n    }\\n\\n    /**\\n     * @notice Function is used to borrow from the pool\\n     * @param amount Amount of currency to borrow (MaxUint256 to borrow everything available)\\n     * @param receiver Address where to transfer currency\\n     */\\n    function borrow(uint256 amount, address receiver)\\n        external\\n        onlyManager\\n        onlyActiveAccrual\\n    {\\n        if (amount == type(uint256).max) {\\n            amount = _availableToBorrow(_info);\\n        } else {\\n            require(amount <= _availableToBorrow(_info), \\\"NEL\\\");\\n        }\\n        require(amount > 0, \\\"CBZ\\\");\\n\\n        _info.principal += amount;\\n        _info.borrows += amount;\\n        currency.safeTransfer(receiver, amount);\\n\\n        _checkUtilization();\\n\\n        emit Borrowed(amount, receiver);\\n    }\\n\\n    /**\\n     * @notice Function is used to repay borrowed funds\\n     * @param amount Amount to repay (MaxUint256 to repay all debt)\\n     * @param closeNow True to close pool immedeately\\n     */\\n    function repay(uint256 amount, bool closeNow)\\n        external\\n        onlyManager\\n        onlyActiveAccrual\\n    {\\n        if (amount == type(uint256).max) {\\n            amount = _info.borrows;\\n        } else {\\n            require(amount <= _info.borrows, \\\"MTB\\\");\\n        }\\n\\n        currency.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        if (amount > _info.borrows - _info.principal) {\\n            _info.principal -= amount - (_info.borrows - _info.principal);\\n        }\\n        _info.borrows -= amount;\\n\\n        _checkUtilization();\\n\\n        emit Repaid(amount);\\n\\n        if (closeNow) {\\n            require(_info.borrows == 0, \\\"BNZ\\\");\\n            _close();\\n        }\\n    }\\n\\n    /**\\n     * @notice Function is used to close pool\\n     */\\n    function close() external {\\n        _accrueInterest();\\n\\n        address governor = factory.owner();\\n        address debtOwner = ownerOfDebt();\\n\\n        bool managerClosing = _info.borrows == 0 && msg.sender == manager;\\n        bool inactiveOverMax = _info.enteredZeroUtilization != 0 &&\\n            block.timestamp > _info.enteredZeroUtilization + maxInactivePeriod;\\n        bool governorClosing = msg.sender == governor &&\\n            (inactiveOverMax || debtOwner != address(0));\\n        bool ownerOfDebtClosing = msg.sender == debtOwner;\\n\\n        require(managerClosing || governorClosing || ownerOfDebtClosing, \\\"SCC\\\");\\n        _close();\\n    }\\n\\n    /**\\n     * @notice Function is used to distribute insurance and close pool after period to start auction passed\\n     */\\n    function allowWithdrawalAfterNoAuction() external {\\n        _accrueInterest();\\n\\n        bool isDefaulting = _state(_info) == State.Default;\\n        bool auctionNotStarted = IAuction(factory.auction()).state(\\n            address(this)\\n        ) == IAuction.State.NotStarted;\\n        bool periodToStartPassed = block.timestamp >=\\n            _info.lastAccrual + periodToStartAuction;\\n        require(\\n            isDefaulting && auctionNotStarted && periodToStartPassed,\\n            \\\"CDC\\\"\\n        );\\n        _info.insurance = 0;\\n        debtClaimed = true;\\n        _close();\\n    }\\n\\n    /**\\n     * @notice Function is called by governor to transfer reserves to the treasury\\n     */\\n    function transferReserves() external onlyGovernor {\\n        _accrueInterest();\\n        _transferReserves();\\n    }\\n\\n    /**\\n     * @notice Function is called by governor to force pool default (in case of default in other chain)\\n     */\\n    function forceDefault() external onlyGovernor onlyActiveAccrual {\\n        _info.state = State.Default;\\n    }\\n\\n    /**\\n     * @notice Function is called by Auction contract when auction is started\\n     */\\n    function processAuctionStart() external onlyAuction {\\n        _accrueInterest();\\n        _transferReserves();\\n        factory.burnStake();\\n    }\\n\\n    /**\\n     * @notice Function is called by Auction contract to process pool debt claim\\n     */\\n    function processDebtClaim() external onlyAuction {\\n        _accrueInterest();\\n        _info.state = State.Default;\\n\\n        address debtOwner = ownerOfDebt();\\n        if (_info.insurance > 0) {\\n            currency.safeTransfer(debtOwner, _info.insurance);\\n            _info.insurance = 0;\\n        }\\n        debtClaimed = true;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /**\\n     * @notice Internal function that processes providing liquidity for Pool in exchange for cpTokens\\n     * @param currencyAmount Amount of currency token that user want to provide\\n     */\\n    function _provide(uint256 currencyAmount) internal onlyActiveAccrual {\\n        uint256 exchangeRate = _storedExchangeRate();\\n        currency.safeTransferFrom(msg.sender, address(this), currencyAmount);\\n        uint256 tokens = currencyAmount.divDecimal(exchangeRate);\\n        _mint(msg.sender, tokens);\\n        _checkUtilization();\\n\\n        emit Provided(msg.sender, currencyAmount, tokens);\\n    }\\n\\n    /**\\n     * @notice Internal function that processes token redemption\\n     * @param tokensAmount Amount of tokens being redeemed\\n     * @param currencyAmount Equivalent amount of currency\\n     */\\n    function _redeem(uint256 tokensAmount, uint256 currencyAmount) internal {\\n        if (debtClaimed) {\\n            require(currencyAmount <= cash(), \\\"NEC\\\");\\n        } else {\\n            require(\\n                currencyAmount <= _availableToProviders(_info) &&\\n                    currencyAmount <= _availableProvisionalDefault(_info),\\n                \\\"NEC\\\"\\n            );\\n        }\\n\\n        _burn(msg.sender, tokensAmount);\\n        currency.safeTransfer(msg.sender, currencyAmount);\\n        if (!debtClaimed) {\\n            _checkUtilization();\\n        }\\n\\n        emit Redeemed(msg.sender, currencyAmount, tokensAmount);\\n    }\\n\\n    /**\\n     * @notice Internal function to transfer reserves to the treasury\\n     */\\n    function _transferReserves() internal {\\n        currency.safeTransfer(factory.treasury(), _info.reserves);\\n        _info.reserves = 0;\\n    }\\n\\n    /**\\n     * @notice Internal function for closing pool\\n     */\\n    function _close() internal {\\n        require(_info.state != State.Closed, \\\"PIC\\\");\\n\\n        _info.state = State.Closed;\\n        _transferReserves();\\n        if (_info.insurance > 0) {\\n            currency.safeTransfer(manager, _info.insurance);\\n            _info.insurance = 0;\\n        }\\n        factory.closePool();\\n        emit Closed();\\n    }\\n\\n    /**\\n     * @notice Internal function to accrue interest\\n     */\\n    function _accrueInterest() internal {\\n        _info = _accrueInterestVirtual();\\n    }\\n\\n    /**\\n     * @notice Internal function that is called at each action to check for zero/warning/default utilization\\n     */\\n    function _checkUtilization() internal {\\n        if (_info.borrows == 0) {\\n            _info.enteredProvisionalDefault = 0;\\n            if (_info.enteredZeroUtilization == 0) {\\n                _info.enteredZeroUtilization = block.timestamp;\\n            }\\n            return;\\n        }\\n\\n        _info.enteredZeroUtilization = 0;\\n\\n        if (_info.borrows >= _poolSize(_info).mulDecimal(warningUtilization)) {\\n            if (\\n                _info.enteredProvisionalDefault == 0 &&\\n                _info.borrows >=\\n                _poolSize(_info).mulDecimal(provisionalDefaultUtilization)\\n            ) {\\n                _info.enteredProvisionalDefault = block.timestamp;\\n            }\\n        } else {\\n            _info.enteredProvisionalDefault = 0;\\n        }\\n    }\\n\\n    // PUBLIC VIEW\\n\\n    /**\\n     * @notice Function to get owner of the pool's debt\\n     * @return Pool's debt owner\\n     */\\n    function ownerOfDebt() public view returns (address) {\\n        return IAuction(factory.auction()).ownerOfDebt(address(this));\\n    }\\n\\n    /**\\n     * @notice Function returns cash amount (balance of currency in the pool)\\n     * @return Cash amount\\n     */\\n    function cash() public view returns (uint256) {\\n        return currency.balanceOf(address(this));\\n    }\\n\\n    // INTERNAL VIEW\\n\\n    /**\\n     * @notice Function to get current pool state\\n     * @return Pool state as State enumerable\\n     */\\n    function _state(BorrowInfo memory info) internal view returns (State) {\\n        if (info.state == State.Closed || info.state == State.Default) {\\n            return info.state;\\n        }\\n        if (info.enteredProvisionalDefault != 0) {\\n            if (\\n                block.timestamp >=\\n                info.enteredProvisionalDefault + warningGracePeriod\\n            ) {\\n                return State.Default;\\n            } else {\\n                return State.ProvisionalDefault;\\n            }\\n        }\\n        if (\\n            info.borrows > 0 &&\\n            info.borrows >= _poolSize(info).mulDecimal(warningUtilization)\\n        ) {\\n            return State.Warning;\\n        }\\n        return info.state;\\n    }\\n\\n    /**\\n     * @notice Function returns interest value for given borrow info\\n     * @param info Borrow info struct\\n     * @return Interest for given info\\n     */\\n    function _interest(BorrowInfo memory info) internal pure returns (uint256) {\\n        return info.borrows - info.principal;\\n    }\\n\\n    /**\\n     * @notice Function returns amount of funds generally available for providers value for given borrow info\\n     * @param info Borrow info struct\\n     * @return Available to providers for given info\\n     */\\n    function _availableToProviders(BorrowInfo memory info)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return cash() - info.reserves - info.insurance;\\n    }\\n\\n    /**\\n     * @notice Function returns available to borrow value for given borrow info\\n     * @param info Borrow info struct\\n     * @return Available to borrow for given info\\n     */\\n    function _availableToBorrow(BorrowInfo memory info)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 basicAvailable = _availableToProviders(info) - _interest(info);\\n        uint256 borrowsForWarning = _poolSize(info).mulDecimal(\\n            warningUtilization\\n        );\\n        if (borrowsForWarning > info.borrows) {\\n            return\\n                MathUpgradeable.min(\\n                    borrowsForWarning - info.borrows,\\n                    basicAvailable\\n                );\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Function returns pool size for given borrow info\\n     * @param info Borrow info struct\\n     * @return Pool size for given info\\n     */\\n    function _poolSize(BorrowInfo memory info) internal view returns (uint256) {\\n        return _availableToProviders(info) + info.principal;\\n    }\\n\\n    /**\\n     * @notice Function returns funds available to be taken from pool before provisional default will be reached\\n     * @param info Borrow info struct\\n     * @return Pool size for given info\\n     */\\n    function _availableProvisionalDefault(BorrowInfo memory info)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (provisionalDefaultUtilization == 0) {\\n            return 0;\\n        }\\n        uint256 poolSizeForProvisionalDefault = info.borrows.divDecimal(\\n            provisionalDefaultUtilization\\n        );\\n        uint256 currentPoolSize = _poolSize(info);\\n        return\\n            currentPoolSize > poolSizeForProvisionalDefault\\n                ? currentPoolSize - poolSizeForProvisionalDefault\\n                : 0;\\n    }\\n\\n    /**\\n     * @notice Function returns maximal redeemable amount for given exchange rate\\n     * @param exchangeRate Exchange rate of cp-tokens to currency\\n     * @return tokensAmount Maximal redeemable amount of tokens\\n     * @return currencyAmount Maximal redeemable amount of currency\\n     */\\n    function _maxWithdrawable(uint256 exchangeRate)\\n        internal\\n        view\\n        returns (uint256 tokensAmount, uint256 currencyAmount)\\n    {\\n        currencyAmount = _availableToProviders(_info);\\n        if (!debtClaimed) {\\n            uint256 availableProvisionalDefault = _availableProvisionalDefault(\\n                _info\\n            );\\n            if (availableProvisionalDefault < currencyAmount) {\\n                currencyAmount = availableProvisionalDefault;\\n            }\\n        }\\n        tokensAmount = currencyAmount.divDecimal(exchangeRate);\\n\\n        if (balanceOf(msg.sender) < tokensAmount) {\\n            tokensAmount = balanceOf(msg.sender);\\n            currencyAmount = tokensAmount.mulDecimal(exchangeRate);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function returns stored (without accruing) exchange rate of cpTokens for currency tokens\\n     * @return Stored exchange rate as 10-digits decimal\\n     */\\n    function _storedExchangeRate() internal view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return Decimal.ONE;\\n        } else if (debtClaimed) {\\n            return cash().divDecimal(totalSupply());\\n        } else {\\n            return\\n                (_availableToProviders(_info) + _info.borrows).divDecimal(\\n                    totalSupply()\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Function returns timestamp when pool entered or will enter provisional default at given interest rate\\n     * @param interestRate Borrows interest rate at current period\\n     * @return Timestamp of entering provisional default (0 if won't ever enter)\\n     */\\n    function _entranceOfProvisionalDefault(uint256 interestRate)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_info.enteredProvisionalDefault != 0) {\\n            return _info.enteredProvisionalDefault;\\n        }\\n        if (_info.borrows == 0 || interestRate == 0) {\\n            return 0;\\n        }\\n\\n        // Consider:\\n        // IFPD - Interest for provisional default\\n        // PSPD = Pool size at provisional default\\n        // IRPD = Reserves & insurance at provisional default\\n        // IR = Current reserves and insurance\\n        // PDU = Provisional default utilization\\n        // We have: Borrows + IFPD = PDU * PSPD\\n        // => Borrows + IFPD = PDU * (Principal + Cash + IRPD)\\n        // => Borrows + IFPD = PDU * (Principal + Cash + IR + IFPD * (insuranceFactor + reserveFactor))\\n        // => IFPD * (1 + PDU * (reserveFactor + insuranceFactor)) = PDU * PoolSize - Borrows\\n        // => IFPD = (PDU * PoolSize - Borrows) / (1 + PDU * (reserveFactor + insuranceFactor))\\n        uint256 numerator = _poolSize(_info).mulDecimal(\\n            provisionalDefaultUtilization\\n        ) - _info.borrows;\\n        uint256 denominator = Decimal.ONE +\\n            provisionalDefaultUtilization.mulDecimal(\\n                reserveFactor + insuranceFactor\\n            );\\n        uint256 interestForProvisionalDefault = numerator.divDecimal(\\n            denominator\\n        );\\n\\n        uint256 interestPerSec = _info.borrows * interestRate;\\n        // Time delta is calculated as interest for provisional default divided by interest per sec (rounded up)\\n        uint256 timeDelta = (interestForProvisionalDefault *\\n            Decimal.ONE +\\n            interestPerSec -\\n            1) / interestPerSec;\\n        uint256 entrance = _info.lastAccrual + timeDelta;\\n        return entrance <= block.timestamp ? entrance : 0;\\n    }\\n\\n    /**\\n     * @notice Function virtually accrues interest and returns updated borrow info struct\\n     * @return Borrow info struct after accrual\\n     */\\n    function _accrueInterestVirtual()\\n        internal\\n        view\\n        returns (BorrowInfo memory)\\n    {\\n        BorrowInfo memory newInfo = _info;\\n\\n        if (\\n            block.timestamp == newInfo.lastAccrual ||\\n            newInfo.state == State.Default ||\\n            newInfo.state == State.Closed\\n        ) {\\n            return newInfo;\\n        }\\n\\n        uint256 interestRate = interestRateModel.getBorrowRate(\\n            cash(),\\n            newInfo.borrows,\\n            newInfo.reserves + newInfo.insurance + _interest(newInfo)\\n        );\\n\\n        newInfo.lastAccrual = block.timestamp;\\n        newInfo.enteredProvisionalDefault = _entranceOfProvisionalDefault(\\n            interestRate\\n        );\\n        if (\\n            newInfo.enteredProvisionalDefault != 0 &&\\n            newInfo.enteredProvisionalDefault + warningGracePeriod <\\n            newInfo.lastAccrual\\n        ) {\\n            newInfo.lastAccrual =\\n                newInfo.enteredProvisionalDefault +\\n                warningGracePeriod;\\n        }\\n\\n        uint256 interestDelta = newInfo.borrows.mulDecimal(\\n            interestRate * (newInfo.lastAccrual - _info.lastAccrual)\\n        );\\n        uint256 reservesDelta = interestDelta.mulDecimal(reserveFactor);\\n        uint256 insuranceDelta = interestDelta.mulDecimal(insuranceFactor);\\n\\n        if (\\n            newInfo.borrows + interestDelta + reservesDelta + insuranceDelta >\\n            _poolSize(newInfo)\\n        ) {\\n            interestDelta = (_poolSize(newInfo) - newInfo.borrows).divDecimal(\\n                Decimal.ONE + reserveFactor + insuranceFactor\\n            );\\n            uint256 interestPerSec = newInfo.borrows.mulDecimal(interestRate);\\n            if (interestPerSec > 0) {\\n                // Previous last accrual plus interest divided by interest speed (rounded up)\\n                newInfo.lastAccrual =\\n                    _info.lastAccrual +\\n                    (interestDelta + interestPerSec - 1) /\\n                    interestPerSec;\\n            }\\n\\n            reservesDelta = interestDelta.mulDecimal(reserveFactor);\\n            insuranceDelta = interestDelta.mulDecimal(insuranceFactor);\\n            newInfo.state = State.Default;\\n        }\\n\\n        newInfo.borrows += interestDelta;\\n        newInfo.reserves += reservesDelta;\\n        newInfo.insurance += insuranceDelta;\\n\\n        return newInfo;\\n    }\\n\\n    // MODIFIERS\\n\\n    /**\\n     * @notice Modifier to accrue interest and check that pool is currently active (possibly in warning)\\n     */\\n    modifier onlyActiveAccrual() {\\n        _accrueInterest();\\n        State currentState = _state(_info);\\n        require(\\n            currentState == State.Active ||\\n                currentState == State.Warning ||\\n                currentState == State.ProvisionalDefault,\\n            \\\"PIA\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier for functions restricted to manager\\n     */\\n    modifier onlyManager() {\\n        require(msg.sender == manager, \\\"OM\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier for functions restricted to protocol governor\\n     */\\n    modifier onlyGovernor() {\\n        require(msg.sender == factory.owner(), \\\"OG\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier for functions restricted to auction contract\\n     */\\n    modifier onlyAuction() {\\n        require(msg.sender == factory.auction(), \\\"OA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier for the functions restricted to factory\\n     */\\n    modifier onlyFactory() {\\n        require(msg.sender == address(factory), \\\"OF\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Decimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Decimal {\\n    /// @notice Number one as 18-digit decimal\\n    uint256 internal constant ONE = 1e18;\\n\\n    /**\\n     * @notice Internal function for 10-digits decimal division\\n     * @param number Integer number\\n     * @param decimal Decimal number\\n     * @return Returns multiplied numbers\\n     */\\n    function mulDecimal(uint256 number, uint256 decimal)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (number * decimal) / ONE;\\n    }\\n\\n    /**\\n     * @notice Internal function for 10-digits decimal multiplication\\n     * @param number Integer number\\n     * @param decimal Decimal number\\n     * @return Returns integer number divided by second\\n     */\\n    function divDecimal(uint256 number, uint256 decimal)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (number * ONE) / decimal;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolBaseInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../interfaces/IInterestRateModel.sol\\\";\\n\\nabstract contract PoolBaseInfo is ERC20Upgradeable {\\n    /// @notice Address of the pool's manager\\n    address public manager;\\n\\n    /// @notice Pool currency token\\n    IERC20Upgradeable public currency;\\n\\n    /// @notice PoolFactory contract\\n    IPoolFactory public factory;\\n\\n    /// @notice InterestRateModel contract address\\n    IInterestRateModel public interestRateModel;\\n\\n    /// @notice Reserve factor as 18-digit decimal\\n    uint256 public reserveFactor;\\n\\n    /// @notice Insurance factor as 18-digit decimal\\n    uint256 public insuranceFactor;\\n\\n    /// @notice Pool utilization that leads to warning state (as 18-digit decimal)\\n    uint256 public warningUtilization;\\n\\n    /// @notice Pool utilization that leads to provisional default (as 18-digit decimal)\\n    uint256 public provisionalDefaultUtilization;\\n\\n    /// @notice Grace period for warning state before pool goes to default (in seconds)\\n    uint256 public warningGracePeriod;\\n\\n    /// @notice Max period for which pool can stay not active before it can be closed by governor (in seconds)\\n    uint256 public maxInactivePeriod;\\n\\n    /// @notice Period after default to start auction after which pool can be closed by anyone (in seconds)\\n    uint256 public periodToStartAuction;\\n\\n    enum State {\\n        Active,\\n        Warning,\\n        ProvisionalDefault,\\n        Default,\\n        Closed\\n    }\\n\\n    /// @notice Indicator if debt has been claimed\\n    bool public debtClaimed;\\n\\n    struct BorrowInfo {\\n        uint256 principal;\\n        uint256 borrows;\\n        uint256 reserves;\\n        uint256 insurance;\\n        uint256 lastAccrual;\\n        uint256 enteredProvisionalDefault;\\n        uint256 enteredZeroUtilization;\\n        State state;\\n    }\\n\\n    /// @notice Last updated borrow info\\n    BorrowInfo internal _info;\\n\\n    string internal _symbol;\\n\\n    // EVENTS\\n\\n    event Closed();\\n\\n    /// @notice Event emitted when liquidity is provided to the Pool\\n    event Provided(\\n        address indexed provider,\\n        uint256 currencyAmount,\\n        uint256 tokens\\n    );\\n\\n    /// @notice Event emitted when liquidity is redeemed from the Pool\\n    event Redeemed(\\n        address indexed redeemer,\\n        uint256 currencyAmount,\\n        uint256 tokens\\n    );\\n\\n    /// @notice Event emitted when manager assignes liquidity\\n    event Borrowed(uint256 amount, address indexed receiver);\\n\\n    /// @notice Event emitted when manager returns liquidity assignment\\n    event Repaid(uint256 amount);\\n\\n    // CONSTRUCTOR\\n\\n    /**\\n     * @notice Upgradeable contract constructor\\n     * @param manager_ Address of the Pool's manager\\n     * @param currency_ Address of the currency token\\n     */\\n    function __PoolBaseInfo_init(address manager_, IERC20Upgradeable currency_)\\n        internal\\n        onlyInitializing\\n    {\\n        require(manager_ != address(0), \\\"AIZ\\\");\\n        require(address(currency_) != address(0), \\\"AIZ\\\");\\n\\n        manager = manager_;\\n        currency = currency_;\\n        factory = IPoolFactory(msg.sender);\\n\\n        interestRateModel = IInterestRateModel(factory.interestRateModel());\\n        reserveFactor = factory.reserveFactor();\\n        insuranceFactor = factory.insuranceFactor();\\n        warningUtilization = factory.warningUtilization();\\n        provisionalDefaultUtilization = factory.provisionalDefaultUtilization();\\n        warningGracePeriod = factory.warningGracePeriod();\\n        maxInactivePeriod = factory.maxInactivePeriod();\\n        periodToStartAuction = factory.periodToStartAuction();\\n\\n        _symbol = factory.getPoolSymbol(address(currency), address(manager));\\n        __ERC20_init(string(bytes.concat(bytes(\\\"Pool \\\"), bytes(_symbol))), \\\"\\\");\\n\\n        _info.enteredZeroUtilization = block.timestamp;\\n        _info.lastAccrual = block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IAuction {\\n    function bid(address pool, uint256 amount) external;\\n\\n    function ownerOfDebt(address pool) external view returns (address);\\n\\n    /// @notice States of auction\\n    /// @dev None: A pool is not default and auction can't be started\\n    /// @dev NotStarted: A pool is default and auction can be started\\n    /// @dev Active: An auction is started\\n    /// @dev Finished: An auction is finished but NFT is not claimed\\n    /// @dev Closed: An auction is finished and NFT is claimed\\n    enum State {\\n        None,\\n        NotStarted,\\n        Active,\\n        Finished,\\n        Closed\\n    }\\n\\n    function state(address pool) external view returns (State);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IPoolFactory {\\n    function getPoolSymbol(address currency, address manager)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function isPool(address pool) external view returns (bool);\\n\\n    function interestRateModel() external view returns (address);\\n\\n    function auction() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function reserveFactor() external view returns (uint256);\\n\\n    function insuranceFactor() external view returns (uint256);\\n\\n    function warningUtilization() external view returns (uint256);\\n\\n    function provisionalDefaultUtilization() external view returns (uint256);\\n\\n    function warningGracePeriod() external view returns (uint256);\\n\\n    function maxInactivePeriod() external view returns (uint256);\\n\\n    function periodToStartAuction() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function closePool() external;\\n\\n    function burnStake() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IInterestRateModel {\\n    function getBorrowRate(\\n        uint256 balance,\\n        uint256 totalBorrows,\\n        uint256 totalReserves\\n    ) external view returns (uint256);\\n\\n    function utilizationRate(\\n        uint256 balance,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external pure returns (uint256);\\n\\n    function getSupplyRate(\\n        uint256 balance,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactor\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Provided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"RewardPerBlockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accumulativeRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowWithdrawalAfterNoAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enteredProvisionalDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enteredZeroUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUtilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"currency_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccrual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInactivePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerOfDebt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodToStartAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processAuctionStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processDebtClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"provide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"provideWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provisionalDefaultUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"redeemCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closeNow\",\"type\":\"bool\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceFactor_\",\"type\":\"uint256\"}],\"name\":\"setInsuranceFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"}],\"name\":\"setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxInactivePeriod_\",\"type\":\"uint256\"}],\"name\":\"setMaxInactivePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodToStartAuction_\",\"type\":\"uint256\"}],\"name\":\"setPeriodToStartAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provisionalDefaultUtilization_\",\"type\":\"uint256\"}],\"name\":\"setProvisionalDefaultUtilization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveFactor_\",\"type\":\"uint256\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock_\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"warningGracePeriod_\",\"type\":\"uint256\"}],\"name\":\"setWarningGracePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"warningUtilization_\",\"type\":\"uint256\"}],\"name\":\"setWarningUtilization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum PoolBaseInfo.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warningGracePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warningUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawnRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PoolMaster", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}