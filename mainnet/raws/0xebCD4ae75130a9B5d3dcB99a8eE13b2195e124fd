{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/United.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT License\\npragma solidity 0.8.12;\\n\\n/*\\n    Tribute to the phunks :\\n    This contract is based on the NotLarvaLabs Marketplace project :\\n    https://notlarvalabs.com/\\n\\n    We generalized this contract to be able to add any ERC721 contract to the marketplace.\\n\\n    Have fun ;)\\n    0xdev\\n*/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract UnitedMarket is ReentrancyGuard, Pausable, Ownable {\\n    mapping(address => bool) addressToSupportedContracts;\\n    mapping(uint256 => Collection) idToCollection;\\n    uint256 nbCollections;\\n\\n    struct Collection {\\n        uint256 id;\\n        string name;\\n        bool activated;\\n        string openseaCollectionName;\\n        address contractAddress;\\n        address contractOwner;\\n        uint16 royalties; // 4.50% -> 450 -> OS allows 2 digits after comma\\n        string imageUrl;\\n        string twitterId;\\n    }\\n\\n    struct Offer {\\n        bool isForSale;\\n        uint256 collectionId;\\n        uint256 tokenId;\\n        address seller;\\n        uint256 minValue;\\n        address onlySellTo;\\n    }\\n\\n    struct Bid {\\n        bool hasBid;\\n        uint256 collectionId;\\n        uint256 tokenId;\\n        address bidder;\\n        uint256 value;\\n    }\\n\\n    mapping(string => Offer) public tokenOfferedForSale;\\n    mapping(string => Bid) public tokenBids;\\n    mapping(address => uint256) public pendingWithdrawals;\\n\\n    event TokenOffered(\\n        uint256 indexed collectionId,\\n        uint256 indexed tokenId,\\n        uint256 minValue,\\n        address indexed toAddress\\n    );\\n    event TokenBidEntered(\\n        uint256 indexed collectionId,\\n        uint256 indexed tokenId,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event TokenBidWithdrawn(\\n        uint256 indexed collectionId,\\n        uint256 indexed tokenId,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event TokenBought(\\n        uint256 indexed collectionId,\\n        uint256 indexed tokenId,\\n        uint256 value,\\n        address indexed fromAddress,\\n        address toAddress\\n    );\\n    event TokenNoLongerForSale(\\n        uint256 indexed collectionId,\\n        uint256 indexed tokenId\\n    );\\n\\n    constructor() {\\n        nbCollections = 0;\\n    }\\n\\n    function pause() public whenNotPaused onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public whenPaused onlyOwner {\\n        _unpause();\\n    }\\n\\n    /* Returns the CryptoTokens contract address currently being used */\\n    function getCollections() public view returns (Collection[] memory) {\\n        Collection[] memory arr = new Collection[](nbCollections);\\n        for (uint256 i = 1; i <= nbCollections; i++) {\\n            Collection storage c = idToCollection[i];\\n            arr[i - 1] = c;\\n        }\\n        return arr;\\n    }\\n\\n    function updateColection(\\n        uint256 collectionId,\\n        string memory name,\\n        string memory openseaCollectionName,\\n        address newTokensAddress,\\n        uint16 royalties,\\n        string memory imageUrl,\\n        string memory twitterId\\n    ) public onlyOwner {\\n        address contractOwner = Ownable(newTokensAddress).owner();\\n        idToCollection[collectionId] = Collection(\\n            collectionId,\\n            name,\\n            true,\\n            openseaCollectionName,\\n            newTokensAddress,\\n            contractOwner,\\n            royalties,\\n            imageUrl,\\n            twitterId\\n        );\\n    }\\n\\n    function toggleAtivatedCollection(uint256 collectionId) public onlyOwner {\\n        idToCollection[collectionId].activated = !idToCollection[collectionId]\\n            .activated;\\n    }\\n\\n    function addCollection(\\n        string memory name,\\n        string memory openseaCollectionName,\\n        address newTokensAddress,\\n        uint16 royalties,\\n        string memory imageUrl,\\n        string memory twitterId\\n    ) public onlyOwner {\\n        require(\\n            !addressToSupportedContracts[newTokensAddress],\\n            \\\"Contract is already in the list.\\\"\\n        );\\n        nbCollections++;\\n        address contractOwner = Ownable(newTokensAddress).owner();\\n        idToCollection[nbCollections] = Collection(\\n            nbCollections,\\n            name,\\n            true,\\n            openseaCollectionName,\\n            newTokensAddress,\\n            contractOwner,\\n            royalties,\\n            imageUrl,\\n            twitterId\\n        );\\n        addressToSupportedContracts[newTokensAddress] = true;\\n    }\\n\\n    /* Allows a CryptoToken owner to offer it for sale */\\n    function offerTokenForSale(\\n        uint256 collectionId,\\n        uint256 tokenId,\\n        uint256 minSalePriceInWei\\n    ) public whenNotPaused nonReentrant {\\n        require(\\n            idToCollection[collectionId].activated,\\n            \\\"This collection is not supported.\\\"\\n        );\\n        require(minSalePriceInWei > 0, \\\"Cannot sell with negative price\\\");\\n        require(\\n            tokenId <\\n                IERC721Enumerable(idToCollection[collectionId].contractAddress)\\n                    .totalSupply(),\\n            \\\"token index not valid\\\"\\n        );\\n        require(\\n            IERC721(idToCollection[collectionId].contractAddress).ownerOf(\\n                tokenId\\n            ) == msg.sender,\\n            \\\"you are not the owner of this token\\\"\\n        );\\n        tokenOfferedForSale[\\n            append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))\\n        ] = Offer(\\n            true,\\n            collectionId,\\n            tokenId,\\n            msg.sender,\\n            minSalePriceInWei,\\n            address(0x0)\\n        );\\n        emit TokenOffered(\\n            collectionId,\\n            tokenId,\\n            minSalePriceInWei,\\n            address(0x0)\\n        );\\n    }\\n\\n    function tokenNoLongerForSale(uint256 collectionId, uint256 tokenId)\\n        public\\n        nonReentrant\\n    {\\n        require(\\n            tokenId <=\\n                IERC721Enumerable(idToCollection[collectionId].contractAddress)\\n                    .totalSupply(),\\n            \\\"token index not valid\\\"\\n        );\\n        require(\\n            IERC721(idToCollection[collectionId].contractAddress).ownerOf(\\n                tokenId\\n            ) == msg.sender,\\n            \\\"you are not the owner of this token\\\"\\n        );\\n        tokenOfferedForSale[\\n            append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))\\n        ] = Offer(false, collectionId, tokenId, msg.sender, 0, address(0x0));\\n        emit TokenNoLongerForSale(collectionId, tokenId);\\n    }\\n\\n    /* Allows a CryptoToken owner to offer it for sale to a specific address */\\n    function offerTokenForSaleToAddress(\\n        uint256 collectionId,\\n        uint256 tokenId,\\n        uint256 minSalePriceInWei,\\n        address toAddress\\n    ) public whenNotPaused nonReentrant {\\n        require(\\n            tokenId <=\\n                IERC721Enumerable(idToCollection[collectionId].contractAddress)\\n                    .totalSupply(),\\n            \\\"token index not valid\\\"\\n        );\\n        require(\\n            IERC721(idToCollection[collectionId].contractAddress).ownerOf(\\n                tokenId\\n            ) == msg.sender,\\n            \\\"you are not the owner of this token\\\"\\n        );\\n        tokenOfferedForSale[\\n            append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))\\n        ] = Offer(\\n            true,\\n            collectionId,\\n            tokenId,\\n            msg.sender,\\n            minSalePriceInWei,\\n            toAddress\\n        );\\n        emit TokenOffered(collectionId, tokenId, minSalePriceInWei, toAddress);\\n    }\\n\\n    /* Allows users to buy a CryptoToken offered for sale */\\n    function buyToken(uint256 collectionId, uint256 tokenId)\\n        public\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        require(\\n            tokenId <=\\n                IERC721Enumerable(idToCollection[collectionId].contractAddress)\\n                    .totalSupply(),\\n            \\\"token index not valid\\\"\\n        );\\n        Offer memory offer = tokenOfferedForSale[\\n            append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))\\n        ];\\n        require(offer.isForSale, \\\"token is not for sale\\\"); // token not actually for sale\\n        require(\\n            offer.onlySellTo == address(0x0) || offer.onlySellTo == msg.sender,\\n            \\\"Not for sale for you... sorry\\\"\\n        );\\n\\n        uint256 royaltiesPrice = 0;\\n        if (idToCollection[collectionId].royalties > 0) {\\n            royaltiesPrice =\\n                (offer.minValue * idToCollection[collectionId].royalties) /\\n                10000;\\n        }\\n\\n        require(\\n            msg.value == offer.minValue + royaltiesPrice,\\n            \\\"not enough ether\\\"\\n        ); // Didn't send enough ETH\\n        address seller = offer.seller;\\n        require(seller != msg.sender, \\\"seller == msg.sender\\\");\\n        require(\\n            seller ==\\n                IERC721(idToCollection[collectionId].contractAddress).ownerOf(\\n                    tokenId\\n                ),\\n            \\\"seller no longer owner of token\\\"\\n        ); // Seller no longer owner of token\\n\\n        tokenOfferedForSale[\\n            append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))\\n        ] = Offer(false, collectionId, tokenId, msg.sender, 0, address(0x0));\\n\\n        IERC721(idToCollection[collectionId].contractAddress).safeTransferFrom(\\n            seller,\\n            msg.sender,\\n            tokenId\\n        );\\n        pendingWithdrawals[seller] += offer.minValue;\\n        address owner = Ownable(idToCollection[collectionId].contractAddress)\\n            .owner();\\n        pendingWithdrawals[owner] += royaltiesPrice;\\n        emit TokenBought(collectionId, tokenId, msg.value, seller, msg.sender);\\n\\n        // Check for the case where there is a bid from the new owner and refund it.\\n        // Any other bid can stay in place.\\n        Bid memory bid = tokenBids[\\n            append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))\\n        ];\\n        if (bid.bidder == msg.sender) {\\n            // Kill bid and refund value\\n            pendingWithdrawals[msg.sender] += bid.value;\\n            tokenBids[\\n                append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))\\n            ] = Bid(false, collectionId, tokenId, address(0x0), 0);\\n        }\\n    }\\n\\n    /* Allows users to retrieve ETH from sales */\\n    function withdraw() public nonReentrant {\\n        require(pendingWithdrawals[msg.sender] > 0, \\\"No amount to be withdrawn ...\\\");\\n        uint256 amount = pendingWithdrawals[msg.sender];\\n        // Remember to zero the pending refund before\\n        // sending to prevent re-entrancy attacks\\n        pendingWithdrawals[msg.sender] = 0;\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    /* The owner can send money to another address. This is EMERGENCY only, in case a contract owner is lost, money could not be withdrawn */\\n    function withdrawTo(address from, address to)\\n        public\\n        nonReentrant\\n        onlyOwner\\n    {\\n        require(pendingWithdrawals[from] > 0, \\\"No amount to be withdrawn ...\\\");\\n        uint256 amount = pendingWithdrawals[from];\\n        // Remember to zero the pending refund before\\n        // sending to prevent re-entrancy attacks\\n        pendingWithdrawals[from] = 0;\\n        payable(to).transfer(amount);\\n    }\\n\\n    /* Allows users to enter bids for any CryptoToken */\\n    function enterBidForToken(uint256 collectionId, uint256 tokenId)\\n        public\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        if (\\n            tokenId >=\\n            IERC721Enumerable(idToCollection[collectionId].contractAddress)\\n                .totalSupply()\\n        ) revert(\\\"token index not valid\\\");\\n        if (\\n            IERC721(idToCollection[collectionId].contractAddress).ownerOf(\\n                tokenId\\n            ) == msg.sender\\n        ) revert(\\\"you already own this token\\\");\\n        if (msg.value == 0) revert(\\\"cannot enter bid of zero\\\");\\n        Bid memory existing = tokenBids[\\n            append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))\\n        ];\\n        if (msg.value <= existing.value) revert(\\\"your bid is too low\\\");\\n        if (existing.value > 0) {\\n            // Refund the failing bid\\n            pendingWithdrawals[existing.bidder] += existing.value;\\n        }\\n        tokenBids[append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))] = Bid(\\n            true,\\n            collectionId,\\n            tokenId,\\n            msg.sender,\\n            msg.value\\n        );\\n        emit TokenBidEntered(collectionId, tokenId, msg.value, msg.sender);\\n    }\\n\\n    /* Allows CryptoToken owners to accept bids for their Tokens */\\n    function acceptBidForToken(\\n        uint256 collectionId,\\n        uint256 tokenId,\\n        uint256 minPrice\\n    ) public whenNotPaused nonReentrant {\\n        if (\\n            tokenId >=\\n            IERC721Enumerable(idToCollection[collectionId].contractAddress)\\n                .totalSupply()\\n        ) revert(\\\"token index not valid\\\");\\n        if (\\n            IERC721(idToCollection[collectionId].contractAddress).ownerOf(\\n                tokenId\\n            ) != msg.sender\\n        ) revert(\\\"you do not own this token\\\");\\n        address seller = msg.sender;\\n        Bid memory bid = tokenBids[\\n            append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))\\n        ];\\n        if (bid.value == 0) revert(\\\"cannot enter bid of zero\\\");\\n        if (bid.value < minPrice) revert(\\\"your bid is too low\\\");\\n\\n        address bidder = bid.bidder;\\n        if (seller == bidder) revert(\\\"you already own this token\\\");\\n        tokenOfferedForSale[\\n            append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))\\n        ] = Offer(false, collectionId, tokenId, bidder, 0, address(0x0));\\n        uint256 amount = bid.value;\\n        tokenBids[append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))] = Bid(\\n            false,\\n            collectionId,\\n            tokenId,\\n            address(0x0),\\n            0\\n        );\\n        IERC721(idToCollection[collectionId].contractAddress).safeTransferFrom(\\n            msg.sender,\\n            bidder,\\n            tokenId\\n        );\\n        pendingWithdrawals[seller] += amount;\\n        emit TokenBought(collectionId, tokenId, bid.value, seller, bidder);\\n    }\\n\\n    /* Allows bidders to withdraw their bids */\\n    function withdrawBidForToken(uint256 collectionId, uint256 tokenId)\\n        public\\n        nonReentrant\\n    {\\n        if (\\n            tokenId >=\\n            IERC721Enumerable(idToCollection[collectionId].contractAddress)\\n                .totalSupply()\\n        ) revert(\\\"token index not valid\\\");\\n        Bid memory bid = tokenBids[\\n            append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))\\n        ];\\n        if (bid.bidder != msg.sender)\\n            revert(\\\"the bidder is not message sender\\\");\\n        emit TokenBidWithdrawn(collectionId, tokenId, bid.value, msg.sender);\\n        uint256 amount = bid.value;\\n        tokenBids[append(uint2str(collectionId), \\\"_\\\", uint2str(tokenId))] = Bid(\\n            false,\\n            collectionId,\\n            tokenId,\\n            address(0x0),\\n            0\\n        );\\n        // Refund the bid money\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function append(\\n        string memory a,\\n        string memory b,\\n        string memory c\\n    ) internal pure returns (string memory) {\\n        return string(abi.encodePacked(a, b, c));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"TokenBidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"TokenBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenNoLongerForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"TokenOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptBidForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"openseaCollectionName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newTokensAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royalties\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitterId\",\"type\":\"string\"}],\"name\":\"addCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"enterBidForToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollections\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"openseaCollectionName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royalties\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitterId\",\"type\":\"string\"}],\"internalType\":\"struct UnitedMarket.Collection[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerTokenForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"offerTokenForSaleToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"toggleAtivatedCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenBids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenNoLongerForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenOfferedForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"openseaCollectionName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newTokensAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royalties\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitterId\",\"type\":\"string\"}],\"name\":\"updateColection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawBidForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnitedMarket", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}