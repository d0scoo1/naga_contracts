{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/governance/Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../openzeppelin/SafeERC20.sol\\\";\\r\\nimport \\\"../../openzeppelin/IERC20.sol\\\";\\r\\nimport \\\"../interface/IStrategy.sol\\\";\\r\\nimport \\\"../interface/IStrategySplitter.sol\\\";\\r\\nimport \\\"../interface/ISmartVault.sol\\\";\\r\\nimport \\\"../interface/IFeeRewardForwarder.sol\\\";\\r\\nimport \\\"../interface/IBookkeeper.sol\\\";\\r\\nimport \\\"../interface/IUpgradeSource.sol\\\";\\r\\nimport \\\"../interface/IFundKeeper.sol\\\";\\r\\nimport \\\"../interface/ITetuProxy.sol\\\";\\r\\nimport \\\"../interface/IMintHelper.sol\\\";\\r\\nimport \\\"../interface/IAnnouncer.sol\\\";\\r\\nimport \\\"../interface/strategies/IBalancingStrategy.sol\\\";\\r\\nimport \\\"./ControllerStorage.sol\\\";\\r\\nimport \\\"./ControllableV2.sol\\\";\\r\\n\\r\\n/// @title A central contract for control everything.\\r\\n///        Governance is a Multi-Sig Wallet\\r\\n/// @dev Use with TetuProxy\\r\\n/// @author belbix\\r\\ncontract Controller is Initializable, ControllableV2, ControllerStorage {\\r\\n  using SafeERC20 for IERC20;\\r\\n  using Address for address;\\r\\n\\r\\n  // ************ VARIABLES **********************\\r\\n  /// @notice Version of the contract\\r\\n  /// @dev Should be incremented when contract is changed\\r\\n  string public constant VERSION = \\\"1.4.1\\\";\\r\\n\\r\\n  /// @dev Allowed contracts to deposit in the vaults\\r\\n  mapping(address => bool) public override whiteList;\\r\\n  /// @dev Registered vaults\\r\\n  mapping(address => bool) public override vaults;\\r\\n  /// @dev Registered strategies\\r\\n  mapping(address => bool) public override strategies;\\r\\n  /// @dev Allowed addresses for maintenance work\\r\\n  mapping(address => bool) public hardWorkers;\\r\\n  /// @dev Allowed address for reward distributing\\r\\n  mapping(address => bool) public rewardDistribution;\\r\\n  /// @dev Allowed address for getting 100% rewards without vesting\\r\\n  mapping(address => bool) public pureRewardConsumers;\\r\\n\\r\\n  // ************ EVENTS **********************\\r\\n\\r\\n  /// @notice HardWorker added\\r\\n  event HardWorkerAdded(address value);\\r\\n  /// @notice HardWorker removed\\r\\n  event HardWorkerRemoved(address value);\\r\\n  /// @notice Contract whitelist status changed\\r\\n  event WhiteListStatusChanged(address target, bool status);\\r\\n  /// @notice Vault and Strategy pair registered\\r\\n  event VaultAndStrategyAdded(address vault, address strategy);\\r\\n  /// @notice Tokens moved from Controller contract to Governance\\r\\n  event ControllerTokenMoved(address indexed recipient, address indexed token, uint256 amount);\\r\\n  /// @notice Tokens moved from Strategy contract to Governance\\r\\n  event StrategyTokenMoved(address indexed strategy, address indexed token, uint256 amount);\\r\\n  /// @notice Tokens moved from Fund contract to Controller\\r\\n  event FundKeeperTokenMoved(address indexed fund, address indexed token, uint256 amount);\\r\\n  /// @notice DoHardWork completed and PricePerFullShare changed\\r\\n  event SharePriceChangeLog(\\r\\n    address indexed vault,\\r\\n    address indexed strategy,\\r\\n    uint256 oldSharePrice,\\r\\n    uint256 newSharePrice,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n  event VaultStrategyChanged(address vault, address oldStrategy, address newStrategy);\\r\\n  event ProxyUpgraded(address target, address oldLogic, address newLogic);\\r\\n  event Minted(\\r\\n    address mintHelper,\\r\\n    uint totalAmount,\\r\\n    address distributor,\\r\\n    address otherNetworkFund,\\r\\n    bool mintAllAvailable\\r\\n  );\\r\\n  event DistributorChanged(address distributor);\\r\\n\\r\\n  /// @notice Initialize contract after setup it as proxy implementation\\r\\n  /// @dev Use it only once after first logic setup\\r\\n  ///      Initialize Controllable with sender address\\r\\n  ///      Setup default values for PS and Fund ratio\\r\\n  function initialize() external initializer {\\r\\n    ControllableV2.initializeControllable(address(this));\\r\\n    ControllerStorage.initializeControllerStorage(\\r\\n      msg.sender\\r\\n    );\\r\\n    // 100% by default\\r\\n    setPSNumeratorDenominator(1000, 1000);\\r\\n    // 10% by default\\r\\n    setFundNumeratorDenominator(100, 1000);\\r\\n  }\\r\\n\\r\\n  // ************* MODIFIERS AND FUNCTIONS FOR STRICT ACCESS ********************\\r\\n\\r\\n  /// @dev Operations allowed only for Governance address\\r\\n  function onlyGovernance() view private {\\r\\n    require(_governance() == msg.sender, \\\"C: Not governance\\\");\\r\\n  }\\r\\n\\r\\n  /// @dev Operations allowed for Governance or Dao addresses\\r\\n  function onlyGovernanceOrDao() view private {\\r\\n    require(_governance() == msg.sender || _dao() == msg.sender, \\\"C: Not governance or dao\\\");\\r\\n  }\\r\\n\\r\\n  /// @dev Operation should be announced (exist in timeLockSchedule map) or new value\\r\\n  function timeLock(\\r\\n    bytes32 opHash,\\r\\n    IAnnouncer.TimeLockOpCodes opCode,\\r\\n    bool isEmptyValue,\\r\\n    address target\\r\\n  ) private {\\r\\n    // empty values setup without time-lock\\r\\n    if (!isEmptyValue) {\\r\\n      require(_announcer() != address(0), \\\"C: Zero announcer\\\");\\r\\n      require(IAnnouncer(_announcer()).timeLockSchedule(opHash) > 0, \\\"C: Not announced\\\");\\r\\n      require(IAnnouncer(_announcer()).timeLockSchedule(opHash) < block.timestamp, \\\"C: Too early\\\");\\r\\n      IAnnouncer(_announcer()).clearAnnounce(opHash, opCode, target);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // ************ GOVERNANCE ACTIONS **************************\\r\\n\\r\\n\\r\\n  //  ---------------------- TIME-LOCK ACTIONS --------------------------\\r\\n\\r\\n  /// @notice Only Governance can do it. Set announced strategies for given vaults\\r\\n  /// @param _vaults Vault addresses\\r\\n  /// @param _strategies Strategy addresses\\r\\n  function setVaultStrategyBatch(address[] calldata _vaults, address[] calldata _strategies) external {\\r\\n    onlyGovernance();\\r\\n    require(_vaults.length == _strategies.length, \\\"C: Wrong arrays\\\");\\r\\n    for (uint256 i = 0; i < _vaults.length; i++) {\\r\\n      _setVaultStrategy(_vaults[i], _strategies[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Set announced strategy for given vault\\r\\n  /// @param _target Vault address\\r\\n  /// @param _strategy Strategy address\\r\\n  function _setVaultStrategy(address _target, address _strategy) private {\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.StrategyUpgrade, _target, _strategy)),\\r\\n      IAnnouncer.TimeLockOpCodes.StrategyUpgrade,\\r\\n      ISmartVault(_target).strategy() == address(0),\\r\\n      _target\\r\\n    );\\r\\n    emit VaultStrategyChanged(_target, ISmartVault(_target).strategy(), _strategy);\\r\\n    ISmartVault(_target).setStrategy(_strategy);\\r\\n  }\\r\\n\\r\\n  function addStrategiesToSplitter(address _splitter, address[] calldata _strategies) external {\\r\\n    onlyGovernance();\\r\\n    for (uint256 i = 0; i < _strategies.length; i++) {\\r\\n      _addStrategyToSplitter(_splitter, _strategies[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Add new strategy to given splitter\\r\\n  function _addStrategyToSplitter(address _splitter, address _strategy) internal {\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.StrategyUpgrade, _splitter, _strategy)),\\r\\n      IAnnouncer.TimeLockOpCodes.StrategyUpgrade,\\r\\n      !IStrategySplitter(_splitter).strategiesInited(),\\r\\n      _splitter\\r\\n    );\\r\\n    IStrategySplitter(_splitter).addStrategy(_strategy);\\r\\n    rewardDistribution[_strategy] = true;\\r\\n    if (!strategies[_strategy]) {\\r\\n      strategies[_strategy] = true;\\r\\n      IBookkeeper(_bookkeeper()).addStrategy(_strategy);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Upgrade batch announced proxies\\r\\n  /// @param _contracts Array of Proxy contract addresses for upgrade\\r\\n  /// @param _implementations Array of New implementation addresses\\r\\n  function upgradeTetuProxyBatch(\\r\\n    address[] calldata _contracts,\\r\\n    address[] calldata _implementations\\r\\n  ) external {\\r\\n    onlyGovernance();\\r\\n    require(_contracts.length == _implementations.length, \\\"wrong arrays\\\");\\r\\n    for (uint256 i = 0; i < _contracts.length; i++) {\\r\\n      _upgradeTetuProxy(_contracts[i], _implementations[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Upgrade announced proxy\\r\\n  /// @param _contract Proxy contract address for upgrade\\r\\n  /// @param _implementation New implementation address\\r\\n  function _upgradeTetuProxy(address _contract, address _implementation) private {\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.TetuProxyUpdate, _contract, _implementation)),\\r\\n      IAnnouncer.TimeLockOpCodes.TetuProxyUpdate,\\r\\n      false,\\r\\n      _contract\\r\\n    );\\r\\n    emit ProxyUpgraded(_contract, ITetuProxy(_contract).implementation(), _implementation);\\r\\n    ITetuProxy(_contract).upgrade(_implementation);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Call announced mint\\r\\n  /// @param totalAmount Total amount to mint.\\r\\n  ///                    33% will go to current network, 67% to FundKeeper for other networks\\r\\n  /// @param mintAllAvailable if true instead of amount will be used maxTotalSupplyForCurrentBlock - totalSupply\\r\\n  function mintAndDistribute(\\r\\n    uint256 totalAmount,\\r\\n    bool mintAllAvailable\\r\\n  ) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.Mint, totalAmount, distributor(), fund(), mintAllAvailable)),\\r\\n      IAnnouncer.TimeLockOpCodes.Mint,\\r\\n      false,\\r\\n      address(0)\\r\\n    );\\r\\n    require(distributor() != address(0), \\\"C: Zero distributor\\\");\\r\\n    require(fund() != address(0), \\\"C: Zero fund\\\");\\r\\n    IMintHelper(mintHelper()).mintAndDistribute(totalAmount, distributor(), fund(), mintAllAvailable);\\r\\n    emit Minted(mintHelper(), totalAmount, distributor(), fund(), mintAllAvailable);\\r\\n  }\\r\\n\\r\\n  //  ---------------------- TIME-LOCK ADDRESS CHANGE --------------------------\\r\\n\\r\\n  /// @notice Only Governance can do it. Change governance address.\\r\\n  /// @param newValue New governance address\\r\\n  function setGovernance(address newValue) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.Governance, newValue)),\\r\\n      IAnnouncer.TimeLockOpCodes.Governance,\\r\\n      _governance() == address(0),\\r\\n      address(0)\\r\\n    );\\r\\n    _setGovernance(newValue);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Change DAO address.\\r\\n  /// @param newValue New DAO address\\r\\n  function setDao(address newValue) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.Dao, newValue)),\\r\\n      IAnnouncer.TimeLockOpCodes.Dao,\\r\\n      _dao() == address(0),\\r\\n      address(0)\\r\\n    );\\r\\n    _setDao(newValue);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Change FeeRewardForwarder address.\\r\\n  /// @param _feeRewardForwarder New FeeRewardForwarder address\\r\\n  function setFeeRewardForwarder(address _feeRewardForwarder) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.FeeRewardForwarder, _feeRewardForwarder)),\\r\\n      IAnnouncer.TimeLockOpCodes.FeeRewardForwarder,\\r\\n      feeRewardForwarder() == address(0),\\r\\n      address(0)\\r\\n    );\\r\\n    rewardDistribution[feeRewardForwarder()] = false;\\r\\n    _setFeeRewardForwarder(_feeRewardForwarder);\\r\\n    rewardDistribution[feeRewardForwarder()] = true;\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Change Bookkeeper address.\\r\\n  /// @param newValue New Bookkeeper address\\r\\n  function setBookkeeper(address newValue) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.Bookkeeper, newValue)),\\r\\n      IAnnouncer.TimeLockOpCodes.Bookkeeper,\\r\\n      _bookkeeper() == address(0),\\r\\n      address(0)\\r\\n    );\\r\\n    _setBookkeeper(newValue);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Change MintHelper address.\\r\\n  /// @param _newValue New MintHelper address\\r\\n  function setMintHelper(address _newValue) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.MintHelper, _newValue)),\\r\\n      IAnnouncer.TimeLockOpCodes.MintHelper,\\r\\n      mintHelper() == address(0),\\r\\n      address(0)\\r\\n    );\\r\\n    _setMintHelper(_newValue);\\r\\n    // for reduce the chance of DoS check new implementation\\r\\n    require(IMintHelper(mintHelper()).devFundsList(0) != address(0), \\\"C: Wrong\\\");\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Change RewardToken(TETU) address.\\r\\n  /// @param _newValue New RewardToken address\\r\\n  function setRewardToken(address _newValue) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.RewardToken, _newValue)),\\r\\n      IAnnouncer.TimeLockOpCodes.RewardToken,\\r\\n      rewardToken() == address(0),\\r\\n      address(0)\\r\\n    );\\r\\n    _setRewardToken(_newValue);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Change FundToken(USDC by default) address.\\r\\n  /// @param _newValue New FundToken address\\r\\n  function setFundToken(address _newValue) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.FundToken, _newValue)),\\r\\n      IAnnouncer.TimeLockOpCodes.FundToken,\\r\\n      fundToken() == address(0),\\r\\n      address(0)\\r\\n    );\\r\\n    _setFundToken(_newValue);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Change ProfitSharing vault address.\\r\\n  /// @param _newValue New ProfitSharing vault address\\r\\n  function setPsVault(address _newValue) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.PsVault, _newValue)),\\r\\n      IAnnouncer.TimeLockOpCodes.PsVault,\\r\\n      psVault() == address(0),\\r\\n      address(0)\\r\\n    );\\r\\n    _setPsVault(_newValue);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Change FundKeeper address.\\r\\n  /// @param _newValue New FundKeeper address\\r\\n  function setFund(address _newValue) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.Fund, _newValue)),\\r\\n      IAnnouncer.TimeLockOpCodes.Fund,\\r\\n      fund() == address(0),\\r\\n      address(0)\\r\\n    );\\r\\n    _setFund(_newValue);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Change Announcer address.\\r\\n  ///         Has dedicated time-lock logic for avoiding collisions.\\r\\n  /// @param _newValue New Announcer address\\r\\n  function setAnnouncer(address _newValue) external {\\r\\n    onlyGovernance();\\r\\n    bytes32 opHash = keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.Announcer, _newValue));\\r\\n    if (_announcer() != address(0)) {\\r\\n      require(IAnnouncer(_announcer()).timeLockSchedule(opHash) > 0, \\\"C: Not announced\\\");\\r\\n      require(IAnnouncer(_announcer()).timeLockSchedule(opHash) < block.timestamp, \\\"C: Too early\\\");\\r\\n    }\\r\\n\\r\\n    _setAnnouncer(_newValue);\\r\\n    // clear announce after update not necessary\\r\\n\\r\\n    // check new announcer implementation for reducing the chance of DoS\\r\\n    IAnnouncer.TimeLockInfo memory info = IAnnouncer(_announcer()).timeLockInfo(0);\\r\\n    require(info.opCode == IAnnouncer.TimeLockOpCodes.ZeroPlaceholder, \\\"C: Wrong\\\");\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Change FundKeeper address.\\r\\n  /// @param _newValue New FundKeeper address\\r\\n  function setVaultController(address _newValue) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.VaultController, _newValue)),\\r\\n      IAnnouncer.TimeLockOpCodes.VaultController,\\r\\n      vaultController() == address(0),\\r\\n      address(0)\\r\\n    );\\r\\n    _setVaultController(_newValue);\\r\\n  }\\r\\n\\r\\n  // ------------------ TIME-LOCK RATIO CHANGE -------------------\\r\\n\\r\\n  /// @notice Only Governance or DAO can do it. Change Profit Sharing fee ratio.\\r\\n  ///         numerator/denominator = ratio\\r\\n  /// @param numerator Ratio numerator. Should be less than denominator\\r\\n  /// @param denominator Ratio denominator. Should be greater than zero\\r\\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator) public override {\\r\\n    onlyGovernanceOrDao();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.PsRatio, numerator, denominator)),\\r\\n      IAnnouncer.TimeLockOpCodes.PsRatio,\\r\\n      psNumerator() == 0 && psDenominator() == 0,\\r\\n      address(0)\\r\\n    );\\r\\n    _setPsNumerator(numerator);\\r\\n    _setPsDenominator(denominator);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance or DAO can do it. Change Fund fee ratio.\\r\\n  ///         numerator/denominator = ratio\\r\\n  /// @param numerator Ratio numerator. Should be less than denominator\\r\\n  /// @param denominator Ratio denominator. Should be greater than zero\\r\\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator) public override {\\r\\n    onlyGovernanceOrDao();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.FundRatio, numerator, denominator)),\\r\\n      IAnnouncer.TimeLockOpCodes.FundRatio,\\r\\n      fundNumerator() == 0 && fundDenominator() == 0,\\r\\n      address(0)\\r\\n    );\\r\\n    _setFundNumerator(numerator);\\r\\n    _setFundDenominator(denominator);\\r\\n  }\\r\\n\\r\\n  // ------------------ TIME-LOCK TOKEN MOVEMENTS -------------------\\r\\n\\r\\n  /// @notice Only Governance can do it. Transfer token from this contract to governance address\\r\\n  /// @param _recipient Recipient address\\r\\n  /// @param _token Token address\\r\\n  /// @param _amount Token amount\\r\\n  function controllerTokenMove(address _recipient, address _token, uint256 _amount) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.ControllerTokenMove, _recipient, _token, _amount)),\\r\\n      IAnnouncer.TimeLockOpCodes.ControllerTokenMove,\\r\\n      false,\\r\\n      address(0)\\r\\n    );\\r\\n    IERC20(_token).safeTransfer(_recipient, _amount);\\r\\n    emit ControllerTokenMoved(_recipient, _token, _amount);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Transfer token from strategy to governance address\\r\\n  /// @param _strategy Strategy address\\r\\n  /// @param _token Token address\\r\\n  /// @param _amount Token amount\\r\\n  function strategyTokenMove(address _strategy, address _token, uint256 _amount) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.StrategyTokenMove, _strategy, _token, _amount)),\\r\\n      IAnnouncer.TimeLockOpCodes.StrategyTokenMove,\\r\\n      false,\\r\\n      address(0)\\r\\n    );\\r\\n    // the strategy is responsible for maintaining the list of\\r\\n    // salvageable tokens, to make sure that governance cannot come\\r\\n    // in and take away the coins\\r\\n    IStrategy(_strategy).salvage(_governance(), _token, _amount);\\r\\n    emit StrategyTokenMoved(_strategy, _token, _amount);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Transfer token from FundKeeper to controller\\r\\n  /// @param _fund FundKeeper address\\r\\n  /// @param _token Token address\\r\\n  /// @param _amount Token amount\\r\\n  function fundKeeperTokenMove(address _fund, address _token, uint256 _amount) external {\\r\\n    onlyGovernance();\\r\\n    timeLock(\\r\\n      keccak256(abi.encode(IAnnouncer.TimeLockOpCodes.FundTokenMove, _fund, _token, _amount)),\\r\\n      IAnnouncer.TimeLockOpCodes.FundTokenMove,\\r\\n      false,\\r\\n      address(0)\\r\\n    );\\r\\n    IFundKeeper(_fund).withdrawToController(_token, _amount);\\r\\n    emit FundKeeperTokenMoved(_fund, _token, _amount);\\r\\n  }\\r\\n\\r\\n  // ---------------- NO TIME_LOCK --------------------------\\r\\n\\r\\n  /// @notice Only Governance can do it. Set reward distributor address.\\r\\n  ///         Distributor is a part of not critical infrastructure contracts and not require time-lock\\r\\n  /// @param _distributor New distributor address\\r\\n  function setDistributor(address _distributor) external {\\r\\n    onlyGovernance();\\r\\n    require(_distributor != address(0));\\r\\n    _setDistributor(_distributor);\\r\\n    emit DistributorChanged(_distributor);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Add/Remove Reward Distributor address\\r\\n  /// @param _newRewardDistribution Reward Distributor's addresses\\r\\n  /// @param _flag Reward Distributor's flags - true active, false deactivated\\r\\n  function setRewardDistribution(address[] calldata _newRewardDistribution, bool _flag) external {\\r\\n    onlyGovernance();\\r\\n    for (uint256 i = 0; i < _newRewardDistribution.length; i++) {\\r\\n      rewardDistribution[_newRewardDistribution[i]] = _flag;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Allow given addresses claim rewards without any penalty\\r\\n  function setPureRewardConsumers(address[] calldata _targets, bool _flag) external {\\r\\n    onlyGovernance();\\r\\n    for (uint256 i = 0; i < _targets.length; i++) {\\r\\n      pureRewardConsumers[_targets[i]] = _flag;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Add HardWorker address.\\r\\n  /// @param _worker New HardWorker address\\r\\n  function addHardWorker(address _worker) external {\\r\\n    onlyGovernance();\\r\\n    require(_worker != address(0));\\r\\n    hardWorkers[_worker] = true;\\r\\n    emit HardWorkerAdded(_worker);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Remove HardWorker address.\\r\\n  /// @param _worker Exist HardWorker address\\r\\n  function removeHardWorker(address _worker) external {\\r\\n    onlyGovernance();\\r\\n    require(_worker != address(0));\\r\\n    hardWorkers[_worker] = false;\\r\\n    emit HardWorkerRemoved(_worker);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance or DAO can do it. Add to whitelist an array of addresses\\r\\n  /// @param _targets An array of contracts\\r\\n  function changeWhiteListStatus(address[] calldata _targets, bool status) external override {\\r\\n    onlyGovernanceOrDao();\\r\\n    for (uint256 i = 0; i < _targets.length; i++) {\\r\\n      whiteList[_targets[i]] = status;\\r\\n      emit WhiteListStatusChanged(_targets[i], status);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Register pairs Vault/Strategy\\r\\n  /// @param _vaults Vault addresses\\r\\n  /// @param _strategies Strategy addresses\\r\\n  function addVaultsAndStrategies(address[] memory _vaults, address[] memory _strategies) external override {\\r\\n    onlyGovernance();\\r\\n    require(_vaults.length == _strategies.length, \\\"arrays wrong length\\\");\\r\\n    for (uint256 i = 0; i < _vaults.length; i++) {\\r\\n      _addVaultAndStrategy(_vaults[i], _strategies[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance can do it. Register a pair Vault/Strategy\\r\\n  /// @param _vault Vault addresses\\r\\n  /// @param _strategy Strategy addresses\\r\\n  function _addVaultAndStrategy(address _vault, address _strategy) private {\\r\\n    require(_vault != address(0), \\\"new vault shouldn't be empty\\\");\\r\\n    require(!vaults[_vault], \\\"vault already exists\\\");\\r\\n    require(!strategies[_strategy], \\\"strategy already exists\\\");\\r\\n    require(_strategy != address(0), \\\"new strategy must not be empty\\\");\\r\\n    require(IControllable(_vault).isController(address(this)));\\r\\n\\r\\n    vaults[_vault] = true;\\r\\n    IBookkeeper(_bookkeeper()).addVault(_vault);\\r\\n\\r\\n    // adding happens while setting\\r\\n    _setVaultStrategy(_vault, _strategy);\\r\\n    emit VaultAndStrategyAdded(_vault, _strategy);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Vault can do it. Register Strategy. Vault call it when governance set a strategy\\r\\n  /// @param _strategy Strategy addresses\\r\\n  function addStrategy(address _strategy) external override {\\r\\n    require(vaults[msg.sender], \\\"C: Not vault\\\");\\r\\n    if (!strategies[_strategy]) {\\r\\n      strategies[_strategy] = true;\\r\\n      IBookkeeper(_bookkeeper()).addStrategy(_strategy);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance or HardWorker can do it. Call doHardWork from given Vault\\r\\n  /// @param _vault Vault addresses\\r\\n  function doHardWork(address _vault) external {\\r\\n    require(hardWorkers[msg.sender] || _isGovernance(msg.sender), \\\"C: Not hardworker or governance\\\");\\r\\n    require(vaults[_vault], \\\"C: Not vault\\\");\\r\\n    uint256 oldSharePrice = ISmartVault(_vault).getPricePerFullShare();\\r\\n    ISmartVault(_vault).doHardWork();\\r\\n    emit SharePriceChangeLog(\\r\\n      _vault,\\r\\n      ISmartVault(_vault).strategy(),\\r\\n      oldSharePrice,\\r\\n      ISmartVault(_vault).getPricePerFullShare(),\\r\\n      block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Only HardWorker can do it. Call rebalanceAllPipes for given Strategy (AMB Platform)\\r\\n  /// @param _strategy Vault addresses\\r\\n  function rebalance(address _strategy) external override {\\r\\n    require(hardWorkers[msg.sender], \\\"C: Not hardworker\\\");\\r\\n    require(strategies[_strategy], \\\"C: Not strategy\\\");\\r\\n    IBalancingStrategy(_strategy).rebalanceAllPipes();\\r\\n  }\\r\\n\\r\\n  // ***************** EXTERNAL *******************************\\r\\n\\r\\n  /// @notice Return true if the given address is DAO\\r\\n  /// @param _adr Address for check\\r\\n  /// @return true if it is a DAO address\\r\\n  function isDao(address _adr) external view override returns (bool) {\\r\\n    return _dao() == _adr;\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if the given address is a HardWorker or Governance\\r\\n  /// @param _adr Address for check\\r\\n  /// @return true if it is a HardWorker or Governance\\r\\n  function isHardWorker(address _adr) external override view returns (bool) {\\r\\n    return hardWorkers[_adr] || _governance() == _adr;\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if the given address is a Reward Distributor or Governance or Strategy\\r\\n  /// @param _adr Address for check\\r\\n  /// @return true if it is a Reward Distributor or Governance or Strategy\\r\\n  function isRewardDistributor(address _adr) external override view returns (bool) {\\r\\n    return rewardDistribution[_adr] || _governance() == _adr || strategies[_adr];\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if the given address is allowed for claim rewards without penalties\\r\\n  function isPoorRewardConsumer(address _adr) external override view returns (bool) {\\r\\n    return pureRewardConsumers[_adr];\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if the given address:\\r\\n  ///         - is not smart contract\\r\\n  ///         - added to whitelist\\r\\n  ///         - governance address\\r\\n  ///         - hardworker\\r\\n  ///         - reward distributor\\r\\n  ///         - registered vault\\r\\n  ///         - registered strategy\\r\\n  /// @param _adr Address for check\\r\\n  /// @return true if the address allowed\\r\\n  function isAllowedUser(address _adr) external view override returns (bool) {\\r\\n    return isNotSmartContract(_adr)\\r\\n    || whiteList[_adr]\\r\\n    || _governance() == _adr\\r\\n    || hardWorkers[_adr]\\r\\n    || rewardDistribution[_adr]\\r\\n    || pureRewardConsumers[_adr]\\r\\n    || vaults[_adr]\\r\\n    || strategies[_adr];\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if given address is not a smart contract but a wallet address\\r\\n  /// @dev it is not 100% guarantee after EIP-3074 implementation\\r\\n  ///       use it as an additional check\\r\\n  /// @param _adr Address for check\\r\\n  /// @return true if the address is a wallet\\r\\n  function isNotSmartContract(address _adr) private view returns (bool) {\\r\\n    return _adr == tx.origin;\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if the given address is a registered vault\\r\\n  /// @param _vault Address for check\\r\\n  /// @return true if it is a registered vault\\r\\n  function isValidVault(address _vault) external override view returns (bool) {\\r\\n    return vaults[_vault];\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if the given address is a registered strategy\\r\\n  /// @param _strategy Address for check\\r\\n  /// @return true if it is a registered strategy\\r\\n  function isValidStrategy(address _strategy) external override view returns (bool) {\\r\\n    return strategies[_strategy];\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deprecated. This function has issues similar to the ones found in\\r\\n   * {IERC20-approve}, and its usage is discouraged.\\r\\n   *\\r\\n   * Whenever possible, use {safeIncreaseAllowance} and\\r\\n   * {safeDecreaseAllowance} instead.\\r\\n   */\\r\\n  function safeApprove(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // safeApprove should only be called when setting an initial allowance,\\r\\n    // or when resetting it to zero. To increase and decrease it, use\\r\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n    require(\\r\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n    );\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n  unchecked {\\r\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n    uint256 newAllowance = oldAllowance - value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n  enum Platform {\\r\\n    UNKNOWN, // 0\\r\\n    TETU, // 1\\r\\n    QUICK, // 2\\r\\n    SUSHI, // 3\\r\\n    WAULT, // 4\\r\\n    IRON, // 5\\r\\n    COSMIC, // 6\\r\\n    CURVE, // 7\\r\\n    DINO, // 8\\r\\n    IRON_LEND, // 9\\r\\n    HERMES, // 10\\r\\n    CAFE, // 11\\r\\n    TETU_SWAP, // 12\\r\\n    SPOOKY, // 13\\r\\n    AAVE_LEND, //14\\r\\n    AAVE_MAI_BAL, // 15\\r\\n    GEIST, //16\\r\\n    HARVEST, //17\\r\\n    SCREAM_LEND, //18\\r\\n    KLIMA, //19\\r\\n    VESQ, //20\\r\\n    QIDAO, //21\\r\\n    SUNFLOWER, //22\\r\\n    NACHO, //23\\r\\n    STRATEGY_SPLITTER, //24\\r\\n    TOMB, //25\\r\\n    TAROT, //26\\r\\n    BEETHOVEN, //27\\r\\n    IMPERMAX, //28\\r\\n    TETU_SF, //29\\r\\n    ALPACA, //30\\r\\n    MARKET, //31\\r\\n    UNIVERSE, //32\\r\\n    MAI_BAL, //33\\r\\n    UMA, //34\\r\\n    SPHERE, //35\\r\\n    BALANCER, //36\\r\\n    SLOT_37, //37\\r\\n    SLOT_38, //38\\r\\n    SLOT_39, //39\\r\\n    SLOT_40, //40\\r\\n    SLOT_41, //41\\r\\n    SLOT_42, //42\\r\\n    SLOT_43, //43\\r\\n    SLOT_44, //44\\r\\n    SLOT_45, //45\\r\\n    SLOT_46, //46\\r\\n    SLOT_47, //47\\r\\n    SLOT_48, //48\\r\\n    SLOT_49, //49\\r\\n    SLOT_50 //50\\r\\n  }\\r\\n\\r\\n  // *************** GOVERNANCE ACTIONS **************\\r\\n  function STRATEGY_NAME() external view returns (string memory);\\r\\n\\r\\n  function withdrawAllToVault() external;\\r\\n\\r\\n  function withdrawToVault(uint256 amount) external;\\r\\n\\r\\n  function salvage(address recipient, address token, uint256 amount) external;\\r\\n\\r\\n  function doHardWork() external;\\r\\n\\r\\n  function investAllUnderlying() external;\\r\\n\\r\\n  function emergencyExit() external;\\r\\n\\r\\n  function pauseInvesting() external;\\r\\n\\r\\n  function continueInvesting() external;\\r\\n\\r\\n  // **************** VIEWS ***************\\r\\n  function rewardTokens() external view returns (address[] memory);\\r\\n\\r\\n  function underlying() external view returns (address);\\r\\n\\r\\n  function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n  function rewardPoolBalance() external view returns (uint256);\\r\\n\\r\\n  function buyBackRatio() external view returns (uint256);\\r\\n\\r\\n  function unsalvageableTokens(address token) external view returns (bool);\\r\\n\\r\\n  function vault() external view returns (address);\\r\\n\\r\\n  function investedUnderlyingBalance() external view returns (uint256);\\r\\n\\r\\n  function platform() external view returns (Platform);\\r\\n\\r\\n  function assets() external view returns (address[] memory);\\r\\n\\r\\n  function pausedInvesting() external view returns (bool);\\r\\n\\r\\n  function readyToClaim() external view returns (uint256[] memory);\\r\\n\\r\\n  function poolTotalAmount() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IStrategySplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IStrategySplitter {\\r\\n\\r\\n  function strategies(uint idx) external view returns (address);\\r\\n\\r\\n  function strategiesRatios(address strategy) external view returns (uint);\\r\\n\\r\\n  function withdrawRequestsCalls(address user) external view returns (uint);\\r\\n\\r\\n  function addStrategy(address _strategy) external;\\r\\n\\r\\n  function removeStrategy(address _strategy) external;\\r\\n\\r\\n  function setStrategyRatios(address[] memory _strategies, uint[] memory _ratios) external;\\r\\n\\r\\n  function strategiesInited() external view returns (bool);\\r\\n\\r\\n  function needRebalance() external view returns (uint);\\r\\n\\r\\n  function wantToWithdraw() external view returns (uint);\\r\\n\\r\\n  function maxCheapWithdraw() external view returns (uint);\\r\\n\\r\\n  function strategiesLength() external view returns (uint);\\r\\n\\r\\n  function allStrategies() external view returns (address[] memory);\\r\\n\\r\\n  function strategyRewardTokens() external view returns (address[] memory);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/ISmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface ISmartVault {\\r\\n\\r\\n  function setStrategy(address _strategy) external;\\r\\n\\r\\n  function changeActivityStatus(bool _active) external;\\r\\n\\r\\n  function changeProtectionMode(bool _active) external;\\r\\n\\r\\n  function changePpfsDecreaseAllowed(bool _value) external;\\r\\n\\r\\n  function setLockPeriod(uint256 _value) external;\\r\\n\\r\\n  function setLockPenalty(uint256 _value) external;\\r\\n\\r\\n  function setToInvest(uint256 _value) external;\\r\\n\\r\\n  function doHardWork() external;\\r\\n\\r\\n  function rebalance() external;\\r\\n\\r\\n  function disableLock() external;\\r\\n\\r\\n  function notifyTargetRewardAmount(address _rewardToken, uint256 reward) external;\\r\\n\\r\\n  function notifyRewardWithoutPeriodChange(address _rewardToken, uint256 reward) external;\\r\\n\\r\\n  function deposit(uint256 amount) external;\\r\\n\\r\\n  function depositAndInvest(uint256 amount) external;\\r\\n\\r\\n  function depositFor(uint256 amount, address holder) external;\\r\\n\\r\\n  function withdraw(uint256 numberOfShares) external;\\r\\n\\r\\n  function exit() external;\\r\\n\\r\\n  function getAllRewards() external;\\r\\n\\r\\n  function getReward(address rt) external;\\r\\n\\r\\n  function underlying() external view returns (address);\\r\\n\\r\\n  function strategy() external view returns (address);\\r\\n\\r\\n  function getRewardTokenIndex(address rt) external view returns (uint256);\\r\\n\\r\\n  function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n  function underlyingUnit() external view returns (uint256);\\r\\n\\r\\n  function duration() external view returns (uint256);\\r\\n\\r\\n  function underlyingBalanceInVault() external view returns (uint256);\\r\\n\\r\\n  function underlyingBalanceWithInvestment() external view returns (uint256);\\r\\n\\r\\n  function underlyingBalanceWithInvestmentForHolder(address holder) external view returns (uint256);\\r\\n\\r\\n  function availableToInvestOut() external view returns (uint256);\\r\\n\\r\\n  function earned(address rt, address account) external view returns (uint256);\\r\\n\\r\\n  function earnedWithBoost(address rt, address account) external view returns (uint256);\\r\\n\\r\\n  function rewardPerToken(address rt) external view returns (uint256);\\r\\n\\r\\n  function lastTimeRewardApplicable(address rt) external view returns (uint256);\\r\\n\\r\\n  function rewardTokensLength() external view returns (uint256);\\r\\n\\r\\n  function active() external view returns (bool);\\r\\n\\r\\n  function rewardTokens() external view returns (address[] memory);\\r\\n\\r\\n  function periodFinishForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function rewardRateForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function lastUpdateTimeForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function rewardPerTokenStoredForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function userRewardPerTokenPaidForToken(address _rt, address account) external view returns (uint256);\\r\\n\\r\\n  function rewardsForToken(address _rt, address account) external view returns (uint256);\\r\\n\\r\\n  function userLastWithdrawTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function userLastDepositTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function userBoostTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function userLockTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function addRewardToken(address rt) external;\\r\\n\\r\\n  function removeRewardToken(address rt) external;\\r\\n\\r\\n  function stop() external;\\r\\n\\r\\n  function ppfsDecreaseAllowed() external view returns (bool);\\r\\n\\r\\n  function lockPeriod() external view returns (uint256);\\r\\n\\r\\n  function lockPenalty() external view returns (uint256);\\r\\n\\r\\n  function toInvest() external view returns (uint256);\\r\\n\\r\\n  function depositFeeNumerator() external view returns (uint256);\\r\\n\\r\\n  function lockAllowed() external view returns (bool);\\r\\n\\r\\n  function protectionMode() external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IFeeRewardForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IFeeRewardForwarder {\\r\\n  function distribute(uint256 _amount, address _token, address _vault) external returns (uint256);\\r\\n\\r\\n  function notifyPsPool(address _token, uint256 _amount) external returns (uint256);\\r\\n\\r\\n  function notifyCustomPool(address _token, address _rewardPool, uint256 _maxBuyback) external returns (uint256);\\r\\n\\r\\n  function liquidate(address tokenIn, address tokenOut, uint256 amount) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IBookkeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IBookkeeper {\\r\\n\\r\\n  struct PpfsChange {\\r\\n    address vault;\\r\\n    uint256 block;\\r\\n    uint256 time;\\r\\n    uint256 value;\\r\\n    uint256 oldBlock;\\r\\n    uint256 oldTime;\\r\\n    uint256 oldValue;\\r\\n  }\\r\\n\\r\\n  struct HardWork {\\r\\n    address strategy;\\r\\n    uint256 block;\\r\\n    uint256 time;\\r\\n    uint256 targetTokenAmount;\\r\\n  }\\r\\n\\r\\n  function addVault(address _vault) external;\\r\\n\\r\\n  function addStrategy(address _strategy) external;\\r\\n\\r\\n  function registerStrategyEarned(uint256 _targetTokenAmount) external;\\r\\n\\r\\n  function registerFundKeeperEarned(address _token, uint256 _fundTokenAmount) external;\\r\\n\\r\\n  function registerUserAction(address _user, uint256 _amount, bool _deposit) external;\\r\\n\\r\\n  function registerVaultTransfer(address from, address to, uint256 amount) external;\\r\\n\\r\\n  function registerUserEarned(address _user, address _vault, address _rt, uint256 _amount) external;\\r\\n\\r\\n  function registerPpfsChange(address vault, uint256 value) external;\\r\\n\\r\\n  function registerRewardDistribution(address vault, address token, uint256 amount) external;\\r\\n\\r\\n  function vaults() external view returns (address[] memory);\\r\\n\\r\\n  function vaultsLength() external view returns (uint256);\\r\\n\\r\\n  function strategies() external view returns (address[] memory);\\r\\n\\r\\n  function strategiesLength() external view returns (uint256);\\r\\n\\r\\n  function lastPpfsChange(address vault) external view returns (PpfsChange memory);\\r\\n\\r\\n  /// @notice Return total earned TETU tokens for strategy\\r\\n  /// @dev Should be incremented after strategy rewards distribution\\r\\n  /// @param strategy Strategy address\\r\\n  /// @return Earned TETU tokens\\r\\n  function targetTokenEarned(address strategy) external view returns (uint256);\\r\\n\\r\\n  /// @notice Return share(xToken) balance of given user\\r\\n  /// @dev Should be calculated for each xToken transfer\\r\\n  /// @param vault Vault address\\r\\n  /// @param user User address\\r\\n  /// @return User share (xToken) balance\\r\\n  function vaultUsersBalances(address vault, address user) external view returns (uint256);\\r\\n\\r\\n  /// @notice Return earned token amount for given token and user\\r\\n  /// @dev Fills when user claim rewards\\r\\n  /// @param user User address\\r\\n  /// @param vault Vault address\\r\\n  /// @param token Token address\\r\\n  /// @return User's earned tokens amount\\r\\n  function userEarned(address user, address vault, address token) external view returns (uint256);\\r\\n\\r\\n  function lastHardWork(address vault) external view returns (HardWork memory);\\r\\n\\r\\n  /// @notice Return users quantity for given Vault\\r\\n  /// @dev Calculation based in Bookkeeper user balances\\r\\n  /// @param vault Vault address\\r\\n  /// @return Users quantity\\r\\n  function vaultUsersQuantity(address vault) external view returns (uint256);\\r\\n\\r\\n  function fundKeeperEarned(address vault) external view returns (uint256);\\r\\n\\r\\n  function vaultRewards(address vault, address token, uint256 idx) external view returns (uint256);\\r\\n\\r\\n  function vaultRewardsLength(address vault, address token) external view returns (uint256);\\r\\n\\r\\n  function strategyEarnedSnapshots(address strategy, uint256 idx) external view returns (uint256);\\r\\n\\r\\n  function strategyEarnedSnapshotsTime(address strategy, uint256 idx) external view returns (uint256);\\r\\n\\r\\n  function strategyEarnedSnapshotsLength(address strategy) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IUpgradeSource.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IUpgradeSource {\\r\\n\\r\\n  function scheduleUpgrade(address impl) external;\\r\\n\\r\\n  function finalizeUpgrade() external;\\r\\n\\r\\n  function shouldUpgrade() external view returns (bool, address);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IFundKeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IFundKeeper {\\r\\n\\r\\n  function withdrawToController(address _token, uint256 amount) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/ITetuProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface ITetuProxy {\\r\\n\\r\\n  function upgrade(address _newImplementation) external;\\r\\n\\r\\n  function implementation() external returns (address);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IMintHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IMintHelper {\\r\\n\\r\\n  function mintAndDistribute(\\r\\n    uint256 totalAmount,\\r\\n    address _distributor,\\r\\n    address _otherNetworkFund,\\r\\n    bool mintAllAvailable\\r\\n  ) external;\\r\\n\\r\\n  function devFundsList(uint256 idx) external returns (address);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IAnnouncer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IAnnouncer {\\r\\n\\r\\n  /// @dev Time lock operation codes\\r\\n  enum TimeLockOpCodes {\\r\\n    // TimeLockedAddresses\\r\\n    Governance, // 0\\r\\n    Dao, // 1\\r\\n    FeeRewardForwarder, // 2\\r\\n    Bookkeeper, // 3\\r\\n    MintHelper, // 4\\r\\n    RewardToken, // 5\\r\\n    FundToken, // 6\\r\\n    PsVault, // 7\\r\\n    Fund, // 8\\r\\n    // TimeLockedRatios\\r\\n    PsRatio, // 9\\r\\n    FundRatio, // 10\\r\\n    // TimeLockedTokenMoves\\r\\n    ControllerTokenMove, // 11\\r\\n    StrategyTokenMove, // 12\\r\\n    FundTokenMove, // 13\\r\\n    // Other\\r\\n    TetuProxyUpdate, // 14\\r\\n    StrategyUpgrade, // 15\\r\\n    Mint, // 16\\r\\n    Announcer, // 17\\r\\n    ZeroPlaceholder, //18\\r\\n    VaultController, //19\\r\\n    RewardBoostDuration, //20\\r\\n    RewardRatioWithoutBoost, //21\\r\\n    VaultStop //22\\r\\n  }\\r\\n\\r\\n  /// @dev Holder for human readable info\\r\\n  struct TimeLockInfo {\\r\\n    TimeLockOpCodes opCode;\\r\\n    bytes32 opHash;\\r\\n    address target;\\r\\n    address[] adrValues;\\r\\n    uint256[] numValues;\\r\\n  }\\r\\n\\r\\n  function clearAnnounce(bytes32 opHash, TimeLockOpCodes opCode, address target) external;\\r\\n\\r\\n  function timeLockSchedule(bytes32 opHash) external returns (uint256);\\r\\n\\r\\n  function timeLockInfo(uint256 idx) external returns (TimeLockInfo memory);\\r\\n\\r\\n  // ************ DAO ACTIONS *************\\r\\n  function announceRatioChange(TimeLockOpCodes opCode, uint256 numerator, uint256 denominator) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/strategies/IBalancingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IBalancingStrategy {\\r\\n\\r\\n  function rebalanceAllPipes() external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/governance/ControllerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../interface/IController.sol\\\";\\r\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\r\\n\\r\\n/// @title Eternal storage + getters and setters pattern\\r\\n/// @dev If a key value is changed it will be required to setup it again.\\r\\n/// @author belbix\\r\\nabstract contract ControllerStorage is Initializable, IController {\\r\\n\\r\\n  // don't change names or ordering!\\r\\n  mapping(bytes32 => uint256) private uintStorage;\\r\\n  mapping(bytes32 => address) private addressStorage;\\r\\n\\r\\n  /// @notice Address changed the variable with `name`\\r\\n  event UpdatedAddressSlot(string indexed name, address oldValue, address newValue);\\r\\n  /// @notice Value changed the variable with `name`\\r\\n  event UpdatedUint256Slot(string indexed name, uint256 oldValue, uint256 newValue);\\r\\n\\r\\n  /// @notice Initialize contract after setup it as proxy implementation\\r\\n  /// @dev Use it only once after first logic setup\\r\\n  /// @param __governance Governance address\\r\\n  function initializeControllerStorage(\\r\\n    address __governance\\r\\n  ) public initializer {\\r\\n    _setGovernance(__governance);\\r\\n  }\\r\\n\\r\\n  // ******************* SETTERS AND GETTERS **********************\\r\\n\\r\\n  // ----------- ADDRESSES ----------\\r\\n  function _setGovernance(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"governance\\\", _governance(), _address);\\r\\n    setAddress(\\\"governance\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return governance address\\r\\n  /// @return Governance address\\r\\n  function governance() external override view returns (address) {\\r\\n    return _governance();\\r\\n  }\\r\\n\\r\\n  function _governance() internal view returns (address) {\\r\\n    return getAddress(\\\"governance\\\");\\r\\n  }\\r\\n\\r\\n  function _setDao(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"dao\\\", _dao(), _address);\\r\\n    setAddress(\\\"dao\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return DAO address\\r\\n  /// @return DAO address\\r\\n  function dao() external override view returns (address) {\\r\\n    return _dao();\\r\\n  }\\r\\n\\r\\n  function _dao() internal view returns (address) {\\r\\n    return getAddress(\\\"dao\\\");\\r\\n  }\\r\\n\\r\\n  function _setFeeRewardForwarder(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"feeRewardForwarder\\\", feeRewardForwarder(), _address);\\r\\n    setAddress(\\\"feeRewardForwarder\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return FeeRewardForwarder address\\r\\n  /// @return FeeRewardForwarder address\\r\\n  function feeRewardForwarder() public override view returns (address) {\\r\\n    return getAddress(\\\"feeRewardForwarder\\\");\\r\\n  }\\r\\n\\r\\n  function _setBookkeeper(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"bookkeeper\\\", _bookkeeper(), _address);\\r\\n    setAddress(\\\"bookkeeper\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return Bookkeeper address\\r\\n  /// @return Bookkeeper address\\r\\n  function bookkeeper() external override view returns (address) {\\r\\n    return _bookkeeper();\\r\\n  }\\r\\n\\r\\n  function _bookkeeper() internal view returns (address) {\\r\\n    return getAddress(\\\"bookkeeper\\\");\\r\\n  }\\r\\n\\r\\n  function _setMintHelper(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"mintHelper\\\", mintHelper(), _address);\\r\\n    setAddress(\\\"mintHelper\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return MintHelper address\\r\\n  /// @return MintHelper address\\r\\n  function mintHelper() public override view returns (address) {\\r\\n    return getAddress(\\\"mintHelper\\\");\\r\\n  }\\r\\n\\r\\n  function _setRewardToken(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"rewardToken\\\", rewardToken(), _address);\\r\\n    setAddress(\\\"rewardToken\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return TETU address\\r\\n  /// @return TETU address\\r\\n  function rewardToken() public override view returns (address) {\\r\\n    return getAddress(\\\"rewardToken\\\");\\r\\n  }\\r\\n\\r\\n  function _setFundToken(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"fundToken\\\", fundToken(), _address);\\r\\n    setAddress(\\\"fundToken\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return a token address used for FundKeeper\\r\\n  /// @return FundKeeper's main token address\\r\\n  function fundToken() public override view returns (address) {\\r\\n    return getAddress(\\\"fundToken\\\");\\r\\n  }\\r\\n\\r\\n  function _setPsVault(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"psVault\\\", psVault(), _address);\\r\\n    setAddress(\\\"psVault\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return Profit Sharing pool address\\r\\n  /// @return Profit Sharing pool address\\r\\n  function psVault() public override view returns (address) {\\r\\n    return getAddress(\\\"psVault\\\");\\r\\n  }\\r\\n\\r\\n  function _setFund(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"fund\\\", fund(), _address);\\r\\n    setAddress(\\\"fund\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return FundKeeper address\\r\\n  /// @return FundKeeper address\\r\\n  function fund() public override view returns (address) {\\r\\n    return getAddress(\\\"fund\\\");\\r\\n  }\\r\\n\\r\\n  function _setDistributor(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"distributor\\\", distributor(), _address);\\r\\n    setAddress(\\\"distributor\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return Reward distributor address\\r\\n  /// @return Distributor address\\r\\n  function distributor() public override view returns (address) {\\r\\n    return getAddress(\\\"distributor\\\");\\r\\n  }\\r\\n\\r\\n  function _setAnnouncer(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"announcer\\\", _announcer(), _address);\\r\\n    setAddress(\\\"announcer\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return Announcer address\\r\\n  /// @return Announcer address\\r\\n  function announcer() external override view returns (address) {\\r\\n    return _announcer();\\r\\n  }\\r\\n\\r\\n  function _announcer() internal view returns (address) {\\r\\n    return getAddress(\\\"announcer\\\");\\r\\n  }\\r\\n\\r\\n  function _setVaultController(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"vaultController\\\", vaultController(), _address);\\r\\n    setAddress(\\\"vaultController\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Return FundKeeper address\\r\\n  /// @return FundKeeper address\\r\\n  function vaultController() public override view returns (address) {\\r\\n    return getAddress(\\\"vaultController\\\");\\r\\n  }\\r\\n\\r\\n  // ----------- INTEGERS ----------\\r\\n  function _setPsNumerator(uint256 _value) internal {\\r\\n    emit UpdatedUint256Slot(\\\"psNumerator\\\", psNumerator(), _value);\\r\\n    setUint256(\\\"psNumerator\\\", _value);\\r\\n  }\\r\\n\\r\\n  /// @notice Return Profit Sharing pool ratio's numerator\\r\\n  /// @return Profit Sharing pool ratio numerator\\r\\n  function psNumerator() public view override returns (uint256) {\\r\\n    return getUint256(\\\"psNumerator\\\");\\r\\n  }\\r\\n\\r\\n  function _setPsDenominator(uint256 _value) internal {\\r\\n    emit UpdatedUint256Slot(\\\"psDenominator\\\", psDenominator(), _value);\\r\\n    setUint256(\\\"psDenominator\\\", _value);\\r\\n  }\\r\\n\\r\\n  /// @notice Return Profit Sharing pool ratio's denominator\\r\\n  /// @return Profit Sharing pool ratio denominator\\r\\n  function psDenominator() public view override returns (uint256) {\\r\\n    return getUint256(\\\"psDenominator\\\");\\r\\n  }\\r\\n\\r\\n  function _setFundNumerator(uint256 _value) internal {\\r\\n    emit UpdatedUint256Slot(\\\"fundNumerator\\\", fundNumerator(), _value);\\r\\n    setUint256(\\\"fundNumerator\\\", _value);\\r\\n  }\\r\\n\\r\\n  /// @notice Return FundKeeper ratio's numerator\\r\\n  /// @return FundKeeper ratio numerator\\r\\n  function fundNumerator() public view override returns (uint256) {\\r\\n    return getUint256(\\\"fundNumerator\\\");\\r\\n  }\\r\\n\\r\\n  function _setFundDenominator(uint256 _value) internal {\\r\\n    emit UpdatedUint256Slot(\\\"fundDenominator\\\", fundDenominator(), _value);\\r\\n    setUint256(\\\"fundDenominator\\\", _value);\\r\\n  }\\r\\n\\r\\n  /// @notice Return FundKeeper ratio's denominator\\r\\n  /// @return FundKeeper ratio denominator\\r\\n  function fundDenominator() public view override returns (uint256) {\\r\\n    return getUint256(\\\"fundDenominator\\\");\\r\\n  }\\r\\n\\r\\n  // ******************** STORAGE INTERNAL FUNCTIONS ********************\\r\\n\\r\\n  function setAddress(string memory key, address _address) private {\\r\\n    addressStorage[keccak256(abi.encodePacked(key))] = _address;\\r\\n  }\\r\\n\\r\\n  function getAddress(string memory key) private view returns (address) {\\r\\n    return addressStorage[keccak256(abi.encodePacked(key))];\\r\\n  }\\r\\n\\r\\n  function setUint256(string memory key, uint256 _value) private {\\r\\n    uintStorage[keccak256(abi.encodePacked(key))] = _value;\\r\\n  }\\r\\n\\r\\n  function getUint256(string memory key) private view returns (uint256) {\\r\\n    return uintStorage[keccak256(abi.encodePacked(key))];\\r\\n  }\\r\\n\\r\\n  //slither-disable-next-line unused-state\\r\\n  uint256[50] private ______gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/governance/ControllableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\r\\nimport \\\"../interface/IControllable.sol\\\";\\r\\nimport \\\"../interface/IControllableExtended.sol\\\";\\r\\nimport \\\"../interface/IController.sol\\\";\\r\\n\\r\\n/// @title Implement basic functionality for any contract that require strict control\\r\\n///        V2 is optimised version for less gas consumption\\r\\n/// @dev Can be used with upgradeable pattern.\\r\\n///      Require call initializeControllable() in any case.\\r\\n/// @author belbix\\r\\nabstract contract ControllableV2 is Initializable, IControllable, IControllableExtended {\\r\\n\\r\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\r\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\r\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\r\\n\\r\\n  event ContractInitialized(address controller, uint ts, uint block);\\r\\n\\r\\n  /// @notice Initialize contract after setup it as proxy implementation\\r\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\r\\n  /// @dev Use it only once after first logic setup\\r\\n  /// @param __controller Controller address\\r\\n  function initializeControllable(address __controller) public initializer {\\r\\n    _setController(__controller);\\r\\n    _setCreated(block.timestamp);\\r\\n    _setCreatedBlock(block.number);\\r\\n    emit ContractInitialized(__controller, block.timestamp, block.number);\\r\\n  }\\r\\n\\r\\n  /// @dev Return true if given address is controller\\r\\n  function isController(address _value) external override view returns (bool) {\\r\\n    return _isController(_value);\\r\\n  }\\r\\n\\r\\n  function _isController(address _value) internal view returns (bool) {\\r\\n    return _value == _controller();\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if given address is setup as governance in Controller\\r\\n  function isGovernance(address _value) external override view returns (bool) {\\r\\n    return _isGovernance(_value);\\r\\n  }\\r\\n\\r\\n  function _isGovernance(address _value) internal view returns (bool) {\\r\\n    return IController(_controller()).governance() == _value;\\r\\n  }\\r\\n\\r\\n  // ************* SETTERS/GETTERS *******************\\r\\n\\r\\n  /// @notice Return controller address saved in the contract slot\\r\\n  function controller() external view override returns (address) {\\r\\n    return _controller();\\r\\n  }\\r\\n\\r\\n  function _controller() internal view returns (address result) {\\r\\n    bytes32 slot = _CONTROLLER_SLOT;\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Set a controller address to contract slot\\r\\n  function _setController(address _newController) private {\\r\\n    require(_newController != address(0));\\r\\n    bytes32 slot = _CONTROLLER_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _newController)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return creation timestamp\\r\\n  /// @return ts Creation timestamp\\r\\n  function created() external view override returns (uint256 ts) {\\r\\n    bytes32 slot = _CREATED_SLOT;\\r\\n    assembly {\\r\\n      ts := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Filled only once when contract initialized\\r\\n  /// @param _value block.timestamp\\r\\n  function _setCreated(uint256 _value) private {\\r\\n    bytes32 slot = _CREATED_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return creation block number\\r\\n  /// @return ts Creation block number\\r\\n  function createdBlock() external view returns (uint256 ts) {\\r\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\r\\n    assembly {\\r\\n      ts := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Filled only once when contract initialized\\r\\n  /// @param _value block.number\\r\\n  function _setCreatedBlock(uint256 _value) private {\\r\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize, which returns 0 for contracts in\\r\\n    // construction, since the code is only stored at the end of the\\r\\n    // constructor execution.\\r\\n\\r\\n    uint256 size;\\r\\n    assembly {\\r\\n      size := extcodesize(account)\\r\\n    }\\r\\n    return size > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IController {\\r\\n\\r\\n  function addVaultsAndStrategies(address[] memory _vaults, address[] memory _strategies) external;\\r\\n\\r\\n  function addStrategy(address _strategy) external;\\r\\n\\r\\n  function governance() external view returns (address);\\r\\n\\r\\n  function dao() external view returns (address);\\r\\n\\r\\n  function bookkeeper() external view returns (address);\\r\\n\\r\\n  function feeRewardForwarder() external view returns (address);\\r\\n\\r\\n  function mintHelper() external view returns (address);\\r\\n\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  function fundToken() external view returns (address);\\r\\n\\r\\n  function psVault() external view returns (address);\\r\\n\\r\\n  function fund() external view returns (address);\\r\\n\\r\\n  function distributor() external view returns (address);\\r\\n\\r\\n  function announcer() external view returns (address);\\r\\n\\r\\n  function vaultController() external view returns (address);\\r\\n\\r\\n  function whiteList(address _target) external view returns (bool);\\r\\n\\r\\n  function vaults(address _target) external view returns (bool);\\r\\n\\r\\n  function strategies(address _target) external view returns (bool);\\r\\n\\r\\n  function psNumerator() external view returns (uint256);\\r\\n\\r\\n  function psDenominator() external view returns (uint256);\\r\\n\\r\\n  function fundNumerator() external view returns (uint256);\\r\\n\\r\\n  function fundDenominator() external view returns (uint256);\\r\\n\\r\\n  function isAllowedUser(address _adr) external view returns (bool);\\r\\n\\r\\n  function isDao(address _adr) external view returns (bool);\\r\\n\\r\\n  function isHardWorker(address _adr) external view returns (bool);\\r\\n\\r\\n  function isRewardDistributor(address _adr) external view returns (bool);\\r\\n\\r\\n  function isPoorRewardConsumer(address _adr) external view returns (bool);\\r\\n\\r\\n  function isValidVault(address _vault) external view returns (bool);\\r\\n\\r\\n  function isValidStrategy(address _strategy) external view returns (bool);\\r\\n\\r\\n  function rebalance(address _strategy) external;\\r\\n\\r\\n  // ************ DAO ACTIONS *************\\r\\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator) external;\\r\\n\\r\\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator) external;\\r\\n\\r\\n  function changeWhiteListStatus(address[] calldata _targets, bool status) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private _initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private _initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !_initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = true;\\r\\n      _initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = false;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IControllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IControllable {\\r\\n\\r\\n  function isController(address _contract) external view returns (bool);\\r\\n\\r\\n  function isGovernance(address _contract) external view returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IControllableExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/// @dev This interface contains additional functions for Controllable class\\r\\n///      Don't extend the exist Controllable for the reason of huge coherence\\r\\ninterface IControllableExtended {\\r\\n\\r\\n  function created() external view returns (uint256 ts);\\r\\n\\r\\n  function controller() external view returns (address adr);\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ControllerTokenMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"DistributorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundKeeperTokenMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"HardWorkerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"HardWorkerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintHelper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"otherNetworkFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintAllAvailable\",\"type\":\"bool\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLogic\",\"type\":\"address\"}],\"name\":\"ProxyUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SharePriceChangeLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StrategyTokenMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdatedAddressSlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdatedUint256Slot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"VaultAndStrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"VaultStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhiteListStatusChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"addHardWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_splitter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"addStrategiesToSplitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"addVaultsAndStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"announcer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bookkeeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeWhiteListStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controllerTokenMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRewardForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundKeeperTokenMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hardWorkers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__controller\",\"type\":\"address\"}],\"name\":\"initializeControllable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__governance\",\"type\":\"address\"}],\"name\":\"initializeControllerStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"isAllowedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"isDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"isHardWorker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"isPoorRewardConsumer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"isRewardDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"isValidStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"isValidVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintAllAvailable\",\"type\":\"bool\"}],\"name\":\"mintAndDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pureRewardConsumers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"removeHardWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValue\",\"type\":\"address\"}],\"name\":\"setAnnouncer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setBookkeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRewardForwarder\",\"type\":\"address\"}],\"name\":\"setFeeRewardForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValue\",\"type\":\"address\"}],\"name\":\"setFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setFundNumeratorDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValue\",\"type\":\"address\"}],\"name\":\"setFundToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValue\",\"type\":\"address\"}],\"name\":\"setMintHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setPSNumeratorDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValue\",\"type\":\"address\"}],\"name\":\"setPsVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setPureRewardConsumers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newRewardDistribution\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValue\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValue\",\"type\":\"address\"}],\"name\":\"setVaultController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"setVaultStrategyBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"strategyTokenMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_implementations\",\"type\":\"address[]\"}],\"name\":\"upgradeTetuProxyBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Controller", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}