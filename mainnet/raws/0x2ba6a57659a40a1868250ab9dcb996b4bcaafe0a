{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"ClaimRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./EIP712.sol\\\";\\nimport \\\"./IDEXRouter.sol\\\";\\n\\n/**\\n * @title ClaimRewards smart contract.\\n */\\ncontract ClaimRewards is EIP712, Ownable, ReentrancyGuard {\\n  /// @notice _BATCH_TYPE type hash of the Batch struct\\n  bytes32 private constant _BATCH_TYPE = keccak256(\\\"Batch(uint256 batchId,uint256 issuedTimestamp)\\\");\\n  /// @notice _BATCH_TYPE type hash of the Ticket struct\\n  bytes32 private constant _TICKET_TYPE = keccak256(\\\"Ticket(uint8 rewardType,address tokenAddress,uint256 amount,address claimerAddress,uint256 ticketId,bytes32 batchProofSignature)\\\");\\n\\n  uint256 public maxTicketsPerBatch = 1_000_000;\\n  uint256 public minCharityDonationPercent = 15;\\n  uint256 public maxCharityDonationPercent = 100;\\n\\n  // @notice duration since the issued date of a batch in a ticket that a user can convert ETH to reward tokens\\n  uint256 public durationToConvertETHToTokens = 5 days;\\n\\n  // @notice the charity address that a user can distribute some proportion of claim rewards to\\n  address public charityAddress;\\n  // @notice the signer that signed the batchProofSignature\\n  address public batchSigner;\\n  // @notice the signer that signed the ticketProofSignature\\n  address public ticketSigner;\\n\\n  // @notice total ETH claimed amount\\n  uint256 public totalETHClaimedAmount;\\n  // @notice total ETH donate amount\\n  uint256 public totalETHDonatedAmount;\\n  // @notice total ERC20 token claimed amount\\n  mapping(address =\\u003e uint256) public totalERC20ClaimedAmount;\\n  // @notice total ERC20 token donated amount\\n  mapping(address =\\u003e uint256) public totalERC20DonatedAmount;\\n\\n  // @notice router address of the DEX\\n  IDEXRouter public dexRouter;\\n\\n  constructor(\\n    string memory contractName,\\n    string memory contractVersion,\\n    address _dexRouter,\\n    address _charityAddress\\n  ) EIP712(contractName, contractVersion) {\\n    dexRouter = IDEXRouter(_dexRouter);\\n    charityAddress = _charityAddress;\\n  }\\n\\n  // @notice RewardType\\n  // ETH - reward in Ethers\\n  // ERC20 - reward in ERC20 tokens\\n  enum RewardType {\\n    ETH,\\n    ERC20\\n  }\\n\\n  // @notice Batch will contain multiple tickets\\n  struct Batch {\\n    uint256 batchId;\\n    // issuedTimestamp: the date that the batch was issued\\n    uint256 issuedTimestamp;\\n  }\\n\\n  // @notice Ticket is a proof that you are eligible to claim the rewards\\n  // each Ticket must belong to a batch and must include a valid batch signature as well as a valid ticket signature\\n  struct Ticket {\\n    uint8 rewardType;\\n    // tokenAddress is the reward token that a user will receive if the rewardType is ERC20\\n    address tokenAddress;\\n    uint256 amount;\\n    address claimerAddress;\\n    uint256 ticketId;\\n    Batch batch;\\n    bytes batchProofSignature;\\n    bytes ticketProofSignature;\\n  }\\n\\n  // @notice isTicketClaimed tracks if a ticket has been claimed or not\\n  mapping(uint256 =\\u003e bool) public isTicketClaimed;\\n\\n  // @notice _hashBatch compute the hash of the provided batch\\n  function _hashBatch(Batch calldata batch) private pure returns (bytes32) {\\n    return keccak256(abi.encode(_BATCH_TYPE, batch.batchId, batch.issuedTimestamp));\\n  }\\n\\n  // @notice _hashTicket compute the hash of the provided ticket\\n  function _hashTicket(Ticket calldata ticket) private pure returns (bytes32) {\\n    return keccak256(abi.encode(_TICKET_TYPE, ticket.rewardType, ticket.tokenAddress, ticket.amount, ticket.claimerAddress, ticket.ticketId, keccak256(ticket.batchProofSignature)));\\n  }\\n\\n  // @notice setDexRouter - owner can set the dex router address\\n  function setDexRouter(address router) external onlyOwner {\\n    dexRouter = IDEXRouter(router);\\n  }\\n\\n  // @notice setCharityAddress - owner can set the charityAddress\\n  function setCharityAddress(address address_) external onlyOwner {\\n    charityAddress = address_;\\n  }\\n\\n  // @notice setBatchSignerAddress - set the batch signer address\\n  function setBatchSignerAddress(address signer) external onlyOwner {\\n    batchSigner = signer;\\n  }\\n\\n  // @notice setTicketSignerAddress - set the ticket signer address\\n  function setTicketSignerAddress(address signer) external onlyOwner {\\n    ticketSigner = signer;\\n  }\\n\\n  // @notice setSigners - set batch signer and ticket signer\\n  function setSigners(address _batchSigner, address _ticketSigner) external onlyOwner {\\n    batchSigner = _batchSigner;\\n    ticketSigner = _ticketSigner;\\n  }\\n\\n  /*\\n   * @notice setParams for the contract\\n   * @param _maxTicketsPerBatch The maximum number of tickets per batch\\n   * @param _minCharityDonationPercent The minimum percentage of the reward that a user must donate\\n   * @param _maxCharityDonationPercent The minimum percentage of the reward that a user must donate\\n   * @param _durationToConvertETHToTokensInSeconds Duration in seconds that a user can convert ETH reward to the desired tokens\\n   */\\n  function setParams(\\n    uint256 _maxTicketsPerBatch,\\n    uint256 _minCharityDonationPercent,\\n    uint256 _maxCharityDonationPercent,\\n    uint256 _durationToConvertETHToTokensInSeconds\\n  ) external onlyOwner {\\n    maxTicketsPerBatch = _maxTicketsPerBatch;\\n    minCharityDonationPercent = _minCharityDonationPercent;\\n    maxCharityDonationPercent = _maxCharityDonationPercent;\\n    durationToConvertETHToTokens = _durationToConvertETHToTokensInSeconds;\\n  }\\n\\n  // @notice getBatchIdOfTicket calculate the batchId given ticketId\\n  function getBatchIdOfTicket(uint256 ticketId) private view returns (uint256) {\\n    return ticketId - (ticketId % maxTicketsPerBatch);\\n  }\\n\\n  // @notice _validateDonationPercent validate if the donation percentage of the reward is valid\\n  function _validateDonationPercent(uint256 percent) private view {\\n    require(percent \\u003e= minCharityDonationPercent \\u0026\\u0026 percent \\u003c= maxCharityDonationPercent, \\\"INVALID_CHARITY_DONATION_PERCENT\\\");\\n  }\\n\\n  // @notice _convertETHToTokenAmount calculate the expected token amount if a user decided to convert ETH reward to the desired tokens\\n  function _convertETHToTokenAmount(uint256 amountETH, address tokenAddress) private view returns (uint256) {\\n    address[] memory path = new address[](2);\\n    path[0] = dexRouter.WETH();\\n    path[1] = tokenAddress;\\n    uint256[] memory amounts = dexRouter.getAmountsOut(amountETH, path);\\n    return amounts[1];\\n  }\\n\\n  // @notice _swapTokensForETH swap reward tokens for ETH\\n  function _swapTokensForETH(address tokenAddress, uint256 tokenAmount) internal returns (uint256) {\\n    uint256 balanceBefore = address(this).balance;\\n    address[] memory path = new address[](2);\\n    path[0] = tokenAddress;\\n    path[1] = dexRouter.WETH();\\n\\n    if (IERC20(tokenAddress).allowance(address(this), address(dexRouter)) \\u003c tokenAmount) {\\n      IERC20(tokenAddress).approve(address(dexRouter), type(uint256).max);\\n    }\\n\\n    dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\\n    uint256 amountETH = address(this).balance - balanceBefore;\\n    return amountETH;\\n  }\\n\\n  // @notice _validateTicket validate if a ticket is valid\\n  function _validateTicket(Ticket calldata ticket, RewardType expectedRewardType) private view {\\n    require(!isTicketClaimed[ticket.ticketId], \\\"ALREADY_CLAIMED\\\");\\n    require(RewardType(ticket.rewardType) == expectedRewardType, \\\"INVALID_REWARD_TYPE\\\");\\n    require(_isValidSignature(_hashBatch(ticket.batch), ticket.batchProofSignature, batchSigner), \\\"INVALID_BATCH_SIGNATURE\\\");\\n    require(_isValidSignature(_hashTicket(ticket), ticket.ticketProofSignature, ticketSigner), \\\"INVALID_TICKET_SIGNATURE\\\");\\n    require(ticket.batch.batchId == getBatchIdOfTicket(ticket.ticketId), \\\"MISMATCHED_TICKET_ID\\\");\\n    require(ticket.claimerAddress == msg.sender, \\\"CALLER_ADDRESS_MUST_MATCH_CLAIMER_ADDRESS\\\");\\n  }\\n\\n  /*\\n   * @notice claim ETH reward by providing tickets\\n   * @param tickets The array of ticket struct, any tickets must contain a batchProofSignature and a ticketProofSignature\\n   * @param charityDonationPercent percent of the rewards that the caller want to donate to charity\\n   * @param shouldConvertToToken a user can choose to convert ETH rewards to a desired tokens as long as\\n   */\\n  function claimETH(\\n    Ticket[] calldata tickets,\\n    uint256 charityDonationPercent,\\n    bool shouldConvertToToken,\\n    address tokenAddress\\n  ) external nonReentrant {\\n    require(tickets.length != 0, \\\"NO_TICKET_TO_PROCESS\\\");\\n    _validateDonationPercent(charityDonationPercent);\\n\\n    uint256 totalETHForClaimAmount;\\n    for (uint256 i; i \\u003c tickets.length; i++) {\\n      _validateTicket(tickets[i], RewardType.ETH);\\n      totalETHForClaimAmount += tickets[i].amount;\\n      isTicketClaimed[tickets[i].ticketId] = true;\\n    }\\n\\n    require(totalETHForClaimAmount \\u003e 0, \\\"INVALID_REWARD_AMOUNT\\\");\\n\\n    uint256 charityAmount = (totalETHForClaimAmount * charityDonationPercent) / 100;\\n    _safeTransferETH(charityAddress, charityAmount);\\n    totalETHForClaimAmount -= charityAmount;\\n\\n    uint256 convertDeadline = tickets[0].batch.issuedTimestamp + durationToConvertETHToTokens;\\n    if (shouldConvertToToken \\u0026\\u0026 block.timestamp \\u003c= convertDeadline) {\\n      uint256 tokenAmount = _convertETHToTokenAmount(totalETHForClaimAmount, tokenAddress);\\n      require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount), \\\"FAILED_TO_TRANSFER_TOKENS\\\");\\n      totalERC20ClaimedAmount[tokenAddress] += tokenAmount;\\n    } else {\\n      _safeTransferETH(msg.sender, totalETHForClaimAmount);\\n      totalETHClaimedAmount += totalETHForClaimAmount;\\n    }\\n\\n    totalETHDonatedAmount += charityAmount;\\n  }\\n\\n  /*\\n   * @notice claim ERC20 reward tokens by providing tickets\\n   * @param tickets The array of ticket struct, any tickets must contain a batchProofSignature and a ticketProofSignature\\n   * @param charityDonationPercent percent of the rewards that the caller want to donate to charity\\n   */\\n  function claimERC20(\\n    Ticket[] calldata tickets,\\n    uint256 charityDonationPercent,\\n    bool shouldSwapRewardTokenToETH\\n  ) external nonReentrant {\\n    require(tickets.length != 0, \\\"NO_TICKET_TO_PROCESS\\\");\\n    _validateDonationPercent(charityDonationPercent);\\n\\n    address tokenAddress = tickets[0].tokenAddress;\\n    require(tokenAddress != address(0), \\\"MUST_BE_A_VALID_TOKEN_ADDRESS\\\");\\n\\n    uint256 tokenForClaimAmount;\\n    for (uint256 i; i \\u003c tickets.length; i++) {\\n      _validateTicket(tickets[i], RewardType.ERC20);\\n      require(tickets[i].tokenAddress == tokenAddress, \\\"ALL_TICKETS_MUST_HAVE_SAME_TOKEN_ADDRESS\\\");\\n\\n      tokenForClaimAmount += tickets[i].amount;\\n      isTicketClaimed[tickets[i].ticketId] = true;\\n    }\\n\\n    require(tokenForClaimAmount \\u003e 0, \\\"INVALID_REWARD_AMOUNT\\\");\\n\\n    uint256 charityAmount = (tokenForClaimAmount * charityDonationPercent) / 100;\\n    if (shouldSwapRewardTokenToETH) {\\n      uint256 amountETHForClaim = _swapTokensForETH(tokenAddress, tokenForClaimAmount);\\n      uint256 charityAmountETH = (amountETHForClaim * charityDonationPercent) / 100;\\n      if (charityAmountETH \\u003e 0) {\\n        _safeTransferETH(charityAddress, charityAmountETH);\\n        amountETHForClaim = amountETHForClaim - charityAmountETH;\\n      }\\n\\n      _safeTransferETH(msg.sender, amountETHForClaim);\\n      tokenForClaimAmount -= charityAmount;\\n    } else {\\n      require(IERC20(tokenAddress).transfer(charityAddress, charityAmount), \\\"FAILED_TO_TRANSFER_TOKENS\\\");\\n      tokenForClaimAmount -= charityAmount;\\n      require(IERC20(tokenAddress).transfer(msg.sender, tokenForClaimAmount), \\\"FAILED_TO_TRANSFER_TOKENS\\\");\\n    }\\n\\n    totalERC20ClaimedAmount[tokenAddress] += tokenForClaimAmount;\\n    totalERC20DonatedAmount[tokenAddress] += charityAmount;\\n  }\\n\\n  // @notice _safeTransferETH to a destination address\\n  function _safeTransferETH(address to, uint256 value) internal {\\n    require(address(this).balance \\u003e= value, \\\"INSUFFICIENT_BALANCE\\\");\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, \\\"SafeTransferETH: ETH transfer failed\\\");\\n  }\\n\\n  // @notice withdraw all ETH amount in the contract\\n  function withdraw() external onlyOwner {\\n    payable(msg.sender).transfer(address(this).balance);\\n  }\\n\\n  // @notice withdraw all stuck ERC20 tokens in the contract\\n  function withdrawErc20(IERC20 token) external onlyOwner {\\n    token.transfer(msg.sender, token.balanceOf(address(this)));\\n  }\\n\\n  receive() external payable {}\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature \\u0027s\\u0027 value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature \\u0027v\\u0027 value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs \\u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) \\u003e\\u003e 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 \\u003c s \\u003c secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) \\u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 \\u0026\\u0026 v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"},\"EIP712.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.13;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\ncontract EIP712 {\\n  using ECDSA for bytes32;\\n\\n  // Domain Separator is the EIP-712 defined structure that defines what contract\\n  // and chain these signatures can be used for.  This ensures people can\\u0027t take\\n  // a signature used to mint on one contract and use it for another, or a signature\\n  // from testnet to replay on mainnet.\\n  // It has to be created in the constructor so we can dynamically grab the chainId.\\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#definition-of-domainseparator\\n  bytes32 public DOMAIN_SEPARATOR;\\n\\n  // The typehash for the data type specified in the structured data\\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale-for-typehash\\n  // This should match whats in the client side whitelist signing code\\n  // https://github.com/msfeldstein/EIP712-whitelisting/blob/main/test/signWhitelist.ts#L22\\n\\n  constructor(string memory name, string memory version) {\\n    // This should match whats in the client side whitelist signing code\\n    // https://github.com/msfeldstein/EIP712-whitelisting/blob/main/test/signWhitelist.ts#L12\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n        // This should match the domain you set in your client side signing.\\n        keccak256(bytes(name)),\\n        keccak256(bytes(version)),\\n        block.chainid,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function _isValidSignature(\\n    bytes32 structHash,\\n    bytes calldata signature,\\n    address expectedSigner\\n  ) internal view returns (bool) {\\n    if (expectedSigner == address(0)) {\\n      return false;\\n    }\\n\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, structHash));\\n    address recoveredAddress = digest.recover(signature);\\n    return recoveredAddress == expectedSigner;\\n  }\\n}\\n\"},\"IDEXRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IDEXRouter {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_dexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charityAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"rewardType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuedTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ClaimRewards.Batch\",\"name\":\"batch\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"batchProofSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ticketProofSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct ClaimRewards.Ticket[]\",\"name\":\"tickets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"charityDonationPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldSwapRewardTokenToETH\",\"type\":\"bool\"}],\"name\":\"claimERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"rewardType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuedTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ClaimRewards.Batch\",\"name\":\"batch\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"batchProofSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ticketProofSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct ClaimRewards.Ticket[]\",\"name\":\"tickets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"charityDonationPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldConvertToToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationToConvertETHToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isTicketClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCharityDonationPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTicketsPerBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCharityDonationPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setBatchSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setCharityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setDexRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTicketsPerBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCharityDonationPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCharityDonationPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationToConvertETHToTokensInSeconds\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_batchSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticketSigner\",\"type\":\"address\"}],\"name\":\"setSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setTicketSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalERC20ClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalERC20DonatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHDonatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ClaimRewards", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000554c7545c1dd102dbda068fbec464321e606879f000000000000000000000000000000000000000000000000000000000000001157474d4920436c61696d526577617264730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005302e302e31000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://29e2b2831b0f00ae2004f4582268e62d8cb3e2fe2dec902f6880eebab70277f0"}]}