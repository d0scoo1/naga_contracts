{"status": "1", "message": "OK", "result": [{"SourceCode": "// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/adapters/UniswapAdapter.sol\n// SPDX-License-Identifier: MIT AND GPL-3.0-or-later\npragma solidity =0.8.11 >=0.8.0 <0.9.0 >=0.8.1 <0.9.0;\npragma experimental ABIEncoderV2;\n\n////// lib/openzeppelin-contracts/contracts/utils/Context.sol\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"../utils/Context.sol\"; */\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n////// lib/openzeppelin-contracts/contracts/utils/Address.sol\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/* pragma solidity ^0.8.1; */\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"../IERC20.sol\"; */\n/* import \"../../../utils/Address.sol\"; */\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n////// src/interfaces/IUniswapAdapterCaller.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Uniswap Adapter Caller Interface\n * @author bayu (github.com/pyk)\n * @notice Contract that interact with Uniswap Adapter should implement this interface.\n */\ninterface IUniswapAdapterCaller {\n    /**\n     * @notice Function that will be executed by Uniswap Adapter to finish the flash swap.\n     *         The caller will receive _amountOut of the specified tokenOut.\n     * @param _wethAmount The amount of WETH that the caller need to send back to the Uniswap Adapter\n     * @param _amountOut The amount of of tokenOut transfered to the caller.\n     * @param _data Data passed by the caller.\n     */\n    function onFlashSwapWETHForExactTokens(uint256 _wethAmount, uint256 _amountOut, bytes calldata _data) external;\n}\n\n////// src/interfaces/IUniswapV2Pair.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Uniswap V2 Pair Interface\n * @author bayu (github.com/pyk)\n */\ninterface IUniswapV2Pair {\n    function token1() external view returns (address);\n    function token0() external view returns (address);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n}\n\n////// src/interfaces/IUniswapV3Pool.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Uniswap V3 Pool Interface\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n */\ninterface IUniswapV3Pool {\n    /// @notice Docs: https://docs.uniswap.org/protocol/reference/core/UniswapV3Pool#swap\n    function swap(address _recipient, bool _zeroForOne, int256 _amountSpecified, uint160 _sqrtPriceLimitX96, bytes memory _data) external returns (int256 amount0, int256 amount1);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function fee() external view returns (uint24);\n}\n\n////// src/interfaces/IUniswapAdapter.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { IERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\n\n/* import { IUniswapV2Pair } from \"../interfaces/IUniswapV2Pair.sol\"; */\n/* import { IUniswapV3Pool } from \"../interfaces/IUniswapV3Pool.sol\"; */\n/* import { IUniswapAdapterCaller } from \"../interfaces/IUniswapAdapterCaller.sol\"; */\n\n/**\n * @title Uniswap Adapter\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n * @notice Utility contract to interact with Uniswap V2 & V3\n */\ninterface IUniswapAdapter {\n    /// \u2588\u2588\u2588 Types \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice The supported Uniswap version\n     */\n    enum UniswapVersion {\n        UniswapV2,\n        UniswapV3\n    }\n\n    /**\n     * @notice Liquidity data for specified token\n     * @param version The address of Rise Token\n     * @param pair The Uniswap V2 pair address\n     * @param pool The Uniswap V3 pool address\n     * @param router The Uniswap router address\n     */\n    struct LiquidityData {\n        UniswapVersion version;\n        IUniswapV2Pair pair;\n        IUniswapV3Pool pool;\n        address router;\n    }\n\n    /**\n     * @notice Parameters to do flash swap WETH->tokenOut\n     * @param tokenOut The output token\n     * @param caller The flash swap caller\n     * @param liquidityData Liquidi\n     * @param amountOut The amount of tokenOut that will be received by\n     *        this contract\n     * @param wethAmount The amount of WETH required to finish the flash swap\n     */\n    struct FlashSwapWETHForExactTokensParams {\n        IERC20 tokenOut;\n        IUniswapAdapterCaller caller;\n        LiquidityData liquidityData;\n        uint256 amountOut;\n        uint256 wethAmount;\n    }\n\n    /// @notice Flash swap types\n    enum FlashSwapType {\n        FlashSwapWETHForExactTokens\n    }\n\n\n    /// \u2588\u2588\u2588 Events \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Event emitted when token is configured\n     * @param liquidityData The liquidity data of the token\n     */\n    event TokenConfigured(LiquidityData liquidityData);\n\n    /**\n     * @notice Event emitted when flash swap succeeded\n     * @param params The flash swap params\n     */\n    event FlashSwapped(FlashSwapWETHForExactTokensParams params);\n\n\n    /// \u2588\u2588\u2588 Errors \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @notice Error is raised when owner use invalid uniswap version\n    error InvalidUniswapVersion(uint8 version);\n\n    /// @notice Error is raised when invalid amount\n    error InvalidAmount(uint256 amount);\n\n    /// @notice Error is raised when token is not configured\n    error TokenNotConfigured(address token);\n\n    /// @notice Error is raised when the callback is called by unkown pair/pool\n    error CallerNotAuthorized();\n\n    /// @notice Error is raised when the caller not repay the token\n    error CallerNotRepay();\n\n    /// @notice Error is raised when this contract receive invalid amount when flashswap\n    error FlashSwapReceivedAmountInvalid(uint256 expected, uint256 got);\n\n\n    /// \u2588\u2588\u2588 Owner actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Configure the token\n     * @param _token The ERC20 token\n     * @param _version The Uniswap version (2 or 3)\n     * @param _pairOrPool The contract address of the TOKEN/ETH pair or pool\n     * @param _router The Uniswap V2 or V3 router address\n     */\n    function configure(\n        address _token,\n        UniswapVersion _version,\n        address _pairOrPool,\n        address _router\n    ) external;\n\n\n    /// \u2588\u2588\u2588 Read-only functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Returns true if token is configured\n     * @param _token The token address\n     */\n    function isConfigured(address _token) external view returns (bool);\n\n    /// \u2588\u2588\u2588 Adapters \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Borrow exact amount of tokenOut and repay it with WETH.\n     *         The Uniswap Adapter will call msg.sender#onFlashSwapWETHForExactTokens.\n     * @param _tokenOut The address of ERC20 that swapped\n     * @param _amountOut The exact amount of tokenOut that will be received by the caller\n     */\n    function flashSwapWETHForExactTokens(\n        address _tokenOut,\n        uint256 _amountOut,\n        bytes memory _data\n    ) external;\n\n    /**\n     * @notice Swaps an exact amount of input tokenIn for as many WETH as possible\n     * @param _tokenIn tokenIn address\n     * @param _amountIn The amount of tokenIn\n     * @param _amountOutMin The minimum amount of WETH to be received\n     * @return _amountOut The WETH amount received\n     */\n    function swapExactTokensForWETH(\n        address _tokenIn,\n        uint256 _amountIn,\n        uint256 _amountOutMin\n    ) external returns (uint256 _amountOut);\n\n    /**\n     * @notice Swaps an exact amount of WETH for as few tokenIn as possible.\n     * @param _tokenIn tokenIn address\n     * @param _wethAmount The amount of tokenIn\n     * @param _amountInMax The minimum amount of WETH to be received\n     * @return _amountIn The WETH amount received\n     */\n    function swapTokensForExactWETH(\n        address _tokenIn,\n        uint256 _wethAmount,\n        uint256 _amountInMax\n    ) external returns (uint256 _amountIn);\n\n    /**\n     * @notice Swaps an exact amount of WETH for tokenOut\n     * @param _tokenOut tokenOut address\n     * @param _wethAmount The amount of WETH\n     * @param _amountOutMin The minimum amount of WETH to be received\n     * @return _amountOut The WETH amount received\n     */\n    function swapExactWETHForTokens(\n        address _tokenOut,\n        uint256 _wethAmount,\n        uint256 _amountOutMin\n    ) external returns (uint256 _amountOut);\n\n}\n\n////// src/interfaces/IUniswapV2Router02.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Uniswap V2 Router Interface\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n */\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint[] memory amounts);\n    function getAmountsIn(uint256 amountOut, address[] memory path) external view returns (uint256[] memory amounts);\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\n////// src/interfaces/IUniswapV3SwapRouter.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Uniswap V3 Swap Router Interface\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n */\n\ninterface IUniswapV3SwapRouter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n    function exactInputSingle(ExactInputSingleParams memory params) external returns (uint256 amountOut);\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n    function exactOutputSingle(ExactOutputSingleParams memory params) external returns (uint256 amountIn);\n}\n\n////// src/interfaces/IWETH9.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { IERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\n\n/**\n * @title WETH Interface\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n */\ninterface IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external;\n}\n\n////// src/adapters/UniswapAdapter.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { Ownable } from \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\"; */\n/* import { IERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\n/* import { SafeERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\"; */\n\n/* import { IUniswapAdapter } from \"../interfaces/IUniswapAdapter.sol\"; */\n/* import { IUniswapV2Router02 } from \"../interfaces/IUniswapV2Router02.sol\"; */\n/* import { IUniswapV2Pair } from \"../interfaces/IUniswapV2Pair.sol\"; */\n/* import { IUniswapV3Pool } from \"../interfaces/IUniswapV3Pool.sol\"; */\n/* import { IUniswapV3SwapRouter } from \"../interfaces/IUniswapV3SwapRouter.sol\"; */\n/* import { IUniswapAdapterCaller } from \"../interfaces/IUniswapAdapterCaller.sol\"; */\n\n/* import { IWETH9 } from \"../interfaces/IWETH9.sol\"; */\n\n/**\n * @title Uniswap Adapter\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n * @notice Utility contract to interact with Uniswap V2 & V3\n */\ncontract UniswapAdapter is IUniswapAdapter, Ownable {\n    /// \u2588\u2588\u2588 Libraries \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IWETH9;\n\n    /// \u2588\u2588\u2588 Storages \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @notice WETH address\n    IWETH9 public weth;\n\n    /// @notice Mapping token to their liquidity metadata\n    mapping(address => LiquidityData) public liquidities;\n\n    /// @notice Whitelisted pair/pool that can call the callback\n    mapping(address => bool) private isValidCallbackCaller;\n\n\n    /// \u2588\u2588\u2588 Constuctors \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    constructor(address _weth) {\n        weth = IWETH9(_weth);\n    }\n\n\n    /// \u2588\u2588\u2588 Owner actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IUniswapAdapter\n    function configure(address _token, UniswapVersion _version, address _pairOrPool, address _router) external onlyOwner {\n        isValidCallbackCaller[_pairOrPool] = true;\n        liquidities[_token] = LiquidityData({\n            version: _version,\n            pool: IUniswapV3Pool(_pairOrPool),\n            pair: IUniswapV2Pair(_pairOrPool),\n            router: _router\n        });\n        emit TokenConfigured(liquidities[_token]);\n    }\n\n\n    /// \u2588\u2588\u2588 Internal functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @notice Executed when flashSwapWETHForExactTokens is triggered\n    function onFlashSwapWETHForExactTokens(FlashSwapWETHForExactTokensParams memory _params, bytes memory _data) internal {\n        // Transfer the tokenOut to caller\n        _params.tokenOut.safeTransfer(address(_params.caller), _params.amountOut);\n\n        // Execute the callback\n        uint256 prevBalance = weth.balanceOf(address(this));\n        _params.caller.onFlashSwapWETHForExactTokens(_params.wethAmount, _params.amountOut, _data);\n        uint256 balance = weth.balanceOf(address(this));\n\n        // Check the balance\n        if (balance < prevBalance + _params.wethAmount) revert CallerNotRepay();\n\n        // Transfer the WETH to the Uniswap V2 pair or pool\n        if (_params.liquidityData.version == UniswapVersion.UniswapV2) {\n            weth.safeTransfer(address(_params.liquidityData.pair), _params.wethAmount);\n        } else {\n            weth.safeTransfer(address(_params.liquidityData.pool), _params.wethAmount);\n        }\n\n        emit FlashSwapped(_params);\n    }\n\n\n    /// \u2588\u2588\u2588 Callbacks \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    function uniswapV2Call(address _sender, uint256 _amount0, uint256 _amount1, bytes memory _data) external {\n        /// \u2588\u2588\u2588 Checks\n\n        // Check caller\n        if (!isValidCallbackCaller[msg.sender]) revert CallerNotAuthorized();\n        if (_sender != address(this)) revert CallerNotAuthorized();\n\n        /// \u2588\u2588\u2588 Interactions\n\n        // Get the data\n        (FlashSwapType flashSwapType, bytes memory data) = abi.decode(_data, (FlashSwapType, bytes));\n\n        // Continue execute the function based on the flash swap type\n        if (flashSwapType == FlashSwapType.FlashSwapWETHForExactTokens) {\n            (FlashSwapWETHForExactTokensParams memory params, bytes memory callData) = abi.decode(data, (FlashSwapWETHForExactTokensParams,bytes));\n            // Check the amount out\n            uint256 amountOut = _amount0 == 0 ? _amount1 : _amount0;\n            if (params.amountOut != amountOut) revert FlashSwapReceivedAmountInvalid(params.amountOut, amountOut);\n\n            // Calculate the WETH amount\n            address[] memory path = new address[](2);\n            path[0] = address(weth);\n            path[1] = address(params.tokenOut);\n            params.wethAmount = IUniswapV2Router02(params.liquidityData.router).getAmountsIn(params.amountOut, path)[0];\n\n            onFlashSwapWETHForExactTokens(params, callData);\n            return;\n        }\n    }\n\n    function uniswapV3SwapCallback(int256 _amount0Delta, int256 _amount1Delta, bytes memory _data) external {\n        /// \u2588\u2588\u2588 Checks\n\n        // Check caller\n        if (!isValidCallbackCaller[msg.sender]) revert CallerNotAuthorized();\n\n        /// \u2588\u2588\u2588 Interactions\n\n        // Get the data\n        (FlashSwapType flashSwapType, bytes memory data) = abi.decode(_data, (FlashSwapType, bytes));\n\n        // Continue execute the function based on the flash swap type\n        if (flashSwapType == FlashSwapType.FlashSwapWETHForExactTokens) {\n            (FlashSwapWETHForExactTokensParams memory params, bytes memory callData) = abi.decode(data, (FlashSwapWETHForExactTokensParams,bytes));\n\n            // if amount negative then it must be the amountOut, otherwise it's weth amount\n            uint256 amountOut = _amount0Delta < 0 ?  uint256(-1 * _amount0Delta) : uint256(-1 * _amount1Delta);\n            params.wethAmount = _amount0Delta > 0 ? uint256(_amount0Delta) : uint256(_amount1Delta);\n\n            // Check the amount out\n            if (params.amountOut != amountOut) revert FlashSwapReceivedAmountInvalid(params.amountOut, amountOut);\n\n            onFlashSwapWETHForExactTokens(params, callData);\n            return;\n        }\n    }\n\n\n    /// \u2588\u2588\u2588 Read-only functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IUniswapAdapter\n    function isConfigured(address _token) public view returns (bool) {\n        if (liquidities[_token].router == address(0)) return false;\n        return true;\n    }\n\n    /// \u2588\u2588\u2588 Adapters \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IUniswapAdapter\n    function flashSwapWETHForExactTokens(address _tokenOut, uint256 _amountOut, bytes memory _data) external {\n        /// \u2588\u2588\u2588 Checks\n        if (_amountOut == 0) revert InvalidAmount(0);\n        if (!isConfigured(_tokenOut)) revert TokenNotConfigured(_tokenOut);\n\n        // Check the metadata\n        LiquidityData memory metadata = liquidities[_tokenOut];\n\n        /// \u2588\u2588\u2588 Interactions\n\n        // Initialize the params\n        FlashSwapWETHForExactTokensParams memory params = FlashSwapWETHForExactTokensParams({\n            tokenOut: IERC20(_tokenOut),\n            amountOut: _amountOut,\n            caller: IUniswapAdapterCaller(msg.sender),\n            liquidityData: metadata,\n            wethAmount: 0 // Initialize as zero; It will be updated in the callback\n        });\n        bytes memory data = abi.encode(FlashSwapType.FlashSwapWETHForExactTokens, abi.encode(params, _data));\n\n        // Flash swap Uniswap V2; The pair address will call uniswapV2Callback function\n        if (metadata.version == UniswapVersion.UniswapV2) {\n            // Get amountOut for token and weth\n            uint256 amount0Out = _tokenOut == metadata.pair.token0() ? _amountOut : 0;\n            uint256 amount1Out = _tokenOut == metadata.pair.token1() ? _amountOut : 0;\n\n            // Do the flash swap\n            metadata.pair.swap(amount0Out, amount1Out, address(this), data);\n            return;\n        }\n\n        if (metadata.version == UniswapVersion.UniswapV3) {\n            // zeroForOne (true: token0 -> token1) (false: token1 -> token0)\n            bool zeroForOne = _tokenOut == metadata.pool.token1() ? true : false;\n\n            // amountSpecified (Exact input: positive) (Exact output: negative)\n            int256 amountSpecified = -1 * int256(_amountOut);\n            uint160 sqrtPriceLimitX96 = (zeroForOne ? 4295128740 : 1461446703485210103287273052203988822378723970341);\n\n            // Perform swap\n            metadata.pool.swap(address(this), zeroForOne, amountSpecified, sqrtPriceLimitX96, data);\n            return;\n        }\n    }\n\n    /// @inheritdoc IUniswapAdapter\n    function swapExactTokensForWETH(address _tokenIn, uint256 _amountIn, uint256 _amountOutMin) external returns (uint256 _amountOut) {\n        /// \u2588\u2588\u2588 Checks\n        if (!isConfigured(_tokenIn)) revert TokenNotConfigured(_tokenIn);\n\n        /// \u2588\u2588\u2588 Interactions\n        LiquidityData memory metadata = liquidities[_tokenIn];\n        IERC20(_tokenIn).safeTransferFrom(msg.sender, address(this), _amountIn);\n        IERC20(_tokenIn).safeIncreaseAllowance(metadata.router, _amountIn);\n\n        if (metadata.version == UniswapVersion.UniswapV2) {\n            // Do the swap\n            address[] memory path = new address[](2);\n            path[0] = _tokenIn;\n            path[1] = address(weth);\n            _amountOut = IUniswapV2Router02(metadata.router).swapExactTokensForTokens(_amountIn, _amountOutMin, path, msg.sender, block.timestamp)[1];\n        }\n\n        if (metadata.version == UniswapVersion.UniswapV3) {\n            // Do the swap\n            IUniswapV3SwapRouter.ExactInputSingleParams memory params = IUniswapV3SwapRouter.ExactInputSingleParams({\n                tokenIn: _tokenIn,\n                tokenOut: address(weth),\n                fee: metadata.pool.fee(),\n                recipient: msg.sender,\n                deadline: block.timestamp,\n                amountIn: _amountIn,\n                amountOutMinimum: _amountOutMin,\n                sqrtPriceLimitX96: 0\n            });\n            _amountOut = IUniswapV3SwapRouter(metadata.router).exactInputSingle(params);\n        }\n\n        return _amountOut;\n    }\n\n    /// @inheritdoc IUniswapAdapter\n    function swapTokensForExactWETH(address _tokenIn, uint256 _wethAmount, uint256 _amountInMax) external returns (uint256 _amountIn) {\n        /// \u2588\u2588\u2588 Checks\n        if (!isConfigured(_tokenIn)) revert TokenNotConfigured(_tokenIn);\n\n        /// \u2588\u2588\u2588 Interactions\n        LiquidityData memory metadata = liquidities[_tokenIn];\n        IERC20(_tokenIn).safeTransferFrom(msg.sender, address(this), _amountInMax);\n        IERC20(_tokenIn).safeIncreaseAllowance(metadata.router, _amountInMax);\n\n        if (metadata.version == UniswapVersion.UniswapV2) {\n            // Do the swap\n            address[] memory path = new address[](2);\n            path[0] = _tokenIn;\n            path[1] = address(weth);\n            _amountIn = IUniswapV2Router02(metadata.router).swapTokensForExactTokens(_wethAmount, _amountInMax, path, msg.sender, block.timestamp)[1];\n        }\n\n        if (metadata.version == UniswapVersion.UniswapV3) {\n            // Do the swap\n            IUniswapV3SwapRouter.ExactOutputSingleParams memory params = IUniswapV3SwapRouter.ExactOutputSingleParams({\n                tokenIn: _tokenIn,\n                tokenOut: address(weth),\n                fee: metadata.pool.fee(),\n                recipient: msg.sender,\n                deadline: block.timestamp,\n                amountOut: _wethAmount,\n                amountInMaximum: _amountInMax,\n                sqrtPriceLimitX96: 0\n            });\n            _amountIn = IUniswapV3SwapRouter(metadata.router).exactOutputSingle(params);\n        }\n\n        if (_amountInMax > _amountIn) {\n            // Transfer back excess token\n            IERC20(_tokenIn).safeTransfer(msg.sender, _amountInMax - _amountIn);\n        }\n        return _amountIn;\n    }\n\n    /// @inheritdoc IUniswapAdapter\n    function swapExactWETHForTokens(address _tokenOut, uint256 _wethAmount, uint256 _amountOutMin) external returns (uint256 _amountOut) {\n        /// \u2588\u2588\u2588 Checks\n        if (!isConfigured(_tokenOut)) revert TokenNotConfigured(_tokenOut);\n\n        /// \u2588\u2588\u2588 Interactions\n        LiquidityData memory metadata = liquidities[_tokenOut];\n        IERC20(address(weth)).safeTransferFrom(msg.sender, address(this), _wethAmount);\n        weth.safeIncreaseAllowance(metadata.router, _wethAmount);\n\n        if (metadata.version == UniswapVersion.UniswapV2) {\n            // Do the swap\n            address[] memory path = new address[](2);\n            path[0] = address(weth);\n            path[1] = _tokenOut;\n            _amountOut = IUniswapV2Router02(metadata.router).swapExactTokensForTokens(_wethAmount, _amountOutMin, path, msg.sender, block.timestamp)[1];\n        }\n\n        if (metadata.version == UniswapVersion.UniswapV3) {\n            // Do the swap\n            IUniswapV3SwapRouter.ExactInputSingleParams memory params = IUniswapV3SwapRouter.ExactInputSingleParams({\n                tokenIn: address(weth),\n                tokenOut: _tokenOut,\n                fee: metadata.pool.fee(),\n                recipient: msg.sender,\n                deadline: block.timestamp,\n                amountIn: _wethAmount,\n                amountOutMinimum: _amountOutMin,\n                sqrtPriceLimitX96: 0\n            });\n            _amountOut = IUniswapV3SwapRouter(metadata.router).exactInputSingle(params);\n        }\n\n        return _amountOut;\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotRepay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"}],\"name\":\"FlashSwapReceivedAmountInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"InvalidUniswapVersion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotConfigured\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapAdapterCaller\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum IUniswapAdapter.UniswapVersion\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"internalType\":\"struct IUniswapAdapter.LiquidityData\",\"name\":\"liquidityData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IUniswapAdapter.FlashSwapWETHForExactTokensParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"FlashSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"enum IUniswapAdapter.UniswapVersion\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IUniswapAdapter.LiquidityData\",\"name\":\"liquidityData\",\"type\":\"tuple\"}],\"name\":\"TokenConfigured\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"enum IUniswapAdapter.UniswapVersion\",\"name\":\"_version\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_pairOrPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"flashSwapWETHForExactTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isConfigured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidities\",\"outputs\":[{\"internalType\":\"enum IUniswapAdapter.UniswapVersion\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapExactWETHForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UniswapAdapter", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}