{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/main/AlphaStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"./libraries/SafeERC20.sol\\\";\\r\\nimport \\\"../utils/Pausable.sol\\\";\\r\\nimport \\\"./libraries/Math.sol\\\";\\r\\nimport \\\"./libraries/Data.sol\\\";\\r\\nimport \\\"./AdminInterface.sol\\\";\\r\\nimport \\\"./AlphaToken.sol\\\";\\r\\nimport \\\"./DepositNFT.sol\\\";\\r\\nimport \\\"./WithdrawalNFT.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AlphaStrategy \\r\\n * @dev Implementation of AlphaStrategy \\r\\n */\\r\\n\\r\\ncontract AlphaStrategy is Pausable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Math for uint256;\\r\\n\\r\\n    // Decimal factors\\r\\n    uint256 public AMOUNT_SCALE_DECIMALS = 1; // for stable token \\r\\n    uint256 public COEFF_SCALE_DECIMALS_F;  // for fees\\r\\n    uint256 public COEFF_SCALE_DECIMALS_P; // for ALPHA price\\r\\n    \\r\\n    // Maximum allowed deposit/withdraw amount\\r\\n    uint256 public MAX_AMOUNT_DEPOSIT = 1000000 * 1e18;\\r\\n    uint256 public MAX_AMOUNT_WITHDRAW = 1000000 * 1e18;\\r\\n\\r\\n    // Deposit fee rate \\r\\n    uint256 public  DEPOSIT_FEE_RATE;\\r\\n\\r\\n    // Alpha prices\\r\\n    uint256 public ALPHA_PRICE;\\r\\n    uint256 public ALPHA_PRICE_WAVG;\\r\\n \\r\\n    // Event variables\\r\\n    uint public netDepositInd;\\r\\n    uint256 public netAmountEvent;\\r\\n    uint256 public maxDepositAmount;\\r\\n    uint256 public maxWithdrawAmount;\\r\\n    uint256 public withdrawAmountTotal;\\r\\n    uint256 public depositAmountTotal;\\r\\n    uint256 public TIME_WITHDRAW_MANAGER = 0;\\r\\n     \\r\\n    // ALPHA token data \\r\\n    uint256 public totalSupply;\\r\\n   \\r\\n   // NFT data \\r\\n    uint256 tokenIdDeposit;\\r\\n    uint256 tokenIdWithdraw;\\r\\n\\r\\n   // Other variables for Alpha strategy  \\r\\n    bool public CAN_CANCEL = false; \\r\\n    address public treasury;\\r\\n    mapping(address => uint256) public acceptedWithdrawPerAddress;\\r\\n    \\r\\n    //Contracts\\r\\n    AdminInterface public admin;\\r\\n    IERC20 public stableToken;\\r\\n    AlphaToken public alphaToken;\\r\\n    DepositNFT public depositNFT;\\r\\n    WithdrawalNFT public withdrawalNFT;\\r\\n    constructor(address _admin, address _stableTokenAddress, address _alphaToken,\\r\\n        address _depositNFTAdress, address _withdrawalNFTAdress) {\\r\\n        require(\\r\\n            _admin != address(0),\\r\\n            \\\"Formation.Fi: admin address is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _stableTokenAddress != address(0),\\r\\n            \\\"Formation.Fi: Stable token address is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n           _alphaToken != address(0),\\r\\n            \\\"Formation.Fi: ALPHA token address is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n           _depositNFTAdress != address(0),\\r\\n            \\\"Formation.Fi: withdrawal NFT address is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _withdrawalNFTAdress != address(0),\\r\\n            \\\"Formation.Fi: withdrawal NFT address is the zero address\\\"\\r\\n        );\\r\\n        \\r\\n        admin = AdminInterface(_admin);\\r\\n        stableToken = IERC20(_stableTokenAddress);\\r\\n        alphaToken = AlphaToken(_alphaToken);\\r\\n        depositNFT = DepositNFT(_depositNFTAdress);\\r\\n        withdrawalNFT = WithdrawalNFT(_withdrawalNFTAdress);\\r\\n        uint8 _stableTokenDecimals = ERC20(_stableTokenAddress).decimals();\\r\\n        if (_stableTokenDecimals == 6) {\\r\\n           AMOUNT_SCALE_DECIMALS = 1e12;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    // Modifiers\\r\\n    \\r\\n    modifier onlyManager() {\\r\\n        address _manager = admin.manager();\\r\\n        require(msg.sender == _manager, \\\"Formation.Fi: Caller is not the manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canCancel() {\\r\\n        bool  _CAN_CANCEL = admin.CAN_CANCEL();\\r\\n        require( _CAN_CANCEL == true, \\\"Formation.Fi: Cancel feature is not available\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Getter functions.\\r\\n    \\r\\n    function getTVL() public view returns (uint256) {\\r\\n        return (admin.ALPHA_PRICE() * alphaToken.totalSupply()) \\r\\n        / admin.COEFF_SCALE_DECIMALS_P();\\r\\n    }\\r\\n\\r\\n    // Setter functions\\r\\n    function set_MAX_AMOUNT_DEPOSIT(uint256 _MAX_AMOUNT_DEPOSIT) external \\r\\n         onlyManager {\\r\\n         MAX_AMOUNT_DEPOSIT = _MAX_AMOUNT_DEPOSIT;\\r\\n\\r\\n    }\\r\\n    function set_MAX_AMOUNT_WITHDRAW(uint256 _MAX_AMOUNT_WITHDRAW) external \\r\\n      onlyManager{\\r\\n         MAX_AMOUNT_WITHDRAW = _MAX_AMOUNT_WITHDRAW;      \\r\\n    }\\r\\n    function updateAdminData() internal {\\r\\n      COEFF_SCALE_DECIMALS_F = admin.COEFF_SCALE_DECIMALS_F();\\r\\n      COEFF_SCALE_DECIMALS_P= admin.COEFF_SCALE_DECIMALS_P(); \\r\\n      DEPOSIT_FEE_RATE = admin.DEPOSIT_FEE_RATE();\\r\\n      ALPHA_PRICE = admin.ALPHA_PRICE();\\r\\n      ALPHA_PRICE_WAVG = admin.ALPHA_PRICE_WAVG();\\r\\n      totalSupply = alphaToken.totalSupply();\\r\\n      treasury = admin.treasury();\\r\\n    }\\r\\n    \\r\\n    // Calculate rebalancing Event parameters \\r\\n    function calculateNetDepositInd() public onlyManager {\\r\\n        updateAdminData();\\r\\n        netDepositInd = admin.calculateNetDepositInd(depositAmountTotal, withdrawAmountTotal);\\r\\n    }\\r\\n    function calculateNetAmountEvent() public onlyManager {\\r\\n        netAmountEvent = admin.calculateNetAmountEvent(depositAmountTotal,  withdrawAmountTotal,\\r\\n        MAX_AMOUNT_DEPOSIT,  MAX_AMOUNT_WITHDRAW);\\r\\n    }\\r\\n    function calculateMaxDepositAmount( ) external \\r\\n        whenNotPaused onlyManager {\\r\\n        if (netDepositInd == 1) {\\r\\n            maxDepositAmount = (netAmountEvent + ((withdrawAmountTotal * \\r\\n            ALPHA_PRICE) / COEFF_SCALE_DECIMALS_P));\\r\\n        }\\r\\n        else {\\r\\n            maxDepositAmount = Math.min(depositAmountTotal, MAX_AMOUNT_DEPOSIT);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function calculateMaxWithdrawAmount( ) external \\r\\n        whenNotPaused onlyManager\\r\\n        {\\r\\n        maxWithdrawAmount = ((netAmountEvent + depositAmountTotal) \\r\\n          * COEFF_SCALE_DECIMALS_P) /( ALPHA_PRICE * withdrawAmountTotal);\\r\\n    }\\r\\n\\r\\n    function calculateAcceptedWithdrawRequests(address[] memory _users) \\r\\n        internal {\\r\\n        require (_users.length > 0, \\\"Formation.Fi: no users provided\\\");\\r\\n        uint256 _amountLP;\\r\\n        Data.State _state;\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            require(\\r\\n            _users[i]!= address(0),\\r\\n            \\\"Formation.Fi: user address is the zero address\\\"\\r\\n            );\\r\\n           ( _state , _amountLP, )= withdrawalNFT.pendingWithdrawPerAddress(_users[i]);\\r\\n            if (_state != Data.State.PENDING) {\\r\\n                continue;\\r\\n            }\\r\\n        _amountLP = Math.min((maxWithdrawAmount * _amountLP), _amountLP); \\r\\n        acceptedWithdrawPerAddress[_users[i]] = _amountLP;\\r\\n        }   \\r\\n    }\\r\\n\\r\\n    // Validate users deposit requests \\r\\n    function finalizeDeposits( address[] memory _users) external \\r\\n        whenNotPaused onlyManager {\\r\\n        uint256 _amountStable;\\r\\n        uint256 _amountStableTotal = 0;\\r\\n        uint256 _depositAlpha;\\r\\n        uint256 _depositAlphaTotal = 0;\\r\\n        uint256 _feeStable;\\r\\n        uint256 _feeStableTotal = 0;\\r\\n        uint256 _tokenIdDeposit;\\r\\n        Data.State _state;\\r\\n        require (_users.length > 0, \\\"Formation.Fi: no users provided \\\");\\r\\n        \\r\\n        for (uint256 i = 0; i < _users.length  ; i++) {\\r\\n            ( _state , _amountStable, )= depositNFT.pendingDepositPerAddress(_users[i]);\\r\\n           \\r\\n            if (_state != Data.State.PENDING) {\\r\\n                continue;\\r\\n              }\\r\\n            if (maxDepositAmount <= _amountStableTotal) {\\r\\n                break;\\r\\n             }\\r\\n             _tokenIdDeposit = depositNFT.getTokenId(_users[i]);\\r\\n             _amountStable = Math.min(maxDepositAmount  - _amountStableTotal ,  _amountStable);\\r\\n             _feeStable =  (_amountStable * DEPOSIT_FEE_RATE ) /\\r\\n              COEFF_SCALE_DECIMALS_F;\\r\\n             depositAmountTotal =  depositAmountTotal - _amountStable;\\r\\n             _feeStableTotal = _feeStableTotal + _feeStable;\\r\\n             _depositAlpha = (( _amountStable - _feeStable) *\\r\\n             COEFF_SCALE_DECIMALS_P) / ALPHA_PRICE;\\r\\n             _depositAlphaTotal = _depositAlphaTotal + _depositAlpha;\\r\\n             _amountStableTotal = _amountStableTotal + _amountStable;\\r\\n             alphaToken.mint(_users[i], _depositAlpha);\\r\\n             depositNFT.updateDepositData( _users[i],  _tokenIdDeposit, _amountStable, false);\\r\\n             alphaToken.addAmountDeposit(_users[i],  _depositAlpha );\\r\\n             alphaToken.addTimeDeposit(_users[i], block.timestamp);\\r\\n        }\\r\\n        maxDepositAmount = maxDepositAmount - _amountStableTotal;\\r\\n        if (_depositAlphaTotal >0){\\r\\n            ALPHA_PRICE_WAVG  = (( totalSupply * ALPHA_PRICE_WAVG) + ( _depositAlphaTotal * ALPHA_PRICE)) /\\r\\n            ( totalSupply + _depositAlphaTotal);\\r\\n            }\\r\\n            admin.updateAlphaPriceWAVG( ALPHA_PRICE_WAVG);\\r\\n\\r\\n        if (admin.MANAGEMENT_FEE_TIME() == 0){\\r\\n            admin.updateManagementFeeTime(block.timestamp);   \\r\\n        }\\r\\n        if ( _feeStableTotal >0){\\r\\n           stableToken.safeTransfer( treasury, _feeStableTotal/AMOUNT_SCALE_DECIMALS);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Validate users withdrawal requests \\r\\n    function finalizeWithdrawals(address[] memory _users) external\\r\\n        whenNotPaused onlyManager {\\r\\n        uint256 tokensToBurn = 0;\\r\\n        uint256 _amountLP;\\r\\n        uint256 _amountStable;\\r\\n        uint256 _tokenIdWithdraw;\\r\\n        Data.State _state;\\r\\n        calculateAcceptedWithdrawRequests(_users);\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            ( _state , _amountLP, )= withdrawalNFT.pendingWithdrawPerAddress(_users[i]);\\r\\n         \\r\\n            if (_state != Data.State.PENDING) {\\r\\n                continue;\\r\\n            }\\r\\n            _amountLP = acceptedWithdrawPerAddress[_users[i]];\\r\\n            withdrawAmountTotal = withdrawAmountTotal - _amountLP ;\\r\\n            _amountStable = (_amountLP *  ALPHA_PRICE) / \\r\\n            ( COEFF_SCALE_DECIMALS_P * AMOUNT_SCALE_DECIMALS);\\r\\n            stableToken.safeTransfer(_users[i], _amountStable);\\r\\n            _tokenIdWithdraw = withdrawalNFT.getTokenId(_users[i]);\\r\\n            withdrawalNFT.updateWithdrawData( _users[i],  _tokenIdWithdraw, _amountLP, false);\\r\\n            tokensToBurn = tokensToBurn + _amountLP;\\r\\n            alphaToken.updateDepositDataExternal(_users[i], _amountLP);\\r\\n            delete acceptedWithdrawPerAddress[_users[i]]; \\r\\n        }\\r\\n        if ((tokensToBurn) > 0){\\r\\n           alphaToken.burn(address(this), tokensToBurn);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    // Make deposit stable token request \\r\\n    function depositRequest(uint256 _amount) external whenNotPaused {\\r\\n        require(_amount >= admin.MIN_AMOUNT(), \\r\\n        \\\"Formation.Fi: amount is lower than the minimum deposit amount\\\");\\r\\n        if (depositNFT.balanceOf(msg.sender)==0){\\r\\n            tokenIdDeposit = tokenIdDeposit +1;\\r\\n            depositNFT.mint(msg.sender, tokenIdDeposit, _amount);\\r\\n        }\\r\\n        else {\\r\\n            uint256 _tokenIdDeposit = depositNFT.getTokenId(msg.sender);\\r\\n            depositNFT.updateDepositData (msg.sender,  _tokenIdDeposit, _amount, true);\\r\\n        }\\r\\n        depositAmountTotal = depositAmountTotal + _amount; \\r\\n        stableToken.safeTransferFrom(msg.sender, address(this), _amount/AMOUNT_SCALE_DECIMALS);\\r\\n    }\\r\\n\\r\\n    // Cancel deposit stable token request \\r\\n    function cancelDepositRequest(uint256 _amount) external whenNotPaused canCancel {\\r\\n        uint256 _tokenIdDeposit = depositNFT.getTokenId(msg.sender);\\r\\n        require( _tokenIdDeposit > 0, \\r\\n        \\\"Formation.Fi: deposit request doesn't exist\\\"); \\r\\n        depositNFT.updateDepositData(msg.sender,  _tokenIdDeposit, _amount, false);\\r\\n        depositAmountTotal = depositAmountTotal - _amount; \\r\\n        stableToken.safeTransfer(msg.sender, _amount/AMOUNT_SCALE_DECIMALS);\\r\\n        \\r\\n    }\\r\\n    \\r\\n    // Make withdrawal ALPHA token request \\r\\n    function withdrawRequest(uint256 _amount) external whenNotPaused {\\r\\n        require ( _amount > 0, \\\"Formation Fi: amount is zero\\\");\\r\\n        require((alphaToken.balanceOf(msg.sender)) >= _amount,\\r\\n         \\\"Formation Fi: amount exceeds user balance\\\");\\r\\n        require (alphaToken.ChecklWithdrawalRequest(msg.sender, _amount, admin.LOCKUP_PERIOD_USER()),\\r\\n         \\\"Formation Fi: user Position locked\\\");\\r\\n        tokenIdWithdraw = tokenIdWithdraw +1;\\r\\n        withdrawalNFT.mint(msg.sender, tokenIdWithdraw, _amount);\\r\\n        withdrawAmountTotal = withdrawAmountTotal + _amount;\\r\\n        alphaToken.transferFrom(msg.sender, address(this), _amount);\\r\\n         \\r\\n    }\\r\\n\\r\\n    // Cancel withdraw ALPHA token request \\r\\n    function cancelWithdrawalRequest( uint256 _amount) external whenNotPaused {\\r\\n        require ( _amount > 0, \\\"Formation Fi: amount is zero\\\");\\r\\n        uint256 _tokenIdWithdraw = withdrawalNFT.getTokenId(msg.sender);\\r\\n        require( _tokenIdWithdraw > 0, \\r\\n        \\\"Formation.Fi: withdrawal request doesn't exist\\\"); \\r\\n        withdrawalNFT.updateWithdrawData(msg.sender, _tokenIdWithdraw, _amount, false);\\r\\n        alphaToken.transfer(msg.sender, _amount);\\r\\n    }\\r\\n    \\r\\n    // Withdraw stable tokens from the contract \\r\\n    function availableBalanceWithdrawal(uint256 _amount) external \\r\\n        whenNotPaused onlyManager {\\r\\n        require(block.timestamp - TIME_WITHDRAW_MANAGER >= admin.LOCKUP_PERIOD_MANAGER(), \\r\\n         \\\"Formation.Fi: Manager Position locked\\\");\\r\\n        uint256 _amountScaled = _amount/AMOUNT_SCALE_DECIMALS;\\r\\n        require(\\r\\n            stableToken.balanceOf(address(this)) >= _amountScaled,\\r\\n            \\\"Formation Fi: requested amount exceeds contract balance\\\"\\r\\n        );\\r\\n        TIME_WITHDRAW_MANAGER = block.timestamp;\\r\\n        stableToken.safeTransfer(admin.manager(), _amountScaled);\\r\\n    }\\r\\n    \\r\\n    // Send stable tokens to the contract\\r\\n    function sendStableTocontract(uint256 _amount) external \\r\\n      whenNotPaused onlyManager {\\r\\n      require( _amount > 0,  \\\"amount is zero\\\");\\r\\n      stableToken.safeTransferFrom(msg.sender, address(this), _amount/AMOUNT_SCALE_DECIMALS);\\r\\n    } \\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/main/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(0x95d89b41)\\r\\n        );\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(0x06fdde03)\\r\\n        );\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeDecimals(IERC20 token) public view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(0x313ce567)\\r\\n        );\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"SafeERC20: Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(0x23b872dd, from, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"SafeERC20: TransferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Pausable\\r\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\r\\n */\\r\\ncontract Pausable is Ownable {\\r\\n    event Pause();\\r\\n    event Unpause();\\r\\n\\r\\n    bool public paused = false;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused, \\\"Transaction is not available\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused, \\\"Transaction is available\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to pause, triggers stopped state\\r\\n     */\\r\\n    function pause() public onlyOwner whenNotPaused {\\r\\n        paused = true;\\r\\n        emit Pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to unpause, returns to normal state\\r\\n     */\\r\\n    function unpause() public onlyOwner whenPaused {\\r\\n        paused = false;\\r\\n        emit Unpause();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/main/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a / b + (a % b == 0 ? 0 : 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // must be unchecked in order to support `n = type(int256).min`\\r\\n            return uint256(n >= 0 ? n : -n);\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/main/libraries/Data.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nlibrary Data {\\r\\n\\r\\nenum State {\\r\\n        NONE,\\r\\n        PENDING,\\r\\n        READY\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/main/AdminInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"./libraries/SafeERC20.sol\\\";\\r\\nimport \\\"../utils/Pausable.sol\\\";\\r\\nimport \\\"./libraries/Math.sol\\\";\\r\\nimport \\\"./AlphaToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AdminInterface\\r\\n * @dev Implementation of AdminInterface\\r\\n */\\r\\n\\r\\ncontract AdminInterface is Pausable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Decimal factors\\r\\n    uint256 public COEFF_SCALE_DECIMALS_F = 1e4; // for fees\\r\\n    uint256 public COEFF_SCALE_DECIMALS_P = 1e6; // for price\\r\\n    uint256 public AMOUNT_SCALE_DECIMALS = 1; // for stable token\\r\\n\\r\\n    // Fees rate\\r\\n    uint256 public DEPOSIT_FEE_RATE = 50; // \\r\\n    uint256 public MANAGEMENT_FEE_RATE = 200;\\r\\n    uint256 public PERFORMANCE_FEE_RATE = 2000;\\r\\n    \\r\\n    // Fees parameters\\r\\n    uint256 public SECONDES_PER_YEAR = 86400 * 365;  \\r\\n    uint256 public PERFORMANCE_FEES = 0;\\r\\n    uint256 public MANAGEMENT_FEES = 0;\\r\\n    uint256 public MANAGEMENT_FEE_TIME = 0;\\r\\n\\r\\n    // ALPHA price\\r\\n    uint256 public ALPHA_PRICE = 1000000;\\r\\n    uint256 public ALPHA_PRICE_WAVG = 1000000;\\r\\n\\r\\n     // User deposit parameters\\r\\n    uint256 public MIN_AMOUNT = 1000 * 1e18;\\r\\n    bool public CAN_CANCEL = true;\\r\\n    \\r\\n    // Withdrawal parameters\\r\\n    uint256 public LOCKUP_PERIOD_MANAGER = 2 hours; \\r\\n    uint256 public LOCKUP_PERIOD_USER = 0 days; \\r\\n    uint256 public TIME_WITHDRAW_MANAGER = 0;\\r\\n   \\r\\n    // Portfolio management parameters\\r\\n    uint public netDepositInd= 0;\\r\\n    uint256 public netAmountEvent =0;\\r\\n    uint256 public SLIPPAGE_TOLERANCE = 200;\\r\\n    address public manager;\\r\\n    address public treasury;\\r\\n    address public alphaStrategy;\\r\\n\\r\\n    //Contracts\\r\\n    AlphaToken public alphaToken;\\r\\n    IERC20 public stableToken;\\r\\n    constructor( address _manager, address _treasury, address _stableTokenAddress,\\r\\n     address _alphaToken) {\\r\\n        require(\\r\\n            _manager != address(0),\\r\\n            \\\"Formation.Fi: manager address is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n           _treasury != address(0),\\r\\n            \\\"Formation.Fi:  treasury address is the zero address\\\"\\r\\n            );\\r\\n        require(\\r\\n            _stableTokenAddress != address(0),\\r\\n            \\\"Formation.Fi: Stable token address is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n           _alphaToken != address(0),\\r\\n            \\\"Formation.Fi: ALPHA token address is the zero address\\\"\\r\\n        );\\r\\n        manager = _manager;\\r\\n        treasury = _treasury; \\r\\n        stableToken = IERC20(_stableTokenAddress);\\r\\n        alphaToken = AlphaToken(_alphaToken);\\r\\n        uint8 _stableTokenDecimals = ERC20( _stableTokenAddress).decimals();\\r\\n        if ( _stableTokenDecimals == 6) {\\r\\n            AMOUNT_SCALE_DECIMALS= 1e12;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Modifiers\\r\\n      modifier onlyAlphaStrategy() {\\r\\n        require(alphaStrategy != address(0),\\r\\n            \\\"Formation.Fi: alphaStrategy is the zero address\\\"\\r\\n        );\\r\\n        require(msg.sender == alphaStrategy,\\r\\n             \\\"Formation.Fi: Caller is not the alphaStrategy\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     modifier onlyManager() {\\r\\n        require(msg.sender == manager, \\r\\n        \\\"Formation.Fi: Caller is not the manager\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier canCancel() {\\r\\n        require(CAN_CANCEL == true, \\\"Formation Fi: Cancel feature is not available\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Setter functions\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        require(\\r\\n            _treasury != address(0),\\r\\n            \\\"Formation.Fi: manager address is the zero address\\\"\\r\\n        );\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    function setManager(address _manager) external onlyOwner {\\r\\n        require(\\r\\n            _manager != address(0),\\r\\n            \\\"Formation.Fi: manager address is the zero address\\\"\\r\\n        );\\r\\n        manager = _manager;\\r\\n    }\\r\\n\\r\\n    function setAlphaStrategy(address _alphaStrategy) public onlyOwner {\\r\\n         require(\\r\\n            _alphaStrategy!= address(0),\\r\\n            \\\"Formation.Fi: alphaStrategy is the zero address\\\"\\r\\n        );\\r\\n         alphaStrategy = _alphaStrategy;\\r\\n    } \\r\\n\\r\\n\\r\\n    function setStableToken(address _stableTokenAddress) public onlyOwner {\\r\\n        require(\\r\\n             _stableTokenAddress!= address(0),\\r\\n            \\\"Formation.Fi: stable token address is the zero address\\\"\\r\\n        );\\r\\n        stableToken = IERC20(_stableTokenAddress);\\r\\n        uint8 _stableTokenDecimals = ERC20(_stableTokenAddress).decimals();\\r\\n        if (_stableTokenDecimals == 6) {\\r\\n           AMOUNT_SCALE_DECIMALS= 1e12;\\r\\n        }\\r\\n        else {\\r\\n           AMOUNT_SCALE_DECIMALS = 1;   \\r\\n        }\\r\\n    } \\r\\n     function setCancel(bool _cancel) external onlyManager {\\r\\n        CAN_CANCEL = _cancel;\\r\\n    }\\r\\n     function setLockupPeriodManager(uint256 _lockupPeriodManager) external onlyManager {\\r\\n        LOCKUP_PERIOD_MANAGER = _lockupPeriodManager;\\r\\n    }\\r\\n\\r\\n    function setLockupPeriodUser(uint256 _lockupPeriodUser) external onlyManager {\\r\\n        LOCKUP_PERIOD_USER = _lockupPeriodUser;\\r\\n    }\\r\\n \\r\\n    function setDepositFeeRate(uint256 _rate) external onlyManager {\\r\\n        DEPOSIT_FEE_RATE = _rate;\\r\\n    }\\r\\n\\r\\n    function setManagementFeeRate(uint256 _rate) external onlyManager {\\r\\n        MANAGEMENT_FEE_RATE = _rate;\\r\\n    }\\r\\n\\r\\n    function setPerformanceFeeRate(uint256 _rate) external onlyManager {\\r\\n        PERFORMANCE_FEE_RATE  = _rate;\\r\\n    }\\r\\n    function setMinAmount(uint256 _minAmount) external onlyManager {\\r\\n        MIN_AMOUNT = _minAmount;\\r\\n     }\\r\\n\\r\\n    function setCoeffScaleDecimalsFees (uint256 _scale) external onlyManager {\\r\\n        require(\\r\\n             _scale > 0,\\r\\n            \\\"Formation.Fi: decimal fees factor is 0\\\"\\r\\n        );\\r\\n\\r\\n       COEFF_SCALE_DECIMALS_F  = _scale;\\r\\n     }\\r\\n\\r\\n    function setCoeffScaleDecimalsPrice (uint256 _scale) external onlyManager {\\r\\n        require(\\r\\n             _scale > 0,\\r\\n            \\\"Formation.Fi: decimal price factor is 0\\\"\\r\\n        );\\r\\n       COEFF_SCALE_DECIMALS_P  = _scale;\\r\\n     }\\r\\n\\r\\n    function updateAlphaPrice(uint256 _price) external onlyManager{\\r\\n        require(\\r\\n             _price > 0,\\r\\n            \\\"Formation.Fi: ALPHA price is 0\\\"\\r\\n        );\\r\\n        ALPHA_PRICE = _price;\\r\\n    }\\r\\n\\r\\n    function updateAlphaPriceWAVG(uint256 _price_WAVG) external onlyAlphaStrategy {\\r\\n        require(\\r\\n             _price_WAVG > 0,\\r\\n            \\\"Formation.Fi: ALPHA price WAVG is 0\\\"\\r\\n        );\\r\\n        ALPHA_PRICE_WAVG  = _price_WAVG;\\r\\n    }\\r\\n    function updateManagementFeeTime(uint256 _time) external onlyAlphaStrategy {\\r\\n        MANAGEMENT_FEE_TIME = _time;\\r\\n    }\\r\\n  \\r\\n    // Calculate fees \\r\\n    function calculatePerformanceFees() external onlyManager {\\r\\n        require(PERFORMANCE_FEES == 0, \\\"Formation.Fi: performance fees pending minting\\\");\\r\\n        uint256 _deltaPrice = 0;\\r\\n        if (ALPHA_PRICE > ALPHA_PRICE_WAVG) {\\r\\n            _deltaPrice = ALPHA_PRICE - ALPHA_PRICE_WAVG;\\r\\n            ALPHA_PRICE_WAVG = ALPHA_PRICE;\\r\\n            PERFORMANCE_FEES = (alphaToken.totalSupply() *\\r\\n            _deltaPrice * PERFORMANCE_FEE_RATE) / (ALPHA_PRICE * COEFF_SCALE_DECIMALS_F); \\r\\n        }\\r\\n    }\\r\\n    function calculateManagementFees() external onlyManager {\\r\\n        require(MANAGEMENT_FEES == 0, \\\"Formation.Fi: management fees pending minting\\\");\\r\\n        if (MANAGEMENT_FEE_TIME!= 0){\\r\\n           uint256 _deltaTime;\\r\\n           _deltaTime = block.timestamp -  MANAGEMENT_FEE_TIME; \\r\\n           MANAGEMENT_FEES = (alphaToken.totalSupply() * MANAGEMENT_FEE_RATE * _deltaTime ) \\r\\n           /(COEFF_SCALE_DECIMALS_F * SECONDES_PER_YEAR);\\r\\n           MANAGEMENT_FEE_TIME = block.timestamp; \\r\\n        }\\r\\n    }\\r\\n     \\r\\n    // Mint fees\\r\\n    function mintFees() external onlyManager {\\r\\n        if ((PERFORMANCE_FEES + MANAGEMENT_FEES) > 0){\\r\\n           alphaToken.mint(treasury, PERFORMANCE_FEES + MANAGEMENT_FEES);\\r\\n           PERFORMANCE_FEES = 0;\\r\\n           MANAGEMENT_FEES = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Calculate protfolio deposit indicator \\r\\n    function calculateNetDepositInd(uint256 _depositAmountTotal, uint256 _withdrawAmountTotal)\\r\\n     public onlyAlphaStrategy returns( uint) {\\r\\n        if ( _depositAmountTotal >= \\r\\n        ((_withdrawAmountTotal * ALPHA_PRICE) / COEFF_SCALE_DECIMALS_P)){\\r\\n            netDepositInd = 1 ;\\r\\n        }\\r\\n        else {\\r\\n            netDepositInd = 0;\\r\\n        }\\r\\n        return netDepositInd;\\r\\n    }\\r\\n\\r\\n    // Calculate protfolio Amount\\r\\n    function calculateNetAmountEvent(uint256 _depositAmountTotal, uint256 _withdrawAmountTotal,\\r\\n        uint256 _MAX_AMOUNT_DEPOSIT, uint256 _MAX_AMOUNT_WITHDRAW) \\r\\n        public onlyAlphaStrategy returns(uint256) {\\r\\n        uint256 _netDeposit;\\r\\n        if (netDepositInd == 1) {\\r\\n             _netDeposit = _depositAmountTotal - \\r\\n             (_withdrawAmountTotal * ALPHA_PRICE) / COEFF_SCALE_DECIMALS_P;\\r\\n             netAmountEvent = Math.min( _netDeposit, _MAX_AMOUNT_DEPOSIT);\\r\\n        }\\r\\n        else {\\r\\n            _netDeposit= ((_withdrawAmountTotal * ALPHA_PRICE) / COEFF_SCALE_DECIMALS_P) -\\r\\n            _depositAmountTotal;\\r\\n            netAmountEvent = Math.min(_netDeposit, _MAX_AMOUNT_WITHDRAW);\\r\\n        }\\r\\n        return netAmountEvent;\\r\\n    }\\r\\n\\r\\n    // Protect against Slippage\\r\\n    function protectAgainstSlippage(uint256 _withdrawAmount) public onlyManager \\r\\n         whenNotPaused   returns (uint256) {\\r\\n        require(netDepositInd == 0, \\\"Formation.Fi: it is not a slippage case\\\");\\r\\n        require(_withdrawAmount != 0, \\\"Formation.Fi: amount is zero\\\");\\r\\n       uint256 _amount = 0; \\r\\n       uint256 _deltaAmount =0;\\r\\n       uint256 _slippage = 0;\\r\\n       uint256  _alphaAmount = 0;\\r\\n       uint256 _balanceAlphaTreasury = alphaToken.balanceOf(treasury);\\r\\n       uint256 _balanceStableTreasury = stableToken.balanceOf(treasury) * AMOUNT_SCALE_DECIMALS;\\r\\n      \\r\\n        if (_withdrawAmount< netAmountEvent){\\r\\n          _amount = netAmountEvent - _withdrawAmount;   \\r\\n          _slippage = _amount  / netAmountEvent;\\r\\n            if ((_slippage * COEFF_SCALE_DECIMALS_F) >= SLIPPAGE_TOLERANCE) {\\r\\n             return netAmountEvent;\\r\\n            }\\r\\n            else {\\r\\n              _deltaAmount = Math.min( _amount, _balanceStableTreasury);\\r\\n                if ( _deltaAmount  > 0){\\r\\n                   stableToken.safeTransferFrom(treasury, alphaStrategy, _deltaAmount/AMOUNT_SCALE_DECIMALS);\\r\\n                   _alphaAmount = (_deltaAmount * COEFF_SCALE_DECIMALS_P)/ALPHA_PRICE;\\r\\n                   alphaToken.mint(treasury, _alphaAmount);\\r\\n                   return _amount - _deltaAmount;\\r\\n               }\\r\\n               else {\\r\\n                   return _amount; \\r\\n               }  \\r\\n            }    \\r\\n        \\r\\n        }\\r\\n        else  {\\r\\n          _amount = _withdrawAmount - netAmountEvent;   \\r\\n          _alphaAmount = (_amount * COEFF_SCALE_DECIMALS_P)/ALPHA_PRICE;\\r\\n          _alphaAmount = Math.min(_alphaAmount, _balanceAlphaTreasury);\\r\\n          if (_alphaAmount >0) {\\r\\n             _deltaAmount = (_alphaAmount * ALPHA_PRICE)/COEFF_SCALE_DECIMALS_P;\\r\\n             stableToken.safeTransfer(treasury, _deltaAmount/AMOUNT_SCALE_DECIMALS);   \\r\\n             alphaToken.burn( treasury, _alphaAmount);\\r\\n            }\\r\\n           if ((_amount - _deltaAmount)>0) {\\r\\n              stableToken.safeTransfer(manager, (_amount - _deltaAmount)/AMOUNT_SCALE_DECIMALS); \\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n\\r\\n    } \\r\\n\\r\\n    // send Stable Tokens to the contract\\r\\n    function sendStableTocontract(uint256 _amount) external \\r\\n      whenNotPaused onlyManager {\\r\\n      require( _amount > 0,  \\\"Formation.Fi: amount is zero\\\");\\r\\n      stableToken.safeTransferFrom(msg.sender, address(this), _amount/AMOUNT_SCALE_DECIMALS);\\r\\n      }\\r\\n\\r\\n     // send Stable Tokens from the contract AlphaStrategy\\r\\n    function sendStableFromcontract() external \\r\\n        whenNotPaused onlyManager {\\r\\n        require(alphaStrategy != address(0),\\r\\n            \\\"Formation.Fi: alphaStrategy is the zero address\\\"\\r\\n        );\\r\\n         stableToken.safeTransfer(alphaStrategy, stableToken.balanceOf(address(this)));\\r\\n      }\\r\\n  \\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/main/AlphaToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./libraries/Math.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AlphaToken\\r\\n * @dev Implementation of the LP Token \\\"ALPHA\\\".\\r\\n */\\r\\n\\r\\ncontract AlphaToken is ERC20, Ownable {\\r\\n\\r\\n    // Proxy address\\r\\n    address alphaStrategy;\\r\\n    address admin;\\r\\n\\r\\n    // Deposit Mapping\\r\\n    mapping(address => uint256[]) public  amountDepositPerAddress;\\r\\n    mapping(address => uint256[]) public  timeDepositPerAddress; \\r\\n    constructor() ERC20(\\\"Formation Fi: ALPHA TOKEN\\\", \\\"ALPHA\\\") {}\\r\\n\\r\\n    // Modifiers \\r\\n    modifier onlyProxy() {\\r\\n        require(\\r\\n            (alphaStrategy != address(0)) && (admin != address(0)),\\r\\n            \\\"Formation.Fi: proxy is the zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            (msg.sender == alphaStrategy) || (msg.sender == admin),\\r\\n             \\\"Formation.Fi: Caller is not the proxy\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyAlphaStrategy() {\\r\\n        require(alphaStrategy != address(0),\\r\\n            \\\"Formation.Fi: alphaStrategy is the zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(msg.sender == alphaStrategy,\\r\\n             \\\"Formation.Fi: Caller is not the alphaStrategy\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Setter functions\\r\\n    function setAlphaStrategy(address _alphaStrategy) external onlyOwner {\\r\\n        require(\\r\\n            _alphaStrategy!= address(0),\\r\\n            \\\"Formation.Fi: alphaStrategy is the zero address\\\"\\r\\n        );\\r\\n         alphaStrategy = _alphaStrategy;\\r\\n    } \\r\\n    function setAdmin(address _admin) external onlyOwner {\\r\\n        require(\\r\\n            _admin!= address(0),\\r\\n            \\\"Formation.Fi: admin is the zero address\\\"\\r\\n        );\\r\\n         admin = _admin;\\r\\n    } \\r\\n\\r\\n    function addTimeDeposit(address _account, uint256 _time) external onlyAlphaStrategy {\\r\\n         require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n         require(\\r\\n            _time!= 0,\\r\\n            \\\"Formation.Fi: deposit time is zero\\\"\\r\\n        );\\r\\n        timeDepositPerAddress[_account].push(_time);\\r\\n    } \\r\\n\\r\\n    function addAmountDeposit(address _account, uint256 _amount) external onlyAlphaStrategy {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: deposit amount is zero\\\"\\r\\n        );\\r\\n        amountDepositPerAddress[_account].push(_amount);\\r\\n\\r\\n    } \\r\\n    \\r\\n    // functions \\\"mint\\\" and \\\"burn\\\"\\r\\n   function mint(address _account, uint256 _amount) external onlyProxy {\\r\\n       require(\\r\\n          _account!= address(0),\\r\\n           \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n         require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: amount is zero\\\"\\r\\n        );\\r\\n       _mint(_account,  _amount);\\r\\n   }\\r\\n\\r\\n    function burn(address _account, uint256 _amount) external onlyProxy {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n         require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: amount is zero\\\"\\r\\n        );\\r\\n        _burn( _account, _amount);\\r\\n    }\\r\\n    \\r\\n    // Check the user lock up condition for his withdrawal request\\r\\n\\r\\n    function ChecklWithdrawalRequest(address _account, uint256 _amount, uint256 _period) \\r\\n     external view returns (bool){\\r\\n\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n           _amount!= 0,\\r\\n            \\\"Formation.Fi: amount is zero\\\"\\r\\n        );\\r\\n        uint256 [] memory _amountDeposit = amountDepositPerAddress[_account];\\r\\n        uint256 [] memory _timeDeposit = timeDepositPerAddress[_account];\\r\\n        uint256 _amountTotal = 0;\\r\\n        for (uint256 i = 0; i < _amountDeposit.length; i++) {\\r\\n            require ((block.timestamp - _timeDeposit[i]) >= _period, \\r\\n            \\\"Formation.Fi: user position locked\\\");\\r\\n            if (_amount<= (_amountTotal + _amountDeposit[i])){\\r\\n                break; \\r\\n            }\\r\\n            _amountTotal = _amountTotal + _amountDeposit[i];\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Functions to update  users deposit data \\r\\n    function updateDepositDataExternal( address _account,  uint256 _amount) \\r\\n        external onlyAlphaStrategy {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: amount is zero\\\"\\r\\n        );\\r\\n        uint256 [] memory _amountDeposit = amountDepositPerAddress[ _account];\\r\\n        uint256 _amountlocal = 0;\\r\\n        uint256 _amountTotal = 0;\\r\\n        uint256 _newAmount;\\r\\n        for (uint256 i = 0; i < _amountDeposit.length; i++) {\\r\\n            _amountlocal  = Math.min(_amountDeposit[i], _amount- _amountTotal);\\r\\n            _amountTotal = _amountTotal + _amountlocal;\\r\\n            _newAmount = _amountDeposit[i] - _amountlocal;\\r\\n            amountDepositPerAddress[_account][i] = _newAmount;\\r\\n            if (_newAmount==0){\\r\\n               deleteDepositData(_account, i);\\r\\n            }\\r\\n            if (_amountTotal == _amount){\\r\\n               break; \\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function updateDepositDataInernal( address _account,  uint256 _amount) internal {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: amount is zero\\\"\\r\\n        );\\r\\n        uint256 [] memory _amountDeposit = amountDepositPerAddress[ _account];\\r\\n        uint256 _amountlocal = 0;\\r\\n        uint256 _amountTotal = 0;\\r\\n        uint256 _newAmount;\\r\\n        for (uint256 i = 0; i < _amountDeposit.length; i++) {\\r\\n            _amountlocal  = Math.min(_amountDeposit[i], _amount- _amountTotal);\\r\\n            _amountTotal = _amountTotal +  _amountlocal;\\r\\n            _newAmount = _amountDeposit[i] - _amountlocal;\\r\\n            amountDepositPerAddress[_account][i] = _newAmount;\\r\\n            if (_newAmount==0){\\r\\n               deleteDepositData(_account, i);\\r\\n            }\\r\\n            if (_amountTotal == _amount){\\r\\n               break; \\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // Delete deposit data \\r\\n    function deleteDepositData(address _account, uint256 _ind) internal {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n        uint256 size = amountDepositPerAddress[_account].length-1;\\r\\n        \\r\\n        require( _ind <= size,\\r\\n            \\\" index is out of the range\\\"\\r\\n        );\\r\\n        for (uint256 i = _ind; i< size; i++){\\r\\n            amountDepositPerAddress[ _account][i] = amountDepositPerAddress[ _account][i+1];\\r\\n            timeDepositPerAddress[ _account][i] = timeDepositPerAddress[ _account][i+1];\\r\\n        }\\r\\n        amountDepositPerAddress[ _account].pop();\\r\\n        timeDepositPerAddress[ _account].pop();\\r\\n       \\r\\n    }\\r\\n   \\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n      ) internal virtual override{\\r\\n      \\r\\n       if ((to != address(0)) && (to != alphaStrategy) \\r\\n       && (to != admin) && (from != address(0)) )\\r\\n       {\\r\\n          updateDepositDataInernal(from, amount);\\r\\n          amountDepositPerAddress[to].push(amount);\\r\\n          timeDepositPerAddress[to].push(block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/main/DepositNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./libraries/Data.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title DepositNFT\\r\\n * @dev Implementation of DepositNFT \\\"The deposit Proof\\\"\\r\\n */\\r\\n\\r\\ncontract DepositNFT is ERC721, Ownable {\\r\\n\\r\\n    struct PendingDeposit {\\r\\n        Data.State state;\\r\\n        uint256 amountStable;\\r\\n        uint256 listPointer;\\r\\n    }\\r\\n\\r\\n    // Proxy \\\"alphaStrategy contract\\r\\n    address public proxy;\\r\\n    \\r\\n    // Users deposit data \\r\\n    mapping(address => PendingDeposit) public pendingDepositPerAddress;\\r\\n    address[] public usersOnPendingDeposit;\\r\\n    \\r\\n    \\r\\n\\r\\n    // NFT mapping \\r\\n    mapping(address => uint256) private tokenIdPerAddress;\\r\\n\\r\\n    constructor ()  ERC721 (\\\"Deposit Proof\\\", \\\"DEPOSIT\\\"){\\r\\n    }\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyProxy() {\\r\\n        require(\\r\\n            proxy != address(0),\\r\\n            \\\"Formation.Fi: proxy is the zero address\\\"\\r\\n        );\\r\\n        require(msg.sender == proxy, \\\"Formation.Fi: Caller is not the proxy\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Getter functions\\r\\n    function getTokenId(address _account) public view returns (uint256) {\\r\\n        require(\\r\\n           _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n        return tokenIdPerAddress[_account];\\r\\n    }\\r\\n    function userSize() public view  returns (uint256) {\\r\\n        return usersOnPendingDeposit.length;\\r\\n    }\\r\\n\\r\\n    function getArray() public view returns (address[] memory) {\\r\\n        return usersOnPendingDeposit;\\r\\n    }\\r\\n\\r\\n    // Setter functions\\r\\n    function setProxy(address _proxy) public onlyOwner {\\r\\n        require(\\r\\n            _proxy != address(0),\\r\\n            \\\"Formation.Fi: proxy is the zero address\\\"\\r\\n        );\\r\\n        proxy = _proxy;\\r\\n    }    \\r\\n    \\r\\n    // Functions \\\"mint\\\" and \\\"burn\\\"\\r\\n    function mint(address _account, uint256 _tokenId, uint256 _amount) \\r\\n       external onlyProxy {\\r\\n       require (balanceOf(_account) == 0, \\\"Formation.Fi: account has already a deposit NfT\\\");\\r\\n       _safeMint(_account,  _tokenId);\\r\\n       updateDepositData( _account,  _tokenId, _amount, true);\\r\\n    }\\r\\n    function burn(uint256 tokenId) internal {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        require (pendingDepositPerAddress[owner].state != Data.State.PENDING,\\r\\n        \\\"Formation.Fi: position is on pending\\\");\\r\\n        deleteDepositData(owner);\\r\\n        _burn(tokenId); \\r\\n    }\\r\\n     \\r\\n    // Update user deposit data\\r\\n    function updateDepositData(address _account, uint256 _tokenId, \\r\\n        uint256 _amount, bool add) public onlyProxy {\\r\\n        require (_exists(_tokenId), \\\"Formation.Fi: token does not exist\\\");\\r\\n        require (ownerOf(_tokenId) == _account , \\\"Formation.Fi: account is not the token owner\\\");\\r\\n        if( _amount > 0){\\r\\n           if (add){\\r\\n              if(pendingDepositPerAddress[_account].amountStable == 0){\\r\\n                  pendingDepositPerAddress[_account].state = Data.State.PENDING;\\r\\n                  pendingDepositPerAddress[_account].listPointer = usersOnPendingDeposit.length;\\r\\n                  tokenIdPerAddress[_account] = _tokenId;\\r\\n                  usersOnPendingDeposit.push(_account);\\r\\n                }\\r\\n              pendingDepositPerAddress[_account].amountStable = pendingDepositPerAddress[_account].amountStable \\r\\n              +  _amount;\\r\\n            }\\r\\n            else {\\r\\n               require(pendingDepositPerAddress[_account].amountStable >= _amount, \\r\\n               \\\"Formation Fi:  amount excedes pending deposit\\\");\\r\\n               uint256 _newAmount = pendingDepositPerAddress[_account].amountStable - _amount;\\r\\n               pendingDepositPerAddress[_account].amountStable = _newAmount;\\r\\n               if (_newAmount == 0){\\r\\n                  pendingDepositPerAddress[_account].state = Data.State.NONE;\\r\\n                  burn(_tokenId);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }    \\r\\n\\r\\n    // Delete user deposit data \\r\\n    function deleteDepositData(address _account) internal {\\r\\n        require(\\r\\n           _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n         uint256 _ind = pendingDepositPerAddress[_account].listPointer;\\r\\n         address _user = usersOnPendingDeposit[usersOnPendingDeposit.length - 1];\\r\\n         usersOnPendingDeposit[_ind] = _user;\\r\\n         pendingDepositPerAddress[_user].listPointer = _ind;\\r\\n         usersOnPendingDeposit.pop();\\r\\n         delete pendingDepositPerAddress[_account]; \\r\\n         delete tokenIdPerAddress[_account];    \\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n       address from,\\r\\n       address to,\\r\\n       uint256 tokenId\\r\\n    )   internal virtual override {\\r\\n        if ((to != address(0)) && (from != address(0))){\\r\\n            require ((to != proxy), \\r\\n            \\\"Formation.Fi: destination address cannot be the proxy\\\"\\r\\n            );\\r\\n            uint256 indFrom = pendingDepositPerAddress[from].listPointer;\\r\\n            pendingDepositPerAddress[to] = pendingDepositPerAddress[from];\\r\\n            pendingDepositPerAddress[from].state = Data.State.NONE;\\r\\n            pendingDepositPerAddress[from].amountStable =0;\\r\\n            usersOnPendingDeposit[indFrom] = to; \\r\\n            tokenIdPerAddress[to] = tokenIdPerAddress[from];\\r\\n            delete pendingDepositPerAddress[from];\\r\\n            delete tokenIdPerAddress[from];\\r\\n        }\\r\\n    }\\r\\n   \\r\\n}\\r\\n  \"\r\n    },\r\n    \"contracts/main/WithdrawalNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./libraries/Data.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title WithdrawalNFT\\r\\n * @dev Implementation of WithdrawalNFT \\\"The Withdrawal Proof\\\"\\r\\n */\\r\\n\\r\\ncontract WithdrawalNFT is ERC721, Ownable {\\r\\n\\r\\n    // Proxy \\\"alphaStrategy contract\\r\\n    address proxy;  \\r\\n\\r\\n    // Users Withdrawal data \\r\\n    struct PendingWithdrawal {\\r\\n        Data.State state;\\r\\n        uint256 amountAlpha;\\r\\n        uint256 listPointer;\\r\\n    }\\r\\n    mapping(address => PendingWithdrawal) public pendingWithdrawPerAddress;\\r\\n    address[] public usersOnPendingWithdraw;\\r\\n\\r\\n    // NFT mapping \\r\\n    mapping(address => uint256) private tokenIdPerAddress;\\r\\n\\r\\n    constructor () ERC721 (\\\"Withdrawal Proof\\\", \\\"WITHDRAW\\\"){\\r\\n     }\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyProxy() {\\r\\n        require(\\r\\n            proxy != address(0),\\r\\n            \\\"Formation.Fi: proxy is the zero address\\\"\\r\\n        );\\r\\n        require(msg.sender == proxy, \\\"Formation.Fi: Caller is not the proxy\\\");\\r\\n         _;\\r\\n    }\\r\\n\\r\\n    // Getter functions\\r\\n    function getTokenId(address _owner) public view returns (uint256) {\\r\\n        return tokenIdPerAddress[ _owner];\\r\\n    }\\r\\n     function userSize() public view returns (uint256) {\\r\\n        return usersOnPendingWithdraw.length;\\r\\n    }\\r\\n    function getArray() public view returns (address[] memory) {\\r\\n        return usersOnPendingWithdraw;\\r\\n    }\\r\\n\\r\\n    // Setter functions\\r\\n    function setProxy(address _proxy) public onlyOwner {\\r\\n        require(\\r\\n            _proxy != address(0),\\r\\n            \\\"Formation.Fi: proxy is the zero address\\\"\\r\\n        );\\r\\n        proxy = _proxy;\\r\\n    }    \\r\\n\\r\\n    // Functions \\\"mint\\\" and \\\"burn\\\"\\r\\n    function mint(address _account, uint256 _tokenId, uint256 _amount) \\r\\n       external onlyProxy {\\r\\n       require (pendingWithdrawPerAddress[msg.sender].state != Data.State.PENDING, \\r\\n       \\\"Formation.Fi: withdraw is pending\\\");\\r\\n       _safeMint(_account,  _tokenId);\\r\\n       tokenIdPerAddress[_account] = _tokenId;\\r\\n       updateWithdrawData (_account,  _tokenId,  _amount, true);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) internal {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        require (pendingWithdrawPerAddress[owner].state != Data.State.PENDING, \\r\\n        \\\"Formation.Fi: position is on pending\\\");\\r\\n        deleteWithdrawData(owner);\\r\\n        _burn(tokenId);   \\r\\n    }\\r\\n\\r\\n    // Update user withdraw data\\r\\n    function updateWithdrawData (address _account, uint256 _tokenId, \\r\\n        uint256 _amount, bool add) public onlyProxy {\\r\\n        require (_exists(_tokenId), \\\"Formation Fi: token does not exist\\\");\\r\\n        require (ownerOf(_tokenId) == _account , \\r\\n         \\\"Formation.Fi: account is not the token owner\\\");\\r\\n        if( _amount > 0){\\r\\n            if (add){\\r\\n               pendingWithdrawPerAddress[_account].state = Data.State.PENDING;\\r\\n               pendingWithdrawPerAddress[_account].amountAlpha = _amount;\\r\\n               pendingWithdrawPerAddress[_account].listPointer = usersOnPendingWithdraw.length;\\r\\n               usersOnPendingWithdraw.push(_account);\\r\\n            }\\r\\n            else {\\r\\n               require(pendingWithdrawPerAddress[_account].amountAlpha >= _amount, \\r\\n               \\\"Formation.Fi: amount excedes pending withdraw\\\");\\r\\n               uint256 _newAmount = pendingWithdrawPerAddress[_account].amountAlpha - _amount;\\r\\n               pendingWithdrawPerAddress[_account].amountAlpha = _newAmount;\\r\\n               if (_newAmount == 0){\\r\\n                   pendingWithdrawPerAddress[_account].state = Data.State.NONE;\\r\\n                   burn(_tokenId);\\r\\n                }\\r\\n            }     \\r\\n       }\\r\\n    }\\r\\n\\r\\n    // Delete user withdraw data \\r\\n    function deleteWithdrawData(address _account) internal {\\r\\n        require(\\r\\n          _account!= address(0),\\r\\n          \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n        uint256 _ind = pendingWithdrawPerAddress[_account].listPointer;\\r\\n        address _user = usersOnPendingWithdraw[usersOnPendingWithdraw.length -1];\\r\\n        usersOnPendingWithdraw[ _ind] = _user ;\\r\\n        pendingWithdrawPerAddress[ _user].listPointer = _ind;\\r\\n        usersOnPendingWithdraw.pop();\\r\\n        delete pendingWithdrawPerAddress[_account]; \\r\\n        delete tokenIdPerAddress[_account];    \\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual override {\\r\\n       if ((to != address(0)) && (from != address(0))){\\r\\n          require ((to != proxy), \\r\\n           \\\"Formation Fi: destination address is the proxy\\\"\\r\\n          );\\r\\n          uint256 indFrom = pendingWithdrawPerAddress[from].listPointer;\\r\\n          pendingWithdrawPerAddress[to] = pendingWithdrawPerAddress[from];\\r\\n          pendingWithdrawPerAddress[from].state = Data.State.NONE;\\r\\n          pendingWithdrawPerAddress[from].amountAlpha =0;\\r\\n          usersOnPendingWithdraw[indFrom] = to; \\r\\n          tokenIdPerAddress[to] = tokenIdPerAddress[from];\\r\\n          delete pendingWithdrawPerAddress[from];\\r\\n          delete tokenIdPerAddress[from];\\r\\n        }\\r\\n    }\\r\\n   \\r\\n}\\r\\n  \"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alphaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositNFTAdress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawalNFTAdress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALPHA_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALPHA_PRICE_WAVG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMOUNT_SCALE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAN_CANCEL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COEFF_SCALE_DECIMALS_F\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COEFF_SCALE_DECIMALS_P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_WITHDRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_WITHDRAW_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedWithdrawPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"contract AdminInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alphaToken\",\"outputs\":[{\"internalType\":\"contract AlphaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"availableBalanceWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateMaxDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateMaxWithdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateNetAmountEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateNetDepositInd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelDepositRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelWithdrawalRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositNFT\",\"outputs\":[{\"internalType\":\"contract DepositNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"finalizeDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"finalizeWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAmountEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netDepositInd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendStableTocontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAX_AMOUNT_DEPOSIT\",\"type\":\"uint256\"}],\"name\":\"set_MAX_AMOUNT_DEPOSIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAX_AMOUNT_WITHDRAW\",\"type\":\"uint256\"}],\"name\":\"set_MAX_AMOUNT_WITHDRAW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalNFT\",\"outputs\":[{\"internalType\":\"contract WithdrawalNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlphaStrategy", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cf917623ce377a6b2930b82faa60a575edd2e899000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000085796e07543cdf7b4f99a9c2341ddf6de2879e3600000000000000000000000095289299e8443888decc60f74b2322f874837b2900000000000000000000000048779d7db40c16a2eacf7ffd5b9a210ff5471e77", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}