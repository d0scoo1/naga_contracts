{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IOpenSea {\r\n    /**\r\n     * @dev Call atomicMatch - Solidity ABI encoding limitation workaround, hopefully temporary.\r\n     */\r\n    function atomicMatch_(\r\n        address[14] memory addrs,\r\n        uint[18] memory uints,\r\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\r\n        bytes memory calldataBuy,\r\n        bytes memory calldataSell,\r\n        bytes memory replacementPatternBuy,\r\n        bytes memory replacementPatternSell,\r\n        bytes memory staticExtradataBuy,\r\n        bytes memory staticExtradataSell,\r\n        uint8[2] memory vs,\r\n        bytes32[5] memory rssMetadata\r\n    ) external payable;\r\n}\r\n\r\ncontract BuyOpenSeaTestnet {\r\n\r\n    // rinkeby\r\n    // address public openSea = 0x5206e78b21Ce315ce284FB24cf05e0585A93B1d9;\r\n    // // mainnet v1\r\n    // address public openSea = 0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b;\r\n    // mainnet v2\r\n    address public openSea = 0x7f268357A8c2552623316e2562D90e642bB538E5;\r\n\r\n\r\n    struct OpenSeaBuy {\r\n        address[14] addrs;\r\n        uint[18] uints;\r\n        uint8[8] feeMethodsSidesKindsHowToCalls;\r\n        bytes calldataBuy;\r\n        bytes calldataSell;\r\n        bytes replacementPatternBuy;\r\n        bytes replacementPatternSell;\r\n        bytes staticExtradataBuy;\r\n        bytes staticExtradataSell;\r\n        uint8[2] vs;\r\n        bytes32[5] rssMetadata;\r\n    }\r\n\r\n    function buyAssetsForEth(OpenSeaBuy[] memory openSeaBuys, bool revertIfTrxFails) payable public {\r\n        for (uint256 i = 0; i < openSeaBuys.length; i++) {\r\n            buySingleAssetForEth(openSeaBuys[i], revertIfTrxFails);\r\n        }\r\n    }\r\n\r\n    function buySingleAssetForEth(OpenSeaBuy memory _openSeaBuy, bool _revertIfTrxFails) payable public {\r\n        bytes memory _data = abi.encodeWithSelector(IOpenSea.atomicMatch_.selector, _openSeaBuy.addrs, _openSeaBuy.uints, _openSeaBuy.feeMethodsSidesKindsHowToCalls, _openSeaBuy.calldataBuy, _openSeaBuy.calldataSell, _openSeaBuy.replacementPatternBuy, _openSeaBuy.replacementPatternSell, _openSeaBuy.staticExtradataBuy, _openSeaBuy.staticExtradataSell, _openSeaBuy.vs, _openSeaBuy.rssMetadata);\r\n        (bool success, ) = openSea.call{value:_openSeaBuy.uints[4]}(_data);\r\n        if (!success && _revertIfTrxFails) {\r\n            // Copy revert reason from call\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n    \r\n    function buyOpenSea(uint256 buyValue, bytes memory inputData) payable public {\r\n        (bool success, ) = openSea.call{value: buyValue}(inputData);\r\n\r\n        _checkCallResult(success);\r\n    }\r\n\r\n    function checkEncodedData(OpenSeaBuy memory _openSeaBuy) public pure returns (bytes memory) {\r\n        bytes memory _data = abi.encodeWithSelector(IOpenSea.atomicMatch_.selector, _openSeaBuy.addrs, _openSeaBuy.uints, _openSeaBuy.feeMethodsSidesKindsHowToCalls, _openSeaBuy.calldataBuy, _openSeaBuy.calldataSell, _openSeaBuy.replacementPatternBuy, _openSeaBuy.replacementPatternSell, _openSeaBuy.staticExtradataBuy, _openSeaBuy.staticExtradataSell, _openSeaBuy.vs, _openSeaBuy.rssMetadata);\r\n        return _data;\r\n    }\r\n\r\n    function checkOpenSeaSelector() public pure returns (bytes4) {\r\n        return IOpenSea.atomicMatch_.selector;\r\n    }\r\n\r\n    function _checkCallResult(bool _success) internal pure {\r\n        if (!_success) {\r\n            // Copy revert reason from call\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address[14]\",\"name\":\"addrs\",\"type\":\"address[14]\"},{\"internalType\":\"uint256[18]\",\"name\":\"uints\",\"type\":\"uint256[18]\"},{\"internalType\":\"uint8[8]\",\"name\":\"feeMethodsSidesKindsHowToCalls\",\"type\":\"uint8[8]\"},{\"internalType\":\"bytes\",\"name\":\"calldataBuy\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"calldataSell\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"replacementPatternBuy\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"replacementPatternSell\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"staticExtradataBuy\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"staticExtradataSell\",\"type\":\"bytes\"},{\"internalType\":\"uint8[2]\",\"name\":\"vs\",\"type\":\"uint8[2]\"},{\"internalType\":\"bytes32[5]\",\"name\":\"rssMetadata\",\"type\":\"bytes32[5]\"}],\"internalType\":\"struct BuyOpenSeaTestnet.OpenSeaBuy[]\",\"name\":\"openSeaBuys\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"revertIfTrxFails\",\"type\":\"bool\"}],\"name\":\"buyAssetsForEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"buyOpenSea\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[14]\",\"name\":\"addrs\",\"type\":\"address[14]\"},{\"internalType\":\"uint256[18]\",\"name\":\"uints\",\"type\":\"uint256[18]\"},{\"internalType\":\"uint8[8]\",\"name\":\"feeMethodsSidesKindsHowToCalls\",\"type\":\"uint8[8]\"},{\"internalType\":\"bytes\",\"name\":\"calldataBuy\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"calldataSell\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"replacementPatternBuy\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"replacementPatternSell\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"staticExtradataBuy\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"staticExtradataSell\",\"type\":\"bytes\"},{\"internalType\":\"uint8[2]\",\"name\":\"vs\",\"type\":\"uint8[2]\"},{\"internalType\":\"bytes32[5]\",\"name\":\"rssMetadata\",\"type\":\"bytes32[5]\"}],\"internalType\":\"struct BuyOpenSeaTestnet.OpenSeaBuy\",\"name\":\"_openSeaBuy\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_revertIfTrxFails\",\"type\":\"bool\"}],\"name\":\"buySingleAssetForEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[14]\",\"name\":\"addrs\",\"type\":\"address[14]\"},{\"internalType\":\"uint256[18]\",\"name\":\"uints\",\"type\":\"uint256[18]\"},{\"internalType\":\"uint8[8]\",\"name\":\"feeMethodsSidesKindsHowToCalls\",\"type\":\"uint8[8]\"},{\"internalType\":\"bytes\",\"name\":\"calldataBuy\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"calldataSell\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"replacementPatternBuy\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"replacementPatternSell\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"staticExtradataBuy\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"staticExtradataSell\",\"type\":\"bytes\"},{\"internalType\":\"uint8[2]\",\"name\":\"vs\",\"type\":\"uint8[2]\"},{\"internalType\":\"bytes32[5]\",\"name\":\"rssMetadata\",\"type\":\"bytes32[5]\"}],\"internalType\":\"struct BuyOpenSeaTestnet.OpenSeaBuy\",\"name\":\"_openSeaBuy\",\"type\":\"tuple\"}],\"name\":\"checkEncodedData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkOpenSeaSelector\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSea\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BuyOpenSeaTestnet", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://948d3a4dca5cf315335b779d5e02f800614d62d09e51e1f4f99e1c364f87b837"}]}