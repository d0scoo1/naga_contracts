{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Batcher/Batcher.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IBatcher.sol\\\";\\nimport \\\"../../interfaces/IVault.sol\\\";\\nimport \\\"../../interfaces/IWETH9.sol\\\";\\nimport \\\"./EIP712.sol\\\";\\n\\n/// @title Batcher\\n/// @author 0xAd1, Bapireddy\\n/// @notice Used to batch user deposits and withdrawals until the next rebalance\\ncontract Batcher is IBatcher, EIP712, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice WETH token address on mainnet\\n    IWETH9 public immutable WETH;\\n\\n    /// @notice Vault parameters for the batcher\\n    VaultInfo public vaultInfo;\\n\\n    /// @notice Enforces signature checking on deposits\\n    bool public checkValidDepositSignature;\\n\\n    /// @notice Creates a new Batcher strictly linked to a vault\\n    /// @param _verificationAuthority Address of the verification authority which allows users to deposit\\n    /// @param vaultAddress Address of the vault which will be used to deposit and withdraw want tokens\\n    /// @param maxAmount Maximum amount of tokens that can be deposited in the vault\\n    constructor(\\n        address _verificationAuthority,\\n        address vaultAddress,\\n        uint256 maxAmount\\n    ) {\\n        verificationAuthority = _verificationAuthority;\\n        checkValidDepositSignature = true;\\n\\n        require(vaultAddress != address(0), \\\"NULL_ADDRESS\\\");\\n        vaultInfo = VaultInfo({\\n            vaultAddress: vaultAddress,\\n            tokenAddress: IVault(vaultAddress).wantToken(),\\n            maxAmount: maxAmount\\n        });\\n\\n        WETH = IWETH9(vaultInfo.tokenAddress);\\n\\n        IERC20(vaultInfo.tokenAddress).approve(vaultAddress, type(uint256).max);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       USER DEPOSIT/WITHDRAWAL LOGIC\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Ledger to maintain addresses and their amounts to be deposited into vault\\n    mapping(address => uint256) public depositLedger;\\n\\n    /// @notice Ledger to maintain addresses and their amounts to be withdrawn from vault\\n    mapping(address => uint256) public withdrawLedger;\\n\\n    /// @notice Address which authorises users to deposit into Batcher\\n    address public verificationAuthority;\\n\\n    /// @notice Amount of want tokens pending to be deposited\\n    uint256 public pendingDeposit;\\n\\n    /// @notice Amount of LP tokens pending to be exchanged back to want token\\n    uint256 public pendingWithdrawal;\\n\\n    /**\\n     * @notice Stores the deposits for future batching via periphery\\n     * @param amountIn Value of token to be deposited. It will be ignored if txn is sent with native ETH\\n     * @param signature signature verifying that recipient has enough karma and is authorized to deposit by brahma\\n     * @param recipient address receiving the shares issued by vault\\n     */\\n    function depositFunds(\\n        uint256 amountIn,\\n        bytes memory signature,\\n        address recipient\\n    ) external payable override nonReentrant {\\n        validDeposit(recipient, signature);\\n\\n        uint256 wethBalanceBeforeTransfer = WETH.balanceOf(address(this));\\n\\n        /// Checks wei sent with txn\\n        uint256 ethSent = msg.value;\\n\\n        /// Convert wei if sent\\n        if (ethSent > 0) {\\n            amountIn = ethSent;\\n            WETH.deposit{value: ethSent}();\\n        }\\n        /// If no wei sent, use amountIn and transfer WETH from txn sender\\n        else {\\n            IERC20(vaultInfo.tokenAddress).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                amountIn\\n            );\\n        }\\n\\n        uint256 wethBalanceAfterTransfer = WETH.balanceOf(address(this));\\n\\n        /// Check in both cases for WETH balance increase to be correct\\n        assert(\\n            wethBalanceAfterTransfer - wethBalanceBeforeTransfer == amountIn\\n        );\\n\\n        require(\\n            IERC20(vaultInfo.vaultAddress).totalSupply() +\\n                pendingDeposit -\\n                pendingWithdrawal +\\n                amountIn <=\\n                vaultInfo.maxAmount,\\n            \\\"MAX_LIMIT_EXCEEDED\\\"\\n        );\\n\\n        depositLedger[recipient] = depositLedger[recipient] + (amountIn);\\n        pendingDeposit = pendingDeposit + amountIn;\\n\\n        emit DepositRequest(recipient, vaultInfo.vaultAddress, amountIn);\\n    }\\n\\n    /**\\n     * @notice User deposits vault LP tokens to be withdrawn. Stores the deposits for future batching via periphery\\n     * @param amountIn Value of token to be deposited\\n     */\\n    function initiateWithdrawal(uint256 amountIn)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        require(depositLedger[msg.sender] == 0, \\\"DEPOSIT_PENDING\\\");\\n\\n        require(amountIn > 0, \\\"AMOUNT_IN_ZERO\\\");\\n\\n        if (amountIn > userLPTokens[msg.sender]) {\\n            IERC20(vaultInfo.vaultAddress).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                amountIn - userLPTokens[msg.sender]\\n            );\\n            userLPTokens[msg.sender] = 0;\\n        } else {\\n            userLPTokens[msg.sender] = userLPTokens[msg.sender] - amountIn;\\n        }\\n\\n        withdrawLedger[msg.sender] = withdrawLedger[msg.sender] + (amountIn);\\n\\n        pendingWithdrawal = pendingWithdrawal + amountIn;\\n\\n        emit WithdrawRequest(msg.sender, vaultInfo.vaultAddress, amountIn);\\n    }\\n\\n    /**\\n     * @notice Allows user to collect want token back after successfull batch withdrawal\\n     * @param amountOut Amount of token to be withdrawn\\n     */\\n    function completeWithdrawal(uint256 amountOut, address recipient)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        require(amountOut != 0, \\\"INVALID_AMOUNTOUT\\\");\\n\\n        // Will revert if not enough balance\\n        userWantTokens[recipient] = userWantTokens[recipient] - amountOut;\\n        IERC20(vaultInfo.tokenAddress).safeTransfer(recipient, amountOut);\\n\\n        emit WithdrawComplete(recipient, vaultInfo.vaultAddress, amountOut);\\n    }\\n\\n    /**\\n     * @notice Can be used to send LP tokens owed to the recipient\\n     * @param amount Amount of LP tokens to withdraw\\n     * @param recipient Address to receive the LP tokens\\n     */\\n    function claimTokens(uint256 amount, address recipient)\\n        public\\n        override\\n        nonReentrant\\n    {\\n        require(userLPTokens[recipient] >= amount, \\\"NO_FUNDS\\\");\\n        userLPTokens[recipient] = userLPTokens[recipient] - amount;\\n        IERC20(vaultInfo.vaultAddress).safeTransfer(recipient, amount);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    VAULT DEPOSIT/WITHDRAWAL LOGIC\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Ledger to maintain addresses and vault LP tokens which batcher owes them\\n    mapping(address => uint256) public userLPTokens;\\n\\n    /// @notice Ledger to maintain addresses and vault want tokens which batcher owes them\\n    mapping(address => uint256) public userWantTokens;\\n\\n    /**\\n     * @notice Performs deposits on the periphery for the supplied users in batch\\n     * @param users array of users whose deposits must be resolved\\n     */\\n    function batchDeposit(address[] memory users)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        onlyKeeper();\\n        IVault vault = IVault(vaultInfo.vaultAddress);\\n\\n        uint256 amountToDeposit = 0;\\n        uint256 oldLPBalance = IERC20(address(vault)).balanceOf(address(this));\\n\\n        // Temprorary array to hold user deposit info and check for duplicate addresses\\n        uint256[] memory depositValues = new uint256[](users.length);\\n\\n        for (uint256 i = 0; i < users.length; i++) {\\n            // Copies deposit value from ledger to temporary array\\n            uint256 userDeposit = depositLedger[users[i]];\\n            amountToDeposit = amountToDeposit + userDeposit;\\n            depositValues[i] = userDeposit;\\n\\n            // deposit ledger for that address is set to zero\\n            // Incase of duplicate address sent, new deposit amount used for same user will be 0\\n            depositLedger[users[i]] = 0;\\n        }\\n\\n        require(amountToDeposit > 0, \\\"NO_DEPOSITS\\\");\\n\\n        uint256 lpTokensReportedByVault = vault.deposit(\\n            amountToDeposit,\\n            address(this)\\n        );\\n\\n        uint256 lpTokensReceived = IERC20(address(vault)).balanceOf(\\n            address(this)\\n        ) - (oldLPBalance);\\n\\n        require(\\n            lpTokensReceived == lpTokensReportedByVault,\\n            \\\"LP_TOKENS_MISMATCH\\\"\\n        );\\n\\n        uint256 totalUsersProcessed = 0;\\n\\n        for (uint256 i = 0; i < users.length; i++) {\\n            uint256 userAmount = depositValues[i];\\n\\n            // Checks if userAmount is not 0, only then proceed to allocate LP tokens\\n            if (userAmount > 0) {\\n                uint256 userShare = (userAmount * (lpTokensReceived)) /\\n                    (amountToDeposit);\\n\\n                // Allocating LP tokens to user, can be calimed by the user later by calling claimTokens\\n                userLPTokens[users[i]] = userLPTokens[users[i]] + userShare;\\n                ++totalUsersProcessed;\\n            }\\n        }\\n\\n        pendingDeposit = pendingDeposit - amountToDeposit;\\n\\n        emit BatchDepositSuccessful(lpTokensReceived, totalUsersProcessed);\\n    }\\n\\n    /**\\n     * @notice Performs withdraws on the periphery for the supplied users in batch\\n     * @param users array of users whose deposits must be resolved\\n     */\\n    function batchWithdraw(address[] memory users)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        onlyKeeper();\\n        IVault vault = IVault(vaultInfo.vaultAddress);\\n\\n        IERC20 token = IERC20(vaultInfo.tokenAddress);\\n\\n        uint256 amountToWithdraw = 0;\\n        uint256 oldWantBalance = token.balanceOf(address(this));\\n\\n        // Temprorary array to hold user withdrawal info and check for duplicate addresses\\n        uint256[] memory withdrawValues = new uint256[](users.length);\\n\\n        for (uint256 i = 0; i < users.length; i++) {\\n            uint256 userWithdraw = withdrawLedger[users[i]];\\n            amountToWithdraw = amountToWithdraw + userWithdraw;\\n            withdrawValues[i] = userWithdraw;\\n\\n            // Withdrawal ledger for that address is set to zero\\n            // Incase of duplicate address sent, new withdrawal amount used for same user will be 0\\n            withdrawLedger[users[i]] = 0;\\n        }\\n\\n        require(amountToWithdraw > 0, \\\"NO_WITHDRAWS\\\");\\n\\n        uint256 wantTokensReportedByVault = vault.withdraw(\\n            amountToWithdraw,\\n            address(this)\\n        );\\n\\n        uint256 wantTokensReceived = token.balanceOf(address(this)) -\\n            (oldWantBalance);\\n\\n        require(\\n            wantTokensReceived == wantTokensReportedByVault,\\n            \\\"WANT_TOKENS_MISMATCH\\\"\\n        );\\n\\n        uint256 totalUsersProcessed = 0;\\n\\n        for (uint256 i = 0; i < users.length; i++) {\\n            uint256 userAmount = withdrawValues[i];\\n\\n            // Checks if userAmount is not 0, only then proceed to allocate want tokens\\n            if (userAmount > 0) {\\n                uint256 userShare = (userAmount * wantTokensReceived) /\\n                    amountToWithdraw;\\n\\n                // Allocating want tokens to user. Can be claimed by the user by calling completeWithdrawal\\n                userWantTokens[users[i]] = userWantTokens[users[i]] + userShare;\\n                ++totalUsersProcessed;\\n            }\\n        }\\n\\n        pendingWithdrawal = pendingWithdrawal - amountToWithdraw;\\n\\n        emit BatchWithdrawSuccessful(wantTokensReceived, totalUsersProcessed);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    INTERNAL HELPERS\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Helper to verify signature against verification authority\\n    /// @param signature Should be generated by verificationAuthority. Should contain msg.sender\\n    function validDeposit(address recipient, bytes memory signature)\\n        internal\\n        view\\n    {\\n        if (checkValidDepositSignature) {\\n            require(\\n                verifySignatureAgainstAuthority(\\n                    recipient,\\n                    signature,\\n                    verificationAuthority\\n                ),\\n                \\\"INVALID_SIGNATURE\\\"\\n            );\\n        }\\n\\n        require(withdrawLedger[msg.sender] == 0, \\\"WITHDRAW_PENDING\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    MAINTAINANCE ACTIONS\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to set authority address\\n    /// @param authority New authority address\\n    function setAuthority(address authority) public {\\n        onlyGovernance();\\n\\n        // Logging old and new verification authority\\n        emit VerificationAuthorityUpdated(verificationAuthority, authority);\\n        verificationAuthority = authority;\\n    }\\n\\n    /// @inheritdoc IBatcher\\n    function setVaultLimit(uint256 maxAmount) external override {\\n        onlyGovernance();\\n        vaultInfo.maxAmount = maxAmount;\\n    }\\n\\n    /// @notice Function to enable/disable deposit signature check\\n    function setDepositSignatureCheck(bool enabled) public {\\n        onlyGovernance();\\n        checkValidDepositSignature = enabled;\\n    }\\n\\n    /// @notice Function to sweep funds out in case of emergency, can only be called by governance\\n    /// @param _token Address of token to sweep\\n    function sweep(address _token) public nonReentrant {\\n        onlyGovernance();\\n        IERC20(_token).transfer(\\n            msg.sender,\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    ACCESS MODIFERS\\n  //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Helper to get Governance address from Vault contract\\n    /// @return Governance address\\n    function governance() public view returns (address) {\\n        return IVault(vaultInfo.vaultAddress).governance();\\n    }\\n\\n    /// @notice Helper to get Keeper address from Vault contract\\n    /// @return Keeper address\\n    function keeper() public view returns (address) {\\n        return IVault(vaultInfo.vaultAddress).keeper();\\n    }\\n\\n    /// @notice Helper to assert msg.sender as keeper address\\n    function onlyKeeper() internal view {\\n        require(msg.sender == keeper(), \\\"ONLY_KEEPER\\\");\\n    }\\n\\n    /// @notice Helper to asset msg.sender as governance address\\n    function onlyGovernance() internal view {\\n        require(governance() == msg.sender, \\\"ONLY_GOV\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Batcher/interfaces/IBatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IBatcher\\n * @notice A batcher to resolve vault deposits/withdrawals in batches\\n * @dev Provides an interface for Batcher\\n */\\ninterface IBatcher {\\n    /// @notice Data structure to store vault info\\n    /// @param vaultAddress Address of the vault\\n    /// @param tokenAddress Address vault's want token\\n    /// @param maxAmount Max amount of tokens to deposit in vault\\n    /// @param currentAmount Current amount of wantTokens deposited in the vault\\n    struct VaultInfo {\\n        address vaultAddress;\\n        address tokenAddress;\\n        uint256 maxAmount;\\n    }\\n\\n    /// @notice Deposit event\\n    /// @param sender Address of the depositor\\n    /// @param vault Address of the vault\\n    /// @param amountIn Tokens deposited\\n    event DepositRequest(\\n        address indexed sender,\\n        address indexed vault,\\n        uint256 amountIn\\n    );\\n\\n    /// @notice Withdraw initiate event\\n    /// @param sender Address of the withdawer\\n    /// @param vault Address of the vault\\n    /// @param amountOut Tokens deposited\\n    event WithdrawRequest(\\n        address indexed sender,\\n        address indexed vault,\\n        uint256 amountOut\\n    );\\n\\n    /// @notice Batch Deposit event\\n    /// @param amountIn Tokens deposited\\n    /// @param totalUsers Total number of users in the batch\\n    event BatchDepositSuccessful(uint256 amountIn, uint256 totalUsers);\\n\\n    /// @notice Batch Withdraw event\\n    /// @param amountOut Tokens withdrawn\\n    /// @param totalUsers Total number of users in the batch\\n    event BatchWithdrawSuccessful(uint256 amountOut, uint256 totalUsers);\\n\\n    /// @notice Withdraw complete event\\n    /// @param sender Address of the withdawer\\n    /// @param vault Address of the vault\\n    /// @param amountOut Tokens deposited\\n    event WithdrawComplete(\\n        address indexed sender,\\n        address indexed vault,\\n        uint256 amountOut\\n    );\\n\\n    /// @notice Verification authority update event\\n    /// @param oldVerificationAuthority address of old verification authority\\n    /// @param newVerificationAuthority address of new verification authority\\n    event VerificationAuthorityUpdated(\\n        address indexed oldVerificationAuthority,\\n        address indexed newVerificationAuthority\\n    );\\n\\n    function depositFunds(\\n        uint256 amountIn,\\n        bytes memory signature,\\n        address recipient\\n    ) external payable;\\n\\n    function claimTokens(uint256 amount, address recipient) external;\\n\\n    function initiateWithdrawal(uint256 amountIn) external;\\n\\n    function completeWithdrawal(uint256 amountOut, address recipient) external;\\n\\n    function batchDeposit(address[] memory users) external;\\n\\n    function batchWithdraw(address[] memory users) external;\\n\\n    function setVaultLimit(uint256 maxLimit) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/IVault.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function keeper() external view returns (address);\\n\\n    function governance() external view returns (address);\\n\\n    function wantToken() external view returns (address);\\n\\n    function deposit(uint256 amountIn, address receiver)\\n        external\\n        returns (uint256 shares);\\n\\n    function withdraw(uint256 sharesIn, address receiver)\\n        external\\n        returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"interfaces/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Batcher/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title EIP712\\n/// @author 0xAd1\\n/// @notice Used to verify signatures\\ncontract EIP712 {\\n    /// @notice Verifies a signature against alleged signer of the signature\\n    /// @param signature Signature to verify\\n    /// @param authority Signer of the signature\\n    /// @return True if the signature is signed by authority\\n    function verifySignatureAgainstAuthority(\\n        address recipient,\\n        bytes memory signature,\\n        address authority\\n    ) internal view returns (bool) {\\n        bytes32 eip712DomainHash = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(\\\"Batcher\\\")),\\n                keccak256(bytes(\\\"1\\\")),\\n                1,\\n                address(this)\\n            )\\n        );\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(keccak256(\\\"deposit(address owner)\\\"), recipient)\\n        );\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", eip712DomainHash, hashStruct)\\n        );\\n\\n        address signer = ECDSA.recover(hash, signature);\\n        require(signer == authority, \\\"ECDSA: Invalid authority\\\");\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationAuthority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"}],\"name\":\"BatchDepositSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"}],\"name\":\"BatchWithdrawSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"DepositRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldVerificationAuthority\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVerificationAuthority\",\"type\":\"address\"}],\"name\":\"VerificationAuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"WithdrawComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"batchWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkValidDepositSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"completeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"initiateWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDepositSignatureCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"setVaultLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLPTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWantTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Batcher", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000687f4304df62449dbc6c95fe9a8cb1153d40d42e000000000000000000000000aa0508fcd0352b206f558b2b817dcc1f0cc3f40100000000000000000000000000000000000000000000001211ede4974a355555", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}