{"status": "1", "message": "OK", "result": [{"SourceCode": "// Verified using https://dapp.tools\n\n// hevm: flattened sources of /nix/store/fs14a1fn2n0n355szi63iq33n5yzygnk-geb/dapp/geb/src/AccountingEngine.sol\n\npragma solidity =0.6.7;\n\n////// /nix/store/fs14a1fn2n0n355szi63iq33n5yzygnk-geb/dapp/geb/src/AccountingEngine.sol\n/// AccountingEngine.sol\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.7; */\n\nabstract contract DebtAuctionHouseLike {\n    function startAuction(address incomeReceiver, uint256 amountToSell, uint256 initialBid) virtual public returns (uint256);\n    function protocolToken() virtual public view returns (address);\n    function disableContract() virtual external;\n    function contractEnabled() virtual public view returns (uint256);\n}\n\nabstract contract SurplusAuctionHouseLike {\n    function startAuction(uint256, uint256) virtual public returns (uint256);\n    function protocolToken() virtual public view returns (address);\n    function disableContract() virtual external;\n    function contractEnabled() virtual public view returns (uint256);\n}\n\nabstract contract SAFEEngineLike_2 {\n    function coinBalance(address) virtual public view returns (uint256);\n    function debtBalance(address) virtual public view returns (uint256);\n    function settleDebt(uint256) virtual external;\n    function transferInternalCoins(address,address,uint256) virtual external;\n    function approveSAFEModification(address) virtual external;\n    function denySAFEModification(address) virtual external;\n}\n\nabstract contract SystemStakingPoolLike {\n    function canPrintProtocolTokens() virtual public view returns (bool);\n}\n\nabstract contract ProtocolTokenAuthorityLike {\n    function authorizedAccounts(address) virtual public view returns (uint256);\n}\n\ncontract AccountingEngine {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        require(contractEnabled == 1, \"AccountingEngine/contract-not-enabled\");\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"AccountingEngine/account-not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    // SAFE database\n    SAFEEngineLike_2             public safeEngine;\n    // Contract that handles auctions for surplus stability fees (sell coins for protocol tokens that are then burned)\n    SurplusAuctionHouseLike    public surplusAuctionHouse;\n    /**\n      Contract that handles auctions for debt that couldn't be covered by collateral\n      auctions (it prints protocol tokens in exchange for coins that will settle the debt)\n    **/\n    DebtAuctionHouseLike       public debtAuctionHouse;\n    // Permissions registry for who can burn and mint protocol tokens\n    ProtocolTokenAuthorityLike public protocolTokenAuthority;\n    // Staking pool for protocol tokens\n    SystemStakingPoolLike      public systemStakingPool;\n    // Contract that auctions extra surplus after settlement is triggered\n    address                    public postSettlementSurplusDrain;\n    // Address that receives extra surplus transfers\n    address                    public extraSurplusReceiver;\n\n    /**\n      Debt blocks that need to be covered by auctions. There is a delay to pop debt from\n      this queue and either settle it with surplus that came from collateral auctions or with debt auctions\n      that print protocol tokens\n    **/\n    mapping (uint256 => uint256) public debtQueue;          // [unix timestamp => rad]\n    // Addresses that popped debt out of the queue\n    mapping (uint256 => address) public debtPoppers;        // [unix timestamp => address]\n    // Total debt in the queue (that the system tries to cover with collateral auctions)\n    uint256 public totalQueuedDebt;                         // [rad]\n    // Total debt being auctioned in DebtAuctionHouse (printing protocol tokens for coins that will settle the debt)\n    uint256 public totalOnAuctionDebt;                      // [rad]\n    // When the last surplus auction was triggered\n    uint256 public lastSurplusAuctionTime;                  // [unix timestamp]\n    // When the last surplus transfer was triggered\n    uint256 public lastSurplusTransferTime;                 // [unix timestamp]\n    // Delay between surplus auctions\n    uint256 public surplusAuctionDelay;                     // [seconds]\n    // Delay between extra surplus transfers\n    uint256 public surplusTransferDelay;                    // [seconds]\n    // Delay after which debt can be popped from debtQueue\n    uint256 public popDebtDelay;                            // [seconds]\n    // Amount of protocol tokens to be minted post-auction\n    uint256 public initialDebtAuctionMintedTokens;          // [wad]\n    // Amount of debt sold in one debt auction (initial coin bid for initialDebtAuctionMintedTokens protocol tokens)\n    uint256 public debtAuctionBidSize;                      // [rad]\n\n    // Whether the system transfers surplus instead of auctioning it\n    uint256 public extraSurplusIsTransferred;\n    // Amount of surplus stability fees sold in one surplus auction\n    uint256 public surplusAuctionAmountToSell;              // [rad]\n    // Amount of extra surplus to transfer\n    uint256 public surplusTransferAmount;                   // [rad]\n    // Amount of stability fees that need to accrue in this contract before any surplus auction can start\n    uint256 public surplusBuffer;                           // [rad]\n\n    // Time to wait (post settlement) until any remaining surplus can be transferred to the settlement auctioneer\n    uint256 public disableCooldown;                         // [seconds]\n    // When the contract was disabled\n    uint256 public disableTimestamp;                        // [unix timestamp]\n\n    // Whether this contract is enabled or not\n    uint256 public contractEnabled;\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event ModifyParameters(bytes32 indexed parameter, uint256 data);\n    event ModifyParameters(bytes32 indexed parameter, address data);\n    event PushDebtToQueue(uint256 indexed timestamp, uint256 debtQueueBlock, uint256 totalQueuedDebt);\n    event PopDebtFromQueue(uint256 indexed timestamp, uint256 debtQueueBlock, uint256 totalQueuedDebt);\n    event SettleDebt(uint256 rad, uint256 coinBalance, uint256 debtBalance);\n    event CancelAuctionedDebtWithSurplus(uint rad, uint256 totalOnAuctionDebt, uint256 coinBalance, uint256 debtBalance);\n    event AuctionDebt(uint256 indexed id, uint256 totalOnAuctionDebt, uint256 debtBalance);\n    event AuctionSurplus(uint256 indexed id, uint256 lastSurplusAuctionTime, uint256 coinBalance);\n    event DisableContract(uint256 disableTimestamp, uint256 disableCooldown, uint256 coinBalance, uint256 debtBalance);\n    event TransferPostSettlementSurplus(address postSettlementSurplusDrain, uint256 coinBalance, uint256 debtBalance);\n    event TransferExtraSurplus(address indexed extraSurplusReceiver, uint256 lastSurplusAuctionTime, uint256 coinBalance);\n\n    // --- Init ---\n    constructor(\n      address safeEngine_,\n      address surplusAuctionHouse_,\n      address debtAuctionHouse_\n    ) public {\n        authorizedAccounts[msg.sender] = 1;\n\n        safeEngine                     = SAFEEngineLike_2(safeEngine_);\n        surplusAuctionHouse            = SurplusAuctionHouseLike(surplusAuctionHouse_);\n        debtAuctionHouse               = DebtAuctionHouseLike(debtAuctionHouse_);\n\n        safeEngine.approveSAFEModification(surplusAuctionHouse_);\n\n        lastSurplusAuctionTime         = now;\n        lastSurplusTransferTime        = now;\n        contractEnabled                = 1;\n\n        emit AddAuthorization(msg.sender);\n    }\n\n    // --- Math ---\n    function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"AccountingEngine/add-overflow\");\n    }\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"AccountingEngine/sub-underflow\");\n    }\n    function minimum(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    // --- Administration ---\n    /**\n     * @notice Modify an uint256 param\n     * @param parameter The name of the parameter modified\n     * @param data New value for the parameter\n     */\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n        if (parameter == \"surplusAuctionDelay\") surplusAuctionDelay = data;\n        else if (parameter == \"surplusTransferDelay\") surplusTransferDelay = data;\n        else if (parameter == \"popDebtDelay\") popDebtDelay = data;\n        else if (parameter == \"surplusAuctionAmountToSell\") surplusAuctionAmountToSell = data;\n        else if (parameter == \"surplusTransferAmount\") surplusTransferAmount = data;\n        else if (parameter == \"extraSurplusIsTransferred\") extraSurplusIsTransferred = data;\n        else if (parameter == \"debtAuctionBidSize\") debtAuctionBidSize = data;\n        else if (parameter == \"initialDebtAuctionMintedTokens\") initialDebtAuctionMintedTokens = data;\n        else if (parameter == \"surplusBuffer\") surplusBuffer = data;\n        else if (parameter == \"lastSurplusTransferTime\") {\n          require(data > now, \"AccountingEngine/invalid-lastSurplusTransferTime\");\n          lastSurplusTransferTime = data;\n        }\n        else if (parameter == \"lastSurplusAuctionTime\") {\n          require(data > now, \"AccountingEngine/invalid-lastSurplusAuctionTime\");\n          lastSurplusAuctionTime = data;\n        }\n        else if (parameter == \"disableCooldown\") disableCooldown = data;\n        else revert(\"AccountingEngine/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n    /**\n     * @notice Modify an address param\n     * @param parameter The name of the parameter\n     * @param data New address for the parameter\n     */\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\n        if (parameter == \"surplusAuctionHouse\") {\n            safeEngine.denySAFEModification(address(surplusAuctionHouse));\n            surplusAuctionHouse = SurplusAuctionHouseLike(data);\n            safeEngine.approveSAFEModification(data);\n        }\n        else if (parameter == \"systemStakingPool\") {\n            systemStakingPool = SystemStakingPoolLike(data);\n            systemStakingPool.canPrintProtocolTokens();\n        }\n        else if (parameter == \"debtAuctionHouse\") debtAuctionHouse = DebtAuctionHouseLike(data);\n        else if (parameter == \"postSettlementSurplusDrain\") postSettlementSurplusDrain = data;\n        else if (parameter == \"protocolTokenAuthority\") protocolTokenAuthority = ProtocolTokenAuthorityLike(data);\n        else if (parameter == \"extraSurplusReceiver\") extraSurplusReceiver = data;\n        else revert(\"AccountingEngine/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n\n    // --- Getters ---\n    /*\n    * @notice Returns the amount of bad debt that is not in the debtQueue and is not currently handled by debt auctions\n    */\n    function unqueuedUnauctionedDebt() public view returns (uint256) {\n        return subtract(subtract(safeEngine.debtBalance(address(this)), totalQueuedDebt), totalOnAuctionDebt);\n    }\n    /*\n    * @notify Returns a bool indicating whether the AccountingEngine can currently print protocol tokens using debt auctions\n    */\n    function canPrintProtocolTokens() public view returns (bool) {\n        if (address(systemStakingPool) == address(0)) return true;\n        try systemStakingPool.canPrintProtocolTokens() returns (bool ok) {\n          return ok;\n        } catch(bytes memory) {\n          return true;\n        }\n    }\n\n    // --- Debt Queueing ---\n    /**\n     * @notice Push bad debt into a queue\n     * @dev Debt is locked in a queue to give the system enough time to auction collateral\n     *      and gather surplus\n     * @param debtBlock Amount of debt to push\n     */\n    function pushDebtToQueue(uint256 debtBlock) external isAuthorized {\n        debtQueue[now] = addition(debtQueue[now], debtBlock);\n        totalQueuedDebt = addition(totalQueuedDebt, debtBlock);\n        emit PushDebtToQueue(now, debtQueue[now], totalQueuedDebt);\n    }\n    /**\n     * @notice Pop a block of bad debt from the debt queue\n     * @dev A block of debt can be popped from the queue after popDebtDelay seconds have passed since it was\n     *         added there\n     * @param debtBlockTimestamp Timestamp of the block of debt that should be popped out\n     */\n    function popDebtFromQueue(uint256 debtBlockTimestamp) external {\n        require(addition(debtBlockTimestamp, popDebtDelay) <= now, \"AccountingEngine/pop-debt-delay-not-passed\");\n        require(debtQueue[debtBlockTimestamp] > 0, \"AccountingEngine/null-debt-block\");\n        totalQueuedDebt = subtract(totalQueuedDebt, debtQueue[debtBlockTimestamp]);\n        debtPoppers[debtBlockTimestamp] = msg.sender;\n        emit PopDebtFromQueue(now, debtQueue[debtBlockTimestamp], totalQueuedDebt);\n        debtQueue[debtBlockTimestamp] = 0;\n    }\n\n    // Debt settlement\n    /**\n     * @notice Destroy an equal amount of coins and bad debt\n     * @dev We can only destroy debt that is not locked in the queue and also not in a debt auction\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\n    **/\n    function settleDebt(uint256 rad) public {\n        require(rad <= safeEngine.coinBalance(address(this)), \"AccountingEngine/insufficient-surplus\");\n        require(rad <= unqueuedUnauctionedDebt(), \"AccountingEngine/insufficient-debt\");\n        safeEngine.settleDebt(rad);\n        emit SettleDebt(rad, safeEngine.coinBalance(address(this)), safeEngine.debtBalance(address(this)));\n    }\n    /**\n     * @notice Use surplus coins to destroy debt that was in a debt auction\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\n    **/\n    function cancelAuctionedDebtWithSurplus(uint256 rad) external {\n        require(rad <= totalOnAuctionDebt, \"AccountingEngine/not-enough-debt-being-auctioned\");\n        require(rad <= safeEngine.coinBalance(address(this)), \"AccountingEngine/insufficient-surplus\");\n        totalOnAuctionDebt = subtract(totalOnAuctionDebt, rad);\n        safeEngine.settleDebt(rad);\n        emit CancelAuctionedDebtWithSurplus(rad, totalOnAuctionDebt, safeEngine.coinBalance(address(this)), safeEngine.debtBalance(address(this)));\n    }\n\n    // Debt auction\n    /**\n     * @notice Start a debt auction (print protocol tokens in exchange for coins so that the\n     *         system can be recapitalized)\n     * @dev We can only auction debt that is not already being auctioned and is not locked in the debt queue\n    **/\n    function auctionDebt() external returns (uint256 id) {\n        require(debtAuctionBidSize <= unqueuedUnauctionedDebt(), \"AccountingEngine/insufficient-debt\");\n        settleDebt(safeEngine.coinBalance(address(this)));\n        require(safeEngine.coinBalance(address(this)) == 0, \"AccountingEngine/surplus-not-zero\");\n        require(debtAuctionHouse.protocolToken() != address(0), \"AccountingEngine/debt-auction-house-null-prot\");\n        require(protocolTokenAuthority.authorizedAccounts(address(debtAuctionHouse)) == 1, \"AccountingEngine/debt-auction-house-cannot-print-prot\");\n        require(canPrintProtocolTokens(), \"AccountingEngine/staking-pool-denies-printing\");\n        totalOnAuctionDebt = addition(totalOnAuctionDebt, debtAuctionBidSize);\n        id = debtAuctionHouse.startAuction(address(this), initialDebtAuctionMintedTokens, debtAuctionBidSize);\n        emit AuctionDebt(id, totalOnAuctionDebt, safeEngine.debtBalance(address(this)));\n    }\n\n    // Surplus auction\n    /**\n     * @notice Start a surplus auction\n     * @dev We can only auction surplus if we wait at least 'surplusAuctionDelay' seconds since the last\n     *      surplus auction trigger, if we keep enough surplus in the buffer and if there is no bad debt left to settle\n    **/\n    function auctionSurplus() external returns (uint256 id) {\n        require(extraSurplusIsTransferred != 1, \"AccountingEngine/surplus-transfer-no-auction\");\n        require(surplusAuctionAmountToSell > 0, \"AccountingEngine/null-amount-to-auction\");\n        settleDebt(unqueuedUnauctionedDebt());\n        require(\n          now >= addition(lastSurplusAuctionTime, surplusAuctionDelay),\n          \"AccountingEngine/surplus-auction-delay-not-passed\"\n        );\n        require(\n          safeEngine.coinBalance(address(this)) >=\n          addition(addition(safeEngine.debtBalance(address(this)), surplusAuctionAmountToSell), surplusBuffer),\n          \"AccountingEngine/insufficient-surplus\"\n        );\n        require(\n          unqueuedUnauctionedDebt() == 0,\n          \"AccountingEngine/debt-not-zero\"\n        );\n        require(surplusAuctionHouse.protocolToken() != address(0), \"AccountingEngine/surplus-auction-house-null-prot\");\n        lastSurplusAuctionTime  = now;\n        lastSurplusTransferTime = now;\n        id = surplusAuctionHouse.startAuction(surplusAuctionAmountToSell, 0);\n        emit AuctionSurplus(id, lastSurplusAuctionTime, safeEngine.coinBalance(address(this)));\n    }\n\n    // Extra surplus transfers/surplus auction alternative\n    /**\n     * @notice Send surplus to an address as an alternative to surplus auctions\n     * @dev We can only transfer surplus if we wait at least 'surplusTransferDelay' seconds since the last\n     *      transfer, if we keep enough surplus in the buffer and if there is no bad debt left to settle\n    **/\n    function transferExtraSurplus() external {\n        require(extraSurplusIsTransferred == 1, \"AccountingEngine/surplus-auction-not-transfer\");\n        require(extraSurplusReceiver != address(0), \"AccountingEngine/null-surplus-receiver\");\n        require(surplusTransferAmount > 0, \"AccountingEngine/null-amount-to-transfer\");\n        settleDebt(unqueuedUnauctionedDebt());\n        require(\n          now >= addition(lastSurplusTransferTime, surplusTransferDelay),\n          \"AccountingEngine/surplus-transfer-delay-not-passed\"\n        );\n        require(\n          safeEngine.coinBalance(address(this)) >=\n          addition(addition(safeEngine.debtBalance(address(this)), surplusTransferAmount), surplusBuffer),\n          \"AccountingEngine/insufficient-surplus\"\n        );\n        require(\n          unqueuedUnauctionedDebt() == 0,\n          \"AccountingEngine/debt-not-zero\"\n        );\n        lastSurplusTransferTime = now;\n        lastSurplusAuctionTime  = now;\n        safeEngine.transferInternalCoins(address(this), extraSurplusReceiver, surplusTransferAmount);\n        emit TransferExtraSurplus(extraSurplusReceiver, lastSurplusTransferTime, safeEngine.coinBalance(address(this)));\n    }\n\n    /**\n     * @notice Disable this contract (normally called by Global Settlement)\n     * @dev When it's being disabled, the contract will record the current timestamp. Afterwards,\n     *      the contract tries to settle as much debt as possible (if there's any) with any surplus that's\n     *      left in the AccountingEngine\n    **/\n    function disableContract() external isAuthorized {\n        require(contractEnabled == 1, \"AccountingEngine/contract-not-enabled\");\n\n        contractEnabled = 0;\n        totalQueuedDebt = 0;\n        totalOnAuctionDebt = 0;\n\n        disableTimestamp = now;\n\n        surplusAuctionHouse.disableContract();\n        debtAuctionHouse.disableContract();\n\n        safeEngine.settleDebt(minimum(safeEngine.coinBalance(address(this)), safeEngine.debtBalance(address(this))));\n\n        emit DisableContract(disableTimestamp, disableCooldown, safeEngine.coinBalance(address(this)), safeEngine.debtBalance(address(this)));\n    }\n    /**\n     * @notice Transfer any remaining surplus after the disable cooldown has passed. Meant to be a backup in case GlobalSettlement.processSAFE\n               has a bug, governance doesn't have power over the system and there's still surplus left in the AccountingEngine\n               which then blocks GlobalSettlement.setOutstandingCoinSupply.\n     * @dev Transfer any remaining surplus after disableCooldown seconds have passed since disabling the contract\n    **/\n    function transferPostSettlementSurplus() external {\n        require(contractEnabled == 0, \"AccountingEngine/still-enabled\");\n        require(addition(disableTimestamp, disableCooldown) <= now, \"AccountingEngine/cooldown-not-passed\");\n        safeEngine.settleDebt(minimum(safeEngine.coinBalance(address(this)), safeEngine.debtBalance(address(this))));\n        safeEngine.transferInternalCoins(address(this), postSettlementSurplusDrain, safeEngine.coinBalance(address(this)));\n        emit TransferPostSettlementSurplus(\n          postSettlementSurplusDrain,\n          safeEngine.coinBalance(address(this)),\n          safeEngine.debtBalance(address(this))\n        );\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"surplusAuctionHouse_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtAuctionHouse_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalOnAuctionDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtBalance\",\"type\":\"uint256\"}],\"name\":\"AuctionDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastSurplusAuctionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"}],\"name\":\"AuctionSurplus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalOnAuctionDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtBalance\",\"type\":\"uint256\"}],\"name\":\"CancelAuctionedDebtWithSurplus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disableTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disableCooldown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtBalance\",\"type\":\"uint256\"}],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtQueueBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalQueuedDebt\",\"type\":\"uint256\"}],\"name\":\"PopDebtFromQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtQueueBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalQueuedDebt\",\"type\":\"uint256\"}],\"name\":\"PushDebtToQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtBalance\",\"type\":\"uint256\"}],\"name\":\"SettleDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extraSurplusReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastSurplusAuctionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"}],\"name\":\"TransferExtraSurplus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"postSettlementSurplusDrain\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtBalance\",\"type\":\"uint256\"}],\"name\":\"TransferPostSettlementSurplus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canPrintProtocolTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"cancelAuctionedDebtWithSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtAuctionBidSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtAuctionHouse\",\"outputs\":[{\"internalType\":\"contract DebtAuctionHouseLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debtPoppers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debtQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraSurplusIsTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraSurplusReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDebtAuctionMintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSurplusAuctionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSurplusTransferTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"popDebtDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtBlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"popDebtFromQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postSettlementSurplusDrain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTokenAuthority\",\"outputs\":[{\"internalType\":\"contract ProtocolTokenAuthorityLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtBlock\",\"type\":\"uint256\"}],\"name\":\"pushDebtToQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"settleDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusAuctionAmountToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusAuctionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusAuctionHouse\",\"outputs\":[{\"internalType\":\"contract SurplusAuctionHouseLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusTransferDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemStakingPool\",\"outputs\":[{\"internalType\":\"contract SystemStakingPoolLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOnAuctionDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalQueuedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferExtraSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferPostSettlementSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unqueuedUnauctionedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AccountingEngine", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001e6afa340851d60e75be38494813c09b3356a0090000000000000000000000008220e2308bb51ebbe5268e36a313de30391aa603000000000000000000000000f61b21c9fbd7821c3374d314281c0e865fa844b6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}