{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/interfaces/IERC20.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/Swapper.sol\r\npragma solidity >=0.8.9;\r\n\r\n\r\ncontract SwitchParaswap {\r\n    address private PARASWAP = 0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57; // Paraswap swapper contract\r\n    address private TokenTransferProxy = 0x216B4B4Ba9F3e719726886d34a177484278Bfcae; // Tranfert token contract\r\n\r\n    function swap(address srcToken, uint256 amount, bytes memory callData) external payable {\r\n\r\n        uint256 ethAmountToTransfert = 0;\r\n\r\n        //Check if this contract have enough token or allowance\r\n        if(srcToken == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE){\r\n            require(address(this).balance >= amount, \"ETH balance is insufficient\");\r\n            ethAmountToTransfert = amount;\r\n        }else{\r\n            if(IERC20(srcToken).balanceOf(address(this)) < amount){\r\n                require(IERC20(srcToken).balanceOf(msg.sender) >= amount && IERC20(srcToken).allowance(msg.sender, address(this)) >= amount, \"msg.sender srcToken allowance/balance is insufficient\");\r\n                IERC20(srcToken).transferFrom(msg.sender, address(this), amount); // transfert srcToken from caller to this contract\r\n            }\r\n            IERC20(srcToken).approve(TokenTransferProxy, amount); // allow TokenTransferProxy to spend srcToken of this contract\r\n        }\r\n\r\n        (bool success,) = PARASWAP.call{value: ethAmountToTransfert}(callData);\r\n        require(success, \"Paraswap execution failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "SwitchParaswap", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ce949ede558b2b7dcaa43dbebe12a52af2b1d521b3d48ccf1e3e7bc05e460578"}]}