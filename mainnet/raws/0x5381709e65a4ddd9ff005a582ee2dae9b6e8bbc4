{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n\r\ninterface IUnitroller {\r\n    function getAllMarkets() external view returns (address[] memory);\r\n}\r\n\r\ninterface ICyToken {\r\n    function underlying() external view returns (address);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IOracle {\r\n    function getPriceUsdcRecommended(address tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IYearnAddressesProvider {\r\n    function addressById(string memory) external view returns (address);\r\n}\r\n\r\ncontract Ownable {\r\n    address public ownerAddress;\r\n\r\n    constructor() {\r\n        ownerAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function setOwnerAddress(address _ownerAddress) public onlyOwner {\r\n        ownerAddress = _ownerAddress;\r\n    }\r\n}\r\n\r\ncontract AddressesProviderConsumer is Ownable {\r\n    address public addressesProviderAddress;\r\n\r\n    constructor(address _addressesProviderAddress) {\r\n        addressesProviderAddress = _addressesProviderAddress;\r\n    }\r\n\r\n    function setAddressesProviderAddress(address _addressesProviderAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        addressesProviderAddress = _addressesProviderAddress;\r\n    }\r\n\r\n    function addressById(string memory id) internal view returns (address) {\r\n        return\r\n            IYearnAddressesProvider(addressesProviderAddress).addressById(id);\r\n    }\r\n}\r\n\r\ncontract CalculationsIronBank is AddressesProviderConsumer {\r\n    string[] public unitrollerIds;\r\n\r\n    constructor(address _addressesProviderAddress)\r\n        AddressesProviderConsumer(_addressesProviderAddress)\r\n    {}\r\n\r\n    function getIronBankMarkets(address unitrollerAddress)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return IUnitroller(unitrollerAddress).getAllMarkets();\r\n    }\r\n\r\n    function addUnitroller(string memory unitrollerId) public onlyOwner {\r\n        unitrollerIds.push(unitrollerId);\r\n    }\r\n\r\n    function addUnitrollers(string[] memory _unitrollerIds) external onlyOwner {\r\n        for (\r\n            uint256 unitrollerIdx;\r\n            unitrollerIdx < _unitrollerIds.length;\r\n            unitrollerIdx++\r\n        ) {\r\n            string memory unitrollerId = _unitrollerIds[unitrollerIdx];\r\n            unitrollerIds.push(unitrollerId);\r\n        }\r\n    }\r\n\r\n    function isIronBankMarket(address unitrollerAddress, address tokenAddress)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        address[] memory ironBankMarkets = getIronBankMarkets(\r\n            unitrollerAddress\r\n        );\r\n        uint256 numIronBankMarkets = ironBankMarkets.length;\r\n        for (\r\n            uint256 marketIdx = 0;\r\n            marketIdx < numIronBankMarkets;\r\n            marketIdx++\r\n        ) {\r\n            address marketAddress = ironBankMarkets[marketIdx];\r\n            if (tokenAddress == marketAddress) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getIronBankMarketPriceUsdc(address tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        ICyToken cyToken = ICyToken(tokenAddress);\r\n        uint256 exchangeRateStored = cyToken.exchangeRateStored();\r\n        address underlyingTokenAddress = cyToken.underlying();\r\n        uint256 decimals = cyToken.decimals();\r\n        IERC20 underlyingToken = IERC20(underlyingTokenAddress);\r\n        uint8 underlyingTokenDecimals = underlyingToken.decimals();\r\n\r\n        IOracle oracle = IOracle(addressById(\"ORACLE\"));\r\n        uint256 underlyingTokenPrice = oracle.getPriceUsdcRecommended(\r\n            underlyingTokenAddress\r\n        );\r\n\r\n        uint256 price = (underlyingTokenPrice *\r\n            exchangeRateStored *\r\n            10**decimals) / 10**(underlyingTokenDecimals + 18);\r\n        return price;\r\n    }\r\n\r\n    function getPriceUsdc(address tokenAddress) public view returns (uint256) {\r\n        for (\r\n            uint256 unitrollerIdx = 0;\r\n            unitrollerIdx < unitrollerIds.length;\r\n            unitrollerIdx++\r\n        ) {\r\n            address unitrollerAddress = addressById(\r\n                unitrollerIds[unitrollerIdx]\r\n            );\r\n            if (isIronBankMarket(unitrollerAddress, tokenAddress)) {\r\n                return getIronBankMarketPriceUsdc(tokenAddress);\r\n            }\r\n        }\r\n        revert();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesProviderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addressesProviderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesProviderAddress\",\"type\":\"address\"}],\"name\":\"setAddressesProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"setOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AddressesProviderConsumer", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e11dc9f2ab122dc5978eaca41483da0d7d7e6128", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a7f69b8c509ab3eb7a6e97150736456136609666d5b8264f401778c950c82cc"}]}