{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/stakingRFAC.sol\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n\r\n\r\ncontract rfacStaking{\r\n    mapping(address => IERC20) public rewardToken;\r\n    mapping(address => address) public tokenOwner;\r\n    mapping(address => bool) public tokenState;\r\n    address public stakingToken;\r\n    uint256 public stakePrice;\r\n    bool public paused;\r\n\r\n    IERC721 public rfacNFT;\r\n    address payable public owner;\r\n\r\n    uint256 public rate; //$CHIPs per card per day\r\n    mapping(uint256 => uint256) rewardTable; //Bonus tokens for each pokerHand, per day\r\n\r\n    struct TokenData {\r\n        uint256[] tokenIDs;\r\n        uint256[] values;\r\n        uint256[] suits;\r\n        uint256 pokerHand;\r\n    }\r\n\r\n    struct Stake {\r\n        uint256[] tokenIDs; //list of tokens in the hand\r\n        uint256 timestamp;  //time staked\r\n        uint256 pokerHand;  //value of the hand staked\r\n    }\r\n\r\n    mapping(address => Stake[]) public stakes;\r\n\r\n    mapping(address => uint256) public bank;\r\n    uint256 merkleRoot;\r\n    mapping(uint256 => uint8) public proofBurn;\r\n\r\n    event transferredRewardToBank(address _from, uint256 amt);\r\n    event cashedOutFromBank(address _from, address _tokenAddress, uint256 amt);\r\n    event cashedOutFromStaking(address _from, uint256 amt);\r\n    event depositedToBank(address _from, address _tokenAddress, uint256 amt);\r\n    event staked(address _from, uint256[] _tokenIDs);\r\n    event unstaked(address _from, uint256[] _tokenIDs);\r\n\r\n    constructor(){\r\n        //rewardToken = IERC20(_tokenAddress);\r\n        //rfacNFT = IERC721(_NFTAddress);\r\n        paused = false;\r\n        stakePrice = 0.005 ether;\r\n        rate = 5;\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory) public pure returns(bytes4) {\r\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n    }\r\n\r\n    function stake(TokenData[] calldata _tokenData) external payable{\r\n        require(!paused,\"Staking is paused\");\r\n        require(msg.value == stakePrice*_tokenData.length,\"Insufficient Funds\");\r\n\r\n        for(uint256 n = 0;n < _tokenData.length;n++){\r\n            require(_tokenData[n].tokenIDs.length < 6, \"Too many cards.\");\r\n            require(checkHand(_tokenData[n]),\"Pokerhand Doesn't Match\");\r\n\r\n            for (uint256 i = 0; i < _tokenData[n].tokenIDs.length; i++) {\r\n                rfacNFT.safeTransferFrom(msg.sender, address(this), _tokenData[n].tokenIDs[i],\"0x00\");\r\n            }\r\n            stakes[msg.sender].push(Stake(_tokenData[n].tokenIDs,block.timestamp,_tokenData[n].pokerHand));\r\n            emit staked(msg.sender, _tokenData[n].tokenIDs);\r\n        }\r\n        \r\n    }\r\n\r\n    function unstake(uint8[] calldata hands) external{\r\n        require(!paused,\"Staking is paused\");\r\n        cashOutFromStaking(hands);\r\n        for(uint256 n = 0;n < hands.length;n++){\r\n            for (uint256 i = 0; i < stakes[msg.sender][hands[n]].tokenIDs.length; i++) {\r\n                rfacNFT.safeTransferFrom(address(this),msg.sender, stakes[msg.sender][hands[n]].tokenIDs[i],\"0x00\");\r\n            }\r\n            emit unstaked(msg.sender, stakes[msg.sender][hands[n]].tokenIDs);\r\n            removeStakedHand(hands[n]);\r\n        }\r\n        \r\n    }\r\n\r\n    function checkHand(TokenData calldata _tokenData) internal pure returns (bool){\r\n\r\n        if(_tokenData.pokerHand == 0){\r\n            //Royal Flush\r\n            if(checkFlush(_tokenData) && _tokenData.tokenIDs.length == 5){\r\n                if(_tokenData.values[0] == 1 && _tokenData.values[1] == 13 && _tokenData.values[2] == 12 && _tokenData.values[3] == 11 && _tokenData.values[4] == 10){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n        }else if(_tokenData.pokerHand == 1){\r\n            //Straight Flush\r\n            if(checkFlush(_tokenData) && _tokenData.tokenIDs.length == 5){\r\n                if(_tokenData.values[1] == _tokenData.values[0] - 1 && _tokenData.values[2] == _tokenData.values[0] - 2 && _tokenData.values[3] == _tokenData.values[0] - 3 && _tokenData.values[4] == _tokenData.values[0] - 4){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n\r\n        }else if(_tokenData.pokerHand == 2){\r\n            //Four of a Kind\r\n            if(_tokenData.tokenIDs.length > 3){\r\n                if(_tokenData.values[1] == _tokenData.values[0] && _tokenData.values[2] == _tokenData.values[0] && _tokenData.values[3] == _tokenData.values[0]){\r\n                    if((_tokenData.suits[0]+_tokenData.suits[1]+_tokenData.suits[2]+_tokenData.suits[3]) == 10 && (_tokenData.suits[0]*_tokenData.suits[1]*_tokenData.suits[2]*_tokenData.suits[3]) == 24){\r\n                        return true;\r\n                    }else{\r\n                        return false;\r\n                    }                        \r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        else if(_tokenData.pokerHand == 3){\r\n            //Full House\r\n            if(_tokenData.tokenIDs.length == 5){\r\n                if(_tokenData.values[1] == _tokenData.values[0] && _tokenData.values[2] == _tokenData.values[0] && _tokenData.values[3] == _tokenData.values[4]){\r\n                    if(_tokenData.suits[0] != _tokenData.suits[1] && _tokenData.suits[1] != _tokenData.suits[2] && _tokenData.suits[0] != _tokenData.suits[2] && _tokenData.suits[3] != _tokenData.suits[4]){\r\n                        return true;\r\n                    }else{\r\n                        return false;\r\n                    }                        \r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        else if(_tokenData.pokerHand == 4){\r\n            //Flush\r\n            if(checkFlush(_tokenData) && _tokenData.tokenIDs.length == 5){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        else if(_tokenData.pokerHand == 5){\r\n            //Straight\r\n            if(_tokenData.tokenIDs.length == 5){\r\n                if(_tokenData.values[0] == 1){\r\n                    if(_tokenData.values[1] == 13 && _tokenData.values[2] == 12 && _tokenData.values[3] == 11 && _tokenData.values[4] == 10){\r\n                        return true;\r\n                    }else{\r\n                        return false;\r\n                    }\r\n                }else{\r\n                    if(_tokenData.values[1] == _tokenData.values[0] - 1 && _tokenData.values[2] == _tokenData.values[0] - 2 && _tokenData.values[3] == _tokenData.values[0] - 3 && _tokenData.values[4] == _tokenData.values[0] - 4){\r\n                        return true;\r\n                    }else{\r\n                        return false;\r\n                    }\r\n                }\r\n                \r\n            }else{\r\n                return false;\r\n            }\r\n\r\n        }\r\n        else if(_tokenData.pokerHand == 6){\r\n            //Three of a Kind\r\n            if(_tokenData.tokenIDs.length > 2){\r\n                if(_tokenData.values[1] == _tokenData.values[0] && _tokenData.values[2] == _tokenData.values[0]){\r\n                    if(_tokenData.suits[0] != _tokenData.suits[1] && _tokenData.suits[1] != _tokenData.suits[2] && _tokenData.suits[0] != _tokenData.suits[2]){\r\n                        return true;\r\n                    }else{\r\n                        return false;\r\n                    }                        \r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n\r\n        }else if(_tokenData.pokerHand == 7){\r\n            //Two Pair\r\n            if(_tokenData.tokenIDs.length > 3){\r\n                if(_tokenData.values[1] == _tokenData.values[0] && _tokenData.values[2] == _tokenData.values[3]){\r\n                    if(_tokenData.suits[0] != _tokenData.suits[1] && _tokenData.suits[2] != _tokenData.suits[3]){\r\n                        return true;\r\n                    }else{\r\n                        return false;\r\n                    }                        \r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n\r\n        }\r\n        else if(_tokenData.pokerHand == 8){\r\n            //One Pair\r\n            if(_tokenData.tokenIDs.length > 1){\r\n                if(_tokenData.values[1] == _tokenData.values[0] && _tokenData.suits[0] != _tokenData.suits[1]){\r\n                    return true;                     \r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n        }else{\r\n            //High Card\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function checkFlush(TokenData calldata _tokenData) internal pure returns (bool){\r\n        uint256 flush;\r\n        for (uint256 i = 0; i < _tokenData.tokenIDs.length; i++) {\r\n            if(i == 0){\r\n                flush = _tokenData.suits[i];\r\n            }else if(flush != _tokenData.suits[i]){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getStaked(address staker) external view returns(Stake [] memory){\r\n        //require(hand < stakes[staker].length,\"Staked Hand DNE\");\r\n            \r\n        return (stakes[staker]);\r\n    }\r\n\r\n    function getReward(address staker, uint256 hand) public view returns(uint256){\r\n        uint256 nDays = ((block.timestamp - stakes[staker][hand].timestamp) - (block.timestamp - stakes[staker][hand].timestamp) % (1 days))/(1 days);\r\n        return (rate*stakes[staker][hand].tokenIDs.length+ rewardTable[stakes[staker][hand].pokerHand])*nDays;\r\n    }\r\n\r\n    //Banking\r\n\r\n    function depositToken(address _tokenAddress, uint256 _deposit) external{\r\n        require(!paused,\"Contract is paused\");\r\n        require(rewardToken[_tokenAddress].transferFrom(msg.sender, address(this), _deposit), \"Error with token transfer\");\r\n        bank[_tokenAddress] += _deposit;\r\n        emit depositedToBank(msg.sender, _tokenAddress, _deposit);\r\n    }\r\n\r\n    function getBankBalance(address _tokenAddress) external view returns(uint256){\r\n        return(bank[_tokenAddress]);\r\n    }\r\n\r\n    function cashOutFromStaking(uint8[] calldata hands) public{\r\n        require(!paused,\"Contract is paused\");\r\n        uint256 reward = 1;\r\n        for(uint256 i = 0;i< hands.length;i++){\r\n            reward += getReward(msg.sender,i);\r\n            stakes[msg.sender][i].timestamp = block.timestamp;\r\n        }\r\n        rewardToken[stakingToken].approve(address(this),reward);\r\n        require(rewardToken[stakingToken].transferFrom(address(this),msg.sender, reward-1), \"Error with token transfer\");\r\n        bank[stakingToken] -= reward-1;\r\n        emit cashedOutFromStaking(msg.sender, reward);\r\n    }\r\n\r\n    function cashOutFromBank(uint _value, uint[] calldata _proof, address _tokenAddress, uint256 amt) external{\r\n        require(!paused,\"Contract is paused\");\r\n        require(proofBurn[_value] == 0,\"Proof Already Used\");\r\n        require(verifyProof( _value, _proof),\"Invalid Proof\");\r\n        rewardToken[stakingToken].approve(address(this),amt);\r\n        require(tokenState[_tokenAddress],\"Token Withdrawls not permitted, Contact Token Owner\");\r\n        require(rewardToken[_tokenAddress].transferFrom(address(this),msg.sender, amt), \"Error with token transfer\");\r\n        bank[_tokenAddress] -= amt;\r\n        proofBurn[_value] = 1;\r\n        emit cashedOutFromBank(msg.sender, _tokenAddress, amt);\r\n    }\r\n\r\n    function transferRewardToBank(uint8[] calldata hands) external{\r\n        require(!paused,\"Contract is paused\");\r\n        uint256 reward = 1;\r\n        for(uint256 i = 0;i< hands.length;i++){\r\n            reward += getReward(msg.sender,i);\r\n            stakes[msg.sender][i].timestamp = block.timestamp;\r\n        }\r\n        reward -= 1;\r\n        emit transferredRewardToBank(msg.sender, reward);\r\n    }\r\n\r\n    //only owner\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner,\"not owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function setTokenAddress(address _tokenAddress, address _tokenOwner) external onlyOwner {\r\n        rewardToken[_tokenAddress] = IERC20(_tokenAddress);\r\n        if(tokenOwner[_tokenAddress] == address(0)){\r\n            tokenOwner[_tokenAddress] = _tokenOwner;\r\n        }\r\n    }\r\n\r\n    function setStakingToken(address _tokenAddress) external onlyOwner{\r\n        stakingToken = _tokenAddress;\r\n        rewardToken[_tokenAddress] = IERC20(_tokenAddress);\r\n        if(tokenOwner[_tokenAddress] == address(0)){\r\n            tokenOwner[_tokenAddress] = owner;\r\n        }\r\n    }\r\n\r\n    function setNFTAddress(address _NFTAddress) external onlyOwner {\r\n        rfacNFT = IERC721(_NFTAddress);\r\n    }\r\n\r\n    function setRewardTable(uint256[] calldata _rewardTable) external onlyOwner {\r\n        for (uint256 i = 0; i < _rewardTable.length; i++) {\r\n            rewardTable[i] = _rewardTable[i];\r\n        }\r\n    }\r\n\r\n    function setRate(uint256 _rate) external onlyOwner {\r\n        rate = _rate;\r\n    }\r\n\r\n    function togglePaused() external onlyOwner {\r\n        paused = !paused;\r\n    }\r\n\r\n    function setStakePrice(uint256 _stakePrice) external onlyOwner {\r\n        stakePrice = _stakePrice;\r\n    }\r\n\r\n    function removeStakedHand(uint hand) internal {\r\n        require(hand <= stakes[msg.sender].length);\r\n        stakes[msg.sender][hand] = stakes[msg.sender][stakes[msg.sender].length-1];\r\n        stakes[msg.sender].pop();\r\n    }\r\n\r\n    //Only Token Owner\r\n\r\n    function setTokenState(address _tokenAddress, bool _state) external{\r\n        require(msg.sender == tokenOwner[_tokenAddress],\"not owner\");\r\n        tokenState[_tokenAddress] = _state;\r\n    }\r\n\r\n    function setTokenOwner(address _tokenAddress, address _newOwner) external{\r\n        require(msg.sender == tokenOwner[_tokenAddress],\"not owner\");\r\n        tokenOwner[_tokenAddress] = _newOwner;\r\n    }\r\n\r\n    function withdraw() external payable onlyOwner{\r\n        uint amount = address(this).balance;\r\n\r\n        (bool success, ) = owner.call{value: amount}(\"\");\r\n        require(success, \"Failed to send Ether\");\r\n    }\r\n\r\n    //MERKLE STUFF\r\n    function getRoot() public view returns (uint) {\r\n      return merkleRoot;\r\n    }\r\n\r\n    function setRoot(uint _merkleRoot) external onlyOwner{\r\n      merkleRoot = _merkleRoot;\r\n    }   // setRoot\r\n\r\n    function pairHash(uint _a, uint _b) internal pure returns(uint) {\r\n      return uint(keccak256(abi.encode(_a ^ _b)));\r\n    }\r\n\r\n    function verifyProof(uint _value, uint[] calldata _proof) \r\n        public view returns (bool) {\r\n      uint temp = _value;\r\n      uint i;\r\n  \r\n      for(i=0; i<_proof.length; i++) {\r\n        temp = pairHash(temp, _proof[i]);\r\n      }\r\n\r\n      return temp == merkleRoot;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"cashedOutFromBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"cashedOutFromStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"depositedToBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transferredRewardToBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_proof\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"cashOutFromBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"hands\",\"type\":\"uint8[]\"}],\"name\":\"cashOutFromStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getBankBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hand\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaked\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pokerHand\",\"type\":\"uint256\"}],\"internalType\":\"struct rfacStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proofBurn\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rfacNFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTAddress\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewardTable\",\"type\":\"uint256[]\"}],\"name\":\"setRewardTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_merkleRoot\",\"type\":\"uint256\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakePrice\",\"type\":\"uint256\"}],\"name\":\"setStakePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setTokenState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"suits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"pokerHand\",\"type\":\"uint256\"}],\"internalType\":\"struct rfacStaking.TokenData[]\",\"name\":\"_tokenData\",\"type\":\"tuple[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pokerHand\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"hands\",\"type\":\"uint8[]\"}],\"name\":\"transferRewardToBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"hands\",\"type\":\"uint8[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_proof\",\"type\":\"uint256[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "rfacStaking", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://203325f0a93928d67858bbfb33abfb11b9b427f2897535cdfa95017b69550122"}]}