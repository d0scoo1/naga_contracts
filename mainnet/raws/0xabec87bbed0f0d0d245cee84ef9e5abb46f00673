{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\nSPDX-License-Identifier: Mines\u2122\u00ae\u00a9\r\n*/\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address) {\r\nreturn msg.sender;\r\n}\r\n}\r\n\r\ninterface IERC20 {\r\nfunction totalSupply() external view returns (uint256);\r\nfunction balanceOf(address account) external view returns (uint256);\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a, \"SafeMath: addition overflow\");\r\nreturn c;\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b <= a, errorMessage);\r\nuint256 c = a - b;\r\nreturn c;\r\n}\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\nreturn c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n}\r\n\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b > 0, errorMessage);\r\nuint256 c = a / b;\r\nreturn c;\r\n}\r\n}\r\n\r\ncontract Ownable is Context {\r\naddress private _owner;\r\naddress private _previousOwner;\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\nconstructor() {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\n\r\nfunction owner() public view returns (address) {\r\nreturn _owner;\r\n}\r\n\r\nmodifier onlyOwner() {\r\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n_;\r\n}\r\n\r\nfunction renounceOwnership() public virtual onlyOwner {\r\nemit OwnershipTransferred(_owner, address(0));\r\n_owner = address(0);\r\n}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\nfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\nuint256 amountIn,\r\nuint256 amountOutMin,\r\naddress[] calldata path,\r\naddress to,\r\nuint256 deadline\r\n) external;\r\nfunction factory() external pure returns (address);\r\nfunction WETH() external pure returns (address);\r\nfunction addLiquidityETH(\r\naddress token,\r\nuint256 amountTokenDesired,\r\nuint256 amountTokenMin,\r\nuint256 amountETHMin,\r\naddress to,\r\nuint256 deadline\r\n) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract KARMA is Context, IERC20, Ownable {\r\nusing SafeMath for uint256;\r\nstring private constant _name = unicode\"KARMA\";\r\nstring private constant _symbol = \"KARMA\";\r\nuint8 private constant _decimals = 9;\r\nmapping(address => uint256) private _rOwned;\r\nmapping(address => uint256) private _tOwned;\r\nmapping(address => mapping(address => uint256)) private _allowances;\r\nmapping(address => bool) private _isExcludedFromFee;\r\nuint256 private constant MAX = ~uint256(0);\r\nuint256 private constant _tTotal = 1000000000000 * 10**9;\r\nuint256 private _rTotal = (MAX - (MAX % _tTotal));\r\nuint256 private _tFeeTotal;\r\nuint256 private _taxFee = 7;\r\nuint256 private _teamFee = 5;\r\nmapping(address => bool) private bots;\r\nmapping(address => uint256) private buycooldown;\r\nmapping(address => uint256) private sellcooldown;\r\nmapping(address => uint256) private firstsell;\r\nmapping(address => uint256) private sellnumber;\r\naddress payable private _teamAddress;\r\naddress payable private _marketingFunds;\r\nIUniswapV2Router02 private uniswapV2Router;\r\naddress private uniswapV2Pair;\r\nbool private tradingOpen = false;\r\nbool private liquidityAdded = false;\r\nbool private inSwap = false;\r\nbool private swapEnabled = false;\r\nbool private cooldownEnabled = false;\r\nuint256 private _maxTxAmount = _tTotal;\r\nevent MaxTxAmountUpdated(uint256 _maxTxAmount);\r\nmodifier lockTheSwap {\r\ninSwap = true;\r\n_;\r\ninSwap = false;\r\n}\r\nconstructor(address payable addr1, address payable addr2) {\r\n_teamAddress = addr1;\r\n_marketingFunds = addr2;\r\n_rOwned[_msgSender()] = _rTotal;\r\n_isExcludedFromFee[owner()] = true;\r\n_isExcludedFromFee[address(this)] = true;\r\n_isExcludedFromFee[_teamAddress] = true;\r\n_isExcludedFromFee[_marketingFunds] = true;\r\nemit Transfer(address(0), _msgSender(), _tTotal);\r\n}\r\n\r\nfunction name() public pure returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\nfunction symbol() public pure returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\nfunction decimals() public pure returns (uint8) {\r\nreturn _decimals;\r\n}\r\n\r\nfunction totalSupply() public pure override returns (uint256) {\r\nreturn _tTotal;\r\n}\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\nreturn tokenFromReflection(_rOwned[account]);\r\n}\r\n\r\nfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n_transfer(_msgSender(), recipient, amount);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address owner, address spender) public view override returns (uint256) {\r\nreturn _allowances[owner][spender];\r\n}\r\n\r\nfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n_approve(_msgSender(), spender, amount);\r\nreturn true;\r\n}\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n_transfer(sender, recipient, amount);\r\n_approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\nreturn true;\r\n}\r\n\r\nfunction setCooldownEnabled(bool onoff) external onlyOwner() {\r\ncooldownEnabled = onoff;\r\n}\r\n\r\nfunction tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\nrequire(rAmount <= _rTotal,\"Amount must be less than total reflections\");\r\nuint256 currentRate = _getRate();\r\nreturn rAmount.div(currentRate);\r\n}\r\n\r\nfunction removeAllFee() private {\r\nif (_taxFee == 0 && _teamFee == 0) return;\r\n_taxFee = 0;\r\n_teamFee = 0;\r\n}\r\n\r\nfunction restoreAllFee() private {\r\n_taxFee = 7;\r\n_teamFee = 5;\r\n}\r\n\r\nfunction setFee(uint256 multiplier) private {\r\n_taxFee = _taxFee * multiplier;\r\nif (multiplier > 1) {\r\n_teamFee = 10;\r\n}\r\n\r\n}\r\n\r\nfunction _approve(address owner, address spender, uint256 amount) private {\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\n\r\nfunction _transfer(address from, address to, uint256 amount) private {\r\nrequire(from != address(0), \"ERC20: transfer from the zero address\");\r\nrequire(to != address(0), \"ERC20: transfer to the zero address\");\r\nrequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\nif (from != owner() && to != owner()) {\r\nif (cooldownEnabled) {\r\nif (from != address(this) && to != address(this) && from != address(uniswapV2Router) && to != address(uniswapV2Router)) {\r\nrequire(_msgSender() == address(uniswapV2Router) || _msgSender() == uniswapV2Pair,\"ERR: Uniswap only\");\r\n}\r\n}\r\nrequire(!bots[from] && !bots[to]);\r\nif (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to] && cooldownEnabled) {\r\nrequire(tradingOpen);\r\nrequire(amount <= _maxTxAmount);\r\nrequire(buycooldown[to] < block.timestamp);\r\nbuycooldown[to] = block.timestamp + (30 seconds);\r\n_teamFee = 6;\r\n_taxFee = 2;\r\n}\r\nuint256 contractTokenBalance = balanceOf(address(this));\r\nif (!inSwap && from != uniswapV2Pair && swapEnabled) {\r\nrequire(amount <= balanceOf(uniswapV2Pair).mul(3).div(100) && amount <= _maxTxAmount);\r\nrequire(sellcooldown[from] < block.timestamp);\r\nif(firstsell[from] + (1 days) < block.timestamp){\r\nsellnumber[from] = 0;\r\n}\r\nif (sellnumber[from] == 0) {\r\nsellnumber[from]++;\r\nfirstsell[from] = block.timestamp;\r\nsellcooldown[from] = block.timestamp + (1 hours);\r\n}\r\nelse if (sellnumber[from] == 1) {\r\nsellnumber[from]++;\r\nsellcooldown[from] = block.timestamp + (2 hours);\r\n}\r\nelse if (sellnumber[from] == 2) {\r\nsellnumber[from]++;\r\nsellcooldown[from] = block.timestamp + (6 hours);\r\n}\r\nelse if (sellnumber[from] == 3) {\r\nsellnumber[from]++;\r\nsellcooldown[from] = firstsell[from] + (1 days);\r\n}\r\nswapTokensForEth(contractTokenBalance);\r\nuint256 contractETHBalance = address(this).balance;\r\nif (contractETHBalance > 0) {\r\nsendETHToFee(address(this).balance);\r\n}\r\nsetFee(sellnumber[from]);\r\n}\r\n}\r\nbool takeFee = true;\r\n\r\nif (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\ntakeFee = false;\r\n}\r\n\r\n_tokenTransfer(from, to, amount, takeFee);\r\nrestoreAllFee;\r\n}\r\n\r\nfunction swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\naddress[] memory path = new address[](2);\r\npath[0] = address(this);\r\npath[1] = uniswapV2Router.WETH();\r\n_approve(address(this), address(uniswapV2Router), tokenAmount);\r\nuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n}\r\n\r\nfunction sendETHToFee(uint256 amount) private {\r\n_teamAddress.transfer(amount.div(2));\r\n_marketingFunds.transfer(amount.div(2));\r\n}\r\n\r\nfunction openTrading() public onlyOwner {\r\nrequire(liquidityAdded);\r\ntradingOpen = true;\r\n}\r\n\r\nfunction addLiquidity() external onlyOwner() {\r\nIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\nuniswapV2Router = _uniswapV2Router;\r\n_approve(address(this), address(uniswapV2Router), _tTotal);\r\nuniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\nuniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\nswapEnabled = true;\r\ncooldownEnabled = true;\r\nliquidityAdded = true;\r\n_maxTxAmount = 10000000000 * 10**9;\r\nIERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n}\r\n\r\nfunction manualswap() external {\r\nrequire(_msgSender() == _teamAddress);\r\nuint256 contractBalance = balanceOf(address(this));\r\nswapTokensForEth(contractBalance);\r\n}\r\n\r\nfunction manualsend() external {\r\nrequire(_msgSender() == _teamAddress);\r\nuint256 contractETHBalance = address(this).balance;\r\nsendETHToFee(contractETHBalance);\r\n}\r\n\r\nfunction _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\nif (!takeFee) removeAllFee();\r\n_transferStandard(sender, recipient, amount);\r\nif (!takeFee) restoreAllFee();\r\n}\r\n\r\nfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeTeam(tTeam);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _takeTeam(uint256 tTeam) private {\r\nuint256 currentRate = _getRate();\r\nuint256 rTeam = tTeam.mul(currentRate);\r\n_rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n}\r\n\r\nfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n_rTotal = _rTotal.sub(rFee);\r\n_tFeeTotal = _tFeeTotal.add(tFee);\r\n}\r\n\r\nreceive() external payable {}\r\n\r\nfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n(uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);\r\nuint256 currentRate = _getRate();\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\r\nreturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n}\r\n\r\nfunction _getTValues(uint256 tAmount, uint256 taxFee, uint256 teamFee) private pure returns (uint256, uint256, uint256) {\r\nuint256 tFee = tAmount.mul(taxFee).div(100);\r\nuint256 tTeam = tAmount.mul(teamFee).div(100);\r\nuint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\nreturn (tTransferAmount, tFee, tTeam);\r\n}\r\n\r\nfunction _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\nuint256 rAmount = tAmount.mul(currentRate);\r\nuint256 rFee = tFee.mul(currentRate);\r\nuint256 rTeam = tTeam.mul(currentRate);\r\nuint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\nreturn (rAmount, rTransferAmount, rFee);\r\n}\r\n\r\nfunction _getRate() private view returns (uint256) {\r\n(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\nreturn rSupply.div(tSupply);\r\n}\r\n\r\nfunction _getCurrentSupply() private view returns (uint256, uint256) {\r\nuint256 rSupply = _rTotal;\r\nuint256 tSupply = _tTotal;\r\nif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\nreturn (rSupply, tSupply);\r\n}\r\n\r\nfunction setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\nrequire(maxTxPercent > 0, \"Amount must be greater than 0\");\r\n_maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\nemit MaxTxAmountUpdated(_maxTxAmount);\r\n}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"addr2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KARMA", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000caaf0e3e1cb2c4c0467ff3711af01dc1fb931eeb000000000000000000000000e26b4f27c448994d52794759fbbbca5007b73cb7", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0abd6c690328cb915d9f941e4f772abd5a41feed657de7224a98a4aa87eb4418"}]}