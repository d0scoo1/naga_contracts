{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// Creator: Mai of Tessera Labs\r\n// Special Thanks to Diversity from Divine Anarchy for all his help reviewing\r\n\r\npragma solidity ^0.8.12;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\n\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(address operator,address from, uint256 id, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface IInhibitor {\r\n    function mintHelper(address _user, uint256 quantity) external;\r\n}\r\n\r\ninterface IStakingHelper {\r\n    function startSeason(uint256 _dailyYield) external;\r\n    function endSeason() external;\r\n    function needsRewardsUpdate(address _user) external view returns (bool);\r\n    function aggregateRewards(address _user) external;\r\n}\r\n\r\nerror OwnerOfNullValue();\r\nerror BalanceOfZeroAddress();\r\nerror MintZeroAddress();\r\nerror MintZeroQuantity();\r\nerror SafeMintZeroQuantity();\r\nerror SafeMintZeroAddress();\r\nerror SafeMintUnsafeDestination();\r\nerror TokensLocked();\r\nerror CallerLacksTransferPermissions();\r\nerror TransferFromNotOwner();\r\nerror TransferZeroAddress();\r\nerror SafeTransferUnsafeDestination();\r\nerror TokensNotBatchable();\r\nerror BatchQuantityTooSmall();\r\nerror ApprovalToOwner();\r\nerror CallerLacksApprovalPermissions();\r\nerror getApprovedNonexistentToken();\r\nerror stakingNotActive();\r\nerror TokensStaked();\r\nerror TokensUnstaked();\r\nerror StakedTokensTimeLocked();\r\nerror StakingActive();\r\nerror beginStakingZeroAddress();\r\nerror StakingInactive();\r\nerror UnsupportedCooldownDuration();\r\nerror CooldownTooSmall();\r\nerror TokensUnlocked();\r\nerror NewOwnerAddressZero();\r\nerror TokenURINonexistentToken();\r\nerror TokensZeroBalance();\r\nerror TokensOfOwnerNullValue();\r\nerror CallerNotStakingHelper();\r\nerror CallerNotOwner();\r\n\r\n/**\r\n * Built to optimize for lower gas during batch mints and transfers. \r\n * A new locking mechanism has been added to protect users from all attempted scams.\r\n * New \"Phantom Staking\" is supported allowing for users to participate in token staking without large gas overhead or transferring tokens.\r\n *\r\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\r\n *\r\n */\r\nabstract contract ERC721LPhantomStakeable {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    event Locked(address indexed owner, uint256 unlockCooldown);\r\n    event Unlocked(address indexed owner, uint256 unlockTimestamp);\r\n    event Staked(address indexed owner, uint256 stakedTimestamp);\r\n    event Unstaked(address indexed owner, uint256 unstakedTimestamp);\r\n    event StakingEventStarted(address indexed stakingContract, uint256 dailyYield, uint256 timestamp);\r\n    event StakingEventEnded(uint256 timestamp);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    struct addressData {\r\n        uint64 balance;\r\n        bool staked;\r\n        bool locked;\r\n        uint64 lockedUnlockCooldown;\r\n        uint64 lockedUnlockTimestamp;\r\n    }\r\n\r\n    struct collectionData {\r\n        string name;\r\n        string symbol;\r\n        address owner;\r\n        uint256 index;\r\n        uint256 burned;\r\n    }\r\n\r\n    struct stakingData {\r\n        IStakingHelper stakingContract;\r\n        bool stakingStatus;\r\n    }\r\n\r\n    collectionData internal _collectionData;\r\n    stakingData internal _stakingData;\r\n\r\n    mapping(uint256 => address) internal _ownerships;\r\n    mapping(address => addressData) internal _addressData;\r\n    mapping(uint256 => address) internal _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private  _operatorApprovals;\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        _collectionData.name = _name;\r\n        _collectionData.symbol = _symbol;\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint` or `_safeMint`),\r\n     */\r\n    function _exists(uint256 tokenId) public view virtual returns (bool) {\r\n        return tokenId < _collectionData.index;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\r\n        unchecked {\r\n            if (tokenId < _collectionData.index) {\r\n                address ownership = _ownerships[tokenId];\r\n                if (ownership != address(0)) {\r\n                    return ownership;\r\n                }\r\n                    while (true) {\r\n                        tokenId--;\r\n                        ownership = _ownerships[tokenId];\r\n\r\n                        if (ownership != address(0)) {\r\n                            return ownership;\r\n                        }\r\n                         \r\n                    }\r\n                }\r\n            }\r\n\r\n        revert OwnerOfNullValue();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in `_owner`'s account.\r\n     */\r\n    function balanceOf(address _address) public view returns (uint256) {\r\n        if (_address == address(0)) revert BalanceOfZeroAddress();\r\n        return uint256(_addressData[_address].balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `_owner`'s tokens are currently unlocked.\r\n     */\r\n    function isUnlocked(address _owner) public view returns (bool) {\r\n        return \r\n            !_addressData[_owner].locked && \r\n            _addressData[_owner].lockedUnlockTimestamp < block.timestamp && \r\n            (_stakingData.stakingStatus ? !_addressData[_owner].staked : true);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 quantity) internal {\r\n        if (to == address(0)) revert MintZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        if (_stakingData.stakingStatus && _addressData[to].staked && _stakingData.stakingContract.needsRewardsUpdate(to)){\r\n            _stakingData.stakingContract.aggregateRewards(to);\r\n        }\r\n\r\n        unchecked {\r\n            uint256 updatedIndex = _collectionData.index;\r\n            _addressData[to].balance += uint64(quantity);\r\n            _ownerships[updatedIndex] = to;\r\n            \r\n            for (uint256 i; i < quantity; i++) {\r\n                emit Transfer(address(0), to, updatedIndex++);\r\n            }\r\n\r\n            _collectionData.index = updatedIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See Below {ERC721L-_safeMint}.\r\n     */\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {onERC721Received}, which is called for each safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 quantity, bytes memory _data) internal {\r\n        if (to == address(0)) revert SafeMintZeroAddress();\r\n        if (quantity == 0) revert SafeMintZeroQuantity();\r\n\r\n        if (_stakingData.stakingStatus && _addressData[to].staked && _stakingData.stakingContract.needsRewardsUpdate(to)){\r\n            _stakingData.stakingContract.aggregateRewards(to);\r\n        }\r\n\r\n        unchecked {\r\n            uint256 updatedIndex = _collectionData.index;\r\n            _addressData[to].balance += uint64(quantity);\r\n            _ownerships[updatedIndex] = to;\r\n            \r\n            for (uint256 i; i < quantity; i++) {\r\n                emit Transfer(address(0), to, updatedIndex);\r\n                if(to.code.length > 0 &&\r\n                        ERC721TokenReceiver(to).onERC721Received(_msgSender(), address(0), updatedIndex, _data) !=\r\n                        ERC721TokenReceiver.onERC721Received.selector) revert SafeMintUnsafeDestination();\r\n                updatedIndex++;\r\n            }\r\n\r\n            _collectionData.index = updatedIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - `from` must not have tokens locked.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        address currentOwner = ownerOf(tokenId);\r\n        if (!isUnlocked(from)) revert TokensLocked();\r\n        if (_msgSender() != currentOwner &&\r\n            getApproved(tokenId) != _msgSender() &&\r\n            !isApprovedForAll(currentOwner,_msgSender())) revert CallerLacksTransferPermissions();\r\n        if (currentOwner != from) revert TransferFromNotOwner();\r\n        if (to == address(0)) revert TransferZeroAddress();\r\n\r\n        if (_stakingData.stakingStatus && _addressData[to].staked && _stakingData.stakingContract.needsRewardsUpdate(to)){\r\n            _stakingData.stakingContract.aggregateRewards(to);\r\n        }\r\n\r\n        delete _tokenApprovals[tokenId]; \r\n        unchecked {\r\n            _addressData[from].balance -= 1;\r\n            _addressData[to].balance += 1;\r\n            _ownerships[tokenId] = to;\r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_ownerships[nextTokenId] == address(0) && nextTokenId < _collectionData.index) {\r\n                _ownerships[nextTokenId] = currentOwner;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See Below {ERC721L-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {ERC721TokenReceiver}, which is called upon a safe transfer.\r\n     * - `from` must not have tokens locked.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual {\r\n        transferFrom(from, to, tokenId);\r\n        if (to.code.length > 0 &&\r\n                ERC721TokenReceiver(to).onERC721Received(_msgSender(), address(0), tokenId, _data) !=\r\n                ERC721TokenReceiver.onERC721Received.selector) revert SafeTransferUnsafeDestination();\r\n    }\r\n\r\n    /**\r\n     * @dev Batch transfers `quantity` tokens sequentially starting at `startID` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `startID` token and all sequential tokens must exist and be owned by `from`.\r\n     * - `from` must not have tokens locked.\r\n     *\r\n     * Emits `quantity` number of {Transfer} events.\r\n     */\r\n    function batchTransferFrom(address from, address to, uint256 startID, uint256 quantity) public virtual {\r\n        _batchTransferFrom(from, to, startID, quantity, false, '');\r\n    }\r\n\r\n    /**\r\n     * @dev See Below {ERC721L-batchSafeTransferFrom}.\r\n     */\r\n    function batchSafeTransferFrom(address from, address to, uint256 startID, uint256 quantity) public virtual {\r\n        batchSafeTransferFrom(from, to, startID, quantity, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely batch transfers `quantity` tokens sequentially starting at `startID` from `from` to `to`, \r\n     * checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `startID` token and all sequential tokens must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {ERC721TokenReceiver}, which is called upon a safe transfer.\r\n     * - `from` must not have tokens locked.\r\n     *\r\n     * Emits `quantity` number of {Transfer} events.\r\n     */\r\n    function batchSafeTransferFrom(address from, address to, uint256 startID, uint256 quantity, bytes memory _data) public virtual {\r\n        _batchTransferFrom(from, to, startID, quantity, true, _data);\r\n    }\r\n\r\n    function _batchTransferFrom (address from, address to, uint256 startID, uint256 quantity, bool safeTransferCheck, bytes memory _data) internal {\r\n        if (!isUnlocked(from)) revert TokensLocked();\r\n        if (_msgSender() != from && !isApprovedForAll(from,_msgSender())) revert CallerLacksTransferPermissions();\r\n        if (!multiOwnerCheck(from, startID, quantity)) revert TokensNotBatchable();\r\n        if (to == address(0)) revert TransferZeroAddress();\r\n\r\n        if (_stakingData.stakingStatus && _addressData[to].staked && _stakingData.stakingContract.needsRewardsUpdate(to)){\r\n            _stakingData.stakingContract.aggregateRewards(to);\r\n        }\r\n\r\n        unchecked {\r\n            for (uint256 i; i < quantity; i++) {\r\n                uint256 currentToken = startID + i;\r\n                delete _tokenApprovals[currentToken];\r\n\r\n                if (i == 0){\r\n                    _ownerships[currentToken] = to;\r\n                } else {\r\n                    delete _ownerships[currentToken];\r\n                }\r\n                emit Transfer(from, to, currentToken);\r\n                if (safeTransferCheck){\r\n                    if(to.code.length > 0 &&\r\n                        ERC721TokenReceiver(to).onERC721Received(_msgSender(), address(0), currentToken, _data) !=\r\n                        ERC721TokenReceiver.onERC721Received.selector) revert SafeTransferUnsafeDestination();\r\n                }\r\n            }\r\n\r\n            _addressData[from].balance -= uint64(quantity);\r\n            _addressData[to].balance += uint64(quantity);\r\n            uint256 nextTokenId = startID + quantity;\r\n            if (_ownerships[nextTokenId] == address(0) && nextTokenId < _collectionData.index) {\r\n                _ownerships[nextTokenId] = from;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        unchecked {\r\n            return _collectionData.index - _collectionData.burned;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `_addressToCheck` is the owner of `quantity` tokens sequentially starting from `startID`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `startID` token and all sequential tokens must exist.\r\n     */\r\n    function multiOwnerCheck(address _addressToCheck, uint256 startID, uint256 quantity) internal view returns (bool) {\r\n        if (quantity < 2) revert BatchQuantityTooSmall();\r\n        unchecked {\r\n            for (uint256 i; i < quantity; i++) {\r\n                if (ownerOf(startID + i) != _addressToCheck){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     * - Owner must not have tokens locked.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public {\r\n        if (operator == _msgSender()) revert ApprovalToOwner();\r\n        if (!isUnlocked(_msgSender())) revert TokensLocked();\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `_owner` and tokens are unlocked for `_owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address _owner, address operator) public view returns (bool) {\r\n        return !isUnlocked(_owner) ? false : _operatorApprovals[_owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) public {\r\n        address tokenOwner = ownerOf(tokenId);\r\n        if (to == tokenOwner) revert ApprovalToOwner();\r\n        if (_msgSender() != tokenOwner && !isApprovedForAll(tokenOwner, _msgSender())) revert CallerLacksApprovalPermissions();\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(tokenOwner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        if (!_exists(tokenId)) revert getApprovedNonexistentToken();\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Stakes `_owner`'s tokens, if optionallock is enabled cannot be unstaked for optionalStakingLockPeriod days.\r\n     * Requirements:\r\n     *\r\n     * - The `caller` cannot have their tokens staked currently.\r\n     *\r\n     * Emits an {Staked} event.\r\n     */\r\n    function stake(address _owner) public stakingHelper {\r\n        if (!_stakingData.stakingStatus) revert stakingNotActive();\r\n        if (_addressData[_owner].staked) revert TokensStaked();\r\n\r\n        _addressData[_owner].staked = true;\r\n        emit Staked(_msgSender(), block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes `_owner`'s tokens if they arent in a locked staking cycle.\r\n     * Requirements:\r\n     *\r\n     * - The `_owner` cannot have their tokens unstaked currently.\r\n     * - The `_owner` cannot have their tokens optionally locked currently.\r\n     *\r\n     * Emits an {Unstaked} event.\r\n     */\r\n    function unstake(address _owner) public stakingHelper {\r\n        if (!_addressData[_owner].staked) revert TokensUnstaked();\r\n\r\n        delete _addressData[_owner].staked;\r\n        emit Unstaked(_owner, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Begins Staking Event. \r\n     * Requirements:\r\n     *\r\n     * - Staking must be inactive.\r\n     * - `_stakingContract` cannot be null address.\r\n     *\r\n     * Emits a {StakingEventStarted} event.\r\n     */\r\n    function beginStaking(address _stakingContract, uint256 _dailyYield) public onlyOwner {\r\n        if (_stakingData.stakingStatus) revert StakingActive();\r\n        if (_stakingContract == address(0)) revert beginStakingZeroAddress();\r\n\r\n        _stakingData.stakingContract = IStakingHelper(_stakingContract);\r\n        _stakingData.stakingStatus = true;\r\n        _stakingData.stakingContract.startSeason(_dailyYield);\r\n        \r\n        emit StakingEventStarted(_stakingContract, _dailyYield, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Ends Staking Event.\r\n     * Requirements:\r\n     *\r\n     * - Staking must be active.\r\n     *\r\n     * Emits a {StakingEnded} event.\r\n     */\r\n    function endStaking() public onlyOwner {\r\n        if (!_stakingData.stakingStatus) revert StakingInactive();\r\n\r\n        _stakingData.stakingContract.endSeason();\r\n        delete _stakingData;\r\n        \r\n        emit StakingEventEnded(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Locks `_owner`'s tokens from any form of transferring.\r\n     * Requirements:\r\n     *\r\n     * - The `caller` cannot have their tokens locked currently.\r\n     *\r\n     * Emits a {Locked} event.\r\n     */\r\n    function lock(uint256 _cooldown) public {\r\n        if (_addressData[_msgSender()].locked) revert TokensLocked();\r\n        if (_cooldown < 1 || _cooldown > 30) revert UnsupportedCooldownDuration();\r\n\r\n        unchecked {\r\n            uint256 proposedCooldown = _cooldown * 1 days;\r\n            if (block.timestamp + proposedCooldown < _addressData[_msgSender()].lockedUnlockTimestamp) revert CooldownTooSmall();\r\n            _addressData[_msgSender()].locked = true;\r\n            _addressData[_msgSender()].lockedUnlockCooldown = uint64(proposedCooldown);\r\n        }\r\n        \r\n        emit Locked(_msgSender(), _cooldown);\r\n    }\r\n\r\n    /**\r\n     * @dev Begins unlocking process for `_owner`'s tokens.\r\n     * Requirements:\r\n     *\r\n     * - The `caller` cannot have their tokens unlocked currently.\r\n     *\r\n     * Emits an {Unlocked} event.\r\n     */\r\n    function unlock() public {\r\n        if (!_addressData[_msgSender()].locked) revert TokensUnlocked();\r\n\r\n        delete _addressData[_msgSender()].locked;\r\n        unchecked {\r\n            _addressData[_msgSender()].lockedUnlockTimestamp = uint64(block.timestamp + _addressData[_msgSender()].lockedUnlockCooldown);\r\n        }\r\n        emit Unlocked(_msgSender(), block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current collection owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _collectionData.owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner == address(0)) revert NewOwnerAddressZero();\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        address oldOwner = _collectionData.owner;\r\n        _collectionData.owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _collectionData.name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _collectionData.symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\r\n        if (!_exists(tokenId)) revert TokenURINonexistentToken();\r\n        string memory _baseURI = baseURI();\r\n        return bytes(_baseURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenId.toString())) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function baseURI() public view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @dev Returns tokenIDs owned by `_owner`.\r\n     */\r\n    function tokensOfOwner(address _owner) public view returns (uint256[] memory) {\r\n        uint256 totalOwned = _addressData[_owner].balance;\r\n        if (totalOwned == 0) revert TokensZeroBalance();\r\n        uint256 supply = _collectionData.index;\r\n        uint256[] memory tokenIDs = new uint256[](totalOwned);\r\n        uint256 ownedIndex;\r\n        address currentOwner;\r\n\r\n        unchecked {\r\n            for (uint256 i; i < supply; i++) {\r\n                address currentAddress = _ownerships[i];\r\n                if (currentAddress != address(0)) {\r\n                    currentOwner = currentAddress;\r\n                }\r\n                if (currentOwner == _owner) {\r\n                    tokenIDs[ownedIndex++] = i;\r\n                    if (ownedIndex == totalOwned){\r\n                        return tokenIDs;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        revert TokensOfOwnerNullValue();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `_owner`'s lock status and unlock timestamp in unix time, and personal lock cooldown in days.\r\n     */\r\n    function getLockData(address _owner) public view returns (bool, uint256, uint256) {\r\n        return (_addressData[_owner].locked, \r\n        _addressData[_owner].lockedUnlockTimestamp, \r\n        _addressData[_owner].lockedUnlockCooldown);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `_address`'s staking status.\r\n     */\r\n    function getStakingStatus(address _address) public view returns (bool) {\r\n        return (_addressData[_address].staked);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token collection information.\r\n     */\r\n    function collectionInformation() public view returns (collectionData memory) {\r\n        return _collectionData;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token collection information.\r\n     */\r\n    function stakingInformation() public view returns (address, bool) {\r\n        return (address(_stakingData.stakingContract), _stakingData.stakingStatus);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\r\n        return interfaceId == 0x01ffc9a7 || interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\r\n    }\r\n\r\n    modifier stakingHelper() {\r\n      if (address(_stakingData.stakingContract) != _msgSender()) revert CallerNotStakingHelper();\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (owner() != _msgSender()) revert CallerNotOwner();\r\n        _;\r\n    }\r\n\r\n}\r\n\r\nerror CallerIsSmartContract();\r\nerror ProofFailure();\r\nerror QuantityFailure();\r\nerror SupplyFailure();\r\nerror PriceFailure();\r\nerror AmountFailure();\r\nerror MintNotActive();\r\nerror InputError();\r\nerror WithdrawFailure();\r\n\r\ncontract MYTHICAL is ERC721LPhantomStakeable {\r\n\r\n    struct addressMintData {\r\n        uint128 genesisMinted;\r\n        uint128 inhibitorMinted;\r\n    }\r\n \r\n    address public royaltyAddress;\r\n    uint256 public royaltySize = 750;\r\n    uint256 public royaltyDenominator = 10000;\r\n    mapping(uint256 => address) private _royaltyReceivers;\r\n\r\n    uint256 public maxSupply = 7777;\r\n    string private _baseURI = \"ipfs://QmVdZQvv66kvfCkZ4Lwen8bM7KJX5JgtZEmWRaGL8hy54X/\";\r\n    uint256 public allowListMaxMint = 1;\r\n    uint256 public publicMaxMint = 5;\r\n    uint256 public priceGenesis = .1 ether;\r\n    uint256 public priceInhibitor = .02 ether;\r\n    mapping(address => addressMintData) internal _addressMintData;\r\n    bytes32 public allowlistRoot = 0x8977b92ce0adeb8244cbc3b448b4332c7d78cd253f33e5e5d80924caf270375d;\r\n    uint256 public presaleActive;\r\n    uint256 public publicActive;\r\n    bool public teamAllocationMinted;\r\n    IInhibitor public INHIB;\r\n\r\n  constructor() ERC721LPhantomStakeable(\"MYTHICAL\", \"MC\") {\r\n      royaltyAddress = owner();\r\n  }\r\n\r\n  modifier callerIsUser() {\r\n    if (tx.origin != _msgSender() || _msgSender().code.length != 0) revert CallerIsSmartContract();\r\n    _;\r\n  }\r\n\r\n  function presaleMint(uint256 _quantityGenesis, uint256 _quantityInhibitor, bytes32[] calldata _proof) public payable callerIsUser {\r\n    if (presaleActive < 1) revert MintNotActive();\r\n    if (!MerkleProof.verify(_proof, allowlistRoot, keccak256(abi.encodePacked(_msgSender())))) revert ProofFailure();\r\n    unchecked {\r\n        if (_quantityGenesis + _quantityInhibitor < 1) revert QuantityFailure();\r\n        if (totalSupply() + _quantityGenesis > maxSupply) revert SupplyFailure();\r\n        if (msg.value < (_quantityGenesis * priceGenesis) + (_quantityInhibitor * priceInhibitor)) revert PriceFailure();\r\n    }\r\n\r\n    if(_quantityInhibitor > 0){\r\n        unchecked {\r\n            if (_quantityInhibitor + _addressMintData[_msgSender()].inhibitorMinted > allowListMaxMint) revert AmountFailure();\r\n            _addressMintData[_msgSender()].inhibitorMinted += uint128(_quantityInhibitor);\r\n        }\r\n        INHIB.mintHelper(_msgSender(), _quantityInhibitor);\r\n    }\r\n\r\n    if(_quantityGenesis > 0){\r\n        unchecked {\r\n            if (_quantityGenesis + _addressMintData[_msgSender()].genesisMinted > allowListMaxMint) revert AmountFailure();\r\n            _addressMintData[_msgSender()].genesisMinted += uint128(_quantityGenesis);\r\n        }\r\n        _mint(_msgSender(), _quantityGenesis);\r\n    }\r\n \r\n  }\r\n\r\n  function publicMint(uint256 _quantityGenesis, uint256 _quantityInhibitor) public payable callerIsUser {\r\n    if (publicActive < 1) revert MintNotActive();\r\n    unchecked {\r\n        if (_quantityGenesis + _quantityInhibitor < 1) revert QuantityFailure();\r\n        if (totalSupply() + _quantityGenesis > maxSupply) revert SupplyFailure();\r\n        if (msg.value < (_quantityGenesis * priceGenesis) + (_quantityInhibitor * priceInhibitor)) revert PriceFailure();\r\n    }\r\n\r\n    if(_quantityInhibitor > 0){\r\n        unchecked {\r\n            if (_quantityInhibitor > publicMaxMint) revert AmountFailure();\r\n        }\r\n        INHIB.mintHelper(_msgSender(), _quantityInhibitor);\r\n    }\r\n\r\n    if(_quantityGenesis > 0){\r\n        unchecked {\r\n            if (_quantityGenesis > publicMaxMint) revert AmountFailure();\r\n        }\r\n        _mint(_msgSender(), _quantityGenesis);\r\n    }\r\n  }\r\n\r\n  function baseURI() public view override returns (string memory) {\r\n    return _baseURI;\r\n  }\r\n\r\n  function setBaseURI(string calldata newBaseURI) external onlyOwner {\r\n    _baseURI = newBaseURI;\r\n  }\r\n\r\n  function setState(uint256 group, uint256 category, uint256 _value) external onlyOwner {\r\n    bool adjusted;\r\n    if (group == 0){\r\n        if (category == 0){\r\n            presaleActive = _value;\r\n            adjusted = true;\r\n        }\r\n\r\n        if (category == 1){\r\n            publicActive = _value;\r\n            adjusted = true;\r\n        }\r\n    }\r\n\r\n    if (group == 1){\r\n        if (category == 0){\r\n            allowListMaxMint = _value;\r\n            adjusted = true;\r\n        }\r\n\r\n        if (category == 1){\r\n            publicMaxMint = _value;\r\n            adjusted = true;\r\n        }\r\n    }\r\n\r\n    if (group == 2){\r\n\r\n        if (category == 0){\r\n            priceGenesis = _value;\r\n            adjusted = true;\r\n        }\r\n\r\n        if (category == 1){\r\n            priceInhibitor = _value;\r\n            adjusted = true;\r\n        }\r\n    }\r\n\r\n    if (!adjusted) revert InputError();\r\n  }\r\n\r\n  function setInhibitorAddress(IInhibitor _address) external onlyOwner {\r\n    INHIB = _address;\r\n  }\r\n\r\n  function setRoot(bytes32 _root) external onlyOwner {\r\n    allowlistRoot = _root;\r\n  }\r\n\r\n  function checkRemainingMints(address _address, bytes32[] calldata _proof) external view returns (uint256, uint256) {\r\n      if (!MerkleProof.verify(_proof, allowlistRoot, keccak256(abi.encodePacked(_address)))) return (0, 0);\r\n      return(allowListMaxMint - _addressMintData[_address].genesisMinted, allowListMaxMint - _addressMintData[_address].inhibitorMinted);\r\n  }\r\n\r\n  function mintTeamAllocation() external onlyOwner callerIsUser {\r\n      require(!teamAllocationMinted, \"Team Allocation already minted\");\r\n      INHIB.mintHelper(_msgSender(), 120);\r\n      _mint(_msgSender(), 120);\r\n      teamAllocationMinted = true;\r\n  }\r\n\r\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount) {\r\n      uint256 amount = (_salePrice * royaltySize)/(royaltyDenominator);\r\n      address royaltyReceiver = _royaltyReceivers[_tokenId] != address(0) ? _royaltyReceivers[_tokenId] : royaltyAddress;\r\n      return (royaltyReceiver, amount);\r\n   }\r\n\r\n    function addRoyaltyReceiverForTokenId(address receiver, uint256 tokenId) public onlyOwner {\r\n      _royaltyReceivers[tokenId] = receiver;\r\n   }\r\n\r\n  function withdraw() external onlyOwner {\r\n    uint256 currentBalance = address(this).balance;\r\n    (bool sent, ) = address(msg.sender).call{value: currentBalance}('');\r\n    if (!sent) revert WithdrawFailure();   \r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceOfZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchQuantityTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsSmartContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerLacksApprovalPermissions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerLacksTransferPermissions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotStakingHelper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CooldownTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerOfNullValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferUnsafeDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplyFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenURINonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensNotBatchable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensOfOwnerNullValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensUnstaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensZeroBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedCooldownDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"beginStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getApprovedNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"stakingNotActive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockCooldown\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedTimestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakingEventEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyYield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakingEventStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakedTimestamp\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INHIB\",\"outputs\":[{\"internalType\":\"contract IInhibitor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addRoyaltyReceiverForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowListMaxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"batchSafeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchSafeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dailyYield\",\"type\":\"uint256\"}],\"name\":\"beginStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"checkRemainingMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionInformation\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC721LPhantomStakeable.collectionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLockData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStakingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldown\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTeamAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantityGenesis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantityInhibitor\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceInhibitor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicActive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMaxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantityGenesis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantityInhibitor\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltySize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInhibitor\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInhibitorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingInformation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAllocationMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MYTHICAL", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "50000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1fb992136021118512c28be65a8c6c3390dead01e1e8df55ab537f85ed1817fe"}]}