{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"cache/solpp-generated-contracts/PendingBalanceWithdrawer.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n\\n\\n\\n\\nimport \\\"./interfaces/IZkSync.sol\\\";\\n\\ncontract PendingBalanceWithdrawer {\\n    IZkSync constant zkSync = IZkSync(0xaBEA9132b05A70803a4E85094fD0e1800777fBEF);\\n\\n    struct RequestWithdrawFT {\\n        address payable owner;\\n        address token;\\n        uint256 gas;\\n    }\\n\\n    struct RequestWithdrawNFT {\\n        uint32 tokenId;\\n        uint256 gas;\\n    }\\n\\n    function withdrawPendingBalances(RequestWithdrawFT[] calldata _FTRequests, RequestWithdrawNFT[] calldata _NFTRequests)\\n        external\\n    {\\n        for (uint256 i = 0; i < _FTRequests.length; ++i) {\\n            try\\n                zkSync.withdrawPendingBalance{gas: _FTRequests[i].gas}(\\n                    _FTRequests[i].owner,\\n                    _FTRequests[i].token,\\n                    type(uint128).max\\n                )\\n            {} catch {}\\n        }\\n\\n        for (uint256 i = 0; i < _NFTRequests.length; ++i) {\\n            try\\n                zkSync.withdrawPendingNFTBalance{gas: _NFTRequests[i].gas}(\\n                    _NFTRequests[i].tokenId\\n                )\\n            {} catch {}\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/interfaces/IZkSync.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n\\n\\ninterface IZkSync {\\n    event WithdrawalPending(uint16 indexed tokenId, address indexed recepient, uint128 amount);\\n    event WithdrawalNFTPending(uint32 indexed tokenId);\\n\\n    function withdrawPendingBalance(\\n        address payable _owner,\\n        address _token,\\n        uint128 _amount\\n    ) external;\\n\\n    function withdrawPendingNFTBalance(uint32 _tokenId) external;\\n\\n    function getPendingBalance(address _address, address _token)\\n        external\\n        view\\n        returns (uint128);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"internalType\":\"struct PendingBalanceWithdrawer.RequestWithdrawFT[]\",\"name\":\"_FTRequests\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"internalType\":\"struct PendingBalanceWithdrawer.RequestWithdrawNFT[]\",\"name\":\"_NFTRequests\",\"type\":\"tuple[]\"}],\"name\":\"withdrawPendingBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PendingBalanceWithdrawer", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}