{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount)\r\n\texternal\r\n\treturns (bool);\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\texternal\r\n\tview\r\n\treturns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n\r\ninterface IFactory {\r\n\tfunction createPair(address tokenA, address tokenB)\r\n\texternal\r\n\treturns (address pair);\r\n\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\texternal\r\n\tview\r\n\treturns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\texternal\r\n\tpayable\r\n\treturns (\r\n\t\tuint256 amountToken,\r\n\t\tuint256 amountETH,\r\n\t\tuint256 liquidity\r\n\t);\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nlibrary Address {\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\tuint256 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= amount,\r\n\t\t\t\"Address: insufficient balance\"\r\n\t\t);\r\n\r\n\t\t(bool success, ) = recipient.call{value: amount}(\"\");\r\n\t\trequire(\r\n\t\t\tsuccess,\r\n\t\t\t\"Address: unable to send value, recipient may have reverted\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction functionCall(address target, bytes memory data)\r\n\tinternal\r\n\treturns (bytes memory)\r\n\t{\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn\r\n\t\tfunctionCallWithValue(\r\n\t\t\ttarget,\r\n\t\t\tdata,\r\n\t\t\tvalue,\r\n\t\t\t\"Address: low-level call with value failed\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= value,\r\n\t\t\t\"Address: insufficient balance for call\"\r\n\t\t);\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{value: value}(\r\n\t\tdata\r\n\t\t);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction functionStaticCall(address target, bytes memory data)\r\n\tinternal\r\n\tview\r\n\treturns (bytes memory)\r\n\t{\r\n\t\treturn\r\n\t\tfunctionStaticCall(\r\n\t\t\ttarget,\r\n\t\t\tdata,\r\n\t\t\t\"Address: low-level static call failed\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction functionDelegateCall(address target, bytes memory data)\r\n\tinternal\r\n\treturns (bytes memory)\r\n\t{\r\n\t\treturn\r\n\t\tfunctionDelegateCall(\r\n\t\t\ttarget,\r\n\t\t\tdata,\r\n\t\t\t\"Address: low-level delegate call failed\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction _verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) private pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nabstract contract Context {\r\n\t\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor () {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract Shaman is IERC20, Ownable {\r\n\tusing Address for address;\r\n\tusing SafeMath for uint256;\r\n\r\n\tIRouter public uniswapV2Router;\r\n\taddress public immutable uniswapV2Pair;\r\n\r\n\tstring private constant _name =  \"Shaman\";\r\n\tstring private constant _symbol = \"SHAMAN\";\r\n\tuint8 private constant _decimals = 18;\r\n\r\n\tmapping (address => uint256) private _rOwned;\r\n\tmapping (address => uint256) private _tOwned;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\tuint256 private constant MAX = ~uint256(0);\r\n\tuint256 private constant _tTotal = 50000000000000000 * 10**18;\r\n\tuint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\tuint256 private _tFeeTotal;\r\n\r\n\tbool public isTradingEnabled;\r\n    uint256 private _tradingPausedTimestamp;\r\n\r\n\t// max wallet is 1.0% of initialSupply\r\n\tuint256 public maxWalletAmount = _tTotal * 100 / 10000;\r\n\r\n    // max tx is 0.15% of initialSupply\r\n\tuint256 public maxTxAmount = _tTotal * 150 / 100000;\r\n\r\n\tbool private _swapping;\r\n\r\n    // max wallet is 0.025% of initialSupply\r\n\tuint256 public minimumTokensBeforeSwap = _tTotal * 250 / 1000000;\r\n\r\n    address private dead = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\taddress public liquidityWallet;\r\n    address public marketingWallet;\r\n\taddress public buyBackWallet;\r\n\taddress public devWallet;\r\n\r\n\tstruct CustomTaxPeriod {\r\n\t\tbytes23 periodName;\r\n\t\tuint8 blocksInPeriod;\r\n\t\tuint256 timeInPeriod;\r\n\t\tuint8 liquidityFeeOnBuy;\r\n\t\tuint8 liquidityFeeOnSell;\r\n\t\tuint8 marketingFeeOnBuy;\r\n\t\tuint8 marketingFeeOnSell;\r\n        uint8 devFeeOnBuy;\r\n\t\tuint8 devFeeOnSell;\r\n\t\tuint8 buyBackFeeOnBuy;\r\n\t\tuint8 buyBackFeeOnSell;\r\n\t\tuint8 holdersFeeOnBuy;\r\n\t\tuint8 holdersFeeOnSell;\r\n\t}\r\n\r\n\t// Base taxes\r\n\tCustomTaxPeriod private _base = CustomTaxPeriod('base',0,0,1,1,3,3,1,1,3,3,2,2);\r\n\r\n\tmapping (address => bool) private _isExcludedFromFee;\r\n\tmapping (address => bool) private _isExcludedFromMaxWalletLimit;\r\n\tmapping (address => bool) private _isExcludedFromMaxTransactionLimit;\r\n\tmapping (address => bool) public automatedMarketMakerPairs;\r\n    mapping (address => bool) private _isExcludedFromDividends;\r\n\tmapping (address => bool) private _isAllowedToTradeWhenDisabled;\r\n    address[] private _excludedFromDividends;\r\n\r\n\tuint8 private _liquidityFee;\r\n\tuint8 private _marketingFee;\r\n    uint8 private _devFee;\r\n\tuint8 private _buyBackFee;\r\n\tuint8 private _holdersFee;\r\n\tuint8 private _totalFee;\r\n\r\n\tevent AutomatedMarketMakerPairChange(address indexed pair, bool indexed value);\r\n\tevent AllowedWhenTradingDisabledChange(address indexed account, bool isExcluded);\r\n\tevent UniswapV2RouterChange(address indexed newAddress, address indexed oldAddress);\r\n\tevent WalletChange(string indexed indentifier, address indexed newWallet, address indexed oldWallet);\r\n\tevent FeeChange(string indexed identifier, uint8 liquidityFee, uint8 marketingFee, uint8 devFee, uint8 buyBackFee, uint8 holdersFee);\r\n\tevent CustomTaxPeriodChange(uint256 indexed newValue, uint256 indexed oldValue, string indexed taxType, bytes23 period);\r\n\tevent MaxWalletAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent MaxTransactionAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event ExcludeFromDividendsChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromFeesChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromMaxTransferChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromMaxWalletChange(address indexed account, bool isExcluded);\r\n\tevent MinTokenAmountBeforeSwapChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived,uint256 tokensIntoLiqudity);\r\n\tevent ClaimETHOverflow(uint256 amount);\r\n\tevent FeesApplied(uint8 liquidityFee, uint8 marketingFee, uint8 devFee, uint8 buyBackFee, uint8 holdersFee, uint8 totalFee);\r\n\r\n\tconstructor() {\r\n\t\tliquidityWallet = owner();\r\n\t\tmarketingWallet = owner();\r\n\t\tbuyBackWallet = owner();\r\n        devWallet = owner();\r\n\r\n\t\tIRouter _uniswapV2Router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\t\taddress _uniswapV2Pair = IFactory(_uniswapV2Router.factory()).createPair(\r\n\t\t\taddress(this),\r\n\t\t\t_uniswapV2Router.WETH()\r\n\t\t);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n\t\t_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n\r\n        excludeFromDividends(address(this), true);\r\n\t\texcludeFromDividends(address(dead), true);\r\n\t\texcludeFromDividends(address(_uniswapV2Router), true);\r\n\r\n\t\t_isAllowedToTradeWhenDisabled[owner()] = true;\r\n\t\t_isAllowedToTradeWhenDisabled[address(this)] = true;\r\n\r\n\t\t_isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(this)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[owner()] = true;\r\n\r\n        _isExcludedFromMaxTransactionLimit[address(this)] = true;\r\n\t\t_isExcludedFromMaxTransactionLimit[address(dead)] = true;\r\n\t\t_isExcludedFromMaxTransactionLimit[owner()] = true;\r\n\r\n\t\t_rOwned[owner()] = _rTotal;\r\n\t\temit Transfer(address(0), owner(), _tTotal);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\t// Setters\r\n\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\tfunction transferFrom( address sender,address recipient,uint256 amount) external override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool){\r\n\t\t_approve(_msgSender(),spender,_allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n\t\t_approve(_msgSender(),spender,_allowances[_msgSender()][spender].sub(subtractedValue,\"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\tfunction _approve(address owner,address spender,uint256 amount) private {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\tfunction _getNow() private view returns (uint256) {\r\n\t\treturn block.timestamp;\r\n\t}\r\n\tfunction activateTrading() external onlyOwner {\r\n\t\tisTradingEnabled = true;\r\n\t}\r\n\tfunction deactivateTrading() external onlyOwner {\r\n\t\tisTradingEnabled = false;\r\n\t\t_tradingPausedTimestamp = _getNow();\r\n\t}\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n\t\trequire(automatedMarketMakerPairs[pair] != value, \"Shaman: Automated market maker pair is already set to that value\");\r\n\t\tautomatedMarketMakerPairs[pair] = value;\r\n\t\temit AutomatedMarketMakerPairChange(pair, value);\r\n\t}\r\n\tfunction allowTradingWhenDisabled(address account, bool allowed) external onlyOwner {\r\n\t\t_isAllowedToTradeWhenDisabled[account] = allowed;\r\n\t\temit AllowedWhenTradingDisabledChange(account, allowed);\r\n\t}\r\n\tfunction excludeFromFees(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromFee[account] != excluded, \"Shaman: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromFee[account] = excluded;\r\n\t\temit ExcludeFromFeesChange(account, excluded);\r\n\t}\r\n    function excludeFromMaxWalletLimit(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromMaxWalletLimit[account] != excluded, \"Shaman: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromMaxWalletLimit[account] = excluded;\r\n\t\temit ExcludeFromMaxWalletChange(account, excluded);\r\n\t}\r\n\tfunction excludeFromMaxTransactionLimit(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromMaxTransactionLimit[account] != excluded, \"Shaman: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromMaxTransactionLimit[account] = excluded;\r\n\t\temit ExcludeFromMaxTransferChange(account, excluded);\r\n\t}\r\n\tfunction setWallets(address newLiquidityWallet, address newMarketingWallet, address newDevWallet, address newBuyBackWallet) external onlyOwner {\r\n\t\tif(liquidityWallet != newLiquidityWallet) {\r\n            require(newLiquidityWallet != address(0), \"Shaman: The liquidityWallet cannot be 0\");\r\n\t\t\temit WalletChange('liquidityWallet', newLiquidityWallet, liquidityWallet);\r\n\t\t\tliquidityWallet = newLiquidityWallet;\r\n\t\t}\r\n        if(marketingWallet != newMarketingWallet) {\r\n            require(newMarketingWallet != address(0), \"Shaman: The marketingWallet cannot be 0\");\r\n\t\t\temit WalletChange('marketingWallet', newMarketingWallet, marketingWallet);\r\n\t\t\tmarketingWallet = newMarketingWallet;\r\n\t\t}\r\n\t\tif(devWallet != newDevWallet) {\r\n            require(newDevWallet != address(0), \"Shaman: The devWallet cannot be 0\");\r\n\t\t\temit WalletChange('devWallet', newDevWallet, devWallet);\r\n\t\t\tdevWallet = newDevWallet;\r\n\t\t}\r\n\t\tif(buyBackWallet != newBuyBackWallet) {\r\n            require(newBuyBackWallet != address(0), \"Shaman: The buyBackWallet cannot be 0\");\r\n\t\t\temit WalletChange('buyBackWallet', newBuyBackWallet, buyBackWallet);\r\n\t\t\tbuyBackWallet = newBuyBackWallet;\r\n\t\t}\r\n\t}\r\n    // Base fees\r\n\tfunction setBaseFeesOnBuy(uint8 _liquidityFeeOnBuy,  uint8 _marketingFeeOnBuy, uint8 _devFeeOnBuy,  uint8 _buyBackFeeOnBuy, uint8 _holdersFeeOnBuy) external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, _liquidityFeeOnBuy, _marketingFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy, _holdersFeeOnBuy);\r\n\t\temit FeeChange('baseFees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy, _holdersFeeOnBuy);\r\n\t}\r\n\tfunction setBaseFeesOnSell(uint8 _liquidityFeeOnSell, uint8 _marketingFeeOnSell, uint8 _devFeeOnSell, uint8 _buyBackFeeOnSell, uint8 _holdersFeeOnSell) external onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_base, _liquidityFeeOnSell, _marketingFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell, _holdersFeeOnSell);\r\n\t\temit FeeChange('baseFees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell, _holdersFeeOnSell);\r\n\t}\r\n\tfunction setMaxWalletAmount(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != maxWalletAmount, \"Shaman: Cannot update maxWalletAmount to same value\");\r\n\t\temit MaxWalletAmountChange(newValue, maxWalletAmount);\r\n\t\tmaxWalletAmount = newValue;\r\n\t}\r\n\tfunction setMaxTransactionAmount(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != maxTxAmount, \"Shaman: Cannot update maxTxAmount to same value\");\r\n        emit MaxTransactionAmountChange(newValue, maxTxAmount);\r\n        maxTxAmount = newValue;\r\n\t}\r\n\tfunction excludeFromDividends(address account, bool excluded) public onlyOwner {\r\n\t\trequire(_isExcludedFromDividends[account] != excluded, \"Shaman: Account is already the value of 'excluded'\");\r\n\t\tif(excluded) {\r\n\t\t\tif(_rOwned[account] > 0) {\r\n\t\t\t\t_tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n\t\t\t}\r\n\t\t\t_isExcludedFromDividends[account] = excluded;\r\n\t\t\t_excludedFromDividends.push(account);\r\n\t\t} else {\r\n\t\t\tfor (uint256 i = 0; i < _excludedFromDividends.length; i++) {\r\n\t\t\t\tif (_excludedFromDividends[i] == account) {\r\n\t\t\t\t\t_excludedFromDividends[i] = _excludedFromDividends[_excludedFromDividends.length - 1];\r\n\t\t\t\t\t_tOwned[account] = 0;\r\n\t\t\t\t\t_isExcludedFromDividends[account] = false;\r\n\t\t\t\t\t_excludedFromDividends.pop();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\temit ExcludeFromDividendsChange(account, excluded);\r\n\t}\r\n\tfunction setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != minimumTokensBeforeSwap, \"Shaman: Cannot update minimumTokensBeforeSwap to same value\");\r\n\t\temit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\n\t\tminimumTokensBeforeSwap = newValue;\r\n\t}\r\n\tfunction claimETHOverflow() external onlyOwner {\r\n\t\trequire(address(this).balance > 0, \"Shaman: Cannot send more than contract balance\");\r\n        uint256 amount = address(this).balance;\r\n\t\t(bool success,) = address(owner()).call{value : amount}(\"\");\r\n\t\tif (success){\r\n\t\t\temit ClaimETHOverflow(amount);\r\n\t\t}\r\n\t}\r\n\r\n\t// Getters\r\n\tfunction name() external view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\tfunction symbol() external view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\tfunction decimals() external view virtual returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\tfunction totalSupply() external view override returns (uint256) {\r\n\t\treturn _tTotal;\r\n\t}\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\tif (_isExcludedFromDividends[account]) return _tOwned[account];\r\n\t\treturn tokenFromReflection(_rOwned[account]);\r\n\t}\r\n\tfunction totalFees() external view returns (uint256) {\r\n\t\treturn _tFeeTotal;\r\n\t}\r\n\tfunction allowance(address owner, address spender) external view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n    function getBaseBuyFees() external view returns (uint8, uint8, uint8, uint8, uint8){\r\n\t\treturn (_base.liquidityFeeOnBuy, _base.marketingFeeOnBuy, _base.devFeeOnBuy, _base.buyBackFeeOnBuy, _base.holdersFeeOnBuy);\r\n\t}\r\n\tfunction getBaseSellFees() external view returns (uint8, uint8, uint8, uint8, uint8){\r\n\t\treturn (_base.liquidityFeeOnSell, _base.marketingFeeOnSell, _base.devFeeOnSell, _base.buyBackFeeOnSell, _base.holdersFeeOnSell);\r\n\t}\r\n\tfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n\t\trequire(rAmount <= _rTotal, \"Shaman: Amount must be less than total reflections\");\r\n\t\tuint256 currentRate =  _getRate();\r\n\t\treturn rAmount / currentRate;\r\n\t}\r\n\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns (uint256) {\r\n\t\trequire(tAmount <= _tTotal, \"Shaman: Amount must be less than supply\");\r\n\t\tuint256 currentRate = _getRate();\r\n\t\tuint256 rAmount  = tAmount * currentRate;\r\n\t\tif (!deductTransferFee) {\r\n\t\t\treturn rAmount;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tuint256 rTotalFee  = tAmount * _totalFee / 100 * currentRate;\r\n\t\t\tuint256 rTransferAmount = rAmount - rTotalFee;\r\n\t\t\treturn rTransferAmount;\r\n\t\t}\r\n\t}\r\n\r\n\t// Main\r\n\tfunction _transfer(\r\n\taddress from,\r\n\taddress to,\r\n\tuint256 amount\r\n\t) internal {\r\n\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\t\trequire(amount <= balanceOf(from), \"Shaman: Cannot transfer more than balance\");\r\n\r\n\t\tbool isBuyFromLp = automatedMarketMakerPairs[from];\r\n\t\tbool isSelltoLp = automatedMarketMakerPairs[to];\r\n\r\n\t\tif(!_isAllowedToTradeWhenDisabled[from] && !_isAllowedToTradeWhenDisabled[to]) {\r\n\t\t\trequire(isTradingEnabled, \"Shaman: Trading is currently disabled.\");\r\n            if (!_isExcludedFromMaxTransactionLimit[to] && !_isExcludedFromMaxTransactionLimit[from]) {\r\n                require(amount <= maxTxAmount, \"Shaman: Transfer amount exceeds the maxTxAmount.\");\r\n            }\r\n\t\t\tif (!_isExcludedFromMaxWalletLimit[to]) {\r\n\t\t\t\trequire((balanceOf(to) + amount) <= maxWalletAmount, \"Shaman: Expected wallet amount exceeds the maxWalletAmount.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_adjustTaxes(isBuyFromLp, isSelltoLp);\r\n\t\tbool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n\t\tif (\r\n\t\t\tisTradingEnabled &&\r\n\t\t\tcanSwap &&\r\n\t\t\t!_swapping &&\r\n\t\t\t_totalFee > 0 &&\r\n\t\t\tautomatedMarketMakerPairs[to]\r\n\t\t) {\r\n\t\t\t_swapping = true;\r\n\t\t\t_swapAndLiquify();\r\n\t\t\t_swapping = false;\r\n\t\t}\r\n\r\n\t\tbool takeFee = !_swapping && isTradingEnabled;\r\n\r\n\t\tif(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n\t\t\ttakeFee = false;\r\n\t\t}\r\n\t\t_tokenTransfer(from, to, amount, takeFee);\r\n\t}\r\n\tfunction _tokenTransfer(address sender,address recipient, uint256 tAmount, bool takeFee) private {\r\n\t\t(uint256 tTransferAmount,uint256 tFee, uint256 tOther) = _getTValues(tAmount, takeFee);\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rOther) = _getRValues(tAmount, tFee, tOther, _getRate());\r\n\r\n\t\tif (_isExcludedFromDividends[sender]) {\r\n\t\t\t_tOwned[sender] = _tOwned[sender] - tAmount;\r\n\t\t}\r\n\t\tif (_isExcludedFromDividends[recipient]) {\r\n\t\t\t_tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n\t\t}\r\n\t\t_rOwned[sender] = _rOwned[sender] - rAmount;\r\n\t\t_rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n\t\t_takeContractFees(rOther, tOther);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n\t\t_rTotal -= rFee;\r\n\t\t_tFeeTotal += tFee;\r\n\t}\r\n\tfunction _getTValues(uint256 tAmount, bool takeFee) private view returns (uint256,uint256,uint256){\r\n\t\tif (!takeFee) {\r\n\t\t\treturn (tAmount, 0, 0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tuint256 tFee = tAmount * _holdersFee / 100;\r\n\t\t\tuint256 tOther = tAmount * (_liquidityFee + _devFee + _marketingFee + _buyBackFee) / 100;\r\n\t\t\tuint256 tTransferAmount = tAmount - (tFee + tOther);\r\n\t\t\treturn (tTransferAmount, tFee, tOther);\r\n\t\t}\r\n\t}\r\n\tfunction _getRValues(\r\n\t\tuint256 tAmount,\r\n\t\tuint256 tFee,\r\n\t\tuint256 tOther,\r\n\t\tuint256 currentRate\r\n\t\t) private pure returns ( uint256, uint256, uint256, uint256) {\r\n\t\tuint256 rAmount = tAmount * currentRate;\r\n\t\tuint256 rFee = tFee * currentRate;\r\n\t\tuint256 rOther = tOther * currentRate;\r\n\t\tuint256 rTransferAmount = rAmount - (rFee + rOther);\r\n\t\treturn (rAmount, rTransferAmount, rFee, rOther);\r\n\t}\r\n\tfunction _getRate() private view returns (uint256) {\r\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\t\treturn rSupply.div(tSupply);\r\n\t}\r\n\tfunction _getCurrentSupply() private view returns (uint256, uint256) {\r\n\t\tuint256 rSupply = _rTotal;\r\n\t\tuint256 tSupply = _tTotal;\r\n\t\tfor (uint256 i = 0; i < _excludedFromDividends.length; i++) {\r\n\t\t\tif (\r\n\t\t\t\t_rOwned[_excludedFromDividends[i]] > rSupply ||\r\n\t\t\t\t_tOwned[_excludedFromDividends[i]] > tSupply\r\n\t\t\t) return (_rTotal, _tTotal);\r\n\t\t\trSupply = rSupply - _rOwned[_excludedFromDividends[i]];\r\n\t\t\ttSupply = tSupply - _tOwned[_excludedFromDividends[i]];\r\n\t\t}\r\n\t\tif (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n\t\treturn (rSupply, tSupply);\r\n\t}\r\n\tfunction _takeContractFees(uint256 rOther, uint256 tOther) private {\r\n\t\tif (_isExcludedFromDividends[address(this)]) {\r\n\t\t\t_tOwned[address(this)] += tOther;\r\n\t\t}\r\n\t\t_rOwned[address(this)] += rOther;\r\n\t}\r\n\tfunction _adjustTaxes(bool isBuyFromLp, bool isSelltoLp) private {\r\n\t\t_liquidityFee = 0;\r\n\t\t_devFee = 0;\r\n\t\t_marketingFee = 0;\r\n\t\t_buyBackFee = 0;\r\n\t\t_holdersFee = 0;\r\n\r\n\t\tif (isBuyFromLp) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnBuy;\r\n\t\t\t_devFee = _base.devFeeOnBuy;\r\n\t\t\t_marketingFee = _base.marketingFeeOnBuy;\r\n\t\t\t_buyBackFee = _base.buyBackFeeOnBuy;\r\n\t\t\t_holdersFee = _base.holdersFeeOnBuy;\r\n\t\t}\r\n\t\tif (isSelltoLp) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnSell;\r\n\t\t\t_devFee = _base.devFeeOnSell;\r\n\t\t\t_marketingFee = _base.marketingFeeOnSell;\r\n\t\t\t_buyBackFee = _base.buyBackFeeOnSell;\r\n\t\t\t_holdersFee = _base.holdersFeeOnSell;\r\n\t\t}\r\n\t\t_totalFee = _liquidityFee + _marketingFee + _devFee + _buyBackFee + _holdersFee;\r\n\t\temit FeesApplied(_liquidityFee, _marketingFee, _devFee, _buyBackFee, _holdersFee, _totalFee);\r\n\t}\r\n\tfunction _setCustomSellTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint8 _liquidityFeeOnSell,\r\n\t\tuint8 _marketingFeeOnSell,\r\n        uint8 _devFeeOnSell,\r\n\t\tuint8 _buyBackFeeOnSell,\r\n\t\tuint8 _holdersFeeOnSell\r\n\t) private {\r\n\t\tif (map.liquidityFeeOnSell != _liquidityFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnSell, map.liquidityFeeOnSell, 'liquidityFeeOnSell', map.periodName);\r\n\t\t\tmap.liquidityFeeOnSell = _liquidityFeeOnSell;\r\n\t\t}\r\n\t\tif (map.marketingFeeOnSell != _marketingFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_marketingFeeOnSell, map.marketingFeeOnSell, 'marketingFeeOnSell', map.periodName);\r\n\t\t\tmap.marketingFeeOnSell = _marketingFeeOnSell;\r\n\t\t}\r\n        if (map.devFeeOnSell != _devFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_devFeeOnSell, map.devFeeOnSell, 'devFeeOnSell', map.periodName);\r\n\t\t\tmap.devFeeOnSell = _devFeeOnSell;\r\n\t\t}\r\n\t\tif (map.buyBackFeeOnSell != _buyBackFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_buyBackFeeOnSell, map.buyBackFeeOnSell, 'buyBackFeeOnSell', map.periodName);\r\n\t\t\tmap.buyBackFeeOnSell = _buyBackFeeOnSell;\r\n\t\t}\r\n\t\tif (map.holdersFeeOnSell != _holdersFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_holdersFeeOnSell, map.holdersFeeOnSell, 'holdersFeeOnSell', map.periodName);\r\n\t\t\tmap.holdersFeeOnSell = _holdersFeeOnSell;\r\n\t\t}\r\n\t}\r\n\tfunction _setCustomBuyTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint8 _liquidityFeeOnBuy,\r\n\t\tuint8 _marketingFeeOnBuy,\r\n        uint8 _devFeeOnBuy,\r\n\t\tuint8 _buyBackFeeOnBuy,\r\n\t\tuint8 _holdersFeeOnBuy\r\n\t) private {\r\n\t\tif (map.liquidityFeeOnBuy != _liquidityFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnBuy, map.liquidityFeeOnBuy, 'liquidityFeeOnBuy', map.periodName);\r\n\t\t\tmap.liquidityFeeOnBuy = _liquidityFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.marketingFeeOnBuy != _marketingFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_marketingFeeOnBuy, map.marketingFeeOnBuy, 'marketingFeeOnBuy', map.periodName);\r\n\t\t\tmap.marketingFeeOnBuy = _marketingFeeOnBuy;\r\n\t\t}\r\n        if (map.devFeeOnBuy != _devFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_devFeeOnBuy, map.devFeeOnBuy, 'devFeeOnBuy', map.periodName);\r\n\t\t\tmap.devFeeOnBuy = _devFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.buyBackFeeOnBuy != _buyBackFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_buyBackFeeOnBuy, map.buyBackFeeOnBuy, 'buyBackFeeOnBuy', map.periodName);\r\n\t\t\tmap.buyBackFeeOnBuy = _buyBackFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.holdersFeeOnBuy != _holdersFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_holdersFeeOnBuy, map.holdersFeeOnBuy, 'holdersFeeOnBuy', map.periodName);\r\n\t\t\tmap.holdersFeeOnBuy = _holdersFeeOnBuy;\r\n\t\t}\r\n\t}\r\n\tfunction _swapAndLiquify() private {\r\n\t\tuint256 contractBalance = balanceOf(address(this));\r\n\t\tuint256 initialETHBalance = address(this).balance;\r\n\r\n\t\tuint8 totalFeePrior = _totalFee;\r\n        uint8 liquidityFeePrior = _liquidityFee;\r\n        uint8 marketingFeePrior = _marketingFee;\r\n        uint8 devFeePrior = _devFee;\r\n        uint8 buyBackFeePrior  = _buyBackFee;\r\n\t\tuint8 holdersFeePrior = _holdersFee;\r\n\r\n\t\tuint256 amountToLiquify = contractBalance * _liquidityFee / _totalFee / 2;\r\n\t\tuint256 amountToSwapForETH = contractBalance - amountToLiquify;\r\n\r\n\t\t_swapTokensForETH(amountToSwapForETH);\r\n\r\n\t\tuint256 ETHBalanceAfterSwap = address(this).balance - initialETHBalance;\r\n\t\tuint256 totalETHFee = totalFeePrior - (liquidityFeePrior / 2) - (holdersFeePrior);\r\n\t\tuint256 amountETHLiquidity = ETHBalanceAfterSwap * liquidityFeePrior / totalETHFee / 2;\r\n\t\tuint256 amountETHDev = ETHBalanceAfterSwap * devFeePrior / totalETHFee;\r\n\t\tuint256 amountETHBuyBack = ETHBalanceAfterSwap * buyBackFeePrior / totalETHFee;\r\n\t\tuint256 amountETHMarketing = ETHBalanceAfterSwap - (amountETHLiquidity + amountETHDev + amountETHBuyBack);\r\n\r\n\t\tpayable(marketingWallet).transfer(amountETHMarketing);\r\n\t\tpayable(devWallet).transfer(amountETHDev);\r\n\t\tpayable(buyBackWallet).transfer(amountETHBuyBack);\r\n\r\n\t\tif (amountToLiquify > 0) {\r\n\t\t\t_addLiquidity(amountToLiquify, amountETHLiquidity);\r\n\t\t\temit SwapAndLiquify(amountToSwapForETH, amountETHLiquidity, amountToLiquify);\r\n\t\t}\r\n\t\t_totalFee = totalFeePrior;\r\n        _liquidityFee = liquidityFeePrior;\r\n        _marketingFee = marketingFeePrior;\r\n        _devFee = devFeePrior;\r\n        _buyBackFee = buyBackFeePrior;\r\n\t\t_holdersFee = holdersFeePrior;\r\n\t}\r\n\tfunction _swapTokensForETH(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\ttokenAmount,\r\n\t\t0, // accept any amount of ETH\r\n\t\tpath,\r\n\t\taddress(this),\r\n\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\tfunction _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\t\taddress(this),\r\n\t\ttokenAmount,\r\n\t\t0, // slippage is unavoidable\r\n\t\t0, // slippage is unavoidable\r\n\t\tliquidityWallet,\r\n\t\tblock.timestamp\r\n\t\t);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"AllowedWhenTradingDisabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimETHOverflow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes23\",\"name\":\"period\",\"type\":\"bytes23\"}],\"name\":\"CustomTaxPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromDividendsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxTransferChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"marketingFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyBackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"holdersFee\",\"type\":\"uint8\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"marketingFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyBackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"holdersFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"totalFee\",\"type\":\"uint8\"}],\"name\":\"FeesApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountBeforeSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indentifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"WalletChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowTradingWhenDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETHOverflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBuyFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSellFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBuyBackWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Shaman", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a45651408d5c4241893b3de81f96b113421ebf00bdb90bd0f443035893113592"}]}