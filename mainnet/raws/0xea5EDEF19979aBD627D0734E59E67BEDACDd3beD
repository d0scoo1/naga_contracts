{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/adapters/RcaShieldConvex.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../RcaShieldBase.sol\\\";\\nimport \\\"../../external/Convex.sol\\\";\\n\\ncontract RcaShieldConvex is RcaShieldBase {\\n    using SafeERC20 for IERC20Metadata;\\n\\n    IConvexRewardPool public immutable rewardPool;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _uToken,\\n        address _governance,\\n        address _controller,\\n        IConvexRewardPool _rewardPool\\n    ) RcaShieldBase(_name, _symbol, _uToken, _governance, _controller) {\\n        rewardPool = _rewardPool;\\n        uToken.safeApprove(address(rewardPool), type(uint256).max);\\n    }\\n\\n    function getReward() external {\\n        rewardPool.getReward(address(this), true);\\n    }\\n\\n    function purchase(\\n        address _token,\\n        uint256 _amount, // token amount to buy\\n        uint256 _tokenPrice,\\n        bytes32[] calldata _tokenPriceProof,\\n        uint256 _underlyingPrice,\\n        bytes32[] calldata _underlyinPriceProof\\n    ) external {\\n        require(_token != address(uToken), \\\"cannot buy underlying token\\\");\\n        controller.verifyPrice(_token, _tokenPrice, _tokenPriceProof);\\n        controller.verifyPrice(address(uToken), _underlyingPrice, _underlyinPriceProof);\\n        uint256 underlyingAmount = (_amount * _tokenPrice) / _underlyingPrice;\\n        if (discount > 0) {\\n            underlyingAmount -= (underlyingAmount * discount) / DENOMINATOR;\\n        }\\n        IERC20Metadata(_token).safeTransfer(msg.sender, _amount);\\n        uToken.safeTransferFrom(msg.sender, address(this), underlyingAmount);\\n        rewardPool.stake(underlyingAmount);\\n    }\\n\\n    function _uBalance() internal view override returns (uint256) {\\n        return uToken.balanceOf(address(this)) + rewardPool.balanceOf(address(this));\\n    }\\n\\n    function _afterMint(uint256 _uAmount) internal override {\\n        rewardPool.stake(_uAmount);\\n    }\\n\\n    function _afterRedeem(uint256 _uAmount) internal override {\\n        // CHEK : we are not going to claims rewards here since it will be claimed on _update\\n        rewardPool.withdraw(_uAmount, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/RcaShieldBase.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * By using this contract and/or any other launched by the Ease protocol, you agree to Ease's\\n * Terms and Conditions, Privacy Policy, and Terms of Coverage.\\n * https://ease.org/about-ease-defi/terms-and-conditions-disclaimer/\\n * https://ease.org/about-ease-defi/privacy-policy/\\n * https://ease.org/learn-crypto-defi/get-defi-cover-at-ease/ease-defi-cover/terms-of-ease-coverage/\\n */\\n\\n/**\\n\\n                               ................                            \\n                          ..',,;;::::::::ccccc:;,'..                       \\n                      ..',;;;;::::::::::::cccccllllc;..                    \\n                    .';;;;;;;,'..............',:clllolc,.                  \\n                  .,;;;;;,..                    .';cooool;.                \\n                .';;;;;'.           .....          .,coodoc.               \\n               .,;;;;'.       ..',;:::cccc:;,'.      .;odddl'              \\n              .,;;;;.       .,:cccclllllllllool:'      ,odddl'             \\n             .,:;:;.      .;ccccc:;,''''',;cooooo:.     ,odddc.            \\n             ';:::'     .,ccclc,..         .':odddc.    .cdddo,            \\n            .;:::,.     ,cccc;.              .:oddd:.    ,dddd:.           \\n            '::::'     .ccll:.                .ldddo'    'odddc.           \\n            ,::c:.     ,lllc'    .';;;::::::::codddd;    ,dxxxc.           \\n           .,ccc:.    .;lllc.    ,oooooddddddddddddd;    :dxxd:            \\n            ,cccc.     ;llll'    .;:ccccccccccccccc;.   'oxxxo'            \\n            'cccc,     'loooc.                         'lxxxd;             \\n            .:lll:.    .;ooooc.                      .;oxxxd:.             \\n             ,llll;.    .;ooddo:'.                ..:oxxxxo;.              \\n             .:llol,.     'coddddl:;''.........,;codxxxxd:.                \\n              .:lool;.     .':odddddddddoooodddxxxxxxdl;.                  \\n               .:ooooc'       .';codddddddxxxxxxdol:,.                     \\n                .;ldddoc'.        ...'',,;;;,,''..                         \\n                  .:oddddl:'.                          .,;:'.              \\n                    .:odddddoc;,...              ..',:ldxxxx;              \\n                      .,:odddddddoolcc::::::::cllodxxxxxxxd:.              \\n                         .';clddxxxxxxxxxxxxxxxxxxxxxxoc;'.                \\n                             ..',;:ccllooooooollc:;,'..                    \\n                                        ......                             \\n                                                                      \\n**/\\n\\npragma solidity 0.8.11;\\nimport \\\"../general/Governable.sol\\\";\\nimport \\\"../interfaces/IRouter.sol\\\";\\nimport \\\"../interfaces/IRcaController.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title RCA Vault\\n * @notice Main contract for reciprocally-covered assets. Mints, redeems, and sells.\\n * Each underlying token (not protocol) has its own RCA vault. This contract\\n * doubles as the vault and the RCA token.\\n * @dev This contract assumes uToken decimals of 18.\\n * @author Ease -- Robert M.C. Forster, Romke Jonker, Taek Lee, Chiranjibi Poudyal, Dominik Prediger\\n **/\\nabstract contract RcaShieldBase is ERC20, Governable {\\n    using SafeERC20 for IERC20Metadata;\\n\\n    uint256 constant YEAR_SECS = 31536000;\\n    uint256 constant DENOMINATOR = 10000;\\n    uint256 constant BUFFER = 1e18;\\n\\n    /// @notice Controller of RCA contract that takes care of actions.\\n    IRcaController public controller;\\n    /// @notice Underlying token that is protected by the shield.\\n    IERC20Metadata public immutable uToken;\\n\\n    /// @notice Percent to pay per year. 1000 == 10%.\\n    uint256 public apr;\\n    /// @notice Current sale discount to sell tokens cheaper.\\n    uint256 public discount;\\n    /// @notice Treasury for all funds that accepts payments.\\n    address payable public treasury;\\n    /// @notice Percent of the contract that is currently paused and cannot be withdrawn.\\n    /// Set > 0 when a hack has happened and DAO has not submitted for sales.\\n    /// Withdrawals during this time will lose this percent. 1000 == 10%.\\n    uint256 public percentReserved;\\n\\n    /**\\n     * @notice Cumulative total amount that has been liquidated lol.\\n     * @dev Used to make sure we don't run into a situation where liq amount isn't updated,\\n     * a new hack occurs and current liq is added to, then current liq is updated while\\n     * DAO votes on the new total liq. In this case we can subtract that interim addition.\\n     */\\n    uint256 public cumLiqForClaims;\\n    /// @notice Amount of tokens currently up for sale.\\n    uint256 public amtForSale;\\n\\n    /**\\n     * @notice Amount of RCA tokens pending withdrawal.\\n     * @dev When doing value calculations this is required because RCAs are burned immediately\\n     * upon request, but underlying tokens only leave the contract once the withdrawal is finalized.\\n     */\\n    uint256 public pendingWithdrawal;\\n    /// @notice withdrawal variable for withdrawal delays.\\n    uint256 public withdrawalDelay;\\n    /// @notice Requests by users for withdrawals.\\n    mapping(address => WithdrawRequest) public withdrawRequests;\\n\\n    /**\\n     * @notice Last time the contract has been updated.\\n     * @dev Used to calculate APR if fees are implemented.\\n     */\\n    uint256 lastUpdate;\\n\\n    struct WithdrawRequest {\\n        uint112 uAmount;\\n        uint112 rcaAmount;\\n        uint32 endTime;\\n    }\\n\\n    /// @notice Notification of the mint of new tokens.\\n    event Mint(\\n        address indexed sender,\\n        address indexed to,\\n        address indexed referrer,\\n        uint256 uAmount,\\n        uint256 rcaAmount,\\n        uint256 timestamp\\n    );\\n    /// @notice Notification of an initial redeem request.\\n    event RedeemRequest(address indexed user, uint256 uAmount, uint256 rcaAmount, uint256 endTime, uint256 timestamp);\\n    /// @notice Notification of a redeem finalization after withdrawal delay.\\n    event RedeemFinalize(\\n        address indexed user,\\n        address indexed to,\\n        uint256 uAmount,\\n        uint256 rcaAmount,\\n        uint256 timestamp\\n    );\\n    /// @notice Notification of a purchase of the underlying token.\\n    event PurchaseU(address indexed to, uint256 uAmount, uint256 ethAmount, uint256 price, uint256 timestamp);\\n    /// @notice Notification of a purchase of an RCA token.\\n    event PurchaseRca(\\n        address indexed to,\\n        uint256 uAmount,\\n        uint256 rcaAmount,\\n        uint256 ethAmount,\\n        uint256 price,\\n        uint256 timestamp\\n    );\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    //////////////////////////////////////////////// modifiers //////////////////////////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Restrict set functions to only controller for many variables.\\n     */\\n    modifier onlyController() {\\n        require(msg.sender == address(controller), \\\"Function must only be called by controller.\\\");\\n        _;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    //////////////////////////////////////////////// constructor ////////////////////////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Construct shield and RCA ERC20 token.\\n     * @param _name Name of the RCA token.\\n     * @param _symbol Symbol of the RCA token.\\n     * @param _uToken Address of the underlying token.\\n     * @param _governor Address of the governor (owner) of the shield.\\n     * @param _controller Address of the controller that maintains the shield.\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _uToken,\\n        address _governor,\\n        address _controller\\n    ) ERC20(_name, _symbol) {\\n        initializeGovernable(_governor);\\n        uToken = IERC20Metadata(_uToken);\\n        controller = IRcaController(_controller);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    //////////////////////////////////////////////// initialize /////////////////////////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Controller calls to initiate which sets current contract variables. All %s are 1000 == 10%.\\n     * @param _apr Fees for using the RCA ecosystem.\\n     * @param _discount Discount for purchases while tokens are being liquidated.\\n     * @param _treasury Address of the treasury to which Ether from fees and liquidation will be sent.\\n     * @param _withdrawalDelay Delay of withdrawals from the shield in seconds.\\n     */\\n    function initialize(\\n        uint256 _apr,\\n        uint256 _discount,\\n        address payable _treasury,\\n        uint256 _withdrawalDelay\\n    ) external onlyController {\\n        require(treasury == address(0), \\\"Contract has already been initialized.\\\");\\n        apr = _apr;\\n        discount = _discount;\\n        treasury = _treasury;\\n        withdrawalDelay = _withdrawalDelay;\\n        lastUpdate = block.timestamp;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    ///////////////////////////////////////////////// external //////////////////////////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Mint tokens to an address. Not automatically to msg.sender so we can more easily zap assets.\\n     * @param _user The user to mint tokens to.\\n     * @param _referrer The address that referred this user.\\n     * @param _uAmount Amount of underlying tokens desired to use for mint.\\n     * @param _expiry Time (Unix timestamp) that this request expires.\\n     * @param _v The recovery byte of the signature.\\n     * @param _r Half of the ECDSA signature pair.\\n     * @param _s Half of the ECDSA signature pair.\\n     * @param _newCumLiqForClaims New total cumulative liquidated if there is one.\\n     * @param _liqForClaimsProof Merkle proof to verify cumulative liquidated.\\n     */\\n    function mintTo(\\n        address _user,\\n        address _referrer,\\n        uint256 _uAmount,\\n        uint256 _expiry,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s,\\n        uint256 _newCumLiqForClaims,\\n        bytes32[] calldata _liqForClaimsProof\\n    ) external virtual {\\n        // Call controller to check capacity limits, add to capacity limits, emit events, check for new \\\"for sale\\\".\\n        controller.mint(_user, _uAmount, _expiry, _v, _r, _s, _newCumLiqForClaims, _liqForClaimsProof);\\n\\n        // Only update fees after potential contract update.\\n        _update();\\n\\n        uint256 rcaAmount = _rcaValue(_uAmount, amtForSale);\\n\\n        uToken.safeTransferFrom(msg.sender, address(this), _uAmount);\\n\\n        _mint(_user, rcaAmount);\\n\\n        _afterMint(_uAmount);\\n\\n        emit Mint(msg.sender, _user, _referrer, _uAmount, rcaAmount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Request redemption of RCAs back to the underlying token.\\n     * Has a withdrawal delay so it's 2 parts (request and finalize).\\n     * @param _rcaAmount The amount of tokens (in RCAs) to be redeemed.\\n     * @param _newCumLiqForClaims New cumulative liquidated if this must be updated.\\n     * @param _liqForClaimsProof Merkle proof to verify the new cumulative liquidated.\\n     * @param _newPercentReserved New percent of funds in shield that are reserved.\\n     * @param _percentReservedProof Merkle proof for the new percent reserved.\\n     */\\n    function redeemRequest(\\n        uint256 _rcaAmount,\\n        uint256 _newCumLiqForClaims,\\n        bytes32[] calldata _liqForClaimsProof,\\n        uint256 _newPercentReserved,\\n        bytes32[] calldata _percentReservedProof\\n    ) external {\\n        controller.redeemRequest(\\n            msg.sender,\\n            _newCumLiqForClaims,\\n            _liqForClaimsProof,\\n            _newPercentReserved,\\n            _percentReservedProof\\n        );\\n\\n        _update();\\n\\n        uint256 uAmount = _uValue(_rcaAmount, amtForSale, percentReserved);\\n        _burn(msg.sender, _rcaAmount);\\n\\n        _afterRedeem(uAmount);\\n\\n        pendingWithdrawal += _rcaAmount;\\n\\n        WithdrawRequest memory curRequest = withdrawRequests[msg.sender];\\n        uint112 newUAmount = uint112(uAmount) + curRequest.uAmount;\\n        uint112 newRcaAmount = uint112(_rcaAmount) + curRequest.rcaAmount;\\n        uint32 endTime = uint32(block.timestamp) + uint32(withdrawalDelay);\\n        withdrawRequests[msg.sender] = WithdrawRequest(newUAmount, newRcaAmount, endTime);\\n\\n        emit RedeemRequest(msg.sender, uint256(uAmount), _rcaAmount, uint256(endTime), block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Used to exchange RCA tokens back to the underlying token. Will have a 1-2 day delay upon withdrawal.\\n     * This can mint to a router contract that can exchange the asset for Ether and send to the user.\\n     * @param _to The destination of the tokens.\\n     * @param _newCumLiqForClaims New cumulative liquidated if this must be updated.\\n     * @param _liqForClaimsProof Merkle proof to verify new cumulative liquidation.\\n     * @param _liqForClaimsProof Merkle proof to verify the new cumulative liquidated.\\n     * @param _newPercentReserved New percent of funds in shield that are reserved.\\n     * @param _percentReservedProof Merkle proof for the new percent reserved.\\n     */\\n    function redeemFinalize(\\n        address _to,\\n        bytes calldata _routerData,\\n        uint256 _newCumLiqForClaims,\\n        bytes32[] calldata _liqForClaimsProof,\\n        uint256 _newPercentReserved,\\n        bytes32[] calldata _percentReservedProof\\n    ) external virtual {\\n        address user = msg.sender;\\n\\n        WithdrawRequest memory request = withdrawRequests[user];\\n        delete withdrawRequests[user];\\n\\n        // endTime > 0 ensures request exists.\\n        require(request.endTime > 0 && uint32(block.timestamp) > request.endTime, \\\"Withdrawal not yet allowed.\\\");\\n\\n        bool isRouterVerified = controller.redeemFinalize(\\n            user,\\n            _to,\\n            _newCumLiqForClaims,\\n            _liqForClaimsProof,\\n            _newPercentReserved,\\n            _percentReservedProof\\n        );\\n\\n        _update();\\n\\n        // We're going to calculate uAmount a second time here then send the lesser of the two.\\n        // If we only calculate once, users can either get their full uAmount after a hack if percentReserved\\n        // hasn't been sent in, or users can earn yield after requesting redeem (with the same consequence).\\n        uint256 uAmount = _uValue(request.rcaAmount, amtForSale, percentReserved);\\n        if (request.uAmount < uAmount) uAmount = uint256(request.uAmount);\\n\\n        pendingWithdrawal -= uint256(request.rcaAmount);\\n\\n        uToken.safeTransfer(_to, uAmount);\\n\\n        // The cool part about doing it this way rather than having user send RCAs to router contract,\\n        // then it exchanging and returning Ether is that it's more gas efficient and no approvals are needed.\\n        // (and no nonsense with the withdrawal delay making routers wonky)\\n        if (isRouterVerified) IRouter(_to).routeTo(user, uAmount, _routerData);\\n\\n        emit RedeemFinalize(user, _to, uAmount, uint256(request.rcaAmount), block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Purchase underlying tokens directly. This will be preferred by bots.\\n     * @param _user The user to purchase tokens for.\\n     * @param _uAmount Amount of underlying tokens to purchase.\\n     * @param _uEthPrice Price of the underlying token in Ether per token.\\n     * @param _priceProof Merkle proof for the price.\\n     * @param _newCumLiqForClaims New cumulative amount for liquidation.\\n     * @param _liqForClaimsProof Merkle proof for new liquidation amounts.\\n     */\\n    function purchaseU(\\n        address _user,\\n        uint256 _uAmount,\\n        uint256 _uEthPrice,\\n        bytes32[] calldata _priceProof,\\n        uint256 _newCumLiqForClaims,\\n        bytes32[] calldata _liqForClaimsProof\\n    ) external payable virtual {\\n        // If user submits incorrect price, tx will fail here.\\n        controller.purchase(_user, address(uToken), _uEthPrice, _priceProof, _newCumLiqForClaims, _liqForClaimsProof);\\n\\n        _update();\\n\\n        uint256 price = _uEthPrice - ((_uEthPrice * discount) / DENOMINATOR);\\n        // divide by 1 ether because price also has 18 decimals.\\n        uint256 ethAmount = (price * _uAmount) / 1 ether;\\n        require(msg.value == ethAmount, \\\"Incorrect Ether sent.\\\");\\n\\n        // If amount is bigger than for sale, tx will fail here.\\n        amtForSale -= _uAmount;\\n\\n        uToken.safeTransfer(_user, _uAmount);\\n        treasury.transfer(msg.value);\\n\\n        emit PurchaseU(_user, _uAmount, ethAmount, _uEthPrice, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice purchaseRca allows a user to purchase the RCA directly with Ether through liquidation.\\n     * @param _user The user to make the purchase for.\\n     * @param _uAmount The amount of underlying tokens to purchase.\\n     * @param _uEthPrice The underlying token price in Ether per token.\\n     * @param _priceProof Merkle proof to verify this price.\\n     * @param _newCumLiqForClaims Old cumulative amount for sale.\\n     * @param _liqForClaimsProof Merkle proof of the for sale amounts.\\n     */\\n    function purchaseRca(\\n        address _user,\\n        uint256 _uAmount,\\n        uint256 _uEthPrice,\\n        bytes32[] calldata _priceProof,\\n        uint256 _newCumLiqForClaims,\\n        bytes32[] calldata _liqForClaimsProof\\n    ) external payable {\\n        // If user submits incorrect price, tx will fail here.\\n        controller.purchase(_user, address(uToken), _uEthPrice, _priceProof, _newCumLiqForClaims, _liqForClaimsProof);\\n\\n        _update();\\n\\n        uint256 price = _uEthPrice - ((_uEthPrice * discount) / DENOMINATOR);\\n        // divide by 1 ether because price also has 18 decimals.\\n        uint256 ethAmount = (price * _uAmount) / 1 ether;\\n        require(msg.value == ethAmount, \\\"Incorrect Ether sent.\\\");\\n\\n        // If amount is too big than for sale, tx will fail here.\\n        uint256 rcaAmount = _rcaValue(_uAmount, amtForSale);\\n        amtForSale -= _uAmount;\\n\\n        _mint(_user, rcaAmount);\\n        treasury.transfer(msg.value);\\n\\n        emit PurchaseRca(_user, _uAmount, rcaAmount, _uEthPrice, ethAmount, block.timestamp);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    /////////////////////////////////////////////////// view ////////////////////////////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev External version of RCA value is needed so that frontend can properly\\n     * calculate values in cases where the contract has not been recently updated.\\n     * @param _rcaAmount Amount of RCA tokens (18 decimal) to find the underlying token value of.\\n     * @param _cumLiqForClaims New cumulative liquidated if this must be updated.\\n     * @param _percentReserved Percent of tokens that are reserved after a hack payout.\\n     */\\n    function uValue(\\n        uint256 _rcaAmount,\\n        uint256 _cumLiqForClaims,\\n        uint256 _percentReserved\\n    ) external view returns (uint256 uAmount) {\\n        uint256 extraForSale = getExtraForSale(_cumLiqForClaims);\\n        uAmount = _uValue(_rcaAmount, amtForSale + extraForSale, _percentReserved);\\n    }\\n\\n    /**\\n     * @dev External version of RCA value is needed so that frontend can properly\\n     * calculate values in cases where the contract has not been recently updated.\\n     * @param _uAmount Amount of underlying tokens (18 decimal).\\n     * @param _cumLiqForClaims New cumulative liquidated if this must be updated.\\n     */\\n    function rcaValue(uint256 _uAmount, uint256 _cumLiqForClaims) external view returns (uint256 rcaAmount) {\\n        uint256 extraForSale = getExtraForSale(_cumLiqForClaims);\\n        rcaAmount = _rcaValue(_uAmount, amtForSale + extraForSale);\\n    }\\n\\n    /**\\n     * @notice Convert RCA value to underlying tokens. This is internal because new\\n     * for sale amounts will already have been retrieved and updated.\\n     * @param _rcaAmount The amount of RCAs to find the underlying value of.\\n     * @param _totalForSale Used by external value calls cause updates aren't made on those.\\n     * @param _percentReserved Percent of funds reserved if a hack is being examined.\\n     */\\n    function _uValue(\\n        uint256 _rcaAmount,\\n        uint256 _totalForSale,\\n        uint256 _percentReserved\\n    ) internal view returns (uint256 uAmount) {\\n        uint256 balance = _uBalance();\\n\\n        if (totalSupply() == 0) return _rcaAmount;\\n        else if (balance < _totalForSale) return 0;\\n\\n        uAmount = ((balance - _totalForSale) * _rcaAmount) / (totalSupply() + pendingWithdrawal);\\n\\n        if (_percentReserved > 0) uAmount -= ((uAmount * _percentReserved) / DENOMINATOR);\\n    }\\n\\n    /**\\n     * @notice Find the RCA value of an amount of underlying tokens.\\n     * @param _uAmount Amount of underlying tokens to find RCA value of.\\n     * @param _totalForSale Used by external value calls cause updates aren't made on those.\\n     */\\n    function _rcaValue(uint256 _uAmount, uint256 _totalForSale) internal view virtual returns (uint256 rcaAmount) {\\n        uint256 balance = _uBalance();\\n\\n        // Interesting edgecase in which 1 person is in vault, they request redeem,\\n        // underlying continue to gain value, then withdraw their original value.\\n        // Vault is then un-useable because below we're dividing 0 by > 0.\\n        if (balance == 0 || totalSupply() == 0 || balance < _totalForSale) return _uAmount;\\n\\n        rcaAmount = ((totalSupply() + pendingWithdrawal) * _uAmount) / (balance - _totalForSale);\\n    }\\n\\n    /**\\n     * @notice For frontend calls. Doesn't need to verify info because it's not changing state.\\n     */\\n    function getExtraForSale(uint256 _newCumLiqForClaims) public view returns (uint256 extraForSale) {\\n        // Check for liquidation, then percent paused, then APR\\n        uint256 extraLiqForClaims = _newCumLiqForClaims - cumLiqForClaims;\\n        uint256 extraFees = _getInterimFees(controller.apr(), uint256(controller.getAprUpdate()));\\n        extraForSale = extraFees + extraLiqForClaims;\\n        return extraForSale;\\n    }\\n\\n    /**\\n     * @notice Get the amount that should be added to \\\"amtForSale\\\" based on actions within the time since last update.\\n     * @dev If values have changed within the interim period,\\n     * this function averages them to find new owed amounts for fees.\\n     * @param _newApr new APR.\\n     * @param _aprUpdate start time for new APR.\\n     */\\n    function _getInterimFees(uint256 _newApr, uint256 _aprUpdate) internal view returns (uint256 fees) {\\n        // Get all variables that are currently in this contract's state.\\n        uint256 balance = _uBalance();\\n        uint256 aprAvg = apr * BUFFER;\\n        uint256 totalTimeElapsed = block.timestamp - lastUpdate;\\n\\n        // Find average APR throughout period if it has been updated.\\n        if (_aprUpdate > lastUpdate) {\\n            uint256 aprPrev = apr * (_aprUpdate - lastUpdate);\\n            uint256 aprCur = _newApr * (block.timestamp - _aprUpdate);\\n            aprAvg = ((aprPrev + aprCur) * BUFFER) / totalTimeElapsed;\\n        }\\n\\n        // Will probably never occur, but just in case.\\n        if (balance < amtForSale) return 0;\\n\\n        // Calculate fees based on average active amount.\\n        uint256 activeInclReserved = balance - amtForSale;\\n        fees = (activeInclReserved * aprAvg * totalTimeElapsed) / YEAR_SECS / DENOMINATOR / BUFFER;\\n    }\\n\\n    /**\\n     * @notice Grabs full underlying balance to make frontend fetching much easier.\\n     */\\n    function uBalance() external view returns (uint256) {\\n        return _uBalance();\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    //////////////////////////////////////////////// internal ///////////////////////////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Update the amtForSale if there's an active fee.\\n     */\\n    function _update() internal {\\n        if (apr > 0) {\\n            uint256 balance = _uBalance();\\n\\n            // If liquidation for claims is set incorrectly this could occur and break the contract.\\n            if (balance < amtForSale) return;\\n\\n            uint256 secsElapsed = block.timestamp - lastUpdate;\\n            uint256 active = balance - amtForSale;\\n            uint256 activeExclReserved = active - ((active * percentReserved) / DENOMINATOR);\\n\\n            amtForSale += (activeExclReserved * secsElapsed * apr) / YEAR_SECS / DENOMINATOR;\\n        }\\n\\n        lastUpdate = block.timestamp;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    ///////////////////////////////////////////////// virtual ///////////////////////////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Check balance of underlying token.\\n    function _uBalance() internal view virtual returns (uint256);\\n\\n    /// @notice Logic to run after a mint, such as if we need to stake the underlying token.\\n    function _afterMint(uint256 _uAmount) internal virtual;\\n\\n    /// @notice Logic to run after a redeem, such as unstaking.\\n    function _afterRedeem(uint256 _uAmount) internal virtual;\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    /////////////////////////////////////////////// onlyController //////////////////////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Update function to be called by controller. This is only called when a controller has made\\n     * an APR update since the last shield update was made, so it must do extra calculations to determine\\n     * what the exact costs throughout the period were according to when system updates were made.\\n     */\\n    function controllerUpdate(uint256 _newApr, uint256 _aprUpdate) external onlyController {\\n        uint256 extraFees = _getInterimFees(_newApr, _aprUpdate);\\n\\n        amtForSale += extraFees;\\n        lastUpdate = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Add a for sale amount to this shield vault.\\n     * @param _newCumLiqForClaims New cumulative total for sale.\\n     **/\\n    function setLiqForClaims(uint256 _newCumLiqForClaims) external onlyController {\\n        if (_newCumLiqForClaims > cumLiqForClaims) {\\n            amtForSale += _newCumLiqForClaims - cumLiqForClaims;\\n        } else {\\n            uint256 subtrahend = cumLiqForClaims - _newCumLiqForClaims;\\n            amtForSale = amtForSale > subtrahend ? amtForSale - subtrahend : 0;\\n        }\\n\\n        require(_uBalance() >= amtForSale, \\\"amtForSale is too high.\\\");\\n\\n        cumLiqForClaims = _newCumLiqForClaims;\\n    }\\n\\n    /**\\n     * @notice Change the treasury address to which funds will be sent.\\n     * @param _newTreasury New treasury address.\\n     **/\\n    function setTreasury(address _newTreasury) external onlyController {\\n        treasury = payable(_newTreasury);\\n    }\\n\\n    /**\\n     * @notice Change the percent reserved on this vault. 1000 == 10%.\\n     * @param _newPercentReserved New percent reserved.\\n     **/\\n    function setPercentReserved(uint256 _newPercentReserved) external onlyController {\\n        // Protection to not have too much reserved from any single vault.\\n        if (_newPercentReserved > 3300) {\\n            percentReserved = 3300;\\n        } else {\\n            percentReserved = _newPercentReserved;\\n        }\\n    }\\n\\n    /**\\n     * @notice Change the withdrawal delay of withdrawing underlying tokens from vault. In seconds.\\n     * @param _newWithdrawalDelay New withdrawal delay.\\n     **/\\n    function setWithdrawalDelay(uint256 _newWithdrawalDelay) external onlyController {\\n        withdrawalDelay = _newWithdrawalDelay;\\n    }\\n\\n    /**\\n     * @notice Change the discount that users get for purchasing from us. 1000 == 10%.\\n     * @param _newDiscount New discount.\\n     **/\\n    function setDiscount(uint256 _newDiscount) external onlyController {\\n        discount = _newDiscount;\\n    }\\n\\n    /**\\n     * @notice Change the treasury address to which funds will be sent.\\n     * @param _newApr New APR. 1000 == 10%.\\n     **/\\n    function setApr(uint256 _newApr) external onlyController {\\n        apr = _newApr;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    ////////////////////////////////////////////////// onlyGov //////////////////////////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Update Controller to a new address. Very rare case for this to be used.\\n     * @param _newController Address of the new Controller contract.\\n     */\\n    function setController(address _newController) external onlyGov {\\n        controller = IRcaController(_newController);\\n    }\\n\\n    /**\\n     * @notice Needed for Nexus to prove this contract lost funds. We'll likely have reinsurance\\n     * at least at the beginning to ensure we don't have too much risk in certain protocols.\\n     * @param _coverAddress Address that we need to send 0 eth to to confirm we had a loss.\\n     */\\n    function proofOfLoss(address payable _coverAddress) external onlyGov {\\n        _coverAddress.transfer(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/Convex.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.11;\\n\\ninterface IConvexRewardPool {\\n    function rewardToken() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256 idx) external view returns (address);\\n\\n    function getReward(address _user, bool _extra) external returns (bool);\\n\\n    function stake(uint256 _amount) external returns (bool);\\n\\n    function withdraw(uint256 _amount, bool _claim) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/general/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title Governable\\n * @dev Pretty default ownable but with variable names changed to better convey owner.\\n */\\ncontract Governable {\\n    address payable private _governor;\\n    address payable private _pendingGovernor;\\n\\n    event OwnershipTransferred(address indexed previousGovernor, address indexed newGovernor);\\n    event PendingOwnershipTransfer(address indexed from, address indexed to);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    function initializeGovernable(address _newGovernor) internal {\\n        require(_governor == address(0), \\\"already initialized\\\");\\n        _governor = payable(_newGovernor);\\n        emit OwnershipTransferred(address(0), _newGovernor);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function governor() public view returns (address payable) {\\n        return _governor;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyGov() {\\n        require(isGov(), \\\"msg.sender is not owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isGov() public view returns (bool) {\\n        return msg.sender == _governor;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newGovernor The address to transfer ownership to.\\n     */\\n    function transferOwnership(address payable newGovernor) public onlyGov {\\n        _pendingGovernor = newGovernor;\\n        emit PendingOwnershipTransfer(_governor, newGovernor);\\n    }\\n\\n    function receiveOwnership() public {\\n        require(msg.sender == _pendingGovernor, \\\"Only pending governor can call this function\\\");\\n        _transferOwnership(_pendingGovernor);\\n        _pendingGovernor = payable(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newGovernor The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address payable newGovernor) internal {\\n        require(newGovernor != address(0));\\n        emit OwnershipTransferred(_governor, newGovernor);\\n        _governor = newGovernor;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.11;\\n\\ninterface IRouter {\\n    function routeTo(\\n        address user,\\n        uint256 uAmount,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRcaController.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.11;\\n\\ninterface IRcaController {\\n    function mint(\\n        address user,\\n        uint256 uAmount,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 _newCumLiq,\\n        bytes32[] calldata cumLiqProof\\n    ) external;\\n\\n    function redeemRequest(\\n        address user,\\n        uint256 _newCumLiq,\\n        bytes32[] calldata cumLiqProof,\\n        uint256 _newPercentReserved,\\n        bytes32[] calldata _percentReservedProof\\n    ) external;\\n\\n    function redeemFinalize(\\n        address user,\\n        address _to,\\n        uint256 _newCumLiq,\\n        bytes32[] calldata cumLiqProof,\\n        uint256 _newPercentReserved,\\n        bytes32[] calldata _percentReservedProof\\n    ) external returns (bool);\\n\\n    function purchase(\\n        address user,\\n        address uToken,\\n        uint256 uEthPrice,\\n        bytes32[] calldata priceProof,\\n        uint256 _newCumLiq,\\n        bytes32[] calldata cumLiqProof\\n    ) external;\\n\\n    function verifyLiq(\\n        address shield,\\n        uint256 _newCumLiq,\\n        bytes32[] memory cumLiqProof\\n    ) external view;\\n\\n    function verifyPrice(\\n        address shield,\\n        uint256 _value,\\n        bytes32[] memory _proof\\n    ) external view;\\n\\n    function apr() external view returns (uint256);\\n\\n    function getAprUpdate() external view returns (uint32);\\n\\n    function systemUpdates()\\n        external\\n        view\\n        returns (\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_uToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IConvexRewardPool\",\"name\":\"_rewardPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rcaAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PendingOwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rcaAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PurchaseRca\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PurchaseU\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rcaAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RedeemFinalize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rcaAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RedeemRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amtForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IRcaController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aprUpdate\",\"type\":\"uint256\"}],\"name\":\"controllerUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumLiqForClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCumLiqForClaims\",\"type\":\"uint256\"}],\"name\":\"getExtraForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraForSale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalDelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGov\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newCumLiqForClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_liqForClaimsProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_coverAddress\",\"type\":\"address\"}],\"name\":\"proofOfLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokenPriceProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_underlyinPriceProof\",\"type\":\"bytes32[]\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uEthPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_priceProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_newCumLiqForClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_liqForClaimsProof\",\"type\":\"bytes32[]\"}],\"name\":\"purchaseRca\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uEthPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_priceProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_newCumLiqForClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_liqForClaimsProof\",\"type\":\"bytes32[]\"}],\"name\":\"purchaseU\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cumLiqForClaims\",\"type\":\"uint256\"}],\"name\":\"rcaValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rcaAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_routerData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_newCumLiqForClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_liqForClaimsProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_newPercentReserved\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_percentReservedProof\",\"type\":\"bytes32[]\"}],\"name\":\"redeemFinalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rcaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newCumLiqForClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_liqForClaimsProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_newPercentReserved\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_percentReservedProof\",\"type\":\"bytes32[]\"}],\"name\":\"redeemRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"contract IConvexRewardPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newApr\",\"type\":\"uint256\"}],\"name\":\"setApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDiscount\",\"type\":\"uint256\"}],\"name\":\"setDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCumLiqForClaims\",\"type\":\"uint256\"}],\"name\":\"setLiqForClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercentReserved\",\"type\":\"uint256\"}],\"name\":\"setPercentReserved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWithdrawalDelay\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rcaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cumLiqForClaims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentReserved\",\"type\":\"uint256\"}],\"name\":\"uValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"uAmount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"rcaAmount\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RcaShieldConvex", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000bc857f97c0554d1d0d602b56f2eece682016fba0000000000000000000000005afedef13bd7b3e363db724420d773caa8b88763000000000000000000000000ea5edef1a7106d9e2024240299df3d00c7d94767000000000000000000000000b1fb0ba0676a1ffa83882c7f4805408ba232c1fa00000000000000000000000000000000000000000000000000000000000000176376786372764356584554482045617365205661756c74000000000000000000000000000000000000000000000000000000000000000000000000000000000f657a2d6376786372764356584554480000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}