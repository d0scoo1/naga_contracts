{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\n\r\n//AUTHOR: NIKE :)\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IOwnable {\r\n    function manager() external view returns (address);\r\n\r\n    function renounceManagement() external;\r\n\r\n    function pushManagement(address newOwner_) external;\r\n\r\n    function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed(address(0), _owner);\r\n    }\r\n\r\n    function manager() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyManager() {\r\n        emit OwnershipPushed(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement(address newOwner_) public virtual override onlyManager() {\r\n        require(newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed(_owner, newOwner_);\r\n        _newOwner = newOwner_;\r\n    }\r\n\r\n    function pullManagement() public virtual override {\r\n        require(msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {// Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITreasury {\r\n    function transferRewards( address _recipient, uint _amount ) external;\r\n}\r\n\r\ninterface IOHMERC20 {\r\n    function burnFrom(address account_, uint256 amount_) external;\r\n}\r\n\r\n\r\ninterface IStickmanERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ncontract StickmanSagaNFTStaking is Ownable, IERC721Receiver {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  address public nftContract;\r\n  address public stixToken;\r\n\r\n  bool public locked; // Locks all deposits, claims, and withdrawls\r\n  uint256 public withdrawlFee; //fee in ETH for withdrawing staked NFT\r\n  uint256 public claimLength; // Length of time between claims\r\n  uint256 public claimReward = 49*(10**18); // Reward per Stickman staked\r\n \r\n  mapping(address => vestedInfo) public inventory; // Each token ID mapped to the info about each one\r\n  mapping(uint8 => uint256) public stakingTimestamps;\r\n\r\n  struct vestedInfo {\r\n    uint256 lastClaimTime; // Current length of time between claims\r\n    bool locked; // Lock NFT to prevent claiming or withdraw\r\n    uint8[] depositedNFTs; //keep track of all the NFTs deposited\r\n    uint256 rewardAmount; //when number of NFTs changes, update this number\r\n    uint256 initialDepositDate;\r\n  }\r\n\r\n  uint256[] public rewardChangeTime; //tracks when rewards are changed, used to calculate rewards over multiple claim rewards\r\n  mapping (uint256 => uint256) public rewardAmounts; //tracks reward amount when they are changed, used to calculate rewards over multiple claim rewards\r\n  \r\n  /** reentrancy */\r\n  uint256 private guard = 1;\r\n  modifier reentrancyGuard() {\r\n      require (guard == 1, \"reentrancy failure.\");\r\n      guard = 2;\r\n      _;\r\n      guard = 1;\r\n  }\r\n\r\n  // modifiers\r\n  modifier checkNFTOwner(uint8[] calldata tokenIds, address owner){\r\n    for (uint256 index = 0; index < tokenIds.length; index++) {\r\n      require(owner == IStickmanERC721(nftContract).ownerOf(tokenIds[index]), \"You can only deposit NFTs that are yours.\");\r\n    }\r\n    _;\r\n  }\r\n\r\n  modifier checkNFTOwnerInContract(uint8 token, address owner){\r\n    bool correctOwner = false;\r\n    for (uint256 index = 0; index < inventory[owner].depositedNFTs.length; index++) {\r\n      if(token == inventory[owner].depositedNFTs[index]){\r\n        correctOwner = true;\r\n      }\r\n    }\r\n    require(correctOwner, \"You can only withdraw NFTs that are yours.\");\r\n    _;\r\n  }\r\n\r\n  modifier checkFees(uint8[] calldata tokenIds){\r\n    uint256 totalFee=0;\r\n    for (uint256 index = 0; index < tokenIds.length; index++) {\r\n      if(stakingTimestamps[tokenIds[index]] + 30 days >  block.timestamp){\r\n        totalFee += withdrawlFee;\r\n      }\r\n    }\r\n    require(msg.value >= totalFee, \"Must send the correct fee amount.\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _nftContract, // Stickman Saga NFT contract\r\n    address _stixToken // STIX token contract\r\n  ) {\r\n    nftContract = _nftContract;\r\n    claimLength = 1 days;\r\n    stixToken = _stixToken;\r\n    withdrawlFee = .01 * 10**18;\r\n    rewardChangeTime.push(block.timestamp);\r\n    rewardAmounts[block.timestamp] = 49*(10**18);\r\n  }\r\n\r\n  function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n      return this.onERC721Received.selector;\r\n  }\r\n\r\n  function depositNFTs(uint8[] calldata tokenIds) public reentrancyGuard checkNFTOwner(tokenIds, msg.sender) {\r\n    require(!locked, \"Deposit: All deposits are currently locked.\");\r\n    require(tokenIds.length + inventory[msg.sender].depositedNFTs.length >= 2, \"Deposit: you must deposit at least 2 NFTs\");\r\n    claimBalance(msg.sender);\r\n\r\n    for (uint256 index = 0; index < tokenIds.length; index++) {\r\n      require(IStickmanERC721(nftContract).ownerOf(tokenIds[index]) == msg.sender, \"Deposit: You are not the owner of this token ID.\");\r\n      inventory[msg.sender].depositedNFTs.push(tokenIds[index]);\r\n      IStickmanERC721(nftContract).safeTransferFrom(msg.sender, address(this), tokenIds[index]);\r\n      stakingTimestamps[tokenIds[index]] = block.timestamp;\r\n    }\r\n  }\r\n\r\n  function withdraw(uint8[] calldata tokenIds) public payable reentrancyGuard checkFees(tokenIds) {\r\n    require(!locked, \"Withdraw: All withdrawls are currently locked.\");\r\n    require(!inventory[msg.sender].locked, \"Withdraw: Withdraw is locked for this token ID.\");\r\n    require(inventory[msg.sender].depositedNFTs.length-tokenIds.length != 1, \"Withdrawl: must keep at least two NFTs staked.\");\r\n    for (uint256 index = 0; index < tokenIds.length; index++) {\r\n      transferNFTs(tokenIds[index], msg.sender);\r\n    }\r\n    claimBalance(msg.sender);\r\n  }\r\n  \r\n  function claim() public reentrancyGuard {\r\n    require(!locked, \"Claim: All claims are currently locked.\");\r\n    claimBalance(msg.sender);\r\n  }\r\n\r\n  function balanceOf(address _address) public view returns (uint) {\r\n    return inventory[_address].depositedNFTs.length;\r\n  }\r\n\r\n  // Policy Functions\r\n  function setClaimlength(uint256 _claimLength) public onlyManager() {\r\n    claimLength = _claimLength;\r\n  }\r\n\r\n  function pullWithdrawlFees() external onlyManager() {\r\n      uint256 total = address(this).balance;\r\n      payable(_owner).transfer(total);\r\n  }  \r\n\r\n  function setWithdrawalFee(uint256 newFee) public onlyManager() {\r\n    withdrawlFee = newFee;\r\n  }\r\n\r\n  function setClaimReward(uint256 newClaimReward) public onlyManager(){\r\n    rewardChangeTime.push(block.timestamp);\r\n    rewardAmounts[block.timestamp] = newClaimReward;\r\n    claimReward = newClaimReward;\r\n  }\r\n\r\n  function managerSafeNFTWithdrawal(uint256[] calldata tokenIDs, address recipient) public onlyManager() {\r\n    for (uint256 index = 0; index < tokenIDs.length; index++) {\r\n          deleteDeposit(tokenIDs[index], recipient);\r\n          IStickmanERC721(nftContract).safeTransferFrom(address(this), recipient, tokenIDs[index]);\r\n    }\r\n  }\r\n\r\n  function managerBypassNFTWithdrawal(uint256 tokenID) public onlyManager() {\r\n    IStickmanERC721(nftContract).safeTransferFrom(address(this), msg.sender, tokenID); // Forcefully withdraw NFT and bypass deleteDeposit() in emergency or incase of accidental transfer\r\n  }\r\n\r\n  function managerTokenWithdrawal(address tokenAddress, address recipient) public onlyManager() {\r\n    IERC20(tokenAddress).safeTransferFrom(address(this), recipient, IERC20(tokenAddress).balanceOf(address(this)));\r\n  }\r\n\r\n  function managerTokenTransfer(address tokenAddress, address recipient, uint256 amount) public onlyManager() {\r\n    IERC20(tokenAddress).safeTransferFrom(address(this), recipient, amount);\r\n  }\r\n\r\n  function toggleNFTLock(address user) public onlyManager() {\r\n    require(user == address(0x0), \"toggleNFTLock: Token ID does not exist.\");\r\n    inventory[user].locked = !inventory[user].locked;\r\n  }\r\n\r\n  function toggleLock() public onlyManager() {\r\n    locked = !locked;\r\n  }\r\n\r\n  enum CONTRACTS { nftContract, stixToken }\r\n  function setContract(CONTRACTS _contracts, address _address) public onlyManager() {\r\n    if (_contracts == CONTRACTS.nftContract) { // 0\r\n      nftContract = _address;\r\n    }else if (_contracts == CONTRACTS.stixToken) { // 2\r\n      stixToken = _address;\r\n    } \r\n  }\r\n\r\n  // Internal Functions\r\n  function getMultiplier(uint numStakedNFTs) internal pure returns(uint){\r\n    if (numStakedNFTs == 2) {\r\n      return 10;\r\n    } \r\n    else if (numStakedNFTs == 3){\r\n      return 11;\r\n    }\r\n    else if (numStakedNFTs == 4){\r\n      return 12;\r\n    }\r\n    else if (numStakedNFTs >= 5){\r\n      return 13;\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function deleteDeposit(uint256 tokenId, address _recipient) internal {\r\n    uint8[] memory list = new uint8[](inventory[_recipient].depositedNFTs.length-1);\r\n      uint z=0;\r\n      for (uint i=0; i < inventory[_recipient].depositedNFTs.length; i++) {\r\n        if (inventory[_recipient].depositedNFTs[i] != tokenId) {\r\n          list[z] = inventory[_recipient].depositedNFTs[i];\r\n          z++;\r\n        }\r\n      }\r\n      inventory[_recipient].depositedNFTs = list;\r\n  }\r\n\r\n  function transferNFTs(uint8 token, address recipient) internal checkNFTOwnerInContract(token, recipient) {\r\n      IStickmanERC721(nftContract).safeTransferFrom(address(this), recipient, token);\r\n      deleteDeposit(token, recipient);\r\n  }\r\n\r\n  function claimBalance(address _recipient) internal {\r\n      uint256 rewards = calculateRewards(_recipient);\r\n      if(rewards > 0){\r\n        IERC20(stixToken).transfer(\r\n        _recipient, \r\n        rewards\r\n      );\r\n    }\r\n    \r\n    inventory[_recipient].lastClaimTime = block.timestamp - ((block.timestamp-inventory[_recipient].lastClaimTime) % claimLength);\r\n  }\r\n\r\n  function calculateRewards(address _recipient) public view returns (uint256){\r\n    uint256 rewards = 0;\r\n    for (uint256 index = 1; index <= rewardChangeTime.length; index++) {\r\n      uint256 currentClaimReward = rewardAmounts[rewardChangeTime[rewardChangeTime.length-index]];\r\n      if (rewards > 0){\r\n        if(inventory[_recipient].lastClaimTime > rewardChangeTime[rewardChangeTime.length-index]){\r\n          rewards += (rewardChangeTime[rewardChangeTime.length-index+1] - inventory[_recipient].lastClaimTime).div(claimLength).mul(currentClaimReward).mul(inventory[_recipient].depositedNFTs.length);\r\n          return rewards.mul(getMultiplier(inventory[_recipient].depositedNFTs.length)).div(10);\r\n        }\r\n        else{\r\n          rewards += (rewardChangeTime[rewardChangeTime.length-index+1] - rewardChangeTime[rewardChangeTime.length-index]).div(claimLength).mul(currentClaimReward).mul(inventory[_recipient].depositedNFTs.length);\r\n        }\r\n      }\r\n      else{\r\n        if(inventory[_recipient].lastClaimTime > rewardChangeTime[rewardChangeTime.length-index]){\r\n          rewards += (block.timestamp - inventory[_recipient].lastClaimTime).div(claimLength).mul(claimReward).mul(inventory[_recipient].depositedNFTs.length);\r\n          return rewards.mul(getMultiplier(inventory[_recipient].depositedNFTs.length)).div(10);\r\n        }\r\n        else{\r\n          rewards += (block.timestamp - rewardChangeTime[rewardChangeTime.length-index]).div(claimLength).mul(claimReward).mul(inventory[_recipient].depositedNFTs.length);\r\n        }\r\n      }\r\n    }\r\n\r\n    return rewards.mul(getMultiplier(inventory[_recipient].depositedNFTs.length)).div(10);\r\n  }\r\n\r\n  // Visual Functions\r\n  function getClaimableAmount(address _recipient) public view returns (uint256) {\r\n    return calculateRewards(_recipient);\r\n  }\r\n\r\n  function getWithdrawlFee(address _recipient) public view returns (uint256) {\r\n    uint256 totalFee=0;\r\n    for (uint256 index = 0; index < inventory[_recipient].depositedNFTs.length; index++) {\r\n      if(stakingTimestamps[inventory[_recipient].depositedNFTs[index]] + 30 days >  block.timestamp){\r\n        totalFee += withdrawlFee;\r\n      }\r\n    }\r\n    return totalFee;\r\n  }\r\n\r\n  function getWithdrawlFeesForTokens(uint8[] calldata tokenIds) public view returns (uint256){\r\n    uint256 totalFee=0;\r\n    for (uint256 index = 0; index < tokenIds.length; index++) {\r\n      if(stakingTimestamps[tokenIds[index]] + 30 days >  block.timestamp){\r\n        totalFee += withdrawlFee;\r\n      }\r\n    }\r\n    return totalFee;\r\n  }\r\n\r\n  function getTokenIdsForAddressExternal(address nftOwner) public view returns(uint8[] memory){\r\n    uint8[] memory tokenIds = new uint8[](IStickmanERC721(nftContract).balanceOf(nftOwner));\r\n    uint z=0;\r\n    for (uint8 index = 1; index <= IStickmanERC721(nftContract).totalSupply(); index++) {\r\n      if(IStickmanERC721(nftContract).ownerOf(index)==nftOwner){\r\n        tokenIds[z]= index;\r\n        z++;\r\n      }\r\n    }\r\n    return tokenIds;\r\n  }\r\n\r\n  function getTokenIdsForAddress(address addr) public view returns(uint8[] memory){\r\n    return inventory[addr].depositedNFTs;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stixToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"tokenIds\",\"type\":\"uint8[]\"}],\"name\":\"depositNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTokenIdsForAddress\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"}],\"name\":\"getTokenIdsForAddressExternal\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getWithdrawlFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"tokenIds\",\"type\":\"uint8[]\"}],\"name\":\"getWithdrawlFeesForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDepositDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"managerBypassNFTWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"managerSafeNFTWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"managerTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"managerTokenWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullWithdrawlFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardChangeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newClaimReward\",\"type\":\"uint256\"}],\"name\":\"setClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimLength\",\"type\":\"uint256\"}],\"name\":\"setClaimlength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StickmanSagaNFTStaking.CONTRACTS\",\"name\":\"_contracts\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stakingTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stixToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"toggleNFTLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"tokenIds\",\"type\":\"uint8[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawlFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StickmanSagaNFTStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000c052fddebbe76697fadf0a502db9ed54f210f87000000000000000000000000e0031b44724d8dbd984404ffc3022e3ee6af9523", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2220bd79f14d32a4e97cd41e175700af2e818abf8ccdb92f275ab2f95f0014a3"}]}