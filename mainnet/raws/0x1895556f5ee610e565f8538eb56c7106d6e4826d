{"status": "1", "message": "OK", "result": [{"SourceCode": "/// @author Cliff Syner / Alpine\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface PartialERC721{\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\ncontract TokenSavior{\r\n    //In case something goes wrong.\r\n    address _validator;\r\n    bool functionality = true;\r\n\r\n    //Maintain the addresses of the approved receivers\r\n    mapping(address => address) approved_receivers;\r\n\r\n    constructor(){\r\n        _validator = msg.sender;\r\n        approved_receivers[address(0xfDeEBB7D5eF8BA128cd0F8CFCde7cD6b7E9B6891)] = address(0x42563CB907629373eB1F507C30577D49483128E1);\r\n    }\r\n    \r\n    /// @param old_account The account with the tokens at risk\r\n    /// @return The receiver address connected to the old_account\r\n    function findReceiver(address old_account) public view onlyLive returns(address){\r\n        return approved_receivers[old_account];\r\n    }\r\n\r\n    function removeReceiver() public onlyLive{\r\n        delete approved_receivers[msg.sender];\r\n    }\r\n    /// @param old_account The account with the tokens at risk\r\n    /// @param _contract The address of the smart contract of the NFTs you are trying to save\r\n    /// @return Returns a number representing the state of the potential transaction. (must be called from receiving address) 0 = Ready to save tokens, 1 = Contract is not approved for transferring your tokens, 2 = Receiver has not been set or is invalid.\r\n    function isReadyToSave(address old_account, address _contract) public view onlyLive returns(uint){\r\n        if(!PartialERC721(_contract).isApprovedForAll(old_account, address(this))){\r\n            return 1;\r\n        }\r\n        if(!(approved_receivers[old_account] == msg.sender)){\r\n            return 2;\r\n        }\r\n        return 0;\r\n        \r\n    }  \r\n    \r\n    /// @param receiver The address that will pay the gas fee to receive the NFTs \"lost\" in the sender's account.\r\n    function setReceiver(address receiver) public onlyLive{\r\n        //On success we can know for sure that the msg.sender owns the NFTs in question\r\n        approved_receivers[msg.sender] = receiver;\r\n    }\r\n    \r\n    /// @param old_account The account that contains the NFTs to be transferred.\r\n    /// @param _contract The smart contract of the NFTs to be transferred.\r\n    /// @param token_ids The token ids to be transferred. \r\n    function batchRetrieve(address old_account, address _contract, uint[] memory token_ids) public onlyLive{\r\n        require(msg.sender == approved_receivers[old_account], \"Not receiver.\");\r\n        require(PartialERC721(_contract).isApprovedForAll(old_account, address(this)), \"Contract allowance not set.\");\r\n        for(uint i = 0; i < token_ids.length; i++){\r\n            PartialERC721(_contract).transferFrom(old_account, msg.sender, token_ids[i]);\r\n        }\r\n    }\r\n\r\n    /// @param old_account The account that contains the NFT to be transferred.\r\n    /// @param _contract The smart contract of the NFT to be transferred.\r\n    /// @param token_id The token id to be transferred. \r\n    function retrieve(address old_account, address _contract, uint token_id) public onlyLive{\r\n        require(msg.sender == approved_receivers[old_account], \"Receiver not verified.\");\r\n        require(PartialERC721(_contract).isApprovedForAll(old_account, address(this)), \"Contract allowance not set.\");\r\n        PartialERC721(_contract).transferFrom(old_account, msg.sender, token_id);\r\n    }\r\n    \r\n    function toggle() public onlyValidator {\r\n        functionality = !functionality;\r\n    }\r\n\r\n    modifier onlyLive() {\r\n        require(functionality);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidator() {\r\n        require(_validator == msg.sender);\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"old_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"token_ids\",\"type\":\"uint256[]\"}],\"name\":\"batchRetrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"old_account\",\"type\":\"address\"}],\"name\":\"findReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"old_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isReadyToSave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"old_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenSavior", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8654dedfcb412782694da52218d192a45965a09ae821e3c16c0b41cc34728c29"}]}